Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[67.67746069751547 50] 117.67746069751547]
Train Case:   1 | Input/Output: [[25.40260315790117 -56] -30.59739684209883]
Train Case:   2 | Input/Output: [[-10.90152886034656 5] -5.901528860346559]
Train Case:   3 | Input/Output: [[63.38480672558947 -39] 24.38480672558947]
Train Case:   4 | Input/Output: [[-80.89907953635313 -39] -119.89907953635313]
Train Case:   5 | Input/Output: [[97.1946278343786 46] 143.1946278343786]
Train Case:   6 | Input/Output: [[58.86254465076837 -48] 10.86254465076837]
Train Case:   7 | Input/Output: [[38.64586527794506 89] 127.64586527794506]
Train Case:   8 | Input/Output: [[-1.1872634573710314 73] 71.81273654262897]
Train Case:   9 | Input/Output: [[-54.914822432789244 37] -17.914822432789244]
Train Case:  10 | Input/Output: [[4.2683698203808405 89] 93.26836982038084]
Train Case:  11 | Input/Output: [[-66.85015626266093 68] 1.1498437373390686]
Train Case:  12 | Input/Output: [[77.11987343986459 8] 85.11987343986459]
Train Case:  13 | Input/Output: [[-36.50357323110494 -26] -62.50357323110494]
Train Case:  14 | Input/Output: [[85.79318033328082 -54] 31.793180333280816]
Train Case:  15 | Input/Output: [[-84.29342900347683 -38] -122.29342900347683]
Train Case:  16 | Input/Output: [[78.90495862535988 34] 112.90495862535988]
Train Case:  17 | Input/Output: [[70.10034616420785 -86] -15.89965383579215]
Train Case:  18 | Input/Output: [[83.98069048264898 40] 123.98069048264898]
Train Case:  19 | Input/Output: [[-82.33314203781303 4] -78.33314203781303]
Train Case:  20 | Input/Output: [[-17.223033075615874 84] 66.77696692438413]
Train Case:  21 | Input/Output: [[-53.28260706234349 57] 3.7173929376565127]
Train Case:  22 | Input/Output: [[31.37506685623194 78] 109.37506685623194]
Train Case:  23 | Input/Output: [[-30.448702827283938 47] 16.551297172716062]
Train Case:  24 | Input/Output: [[69.1961711525112 -38] 31.196171152511198]
Test Case:   0 | Input/Output: [[34.395819852483356 -57] -22.604180147516644]
Test Case:   1 | Input/Output: [[96.63144300521327 67] 163.63144300521327]
Test Case:   2 | Input/Output: [[-33.024626720038725 30] -3.024626720038725]
Test Case:   3 | Input/Output: [[82.64424513090171 -86] -3.3557548690982912]
Test Case:   4 | Input/Output: [[-61.358558641334994 -93] -154.35855864133498]
Test Case:   5 | Input/Output: [[73.83725198475543 4] 77.83725198475543]
Test Case:   6 | Input/Output: [[-26.30188531426016 -11] -37.30188531426016]
Test Case:   7 | Input/Output: [[3.3088700723745035 -64] -60.6911299276255]
Test Case:   8 | Input/Output: [[25.955801990085874 -75] -49.044198009914126]
Test Case:   9 | Input/Output: [[-41.14157113688033 57] 15.85842886311967]
Test Case:  10 | Input/Output: [[18.339509667171512 82] 100.33950966717151]
Test Case:  11 | Input/Output: [[-70.87255269061114 17] -53.872552690611144]
Test Case:  12 | Input/Output: [[-48.694722851802894 -42] -90.6947228518029]
Test Case:  13 | Input/Output: [[32.64128269079245 69] 101.64128269079245]
Test Case:  14 | Input/Output: [[88.3070677428469 -10] 78.3070677428469]
Test Case:  15 | Input/Output: [[8.541210779020233 32] 40.54121077902023]
Test Case:  16 | Input/Output: [[-99.8933667035697 -83] -182.8933667035697]
Test Case:  17 | Input/Output: [[38.92262364484836 64] 102.92262364484836]
Test Case:  18 | Input/Output: [[-65.96973550287316 86] 20.030264497126836]
Test Case:  19 | Input/Output: [[12.65473443659748 100] 112.65473443659748]
Test Case:  20 | Input/Output: [[-20.04840587258319 -51] -71.04840587258319]
Test Case:  21 | Input/Output: [[9.684769785953932 55] 64.68476978595393]
Test Case:  22 | Input/Output: [[89.60818171062624 67] 156.60818171062624]
Test Case:  23 | Input/Output: [[79.50868226243156 77] 156.50868226243156]
Test Case:  24 | Input/Output: [[-16.896403179805958 78] 61.10359682019404]
Test Case:  25 | Input/Output: [[-14.522503107138519 -55] -69.52250310713852]
Test Case:  26 | Input/Output: [[74.42067390159136 84] 158.42067390159136]
Test Case:  27 | Input/Output: [[90.40515219077074 -44] 46.405152190770735]
Test Case:  28 | Input/Output: [[43.75022096866584 18] 61.75022096866584]
Test Case:  29 | Input/Output: [[-10.152485748182642 48] 37.84751425181736]
Test Case:  30 | Input/Output: [[-62.01205092744841 -22] -84.01205092744841]
Test Case:  31 | Input/Output: [[18.026589946652052 -88] -69.97341005334795]
Test Case:  32 | Input/Output: [[-50.77506482131717 -50] -100.77506482131717]
Test Case:  33 | Input/Output: [[39.544083972243214 -29] 10.544083972243214]
Test Case:  34 | Input/Output: [[-90.4264849173629 60] -30.4264849173629]
Test Case:  35 | Input/Output: [[-24.639193261691588 -58] -82.63919326169159]
Test Case:  36 | Input/Output: [[52.013383464021956 100] 152.01338346402196]
Test Case:  37 | Input/Output: [[-6.981499396259409 90] 83.01850060374059]
Test Case:  38 | Input/Output: [[-88.06552971885601 -70] -158.065529718856]
Test Case:  39 | Input/Output: [[35.02406942818851 -36] -0.9759305718114888]
Test Case:  40 | Input/Output: [[54.78766309895525 96] 150.78766309895525]
Test Case:  41 | Input/Output: [[16.444749041657076 -24] -7.555250958342924]
Test Case:  42 | Input/Output: [[32.603281030546725 -57] -24.396718969453275]
Test Case:  43 | Input/Output: [[39.06765395928363 30] 69.06765395928363]
Test Case:  44 | Input/Output: [[20.47267722030898 50] 70.47267722030898]
Test Case:  45 | Input/Output: [[-31.024976456977967 44] 12.975023543022033]
Test Case:  46 | Input/Output: [[94.26361483117176 43] 137.26361483117176]
Test Case:  47 | Input/Output: [[89.2815693206831 85] 174.2815693206831]
Test Case:  48 | Input/Output: [[-38.126496877592174 -93] -131.12649687759216]
Test Case:  49 | Input/Output: [[-50.266359130377204 -21] -71.2663591303772]
Test Case:  50 | Input/Output: [[-0.18890175149357447 71] 70.81109824850643]
Test Case:  51 | Input/Output: [[21.529856745412545 -61] -39.470143254587455]
Test Case:  52 | Input/Output: [[38.75903638367532 -11] 27.759036383675323]
Test Case:  53 | Input/Output: [[-68.456973880613 -67] -135.45697388061302]
Test Case:  54 | Input/Output: [[-91.91933745372862 -100] -191.91933745372862]
Test Case:  55 | Input/Output: [[-17.939824011974096 35] 17.060175988025904]
Test Case:  56 | Input/Output: [[-91.86964980079529 -63] -154.8696498007953]
Test Case:  57 | Input/Output: [[-80.19036436300658 -85] -165.19036436300658]
Test Case:  58 | Input/Output: [[59.513713296370355 58] 117.51371329637036]
Test Case:  59 | Input/Output: [[-53.41909955461481 58] 4.58090044538519]
Test Case:  60 | Input/Output: [[20.58163804878413 18] 38.58163804878413]
Test Case:  61 | Input/Output: [[53.60966466388612 -17] 36.60966466388612]
Test Case:  62 | Input/Output: [[19.94013855364993 -21] -1.0598614463500695]
Test Case:  63 | Input/Output: [[57.91229842362716 -11] 46.91229842362716]
Test Case:  64 | Input/Output: [[62.04673034158324 31] 93.04673034158324]
Test Case:  65 | Input/Output: [[43.422638908494264 -8] 35.422638908494264]
Test Case:  66 | Input/Output: [[-33.30725436893118 47] 13.692745631068817]
Test Case:  67 | Input/Output: [[-5.59005927332899 -93] -98.59005927332899]
Test Case:  68 | Input/Output: [[-1.4927642518365758 -84] -85.49276425183658]
Test Case:  69 | Input/Output: [[-94.45170329932068 84] -10.451703299320684]
Test Case:  70 | Input/Output: [[-36.337701835604186 -36] -72.33770183560418]
Test Case:  71 | Input/Output: [[-6.80235256742219 -62] -68.80235256742219]
Test Case:  72 | Input/Output: [[-8.597167009635058 83] 74.40283299036494]
Test Case:  73 | Input/Output: [[-87.04052258561421 87] -0.0405225856142124]
Test Case:  74 | Input/Output: [[-0.9947617115764444 38] 37.005238288423556]
Test Case:  75 | Input/Output: [[-85.19092499109331 77] -8.190924991093311]
Test Case:  76 | Input/Output: [[-93.40147468952946 -29] -122.40147468952946]
Test Case:  77 | Input/Output: [[92.58862049140214 -18] 74.58862049140214]
Test Case:  78 | Input/Output: [[98.05921558239203 65] 163.05921558239203]
Test Case:  79 | Input/Output: [[-41.538716238986154 -78] -119.53871623898615]
Test Case:  80 | Input/Output: [[-9.193063131036183 78] 68.80693686896382]
Test Case:  81 | Input/Output: [[-69.0550806637364 100] 30.944919336263595]
Test Case:  82 | Input/Output: [[-47.02637226408295 -1] -48.02637226408295]
Test Case:  83 | Input/Output: [[37.763617658131864 -28] 9.763617658131864]
Test Case:  84 | Input/Output: [[-40.00240560841235 27] -13.002405608412353]
Test Case:  85 | Input/Output: [[90.89805842797895 -96] -5.1019415720210475]
Test Case:  86 | Input/Output: [[94.74452384252817 29] 123.74452384252817]
Test Case:  87 | Input/Output: [[-91.59911566953679 -19] -110.59911566953679]
Test Case:  88 | Input/Output: [[7.959499189877377 80] 87.95949918987738]
Test Case:  89 | Input/Output: [[97.20690058774542 -16] 81.20690058774542]
Test Case:  90 | Input/Output: [[10.33816948316894 57] 67.33816948316894]
Test Case:  91 | Input/Output: [[71.90510963023195 -74] -2.094890369768052]
Test Case:  92 | Input/Output: [[41.71059425001724 -19] 22.710594250017238]
Test Case:  93 | Input/Output: [[85.92112846124635 14] 99.92112846124635]
Test Case:  94 | Input/Output: [[47.06379548855327 -68] -20.936204511446732]
Test Case:  95 | Input/Output: [[21.558879335603237 5] 26.558879335603237]
Test Case:  96 | Input/Output: [[85.60249600707292 75] 160.60249600707292]
Test Case:  97 | Input/Output: [[68.02305732077033 -70] -1.9769426792296656]
Test Case:  98 | Input/Output: [[-78.21838029260653 3] -75.21838029260653]
Test Case:  99 | Input/Output: [[-32.23450930936842 60] 27.76549069063158]
Test Case: 100 | Input/Output: [[32.581120810760666 -76] -43.418879189239334]
Test Case: 101 | Input/Output: [[29.272093418869616 1] 30.272093418869616]
Test Case: 102 | Input/Output: [[-33.41333084567519 -49] -82.41333084567519]
Test Case: 103 | Input/Output: [[95.43661693149909 92] 187.4366169314991]
Test Case: 104 | Input/Output: [[32.22794469539252 51] 83.22794469539252]
Test Case: 105 | Input/Output: [[74.650935040897 16] 90.650935040897]
Test Case: 106 | Input/Output: [[59.759105364412335 49] 108.75910536441233]
Test Case: 107 | Input/Output: [[-2.5666859877104002 -34] -36.5666859877104]
Test Case: 108 | Input/Output: [[-5.78741626226342 35] 29.21258373773658]
Test Case: 109 | Input/Output: [[-24.750187200171567 -98] -122.75018720017157]
Test Case: 110 | Input/Output: [[-8.216195784041801 100] 91.7838042159582]
Test Case: 111 | Input/Output: [[-81.30951690558803 -75] -156.30951690558803]
Test Case: 112 | Input/Output: [[0.002835996362023252 -16] -15.997164003637977]
Test Case: 113 | Input/Output: [[-79.07619084523805 94] 14.923809154761955]
Test Case: 114 | Input/Output: [[6.294757694580696 -4] 2.294757694580696]
Test Case: 115 | Input/Output: [[-75.05965508308083 4] -71.05965508308083]
Test Case: 116 | Input/Output: [[-23.35785066516567 -40] -63.35785066516567]
Test Case: 117 | Input/Output: [[-92.00886710750709 18] -74.00886710750709]
Test Case: 118 | Input/Output: [[75.1086797349326 -34] 41.10867973493259]
Test Case: 119 | Input/Output: [[93.21671591172179 -15] 78.21671591172179]
Test Case: 120 | Input/Output: [[-97.96043238908427 4] -93.96043238908427]
Test Case: 121 | Input/Output: [[12.792984260774332 9] 21.792984260774332]
Test Case: 122 | Input/Output: [[-11.894113853315218 -72] -83.89411385331522]
Test Case: 123 | Input/Output: [[35.68871026306812 -100] -64.31128973693188]
Test Case: 124 | Input/Output: [[36.25411085044311 -81] -44.74588914955689]
Test Case: 125 | Input/Output: [[35.03004701213928 -25] 10.030047012139278]
Test Case: 126 | Input/Output: [[49.8267867790544 -41] 8.826786779054402]
Test Case: 127 | Input/Output: [[72.97963038945099 40] 112.97963038945099]
Test Case: 128 | Input/Output: [[25.020898876708017 28] 53.02089887670802]
Test Case: 129 | Input/Output: [[85.92309932854172 -82] 3.923099328541724]
Test Case: 130 | Input/Output: [[93.71962629400042 -99] -5.28037370599958]
Test Case: 131 | Input/Output: [[59.59712363211506 1] 60.59712363211506]
Test Case: 132 | Input/Output: [[90.21156708393292 -43] 47.21156708393292]
Test Case: 133 | Input/Output: [[-36.81546806255105 -91] -127.81546806255105]
Test Case: 134 | Input/Output: [[92.05132758855939 67] 159.0513275885594]
Test Case: 135 | Input/Output: [[-75.06253494027393 -91] -166.06253494027393]
Test Case: 136 | Input/Output: [[-20.27214556422092 -68] -88.27214556422092]
Test Case: 137 | Input/Output: [[79.3925917096769 69] 148.3925917096769]
Test Case: 138 | Input/Output: [[71.04925859776597 -95] -23.95074140223403]
Test Case: 139 | Input/Output: [[-38.52275442892383 -67] -105.52275442892383]
Test Case: 140 | Input/Output: [[56.72952918055114 52] 108.72952918055114]
Test Case: 141 | Input/Output: [[-73.92691552415391 -79] -152.9269155241539]
Test Case: 142 | Input/Output: [[-77.63207365626737 13] -64.63207365626737]
Test Case: 143 | Input/Output: [[-69.35387249889253 49] -20.353872498892528]
Test Case: 144 | Input/Output: [[-89.69043831517634 2] -87.69043831517634]
Test Case: 145 | Input/Output: [[30.323829625630196 42] 72.3238296256302]
Test Case: 146 | Input/Output: [[-1.1131211601328062 -97] -98.1131211601328]
Test Case: 147 | Input/Output: [[2.8554063794938855 -27] -24.144593620506114]
Test Case: 148 | Input/Output: [[21.702197764532173 69] 90.70219776453217]
Test Case: 149 | Input/Output: [[4.167631151340629 -99] -94.83236884865937]
Test Case: 150 | Input/Output: [[-86.64282211710687 -32] -118.64282211710687]
Test Case: 151 | Input/Output: [[93.20266396646645 64] 157.20266396646645]
Test Case: 152 | Input/Output: [[93.91791864289405 67] 160.91791864289405]
Test Case: 153 | Input/Output: [[-18.098252387820438 60] 41.90174761217956]
Test Case: 154 | Input/Output: [[-75.9016804565513 -10] -85.9016804565513]
Test Case: 155 | Input/Output: [[64.31696783332293 90] 154.31696783332293]
Test Case: 156 | Input/Output: [[-23.831138755092482 -92] -115.83113875509248]
Test Case: 157 | Input/Output: [[56.80151875506431 36] 92.80151875506431]
Test Case: 158 | Input/Output: [[-89.27446347326588 19] -70.27446347326588]
Test Case: 159 | Input/Output: [[-28.123978616556627 -62] -90.12397861655663]
Test Case: 160 | Input/Output: [[49.86162396248076 16] 65.86162396248076]
Test Case: 161 | Input/Output: [[91.21571651141988 -76] 15.215716511419885]
Test Case: 162 | Input/Output: [[21.04846651314351 -71] -49.95153348685649]
Test Case: 163 | Input/Output: [[-13.281510209941061 -86] -99.28151020994106]
Test Case: 164 | Input/Output: [[-81.11232002347964 -80] -161.11232002347964]
Test Case: 165 | Input/Output: [[17.258894085968905 25] 42.258894085968905]
Test Case: 166 | Input/Output: [[38.935621278544744 -42] -3.064378721455256]
Test Case: 167 | Input/Output: [[-37.00038583979701 -84] -121.00038583979702]
Test Case: 168 | Input/Output: [[37.311707980010425 -63] -25.688292019989575]
Test Case: 169 | Input/Output: [[-18.451597410022245 63] 44.548402589977755]
Test Case: 170 | Input/Output: [[-91.25002816431218 37] -54.250028164312184]
Test Case: 171 | Input/Output: [[1.2477844452037488 85] 86.24778444520375]
Test Case: 172 | Input/Output: [[-43.1386061752141 91] 47.8613938247859]
Test Case: 173 | Input/Output: [[93.1345285153235 27] 120.1345285153235]
Test Case: 174 | Input/Output: [[-74.30839664465525 -27] -101.30839664465525]
Test Case: 175 | Input/Output: [[97.77253915483567 64] 161.77253915483567]
Test Case: 176 | Input/Output: [[-28.829787062848382 20] -8.829787062848382]
Test Case: 177 | Input/Output: [[-52.17077746852701 -94] -146.170777468527]
Test Case: 178 | Input/Output: [[-90.13510239654244 2] -88.13510239654244]
Test Case: 179 | Input/Output: [[94.10718116922732 -59] 35.10718116922732]
Test Case: 180 | Input/Output: [[-27.420202840405892 48] 20.579797159594108]
Test Case: 181 | Input/Output: [[13.291184083690126 78] 91.29118408369013]
Test Case: 182 | Input/Output: [[96.37646296824491 40] 136.3764629682449]
Test Case: 183 | Input/Output: [[27.88879687086822 -44] -16.11120312913178]
Test Case: 184 | Input/Output: [[39.16521127126745 53] 92.16521127126745]
Test Case: 185 | Input/Output: [[-40.880509656007206 50] 9.119490343992794]
Test Case: 186 | Input/Output: [[-70.6649920874952 88] 17.335007912504807]
Test Case: 187 | Input/Output: [[95.31795667531634 -43] 52.31795667531634]
Test Case: 188 | Input/Output: [[40.42737126514828 93] 133.42737126514828]
Test Case: 189 | Input/Output: [[92.5514365895396 59] 151.5514365895396]
Test Case: 190 | Input/Output: [[5.467781287939914 97] 102.46778128793991]
Test Case: 191 | Input/Output: [[48.5597282953766 33] 81.5597282953766]
Test Case: 192 | Input/Output: [[4.087455086151252 -58] -53.91254491384875]
Test Case: 193 | Input/Output: [[97.25529362107952 -62] 35.25529362107952]
Test Case: 194 | Input/Output: [[23.4128306206092 -83] -59.5871693793908]
Test Case: 195 | Input/Output: [[-6.013652451318933 -26] -32.01365245131893]
Test Case: 196 | Input/Output: [[40.38799017676658 -89] -48.61200982323342]
Test Case: 197 | Input/Output: [[84.14332306716983 -27] 57.14332306716983]
Test Case: 198 | Input/Output: [[98.7362870836657 -20] 78.7362870836657]
Test Case: 199 | Input/Output: [[94.42514137725183 -94] 0.4251413772518333]
Test Case: 200 | Input/Output: [[-7.085830089091189 -50] -57.08583008909119]
Test Case: 201 | Input/Output: [[69.3095298167186 -42] 27.309529816718594]
Test Case: 202 | Input/Output: [[-6.607610583653937 40] 33.39238941634606]
Test Case: 203 | Input/Output: [[-80.64320412454391 -37] -117.64320412454391]
Test Case: 204 | Input/Output: [[-15.70968239355419 33] 17.29031760644581]
Test Case: 205 | Input/Output: [[-92.50858739794619 -81] -173.5085873979462]
Test Case: 206 | Input/Output: [[3.632694534397544 30] 33.632694534397544]
Test Case: 207 | Input/Output: [[-13.028941965821133 -39] -52.02894196582113]
Test Case: 208 | Input/Output: [[-67.10143335743572 91] 23.898566642564276]
Test Case: 209 | Input/Output: [[-32.287821950838165 -69] -101.28782195083816]
Test Case: 210 | Input/Output: [[-83.01612125809945 11] -72.01612125809945]
Test Case: 211 | Input/Output: [[-42.70521650670267 6] -36.70521650670267]
Test Case: 212 | Input/Output: [[-95.9735707968167 -16] -111.9735707968167]
Test Case: 213 | Input/Output: [[-18.618507916343873 70] 51.38149208365613]
Test Case: 214 | Input/Output: [[80.50435632570378 51] 131.50435632570378]
Test Case: 215 | Input/Output: [[-20.003422141447174 23] 2.9965778585528255]
Test Case: 216 | Input/Output: [[-45.43263168596621 -75] -120.43263168596621]
Test Case: 217 | Input/Output: [[-96.1656537467839 6] -90.1656537467839]
Test Case: 218 | Input/Output: [[-97.5344706563903 -12] -109.5344706563903]
Test Case: 219 | Input/Output: [[-7.043268788904982 -50] -57.04326878890498]
Test Case: 220 | Input/Output: [[90.61098183350708 9] 99.61098183350708]
Test Case: 221 | Input/Output: [[-51.59591416617979 94] 42.40408583382021]
Test Case: 222 | Input/Output: [[-50.1294607012337 73] 22.870539298766303]
Test Case: 223 | Input/Output: [[47.962789231539176 81] 128.96278923153918]
Test Case: 224 | Input/Output: [[-23.37774520338816 38] 14.622254796611841]
Test Case: 225 | Input/Output: [[-16.104720022123658 34] 17.895279977876342]
Test Case: 226 | Input/Output: [[93.40765874939015 35] 128.40765874939015]
Test Case: 227 | Input/Output: [[23.821332190527357 51] 74.82133219052736]
Test Case: 228 | Input/Output: [[71.05154806303838 -91] -19.948451936961618]
Test Case: 229 | Input/Output: [[54.32349052291144 -34] 20.32349052291144]
Test Case: 230 | Input/Output: [[43.965675849266404 -84] -40.034324150733596]
Test Case: 231 | Input/Output: [[90.1821082805964 -50] 40.182108280596395]
Test Case: 232 | Input/Output: [[77.86913117554616 52] 129.86913117554616]
Test Case: 233 | Input/Output: [[-14.816906101106525 -8] -22.816906101106525]
Test Case: 234 | Input/Output: [[-63.61872738536487 62] -1.6187273853648705]
Test Case: 235 | Input/Output: [[43.641937314967095 2] 45.641937314967095]
Test Case: 236 | Input/Output: [[7.5807190438604835 99] 106.58071904386048]
Test Case: 237 | Input/Output: [[-74.88333921311275 17] -57.88333921311275]
Test Case: 238 | Input/Output: [[67.967905136262 88] 155.967905136262]
Test Case: 239 | Input/Output: [[-41.80122329038301 -11] -52.80122329038301]
Test Case: 240 | Input/Output: [[19.551131639333846 -76] -56.448868360666154]
Test Case: 241 | Input/Output: [[25.473670984234914 43] 68.47367098423491]
Test Case: 242 | Input/Output: [[-50.729452632721774 -43] -93.72945263272177]
Test Case: 243 | Input/Output: [[-7.937744703117744 -11] -18.937744703117744]
Test Case: 244 | Input/Output: [[-24.778902095311707 73] 48.22109790468829]
Test Case: 245 | Input/Output: [[4.333186065376424 -51] -46.666813934623576]
Test Case: 246 | Input/Output: [[65.61637077458556 43] 108.61637077458556]
Test Case: 247 | Input/Output: [[3.389258402744403 7] 10.389258402744403]
Test Case: 248 | Input/Output: [[66.7195188005573 -9] 57.719518800557296]
Test Case: 249 | Input/Output: [[-83.702896861872 -62] -145.702896861872]
Test Case: 250 | Input/Output: [[-57.08474322019621 27] -30.08474322019621]
Test Case: 251 | Input/Output: [[-11.203344246976684 13] 1.796655753023316]
Test Case: 252 | Input/Output: [[-43.03758317013777 -51] -94.03758317013776]
Test Case: 253 | Input/Output: [[-16.88607315558876 78] 61.11392684441124]
Test Case: 254 | Input/Output: [[-16.912674637615183 -82] -98.91267463761518]
Test Case: 255 | Input/Output: [[-93.46360413594515 -72] -165.46360413594516]
Test Case: 256 | Input/Output: [[-42.0363687068328 20] -22.036368706832803]
Test Case: 257 | Input/Output: [[-99.78679448327368 95] -4.786794483273681]
Test Case: 258 | Input/Output: [[16.705839234409964 97] 113.70583923440996]
Test Case: 259 | Input/Output: [[3.0112672190550427 58] 61.01126721905504]
Test Case: 260 | Input/Output: [[-66.84614345344464 58] -8.84614345344464]
Test Case: 261 | Input/Output: [[95.26131589390249 -58] 37.26131589390249]
Test Case: 262 | Input/Output: [[49.379560738375545 23] 72.37956073837555]
Test Case: 263 | Input/Output: [[21.511716655566218 14] 35.51171665556622]
Test Case: 264 | Input/Output: [[10.994202251472473 64] 74.99420225147247]
Test Case: 265 | Input/Output: [[37.720653980402886 30] 67.72065398040289]
Test Case: 266 | Input/Output: [[-5.816537204303302 11] 5.183462795696698]
Test Case: 267 | Input/Output: [[-90.63887674329769 -83] -173.6388767432977]
Test Case: 268 | Input/Output: [[80.58597082542914 29] 109.58597082542914]
Test Case: 269 | Input/Output: [[-34.61254919158445 80] 45.38745080841555]
Test Case: 270 | Input/Output: [[-64.8948555820318 -29] -93.8948555820318]
Test Case: 271 | Input/Output: [[92.23746598838204 -92] 0.23746598838204136]
Test Case: 272 | Input/Output: [[-13.742099278675 10] -3.742099278674999]
Test Case: 273 | Input/Output: [[-2.4080006186088667 37] 34.59199938139113]
Test Case: 274 | Input/Output: [[-78.10050834328628 41] -37.10050834328628]
Test Case: 275 | Input/Output: [[7.717708011757125 -55] -47.282291988242875]
Test Case: 276 | Input/Output: [[-96.19550341735341 -26] -122.19550341735341]
Test Case: 277 | Input/Output: [[-32.31867130109221 -12] -44.31867130109221]
Test Case: 278 | Input/Output: [[30.807639799057768 -52] -21.192360200942232]
Test Case: 279 | Input/Output: [[-87.99544000052224 90] 2.004559999477763]
Test Case: 280 | Input/Output: [[55.1655090503499 76] 131.1655090503499]
Test Case: 281 | Input/Output: [[89.44293003007428 -28] 61.44293003007428]
Test Case: 282 | Input/Output: [[29.91841250709132 -20] 9.918412507091318]
Test Case: 283 | Input/Output: [[20.197692344213465 -79] -58.802307655786535]
Test Case: 284 | Input/Output: [[-28.752790454119932 10] -18.752790454119932]
Test Case: 285 | Input/Output: [[27.50310840478376 13] 40.50310840478376]
Test Case: 286 | Input/Output: [[-2.7330277976958826 71] 68.26697220230412]
Test Case: 287 | Input/Output: [[-37.19827262278943 -88] -125.19827262278943]
Test Case: 288 | Input/Output: [[-49.83788811177756 -29] -78.83788811177756]
Test Case: 289 | Input/Output: [[-26.602769497341725 -22] -48.602769497341725]
Test Case: 290 | Input/Output: [[-59.53960647498606 -21] -80.53960647498606]
Test Case: 291 | Input/Output: [[-5.344251788754491 -14] -19.34425178875449]
Test Case: 292 | Input/Output: [[46.74395707453601 1] 47.74395707453601]
Test Case: 293 | Input/Output: [[80.50120192885333 -78] 2.501201928853334]
Test Case: 294 | Input/Output: [[18.213566656820362 -44] -25.786433343179638]
Test Case: 295 | Input/Output: [[-3.4221551171445412 73] 69.57784488285546]
Test Case: 296 | Input/Output: [[-31.353421793223163 49] 17.646578206776837]
Test Case: 297 | Input/Output: [[77.06083151861631 -45] 32.06083151861631]
Test Case: 298 | Input/Output: [[-5.457439518660351 -25] -30.45743951866035]
Test Case: 299 | Input/Output: [[-2.4956454431689536 -52] -54.495645443168954]
Test Case: 300 | Input/Output: [[-58.9880470083614 -73] -131.9880470083614]
Test Case: 301 | Input/Output: [[-66.11425778613403 -39] -105.11425778613403]
Test Case: 302 | Input/Output: [[65.72333973384218 53] 118.72333973384218]
Test Case: 303 | Input/Output: [[-42.14600705876392 -92] -134.14600705876393]
Test Case: 304 | Input/Output: [[-69.32700656142003 -90] -159.32700656142003]
Test Case: 305 | Input/Output: [[29.768081982761174 -68] -38.231918017238826]
Test Case: 306 | Input/Output: [[27.67925440926382 64] 91.67925440926382]
Test Case: 307 | Input/Output: [[-40.35310881202987 8] -32.35310881202987]
Test Case: 308 | Input/Output: [[-79.34595176699182 -79] -158.34595176699182]
Test Case: 309 | Input/Output: [[87.01556502540774 74] 161.01556502540774]
Test Case: 310 | Input/Output: [[77.48621687340517 45] 122.48621687340517]
Test Case: 311 | Input/Output: [[-82.14522416893158 88] 5.854775831068423]
Test Case: 312 | Input/Output: [[-21.120081817816157 13] -8.120081817816157]
Test Case: 313 | Input/Output: [[34.27437867868201 -31] 3.2743786786820124]
Test Case: 314 | Input/Output: [[-49.82854541409147 -60] -109.82854541409148]
Test Case: 315 | Input/Output: [[-23.22591886563454 23] -0.2259188656345401]
Test Case: 316 | Input/Output: [[-27.59046733061423 39] 11.409532669385769]
Test Case: 317 | Input/Output: [[41.395035075950574 56] 97.39503507595057]
Test Case: 318 | Input/Output: [[-67.76756804659328 73] 5.232431953406717]
Test Case: 319 | Input/Output: [[78.06926210965182 11] 89.06926210965182]
Test Case: 320 | Input/Output: [[31.444981415922257 40] 71.44498141592226]
Test Case: 321 | Input/Output: [[-1.5097072738386288 52] 50.49029272616137]
Test Case: 322 | Input/Output: [[-17.55178021379227 -41] -58.55178021379227]
Test Case: 323 | Input/Output: [[-29.441234209238473 -69] -98.44123420923847]
Test Case: 324 | Input/Output: [[-21.867380577543145 -8] -29.867380577543145]
Test Case: 325 | Input/Output: [[72.91353635081086 -36] 36.91353635081086]
Test Case: 326 | Input/Output: [[15.204007121998899 80] 95.2040071219989]
Test Case: 327 | Input/Output: [[-6.757438769791065 -39] -45.757438769791065]
Test Case: 328 | Input/Output: [[73.78372211587566 -12] 61.78372211587566]
Test Case: 329 | Input/Output: [[-76.21350162783862 21] -55.213501627838625]
Test Case: 330 | Input/Output: [[-23.619391342885862 -89] -112.61939134288586]
Test Case: 331 | Input/Output: [[-9.354151619795672 89] 79.64584838020433]
Test Case: 332 | Input/Output: [[46.23935314448832 -49] -2.7606468555116805]
Test Case: 333 | Input/Output: [[-40.380494149623416 46] 5.619505850376584]
Test Case: 334 | Input/Output: [[-40.51910273965493 -97] -137.51910273965493]
Test Case: 335 | Input/Output: [[-93.40279275833781 69] -24.40279275833781]
Test Case: 336 | Input/Output: [[-79.19758399978873 23] -56.19758399978873]
Test Case: 337 | Input/Output: [[-14.392222638359868 11] -3.3922226383598684]
Test Case: 338 | Input/Output: [[-38.223865477280405 74] 35.776134522719595]
Test Case: 339 | Input/Output: [[86.8282108962747 -58] 28.828210896274697]
Test Case: 340 | Input/Output: [[-94.21138327551371 -29] -123.21138327551371]
Test Case: 341 | Input/Output: [[-76.78593994076442 52] -24.785939940764422]
Test Case: 342 | Input/Output: [[12.178104132376632 36] 48.17810413237663]
Test Case: 343 | Input/Output: [[29.19570282332822 -93] -63.80429717667178]
Test Case: 344 | Input/Output: [[21.07092774055843 -87] -65.92907225944157]
Test Case: 345 | Input/Output: [[56.56420873963509 -69] -12.435791260364908]
Test Case: 346 | Input/Output: [[-45.18883324489431 48] 2.8111667551056883]
Test Case: 347 | Input/Output: [[9.20620253825328 2] 11.20620253825328]
Test Case: 348 | Input/Output: [[-67.4724591095698 27] -40.4724591095698]
Test Case: 349 | Input/Output: [[-10.49297185528684 0] -10.49297185528684]
Test Case: 350 | Input/Output: [[16.40424590156009 -49] -32.59575409843991]
Test Case: 351 | Input/Output: [[11.855134818002739 -5] 6.855134818002739]
Test Case: 352 | Input/Output: [[-50.5247716452464 -4] -54.5247716452464]
Test Case: 353 | Input/Output: [[60.68686600015383 -37] 23.686866000153827]
Test Case: 354 | Input/Output: [[7.491615443959219 -4] 3.491615443959219]
Test Case: 355 | Input/Output: [[31.270291282038073 68] 99.27029128203807]
Test Case: 356 | Input/Output: [[-89.92990442853761 -16] -105.92990442853761]
Test Case: 357 | Input/Output: [[82.65372843185318 -61] 21.65372843185318]
Test Case: 358 | Input/Output: [[45.68452230784558 23] 68.68452230784558]
Test Case: 359 | Input/Output: [[74.13842676082919 -82] -7.861573239170809]
Test Case: 360 | Input/Output: [[88.87059626258187 21] 109.87059626258187]
Test Case: 361 | Input/Output: [[50.75786036674316 -85] -34.24213963325684]
Test Case: 362 | Input/Output: [[1.3918247042940806 38] 39.39182470429408]
Test Case: 363 | Input/Output: [[-88.31918642531602 -100] -188.31918642531602]
Test Case: 364 | Input/Output: [[-77.898310105519 -28] -105.898310105519]
Test Case: 365 | Input/Output: [[94.4193566273099 -72] 22.419356627309895]
Test Case: 366 | Input/Output: [[-75.70429937551782 -94] -169.70429937551782]
Test Case: 367 | Input/Output: [[93.99881353775214 23] 116.99881353775214]
Test Case: 368 | Input/Output: [[76.12278290308004 96] 172.12278290308004]
Test Case: 369 | Input/Output: [[-69.95896602390879 -42] -111.95896602390879]
Test Case: 370 | Input/Output: [[7.596536940359599 -76] -68.4034630596404]
Test Case: 371 | Input/Output: [[98.23138846118084 28] 126.23138846118084]
Test Case: 372 | Input/Output: [[77.74315670655366 94] 171.74315670655366]
Test Case: 373 | Input/Output: [[-73.65007158218799 -94] -167.650071582188]
Test Case: 374 | Input/Output: [[87.44110726318647 42] 129.44110726318647]
Test Case: 375 | Input/Output: [[48.93705858660351 4] 52.93705858660351]
Test Case: 376 | Input/Output: [[75.3192989014317 -82] -6.680701098568306]
Test Case: 377 | Input/Output: [[-62.94039516492862 -73] -135.94039516492862]
Test Case: 378 | Input/Output: [[27.517881413104803 -71] -43.4821185868952]
Test Case: 379 | Input/Output: [[53.349423022709146 -87] -33.650576977290854]
Test Case: 380 | Input/Output: [[-52.277223294840724 15] -37.277223294840724]
Test Case: 381 | Input/Output: [[8.407182666836889 77] 85.40718266683689]
Test Case: 382 | Input/Output: [[64.21678126042136 -65] -0.7832187395786434]
Test Case: 383 | Input/Output: [[-31.669585179694366 12] -19.669585179694366]
Test Case: 384 | Input/Output: [[-17.059413604869974 84] 66.94058639513003]
Test Case: 385 | Input/Output: [[68.57003407256741 45] 113.57003407256741]
Test Case: 386 | Input/Output: [[89.37482052001837 -16] 73.37482052001837]
Test Case: 387 | Input/Output: [[-81.78831881589753 -95] -176.78831881589753]
Test Case: 388 | Input/Output: [[-3.1658209462208617 100] 96.83417905377914]
Test Case: 389 | Input/Output: [[47.001385546964684 -67] -19.998614453035316]
Test Case: 390 | Input/Output: [[55.29407696458247 -60] -4.705923035417527]
Test Case: 391 | Input/Output: [[-2.0583487172444563 37] 34.941651282755544]
Test Case: 392 | Input/Output: [[13.42676444893543 60] 73.42676444893543]
Test Case: 393 | Input/Output: [[-64.62234603382262 -20] -84.62234603382262]
Test Case: 394 | Input/Output: [[-84.43771931799175 46] -38.43771931799175]
Test Case: 395 | Input/Output: [[-94.34892881175108 31] -63.34892881175108]
Test Case: 396 | Input/Output: [[92.61350462740015 59] 151.61350462740015]
Test Case: 397 | Input/Output: [[51.52820735030656 -6] 45.52820735030656]
Test Case: 398 | Input/Output: [[-6.499852458543458 -70] -76.49985245854346]
Test Case: 399 | Input/Output: [[-5.716714765486714 13] 7.283285234513286]
Test Case: 400 | Input/Output: [[-14.924797319550038 57] 42.07520268044996]
Test Case: 401 | Input/Output: [[28.064407256391064 5] 33.064407256391064]
Test Case: 402 | Input/Output: [[-32.57110298347709 -54] -86.57110298347709]
Test Case: 403 | Input/Output: [[-5.923653017457568 -6] -11.923653017457568]
Test Case: 404 | Input/Output: [[-85.13857559068754 -14] -99.13857559068754]
Test Case: 405 | Input/Output: [[-19.76518706684311 97] 77.23481293315689]
Test Case: 406 | Input/Output: [[-55.911790728116806 95] 39.088209271883194]
Test Case: 407 | Input/Output: [[-30.280722284379152 38] 7.719277715620848]
Test Case: 408 | Input/Output: [[17.83185078698493 92] 109.83185078698493]
Test Case: 409 | Input/Output: [[31.33119368013729 42] 73.33119368013729]
Test Case: 410 | Input/Output: [[51.34526393917125 27] 78.34526393917125]
Test Case: 411 | Input/Output: [[17.543643009327425 -25] -7.456356990672575]
Test Case: 412 | Input/Output: [[-64.87193948919725 90] 25.128060510802754]
Test Case: 413 | Input/Output: [[-25.510269415642256 39] 13.489730584357744]
Test Case: 414 | Input/Output: [[-8.693857164899612 -10] -18.69385716489961]
Test Case: 415 | Input/Output: [[4.965909190695129 -1] 3.965909190695129]
Test Case: 416 | Input/Output: [[71.44750476406725 -16] 55.44750476406725]
Test Case: 417 | Input/Output: [[73.3393738332031 -99] -25.660626166796902]
Test Case: 418 | Input/Output: [[-18.257529966778634 77] 58.742470033221366]
Test Case: 419 | Input/Output: [[-9.915241469383787 -47] -56.91524146938379]
Test Case: 420 | Input/Output: [[72.45975429833163 4] 76.45975429833163]
Test Case: 421 | Input/Output: [[-2.4167342314906506 39] 36.58326576850935]
Test Case: 422 | Input/Output: [[96.061307871759 -38] 58.061307871759]
Test Case: 423 | Input/Output: [[54.0219743300911 1] 55.0219743300911]
Test Case: 424 | Input/Output: [[-50.156453012102546 -24] -74.15645301210255]
Test Case: 425 | Input/Output: [[10.936150921991512 -43] -32.06384907800849]
Test Case: 426 | Input/Output: [[-10.705085261674 86] 75.294914738326]
Test Case: 427 | Input/Output: [[3.936491574749553 -71] -67.06350842525045]
Test Case: 428 | Input/Output: [[-23.689240581321002 9] -14.689240581321002]
Test Case: 429 | Input/Output: [[17.200700119506493 8] 25.200700119506493]
Test Case: 430 | Input/Output: [[73.31096121809952 -5] 68.31096121809952]
Test Case: 431 | Input/Output: [[36.75994951134484 32] 68.75994951134484]
Test Case: 432 | Input/Output: [[93.47707809903278 96] 189.47707809903278]
Test Case: 433 | Input/Output: [[13.345040440332042 -61] -47.65495955966796]
Test Case: 434 | Input/Output: [[52.30901377568301 -13] 39.30901377568301]
Test Case: 435 | Input/Output: [[44.332654748438785 34] 78.33265474843878]
Test Case: 436 | Input/Output: [[73.04467705320897 -10] 63.04467705320897]
Test Case: 437 | Input/Output: [[35.53616063968542 43] 78.53616063968542]
Test Case: 438 | Input/Output: [[52.03942201344961 -9] 43.03942201344961]
Test Case: 439 | Input/Output: [[91.25157831542421 -38] 53.25157831542421]
Test Case: 440 | Input/Output: [[95.78775800669217 -87] 8.787758006692172]
Test Case: 441 | Input/Output: [[72.88815113976227 -72] 0.8881511397622717]
Test Case: 442 | Input/Output: [[-18.457278705279663 -33] -51.45727870527966]
Test Case: 443 | Input/Output: [[34.579362309094535 39] 73.57936230909453]
Test Case: 444 | Input/Output: [[-51.28943609585925 -30] -81.28943609585926]
Test Case: 445 | Input/Output: [[-96.1698948912536 100] 3.8301051087463946]
Test Case: 446 | Input/Output: [[63.4459248139795 52] 115.4459248139795]
Test Case: 447 | Input/Output: [[-52.95661001639003 -52] -104.95661001639003]
Test Case: 448 | Input/Output: [[84.29744574138357 -3] 81.29744574138357]
Test Case: 449 | Input/Output: [[28.900465911085092 -87] -58.09953408891491]
Test Case: 450 | Input/Output: [[-87.38383771586642 16] -71.38383771586642]
Test Case: 451 | Input/Output: [[40.93819848977992 66] 106.93819848977992]
Test Case: 452 | Input/Output: [[-2.4583256924506856 59] 56.541674307549314]
Test Case: 453 | Input/Output: [[58.186851689324925 -40] 18.186851689324925]
Test Case: 454 | Input/Output: [[32.55495388841754 -24] 8.554953888417543]
Test Case: 455 | Input/Output: [[6.4314610672487476 -80] -73.56853893275125]
Test Case: 456 | Input/Output: [[-89.69099408154943 -70] -159.69099408154943]
Test Case: 457 | Input/Output: [[10.797855874525467 14] 24.797855874525467]
Test Case: 458 | Input/Output: [[93.17718406257828 -37] 56.17718406257828]
Test Case: 459 | Input/Output: [[-42.796457547893965 30] -12.796457547893965]
Test Case: 460 | Input/Output: [[-17.026387150761153 76] 58.97361284923885]
Test Case: 461 | Input/Output: [[29.090031273889565 -6] 23.090031273889565]
Test Case: 462 | Input/Output: [[-49.93727515624302 -54] -103.93727515624302]
Test Case: 463 | Input/Output: [[-15.767672961347088 -90] -105.76767296134709]
Test Case: 464 | Input/Output: [[66.00308942576669 -72] -5.996910574233311]
Test Case: 465 | Input/Output: [[-75.97449189306383 -34] -109.97449189306383]
Test Case: 466 | Input/Output: [[-60.246304714458134 -99] -159.24630471445812]
Test Case: 467 | Input/Output: [[52.23245931503487 38] 90.23245931503487]
Test Case: 468 | Input/Output: [[82.13805028479632 40] 122.13805028479632]
Test Case: 469 | Input/Output: [[99.31372005242517 9] 108.31372005242517]
Test Case: 470 | Input/Output: [[-76.60556129469238 10] -66.60556129469238]
Test Case: 471 | Input/Output: [[75.90315905740312 -76] -0.09684094259688436]
Test Case: 472 | Input/Output: [[7.820575735648873 64] 71.82057573564887]
Test Case: 473 | Input/Output: [[8.831111095843085 17] 25.831111095843085]
Test Case: 474 | Input/Output: [[-74.668511550732 74] -0.6685115507320063]
Test Case: 475 | Input/Output: [[-88.27361189342584 33] -55.27361189342584]
Test Case: 476 | Input/Output: [[-68.72764027984945 -52] -120.72764027984945]
Test Case: 477 | Input/Output: [[13.611857785098081 11] 24.61185778509808]
Test Case: 478 | Input/Output: [[-30.233131418807105 -39] -69.2331314188071]
Test Case: 479 | Input/Output: [[20.95871849172464 1] 21.95871849172464]
Test Case: 480 | Input/Output: [[16.066855948243884 100] 116.06685594824388]
Test Case: 481 | Input/Output: [[77.1502173467224 -75] 2.1502173467223997]
Test Case: 482 | Input/Output: [[-52.99586295490075 33] -19.99586295490075]
Test Case: 483 | Input/Output: [[69.99996145374013 -95] -25.000038546259873]
Test Case: 484 | Input/Output: [[13.819247116380225 65] 78.81924711638023]
Test Case: 485 | Input/Output: [[22.010628331432812 -41] -18.989371668567188]
Test Case: 486 | Input/Output: [[56.31975549090782 -8] 48.31975549090782]
Test Case: 487 | Input/Output: [[-19.358332226677206 59] 39.641667773322794]
Test Case: 488 | Input/Output: [[-94.91452414231472 20] -74.91452414231472]
Test Case: 489 | Input/Output: [[57.66683046311306 82] 139.66683046311306]
Test Case: 490 | Input/Output: [[47.77572535195168 -90] -42.22427464804832]
Test Case: 491 | Input/Output: [[-46.74483222078045 62] 15.255167779219548]
Test Case: 492 | Input/Output: [[83.88510815250149 -95] -11.114891847498512]
Test Case: 493 | Input/Output: [[5.992995524484556 -24] -18.007004475515444]
Test Case: 494 | Input/Output: [[-69.77382796368079 -71] -140.7738279636808]
Test Case: 495 | Input/Output: [[76.03023192981604 93] 169.03023192981604]
Test Case: 496 | Input/Output: [[-8.681718418520319 63] 54.31828158147968]
Test Case: 497 | Input/Output: [[0.6689895632558347 -7] -6.331010436744165]
Test Case: 498 | Input/Output: [[-55.70196491384696 71] 15.298035086153043]
Test Case: 499 | Input/Output: [[19.355767298565098 26] 45.3557672985651]
Test Case: 500 | Input/Output: [[62.48543124086697 0] 62.48543124086697]
Test Case: 501 | Input/Output: [[33.67183505416611 56] 89.67183505416611]
Test Case: 502 | Input/Output: [[98.97072471440362 -42] 56.970724714403616]
Test Case: 503 | Input/Output: [[-54.880641849160085 -70] -124.88064184916009]
Test Case: 504 | Input/Output: [[-46.873610018163724 -32] -78.87361001816373]
Test Case: 505 | Input/Output: [[-87.03268358141014 -53] -140.03268358141014]
Test Case: 506 | Input/Output: [[-53.83180263651353 -98] -151.83180263651354]
Test Case: 507 | Input/Output: [[82.64239787245648 25] 107.64239787245648]
Test Case: 508 | Input/Output: [[45.48258328711313 -19] 26.48258328711313]
Test Case: 509 | Input/Output: [[-86.04923962994069 16] -70.04923962994069]
Test Case: 510 | Input/Output: [[-22.87677190777015 84] 61.12322809222985]
Test Case: 511 | Input/Output: [[32.78064933040628 -57] -24.219350669593723]
Test Case: 512 | Input/Output: [[-73.06563042947212 93] 19.934369570527878]
Test Case: 513 | Input/Output: [[-35.76520012140239 83] 47.23479987859761]
Test Case: 514 | Input/Output: [[-4.184927848266298 -24] -28.184927848266298]
Test Case: 515 | Input/Output: [[24.187765756157248 -41] -16.812234243842752]
Test Case: 516 | Input/Output: [[38.71010939421237 18] 56.71010939421237]
Test Case: 517 | Input/Output: [[-73.18454000503804 -19] -92.18454000503804]
Test Case: 518 | Input/Output: [[56.074637956876785 -71] -14.925362043123215]
Test Case: 519 | Input/Output: [[-23.127205658890432 -24] -47.12720565889043]
Test Case: 520 | Input/Output: [[92.2778074665278 -3] 89.2778074665278]
Test Case: 521 | Input/Output: [[-92.73437819447668 34] -58.734378194476676]
Test Case: 522 | Input/Output: [[-9.836727786704415 -62] -71.83672778670442]
Test Case: 523 | Input/Output: [[90.44819214720542 -20] 70.44819214720542]
Test Case: 524 | Input/Output: [[-81.28646730045759 -84] -165.2864673004576]
Test Case: 525 | Input/Output: [[72.16096711636249 48] 120.16096711636249]
Test Case: 526 | Input/Output: [[-74.96367157579422 29] -45.96367157579422]
Test Case: 527 | Input/Output: [[-79.39331658410087 16] -63.39331658410087]
Test Case: 528 | Input/Output: [[-21.25624302181069 -66] -87.25624302181069]
Test Case: 529 | Input/Output: [[-97.11369241238054 15] -82.11369241238054]
Test Case: 530 | Input/Output: [[66.15579382473868 -3] 63.15579382473868]
Test Case: 531 | Input/Output: [[-34.69149281927912 -76] -110.69149281927912]
Test Case: 532 | Input/Output: [[48.00489998013745 -17] 31.004899980137452]
Test Case: 533 | Input/Output: [[80.16743010695802 -78] 2.1674301069580224]
Test Case: 534 | Input/Output: [[19.227462457429183 77] 96.22746245742918]
Test Case: 535 | Input/Output: [[7.555597666889 6] 13.555597666889]
Test Case: 536 | Input/Output: [[57.23195312542802 4] 61.23195312542802]
Test Case: 537 | Input/Output: [[28.391147922127715 73] 101.39114792212771]
Test Case: 538 | Input/Output: [[-41.306595845372996 96] 54.693404154627004]
Test Case: 539 | Input/Output: [[89.73143542421928 64] 153.73143542421928]
Test Case: 540 | Input/Output: [[-22.618832023775127 98] 75.38116797622487]
Test Case: 541 | Input/Output: [[70.46956694168108 -36] 34.46956694168108]
Test Case: 542 | Input/Output: [[-19.76902420802908 11] -8.76902420802908]
Test Case: 543 | Input/Output: [[80.33408440260686 36] 116.33408440260686]
Test Case: 544 | Input/Output: [[-14.121735453619053 91] 76.87826454638095]
Test Case: 545 | Input/Output: [[-27.582419935467158 -48] -75.58241993546716]
Test Case: 546 | Input/Output: [[79.47591707221079 41] 120.47591707221079]
Test Case: 547 | Input/Output: [[32.52829634804331 -7] 25.528296348043312]
Test Case: 548 | Input/Output: [[-14.22731950642357 -9] -23.22731950642357]
Test Case: 549 | Input/Output: [[-3.819367498437572 47] 43.18063250156243]
Test Case: 550 | Input/Output: [[19.34031831735463 -73] -53.65968168264537]
Test Case: 551 | Input/Output: [[46.363156246300605 -44] 2.363156246300605]
Test Case: 552 | Input/Output: [[20.99346018198196 92] 112.99346018198196]
Test Case: 553 | Input/Output: [[52.254693340443254 -25] 27.254693340443254]
Test Case: 554 | Input/Output: [[-59.46351511580394 -80] -139.46351511580394]
Test Case: 555 | Input/Output: [[-25.896986409838462 98] 72.10301359016154]
Test Case: 556 | Input/Output: [[88.96470748038067 95] 183.96470748038067]
Test Case: 557 | Input/Output: [[-69.59088210422763 -100] -169.59088210422763]
Test Case: 558 | Input/Output: [[82.32398017816718 55] 137.32398017816718]
Test Case: 559 | Input/Output: [[-38.27797311049914 48] 9.72202688950086]
Test Case: 560 | Input/Output: [[95.82526165403513 76] 171.82526165403513]
Test Case: 561 | Input/Output: [[86.11947928435126 -46] 40.11947928435126]
Test Case: 562 | Input/Output: [[-30.16196612617081 -84] -114.16196612617081]
Test Case: 563 | Input/Output: [[63.864764999055325 -67] -3.135235000944675]
Test Case: 564 | Input/Output: [[62.04326244261358 -27] 35.04326244261358]
Test Case: 565 | Input/Output: [[-35.61250328030158 -97] -132.61250328030158]
Test Case: 566 | Input/Output: [[93.75340757172589 68] 161.7534075717259]
Test Case: 567 | Input/Output: [[62.87876922355969 41] 103.87876922355969]
Test Case: 568 | Input/Output: [[55.56725636225195 -56] -0.4327436377480467]
Test Case: 569 | Input/Output: [[95.93181642157828 -85] 10.931816421578276]
Test Case: 570 | Input/Output: [[15.19454277205648 1] 16.19454277205648]
Test Case: 571 | Input/Output: [[94.79870053279501 -98] -3.20129946720499]
Test Case: 572 | Input/Output: [[96.40653575217479 -30] 66.40653575217479]
Test Case: 573 | Input/Output: [[-19.534844526655277 56] 36.46515547334472]
Test Case: 574 | Input/Output: [[2.1562650798086196 39] 41.15626507980862]
Test Case: 575 | Input/Output: [[-91.93824836443585 20] -71.93824836443585]
Test Case: 576 | Input/Output: [[-48.02147334596536 -37] -85.02147334596536]
Test Case: 577 | Input/Output: [[41.83549834148596 -19] 22.83549834148596]
Test Case: 578 | Input/Output: [[0.7165619715534319 -44] -43.28343802844657]
Test Case: 579 | Input/Output: [[44.72405638975988 -45] -0.2759436102401196]
Test Case: 580 | Input/Output: [[-72.22195490891366 56] -16.22195490891366]
Test Case: 581 | Input/Output: [[-77.41759751699868 35] -42.41759751699868]
Test Case: 582 | Input/Output: [[-59.43409044685004 65] 5.565909553149957]
Test Case: 583 | Input/Output: [[62.78265441058889 -10] 52.78265441058889]
Test Case: 584 | Input/Output: [[-99.26360083244026 -36] -135.26360083244026]
Test Case: 585 | Input/Output: [[98.30627115122769 -5] 93.30627115122769]
Test Case: 586 | Input/Output: [[27.97177650206872 13] 40.97177650206872]
Test Case: 587 | Input/Output: [[-97.49558900777602 -46] -143.495589007776]
Test Case: 588 | Input/Output: [[66.60215659651666 64] 130.60215659651666]
Test Case: 589 | Input/Output: [[-85.03665776981735 100] 14.963342230182647]
Test Case: 590 | Input/Output: [[63.50125913119763 -41] 22.501259131197628]
Test Case: 591 | Input/Output: [[-51.733139247839446 23] -28.733139247839446]
Test Case: 592 | Input/Output: [[-7.372784724598631 49] 41.62721527540137]
Test Case: 593 | Input/Output: [[29.223643652550066 -90] -60.77635634744993]
Test Case: 594 | Input/Output: [[-60.409996844594225 29] -31.409996844594225]
Test Case: 595 | Input/Output: [[-86.00612701120953 -86] -172.00612701120951]
Test Case: 596 | Input/Output: [[-25.804744496566244 -93] -118.80474449656624]
Test Case: 597 | Input/Output: [[-80.85395505856525 76] -4.853955058565248]
Test Case: 598 | Input/Output: [[92.46192640593117 70] 162.46192640593117]
Test Case: 599 | Input/Output: [[33.714917614533164 94] 127.71491761453316]
Test Case: 600 | Input/Output: [[24.935718378892588 -3] 21.935718378892588]
Test Case: 601 | Input/Output: [[71.93600213249718 -96] -24.06399786750282]
Test Case: 602 | Input/Output: [[61.50829252081448 18] 79.50829252081448]
Test Case: 603 | Input/Output: [[25.716072102800624 7] 32.716072102800624]
Test Case: 604 | Input/Output: [[19.579195058995637 -31] -11.420804941004363]
Test Case: 605 | Input/Output: [[70.79124217671549 -27] 43.791242176715485]
Test Case: 606 | Input/Output: [[61.038005547007174 24] 85.03800554700717]
Test Case: 607 | Input/Output: [[-56.70591198398518 58] 1.2940880160148183]
Test Case: 608 | Input/Output: [[-34.065194647111326 -55] -89.06519464711133]
Test Case: 609 | Input/Output: [[-27.45704084064853 -6] -33.45704084064853]
Test Case: 610 | Input/Output: [[-22.567667377361886 -26] -48.567667377361886]
Test Case: 611 | Input/Output: [[-1.8526982834864896 -72] -73.85269828348649]
Test Case: 612 | Input/Output: [[-25.65378431844097 -22] -47.65378431844097]
Test Case: 613 | Input/Output: [[45.61324114694517 32] 77.61324114694517]
Test Case: 614 | Input/Output: [[87.98045363872373 -49] 38.98045363872373]
Test Case: 615 | Input/Output: [[50.360911788027096 90] 140.3609117880271]
Test Case: 616 | Input/Output: [[-1.2624082157032745 69] 67.73759178429673]
Test Case: 617 | Input/Output: [[-86.24261732261684 12] -74.24261732261684]
Test Case: 618 | Input/Output: [[92.43597113660516 15] 107.43597113660516]
Test Case: 619 | Input/Output: [[44.256562286477816 76] 120.25656228647782]
Test Case: 620 | Input/Output: [[-69.52593972364652 -12] -81.52593972364652]
Test Case: 621 | Input/Output: [[27.74794784726228 -23] 4.747947847262282]
Test Case: 622 | Input/Output: [[52.14294057713144 -61] -8.85705942286856]
Test Case: 623 | Input/Output: [[99.1799066644653 -100] -0.8200933355346933]
Test Case: 624 | Input/Output: [[-46.55832074053174 -91] -137.55832074053174]
Test Case: 625 | Input/Output: [[-91.26183412309086 -94] -185.26183412309086]
Test Case: 626 | Input/Output: [[65.19203296070478 37] 102.19203296070478]
Test Case: 627 | Input/Output: [[-93.01370952204834 89] -4.0137095220483445]
Test Case: 628 | Input/Output: [[-99.42149425363955 49] -50.42149425363955]
Test Case: 629 | Input/Output: [[96.42490937436412 81] 177.42490937436412]
Test Case: 630 | Input/Output: [[-60.594068122247165 4] -56.594068122247165]
Test Case: 631 | Input/Output: [[54.39777756309297 -61] -6.602222436907027]
Test Case: 632 | Input/Output: [[65.23807886377898 23] 88.23807886377898]
Test Case: 633 | Input/Output: [[20.22797721929524 -18] 2.2279772192952407]
Test Case: 634 | Input/Output: [[58.26536303375232 87] 145.26536303375232]
Test Case: 635 | Input/Output: [[-80.6726902095452 28] -52.672690209545195]
Test Case: 636 | Input/Output: [[73.49164347784506 88] 161.49164347784506]
Test Case: 637 | Input/Output: [[-81.95985953491711 -40] -121.95985953491711]
Test Case: 638 | Input/Output: [[58.99097160636927 46] 104.99097160636927]
Test Case: 639 | Input/Output: [[81.19328032960496 -89] -7.80671967039504]
Test Case: 640 | Input/Output: [[-61.27342945598373 99] 37.72657054401627]
Test Case: 641 | Input/Output: [[57.61025990444409 12] 69.61025990444409]
Test Case: 642 | Input/Output: [[-35.42132152604604 72] 36.57867847395396]
Test Case: 643 | Input/Output: [[47.918984028522175 53] 100.91898402852217]
Test Case: 644 | Input/Output: [[71.84638921667849 18] 89.84638921667849]
Test Case: 645 | Input/Output: [[-34.34210960473534 80] 45.65789039526466]
Test Case: 646 | Input/Output: [[26.504646411841733 16] 42.50464641184173]
Test Case: 647 | Input/Output: [[81.82809811753958 -58] 23.828098117539582]
Test Case: 648 | Input/Output: [[-92.19762642114036 -40] -132.19762642114034]
Test Case: 649 | Input/Output: [[-60.53944865997411 -49] -109.53944865997411]
Test Case: 650 | Input/Output: [[-44.84025143438537 94] 49.15974856561463]
Test Case: 651 | Input/Output: [[-67.15648928730971 -47] -114.15648928730971]
Test Case: 652 | Input/Output: [[-53.409117120726094 100] 46.590882879273906]
Test Case: 653 | Input/Output: [[-87.7216962389787 -47] -134.7216962389787]
Test Case: 654 | Input/Output: [[-60.98409049356495 -52] -112.98409049356495]
Test Case: 655 | Input/Output: [[76.90542987538811 -82] -5.0945701246118915]
Test Case: 656 | Input/Output: [[-96.96021324090644 -60] -156.96021324090646]
Test Case: 657 | Input/Output: [[-59.077956333189285 93] 33.922043666810715]
Test Case: 658 | Input/Output: [[53.33690132914046 67] 120.33690132914046]
Test Case: 659 | Input/Output: [[-28.70099288776875 -20] -48.70099288776875]
Test Case: 660 | Input/Output: [[10.830524898736499 39] 49.8305248987365]
Test Case: 661 | Input/Output: [[-20.687948100657835 -20] -40.687948100657835]
Test Case: 662 | Input/Output: [[-25.832179621057946 -36] -61.832179621057946]
Test Case: 663 | Input/Output: [[-17.807169736557867 -82] -99.80716973655787]
Test Case: 664 | Input/Output: [[37.02532131673931 -36] 1.0253213167393085]
Test Case: 665 | Input/Output: [[58.327014742208775 -79] -20.672985257791225]
Test Case: 666 | Input/Output: [[-7.694917325439519 -19] -26.69491732543952]
Test Case: 667 | Input/Output: [[97.90971877860841 -77] 20.909718778608408]
Test Case: 668 | Input/Output: [[-62.079297199839466 -61] -123.07929719983946]
Test Case: 669 | Input/Output: [[-13.846284208829545 -99] -112.84628420882954]
Test Case: 670 | Input/Output: [[-53.67315178158436 63] 9.326848218415641]
Test Case: 671 | Input/Output: [[73.35918872436272 -6] 67.35918872436272]
Test Case: 672 | Input/Output: [[33.38081361576653 -42] -8.619186384233473]
Test Case: 673 | Input/Output: [[3.3453948168688896 16] 19.34539481686889]
Test Case: 674 | Input/Output: [[28.568598272986463 57] 85.56859827298646]
Test Case: 675 | Input/Output: [[-73.27247787186897 25] -48.27247787186897]
Test Case: 676 | Input/Output: [[-37.55552166747591 -47] -84.55552166747592]
Test Case: 677 | Input/Output: [[-30.10002551919291 -60] -90.10002551919291]
Test Case: 678 | Input/Output: [[-5.8993981351577816 76] 70.10060186484222]
Test Case: 679 | Input/Output: [[-78.31301839202503 -53] -131.31301839202501]
Test Case: 680 | Input/Output: [[-9.483304570186164 -36] -45.483304570186164]
Test Case: 681 | Input/Output: [[8.473994705796443 -6] 2.473994705796443]
Test Case: 682 | Input/Output: [[8.942182059106685 -36] -27.057817940893315]
Test Case: 683 | Input/Output: [[96.22396220007474 100] 196.22396220007474]
Test Case: 684 | Input/Output: [[-44.89918084767268 -87] -131.89918084767268]
Test Case: 685 | Input/Output: [[-41.79360845485598 -83] -124.79360845485598]
Test Case: 686 | Input/Output: [[-88.03167640571007 25] -63.03167640571007]
Test Case: 687 | Input/Output: [[1.6659158323130328 -46] -44.33408416768697]
Test Case: 688 | Input/Output: [[-3.0235175858314136 -70] -73.02351758583141]
Test Case: 689 | Input/Output: [[85.97839014335753 90] 175.97839014335753]
Test Case: 690 | Input/Output: [[-63.98456807323662 73] 9.015431926763377]
Test Case: 691 | Input/Output: [[-90.9591194476125 7] -83.9591194476125]
Test Case: 692 | Input/Output: [[-89.28233899016604 65] -24.28233899016604]
Test Case: 693 | Input/Output: [[31.42031544583881 -85] -53.57968455416119]
Test Case: 694 | Input/Output: [[-30.67807416694825 -55] -85.67807416694825]
Test Case: 695 | Input/Output: [[12.713734395422222 22] 34.71373439542222]
Test Case: 696 | Input/Output: [[7.097543757215746 -54] -46.902456242784254]
Test Case: 697 | Input/Output: [[-84.10578279728131 -21] -105.10578279728131]
Test Case: 698 | Input/Output: [[-23.818141949694365 -52] -75.81814194969436]
Test Case: 699 | Input/Output: [[-47.00665735139682 66] 18.993342648603182]
Test Case: 700 | Input/Output: [[84.11872579432907 -3] 81.11872579432907]
Test Case: 701 | Input/Output: [[-34.300356883337415 -64] -98.30035688333741]
Test Case: 702 | Input/Output: [[-6.294905697774539 4] -2.2949056977745386]
Test Case: 703 | Input/Output: [[-88.03070076443076 80] -8.030700764430762]
Test Case: 704 | Input/Output: [[-44.58088144601602 -8] -52.58088144601602]
Test Case: 705 | Input/Output: [[92.0838802056123 33] 125.0838802056123]
Test Case: 706 | Input/Output: [[-18.23208912922351 -25] -43.23208912922351]
Test Case: 707 | Input/Output: [[-89.95699022188046 9] -80.95699022188046]
Test Case: 708 | Input/Output: [[-25.458932808081386 94] 68.54106719191861]
Test Case: 709 | Input/Output: [[-2.7126013232032733 -79] -81.71260132320327]
Test Case: 710 | Input/Output: [[69.82021688934202 6] 75.82021688934202]
Test Case: 711 | Input/Output: [[-82.43380178723186 -67] -149.43380178723186]
Test Case: 712 | Input/Output: [[25.5400463869712 -87] -61.4599536130288]
Test Case: 713 | Input/Output: [[-21.113619529771796 -4] -25.113619529771796]
Test Case: 714 | Input/Output: [[68.3746966760896 -31] 37.3746966760896]
Test Case: 715 | Input/Output: [[-14.564835414905744 12] -2.564835414905744]
Test Case: 716 | Input/Output: [[28.62247733555151 98] 126.62247733555151]
Test Case: 717 | Input/Output: [[90.69744438816986 8] 98.69744438816986]
Test Case: 718 | Input/Output: [[-99.91383380707131 24] -75.91383380707131]
Test Case: 719 | Input/Output: [[-14.383947092628844 94] 79.61605290737116]
Test Case: 720 | Input/Output: [[50.91587391758594 51] 101.91587391758594]
Test Case: 721 | Input/Output: [[65.50293689199279 -55] 10.502936891992789]
Test Case: 722 | Input/Output: [[78.97087122917512 -24] 54.97087122917512]
Test Case: 723 | Input/Output: [[-43.191904162013685 -52] -95.19190416201369]
Test Case: 724 | Input/Output: [[-16.369699258389687 -6] -22.369699258389687]
Test Case: 725 | Input/Output: [[-13.613236901915442 28] 14.386763098084558]
Test Case: 726 | Input/Output: [[-13.789872720933502 0] -13.789872720933502]
Test Case: 727 | Input/Output: [[59.32755098572076 -27] 32.32755098572076]
Test Case: 728 | Input/Output: [[-39.16622396830751 80] 40.83377603169249]
Test Case: 729 | Input/Output: [[-1.2876652735741771 -51] -52.28766527357418]
Test Case: 730 | Input/Output: [[-37.08996757173766 10] -27.08996757173766]
Test Case: 731 | Input/Output: [[66.07333108310684 -25] 41.07333108310684]
Test Case: 732 | Input/Output: [[66.59959125099383 81] 147.59959125099383]
Test Case: 733 | Input/Output: [[-71.95970453214264 51] -20.959704532142638]
Test Case: 734 | Input/Output: [[-46.56519204735332 -29] -75.56519204735332]
Test Case: 735 | Input/Output: [[18.749889278696813 -86] -67.25011072130319]
Test Case: 736 | Input/Output: [[-50.21671627337938 -20] -70.21671627337938]
Test Case: 737 | Input/Output: [[-51.4934464692635 17] -34.4934464692635]
Test Case: 738 | Input/Output: [[40.01085527317352 -73] -32.98914472682648]
Test Case: 739 | Input/Output: [[-52.61705843283857 -9] -61.61705843283857]
Test Case: 740 | Input/Output: [[97.78105669208483 45] 142.78105669208483]
Test Case: 741 | Input/Output: [[25.268808001137955 -64] -38.731191998862045]
Test Case: 742 | Input/Output: [[26.623261474827913 54] 80.62326147482791]
Test Case: 743 | Input/Output: [[-59.470277568183775 -59] -118.47027756818377]
Test Case: 744 | Input/Output: [[11.762107300154767 -23] -11.237892699845233]
Test Case: 745 | Input/Output: [[85.07094321985136 46] 131.07094321985136]
Test Case: 746 | Input/Output: [[75.08893529374305 -16] 59.08893529374305]
Test Case: 747 | Input/Output: [[-95.35891813249727 -40] -135.35891813249725]
Test Case: 748 | Input/Output: [[-90.5982651673668 17] -73.5982651673668]
Test Case: 749 | Input/Output: [[56.44615275027144 18] 74.44615275027144]
Test Case: 750 | Input/Output: [[-53.49005411627989 11] -42.49005411627989]
Test Case: 751 | Input/Output: [[-33.74117804301274 59] 25.258821956987262]
Test Case: 752 | Input/Output: [[16.03761718022953 30] 46.03761718022953]
Test Case: 753 | Input/Output: [[81.23466236072363 -95] -13.765337639276368]
Test Case: 754 | Input/Output: [[18.33255312358986 11] 29.33255312358986]
Test Case: 755 | Input/Output: [[97.46762555260514 -25] 72.46762555260514]
Test Case: 756 | Input/Output: [[45.70454601128813 42] 87.70454601128813]
Test Case: 757 | Input/Output: [[-91.6403923574056 32] -59.6403923574056]
Test Case: 758 | Input/Output: [[27.231711843351135 -67] -39.768288156648865]
Test Case: 759 | Input/Output: [[48.15997620200582 -76] -27.840023797994178]
Test Case: 760 | Input/Output: [[-65.37075619852182 -32] -97.37075619852182]
Test Case: 761 | Input/Output: [[84.54433874250216 13] 97.54433874250216]
Test Case: 762 | Input/Output: [[-11.229332859837427 61] 49.77066714016257]
Test Case: 763 | Input/Output: [[85.90545968265607 -58] 27.905459682656073]
Test Case: 764 | Input/Output: [[28.224085473980864 -19] 9.224085473980864]
Test Case: 765 | Input/Output: [[-70.35105815455867 48] -22.35105815455867]
Test Case: 766 | Input/Output: [[5.5821378507241235 7] 12.582137850724123]
Test Case: 767 | Input/Output: [[-86.36606689716604 -32] -118.36606689716604]
Test Case: 768 | Input/Output: [[-55.22431920784883 -92] -147.22431920784882]
Test Case: 769 | Input/Output: [[-25.821934415508025 -72] -97.82193441550803]
Test Case: 770 | Input/Output: [[-80.39121103647189 22] -58.39121103647189]
Test Case: 771 | Input/Output: [[22.896300755048202 85] 107.8963007550482]
Test Case: 772 | Input/Output: [[84.13942189998252 -69] 15.139421899982523]
Test Case: 773 | Input/Output: [[89.21024148890163 27] 116.21024148890163]
Test Case: 774 | Input/Output: [[-66.62422870906147 32] -34.62422870906147]
Test Case: 775 | Input/Output: [[12.285141739764583 -57] -44.71485826023542]
Test Case: 776 | Input/Output: [[42.970608469202574 1] 43.970608469202574]
Test Case: 777 | Input/Output: [[-43.36152370527317 36] -7.3615237052731715]
Test Case: 778 | Input/Output: [[55.19756121223941 94] 149.1975612122394]
Test Case: 779 | Input/Output: [[-39.067699708272706 -70] -109.0676997082727]
Test Case: 780 | Input/Output: [[-28.881753160381663 -57] -85.88175316038166]
Test Case: 781 | Input/Output: [[-74.99177640566961 10] -64.99177640566961]
Test Case: 782 | Input/Output: [[-23.886219877149344 -59] -82.88621987714934]
Test Case: 783 | Input/Output: [[-65.62030227598896 16] -49.62030227598896]
Test Case: 784 | Input/Output: [[14.584877349419884 27] 41.584877349419884]
Test Case: 785 | Input/Output: [[56.84573977002211 95] 151.8457397700221]
Test Case: 786 | Input/Output: [[87.73615772338991 57] 144.7361577233899]
Test Case: 787 | Input/Output: [[7.196367497715087 -8] -0.8036325022849127]
Test Case: 788 | Input/Output: [[41.87100017957829 0] 41.87100017957829]
Test Case: 789 | Input/Output: [[-83.45071789271428 -23] -106.45071789271428]
Test Case: 790 | Input/Output: [[51.72754949670539 -59] -7.272450503294607]
Test Case: 791 | Input/Output: [[11.564458622071754 56] 67.56445862207175]
Test Case: 792 | Input/Output: [[-73.95512883382118 39] -34.95512883382118]
Test Case: 793 | Input/Output: [[-34.55156913383304 63] 28.44843086616696]
Test Case: 794 | Input/Output: [[71.48056026773745 95] 166.48056026773745]
Test Case: 795 | Input/Output: [[61.43933983655353 -7] 54.43933983655353]
Test Case: 796 | Input/Output: [[-80.13486055213868 20] -60.134860552138676]
Test Case: 797 | Input/Output: [[34.96380547734594 -60] -25.036194522654057]
Test Case: 798 | Input/Output: [[69.22694284440777 42] 111.22694284440777]
Test Case: 799 | Input/Output: [[-80.78790198006523 -55] -135.78790198006521]
Test Case: 800 | Input/Output: [[-48.863219307398055 40] -8.863219307398055]
Test Case: 801 | Input/Output: [[-51.501944826769616 -89] -140.5019448267696]
Test Case: 802 | Input/Output: [[-10.702976130774601 7] -3.7029761307746014]
Test Case: 803 | Input/Output: [[-64.69176789290748 -70] -134.69176789290748]
Test Case: 804 | Input/Output: [[-43.15726927420511 39] -4.157269274205113]
Test Case: 805 | Input/Output: [[39.78307289589145 25] 64.78307289589145]
Test Case: 806 | Input/Output: [[1.2741680427202198 -92] -90.72583195727978]
Test Case: 807 | Input/Output: [[-84.1910254241129 -57] -141.1910254241129]
Test Case: 808 | Input/Output: [[31.310732599110594 -75] -43.689267400889406]
Test Case: 809 | Input/Output: [[-64.3962807194884 -26] -90.3962807194884]
Test Case: 810 | Input/Output: [[-40.804357958018066 -60] -100.80435795801807]
Test Case: 811 | Input/Output: [[2.8640834571345977 5] 7.864083457134598]
Test Case: 812 | Input/Output: [[-46.10942800455784 -50] -96.10942800455784]
Test Case: 813 | Input/Output: [[-40.62157914948161 -9] -49.62157914948161]
Test Case: 814 | Input/Output: [[47.240196077076774 -55] -7.759803922923226]
Test Case: 815 | Input/Output: [[4.816610893795698 -91] -86.1833891062043]
Test Case: 816 | Input/Output: [[-26.653414310080763 -41] -67.65341431008076]
Test Case: 817 | Input/Output: [[-4.122073776721649 38] 33.87792622327835]
Test Case: 818 | Input/Output: [[-47.701222362252985 64] 16.298777637747015]
Test Case: 819 | Input/Output: [[-81.29956429064207 -76] -157.29956429064208]
Test Case: 820 | Input/Output: [[77.06403278978539 -11] 66.06403278978539]
Test Case: 821 | Input/Output: [[58.093664753872986 -22] 36.093664753872986]
Test Case: 822 | Input/Output: [[3.209062167445339 -22] -18.79093783255466]
Test Case: 823 | Input/Output: [[-94.79289363629393 42] -52.792893636293925]
Test Case: 824 | Input/Output: [[75.36542181183924 59] 134.36542181183924]
Test Case: 825 | Input/Output: [[-53.887468251318474 89] 35.112531748681526]
Test Case: 826 | Input/Output: [[63.413521786306234 -1] 62.413521786306234]
Test Case: 827 | Input/Output: [[97.07911852536287 93] 190.07911852536287]
Test Case: 828 | Input/Output: [[-42.57748230703302 -90] -132.57748230703302]
Test Case: 829 | Input/Output: [[15.709836168706985 -7] 8.709836168706985]
Test Case: 830 | Input/Output: [[-36.02494157169345 72] 35.97505842830655]
Test Case: 831 | Input/Output: [[99.67793483562176 97] 196.67793483562176]
Test Case: 832 | Input/Output: [[91.7821067025514 32] 123.7821067025514]
Test Case: 833 | Input/Output: [[-27.360045700560747 99] 71.63995429943925]
Test Case: 834 | Input/Output: [[30.00637706630536 -95] -64.99362293369464]
Test Case: 835 | Input/Output: [[-17.655375771010284 31] 13.344624228989716]
Test Case: 836 | Input/Output: [[46.986132548021374 -24] 22.986132548021374]
Test Case: 837 | Input/Output: [[-99.41966248344653 -77] -176.41966248344653]
Test Case: 838 | Input/Output: [[-14.496882887344938 37] 22.50311711265506]
Test Case: 839 | Input/Output: [[22.602829395755265 -71] -48.397170604244735]
Test Case: 840 | Input/Output: [[18.677076347767454 -74] -55.32292365223255]
Test Case: 841 | Input/Output: [[33.07785935712138 66] 99.07785935712138]
Test Case: 842 | Input/Output: [[-28.9440602925483 46] 17.0559397074517]
Test Case: 843 | Input/Output: [[95.54661941167907 47] 142.54661941167907]
Test Case: 844 | Input/Output: [[35.7660948746705 -31] 4.7660948746705]
Test Case: 845 | Input/Output: [[-50.49629210800166 70] 19.50370789199834]
Test Case: 846 | Input/Output: [[10.753743577230694 -11] -0.24625642276930648]
Test Case: 847 | Input/Output: [[54.518134019708924 -83] -28.481865980291076]
Test Case: 848 | Input/Output: [[-56.27751398632499 -97] -153.277513986325]
Test Case: 849 | Input/Output: [[-78.47227617885824 -13] -91.47227617885824]
Test Case: 850 | Input/Output: [[-52.36696443110924 -75] -127.36696443110924]
Test Case: 851 | Input/Output: [[-73.97466158425968 -66] -139.97466158425968]
Test Case: 852 | Input/Output: [[79.27374219531242 68] 147.27374219531242]
Test Case: 853 | Input/Output: [[20.942699385337477 85] 105.94269938533748]
Test Case: 854 | Input/Output: [[95.00756210145406 20] 115.00756210145406]
Test Case: 855 | Input/Output: [[-41.318810111352164 80] 38.681189888647836]
Test Case: 856 | Input/Output: [[79.8075396080082 94] 173.8075396080082]
Test Case: 857 | Input/Output: [[22.853085808187572 -10] 12.853085808187572]
Test Case: 858 | Input/Output: [[-79.90670061695567 -41] -120.90670061695567]
Test Case: 859 | Input/Output: [[-45.56747076126888 15] -30.56747076126888]
Test Case: 860 | Input/Output: [[-50.3504400110355 -23] -73.3504400110355]
Test Case: 861 | Input/Output: [[-55.626882320620254 94] 38.373117679379746]
Test Case: 862 | Input/Output: [[-94.33804809680213 50] -44.338048096802126]
Test Case: 863 | Input/Output: [[-51.1135640829816 31] -20.113564082981597]
Test Case: 864 | Input/Output: [[-50.932058831626506 45] -5.932058831626506]
Test Case: 865 | Input/Output: [[-19.8988330664489 -86] -105.8988330664489]
Test Case: 866 | Input/Output: [[-81.84069611912449 -9] -90.84069611912449]
Test Case: 867 | Input/Output: [[-81.86530026420265 -32] -113.86530026420265]
Test Case: 868 | Input/Output: [[-8.958870884236575 91] 82.04112911576343]
Test Case: 869 | Input/Output: [[31.71937541053694 -14] 17.71937541053694]
Test Case: 870 | Input/Output: [[33.13268290185641 45] 78.13268290185641]
Test Case: 871 | Input/Output: [[72.75150139497183 19] 91.75150139497183]
Test Case: 872 | Input/Output: [[-59.38484487057416 -99] -158.38484487057417]
Test Case: 873 | Input/Output: [[79.60008724074959 -20] 59.60008724074959]
Test Case: 874 | Input/Output: [[-85.32263209561998 14] -71.32263209561998]
Test Case: 875 | Input/Output: [[21.51441016233433 84] 105.51441016233433]
Test Case: 876 | Input/Output: [[4.5599281371816005 -51] -46.4400718628184]
Test Case: 877 | Input/Output: [[13.346266175383818 4] 17.346266175383818]
Test Case: 878 | Input/Output: [[-89.70476200820679 -30] -119.70476200820679]
Test Case: 879 | Input/Output: [[95.13463511136143 76] 171.13463511136143]
Test Case: 880 | Input/Output: [[-63.617090758791406 69] 5.382909241208594]
Test Case: 881 | Input/Output: [[-49.470988407034234 26] -23.470988407034234]
Test Case: 882 | Input/Output: [[-99.48286497611716 -20] -119.48286497611716]
Test Case: 883 | Input/Output: [[-93.78500668644195 -11] -104.78500668644195]
Test Case: 884 | Input/Output: [[62.49636726470226 28] 90.49636726470226]
Test Case: 885 | Input/Output: [[-42.05785991992519 53] 10.942140080074807]
Test Case: 886 | Input/Output: [[42.58613363073195 46] 88.58613363073195]
Test Case: 887 | Input/Output: [[36.0268936781153 100] 136.0268936781153]
Test Case: 888 | Input/Output: [[90.4518500859794 7] 97.4518500859794]
Test Case: 889 | Input/Output: [[-26.192459203544402 -11] -37.1924592035444]
Test Case: 890 | Input/Output: [[-58.85342017291553 -92] -150.85342017291552]
Test Case: 891 | Input/Output: [[-99.06121546156534 12] -87.06121546156534]
Test Case: 892 | Input/Output: [[-24.599132402734483 -2] -26.599132402734483]
Test Case: 893 | Input/Output: [[69.92008068385366 80] 149.92008068385366]
Test Case: 894 | Input/Output: [[-34.979344540882636 4] -30.979344540882636]
Test Case: 895 | Input/Output: [[-78.29682944683931 -41] -119.29682944683931]
Test Case: 896 | Input/Output: [[-98.09141525566206 100] 1.9085847443379436]
Test Case: 897 | Input/Output: [[92.85289262510327 57] 149.85289262510327]
Test Case: 898 | Input/Output: [[78.00287807082773 -57] 21.002878070827734]
Test Case: 899 | Input/Output: [[7.022185987711893 -63] -55.97781401228811]
Test Case: 900 | Input/Output: [[92.92528157396333 -58] 34.92528157396333]
Test Case: 901 | Input/Output: [[-45.45463699442118 -98] -143.45463699442118]
Test Case: 902 | Input/Output: [[84.87222701015745 -48] 36.872227010157445]
Test Case: 903 | Input/Output: [[17.659795904661536 -12] 5.659795904661536]
Test Case: 904 | Input/Output: [[80.26775096277512 30] 110.26775096277512]
Test Case: 905 | Input/Output: [[36.227964399721515 -60] -23.772035600278485]
Test Case: 906 | Input/Output: [[-33.33124558959992 -49] -82.33124558959992]
Test Case: 907 | Input/Output: [[74.68824705496678 28] 102.68824705496678]
Test Case: 908 | Input/Output: [[10.536906488072177 61] 71.53690648807218]
Test Case: 909 | Input/Output: [[-17.398478524546164 13] -4.398478524546164]
Test Case: 910 | Input/Output: [[53.413426072370044 89] 142.41342607237004]
Test Case: 911 | Input/Output: [[-38.20600609141478 -64] -102.20600609141478]
Test Case: 912 | Input/Output: [[-47.19722641455113 0] -47.19722641455113]
Test Case: 913 | Input/Output: [[-91.73075532904073 15] -76.73075532904073]
Test Case: 914 | Input/Output: [[-46.41996700124409 -95] -141.4199670012441]
Test Case: 915 | Input/Output: [[14.325348026866862 92] 106.32534802686686]
Test Case: 916 | Input/Output: [[-97.36295136820897 -39] -136.36295136820897]
Test Case: 917 | Input/Output: [[33.20215343905335 -28] 5.2021534390533475]
Test Case: 918 | Input/Output: [[-97.11857497375782 23] -74.11857497375782]
Test Case: 919 | Input/Output: [[20.908669565371667 56] 76.90866956537167]
Test Case: 920 | Input/Output: [[-49.817577297740456 -62] -111.81757729774046]
Test Case: 921 | Input/Output: [[20.633015635481883 55] 75.63301563548188]
Test Case: 922 | Input/Output: [[-83.23048330300573 76] -7.230483303005727]
Test Case: 923 | Input/Output: [[-25.28350312259829 82] 56.71649687740171]
Test Case: 924 | Input/Output: [[8.441047366296445 48] 56.441047366296445]
Test Case: 925 | Input/Output: [[-79.85298723284279 56] -23.852987232842793]
Test Case: 926 | Input/Output: [[-75.96577127365158 -55] -130.96577127365157]
Test Case: 927 | Input/Output: [[-79.56268787643509 26] -53.56268787643509]
Test Case: 928 | Input/Output: [[-75.25650100792632 -43] -118.25650100792632]
Test Case: 929 | Input/Output: [[27.993611214740326 20] 47.993611214740326]
Test Case: 930 | Input/Output: [[-77.33316590458061 -33] -110.33316590458061]
Test Case: 931 | Input/Output: [[-91.59522202618977 -20] -111.59522202618977]
Test Case: 932 | Input/Output: [[-12.959629639504584 -63] -75.95962963950458]
Test Case: 933 | Input/Output: [[96.58295626639077 -91] 5.582956266390767]
Test Case: 934 | Input/Output: [[48.278843115318836 53] 101.27884311531884]
Test Case: 935 | Input/Output: [[-92.41137101877601 -29] -121.41137101877601]
Test Case: 936 | Input/Output: [[61.59092554893169 92] 153.5909255489317]
Test Case: 937 | Input/Output: [[-54.21948200076383 98] 43.78051799923617]
Test Case: 938 | Input/Output: [[45.39766872425514 75] 120.39766872425514]
Test Case: 939 | Input/Output: [[-19.92771804862295 93] 73.07228195137705]
Test Case: 940 | Input/Output: [[49.810737682408075 -17] 32.810737682408075]
Test Case: 941 | Input/Output: [[12.239956665980657 45] 57.23995666598066]
Test Case: 942 | Input/Output: [[5.510594935488129 84] 89.51059493548813]
Test Case: 943 | Input/Output: [[-67.07848743567806 62] -5.078487435678056]
Test Case: 944 | Input/Output: [[-84.6785387825077 36] -48.6785387825077]
Test Case: 945 | Input/Output: [[38.138141176470725 37] 75.13814117647073]
Test Case: 946 | Input/Output: [[84.70757443656638 94] 178.70757443656638]
Test Case: 947 | Input/Output: [[-99.54436714728354 14] -85.54436714728354]
Test Case: 948 | Input/Output: [[91.41069191714683 -4] 87.41069191714683]
Test Case: 949 | Input/Output: [[43.72390895866269 -5] 38.72390895866269]
Test Case: 950 | Input/Output: [[72.35928562369537 -74] -1.6407143763046292]
Test Case: 951 | Input/Output: [[-58.32754696260374 16] -42.32754696260374]
Test Case: 952 | Input/Output: [[-29.096649681805914 16] -13.096649681805914]
Test Case: 953 | Input/Output: [[41.697326990443315 95] 136.69732699044332]
Test Case: 954 | Input/Output: [[-10.810639053678045 -45] -55.810639053678045]
Test Case: 955 | Input/Output: [[-91.00679581695879 34] -57.006795816958785]
Test Case: 956 | Input/Output: [[-3.9382676585650813 -87] -90.93826765856508]
Test Case: 957 | Input/Output: [[70.41598654287392 -7] 63.415986542873924]
Test Case: 958 | Input/Output: [[12.406587367550273 74] 86.40658736755027]
Test Case: 959 | Input/Output: [[-23.87343429285022 -22] -45.87343429285022]
Test Case: 960 | Input/Output: [[30.86612710656874 37] 67.86612710656874]
Test Case: 961 | Input/Output: [[-82.43193079508116 42] -40.43193079508116]
Test Case: 962 | Input/Output: [[-88.1709131616866 -46] -134.1709131616866]
Test Case: 963 | Input/Output: [[33.477664042544944 -96] -62.522335957455056]
Test Case: 964 | Input/Output: [[71.98064990626992 -89] -17.019350093730083]
Test Case: 965 | Input/Output: [[-75.06378688628084 -63] -138.06378688628084]
Test Case: 966 | Input/Output: [[-62.03226336453411 -32] -94.03226336453412]
Test Case: 967 | Input/Output: [[4.437197831501251 -9] -4.562802168498749]
Test Case: 968 | Input/Output: [[83.48096417447204 -55] 28.480964174472035]
Test Case: 969 | Input/Output: [[29.92289952471171 68] 97.92289952471171]
Test Case: 970 | Input/Output: [[81.0790655345022 56] 137.0790655345022]
Test Case: 971 | Input/Output: [[20.628656117347717 -24] -3.3713438826522832]
Test Case: 972 | Input/Output: [[-44.506249582412806 65] 20.493750417587194]
Test Case: 973 | Input/Output: [[-75.36837316639082 96] 20.631626833609175]
Test Case: 974 | Input/Output: [[-5.08193788576105 54] 48.91806211423895]
Test Case: 975 | Input/Output: [[-53.901163479874256 36] -17.901163479874256]
Test Case: 976 | Input/Output: [[-17.201335198640095 -53] -70.2013351986401]
Test Case: 977 | Input/Output: [[-89.07028483934269 0] -89.07028483934269]
Test Case: 978 | Input/Output: [[-51.49264139745857 71] 19.50735860254143]
Test Case: 979 | Input/Output: [[93.47632837316937 -45] 48.476328373169366]
Test Case: 980 | Input/Output: [[1.3486134173765976 -30] -28.651386582623402]
Test Case: 981 | Input/Output: [[-66.45499903756127 65] -1.4549990375612651]
Test Case: 982 | Input/Output: [[18.61784507316871 -92] -73.38215492683129]
Test Case: 983 | Input/Output: [[-7.044093091320619 -70] -77.04409309132062]
Test Case: 984 | Input/Output: [[-17.717453428791544 35] 17.282546571208456]
Test Case: 985 | Input/Output: [[-76.97077422618186 9] -67.97077422618186]
Test Case: 986 | Input/Output: [[-5.343167404771961 -96] -101.34316740477196]
Test Case: 987 | Input/Output: [[6.382415473381542 71] 77.38241547338154]
Test Case: 988 | Input/Output: [[-51.83919089130584 62] 10.16080910869416]
Test Case: 989 | Input/Output: [[-97.04613318191298 -37] -134.04613318191298]
Test Case: 990 | Input/Output: [[97.94373286636932 94] 191.94373286636932]
Test Case: 991 | Input/Output: [[28.970334467325955 26] 54.970334467325955]
Test Case: 992 | Input/Output: [[26.2363629372702 81] 107.2363629372702]
Test Case: 993 | Input/Output: [[82.37282278113358 55] 137.37282278113358]
Test Case: 994 | Input/Output: [[26.272104471801086 77] 103.27210447180109]
Test Case: 995 | Input/Output: [[-96.68025756649028 -81] -177.6802575664903]
Test Case: 996 | Input/Output: [[-39.74564393344438 84] 44.25435606655562]
Test Case: 997 | Input/Output: [[65.55340266460084 44] 109.55340266460084]
Test Case: 998 | Input/Output: [[-46.41989658329771 -96] -142.4198965832977]
Test Case: 999 | Input/Output: [[-82.63900374561916 47] -35.63900374561916]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -24 -82 88 56 -22 98 104 106 46 85 -13 -103 -108 97 54 47
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 68.6774606975 
Correct output: -30.5973968421 | Program output: 26.4026031579 
Correct output: -5.9015288603  | Program output: -9.9015288603 
Correct output: 24.3848067256  | Program output: 64.3848067256 
Correct output: -119.8990795364 | Program output: -79.8990795364
Correct output: 143.1946278344 | Program output: 98.1946278344 
Correct output: 10.8625446508  | Program output: 59.8625446508 
Correct output: 127.6458652779 | Program output: 39.6458652779 
Correct output: 71.8127365426  | Program output: -0.1872634574 
Correct output: -17.9148224328 | Program output: -53.9148224328
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: -65.8501562627
Correct output: 85.1198734399  | Program output: 78.1198734399 
Correct output: -62.5035732311 | Program output: -35.5035732311
Correct output: 31.7931803333  | Program output: 86.7931803333 
Correct output: -122.2934290035 | Program output: -83.2934290035
Correct output: 112.9049586254 | Program output: 79.9049586254 
Correct output: -15.8996538358 | Program output: 71.1003461642 
Correct output: 123.9806904826 | Program output: 84.9806904826 
Correct output: -78.3331420378 | Program output: -81.3331420378
Correct output: 66.7769669244  | Program output: -16.2230330756
Correct output: 3.7173929377   | Program output: -52.2826070623
Correct output: 109.3750668562 | Program output: 32.3750668562 
Correct output: 16.5512971727  | Program output: -29.4487028273
Correct output: 31.1961711525  | Program output: 70.1961711525 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction integer_max} {:instruction integer_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_dup} {:instruction float_div} {:instruction float_rot} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_add} {:instruction 93.40329944307587} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_min} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yankdup} {:instruction tagged_135} {:instruction integer_sub} {:instruction float_max} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction float_cos} {:instruction float_rot} {:instruction float_cos} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_yank} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_rot integer_max integer_swap float_mult float_dec float_frominteger float_stackdepth float_rot integer_dup float_div float_rot float_tan integer_dec integer_stackdepth integer_stackdepth float_rot integer_fromfloat float_max integer_dup integer_pop float_add 93.40329944307587 integer_yankdup float_swap float_min integer_div integer_pop integer_rot integer_rot float_cos integer_yankdup tagged_135 integer_sub float_max float_dec integer_sub float_sin float_cos float_rot float_cos in1 integer_shove float_inc integer_yank print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_stackdepth float_dup float_dup integer_shove integer_yank integer_min float_yankdup -28.069662028429462)
Errors: [49.0 3 57.0 13 4.0 1 40.0 1 40.0 2 45.0 3 49.0 2 88.0 3 72.0 9 36.0 2 88.0 2 67.0 13 7.0 2 27.0 2 55.0 2 39.0 3 33.0 3 87.0 12 39.0 3 3.0 2 83.0 12 56.0 13 77.0 3 46.0 12 39.0 2]
Total: 1351.0
Mean: 27.02
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 17967.390364500003
Median total errors in population: 25338.0
Error averages by case: (714.5871994999987 13.256 699.5474498 13.72 686.1652853000008 12.353 699.1523374 12.552 723.5263222000015 14.119 719.623453400002 13.304 696.1482658000015 12.448 717.3686622000006 13.432 707.5750746000008 12.801 695.6022520000027 13.349 705.9303377999969 12.466 695.5075471000005 12.442 700.0708400000021 12.573 708.4139271000028 13.238 702.4096054999982 12.559 724.1970863999989 14.134 711.898137700003 13.285 700.7293954999988 13.916 714.2788198999981 13.22 705.8950145000018 13.25 706.0818325000004 13.408 695.5981557999988 12.384 713.0937104999977 13.273 696.162118600002 13.141 700.5915334000008 12.613)
Error minima by case: (11.6775 2 0.4026 8 1.0477 1 0.3848 1 11.0922 2 2.8054 2 0.1262 2 2.3541 1 0.1873 7 0.202 2 0.8779 1 0.0798 8 0.8801 1 0.6099 2 0.3478 2 10.0922 3 12.905 2 1.4021 8 16.0193 2 0.5334 2 2.0206 8 0.7174 8 9.3751 1 0.4487 7 0.9448 2)
Average genome size in population (length): 49.034
Average program size in population (points): 50.034
Average percent parens in population: 0.044
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.323
Error (vector) diversity:			 0.343
Behavioral diversity:				 0.363
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1229464
--- Timings ---
Current time: 1529614888011 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.6 seconds, 18.3%
Fitness Testing:      2.8 seconds, 78.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 68.6774606975 
Correct output: -30.5973968421 | Program output: 26.4026031579 
Correct output: -5.9015288603  | Program output: -9.9015288603 
Correct output: 24.3848067256  | Program output: 64.3848067256 
Correct output: -119.8990795364 | Program output: -79.8990795364
Correct output: 143.1946278344 | Program output: 98.1946278344 
Correct output: 10.8625446508  | Program output: 59.8625446508 
Correct output: 127.6458652779 | Program output: 39.6458652779 
Correct output: 71.8127365426  | Program output: -0.1872634574 
Correct output: -17.9148224328 | Program output: -53.9148224328
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: -65.8501562627
Correct output: 85.1198734399  | Program output: 78.1198734399 
Correct output: -62.5035732311 | Program output: -35.5035732311
Correct output: 31.7931803333  | Program output: 86.7931803333 
Correct output: -122.2934290035 | Program output: -83.2934290035
Correct output: 112.9049586254 | Program output: 79.9049586254 
Correct output: -15.8996538358 | Program output: 71.1003461642 
Correct output: 123.9806904826 | Program output: 84.9806904826 
Correct output: -78.3331420378 | Program output: -81.3331420378
Correct output: 66.7769669244  | Program output: -16.2230330756
Correct output: 3.7173929377   | Program output: -52.2826070623
Correct output: 109.3750668562 | Program output: 32.3750668562 
Correct output: 16.5512971727  | Program output: -29.4487028273
Correct output: 31.1961711525  | Program output: 70.1961711525 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction integer_max} {:instruction integer_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_dup} {:instruction float_div} {:instruction float_rot} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_add} {:instruction 93.40329944307587} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_min} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yankdup} {:instruction tagged_135} {:instruction integer_sub} {:instruction float_max} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction float_cos} {:instruction float_rot} {:instruction float_cos} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_yank} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_rot integer_max integer_swap float_mult float_dec float_frominteger float_stackdepth float_rot integer_dup float_div float_rot float_tan integer_dec integer_stackdepth integer_stackdepth float_rot integer_fromfloat float_max integer_dup integer_pop float_add 93.40329944307587 integer_yankdup float_swap float_min integer_div integer_pop integer_rot integer_rot float_cos integer_yankdup tagged_135 integer_sub float_max float_dec integer_sub float_sin float_cos float_rot float_cos in1 integer_shove float_inc integer_yank print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_stackdepth float_dup float_dup integer_shove integer_yank integer_min float_yankdup -28.069662028429462)
Errors: [49.0 3 57.0 13 4.0 1 40.0 1 40.0 2 45.0 3 49.0 2 88.0 3 72.0 9 36.0 2 88.0 2 67.0 13 7.0 2 27.0 2 55.0 2 39.0 3 33.0 3 87.0 12 39.0 3 3.0 2 83.0 12 56.0 13 77.0 3 46.0 12 39.0 2]
Total: 1351.0
Mean: 27.02
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 6265.79429280001
Median total errors in population: 1909.8976000000002
Error averages by case: (256.0404738999983 10.9 230.83261469999974 12.69 194.1146342000018 10.044 227.49748210000007 10.277 277.3734642000012 11.614 270.1598771999975 11.043 224.47456149999857 10.053 265.0199556000013 11.174 234.2224638 11.362 216.90201669999954 10.999 242.88333310000047 10.126 219.52242359999997 11.944 229.77021789999878 10.41 242.76781549999865 10.765 237.45656129999753 10.389 279.4463891999996 11.698 251.87783409999955 11.037 239.47730770000038 12.964 258.2157505999968 10.835 237.48018149999868 10.924 238.22568320000022 12.808 215.6491954 11.792 253.56325480000143 10.854 212.61205349999983 12.402 230.5977475000013 10.507)
Error minima by case: (3.3225 1 0.5974 8 1.0477 1 0.3848 1 11.0922 2 2.8054 2 0.1375 2 2.3541 2 0.1873 7 0.202 2 0.8779 2 0.0798 8 0.8801 1 1.9078 2 0.3478 2 10.0922 3 8.095 2 1.4021 9 2.9807 1 0.9075 2 2.1272 8 0.2826 8 9.6249 2 0.0817 8 0.9448 2)
Average genome size in population (length): 55.018
Average program size in population (points): 56.018
Average percent parens in population: 0.026
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.488
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.274
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2608064
--- Timings ---
Current time: 1529614893260 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.9 seconds, 42.7%
Fitness Testing:      4.3 seconds, 47.0%
Report:               0.8 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 68.6774606975 
Correct output: -30.5973968421 | Program output: 26.4026031579 
Correct output: -5.9015288603  | Program output: -9.9015288603 
Correct output: 24.3848067256  | Program output: 64.3848067256 
Correct output: -119.8990795364 | Program output: -79.8990795364
Correct output: 143.1946278344 | Program output: 98.1946278344 
Correct output: 10.8625446508  | Program output: 59.8625446508 
Correct output: 127.6458652779 | Program output: 39.6458652779 
Correct output: 71.8127365426  | Program output: -0.1872634574 
Correct output: -17.9148224328 | Program output: -53.9148224328
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: -65.8501562627
Correct output: 85.1198734399  | Program output: 78.1198734399 
Correct output: -62.5035732311 | Program output: -35.5035732311
Correct output: 31.7931803333  | Program output: 86.7931803333 
Correct output: -122.2934290035 | Program output: -83.2934290035
Correct output: 112.9049586254 | Program output: 79.9049586254 
Correct output: -15.8996538358 | Program output: 71.1003461642 
Correct output: 123.9806904826 | Program output: 84.9806904826 
Correct output: -78.3331420378 | Program output: -81.3331420378
Correct output: 66.7769669244  | Program output: -16.2230330756
Correct output: 3.7173929377   | Program output: -52.2826070623
Correct output: 109.3750668562 | Program output: 32.3750668562 
Correct output: 16.5512971727  | Program output: -29.4487028273
Correct output: 31.1961711525  | Program output: 70.1961711525 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_rot} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction float_div} {:instruction float_rot} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_add} {:instruction 93.40329944307587} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_min} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yankdup} {:instruction tagged_135} {:instruction integer_sub} {:instruction float_max} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction float_cos} {:instruction float_rot} {:instruction float_cos} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_yank} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_dup float_pop float_dup_items float_rot print_float float_inc float_rot float_div float_rot float_tan integer_dec integer_stackdepth integer_stackdepth float_rot integer_fromfloat float_max integer_dup integer_pop float_add 93.40329944307587 integer_yankdup float_swap float_min integer_div integer_pop integer_rot integer_rot float_cos integer_yankdup tagged_135 integer_sub float_max float_dec integer_sub float_sin float_cos float_rot float_cos in1 integer_shove float_inc integer_yank print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_stackdepth float_dup float_dup integer_shove integer_yank integer_min float_yankdup -28.069662028429462)
Errors: [49.0 3 57.0 13 4.0 1 40.0 1 40.0 2 45.0 3 49.0 2 88.0 3 72.0 9 36.0 2 88.0 2 67.0 13 7.0 2 27.0 2 55.0 2 39.0 3 33.0 3 87.0 12 39.0 3 3.0 2 83.0 12 56.0 13 77.0 3 46.0 12 39.0 2]
Total: 1351.0
Mean: 27.02
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4433.302519599994
Median total errors in population: 1381.0
Error averages by case: (174.65275279999992 6.273 166.2733849 13.194 129.86031490000062 5.864 159.6225485 5.877 170.86226570000002 7.017 177.5307195999996 6.622 164.50044629999994 5.838 197.2771843000005 6.728 178.36311120000005 9.793 159.9558585999998 6.279 188.70169750000017 5.698 181.7959587999994 13.027 143.68878010000032 5.931 152.3831655999994 6.141 173.21916269999954 6.092 170.78054589999942 7.105 165.24997669999982 6.805 192.54468589999988 13.288 170.59558549999937 6.238 143.4072878000003 6.244 187.87278749999984 13.436 172.3961428000005 12.406 187.88113290000058 6.623 162.5177596999998 12.663 160.0862634000004 6.101)
Error minima by case: (26.6775 2 0.5974 9 4.0 1 0.3848 1 11.0922 2 45.0 3 0.1375 2 2.3541 2 0.1873 7 4.6037 2 1.2684 1 0.1498 8 2.8801 1 1.9078 2 7.7932 2 10.0922 3 33.0 3 5.8997 9 39.0 2 3.0 2 12.777 9 1.1326 8 9.6249 2 0.0817 8 7.1962 2)
Average genome size in population (length): 47.308
Average program size in population (points): 48.308
Average percent parens in population: 0.030
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.988
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.125
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3792305
--- Timings ---
Current time: 1529614896939 milliseconds
Total Time:          12.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.5 seconds, 43.0%
Fitness Testing:      5.9 seconds, 45.9%
Report:               1.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 63845.61630000016
Test mean error for best: 31.92281
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 67.6774606975 
Correct output: -30.5973968421 | Program output: 0.963807715   
Correct output: -5.9015288603  | Program output: -0.0939068571 
Correct output: 24.3848067256  | Program output: 0.8509769684  
Correct output: -119.8990795364 | Program output: -0.7059953718 
Correct output: 143.1946278344 | Program output: 97.1946278344 
Correct output: 10.8625446508  | Program output: -0.6765596048 
Correct output: 127.6458652779 | Program output: 38.6458652779 
Correct output: 71.8127365426  | Program output: 0.3741989987  
Correct output: -17.9148224328 | Program output: -0.0630072415 
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: -0.6396830093 
Correct output: 85.1198734399  | Program output: 77.1198734399 
Correct output: -62.5035732311 | Program output: -0.36219198   
Correct output: 31.7931803333  | Program output: -0.5651521263 
Correct output: -122.2934290035 | Program output: 0.8606701742  
Correct output: 112.9049586254 | Program output: 78.9049586254 
Correct output: -15.8996538358 | Program output: 0.5526066194  
Correct output: 123.9806904826 | Program output: 83.9806904826 
Correct output: -78.3331420378 | Program output: 0.7950337886  
Correct output: 66.7769669244  | Program output: -0.055697681  
Correct output: 3.7173929377   | Program output: -0.9922638477 
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: 0.5675874727  
Correct output: 31.1961711525  | Program output: 0.9967105415  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_max} {:instruction float_cos} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup integer_max integer_shove float_rot integer_rot integer_pop float_max float_cos in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_stackdepth float_dup float_dup integer_shove integer_yank integer_min float_yankdup -28.069662028429462)
Errors: [50.0 2 31.5612 10 5.8076 10 23.5338 10 119.1931 11 46.0 3 11.5391 8 89.0 3 71.4385 12 17.8518 11 89.0 2 1.7895 9 8.0 2 62.1414 11 32.3583 10 123.1541 14 34.0 3 16.4523 12 40.0 2 79.1282 12 66.8327 10 4.7097 10 78.0 3 15.9837 7 30.1995 7]
Total: 1341.6745
Mean: 26.83349
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3839.4865880000007
Median total errors in population: 1359.0
Error averages by case: (145.7256973 3.586 152.53981579999999 13.283 109.47863940000002 3.123 137.5591369 3.099 142.98727180000003 4.189 142.49583230000002 4.212 145.41875799999994 3.316 180.31906400000003 4.238 170.03461190000002 8.929 137.85483659999997 3.43 179.7555323 3.234 165.05594619999997 13.272 108.2218764 3.304 130.8273568 3.407 150.95740299999997 3.298 142.13918239999998 4.382 131.52486009999998 4.262 179.1207693 13.163 136.96039729999998 3.572 109.4355228 3.409 179.70625989999996 13.117 155.36377910000004 12.515 170.376252 4.227 146.63238310000003 12.372 136.7394033 3.317)
Error minima by case: (24.2742 2 10.6504 8 4.0 1 22.5338 1 37.0 2 45.0 3 9.0599 2 34.2426 2 1.1873 7 16.9148 2 0.1349 1 0.3812 9 7.0 1 4.7807 2 29.9906 2 36.0 3 19.5017 3 14.8997 9 30.5774 2 3.0 2 17.223 9 1.9148 8 15.9718 2 14.7487 7 29.1995 2)
Average genome size in population (length): 39.855
Average program size in population (points): 40.855
Average percent parens in population: 0.035
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.55025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.041
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4789405
--- Timings ---
Current time: 1529614900383 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.1 seconds, 43.6%
Fitness Testing:      7.3 seconds, 44.6%
Report:               1.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 52839.482899999886
Test mean error for best: 26.41974
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 67.6774606975 
Correct output: -30.5973968421 | Program output: 25.4026031579 
Correct output: -5.9015288603  | Program output: -10.9015288603
Correct output: 24.3848067256  | Program output: 63.3848067256 
Correct output: -119.8990795364 | Program output: -96.6024035603
Correct output: 143.1946278344 | Program output: 97.1946278344 
Correct output: 10.8625446508  | Program output: 58.8625446508 
Correct output: 127.6458652779 | Program output: 38.6458652779 
Correct output: 71.8127365426  | Program output: -1.1872634574 
Correct output: -17.9148224328 | Program output: -54.9148224328
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: -66.8501562627
Correct output: 85.1198734399  | Program output: 77.1198734399 
Correct output: -62.5035732311 | Program output: -52.206897255 
Correct output: 31.7931803333  | Program output: 85.7931803333 
Correct output: -122.2934290035 | Program output: -99.9967530274
Correct output: 112.9049586254 | Program output: 78.9049586254 
Correct output: -15.8996538358 | Program output: 70.1003461642 
Correct output: 123.9806904826 | Program output: 83.9806904826 
Correct output: -78.3331420378 | Program output: -82.3331420378
Correct output: 66.7769669244  | Program output: -17.2230330756
Correct output: 3.7173929377   | Program output: -53.2826070623
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: -30.4487028273
Correct output: 31.1961711525  | Program output: 69.1961711525 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup integer_max integer_shove float_rot integer_rot integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [50.0 2 56.0 13 5.0 2 39.0 2 23.2967 12 46.0 3 48.0 2 89.0 3 73.0 8 37.0 2 89.0 2 68.0 13 8.0 2 10.2967 9 54.0 2 22.2967 11 34.0 3 86.0 13 40.0 2 4.0 2 84.0 13 57.0 12 78.0 3 47.0 12 38.0 2]
Total: 1335.8901
Mean: 26.717802
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3620.0115486000004
Median total errors in population: 1351.0
Error averages by case: (139.6624641 3.992 145.08034550000002 13.183 98.03024210000001 2.566 129.8315326 2.548 131.8428105 3.649 136.60951760000006 4.17 137.58923719999999 3.239 174.46666900000002 4.193 159.32921169999997 9.327 126.6286007 3.353 173.88427929999997 3.202 153.729124 13.108 101.8870032 3.239 119.11411129999996 3.363 143.2667238 3.232 131.01347400000003 4.33 125.41392040000001 4.189 171.40789339999998 12.569 130.9338224 3.974 98.72323600000001 3.356 168.98628809999997 12.476 144.0194069 12.856 164.37623579999996 4.191 135.35850959999996 12.222 129.05988939999997 3.24)
Error minima by case: (17.6775 2 15.6671 9 4.0 1 22.3848 1 23.2967 2 45.0 3 8.8625 2 36.2426 3 19.5906 8 2.9845 2 1.8651 2 0.2037 8 6.2834 2 10.2967 2 15.1467 2 22.2967 3 21.5017 3 0.9693 9 32.5774 2 3.0 2 19.8371 9 1.7174 9 17.9718 3 14.5513 6 15.7437 2)
Average genome size in population (length): 53.816
Average program size in population (points): 54.816
Average percent parens in population: 0.023
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.12175
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.031
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6136096
--- Timings ---
Current time: 1529614904152 milliseconds
Total Time:          20.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.6 seconds, 43.3%
Fitness Testing:      9.0 seconds, 44.9%
Report:               2.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 52839.482899999886
Test mean error for best: 26.41974
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 67.6774606975 
Correct output: -30.5973968421 | Program output: 25.4026031579 
Correct output: -5.9015288603  | Program output: -10.9015288603
Correct output: 24.3848067256  | Program output: 63.3848067256 
Correct output: -119.8990795364 | Program output: -96.6024035603
Correct output: 143.1946278344 | Program output: 97.1946278344 
Correct output: 10.8625446508  | Program output: 58.8625446508 
Correct output: 127.6458652779 | Program output: 38.6458652779 
Correct output: 71.8127365426  | Program output: -1.1872634574 
Correct output: -17.9148224328 | Program output: -54.9148224328
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: -66.8501562627
Correct output: 85.1198734399  | Program output: 77.1198734399 
Correct output: -62.5035732311 | Program output: -52.206897255 
Correct output: 31.7931803333  | Program output: 85.7931803333 
Correct output: -122.2934290035 | Program output: -99.9967530274
Correct output: 112.9049586254 | Program output: 78.9049586254 
Correct output: -15.8996538358 | Program output: 70.1003461642 
Correct output: 123.9806904826 | Program output: 83.9806904826 
Correct output: -78.3331420378 | Program output: -82.3331420378
Correct output: 66.7769669244  | Program output: -17.2230330756
Correct output: 3.7173929377   | Program output: -53.2826070623
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: -30.4487028273
Correct output: 31.1961711525  | Program output: 69.1961711525 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_max} {:instruction integer_yank} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_rot integer_max integer_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup integer_max integer_shove float_rot integer_rot integer_pop float_max integer_yank print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add integer_yank float_add 43.997522794043505 integer_min float_yankdup -28.069662028429462)
Errors: [50.0 2 56.0 13 5.0 2 39.0 2 23.2967 12 46.0 3 48.0 2 89.0 3 73.0 8 37.0 2 89.0 2 68.0 13 8.0 2 10.2967 9 54.0 2 22.2967 11 34.0 3 86.0 13 40.0 2 4.0 2 84.0 13 57.0 12 78.0 3 47.0 12 38.0 2]
Total: 1335.8901
Mean: 26.717802
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3065.4797704000002
Median total errors in population: 1351.0
Error averages by case: (117.58341709999999 3.907 123.29598209999995 13.167 74.9131859 2.165 107.7091046 2.175 110.5879396 3.258 114.36786880000002 3.9 115.4491352 3.067 153.32265 3.927 137.79903899999994 9.493 104.04195149999998 3.156 152.73779370000003 2.929 131.40387069999997 13.152 78.7420918 2.976 97.18621779999997 3.198 121.39158070000003 3.05 109.8085116 4.191 102.9058744 3.935 149.8018709 12.363 108.57071530000002 3.899 76.2006592 3.164 147.55265789999999 12.282 121.577891 13.101 142.97557390000003 3.934 112.9046941 12.215 106.97849360000002 3.067)
Error minima by case: (24.2742 2 27.0203 9 2.3244 1 6.2793 1 23.2967 2 45.0 3 7.8625 2 34.2426 3 21.5906 8 14.3377 2 0.1349 2 0.1498 8 7.0 2 10.2967 2 1.1291 2 22.2967 3 19.5017 3 12.3225 9 30.5774 2 2.4152 2 26.6263 10 0.7174 7 15.9718 3 13.5513 7 0.5321 2)
Average genome size in population (length): 60.123
Average program size in population (points): 61.123
Average percent parens in population: 0.018
Minimum age in population: 5.5
Maximum age in population: 9.4375
Average age in population: 7.5615
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.036
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7640653
--- Timings ---
Current time: 1529614907990 milliseconds
Total Time:          23.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.1 seconds, 42.4%
Fitness Testing:     10.9 seconds, 45.4%
Report:               2.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 52839.482899999886
Test mean error for best: 26.41974
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 67.6774606975 
Correct output: -30.5973968421 | Program output: 25.4026031579 
Correct output: -5.9015288603  | Program output: -10.9015288603
Correct output: 24.3848067256  | Program output: 63.3848067256 
Correct output: -119.8990795364 | Program output: -96.6024035603
Correct output: 143.1946278344 | Program output: 97.1946278344 
Correct output: 10.8625446508  | Program output: 58.8625446508 
Correct output: 127.6458652779 | Program output: 38.6458652779 
Correct output: 71.8127365426  | Program output: -1.1872634574 
Correct output: -17.9148224328 | Program output: -54.9148224328
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: -66.8501562627
Correct output: 85.1198734399  | Program output: 77.1198734399 
Correct output: -62.5035732311 | Program output: -52.206897255 
Correct output: 31.7931803333  | Program output: 85.7931803333 
Correct output: -122.2934290035 | Program output: -99.9967530274
Correct output: 112.9049586254 | Program output: 78.9049586254 
Correct output: -15.8996538358 | Program output: 70.1003461642 
Correct output: 123.9806904826 | Program output: 83.9806904826 
Correct output: -78.3331420378 | Program output: -82.3331420378
Correct output: 66.7769669244  | Program output: -17.2230330756
Correct output: 3.7173929377   | Program output: -53.2826070623
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: -30.4487028273
Correct output: 31.1961711525  | Program output: 69.1961711525 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup integer_max integer_shove float_rot integer_rot integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [50.0 2 56.0 13 5.0 2 39.0 2 23.2967 12 46.0 3 48.0 2 89.0 3 73.0 8 37.0 2 89.0 2 68.0 13 8.0 2 10.2967 9 54.0 2 22.2967 11 34.0 3 86.0 13 40.0 2 4.0 2 84.0 13 57.0 12 78.0 3 47.0 12 38.0 2]
Total: 1335.8901
Mean: 26.717802
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2789.5377768000003
Median total errors in population: 1351.0
Error averages by case: (106.20016009999999 3.795 111.23709409999985 12.963 63.180133299999994 2.694 96.24916460000001 2.758 106.34655000000004 3.975 103.2859583 3.879 102.57737790000006 3.47 142.093542 3.895 126.60430070000008 9.593 91.21846679999997 3.65 140.98382220000002 2.916 115.53937109999991 12.831 66.92339609999998 2.939 89.68217009999987 3.848 109.63852400000009 3.461 105.85934040000001 4.974 91.4524079 3.892 135.00871879999997 12.247 97.2499373 3.782 69.84512939999998 3.736 135.37145959999998 12.115 106.59599600000011 12.831 131.52023579999997 3.901 99.34976369999988 11.873 96.05675660000007 3.45)
Error minima by case: (24.2742 2 29.5974 9 3.0 1 22.5338 1 22.2967 2 44.0 3 9.1984 2 34.2426 2 5.8872 2 2.1485 2 0.1349 1 0.1498 8 6.0 2 9.2967 2 30.1291 2 21.2967 3 19.5017 3 13.8997 8 30.5774 2 2.0 2 10.923 10 2.0533 7 15.9718 2 0.848 6 29.1995 2)
Average genome size in population (length): 60.117
Average program size in population (points): 61.117
Average percent parens in population: 0.018
Minimum age in population: 6.5
Maximum age in population: 10.90625
Average age in population: 9.02390625
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.059
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9144769
--- Timings ---
Current time: 1529614911678 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.7 seconds, 42.4%
Fitness Testing:     12.5 seconds, 45.5%
Report:               3.2 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 49069.97249999988
Test mean error for best: 24.53499
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 67.6774606975 
Correct output: -30.5973968421 | Program output: 2.6190197031  
Correct output: -5.9015288603  | Program output: 0.4097571563  
Correct output: 24.3848067256  | Program output: 1.3293379974  
Correct output: -119.8990795364 | Program output: -96.6024035603
Correct output: 143.1946278344 | Program output: 97.1946278344 
Correct output: 10.8625446508  | Program output: 1.3638463298  
Correct output: 127.6458652779 | Program output: 38.6458652779 
Correct output: 71.8127365426  | Program output: 0.0702914247  
Correct output: -17.9148224328 | Program output: 0.7776304702  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.8097799878  
Correct output: 85.1198734399  | Program output: 77.1198734399 
Correct output: -62.5035732311 | Program output: -52.206897255 
Correct output: 31.7931803333  | Program output: 1.2240456016  
Correct output: -122.2934290035 | Program output: -99.9967530274
Correct output: 112.9049586254 | Program output: 78.9049586254 
Correct output: -15.8996538358 | Program output: 1.2886798469  
Correct output: 123.9806904826 | Program output: 83.9806904826 
Correct output: -78.3331420378 | Program output: 0.8398216026  
Correct output: 66.7769669244  | Program output: 0.5230773943  
Correct output: 3.7173929377   | Program output: 0.7723691805  
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: 0.6597479007  
Correct output: 31.1961711525  | Program output: 1.2935593237  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_min} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup float_div integer_shove float_rot integer_rot integer_pop float_min float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [50.0 2 33.2164 11 6.3113 9 23.0555 11 23.2967 12 46.0 3 9.4987 8 89.0 3 71.7424 11 18.6925 12 89.0 2 0.3401 9 8.0 2 10.2967 9 30.5691 11 22.2967 11 34.0 3 17.1883 10 40.0 2 79.173 11 66.2539 11 2.945 9 78.0 3 15.8915 9 29.9026 10]
Total: 1088.6704
Mean: 21.773409
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2716.2924971999996
Median total errors in population: 1351.0
Error averages by case: (105.6488923 3.83 101.12618519999955 12.363 59.907604299999996 4.806 87.81151470000007 4.815 118.92837380000046 6.875 103.58001830000002 4.176 89.91707840000015 4.947 140.9358710000001 4.206 123.76283950000004 10.054 84.00291179999984 5.685 138.62554480000003 3.279 98.3959415999998 11.907 65.8549651 3.245 92.23396919999965 6.416 99.91028520000037 4.978 119.44378440000006 7.885 90.9463382 4.157 115.95596140000008 12.007 97.01202760000002 3.787 83.13539460000025 5.922 129.0383222999999 11.718 92.38732500000029 11.973 130.08454000000003 4.175 89.55655809999963 10.872 89.15525040000028 4.857)
Error minima by case: (48.0 2 4.4456 8 3.0 1 8.6815 1 22.2967 2 44.0 3 2.5317 2 54.3492 2 14.5161 2 1.2115 2 19.9717 1 0.1468 8 6.0 2 9.2967 2 16.0899 2 21.2967 3 32.0 3 0.1396 9 38.0 2 2.0 2 1.5197 9 0.7174 8 47.0784 2 0.848 6 15.4928 2)
Average genome size in population (length): 58.957
Average program size in population (points): 59.957
Average percent parens in population: 0.017
Minimum age in population: 7.75
Maximum age in population: 12.484375
Average age in population: 10.587203125
Median age in population: 10.609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.12
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 10619342
--- Timings ---
Current time: 1529614915544 milliseconds
Total Time:          31.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 42.4%
Fitness Testing:     14.3 seconds, 45.5%
Report:               3.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 49069.97249999988
Test mean error for best: 24.53499
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 67.6774606975 
Correct output: -30.5973968421 | Program output: 2.6190197031  
Correct output: -5.9015288603  | Program output: 0.4097571563  
Correct output: 24.3848067256  | Program output: 1.3293379974  
Correct output: -119.8990795364 | Program output: -96.6024035603
Correct output: 143.1946278344 | Program output: 97.1946278344 
Correct output: 10.8625446508  | Program output: 1.3638463298  
Correct output: 127.6458652779 | Program output: 38.6458652779 
Correct output: 71.8127365426  | Program output: 0.0702914247  
Correct output: -17.9148224328 | Program output: 0.7776304702  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.8097799878  
Correct output: 85.1198734399  | Program output: 77.1198734399 
Correct output: -62.5035732311 | Program output: -52.206897255 
Correct output: 31.7931803333  | Program output: 1.2240456016  
Correct output: -122.2934290035 | Program output: -99.9967530274
Correct output: 112.9049586254 | Program output: 78.9049586254 
Correct output: -15.8996538358 | Program output: 1.2886798469  
Correct output: 123.9806904826 | Program output: 83.9806904826 
Correct output: -78.3331420378 | Program output: 0.8398216026  
Correct output: 66.7769669244  | Program output: 0.5230773943  
Correct output: 3.7173929377   | Program output: 0.7723691805  
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: 0.6597479007  
Correct output: 31.1961711525  | Program output: 1.2935593237  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_min} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup float_div integer_shove float_rot integer_rot integer_pop float_min float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [50.0 2 33.2164 11 6.3113 9 23.0555 11 23.2967 12 46.0 3 9.4987 8 89.0 3 71.7424 11 18.6925 12 89.0 2 0.3401 9 8.0 2 10.2967 9 30.5691 11 22.2967 11 34.0 3 17.1883 10 40.0 2 79.173 11 66.2539 11 2.945 9 78.0 3 15.8915 9 29.9026 10]
Total: 1088.6704
Mean: 21.773409
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2725.3626431999915
Median total errors in population: 1341.6745
Error averages by case: (110.75165630000004 3.535 93.78777849999948 12.06 61.466420099999944 6.402 80.09228319999997 6.137 121.04201090000132 11.204 108.95001000000002 4.331 80.3673597000002 5.585 145.77078740000007 4.355 125.21815310000017 10.109 84.55558399999994 7.126 142.22147050000007 3.593 92.73553959999958 11.491 69.79056659999999 3.405 89.41755660000001 9.627 91.5864136000006 5.943 122.00306000000072 11.482 96.05419259999995 4.303 103.95124150000031 12.439 102.21734800000002 3.512 94.74260050000053 7.291 128.34527479999988 11.849 88.29601370000037 11.306 134.95102860000011 4.321 87.32161609999949 10.55 82.27467730000045 5.496)
Error minima by case: (1.9741 2 25.4026 8 3.0 1 7.3848 1 7.5934 2 35.4913 3 3.8408 2 34.2426 2 1.1873 2 2.0752 2 0.1349 1 0.1468 8 6.0 2 5.4066 2 14.7932 2 6.5934 3 19.5017 3 14.8997 9 28.2774 2 2.0 2 1.5197 9 2.1899 8 15.9718 2 0.152 6 14.1962 2)
Average genome size in population (length): 57.626
Average program size in population (points): 58.626
Average percent parens in population: 0.017
Minimum age in population: 8.75
Maximum age in population: 14.171875
Average age in population: 12.1668984375
Median age in population: 12.23828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 85
Genome diversity (% unique Plush genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.16
Error (vector) diversity:			 0.16
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 12060092
--- Timings ---
Current time: 1529614919277 milliseconds
Total Time:          35.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.9 seconds, 42.3%
Fitness Testing:     15.9 seconds, 45.3%
Report:               4.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 49069.97249999988
Test mean error for best: 24.53499
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 67.6774606975 
Correct output: -30.5973968421 | Program output: 2.6190197031  
Correct output: -5.9015288603  | Program output: 0.4097571563  
Correct output: 24.3848067256  | Program output: 1.3293379974  
Correct output: -119.8990795364 | Program output: -96.6024035603
Correct output: 143.1946278344 | Program output: 97.1946278344 
Correct output: 10.8625446508  | Program output: 1.3638463298  
Correct output: 127.6458652779 | Program output: 38.6458652779 
Correct output: 71.8127365426  | Program output: 0.0702914247  
Correct output: -17.9148224328 | Program output: 0.7776304702  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.8097799878  
Correct output: 85.1198734399  | Program output: 77.1198734399 
Correct output: -62.5035732311 | Program output: -52.206897255 
Correct output: 31.7931803333  | Program output: 1.2240456016  
Correct output: -122.2934290035 | Program output: -99.9967530274
Correct output: 112.9049586254 | Program output: 78.9049586254 
Correct output: -15.8996538358 | Program output: 1.2886798469  
Correct output: 123.9806904826 | Program output: 83.9806904826 
Correct output: -78.3331420378 | Program output: 0.8398216026  
Correct output: 66.7769669244  | Program output: 0.5230773943  
Correct output: 3.7173929377   | Program output: 0.7723691805  
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: 0.6597479007  
Correct output: 31.1961711525  | Program output: 1.2935593237  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_min} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup float_div integer_shove float_rot integer_rot integer_pop float_min float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [50.0 2 33.2164 11 6.3113 9 23.0555 11 23.2967 12 46.0 3 9.4987 8 89.0 3 71.7424 11 18.6925 12 89.0 2 0.3401 9 8.0 2 10.2967 9 30.5691 11 22.2967 11 34.0 3 17.1883 10 40.0 2 79.173 11 66.2539 11 2.945 9 78.0 3 15.8915 9 29.9026 10]
Total: 1088.6704
Mean: 21.773409
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2778.397424199987
Median total errors in population: 1335.8901
Error averages by case: (111.86629620000004 3.398 105.34239240000024 12.66 62.16482409999989 5.422 87.68390850000017 5.253 98.86984290000099 11.332 110.0054695 4.241 93.44176420000025 5.114 148.33951970000007 4.353 126.78449749999992 9.529 90.38996290000009 6.086 145.1004075000001 4.032 106.39552089999988 12.066 68.89452099999998 3.309 77.65089750000023 8.972 102.16784450000029 5.178 97.92321890000089 10.658 96.44569629999998 4.216 123.8537674000002 12.67 103.02911680000003 3.375 88.47782580000035 5.964 131.23697580000027 12.29 99.32281780000002 11.579 137.6339754 4.323 93.63324599999991 11.571 88.66511470000037 5.487)
Error minima by case: (1.9741 2 14.8941 9 2.521 1 7.3848 1 6.2967 2 30.0994 3 3.8408 2 38.6459 2 1.1873 8 2.0752 2 4.2684 1 0.1468 9 7.0 2 5.4066 2 14.7932 2 5.2967 2 18.679 3 0.1963 9 23.1758 2 1.6669 2 1.5197 9 2.4207 8 31.3751 2 0.0613 6 14.1962 2)
Average genome size in population (length): 57.922
Average program size in population (points): 58.922
Average percent parens in population: 0.017
Minimum age in population: 10.375
Maximum age in population: 15.7890625
Average age in population: 13.67813671875
Median age in population: 13.703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.149
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 13508142
--- Timings ---
Current time: 1529614922849 milliseconds
Total Time:          38.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.4 seconds, 42.4%
Fitness Testing:     17.6 seconds, 45.3%
Report:               4.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 48882.82999999996
Test mean error for best: 24.44141
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 67.6774606975 
Correct output: -30.5973968421 | Program output: 16.4899785072 
Correct output: -5.9015288603  | Program output: 16.4899785072 
Correct output: 24.3848067256  | Program output: 16.4899785072 
Correct output: -119.8990795364 | Program output: -97.3890580435
Correct output: 143.1946278344 | Program output: 97.1946278344 
Correct output: 10.8625446508  | Program output: 16.4899785072 
Correct output: 127.6458652779 | Program output: 38.6458652779 
Correct output: 71.8127365426  | Program output: 16.4899785072 
Correct output: -17.9148224328 | Program output: 16.4899785072 
Correct output: 93.2683698204  | Program output: 16.4899785072 
Correct output: 1.1498437373   | Program output: 16.4899785072 
Correct output: 85.1198734399  | Program output: 77.1198734399 
Correct output: -62.5035732311 | Program output: -52.9935517383
Correct output: 31.7931803333  | Program output: 16.4899785072 
Correct output: -122.2934290035 | Program output: -100.7834075106
Correct output: 112.9049586254 | Program output: 78.9049586254 
Correct output: -15.8996538358 | Program output: 16.4899785072 
Correct output: 123.9806904826 | Program output: 83.9806904826 
Correct output: -78.3331420378 | Program output: 16.4899785072 
Correct output: 66.7769669244  | Program output: 16.4899785072 
Correct output: 3.7173929377   | Program output: 16.4899785072 
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: 16.4899785072 
Correct output: 31.1961711525  | Program output: 16.4899785072 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 16.489978507167244} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction tag_float_457} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_div integer_swap float_rot integer_max integer_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 16.489978507167244 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup integer_dup_times integer_dec float_sub integer_swap integer_dup integer_max integer_shove float_rot integer_rot integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float tag_float_457 float_inc integer_max integer_yank float_add integer_yank float_add 43.997522794043505 integer_min float_yankdup -28.069662028429462)
Errors: [50.0 2 47.0874 12 22.3915 11 7.8948 10 22.51 11 46.0 3 5.6274 10 89.0 3 55.3228 10 34.4048 11 76.7784 10 15.3401 9 8.0 2 9.51 8 15.3032 11 21.51 10 34.0 3 32.3896 10 40.0 2 94.8231 12 50.287 10 12.7726 11 78.0 3 0.0613 8 14.7062 11]
Total: 1086.7202
Mean: 21.734404
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2861.4645695000013
Median total errors in population: 1258.2849999999996
Error averages by case: (117.12458640000011 3.502 105.7028462000006 12.198 73.34207620000002 8.267 88.29236110000035 8.323 109.95960900000102 10.564 114.90592200000002 4.314 87.48035090000019 7.806 150.46523140000008 4.658 127.87877479999997 10.653 94.50522820000036 9.563 142.25639060000032 5.381 92.54561459999992 10.993 75.7257759 3.419 89.61480400000048 8.27 98.90897250000027 8.1 109.74637300000087 9.868 101.96059089999997 4.303 110.36017510000025 12.083 108.18945510000005 3.469 124.54557920000039 9.193 128.9160258000006 11.505 89.1625371999999 10.89 139.3656525000001 4.639 86.96592009999974 11.136 91.66771680000066 8.779)
Error minima by case: (17.6775 2 4.2067 8 0.3131 1 6.6815 1 7.5934 2 29.4902 3 2.5317 2 3.9951 2 1.1873 8 1.2138 2 4.2684 1 0.1468 9 0.2967 2 1.1152 1 14.0899 2 6.5934 2 16.9396 2 0.1963 9 23.1758 2 1.9599 2 1.5197 9 0.2235 8 0.4535 2 0.0613 7 6.5934 2)
Average genome size in population (length): 59.013
Average program size in population (points): 60.013
Average percent parens in population: 0.017
Minimum age in population: 12.2734375
Maximum age in population: 17.015625
Average age in population: 15.27705078125
Median age in population: 15.322265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.206
Error (vector) diversity:			 0.211
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 14983492
--- Timings ---
Current time: 1529614926647 milliseconds
Total Time:          42.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.1 seconds, 42.6%
Fitness Testing:     19.2 seconds, 45.2%
Report:               5.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 48425.2190999999
Test mean error for best: 24.21261
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 67.6774606975 
Correct output: -30.5973968421 | Program output: 15.7033240239 
Correct output: -5.9015288603  | Program output: -0.2576695489 
Correct output: 24.3848067256  | Program output: 15.7033240239 
Correct output: -119.8990795364 | Program output: -96.6024035603
Correct output: 143.1946278344 | Program output: 97.1946278344 
Correct output: 10.8625446508  | Program output: 15.7033240239 
Correct output: 127.6458652779 | Program output: 38.6458652779 
Correct output: 71.8127365426  | Program output: -0.0364259275 
Correct output: -17.9148224328 | Program output: -0.6361664384 
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: -0.6803615967 
Correct output: 85.1198734399  | Program output: 77.1198734399 
Correct output: -62.5035732311 | Program output: -52.206897255 
Correct output: 31.7931803333  | Program output: 15.7033240239 
Correct output: -122.2934290035 | Program output: -99.9967530274
Correct output: 112.9049586254 | Program output: 78.9049586254 
Correct output: -15.8996538358 | Program output: 15.7033240239 
Correct output: 123.9806904826 | Program output: 83.9806904826 
Correct output: -78.3331420378 | Program output: -0.7238728151 
Correct output: 66.7769669244  | Program output: -0.3541670987 
Correct output: 3.7173929377   | Program output: -0.6291542769 
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: -0.4922565695 
Correct output: 31.1961711525  | Program output: 15.7033240239 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864})
Best program: (float_swap integer_swap float_rot integer_max integer_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup float_div integer_shove float_rot integer_rot integer_pop float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864)
Errors: [50.0 2 46.3007 12 5.6439 11 8.6815 11 23.2967 12 46.0 3 4.8408 10 89.0 3 71.8492 11 17.2787 10 89.0 2 1.8302 12 8.0 2 10.2967 9 16.0899 9 22.2967 11 34.0 3 31.603 11 40.0 2 77.6093 10 67.1311 11 4.3465 12 78.0 3 17.0436 11 15.4928 12]
Total: 1080.6312999999996
Mean: 21.612625
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2716.658277800003
Median total errors in population: 1091.2937000000002
Error averages by case: (110.6742494000001 3.568 101.09160170000114 11.776 72.84605290000032 9.207 84.95575520000071 10.403 99.87532240000127 11.609 109.25144259999999 4.37 77.5216787999992 8.778 144.88277570000008 4.46 126.68404380000088 11.067 88.49294600000037 11.159 139.32952260000044 5.148 75.70313030000048 10.06 71.34858750000002 3.479 82.4434653000003 8.985 92.83195789999967 10.015 99.31836790000114 10.648 96.35884379999996 4.369 92.4592434000001 11.135 102.47758639999996 3.536 136.2737598999994 10.574 123.60821260000003 11.173 75.19714270000028 10.075 133.86871210000007 4.442 78.07641629999935 10.317 90.42846060000093 10.306)
Error minima by case: (10.7033 2 4.2067 8 0.7033 1 7.3848 2 1.739 2 14.7033 3 3.8408 1 28.2967 2 1.1873 8 1.4248 2 4.2684 1 0.0851 8 7.0 2 5.4066 2 14.7932 2 2.739 3 18.2967 3 0.1963 8 20.7033 2 3.0 2 1.5197 8 0.2235 8 17.2967 2 0.0613 7 6.5934 2)
Average genome size in population (length): 60.632
Average program size in population (points): 61.632
Average percent parens in population: 0.016
Minimum age in population: 14.3359375
Maximum age in population: 18.662109375
Average age in population: 16.7725556640625
Median age in population: 16.8095703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.167
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 16499292
--- Timings ---
Current time: 1529614930648 milliseconds
Total Time:          46.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.6 seconds, 42.1%
Fitness Testing:     21.2 seconds, 45.7%
Report:               5.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 47088.72899999999
Test mean error for best: 23.54436
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 67.6774606975 
Correct output: -30.5973968421 | Program output: -4.2309149287 
Correct output: -5.9015288603  | Program output: 0.2576695489  
Correct output: 24.3848067256  | Program output: 1.9821280945  
Correct output: -119.8990795364 | Program output: -112.3057275842
Correct output: 143.1946278344 | Program output: 97.1946278344 
Correct output: 10.8625446508  | Program output: 2.1438944611  
Correct output: 127.6458652779 | Program output: 38.6458652779 
Correct output: 71.8127365426  | Program output: 0.0364259275  
Correct output: -17.9148224328 | Program output: 0.6361664384  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.6803615967  
Correct output: 85.1198734399  | Program output: 77.1198734399 
Correct output: -62.5035732311 | Program output: -67.910221279 
Correct output: 31.7931803333  | Program output: 1.5774710526  
Correct output: -122.2934290035 | Program output: -115.7000770514
Correct output: 112.9049586254 | Program output: 78.9049586254 
Correct output: -15.8996538358 | Program output: 1.8116734656  
Correct output: 123.9806904826 | Program output: 83.9806904826 
Correct output: -78.3331420378 | Program output: 0.7238728151  
Correct output: 66.7769669244  | Program output: 0.3541670987  
Correct output: 3.7173929377   | Program output: 0.6291542769  
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: 0.4922565695  
Correct output: 31.1961711525  | Program output: 1.8310940564  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_min} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup float_div integer_shove float_rot integer_rot integer_pop float_min float_yank in2 float_max float_dup float_dup_times integer_yank float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [50.0 2 26.3665 11 6.1592 12 22.4027 10 7.5934 10 46.0 3 8.7187 10 89.0 3 71.7763 11 18.551 11 89.0 2 0.4695 11 8.0 2 5.4066 10 30.2157 10 6.5934 11 34.0 3 17.7113 8 40.0 2 79.057 11 66.4228 11 3.0882 11 78.0 3 16.059 11 29.3651 10]
Total: 1048.9564000000003
Mean: 20.979128
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2638.3060213999916
Median total errors in population: 1088.6704
Error averages by case: (108.3916032000001 3.648 96.81342010000051 11.522 63.92684570000044 8.99 85.4176883000009 10.637 100.54418170000093 12.087 107.53307670000001 4.42 75.29101239999889 8.458 142.51156670000006 4.5 124.06739530000112 10.956 78.67908719999983 11.312 138.68355590000013 3.885 67.01650730000058 9.808 68.99363600000007 3.574 82.77881210000047 9.409 92.88520439999938 10.592 100.02321160000082 11.168 94.1532557999999 4.455 86.08906969999998 10.692 100.43254460000011 3.633 126.22111629999878 10.557 121.18172819999927 11.337 68.02210909999998 9.827 131.33138930000004 4.499 75.60956749999934 9.754 91.90643630000083 10.082)
Error minima by case: (46.047 2 7.8138 8 2.521 1 7.3848 1 7.5934 3 45.0 3 3.8408 2 56.0154 2 0.1822 8 1.3295 2 21.6379 2 0.0851 8 7.0 2 5.4066 2 12.2043 2 6.5934 3 33.0 3 0.1963 8 39.0 2 1.243 2 4.8535 9 0.2971 8 37.7446 2 0.0613 8 12.8014 2)
Average genome size in population (length): 60.579
Average program size in population (points): 61.579
Average percent parens in population: 0.016
Minimum age in population: 15.958984375
Maximum age in population: 20.40185546875
Average age in population: 18.2535751953125
Median age in population: 18.301513671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.162
Error (vector) diversity:			 0.163
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 18013767
--- Timings ---
Current time: 1529614934252 milliseconds
Total Time:          50.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.0 seconds, 41.9%
Fitness Testing:     22.9 seconds, 45.7%
Report:               6.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 48655.979699999865
Test mean error for best: 24.32799
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 88.1253442502 
Correct output: -30.5973968421 | Program output: 2.6190197031  
Correct output: -5.9015288603  | Program output: 0.4097571563  
Correct output: 24.3848067256  | Program output: 1.3293379974  
Correct output: -119.8990795364 | Program output: -96.6024035603
Correct output: 143.1946278344 | Program output: 115.9239727203
Correct output: 10.8625446508  | Program output: 1.3638463298  
Correct output: 127.6458652779 | Program output: 65.097535907  
Correct output: 71.8127365426  | Program output: 0.0702914247  
Correct output: -17.9148224328 | Program output: 0.7776304702  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.8097799878  
Correct output: 85.1198734399  | Program output: 96.8383104545 
Correct output: -62.5035732311 | Program output: -52.206897255 
Correct output: 31.7931803333  | Program output: 1.2240456016  
Correct output: -122.2934290035 | Program output: -99.9967530274
Correct output: 112.9049586254 | Program output: 98.5099916313 
Correct output: -15.8996538358 | Program output: 1.2886798469  
Correct output: 123.9806904826 | Program output: 103.2956708752
Correct output: -78.3331420378 | Program output: 0.8398216026  
Correct output: 66.7769669244  | Program output: 0.5230773943  
Correct output: 3.7173929377   | Program output: 0.7723691805  
Correct output: 109.3750668562 | Program output: 62.8133597372 
Correct output: 16.5512971727  | Program output: 0.6597479007  
Correct output: 31.1961711525  | Program output: 1.2935593237  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult integer_shove float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup integer_max integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_min float_yankdup -28.069662028429462)
Errors: [29.5521 13 33.2164 11 6.3113 9 23.0555 11 23.2967 12 27.2707 11 9.4987 8 62.5483 11 71.7424 11 18.6925 12 89.0 2 0.3401 9 11.7184 11 10.2967 9 30.5691 11 22.2967 11 14.395 10 17.1883 10 20.685 9 79.173 11 66.2539 11 2.945 9 46.5617 12 15.8915 9 29.9026 10]
Total: 1015.4015999999999
Mean: 20.308031
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2302.715488599989
Median total errors in population: 1088.6704
Error averages by case: (99.31468940000009 3.467 80.16354569999984 11.557 52.78037290000045 9.307 66.55785460000048 10.383 78.38072520000024 11.695 97.8715293 4.253 57.54318249999891 8.436 134.57899600000005 4.324 112.08575350000085 10.919 68.43302049999934 11.324 130.5687166 4.13 55.943506800000556 9.855 58.32165040000001 3.392 60.722591999999594 9.135 74.87440089999991 10.313 77.82861010000029 10.86 84.34160029999997 4.286 70.59149380000058 10.606 90.75213020000002 3.439 117.62583289999864 10.666 109.06228569999924 11.289 56.50454419999966 9.986 124.4554876 4.322 63.49462309999973 9.715 72.33034440000068 9.929)
Error minima by case: (16.3753 2 14.8941 8 2.521 2 7.0218 1 6.8067 2 27.2707 3 2.5317 2 38.6459 2 1.1873 8 2.0752 2 4.2684 1 0.0851 8 7.0 2 5.4066 2 0.3865 2 5.8067 3 14.395 3 0.1963 8 20.685 2 1.243 2 1.5197 8 0.3243 8 31.3751 2 0.0613 7 0.2105 2)
Average genome size in population (length): 61.045
Average program size in population (points): 62.045
Average percent parens in population: 0.016
Minimum age in population: 17.095703125
Maximum age in population: 21.65478515625
Average age in population: 19.70064184570312
Median age in population: 19.727783203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.17
Error (vector) diversity:			 0.17
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 19539892
--- Timings ---
Current time: 1529614938129 milliseconds
Total Time:          53.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.5 seconds, 41.7%
Fitness Testing:     24.8 seconds, 45.9%
Report:               6.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 47163.55469999998
Test mean error for best: 23.58178
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 89.0357805531 
Correct output: -30.5973968421 | Program output: 2.4676992559  
Correct output: -5.9015288603  | Program output: 0.386705165   
Correct output: 24.3848067256  | Program output: 1.3225728378  
Correct output: -119.8990795364 | Program output: -95.6024035603
Correct output: 143.1946278344 | Program output: 116.8872898129
Correct output: 10.8625446508  | Program output: 1.3556069107  
Correct output: 127.6458652779 | Program output: 65.6486133599 
Correct output: 71.8127365426  | Program output: 0.0117845522  
Correct output: -17.9148224328 | Program output: 0.7744363385  
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 0.8074475305  
Correct output: 85.1198734399  | Program output: 97.7739827557 
Correct output: -62.5035732311 | Program output: -51.206897255 
Correct output: 31.7931803333  | Program output: 1.2208940183  
Correct output: -122.2934290035 | Program output: -98.9967530274
Correct output: 112.9049586254 | Program output: 99.4492188954 
Correct output: -15.8996538358 | Program output: 1.2834687392  
Correct output: 123.9806904826 | Program output: 104.2435375948
Correct output: -78.3331420378 | Program output: 0.8381708994  
Correct output: 66.7769669244  | Program output: 0.508139185   
Correct output: 3.7173929377   | Program output: 0.7690209758  
Correct output: 109.3750668562 | Program output: 62.8695490621 
Correct output: 16.5512971727  | Program output: 0.6522122013  
Correct output: 31.1961711525  | Program output: 1.288172207   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction float_inc} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult integer_shove float_tan float_yankdup float_yankdup integer_sub in1 float_inc in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup integer_max integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add integer_dup_times integer_pop integer_dup_times integer_max float_pop integer_min float_yankdup -28.069662028429462)
Errors: [28.6417 12 33.0651 11 6.2882 11 23.0622 11 24.2967 12 26.3073 11 9.5069 9 61.9973 9 71.801 8 18.6893 11 88.0 2 0.3424 9 12.6541 11 11.2967 10 30.5723 10 23.2967 11 13.4557 9 17.1831 10 19.7372 12 79.1713 11 66.2688 11 2.9484 9 46.5055 12 15.8991 10 29.908 9]
Total: 1011.895
Mean: 20.2379
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2641.2303833999867
Median total errors in population: 1088.6704
Error averages by case: (107.84278290000015 3.794 99.21590960000073 11.898 64.77728480000017 10.097 81.83167810000025 10.238 99.77082510000015 11.554 106.63916049999999 4.575 75.1704410999995 9.155 142.23403120000012 4.618 122.55298649999963 10.79 82.78683530000036 11.118 135.7372497999999 4.999 71.09474180000012 10.138 67.52124419999997 3.683 81.99903870000028 9.302 90.32607539999965 10.025 99.26185510000009 10.963 93.15049139999995 4.554 91.88118629999958 10.778 99.51785830000004 3.744 129.578818999999 10.75 120.24050359999919 11.164 70.81172479999951 10.54 132.39844820000013 4.589 74.29747590000005 10.001 87.30273580000056 10.222)
Error minima by case: (0.6775 2 4.2067 8 4.2133 2 6.8948 1 6.02 2 26.3073 3 2.5317 2 49.3541 3 1.1873 8 2.0752 2 22.883 2 0.0851 8 7.0 2 4.4066 2 0.3865 2 5.02 3 13.4557 3 0.1963 7 19.7372 2 1.243 2 16.574 9 0.3243 7 45.6249 3 0.0613 7 0.2105 2)
Average genome size in population (length): 61.888
Average program size in population (points): 62.888
Average percent parens in population: 0.016
Minimum age in population: 18.81005859375
Maximum age in population: 23.139404296875
Average age in population: 21.10060412597656
Median age in population: 21.1319580078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.204
Error (vector) diversity:			 0.206
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 21087114
--- Timings ---
Current time: 1529614942140 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.0 seconds, 41.4%
Fitness Testing:     26.8 seconds, 46.2%
Report:               7.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 47163.55469999998
Test mean error for best: 23.58178
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 89.0357805531 
Correct output: -30.5973968421 | Program output: 2.4676992559  
Correct output: -5.9015288603  | Program output: 0.386705165   
Correct output: 24.3848067256  | Program output: 1.3225728378  
Correct output: -119.8990795364 | Program output: -95.6024035603
Correct output: 143.1946278344 | Program output: 116.8872898129
Correct output: 10.8625446508  | Program output: 1.3556069107  
Correct output: 127.6458652779 | Program output: 65.6486133599 
Correct output: 71.8127365426  | Program output: 0.0117845522  
Correct output: -17.9148224328 | Program output: 0.7744363385  
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 0.8074475305  
Correct output: 85.1198734399  | Program output: 97.7739827557 
Correct output: -62.5035732311 | Program output: -51.206897255 
Correct output: 31.7931803333  | Program output: 1.2208940183  
Correct output: -122.2934290035 | Program output: -98.9967530274
Correct output: 112.9049586254 | Program output: 99.4492188954 
Correct output: -15.8996538358 | Program output: 1.2834687392  
Correct output: 123.9806904826 | Program output: 104.2435375948
Correct output: -78.3331420378 | Program output: 0.8381708994  
Correct output: 66.7769669244  | Program output: 0.508139185   
Correct output: 3.7173929377   | Program output: 0.7690209758  
Correct output: 109.3750668562 | Program output: 62.8695490621 
Correct output: 16.5512971727  | Program output: 0.6522122013  
Correct output: 31.1961711525  | Program output: 1.288172207   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction float_inc} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult integer_shove float_tan float_yankdup float_yankdup integer_sub in1 float_inc in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup integer_max integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add integer_dup_times integer_pop integer_dup_times integer_max float_pop integer_min float_yankdup -28.069662028429462)
Errors: [28.6417 12 33.0651 11 6.2882 11 23.0622 11 24.2967 12 26.3073 11 9.5069 9 61.9973 9 71.801 8 18.6893 11 88.0 2 0.3424 9 12.6541 11 11.2967 10 30.5723 10 23.2967 11 13.4557 9 17.1831 10 19.7372 12 79.1713 11 66.2688 11 2.9484 9 46.5055 12 15.8991 10 29.908 9]
Total: 1011.895
Mean: 20.2379
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2908.1291725999963
Median total errors in population: 1077.7676999999999
Error averages by case: (118.58185300000012 4.551 106.10549080000047 11.748 74.85588969999992 10.508 93.39980480000058 10.31 107.4352921000002 11.353 118.62904539999984 5.185 85.29191429999995 9.641 152.7607252999999 5.2 134.17147109999925 10.922 90.70274700000046 11.106 148.47302670000002 4.209 78.75063350000005 10.563 81.13574889999994 4.318 92.07025750000054 9.772 102.14715450000037 9.966 106.27464850000008 11.22 104.57827390000007 5.124 99.56711360000023 10.614 111.40272870000001 4.327 138.2338311 10.803 131.67453279999972 11.326 79.2360886999997 10.776 146.58798730000007 5.228 86.6588936999999 10.608 99.64201970000059 10.384)
Error minima by case: (28.6417 2 13.8941 7 2.5058 2 3.5098 1 6.4399 3 26.3073 3 0.89 2 38.6459 2 1.1873 8 2.2025 2 4.2684 1 0.0736 8 2.0671 2 4.4066 2 0.3865 2 5.4399 3 13.4557 3 0.1963 7 19.7372 2 3.3934 2 1.6797 8 0.3243 8 31.3751 2 0.0613 8 0.2105 2)
Average genome size in population (length): 62.956
Average program size in population (points): 63.956
Average percent parens in population: 0.016
Minimum age in population: 19.933349609375
Maximum age in population: 24.24957275390625
Average age in population: 22.43982696533203
Median age in population: 22.46627807617188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.227
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 22661014
--- Timings ---
Current time: 1529614945710 milliseconds
Total Time:          61.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.4 seconds, 41.3%
Fitness Testing:     28.5 seconds, 46.3%
Report:               7.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 51039.94109999996
Test mean error for best: 25.51997
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 126.278910007 
Correct output: -30.5973968421 | Program output: -4.2309149287 
Correct output: -5.9015288603  | Program output: 0.2576695489  
Correct output: 24.3848067256  | Program output: 1.9821280945  
Correct output: -119.8990795364 | Program output: -112.3057275842
Correct output: 143.1946278344 | Program output: 143.5945549707
Correct output: 10.8625446508  | Program output: 2.1438944611  
Correct output: 127.6458652779 | Program output: 206.3072367659
Correct output: 71.8127365426  | Program output: 0.0364259275  
Correct output: -17.9148224328 | Program output: 0.6361664384  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.6803615967  
Correct output: 85.1198734399  | Program output: 130.104030691 
Correct output: -62.5035732311 | Program output: -67.910221279 
Correct output: 31.7931803333  | Program output: 1.5774710526  
Correct output: -122.2934290035 | Program output: -115.7000770514
Correct output: 112.9049586254 | Program output: 131.078188255 
Correct output: -15.8996538358 | Program output: 1.8116734656  
Correct output: 123.9806904826 | Program output: 134.1490219759
Correct output: -78.3331420378 | Program output: 0.7238728151  
Correct output: 66.7769669244  | Program output: 0.3541670987  
Correct output: 3.7173929377   | Program output: 0.6291542769  
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: 0.4922565695  
Correct output: 31.1961711525  | Program output: 1.8310940564  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_max} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup_items integer_max 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap float_rot float_div integer_pop float_div integer_pop float_max integer_dup integer_max integer_shove float_rot float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_min float_yankdup -28.069662028429462)
Errors: [8.6014 9 26.3665 11 6.1592 12 22.4027 10 7.5934 10 0.3999 8 8.7187 10 78.6614 12 71.7763 11 18.551 11 89.0 2 0.4695 11 44.9842 10 5.4066 10 30.2157 10 6.5934 11 18.1732 8 17.7113 8 10.1683 12 79.057 11 66.4228 11 3.0882 11 78.0 3 16.059 11 29.3651 10]
Total: 986.9447999999999
Mean: 19.738895
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2823.673378900008
Median total errors in population: 1048.9564000000003
Error averages by case: (117.33397680000009 6.904 95.24591930000003 11.297 73.34840130000013 10.451 88.29974480000061 10.323 93.34261830000013 11.242 118.80064989999941 6.958 77.98675139999956 9.581 148.8624133999995 6.923 133.0481627999996 11.063 87.64715440000029 11.052 150.27747010000002 3.972 75.7896420000004 10.582 84.76453099999976 6.284 80.89253220000043 10.005 96.89841679999981 10.324 92.86519910000013 11.382 104.03579710000022 6.672 89.17416659999991 10.093 110.6224784999997 5.976 137.74534039999972 10.976 130.3932923 11.424 76.28145959999965 10.568 148.9349269000003 7.152 84.68009189999937 10.914 94.25624200000028 10.028)
Error minima by case: (1.1875 2 10.6632 8 1.2601 1 3.5098 2 5.8067 3 0.3999 3 0.4995 2 32.5384 2 1.1873 8 0.1928 2 19.8951 1 0.0851 8 2.0671 2 4.4066 2 0.3865 2 4.8067 3 12.8112 3 0.1963 6 10.1683 2 3.0 2 1.5197 9 0.2235 8 36.0018 2 0.0613 7 0.2105 2)
Average genome size in population (length): 65.159
Average program size in population (points): 66.159
Average percent parens in population: 0.015
Minimum age in population: 21.5009765625
Maximum age in population: 25.75537109375
Average age in population: 23.79221209716797
Median age in population: 23.83979797363281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.227
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 24289989
--- Timings ---
Current time: 1529614949632 milliseconds
Total Time:          65.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.9 seconds, 41.1%
Fitness Testing:     30.4 seconds, 46.4%
Report:               8.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 51039.94109999996
Test mean error for best: 25.51997
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 126.278910007 
Correct output: -30.5973968421 | Program output: -4.2309149287 
Correct output: -5.9015288603  | Program output: 0.2576695489  
Correct output: 24.3848067256  | Program output: 1.9821280945  
Correct output: -119.8990795364 | Program output: -112.3057275842
Correct output: 143.1946278344 | Program output: 143.5945549707
Correct output: 10.8625446508  | Program output: 2.1438944611  
Correct output: 127.6458652779 | Program output: 206.3072367659
Correct output: 71.8127365426  | Program output: 0.0364259275  
Correct output: -17.9148224328 | Program output: 0.6361664384  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.6803615967  
Correct output: 85.1198734399  | Program output: 130.104030691 
Correct output: -62.5035732311 | Program output: -67.910221279 
Correct output: 31.7931803333  | Program output: 1.5774710526  
Correct output: -122.2934290035 | Program output: -115.7000770514
Correct output: 112.9049586254 | Program output: 131.078188255 
Correct output: -15.8996538358 | Program output: 1.8116734656  
Correct output: 123.9806904826 | Program output: 134.1490219759
Correct output: -78.3331420378 | Program output: 0.7238728151  
Correct output: 66.7769669244  | Program output: 0.3541670987  
Correct output: 3.7173929377   | Program output: 0.6291542769  
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: 0.4922565695  
Correct output: 31.1961711525  | Program output: 1.8310940564  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_max} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup_items integer_max 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap float_rot float_div integer_pop float_div integer_pop float_max integer_dup integer_max integer_shove float_rot float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_min float_yankdup -28.069662028429462)
Errors: [8.6014 9 26.3665 11 6.1592 12 22.4027 10 7.5934 10 0.3999 8 8.7187 10 78.6614 12 71.7763 11 18.551 11 89.0 2 0.4695 11 44.9842 10 5.4066 10 30.2157 10 6.5934 11 18.1732 8 17.7113 8 10.1683 12 79.057 11 66.4228 11 3.0882 11 78.0 3 16.059 11 29.3651 10]
Total: 986.9447999999999
Mean: 19.738895
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3103.8974159999993
Median total errors in population: 1015.4015999999999
Error averages by case: (120.62468940000008 10.812 108.58926530000124 11.322 83.99640840000049 9.885 100.52549430000093 10.671 112.02846160000148 11.976 125.09520099999853 9.831 89.82591479999884 8.99 148.03220389999893 9.696 143.89619340000056 10.838 100.91060220000038 11.559 157.84831990000004 3.966 89.17148750000051 9.963 101.86731119999949 9.611 94.29414670000085 9.831 109.55838569999865 10.626 111.60023820000136 11.355 109.55574540000086 9.145 100.87542849999897 10.58 116.04803709999963 8.854 151.8164762999996 11.13 140.16470440000003 11.369 89.50693020000064 9.959 141.11863380000085 10.421 96.19082139999928 10.265 108.05731540000065 10.044)
Error minima by case: (8.6014 2 8.2831 7 0.1575 1 3.1596 1 3.1297 2 0.3999 3 0.4995 2 27.5527 2 1.1873 8 2.2025 2 4.2684 1 0.0999 8 1.632 2 4.4066 2 12.3534 2 2.1297 3 11.8822 3 0.1963 8 10.1683 2 3.0 2 17.223 8 0.0956 8 24.3099 2 0.0613 7 10.5798 2)
Average genome size in population (length): 61.512
Average program size in population (points): 62.512
Average percent parens in population: 0.016
Minimum age in population: 23.0960693359375
Maximum age in population: 27.4510498046875
Average age in population: 25.20933213806152
Median age in population: 25.24059295654297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.202
Error (vector) diversity:			 0.202
Behavioral diversity:				 0.202
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 25827789
--- Timings ---
Current time: 1529614953305 milliseconds
Total Time:          69.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.4 seconds, 41.1%
Fitness Testing:     32.1 seconds, 46.4%
Report:               8.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 51039.94109999996
Test mean error for best: 25.51997
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 126.278910007 
Correct output: -30.5973968421 | Program output: -4.2309149287 
Correct output: -5.9015288603  | Program output: 0.2576695489  
Correct output: 24.3848067256  | Program output: 1.9821280945  
Correct output: -119.8990795364 | Program output: -112.3057275842
Correct output: 143.1946278344 | Program output: 143.5945549707
Correct output: 10.8625446508  | Program output: 2.1438944611  
Correct output: 127.6458652779 | Program output: 206.3072367659
Correct output: 71.8127365426  | Program output: 0.0364259275  
Correct output: -17.9148224328 | Program output: 0.6361664384  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.6803615967  
Correct output: 85.1198734399  | Program output: 130.104030691 
Correct output: -62.5035732311 | Program output: -67.910221279 
Correct output: 31.7931803333  | Program output: 1.5774710526  
Correct output: -122.2934290035 | Program output: -115.7000770514
Correct output: 112.9049586254 | Program output: 131.078188255 
Correct output: -15.8996538358 | Program output: 1.8116734656  
Correct output: 123.9806904826 | Program output: 134.1490219759
Correct output: -78.3331420378 | Program output: 0.7238728151  
Correct output: 66.7769669244  | Program output: 0.3541670987  
Correct output: 3.7173929377   | Program output: 0.6291542769  
Correct output: 109.3750668562 | Program output: 31.3750668562 
Correct output: 16.5512971727  | Program output: 0.4922565695  
Correct output: 31.1961711525  | Program output: 1.8310940564  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_add} {:instruction 74} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_rot float_frominteger integer_rot float_frominteger float_rot float_mult integer_shove float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup integer_max integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc float_yankdup integer_yank float_add 74 integer_pop integer_dup_times float_dup_times integer_max float_pop integer_min float_yankdup -28.069662028429462)
Errors: [8.6014 9 26.3665 11 6.1592 12 22.4027 10 7.5934 10 0.3999 8 8.7187 10 78.6614 12 71.7763 11 18.551 11 89.0 2 0.4695 11 44.9842 10 5.4066 10 30.2157 10 6.5934 11 18.1732 8 17.7113 8 10.1683 12 79.057 11 66.4228 11 3.0882 11 78.0 3 16.059 11 29.3651 10]
Total: 986.9447999999999
Mean: 19.738895
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3060.393367299998
Median total errors in population: 1015.4015999999999
Error averages by case: (114.93382079999925 11.648 110.32404740000169 11.5 79.2535478000004 10.476 103.6189036000006 10.539 112.48212120000161 12.175 122.00303269999952 10.558 93.10420999999882 9.092 140.3926688000001 10.062 136.5684647000014 10.067 99.25240389999976 11.562 152.74976540000011 3.816 86.67643500000014 9.809 100.6789133999997 10.57 94.09237540000117 10.035 114.58309559999933 10.283 112.02326220000143 11.264 105.98805420000052 9.602 105.62440949999908 10.701 112.4162210000005 10.458 156.80412849999985 11.19 134.93570580000076 11.335 85.70326970000008 9.785 127.07478020000018 11.12 91.46869939999941 10.339 109.95303110000002 9.702)
Error minima by case: (0.2627 2 17.3618 8 0.3418 1 3.616 1 1.7388 2 0.3999 3 2.2479 2 22.9937 2 1.1873 7 2.2115 2 2.2956 1 0.0999 7 2.0671 2 4.4066 2 12.6211 2 5.8067 3 0.3192 3 1.4798 8 10.1683 2 3.0 2 1.5197 8 1.6277 7 31.3751 2 0.4487 7 10.9676 2)
Average genome size in population (length): 60.875
Average program size in population (points): 61.875
Average percent parens in population: 0.016
Minimum age in population: 24.0960693359375
Maximum age in population: 28.83365631103516
Average age in population: 26.66134282684326
Median age in population: 26.69857788085938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.185
Error (vector) diversity:			 0.188
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 27349664
--- Timings ---
Current time: 1529614957172 milliseconds
Total Time:          72.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.9 seconds, 41.0%
Fitness Testing:     33.9 seconds, 46.5%
Report:               9.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 51106.88209999995
Test mean error for best: 25.55344
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 127.278910007 
Correct output: -30.5973968421 | Program output: -3.2309149287 
Correct output: -5.9015288603  | Program output: 1.2576695489  
Correct output: 24.3848067256  | Program output: 2.9821280945  
Correct output: -119.8990795364 | Program output: -111.3057275842
Correct output: 143.1946278344 | Program output: 144.5945549707
Correct output: 10.8625446508  | Program output: 3.1438944611  
Correct output: 127.6458652779 | Program output: 207.3072367659
Correct output: 71.8127365426  | Program output: 1.0364259275  
Correct output: -17.9148224328 | Program output: 1.6361664384  
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.6803615967  
Correct output: 85.1198734399  | Program output: 131.104030691 
Correct output: -62.5035732311 | Program output: -66.910221279 
Correct output: 31.7931803333  | Program output: 2.5774710526  
Correct output: -122.2934290035 | Program output: -114.7000770514
Correct output: 112.9049586254 | Program output: 132.078188255 
Correct output: -15.8996538358 | Program output: 2.8116734656  
Correct output: 123.9806904826 | Program output: 135.1490219759
Correct output: -78.3331420378 | Program output: 1.7238728151  
Correct output: 66.7769669244  | Program output: 1.3541670987  
Correct output: 3.7173929377   | Program output: 1.6291542769  
Correct output: 109.3750668562 | Program output: 32.3750668562 
Correct output: 16.5512971727  | Program output: 1.4922565695  
Correct output: 31.1961711525  | Program output: 2.8310940564  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_rot} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger float_rot in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup float_dup_items 15.703324023944859 float_dup_items integer_dup_times float_sub integer_dup_items integer_dup integer_max integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times in2 float_max float_dup float_dup_times float_inc float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [9.6014 8 27.3665 10 7.1592 12 21.4027 9 8.5934 10 1.3999 9 7.7187 10 79.6614 11 70.7763 10 19.551 10 88.0 2 0.5305 10 45.9842 10 4.4066 10 29.2157 11 7.5934 11 19.1732 7 18.7113 9 11.1683 12 80.057 11 65.4228 11 2.0882 11 77.0 3 15.059 10 28.3651 11]
Total: 984.0058
Mean: 19.680117
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2917.3458092000074
Median total errors in population: 1011.895
Error averages by case: (107.17676179999906 10.801 98.89267850000113 11.547 72.09408480000026 11.096 95.15857000000058 10.151 102.6268580000008 11.871 112.29201339999983 10.01 85.25388919999936 9.744 138.2531448000005 10.036 130.95921450000145 9.866 96.63917499999963 11.245 147.29171050000002 3.97 86.689551 10.053 97.29435480000005 10.39 83.77789760000049 10.209 105.4180902999997 10.059 102.68968530000072 11.092 100.61221520000015 9.373 97.24837419999942 10.631 104.60897370000097 10.807 150.78908849999993 11.06 129.82874880000097 11.321 85.50385099999949 9.943 139.46367229999956 10.02 89.73555159999941 10.74 101.2446543999997 9.768)
Error minima by case: (5.2133 2 1.9919 8 0.5608 1 3.1804 1 6.5934 2 0.3999 3 3.4891 2 18.1253 3 1.1873 7 1.2115 2 1.1162 2 0.0085 8 3.0492 2 4.4066 2 12.3476 2 5.5934 3 0.99 3 0.1963 8 3.3038 2 2.0121 2 1.5197 8 0.1616 7 31.3751 3 0.152 7 5.5934 2)
Average genome size in population (length): 62.992
Average program size in population (points): 63.992
Average percent parens in population: 0.016
Minimum age in population: 25.801025390625
Maximum age in population: 30.1663818359375
Average age in population: 28.17449012756348
Median age in population: 28.23193168640137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.236
Error (vector) diversity:			 0.237
Behavioral diversity:				 0.238
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 28924464
--- Timings ---
Current time: 1529614961079 milliseconds
Total Time:          77.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.4 seconds, 40.8%
Fitness Testing:     35.9 seconds, 46.6%
Report:               9.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 51106.88209999995
Test mean error for best: 25.55344
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 127.278910007 
Correct output: -30.5973968421 | Program output: -3.2309149287 
Correct output: -5.9015288603  | Program output: 1.2576695489  
Correct output: 24.3848067256  | Program output: 2.9821280945  
Correct output: -119.8990795364 | Program output: -111.3057275842
Correct output: 143.1946278344 | Program output: 144.5945549707
Correct output: 10.8625446508  | Program output: 3.1438944611  
Correct output: 127.6458652779 | Program output: 207.3072367659
Correct output: 71.8127365426  | Program output: 1.0364259275  
Correct output: -17.9148224328 | Program output: 1.6361664384  
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.6803615967  
Correct output: 85.1198734399  | Program output: 131.104030691 
Correct output: -62.5035732311 | Program output: -66.910221279 
Correct output: 31.7931803333  | Program output: 2.5774710526  
Correct output: -122.2934290035 | Program output: -114.7000770514
Correct output: 112.9049586254 | Program output: 132.078188255 
Correct output: -15.8996538358 | Program output: 2.8116734656  
Correct output: 123.9806904826 | Program output: 135.1490219759
Correct output: -78.3331420378 | Program output: 1.7238728151  
Correct output: 66.7769669244  | Program output: 1.3541670987  
Correct output: 3.7173929377   | Program output: 1.6291542769  
Correct output: 109.3750668562 | Program output: 32.3750668562 
Correct output: 16.5512971727  | Program output: 1.4922565695  
Correct output: 31.1961711525  | Program output: 2.8310940564  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_rot} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger float_rot in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup float_dup_items 15.703324023944859 float_dup_items integer_dup_times float_sub integer_dup_items integer_dup integer_max integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times in2 float_max float_dup float_dup_times float_inc float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [9.6014 8 27.3665 10 7.1592 12 21.4027 9 8.5934 10 1.3999 9 7.7187 10 79.6614 11 70.7763 10 19.551 10 88.0 2 0.5305 10 45.9842 10 4.4066 10 29.2157 11 7.5934 11 19.1732 7 18.7113 9 11.1683 12 80.057 11 65.4228 11 2.0882 11 77.0 3 15.059 10 28.3651 11]
Total: 984.0058
Mean: 19.680117
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2900.6550024999997
Median total errors in population: 1001.7103999999998
Error averages by case: (101.53300569999983 9.891 100.19455330000055 11.698 70.80247930000006 11.378 95.08612310000068 9.548 101.58090570000006 11.383 105.83644619999986 9.24 85.14165499999959 10.019 140.87924420000013 10.913 130.78477529999998 10.728 93.43340570000065 11.059 149.3435455000001 4.171 84.00226550000033 10.62 103.80878820000054 10.201 84.84322850000054 10.284 106.09630929999982 9.941 101.36190579999997 11.103 99.84453089999992 9.268 98.12704569999947 10.349 101.67731710000066 10.699 148.16910120000023 10.849 127.93790080000029 11.293 81.74144429999953 10.453 146.3956479999995 7.609 86.44311019999938 11.147 101.81326799999961 9.933)
Error minima by case: (7.6014 2 5.1948 8 0.0277 1 3.5098 1 5.9166 2 0.3999 3 0.769 2 27.5527 3 1.1873 7 1.2115 2 35.0881 1 0.0848 7 2.7979 2 4.4066 2 0.3865 2 4.9166 3 2.2239 3 0.1963 8 6.1799 2 3.0 2 17.223 8 0.0189 6 37.3729 2 0.152 8 0.2105 2)
Average genome size in population (length): 66.647
Average program size in population (points): 67.647
Average percent parens in population: 0.015
Minimum age in population: 27.60250854492188
Maximum age in population: 31.46261596679688
Average age in population: 29.67125263023376
Median age in population: 29.6942195892334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.238
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 30590639
--- Timings ---
Current time: 1529614964793 milliseconds
Total Time:          80.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.8 seconds, 40.7%
Fitness Testing:     37.7 seconds, 46.7%
Report:              10.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 51106.88209999995
Test mean error for best: 25.55344
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 127.278910007 
Correct output: -30.5973968421 | Program output: -3.2309149287 
Correct output: -5.9015288603  | Program output: 1.2576695489  
Correct output: 24.3848067256  | Program output: 2.9821280945  
Correct output: -119.8990795364 | Program output: -111.3057275842
Correct output: 143.1946278344 | Program output: 144.5945549707
Correct output: 10.8625446508  | Program output: 3.1438944611  
Correct output: 127.6458652779 | Program output: 207.3072367659
Correct output: 71.8127365426  | Program output: 1.0364259275  
Correct output: -17.9148224328 | Program output: 1.6361664384  
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.6803615967  
Correct output: 85.1198734399  | Program output: 131.104030691 
Correct output: -62.5035732311 | Program output: -66.910221279 
Correct output: 31.7931803333  | Program output: 2.5774710526  
Correct output: -122.2934290035 | Program output: -114.7000770514
Correct output: 112.9049586254 | Program output: 132.078188255 
Correct output: -15.8996538358 | Program output: 2.8116734656  
Correct output: 123.9806904826 | Program output: 135.1490219759
Correct output: -78.3331420378 | Program output: 1.7238728151  
Correct output: 66.7769669244  | Program output: 1.3541670987  
Correct output: 3.7173929377   | Program output: 1.6291542769  
Correct output: 109.3750668562 | Program output: 32.3750668562 
Correct output: 16.5512971727  | Program output: 1.4922565695  
Correct output: 31.1961711525  | Program output: 2.8310940564  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_rot} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat float_frominteger float_rot float_mult float_frominteger float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger float_rot in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_dup_items integer_dup_times integer_dec float_sub integer_swap integer_dup float_dup_items 15.703324023944859 float_dup_items integer_dup_times float_sub integer_dup_items integer_dup integer_max integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times in2 float_max float_dup float_dup_times float_inc float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [9.6014 8 27.3665 10 7.1592 12 21.4027 9 8.5934 10 1.3999 9 7.7187 10 79.6614 11 70.7763 10 19.551 10 88.0 2 0.5305 10 45.9842 10 4.4066 10 29.2157 11 7.5934 11 19.1732 7 18.7113 9 11.1683 12 80.057 11 65.4228 11 2.0882 11 77.0 3 15.059 10 28.3651 11]
Total: 984.0058
Mean: 19.680117
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2921.4995156000014
Median total errors in population: 986.9447999999999
Error averages by case: (96.51894199999983 9.185 98.95015090000028 11.411 71.50235270000007 11.618 97.87946780000102 9.808 96.83062379999917 10.898 100.27117570000047 8.672 87.66804759999917 9.873 145.0498248999996 11.213 130.14592049999885 11.097 94.4558656000012 11.204 145.78974500000012 4.103 82.90691250000042 10.982 113.10244200000147 9.762 84.65364150000067 10.411 108.7076949000003 9.918 96.52022019999927 11.468 104.0462503000008 8.58 100.12549719999929 9.563 100.63130300000081 11.048 152.16371670000046 11.153 127.7263193000002 11.272 82.59192329999912 11.042 160.54154200000005 5.453 87.31775659999933 11.261 104.48117959999941 9.926)
Error minima by case: (0.8217 2 5.855 7 1.1736 2 6.2735 2 6.5934 3 0.3999 3 1.36 2 19.2939 2 1.1873 8 2.2115 2 4.2684 1 0.0829 8 7.0 2 2.4818 2 0.3865 2 5.5934 3 10.5699 3 0.1963 7 3.0986 2 4.0 2 17.223 8 0.2235 6 23.2798 2 0.848 8 0.2105 2)
Average genome size in population (length): 70.404
Average program size in population (points): 71.404
Average percent parens in population: 0.014
Minimum age in population: 28.91971969604492
Maximum age in population: 32.78069400787354
Average age in population: 31.12148980140686
Median age in population: 31.16271877288818
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 62
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.207
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 32350739
--- Timings ---
Current time: 1529614968762 milliseconds
Total Time:          84.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.3 seconds, 40.5%
Fitness Testing:     39.6 seconds, 46.8%
Report:              10.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 47776.08999999987
Test mean error for best: 23.88804
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 95.4730820406 
Correct output: -30.5973968421 | Program output: 4.4571607322  
Correct output: -5.9015288603  | Program output: 0.3562026226  
Correct output: 24.3848067256  | Program output: 1.4510681141  
Correct output: -119.8990795364 | Program output: -100.6024035603
Correct output: 143.1946278344 | Program output: 121.9078169464
Correct output: 10.8625446508  | Program output: 1.5031592485  
Correct output: 127.6458652779 | Program output: 78.8438511525 
Correct output: 71.8127365426  | Program output: 0.056832459   
Correct output: -17.9148224328 | Program output: 0.7359446065  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.7723566521  
Correct output: 85.1198734399  | Program output: 103.5846796765
Correct output: -62.5035732311 | Program output: -56.206897255 
Correct output: 31.7931803333  | Program output: 1.2981293216  
Correct output: -122.2934290035 | Program output: -103.9967530274
Correct output: 112.9049586254 | Program output: 105.1658883676
Correct output: -15.8996538358 | Program output: 1.3909620685  
Correct output: 123.9806904826 | Program output: 109.7237917872
Correct output: -78.3331420378 | Program output: 0.8068991922  
Correct output: 66.7769669244  | Program output: 0.4664157103  
Correct output: 3.7173929377   | Program output: 0.7300394236  
Correct output: 109.3750668562 | Program output: 84.3400025496 
Correct output: 16.5512971727  | Program output: 0.6071280612  
Correct output: 31.1961711525  | Program output: 1.3981044771  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_tan float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_inc integer_dup_times integer_dec float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc float_yankdup integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_min float_yankdup -28.069662028429462)
Errors: [22.2044 12 35.0546 11 6.2577 11 22.9337 11 19.2967 11 21.2868 10 9.3594 10 48.802 11 71.7559 10 18.6508 12 89.0 2 0.3775 11 18.4648 12 6.2967 10 30.4951 8 18.2967 10 7.7391 11 17.2906 9 14.2569 10 79.14 12 66.3106 11 2.9874 8 25.0351 11 15.9442 10 29.7981 9]
Total: 950.0348
Mean: 19.000696
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2774.0655533000054
Median total errors in population: 986.9447999999999
Error averages by case: (93.62666239999974 9.111 91.42677449999998 11.212 66.41998430000034 11.579 90.91264890000085 9.927 87.65022299999946 10.783 96.68546920000023 8.771 80.06457869999932 10.005 143.91917129999982 11.255 126.73780059999874 11.075 86.40745840000099 11.204 145.77975230000007 3.889 74.2523802000003 10.937 111.47611020000102 9.861 76.25085700000064 10.313 100.50137790000049 10.142 87.3379863999995 11.332 100.80072250000038 8.466 90.35517089999965 9.553 98.10323910000045 11.156 141.8017803000002 11.023 123.4907712000004 11.372 74.82132399999911 11.045 155.23999930000002 5.385 80.22087689999952 11.223 99.05943379999991 10.104)
Error minima by case: (5.2133 2 0.8093 8 0.8115 1 2.5098 1 3.5934 2 0.3999 3 2.8408 2 6.1693 2 1.1873 7 2.2115 2 4.2684 1 0.008 7 5.7077 2 2.6106 2 0.3865 2 2.5934 3 5.8867 3 0.1963 6 7.6643 2 3.0 2 17.223 8 0.2235 8 25.0351 2 0.152 6 0.2105 2)
Average genome size in population (length): 70.558
Average program size in population (points): 71.558
Average percent parens in population: 0.014
Minimum age in population: 30.00871276855469
Maximum age in population: 34.72413158416748
Average age in population: 32.56712511634827
Median age in population: 32.63348460197449
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.197
Error (vector) diversity:			 0.199
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 34114689
--- Timings ---
Current time: 1529614972632 milliseconds
Total Time:          88.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.8 seconds, 40.5%
Fitness Testing:     41.5 seconds, 46.8%
Report:              11.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 47776.08999999987
Test mean error for best: 23.88804
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 95.4730820406 
Correct output: -30.5973968421 | Program output: 4.4571607322  
Correct output: -5.9015288603  | Program output: 0.3562026226  
Correct output: 24.3848067256  | Program output: 1.4510681141  
Correct output: -119.8990795364 | Program output: -100.6024035603
Correct output: 143.1946278344 | Program output: 121.9078169464
Correct output: 10.8625446508  | Program output: 1.5031592485  
Correct output: 127.6458652779 | Program output: 78.8438511525 
Correct output: 71.8127365426  | Program output: 0.056832459   
Correct output: -17.9148224328 | Program output: 0.7359446065  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.7723566521  
Correct output: 85.1198734399  | Program output: 103.5846796765
Correct output: -62.5035732311 | Program output: -56.206897255 
Correct output: 31.7931803333  | Program output: 1.2981293216  
Correct output: -122.2934290035 | Program output: -103.9967530274
Correct output: 112.9049586254 | Program output: 105.1658883676
Correct output: -15.8996538358 | Program output: 1.3909620685  
Correct output: 123.9806904826 | Program output: 109.7237917872
Correct output: -78.3331420378 | Program output: 0.8068991922  
Correct output: 66.7769669244  | Program output: 0.4664157103  
Correct output: 3.7173929377   | Program output: 0.7300394236  
Correct output: 109.3750668562 | Program output: 84.3400025496 
Correct output: 16.5512971727  | Program output: 0.6071280612  
Correct output: 31.1961711525  | Program output: 1.3981044771  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min} {:instruction float_yankdup} {:instruction integer_dup_items})
Best program: (float_swap integer_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_tan float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_inc integer_dup_times integer_dec float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_min float_yankdup integer_dup_items)
Errors: [22.2044 12 35.0546 11 6.2577 11 22.9337 11 19.2967 11 21.2868 10 9.3594 10 48.802 11 71.7559 10 18.6508 12 89.0 2 0.3775 11 18.4648 12 6.2967 10 30.4951 8 18.2967 10 7.7391 11 17.2906 9 14.2569 10 79.14 12 66.3106 11 2.9874 8 25.0351 11 15.9442 10 29.7981 9]
Total: 950.0348
Mean: 19.000696
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2675.3958968000047
Median total errors in population: 986.9447999999999
Error averages by case: (89.7819987999996 9.015 91.3344319999997 10.844 61.46644830000004 11.263 88.88750430000086 9.703 91.47252669999969 10.933 90.44675370000051 9.243 78.03810399999956 9.974 135.0031722999996 11.15 124.0542671999989 10.71 81.97519900000081 11.045 137.9660308000001 3.742 70.72733549999992 10.564 100.85849810000046 9.997 77.49076960000056 10.336 99.20688690000055 10.338 91.11866139999961 11.191 90.6663008000001 8.324 90.02115529999986 10.14 89.82394100000019 11.015 136.1832825000002 10.646 121.12074880000057 11.468 69.70636779999946 10.799 146.88120180000007 6.236 76.17632209999994 10.998 95.06798810000016 10.246)
Error minima by case: (6.1019 2 0.1907 8 0.8115 1 3.5098 1 5.5934 2 0.2321 3 1.8408 2 5.1693 2 1.1873 8 1.2115 2 3.2684 1 0.1498 7 3.2556 2 3.4066 2 0.3865 2 4.5934 3 2.4699 3 0.1963 6 4.535 2 1.6413 2 17.223 8 0.2235 6 25.0351 2 0.152 8 0.2105 2)
Average genome size in population (length): 70.835
Average program size in population (points): 71.835
Average percent parens in population: 0.014
Minimum age in population: 31.98722839355469
Maximum age in population: 35.78628635406494
Average age in population: 34.03388964366913
Median age in population: 34.06929683685303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.24
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 35885589
--- Timings ---
Current time: 1529614976468 milliseconds
Total Time:          92.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.4 seconds, 40.4%
Fitness Testing:     43.3 seconds, 46.9%
Report:              11.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 47776.08999999987
Test mean error for best: 23.88804
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 95.4730820406 
Correct output: -30.5973968421 | Program output: 4.4571607322  
Correct output: -5.9015288603  | Program output: 0.3562026226  
Correct output: 24.3848067256  | Program output: 1.4510681141  
Correct output: -119.8990795364 | Program output: -100.6024035603
Correct output: 143.1946278344 | Program output: 121.9078169464
Correct output: 10.8625446508  | Program output: 1.5031592485  
Correct output: 127.6458652779 | Program output: 78.8438511525 
Correct output: 71.8127365426  | Program output: 0.056832459   
Correct output: -17.9148224328 | Program output: 0.7359446065  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.7723566521  
Correct output: 85.1198734399  | Program output: 103.5846796765
Correct output: -62.5035732311 | Program output: -56.206897255 
Correct output: 31.7931803333  | Program output: 1.2981293216  
Correct output: -122.2934290035 | Program output: -103.9967530274
Correct output: 112.9049586254 | Program output: 105.1658883676
Correct output: -15.8996538358 | Program output: 1.3909620685  
Correct output: 123.9806904826 | Program output: 109.7237917872
Correct output: -78.3331420378 | Program output: 0.8068991922  
Correct output: 66.7769669244  | Program output: 0.4664157103  
Correct output: 3.7173929377   | Program output: 0.7300394236  
Correct output: 109.3750668562 | Program output: 84.3400025496 
Correct output: 16.5512971727  | Program output: 0.6071280612  
Correct output: 31.1961711525  | Program output: 1.3981044771  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_tan float_yankdup float_yankdup float_sin float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_inc integer_dup_times integer_dec float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc float_yankdup integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_min float_yankdup -28.069662028429462)
Errors: [22.2044 12 35.0546 11 6.2577 11 22.9337 11 19.2967 11 21.2868 10 9.3594 10 48.802 11 71.7559 10 18.6508 12 89.0 2 0.3775 11 18.4648 12 6.2967 10 30.4951 8 18.2967 10 7.7391 11 17.2906 9 14.2569 10 79.14 12 66.3106 11 2.9874 8 25.0351 11 15.9442 10 29.7981 9]
Total: 950.0348
Mean: 19.000696
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2932.4511293000032
Median total errors in population: 984.0058
Error averages by case: (96.51682779999969 8.85 107.44281780000047 10.712 67.77045340000014 11.476 103.33032750000115 9.341 105.30952549999942 10.943 97.54587410000036 9.323 93.19925119999937 10.121 145.0330417999996 10.729 127.02875949999904 10.413 91.1883885000012 10.668 141.97476910000003 3.917 80.01063319999966 10.399 109.07269230000104 9.932 91.61029650000076 10.392 114.20912300000047 10.567 104.99203969999947 11.413 99.30691970000052 8.113 106.54512049999929 10.244 97.91745830000035 11.028 144.5263329000003 10.948 125.1993087000003 11.357 79.06474549999929 10.914 161.65925689999997 5.8 82.92794069999981 10.665 110.23122519999943 10.573)
Error minima by case: (7.6014 2 9.4953 8 0.6665 1 1.3975 1 5.5934 2 0.2992 3 2.6827 2 10.078 2 17.2194 7 1.2115 2 3.2684 1 0.113 6 0.6853 2 3.1368 2 0.6135 2 4.5934 3 7.7391 3 0.1963 8 9.1683 2 0.3857 2 12.1836 8 0.4725 7 25.0351 2 0.0421 8 0.7895 2)
Average genome size in population (length): 72.518
Average program size in population (points): 73.518
Average percent parens in population: 0.014
Minimum age in population: 33.15521812438965
Maximum age in population: 37.50478804111481
Average age in population: 35.53755294108391
Median age in population: 35.55716001987457
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.232
Error (vector) diversity:			 0.236
Behavioral diversity:				 0.236
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 37698539
--- Timings ---
Current time: 1529614980520 milliseconds
Total Time:          96.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.8 seconds, 40.3%
Fitness Testing:     45.3 seconds, 47.1%
Report:              12.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 50846.23949999989
Test mean error for best: 25.42312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 97.5055426413 
Correct output: -30.5973968421 | Program output: 5.4056382764  
Correct output: -5.9015288603  | Program output: 0.3449321185  
Correct output: 24.3848067256  | Program output: 1.4850657173  
Correct output: -119.8990795364 | Program output: -101.6024035603
Correct output: 143.1946278344 | Program output: 123.5015643514
Correct output: 10.8625446508  | Program output: 1.5425510187  
Correct output: 127.6458652779 | Program output: 83.2380921932 
Correct output: 71.8127365426  | Program output: 0.0542362537  
Correct output: -17.9148224328 | Program output: 0.7262122256  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.7635351107  
Correct output: 85.1198734399  | Program output: 105.4207487157
Correct output: -62.5035732311 | Program output: -57.206897255 
Correct output: 31.7931803333  | Program output: 1.3180729717  
Correct output: -122.2934290035 | Program output: -104.9967530274
Correct output: 112.9049586254 | Program output: 106.9728116454
Correct output: -15.8996538358 | Program output: 1.4191208929  
Correct output: 123.9806904826 | Program output: 111.4578050359
Correct output: -78.3331420378 | Program output: 0.799067992   
Correct output: 66.7769669244  | Program output: 0.4541177796  
Correct output: 3.7173929377   | Program output: 0.72017215    
Correct output: 109.3750668562 | Program output: 92.2431167714 
Correct output: 16.5512971727  | Program output: 0.5952589702  
Correct output: 31.1961711525  | Program output: 1.4269356256  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_div} {:instruction integer_swap} {:instruction float_pop} {:instruction integer_min} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_tan float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_inc integer_dup_times integer_dec float_sub integer_swap float_dec float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc float_stackdepth integer_yank float_add 43.997522794043505 integer_pop integer_div integer_swap float_pop integer_min float_yankdup -28.069662028429462)
Errors: [20.1719 11 36.003 12 6.2465 12 22.8997 9 18.2967 11 19.6931 10 9.32 9 44.4078 12 71.7585 10 18.641 11 89.0 2 0.3863 11 20.3009 12 5.2967 10 30.4751 9 17.2967 10 5.9321 8 17.3188 10 12.5229 11 79.1322 13 66.3228 12 2.9972 9 17.132 12 15.956 9 29.7692 9]
Total: 931.2771
Mean: 18.625542
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2796.142354100002
Median total errors in population: 984.0058
Error averages by case: (93.00975939999981 9.115 97.78084800000019 10.779 67.88803399999995 11.503 92.75813460000039 9.276 98.92349169999959 10.829 96.27135600000003 9.314 82.37119799999978 10.167 140.33947729999963 10.587 127.0087814999994 10.291 85.94237970000063 10.814 141.98415140000006 3.851 73.70226970000024 10.34 108.08294320000098 9.991 84.5571836000005 10.209 102.97620630000051 10.305 98.63356779999961 11.246 97.17410070000054 8.448 95.45610249999983 10.407 95.29207919999989 10.582 142.48668950000035 11.123 122.92454420000014 11.244 72.54404279999953 10.649 151.3914363 6.148 78.26820880000007 10.561 100.09736790000001 10.499)
Error minima by case: (6.2849 2 0.1907 7 0.1301 1 3.0218 1 3.5934 2 0.3999 3 1.6515 2 10.078 3 2.1873 8 2.6391 2 3.2684 1 0.057 8 4.9468 2 3.4066 2 0.3865 2 2.5934 3 5.9321 3 1.1035 8 8.7177 2 1.0474 2 17.5093 8 0.6757 7 17.132 2 0.152 6 0.2105 2)
Average genome size in population (length): 73.193
Average program size in population (points): 74.193
Average percent parens in population: 0.014
Minimum age in population: 34.15521812438965
Maximum age in population: 38.89668065309525
Average age in population: 36.87821644216776
Median age in population: 36.91068494319916
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.245
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 39528364
--- Timings ---
Current time: 1529614984606 milliseconds
Total Time:         100.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.4 seconds, 40.2%
Fitness Testing:     47.4 seconds, 47.2%
Report:              12.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 45376.638099999946
Test mean error for best: 22.68832
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 99.6264208067 
Correct output: -30.5973968421 | Program output: 6.8669062912  
Correct output: -5.9015288603  | Program output: 0.3343529535  
Correct output: 24.3848067256  | Program output: 1.5206946255  
Correct output: -119.8990795364 | Program output: -102.6024035603
Correct output: 143.1946278344 | Program output: 125.1375350939
Correct output: 10.8625446508  | Program output: 1.5840629501  
Correct output: 127.6458652779 | Program output: 88.1510560128 
Correct output: 71.8127365426  | Program output: 0.0518668845  
Correct output: -17.9148224328 | Program output: 0.7167338936  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.7549128058  
Correct output: 85.1198734399  | Program output: 107.3230820408
Correct output: -62.5035732311 | Program output: -58.206897255 
Correct output: 31.7931803333  | Program output: 1.3386389871  
Correct output: -122.2934290035 | Program output: -105.9967530274
Correct output: 112.9049586254 | Program output: 108.8429122533
Correct output: -15.8996538358 | Program output: 1.4484433766  
Correct output: 123.9806904826 | Program output: 113.2475050726
Correct output: -78.3331420378 | Program output: 0.791387339   
Correct output: 66.7769669244  | Program output: 0.4424517052  
Correct output: 3.7173929377   | Program output: 0.7105680531  
Correct output: 109.3750668562 | Program output: 101.7804998854
Correct output: 16.5512971727  | Program output: 0.583845052   
Correct output: 31.1961711525  | Program output: 1.4569809     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_sub} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min})
Best program: (float_swap integer_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_sub integer_shove float_tan float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_inc integer_dup_times integer_dec float_inc integer_dup_times integer_dec float_sub integer_swap float_dec float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc float_yankdup integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_min)
Errors: [18.051 10 37.4643 12 6.2359 11 22.8641 10 17.2967 11 18.0571 11 9.2785 9 39.4948 12 71.7609 11 18.6316 12 89.0 2 0.3949 10 22.2032 12 4.2967 10 30.4545 10 16.2967 10 4.062 10 17.3481 11 10.7332 9 79.1245 11 66.3345 12 3.0068 9 7.5946 9 15.9675 10 29.7392 10]
Total: 909.6913000000001
Mean: 18.193827
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3119.792912200002
Median total errors in population: 983.9259999999998
Error averages by case: (107.24214400000018 10.447 113.55922930000101 10.994 80.97336980000023 11.131 110.6387379999999 9.96 114.16777930000072 11.191 113.73385600000067 9.753 100.28055970000042 10.384 139.26729519999972 10.658 134.5890905000001 10.288 108.11731200000139 11.422 149.21111140000005 3.962 97.42891039999998 10.635 109.31654580000065 10.721 94.98248070000099 10.2 119.66958400000057 9.617 113.69607540000058 10.891 104.54041100000079 9.68 112.0249443999992 10.576 107.27198349999898 10.042 162.67417700000087 11.33 136.1097619999998 11.262 94.67352899999956 9.732 128.5553977999992 8.762 95.59415649999951 10.553 117.18746950000032 10.096)
Error minima by case: (6.2133 2 6.4379 8 0.0374 1 3.6815 1 0.4066 2 0.3972 3 0.3701 1 0.0323 3 1.1873 8 0.7885 2 3.2684 1 0.0463 7 4.8736 2 3.4066 2 2.3865 2 1.4066 3 4.062 3 0.5125 8 6.6418 2 1.0474 2 3.3579 7 0.267 7 3.0318 2 0.152 6 1.2007 1)
Average genome size in population (length): 72.115
Average program size in population (points): 73.115
Average percent parens in population: 0.014
Minimum age in population: 35.89752125740051
Maximum age in population: 40.4689833521843
Average age in population: 38.15230845528841
Median age in population: 38.21311332285404
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.257
Error (vector) diversity:			 0.261
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 41331239
--- Timings ---
Current time: 1529614988598 milliseconds
Total Time:         104.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.8 seconds, 40.1%
Fitness Testing:     49.3 seconds, 47.3%
Report:              13.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 45376.638099999946
Test mean error for best: 22.68832
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 99.6264208067 
Correct output: -30.5973968421 | Program output: 6.8669062912  
Correct output: -5.9015288603  | Program output: 0.3343529535  
Correct output: 24.3848067256  | Program output: 1.5206946255  
Correct output: -119.8990795364 | Program output: -102.6024035603
Correct output: 143.1946278344 | Program output: 125.1375350939
Correct output: 10.8625446508  | Program output: 1.5840629501  
Correct output: 127.6458652779 | Program output: 88.1510560128 
Correct output: 71.8127365426  | Program output: 0.0518668845  
Correct output: -17.9148224328 | Program output: 0.7167338936  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.7549128058  
Correct output: 85.1198734399  | Program output: 107.3230820408
Correct output: -62.5035732311 | Program output: -58.206897255 
Correct output: 31.7931803333  | Program output: 1.3386389871  
Correct output: -122.2934290035 | Program output: -105.9967530274
Correct output: 112.9049586254 | Program output: 108.8429122533
Correct output: -15.8996538358 | Program output: 1.4484433766  
Correct output: 123.9806904826 | Program output: 113.2475050726
Correct output: -78.3331420378 | Program output: 0.791387339   
Correct output: 66.7769669244  | Program output: 0.4424517052  
Correct output: 3.7173929377   | Program output: 0.7105680531  
Correct output: 109.3750668562 | Program output: 101.7804998854
Correct output: 16.5512971727  | Program output: 0.583845052   
Correct output: 31.1961711525  | Program output: 1.4569809     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_sub} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_min})
Best program: (float_swap integer_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_sub integer_shove float_tan float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_inc integer_dup_times integer_dec float_inc integer_dup_times integer_dec float_sub integer_swap float_dec float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc float_yankdup integer_yank float_add 43.997522794043505 integer_pop integer_dup_times integer_max float_pop integer_min)
Errors: [18.051 10 37.4643 12 6.2359 11 22.8641 10 17.2967 11 18.0571 11 9.2785 9 39.4948 12 71.7609 11 18.6316 12 89.0 2 0.3949 10 22.2032 12 4.2967 10 30.4545 10 16.2967 10 4.062 10 17.3481 11 10.7332 9 79.1245 11 66.3345 12 3.0068 9 7.5946 9 15.9675 10 29.7392 10]
Total: 909.6913000000001
Mean: 18.193827
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2840.385775700007
Median total errors in population: 950.0348
Error averages by case: (105.26828760000086 11.153 104.61346730000135 11.378 66.74584320000044 10.839 95.12324939999966 10.407 106.17566530000144 11.317 114.649141400001 9.907 84.84479340000054 9.927 124.81480639999953 10.663 126.76371010000027 10.454 93.22944090000114 11.608 143.717146 3.877 83.77700930000054 11.126 99.58369860000086 11.157 85.44329540000064 10.302 105.92986810000025 8.661 105.82023620000136 10.439 96.72262720000104 10.4 97.59527479999885 10.296 103.31648579999846 9.775 147.5635765000004 11.594 124.932553599999 11.368 81.46313709999956 9.196 101.67682329999884 10.546 82.8546726999995 10.503 101.4359661000002 9.432)
Error minima by case: (0.2819 2 25.4026 8 0.1301 2 3.6815 1 0.5934 3 1.3999 2 0.6302 2 8.9296 2 1.1873 7 1.7885 1 4.2684 1 0.057 8 3.8786 1 2.2967 2 11.0899 2 0.4066 3 4.062 3 9.9368 9 10.7332 2 4.0 2 2.4803 9 0.9321 8 7.5946 2 0.152 7 10.4928 2)
Average genome size in population (length): 71.243
Average program size in population (points): 72.243
Average percent parens in population: 0.014
Minimum age in population: 37.51007205247879
Maximum age in population: 41.75936762988567
Average age in population: 39.59207887543738
Median age in population: 39.62137117981911
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.205
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 43112314
--- Timings ---
Current time: 1529614992537 milliseconds
Total Time:         108.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.3 seconds, 40.0%
Fitness Testing:     51.2 seconds, 47.3%
Report:              13.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 46923.18549999991
Test mean error for best: 23.46159
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 101.8416144307
Correct output: -30.5973968421 | Program output: 9.4108841277  
Correct output: -5.9015288603  | Program output: 0.3244034098  
Correct output: 24.3848067256  | Program output: 1.5580751368  
Correct output: -119.8990795364 | Program output: -103.6024035603
Correct output: 143.1946278344 | Program output: 126.8174296412
Correct output: 10.8625446508  | Program output: 1.627870945   
Correct output: 127.6458652779 | Program output: 93.6803536705 
Correct output: 71.8127365426  | Program output: 0.049695867   
Correct output: -17.9148224328 | Program output: 0.7074997915  
Correct output: 93.2683698204  | Program output: 4.2683698204  
Correct output: 1.1498437373   | Program output: 0.746483063   
Correct output: 85.1198734399  | Program output: 109.295332821 
Correct output: -62.5035732311 | Program output: -59.206897255 
Correct output: 31.7931803333  | Program output: 1.359856962   
Correct output: -122.2934290035 | Program output: -106.9967530274
Correct output: 112.9049586254 | Program output: 110.7795625488
Correct output: -15.8996538358 | Program output: 1.4790031736  
Correct output: 123.9806904826 | Program output: 115.0956181953
Correct output: -78.3331420378 | Program output: 0.7838529334  
Correct output: 66.7769669244  | Program output: 0.4313700104  
Correct output: 3.7173929377   | Program output: 0.7012167424  
Correct output: 109.3750668562 | Program output: 113.5175292062
Correct output: 16.5512971727  | Program output: 0.5728606157  
Correct output: 31.1961711525  | Program output: 1.4883186431  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 15.703324023944859} {:instruction float_inc} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction -5.577132933028864} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_add} {:instruction 43.997522794043505} {:instruction integer_pop} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap integer_swap float_shove integer_mult integer_fromfloat integer_fromfloat integer_yank float_rot float_mult integer_shove float_tan float_yankdup float_yankdup float_sin float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 15.703324023944859 float_inc integer_dup_times in2 float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_dec float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_yank in2 float_max float_dup float_dup_times integer_pop float_yankdup print_float -5.577132933028864 integer_shove float_inc integer_max integer_yank float_add 43.997522794043505 integer_pop float_yankdup -28.069662028429462)
Errors: [15.8358 11 40.0083 12 6.2259 12 22.8267 10 16.2967 11 16.3772 10 9.2347 9 33.9655 11 71.763 11 18.6223 12 89.0 2 0.4034 8 24.1755 11 3.2967 10 30.4333 10 15.2967 10 2.1254 7 17.3787 10 8.8851 11 79.117 10 66.3456 11 3.0162 10 4.1425 9 15.9784 10 29.7079 11]
Total: 889.4584999999998
Mean: 17.78917
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2723.7519270000093
Median total errors in population: 950.0348
Error averages by case: (101.37138400000097 11.2 99.68507200000111 11.536 64.27286000000032 11.065 91.26494669999958 10.227 97.09946810000112 11.23 109.82867300000102 10.025 79.15083380000056 9.884 118.12947309999967 10.832 126.07218500000016 10.495 87.80296580000108 11.591 142.02745710000002 3.632 76.6325421000003 11.033 96.8095975000009 11.331 79.67428580000052 10.36 101.97103780000023 8.889 96.268744900001 10.387 92.09056020000092 10.317 93.04156019999897 10.395 100.70179149999889 9.985 145.39141310000025 11.812 121.38920839999888 11.458 74.43911129999958 9.218 96.08183739999889 10.767 77.42265929999948 10.336 97.58725890000002 9.54)
Error minima by case: (15.8358 2 0.5676 8 0.0207 1 2.6815 1 16.2967 2 16.3772 2 0.8408 2 0.0323 3 40.8 7 0.2115 2 4.2684 2 0.0463 8 2.6534 1 3.2967 2 0.7804 1 15.2967 3 2.1254 3 1.8037 9 0.8888 2 1.1055 2 5.1435 7 0.7267 8 4.1425 2 0.3702 6 0.1834 2)
Average genome size in population (length): 71.3
Average program size in population (points): 72.3
Average percent parens in population: 0.014
Minimum age in population: 38.51007205247879
Maximum age in population: 43.15631617605686
Average age in population: 40.9949433824569
Median age in population: 41.06376059353352
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.212
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 44894814
--- Timings ---
Current time: 1529614996516 milliseconds
Total Time:         112.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.9 seconds, 40.0%
Fitness Testing:     53.1 seconds, 47.2%
Report:              14.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 47931.831900000056
Test mean error for best: 23.96592
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.1613940048
Correct output: -30.5973968421 | Program output: 10.9286949397 
Correct output: -5.9015288603  | Program output: 1.323050108   
Correct output: 24.3848067256  | Program output: 2.5634854676  
Correct output: -119.8990795364 | Program output: -102.7431789521
Correct output: 143.1946278344 | Program output: 128.0575459353
Correct output: 10.8625446508  | Program output: 2.6342333565  
Correct output: 127.6458652779 | Program output: 95.5149368815 
Correct output: 71.8127365426  | Program output: 1.0494047493  
Correct output: -17.9148224328 | Program output: 1.706218928   
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7453114556  
Correct output: 85.1198734399  | Program output: 110.5788127635
Correct output: -62.5035732311 | Program output: -58.3476726469
Correct output: 31.7931803333  | Program output: 2.3628980611  
Correct output: -122.2934290035 | Program output: -106.1375284192
Correct output: 112.9049586254 | Program output: 112.0577430216
Correct output: -15.8996538358 | Program output: 2.4834090938  
Correct output: 123.9806904826 | Program output: 116.3606416528
Correct output: -78.3331420378 | Program output: 1.7828037786  
Correct output: 66.7769669244  | Program output: 1.429854397   
Correct output: 3.7173929377   | Program output: 1.699920035   
Correct output: 109.3750668562 | Program output: 116.3907604385
Correct output: 16.5512971727  | Program output: 1.571347378   
Correct output: 31.1961711525  | Program output: 2.4928388001  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 16.844099415755878} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 16.844099415755878 float_inc integer_dup_times integer_dec float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_dup float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [14.5161 11 41.5261 11 7.2246 11 21.8213 8 17.1559 10 15.1371 11 8.2283 11 32.1309 12 70.7633 10 19.621 9 88.0 2 0.5955 9 25.4589 12 4.1559 11 29.4303 11 16.1559 11 0.8472 9 18.3831 11 7.62 9 80.1159 11 65.3471 11 2.0175 9 7.0157 9 14.9799 7 28.7033 11]
Total: 883.9508000000001
Mean: 17.679016
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3023.396816300006
Median total errors in population: 943.2797999999999
Error averages by case: (114.46799880000131 10.628 109.70234790000043 11.829 73.97897000000007 11.261 105.41744589999968 9.692 111.69713440000172 11.278 125.92277990000105 10.258 93.69786830000056 9.823 127.37083140000034 11.135 132.48478549999896 10.652 98.21110760000045 11.189 149.1805348 3.931 87.80126989999978 10.715 113.69546290000093 11.286 91.0445922000007 10.494 117.34216880000027 9.768 111.26091510000158 10.573 106.53732450000142 9.63 107.41391729999908 11.086 114.96260919999926 10.062 155.1715391999994 11.712 129.920122299999 11.709 84.51252629999988 9.533 103.49114799999894 10.627 86.57514779999991 10.167 112.4942682999996 10.004)
Error minima by case: (13.5199 2 8.2856 9 0.0985 1 5.6815 1 2.4526 2 12.5718 2 0.1592 2 0.0323 2 18.5161 7 2.0752 1 58.554 1 0.0866 7 2.5321 1 0.2967 2 4.0468 1 1.4526 3 0.1186 3 0.6254 8 6.9756 2 0.8037 2 2.4803 8 0.7204 8 4.1425 2 0.152 7 12.4928 2)
Average genome size in population (length): 72.054
Average program size in population (points): 73.054
Average percent parens in population: 0.014
Minimum age in population: 39.51007205247879
Maximum age in population: 44.60818965733051
Average age in population: 42.44484064851701
Median age in population: 42.47482624277472
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.257
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 46696164
--- Timings ---
Current time: 1529615000476 milliseconds
Total Time:         116.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.3 seconds, 39.8%
Fitness Testing:     55.1 seconds, 47.4%
Report:              14.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 47931.831900000056
Test mean error for best: 23.96592
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.1613940048
Correct output: -30.5973968421 | Program output: 10.9286949397 
Correct output: -5.9015288603  | Program output: 1.323050108   
Correct output: 24.3848067256  | Program output: 2.5634854676  
Correct output: -119.8990795364 | Program output: -102.7431789521
Correct output: 143.1946278344 | Program output: 128.0575459353
Correct output: 10.8625446508  | Program output: 2.6342333565  
Correct output: 127.6458652779 | Program output: 95.5149368815 
Correct output: 71.8127365426  | Program output: 1.0494047493  
Correct output: -17.9148224328 | Program output: 1.706218928   
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7453114556  
Correct output: 85.1198734399  | Program output: 110.5788127635
Correct output: -62.5035732311 | Program output: -58.3476726469
Correct output: 31.7931803333  | Program output: 2.3628980611  
Correct output: -122.2934290035 | Program output: -106.1375284192
Correct output: 112.9049586254 | Program output: 112.0577430216
Correct output: -15.8996538358 | Program output: 2.4834090938  
Correct output: 123.9806904826 | Program output: 116.3606416528
Correct output: -78.3331420378 | Program output: 1.7828037786  
Correct output: 66.7769669244  | Program output: 1.429854397   
Correct output: 3.7173929377   | Program output: 1.699920035   
Correct output: 109.3750668562 | Program output: 116.3907604385
Correct output: 16.5512971727  | Program output: 1.571347378   
Correct output: 31.1961711525  | Program output: 2.4928388001  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 16.844099415755878} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 16.844099415755878 float_inc integer_dup_times integer_dec float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_dup float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [14.5161 11 41.5261 11 7.2246 11 21.8213 8 17.1559 10 15.1371 11 8.2283 11 32.1309 12 70.7633 10 19.621 9 88.0 2 0.5955 9 25.4589 12 4.1559 11 29.4303 11 16.1559 11 0.8472 9 18.3831 11 7.62 9 80.1159 11 65.3471 11 2.0175 9 7.0157 9 14.9799 7 28.7033 11]
Total: 883.9508000000001
Mean: 17.679016
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3002.689197599997
Median total errors in population: 928.5045
Error averages by case: (116.77098340000168 10.07 107.29141240000125 12.051 75.1863900999999 11.001 96.54554210000074 9.621 106.9593128000015 11.293 127.43040270000148 10.47 85.75579520000034 9.444 129.6120005000006 11.14 134.15112079999844 11.069 100.34045529999926 11.447 153.53840300000005 4.015 92.45985449999975 10.598 116.35529730000107 11.16 86.8223223000009 10.418 108.36478000000123 9.968 106.62368210000139 10.579 108.40311730000131 9.554 99.31702150000045 11.428 117.39438750000045 9.69 158.46186570000046 11.221 131.56299059999913 11.985 88.5960875000006 9.859 103.82770509999892 9.771 89.28895829999983 10.484 103.23530959999955 10.058)
Error minima by case: (3.0259 2 0.6585 8 0.1625 1 1.6815 1 1.4066 2 11.0555 2 0.0184 2 3.1873 3 5.3603 8 2.7885 1 4.2684 1 0.013 7 1.3819 1 0.2967 1 0.2397 1 2.4066 3 0.1186 3 7.6667 8 2.9602 2 0.5826 2 3.4803 9 0.2733 7 3.4883 2 0.152 7 8.4928 2)
Average genome size in population (length): 74.164
Average program size in population (points): 75.164
Average percent parens in population: 0.013
Minimum age in population: 41.87073522806168
Maximum age in population: 46.08424421213567
Average age in population: 43.97077864194289
Median age in population: 43.99489019997418
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.272
Error (vector) diversity:			 0.275
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 48550264
--- Timings ---
Current time: 1529615004480 milliseconds
Total Time:         120.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.9 seconds, 39.8%
Fitness Testing:     57.1 seconds, 47.4%
Report:              15.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 47931.831900000056
Test mean error for best: 23.96592
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.1613940048
Correct output: -30.5973968421 | Program output: 10.9286949397 
Correct output: -5.9015288603  | Program output: 1.323050108   
Correct output: 24.3848067256  | Program output: 2.5634854676  
Correct output: -119.8990795364 | Program output: -102.7431789521
Correct output: 143.1946278344 | Program output: 128.0575459353
Correct output: 10.8625446508  | Program output: 2.6342333565  
Correct output: 127.6458652779 | Program output: 95.5149368815 
Correct output: 71.8127365426  | Program output: 1.0494047493  
Correct output: -17.9148224328 | Program output: 1.706218928   
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7453114556  
Correct output: 85.1198734399  | Program output: 110.5788127635
Correct output: -62.5035732311 | Program output: -58.3476726469
Correct output: 31.7931803333  | Program output: 2.3628980611  
Correct output: -122.2934290035 | Program output: -106.1375284192
Correct output: 112.9049586254 | Program output: 112.0577430216
Correct output: -15.8996538358 | Program output: 2.4834090938  
Correct output: 123.9806904826 | Program output: 116.3606416528
Correct output: -78.3331420378 | Program output: 1.7828037786  
Correct output: 66.7769669244  | Program output: 1.429854397   
Correct output: 3.7173929377   | Program output: 1.699920035   
Correct output: 109.3750668562 | Program output: 116.3907604385
Correct output: 16.5512971727  | Program output: 1.571347378   
Correct output: 31.1961711525  | Program output: 2.4928388001  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 16.844099415755878} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (integer_swap float_shove integer_mult integer_fromfloat float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 16.844099415755878 float_inc integer_dup_times integer_dec float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_dup float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [14.5161 11 41.5261 11 7.2246 11 21.8213 8 17.1559 10 15.1371 11 8.2283 11 32.1309 12 70.7633 10 19.621 9 88.0 2 0.5955 9 25.4589 12 4.1559 11 29.4303 11 16.1559 11 0.8472 9 18.3831 11 7.62 9 80.1159 11 65.3471 11 2.0175 9 7.0157 9 14.9799 7 28.7033 11]
Total: 883.9508000000001
Mean: 17.679016
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3030.7067531000002
Median total errors in population: 909.6913000000001
Error averages by case: (108.25515860000115 10.015 112.19848060000149 12.135 77.03524349999988 10.987 104.77619910000114 9.861 113.45201700000132 11.408 118.84250400000106 10.311 93.96238580000039 9.324 123.3881118000005 10.925 135.71010849999917 11.106 102.85759339999956 11.645 151.95125950000005 4.045 94.89261479999968 10.124 107.80352290000071 10.867 92.3382022000009 10.347 117.09044220000138 9.844 113.18142420000112 10.597 101.53889350000087 9.109 108.06076960000078 11.339 108.54512270000046 9.639 161.00929250000038 10.831 133.8429347999994 11.811 90.41643800000001 10.093 98.81176359999962 9.301 92.68785330000011 10.522 111.7224169999995 10.15)
Error minima by case: (5.8938 2 0.6585 8 0.0985 1 7.3848 1 0.4066 3 8.2775 2 0.1592 2 0.0323 2 1.1873 7 0.7885 1 4.2684 1 0.0029 7 2.271 2 0.1559 1 14.7932 1 0.4066 3 0.0882 2 1.9077 7 0.8473 2 0.1853 1 4.4803 8 0.4858 7 3.4883 2 0.2928 7 11.1172 2)
Average genome size in population (length): 75.43
Average program size in population (points): 76.43
Average percent parens in population: 0.013
Minimum age in population: 43.09001677855849
Maximum age in population: 47.59940706938505
Average age in population: 45.41625110323913
Median age in population: 45.46606202796102
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.266
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 50436014
--- Timings ---
Current time: 1529615008341 milliseconds
Total Time:         124.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.3 seconds, 39.7%
Fitness Testing:     59.1 seconds, 47.5%
Report:              15.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 47931.831900000056
Test mean error for best: 23.96592
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.1613940048
Correct output: -30.5973968421 | Program output: 10.9286949397 
Correct output: -5.9015288603  | Program output: 1.323050108   
Correct output: 24.3848067256  | Program output: 2.5634854676  
Correct output: -119.8990795364 | Program output: -102.7431789521
Correct output: 143.1946278344 | Program output: 128.0575459353
Correct output: 10.8625446508  | Program output: 2.6342333565  
Correct output: 127.6458652779 | Program output: 95.5149368815 
Correct output: 71.8127365426  | Program output: 1.0494047493  
Correct output: -17.9148224328 | Program output: 1.706218928   
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7453114556  
Correct output: 85.1198734399  | Program output: 110.5788127635
Correct output: -62.5035732311 | Program output: -58.3476726469
Correct output: 31.7931803333  | Program output: 2.3628980611  
Correct output: -122.2934290035 | Program output: -106.1375284192
Correct output: 112.9049586254 | Program output: 112.0577430216
Correct output: -15.8996538358 | Program output: 2.4834090938  
Correct output: 123.9806904826 | Program output: 116.3606416528
Correct output: -78.3331420378 | Program output: 1.7828037786  
Correct output: 66.7769669244  | Program output: 1.429854397   
Correct output: 3.7173929377   | Program output: 1.699920035   
Correct output: 109.3750668562 | Program output: 116.3907604385
Correct output: 16.5512971727  | Program output: 1.571347378   
Correct output: 31.1961711525  | Program output: 2.4928388001  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 16.844099415755878} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 16.844099415755878 float_inc integer_dup_times integer_dec float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_dup float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [14.5161 11 41.5261 11 7.2246 11 21.8213 8 17.1559 10 15.1371 11 8.2283 11 32.1309 12 70.7633 10 19.621 9 88.0 2 0.5955 9 25.4589 12 4.1559 11 29.4303 11 16.1559 11 0.8472 9 18.3831 11 7.62 9 80.1159 11 65.3471 11 2.0175 9 7.0157 9 14.9799 7 28.7033 11]
Total: 883.9508000000001
Mean: 17.679016
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3070.926723099999
Median total errors in population: 894.7891500000001
Error averages by case: (115.94734580000055 10.525 116.82792670000137 12.104 85.03153060000027 11.303 100.83218420000112 9.885 109.67727930000189 11.334 125.32272000000128 10.285 90.48019890000064 9.425 128.40560410000145 10.883 143.30816000000138 11.135 102.41394940000063 11.643 159.86981369999998 4.072 91.44391329999961 9.526 115.77755149999948 10.858 89.59969560000091 10.339 110.88422920000131 9.999 109.25337550000174 10.601 105.95360940000097 8.478 102.27678950000072 11.027 113.46131109999997 10.341 156.6434389999993 10.598 140.68622630000007 11.557 90.79967209999934 10.355 105.48971820000051 9.46 97.31491330000148 10.384 106.5755663999987 10.533)
Error minima by case: (3.0974 2 3.6135 8 0.0985 1 0.0822 1 0.4066 2 7.2525 3 0.1592 2 0.0323 2 15.5161 8 0.7885 1 4.2684 1 0.0029 7 0.5033 2 0.2805 1 10.4389 1 1.4066 3 0.0882 2 4.2955 8 0.8473 2 0.0807 1 0.5197 8 0.4695 6 0.5246 3 0.2892 7 4.7065 2)
Average genome size in population (length): 75.218
Average program size in population (points): 76.218
Average percent parens in population: 0.013
Minimum age in population: 44.57390120998025
Maximum age in population: 48.88227834040299
Average age in population: 46.85347408458125
Median age in population: 46.88019705098122
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.243
Error (vector) diversity:			 0.246
Behavioral diversity:				 0.247
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 52316464
--- Timings ---
Current time: 1529615012241 milliseconds
Total Time:         128.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.8 seconds, 39.7%
Fitness Testing:     61.0 seconds, 47.6%
Report:              16.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 50808.073199999955
Test mean error for best: 25.40404
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.487704218 
Correct output: -30.5973968421 | Program output: -56.5375276822
Correct output: -5.9015288603  | Program output: 1.2966755332  
Correct output: 24.3848067256  | Program output: 2.6884286756  
Correct output: -119.8990795364 | Program output: -105.7431789521
Correct output: 143.1946278344 | Program output: 133.3997998226
Correct output: 10.8625446508  | Program output: 2.7827170308  
Correct output: 127.6458652779 | Program output: 117.6638195979
Correct output: 71.8127365426  | Program output: 1.0439217017  
Correct output: -17.9148224328 | Program output: 1.6799845909  
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7211898491  
Correct output: 85.1198734399  | Program output: 116.9899580762
Correct output: -62.5035732311 | Program output: -61.3476726469
Correct output: 31.7931803333  | Program output: 2.4311008446  
Correct output: -122.2934290035 | Program output: -109.1375284192
Correct output: 112.9049586254 | Program output: 118.3368201799
Correct output: -15.8996538358 | Program output: 2.5839650064  
Correct output: 123.9806904826 | Program output: 122.3135521797
Correct output: -78.3331420378 | Program output: 1.7610948563  
Correct output: 66.7769669244  | Program output: 1.3999113031  
Correct output: 3.7173929377   | Program output: 1.6733833548  
Correct output: 109.3750668562 | Program output: 178.9787769187
Correct output: 16.5512971727  | Program output: 1.5408986871  
Correct output: 31.1961711525  | Program output: 2.5961445066  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 16.844099415755878} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 16.844099415755878 float_inc integer_dup_times integer_dec float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_dup float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [7.1898 9 25.9401 8 7.1982 12 21.6964 6 14.1559 10 9.7948 9 8.0798 9 9.982 7 70.7688 11 19.5948 12 88.0 2 0.5713 9 31.8701 12 1.1559 10 29.3621 10 13.1559 11 5.4319 11 18.4836 9 1.6671 11 80.0942 13 65.3771 11 2.044 9 69.6037 10 15.0104 9 28.6 9]
Total: 883.8279
Mean: 17.676558
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2807.7386748000017
Median total errors in population: 889.4584999999998
Error averages by case: (102.10121249999995 10.493 108.89455180000117 11.876 67.41572559999972 11.261 98.23830260000048 9.572 101.85034920000062 11.173 112.76094810000171 10.109 87.25814280000068 9.673 112.52072770000122 10.737 127.69739350000177 10.923 90.78977520000063 10.982 142.6381146 4.14 82.47302439999999 9.42 103.47359629999923 10.703 79.5454488000001 10.586 109.39496500000146 10.22 101.54673760000045 10.692 94.11294330000042 8.297 100.90950440000083 11.046 101.5210696999996 9.998 146.87900989999974 10.51 125.67385510000017 11.386 78.99374539999964 10.282 90.06369080000105 9.188 82.20978700000065 9.941 104.84305349999887 10.725)
Error minima by case: (3.3627 2 7.8941 8 0.0985 1 4.3686 1 0.4066 3 7.9128 2 0.1592 2 0.0323 2 12.2379 7 0.7885 1 4.2684 1 0.0029 6 0.6988 2 0.1559 1 11.777 1 0.5934 3 0.1186 2 2.3463 8 0.4561 2 3.0 1 17.2736 8 0.9859 8 3.7164 3 0.152 7 11.18 2)
Average genome size in population (length): 74.226
Average program size in population (points): 75.226
Average percent parens in population: 0.013
Minimum age in population: 46.26684151869267
Maximum age in population: 50.13673370634206
Average age in population: 48.233661779874
Median age in population: 48.30814564891625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.256
Error (vector) diversity:			 0.256
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 54172114
--- Timings ---
Current time: 1529615016464 milliseconds
Total Time:         132.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.4 seconds, 39.6%
Fitness Testing:     63.2 seconds, 47.8%
Report:              16.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 50808.073199999955
Test mean error for best: 25.40404
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.487704218 
Correct output: -30.5973968421 | Program output: -56.5375276822
Correct output: -5.9015288603  | Program output: 1.2966755332  
Correct output: 24.3848067256  | Program output: 2.6884286756  
Correct output: -119.8990795364 | Program output: -105.7431789521
Correct output: 143.1946278344 | Program output: 133.3997998226
Correct output: 10.8625446508  | Program output: 2.7827170308  
Correct output: 127.6458652779 | Program output: 117.6638195979
Correct output: 71.8127365426  | Program output: 1.0439217017  
Correct output: -17.9148224328 | Program output: 1.6799845909  
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7211898491  
Correct output: 85.1198734399  | Program output: 116.9899580762
Correct output: -62.5035732311 | Program output: -61.3476726469
Correct output: 31.7931803333  | Program output: 2.4311008446  
Correct output: -122.2934290035 | Program output: -109.1375284192
Correct output: 112.9049586254 | Program output: 118.3368201799
Correct output: -15.8996538358 | Program output: 2.5839650064  
Correct output: 123.9806904826 | Program output: 122.3135521797
Correct output: -78.3331420378 | Program output: 1.7610948563  
Correct output: 66.7769669244  | Program output: 1.3999113031  
Correct output: 3.7173929377   | Program output: 1.6733833548  
Correct output: 109.3750668562 | Program output: 178.9787769187
Correct output: 16.5512971727  | Program output: 1.5408986871  
Correct output: 31.1961711525  | Program output: 2.5961445066  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction float_tan} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 16.844099415755878} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_sub} {:instruction float_shove} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult float_tan float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 16.844099415755878 float_inc integer_pop integer_dec float_sub float_shove float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_dup float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [7.1898 9 25.9401 8 7.1982 12 21.6964 6 14.1559 10 9.7948 9 8.0798 9 9.982 7 70.7688 11 19.5948 12 88.0 2 0.5713 9 31.8701 12 1.1559 10 29.3621 10 13.1559 11 5.4319 11 18.4836 9 1.6671 11 80.0942 13 65.3771 11 2.044 9 69.6037 10 15.0104 9 28.6 9]
Total: 883.8279
Mean: 17.676558
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2862.5959976999966
Median total errors in population: 889.4584999999998
Error averages by case: (102.83998239999914 10.807 109.59819860000128 11.593 71.36024830000049 11.16 97.78152009999982 8.973 102.19536849999939 10.768 114.99454090000197 10.671 86.75037510000107 10.476 114.36064540000069 11.397 130.0043359000015 10.663 95.73364349999991 10.165 145.96362319999997 3.993 86.32604920000034 9.69 107.99725449999903 11.431 81.55504559999923 11.125 110.59876430000169 10.795 101.92842769999932 11.195 97.40214739999979 9.23 101.19234880000089 11.25 103.50733349999955 9.782 153.48189040000108 11.097 126.63132469999975 11.42 81.9658356000005 10.011 91.63342740000155 9.544 84.9093946000004 8.944 104.83427209999878 10.87)
Error minima by case: (4.5084 2 1.8031 7 0.2414 1 1.6815 1 0.4066 2 1.8438 2 0.1592 1 0.0968 3 55.8144 7 1.7885 1 3.2684 1 0.0483 6 1.6534 2 0.1559 2 7.4656 1 1.4066 2 0.1528 3 3.4805 8 0.4561 2 0.8983 2 12.6247 8 0.3849 7 1.1425 3 0.2241 7 4.545 1)
Average genome size in population (length): 71.789
Average program size in population (points): 72.789
Average percent parens in population: 0.014
Minimum age in population: 47.33553677517921
Maximum age in population: 51.46068167616613
Average age in population: 49.50291919839289
Median age in population: 49.51682385161985
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 106
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.251
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 55966839
--- Timings ---
Current time: 1529615020252 milliseconds
Total Time:         136.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.8 seconds, 39.5%
Fitness Testing:     65.1 seconds, 47.8%
Report:              17.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 50938.271599999964
Test mean error for best: 25.46914
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.487704218 
Correct output: -30.5973968421 | Program output: -55.5375276822
Correct output: -5.9015288603  | Program output: 2.2966755332  
Correct output: 24.3848067256  | Program output: 3.6884286756  
Correct output: -119.8990795364 | Program output: -104.7431789521
Correct output: 143.1946278344 | Program output: 134.3997998226
Correct output: 10.8625446508  | Program output: 3.7827170308  
Correct output: 127.6458652779 | Program output: 118.6638195979
Correct output: 71.8127365426  | Program output: 2.0439217017  
Correct output: -17.9148224328 | Program output: 2.6799845909  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7211898491  
Correct output: 85.1198734399  | Program output: 117.9899580762
Correct output: -62.5035732311 | Program output: -60.3476726469
Correct output: 31.7931803333  | Program output: 3.4311008446  
Correct output: -122.2934290035 | Program output: -108.1375284192
Correct output: 112.9049586254 | Program output: 119.3368201799
Correct output: -15.8996538358 | Program output: 3.5839650064  
Correct output: 123.9806904826 | Program output: 123.3135521797
Correct output: -78.3331420378 | Program output: 2.7610948563  
Correct output: 66.7769669244  | Program output: 2.3999113031  
Correct output: 3.7173929377   | Program output: 2.6733833548  
Correct output: 109.3750668562 | Program output: 179.9787769187
Correct output: 16.5512971727  | Program output: 2.5408986871  
Correct output: 31.1961711525  | Program output: 3.5961445066  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 16.844099415755878} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 16.844099415755878 float_inc integer_dup_times integer_dec float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [6.1898 9 24.9401 8 8.1982 12 20.6964 7 15.1559 10 8.7948 10 7.0798 9 8.982 8 69.7688 12 20.5948 12 87.0 2 1.5713 10 32.8701 12 2.1559 10 28.3621 9 14.1559 11 6.4319 11 19.4836 9 0.6671 10 81.0942 13 64.3771 11 1.044 9 70.6037 9 14.0104 10 27.6 8]
Total: 882.8279
Mean: 17.656557
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2995.6685588999967
Median total errors in population: 883.9508000000001
Error averages by case: (112.33853369999879 10.797 112.95534180000135 11.457 78.01278230000077 10.935 96.15349109999994 8.553 111.35381619999889 10.546 123.3104624000021 10.78 86.57643860000104 10.615 120.74380510000063 11.462 134.2827314000013 10.476 102.29850909999962 9.698 149.2706281 4.295 94.30551060000005 9.789 116.67142369999911 11.461 92.08619839999902 11.228 106.85454250000154 10.801 110.84939089999887 11.325 104.7293902999997 9.482 99.56233670000078 11.286 111.95824339999947 9.57 158.49856240000142 11.206 133.87248849999986 11.331 88.39251320000078 9.897 99.8719342000017 9.572 92.23696460000043 8.563 102.66251969999894 10.695)
Error minima by case: (1.6925 2 9.571 8 0.034 1 0.5407 1 0.3118 3 1.8438 2 0.0184 2 0.0968 3 13.7533 7 2.8808 1 3.2684 2 0.0752 6 1.6534 2 0.1559 2 2.1813 1 0.6882 3 0.1528 3 0.8656 8 0.4561 2 0.629 2 0.3789 8 0.2832 8 2.9302 3 0.2928 7 2.7783 2)
Average genome size in population (length): 70.584
Average program size in population (points): 71.584
Average percent parens in population: 0.014
Minimum age in population: 48.33553677517921
Maximum age in population: 53.20216235105181
Average age in population: 50.881957269923
Median age in population: 50.90217694526655
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.209
Error (vector) diversity:			 0.211
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 57731439
--- Timings ---
Current time: 1529615024028 milliseconds
Total Time:         139.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 39.4%
Fitness Testing:     66.9 seconds, 47.9%
Report:              17.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 46216.63530000012
Test mean error for best: 23.10832
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.6141158828
Correct output: -30.5973968421 | Program output: 11.7606048591 
Correct output: -5.9015288603  | Program output: 1.3211675869  
Correct output: 24.3848067256  | Program output: 2.5711511766  
Correct output: -119.8990795364 | Program output: -102.9409786734
Correct output: 143.1946278344 | Program output: 128.3964673427
Correct output: 10.8625446508  | Program output: 2.6432575071  
Correct output: 127.6458652779 | Program output: 96.7130315199 
Correct output: 71.8127365426  | Program output: 1.0490014235  
Correct output: -17.9148224328 | Program output: 1.7044270376  
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.743671462   
Correct output: 85.1198734399  | Program output: 110.9796165824
Correct output: -62.5035732311 | Program output: -58.5454723681
Correct output: 31.7931803333  | Program output: 2.3671940827  
Correct output: -122.2934290035 | Program output: -106.3353281405
Correct output: 112.9049586254 | Program output: 112.4509758809
Correct output: -15.8996538358 | Program output: 2.4896442741  
Correct output: 123.9806904826 | Program output: 116.735087917 
Correct output: -78.3331420378 | Program output: 1.781334376   
Correct output: 66.7769669244  | Program output: 1.427742756   
Correct output: 3.7173929377   | Program output: 1.6981061485  
Correct output: 109.3750668562 | Program output: 119.1297261021
Correct output: 16.5512971727  | Program output: 1.5692346264  
Correct output: 31.1961711525  | Program output: 2.4992365415  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_dup float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [14.0633 11 42.358 11 7.2227 10 21.8137 10 16.9581 9 14.7982 8 8.2193 10 30.9328 12 70.7637 10 19.6192 9 88.0 2 0.5938 9 25.8597 12 3.9581 8 29.426 11 15.9581 10 0.454 8 18.3893 11 7.2456 12 80.1145 8 65.3492 12 2.0193 11 9.7547 10 14.9821 9 28.6969 10]
Total: 880.5502999999999
Mean: 17.611006
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2908.8971612999953
Median total errors in population: 883.9508000000001
Error averages by case: (105.51878079999878 10.674 109.21177720000115 11.258 73.15371670000059 11.158 98.77392889999976 8.599 102.19393249999898 10.588 118.03265840000205 10.67 87.15033090000101 10.735 113.10346990000062 11.161 129.6523292000015 10.533 98.71004449999971 9.859 145.6791669 4.146 91.88784730000025 9.784 109.91001539999925 11.441 82.0604962999991 11.273 113.00905760000163 11.003 101.65076459999891 11.429 99.57267219999999 9.53 103.02408730000107 11.213 105.41842139999945 9.591 159.69215640000158 11.429 129.02802819999954 11.338 85.95646520000072 9.864 97.48327070000157 9.532 86.32508340000003 8.566 106.50265939999889 10.822)
Error minima by case: (1.6925 2 13.975 8 0.9015 1 0.5407 1 0.6882 2 5.9765 2 0.0184 2 0.0968 3 20.6568 7 1.9293 1 13.0668 1 0.1498 6 0.6534 2 0.1559 2 7.9491 2 0.3118 3 0.1528 3 8.8997 8 0.4561 2 0.1055 2 4.6211 8 0.9047 8 3.9302 3 0.2928 7 7.3521 2)
Average genome size in population (length): 70.852
Average program size in population (points): 71.852
Average percent parens in population: 0.014
Minimum age in population: 49.54101578611881
Maximum age in population: 54.34870908045559
Average age in population: 52.32713936220884
Median age in population: 52.394225179145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.22
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 59502739
--- Timings ---
Current time: 1529615028180 milliseconds
Total Time:         143.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 39.4%
Fitness Testing:     69.0 seconds, 47.9%
Report:              18.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 46216.63530000012
Test mean error for best: 23.10832
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.6141158828
Correct output: -30.5973968421 | Program output: 11.7606048591 
Correct output: -5.9015288603  | Program output: 1.3211675869  
Correct output: 24.3848067256  | Program output: 2.5711511766  
Correct output: -119.8990795364 | Program output: -102.9409786734
Correct output: 143.1946278344 | Program output: 128.3964673427
Correct output: 10.8625446508  | Program output: 2.6432575071  
Correct output: 127.6458652779 | Program output: 96.7130315199 
Correct output: 71.8127365426  | Program output: 1.0490014235  
Correct output: -17.9148224328 | Program output: 1.7044270376  
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.743671462   
Correct output: 85.1198734399  | Program output: 110.9796165824
Correct output: -62.5035732311 | Program output: -58.5454723681
Correct output: 31.7931803333  | Program output: 2.3671940827  
Correct output: -122.2934290035 | Program output: -106.3353281405
Correct output: 112.9049586254 | Program output: 112.4509758809
Correct output: -15.8996538358 | Program output: 2.4896442741  
Correct output: 123.9806904826 | Program output: 116.735087917 
Correct output: -78.3331420378 | Program output: 1.781334376   
Correct output: 66.7769669244  | Program output: 1.427742756   
Correct output: 3.7173929377   | Program output: 1.6981061485  
Correct output: 109.3750668562 | Program output: 119.1297261021
Correct output: 16.5512971727  | Program output: 1.5692346264  
Correct output: 31.1961711525  | Program output: 2.4992365415  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_dup float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [14.0633 11 42.358 11 7.2227 10 21.8137 10 16.9581 9 14.7982 8 8.2193 10 30.9328 12 70.7637 10 19.6192 9 88.0 2 0.5938 9 25.8597 12 3.9581 8 29.426 11 15.9581 10 0.454 8 18.3893 11 7.2456 12 80.1145 8 65.3492 12 2.0193 11 9.7547 10 14.9821 9 28.6969 10]
Total: 880.5502999999999
Mean: 17.611006
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3086.5983397999958
Median total errors in population: 883.9508000000001
Error averages by case: (113.84422789999846 10.338 113.34345530000138 10.932 81.06615880000037 11.072 104.51873379999952 8.302 109.055462399999 10.517 125.87182960000213 10.359 93.53831360000098 10.318 119.60743340000084 10.43 137.7851837000009 10.692 104.96324670000016 10.271 151.18942799999988 4.232 96.13392679999978 9.902 119.83740229999944 11.304 89.65201849999914 10.978 117.36200200000107 10.686 108.67961589999904 11.298 109.09479390000018 9.762 108.5382093000014 10.956 114.30564079999957 9.81 158.97257410000137 11.523 137.51912119999997 11.445 92.0235426000003 10.011 118.67326560000156 9.591 95.73219690000028 9.024 111.1525566999993 10.385)
Error minima by case: (0.6925 2 0.4035 8 0.0985 1 0.5407 1 0.6882 3 1.9315 2 0.0184 1 0.0968 3 16.3059 7 3.0752 1 3.2684 2 0.0164 6 0.4938 1 0.1559 1 4.9491 1 1.6882 3 0.1528 2 0.2528 8 0.4561 2 0.7167 1 29.6692 9 0.3849 7 1.7993 2 0.1212 7 4.3521 1)
Average genome size in population (length): 71.071
Average program size in population (points): 72.071
Average percent parens in population: 0.014
Minimum age in population: 50.54101578611881
Maximum age in population: 55.74208404953242
Average age in population: 53.66976238512073
Median age in population: 53.70227467991208
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.253
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 61279514
--- Timings ---
Current time: 1529615032136 milliseconds
Total Time:         148.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.1 seconds, 39.3%
Fitness Testing:     71.0 seconds, 48.0%
Report:              18.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 46216.63530000012
Test mean error for best: 23.10832
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.6141158828
Correct output: -30.5973968421 | Program output: 11.7606048591 
Correct output: -5.9015288603  | Program output: 1.3211675869  
Correct output: 24.3848067256  | Program output: 2.5711511766  
Correct output: -119.8990795364 | Program output: -102.9409786734
Correct output: 143.1946278344 | Program output: 128.3964673427
Correct output: 10.8625446508  | Program output: 2.6432575071  
Correct output: 127.6458652779 | Program output: 96.7130315199 
Correct output: 71.8127365426  | Program output: 1.0490014235  
Correct output: -17.9148224328 | Program output: 1.7044270376  
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.743671462   
Correct output: 85.1198734399  | Program output: 110.9796165824
Correct output: -62.5035732311 | Program output: -58.5454723681
Correct output: 31.7931803333  | Program output: 2.3671940827  
Correct output: -122.2934290035 | Program output: -106.3353281405
Correct output: 112.9049586254 | Program output: 112.4509758809
Correct output: -15.8996538358 | Program output: 2.4896442741  
Correct output: 123.9806904826 | Program output: 116.735087917 
Correct output: -78.3331420378 | Program output: 1.781334376   
Correct output: 66.7769669244  | Program output: 1.427742756   
Correct output: 3.7173929377   | Program output: 1.6981061485  
Correct output: 109.3750668562 | Program output: 119.1297261021
Correct output: 16.5512971727  | Program output: 1.5692346264  
Correct output: 31.1961711525  | Program output: 2.4992365415  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_pop} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_pop float_max float_dup float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [14.0633 11 42.358 11 7.2227 10 21.8137 10 16.9581 9 14.7982 8 8.2193 10 30.9328 12 70.7637 10 19.6192 9 88.0 2 0.5938 9 25.8597 12 3.9581 8 29.426 11 15.9581 10 0.454 8 18.3893 11 7.2456 12 80.1145 8 65.3492 12 2.0193 11 9.7547 10 14.9821 9 28.6969 10]
Total: 880.5502999999999
Mean: 17.611006
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3297.4170934999975
Median total errors in population: 883.9508000000001
Error averages by case: (124.31058019999871 9.783 119.31283070000134 10.311 85.52449399999988 11.369 111.02123419999991 8.076 119.67109219999911 10.53 136.5589210000012 9.847 99.06881650000082 9.85 128.98573610000093 9.335 143.72396130000033 10.972 108.95892410000054 11.062 164.70598560000005 4.429 100.44549309999988 9.853 130.45024809999978 11.102 100.00595209999925 10.732 122.07681009999985 10.496 119.28474419999911 11.276 121.92878309999975 10.153 114.7076921000012 10.46 124.21820500000028 10.139 164.24472330000117 12.028 142.09628169999985 11.414 97.10039829999987 9.98 148.1553522000014 9.837 100.12583299999984 9.542 118.17900130000022 9.979)
Error minima by case: (1.2685 2 2.98 7 0.0985 1 0.5407 1 3.6882 2 1.9315 2 0.0184 1 0.0968 2 42.2812 7 3.0752 1 1.3776 2 0.0164 6 0.1044 2 0.0419 1 7.9491 1 4.6882 2 0.1528 2 3.1139 7 0.4144 2 0.6516 1 35.6439 8 0.2832 7 2.3379 2 0.2928 7 7.3521 1)
Average genome size in population (length): 72.224
Average program size in population (points): 73.224
Average percent parens in population: 0.014
Minimum age in population: 52.0550958882086
Maximum age in population: 56.96092176792445
Average age in population: 55.02235736901536
Median age in population: 55.07976322283503
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.276
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 63085114
--- Timings ---
Current time: 1529615035870 milliseconds
Total Time:         151.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.5 seconds, 39.2%
Fitness Testing:     72.9 seconds, 48.0%
Report:              19.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 51651.559000000096
Test mean error for best: 25.82578
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.2425662323
Correct output: -30.5973968421 | Program output: -32.896508633 
Correct output: -5.9015288603  | Program output: 2.2943807338  
Correct output: 24.3848067256  | Program output: 3.7014108599  
Correct output: -119.8990795364 | Program output: -105.0296238022
Correct output: 143.1946278344 | Program output: 134.9334764551
Correct output: 10.8625446508  | Program output: 3.798317975   
Correct output: 127.6458652779 | Program output: 121.3339668745
Correct output: 71.8127365426  | Program output: 2.0434611543  
Correct output: -17.9148224328 | Program output: 2.6775812692  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7189680857  
Correct output: 85.1198734399  | Program output: 118.6415596307
Correct output: -62.5035732311 | Program output: -60.634117497 
Correct output: 31.7931803333  | Program output: 3.4379716685  
Correct output: -122.2934290035 | Program output: -108.4239732693
Correct output: 112.9049586254 | Program output: 119.9736918208
Correct output: -15.8996538358 | Program output: 3.5942838752  
Correct output: 123.9806904826 | Program output: 123.9142359211
Correct output: -78.3331420378 | Program output: 2.7590848591  
Correct output: 66.7769669244  | Program output: 2.3972690175  
Correct output: 3.7173929377   | Program output: 2.6709544474  
Correct output: 109.3750668562 | Program output: 189.6996053061
Correct output: 16.5512971727  | Program output: 2.5381602689  
Correct output: 31.1961711525  | Program output: 3.6067610332  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction print_float} {:instruction integer_shove} {:instruction float_swap} {:instruction float_cos} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.130544265851874} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot print_float integer_shove float_swap float_cos float_yankdup float_yankdup float_tan float_yankdup float_yankdup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.130544265851874 float_inc integer_dup_times integer_dec float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [5.4349 10 2.2991 9 8.1959 11 20.6834 11 14.8695 11 8.2612 11 7.0642 12 6.3119 9 69.7693 11 20.5924 11 87.0 2 1.5691 9 33.5217 12 1.8695 10 28.3552 10 13.8695 10 7.0687 8 19.4939 9 0.0665 9 81.0922 13 64.3797 11 1.0464 9 80.3245 10 14.0131 11 27.5894 9]
Total: 872.7411999999999
Mean: 17.454824
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3387.706059599995
Median total errors in population: 883.8279
Error averages by case: (126.10170619999845 9.627 121.50336200000126 10.022 94.02472389999953 11.259 113.88752230000004 8.239 116.96297399999942 10.461 139.87959630000137 9.63 102.96511200000074 9.623 127.79931700000098 8.95 150.1342818000005 11.149 115.33516970000107 11.354 164.46710240000013 4.406 106.52804319999979 10.02 137.73107970000004 11.091 98.20070979999953 10.352 126.50688519999952 10.242 116.6578279999994 11.17 126.15033379999953 10.276 118.19381470000127 10.342 128.3511734000006 10.455 170.506792000001 11.988 147.76071229999965 11.491 103.5281168999995 10.087 155.49845270000165 9.929 106.20806679999956 9.985 121.07618350000084 9.599)
Error minima by case: (0.6925 2 2.2991 7 0.0744 1 1.5407 1 1.886 2 0.1825 2 0.0184 1 0.0968 2 20.4444 2 3.4774 1 0.3987 1 0.0164 6 0.4849 2 0.1173 1 8.9491 1 2.886 2 0.454 2 0.0499 8 0.0665 2 0.1055 2 4.597 8 0.044 7 2.9023 2 0.7072 7 8.3521 1)
Average genome size in population (length): 73.446
Average program size in population (points): 74.446
Average percent parens in population: 0.014
Minimum age in population: 53.0550958882086
Maximum age in population: 58.19541239948012
Average age in population: 56.24750564648175
Median age in population: 56.30607041615622
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.291
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 64921264
--- Timings ---
Current time: 1529615039718 milliseconds
Total Time:         155.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.0 seconds, 39.2%
Fitness Testing:     74.8 seconds, 48.1%
Report:              19.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction float_tan} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult float_tan float_swap float_yankdup float_yankdup float_yankdup float_tan float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_mult integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3132.7894231999944
Median total errors in population: 883.8279
Error averages by case: (115.6971174999984 10.124 114.94104500000014 10.468 83.48633119999954 11.022 104.07325610000004 8.846 111.80041810000017 10.295 126.62755900000143 9.692 93.61717320000018 9.744 120.3600115000003 9.926 141.77609440000018 11.131 104.77010570000084 11.023 157.4262834 4.362 95.01084820000023 10.016 122.82641990000022 11.246 91.5400617000001 9.987 114.8996012000002 10.215 111.50469580000019 11.043 114.66771399999922 9.825 108.25603300000058 10.697 116.37258880000022 10.617 159.60640990000041 11.298 138.49570759999926 11.662 90.96497629999979 10.337 134.96435450000178 10.032 95.26747339999932 10.098 110.5811438000004 9.55)
Error minima by case: (0.1186 2 2.2991 7 0.0985 1 1.1641 1 0.114 2 0.1825 2 0.0184 1 0.0968 2 50.4052 2 3.1271 1 2.2684 2 0.0241 6 0.5062 2 0.0419 1 8.7513 1 0.886 3 0.1528 2 2.688 8 0.0665 2 0.7627 1 19.6038 8 0.0193 7 1.9023 3 0.1737 7 7.5026 1)
Average genome size in population (length): 73.771
Average program size in population (points): 74.771
Average percent parens in population: 0.013
Minimum age in population: 54.90093233923835
Maximum age in population: 59.87694750453011
Average age in population: 57.58649545396851
Median age in population: 57.63763717667825
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.292
Error (vector) diversity:			 0.299
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 66765539
--- Timings ---
Current time: 1529615043749 milliseconds
Total Time:         159.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.5 seconds, 39.2%
Fitness Testing:     76.8 seconds, 48.1%
Report:              20.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction float_yank} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult float_yank float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2649.1312008000045
Median total errors in population: 880.5502999999999
Error averages by case: (95.5270092999992 10.615 101.01300099999894 11.047 64.06182459999933 10.459 87.5605637999996 9.66 89.14356640000126 9.721 106.36273890000075 9.041 76.48240639999953 9.96 104.54542069999964 10.91 122.8284627999996 10.651 89.04852670000051 10.065 138.96065270000003 3.964 77.93201330000032 9.642 102.46208310000031 11.337 70.13629300000086 8.888 98.4874366000011 10.372 88.63842900000127 10.459 89.99210419999947 8.867 90.15223160000008 11.211 95.18022779999957 10.899 145.83338169999965 9.825 120.81036289999888 11.775 74.78575279999987 10.623 96.65235730000094 9.961 78.95075049999963 9.769 94.03860369999992 9.824)
Error minima by case: (0.1186 2 2.2991 8 0.0985 1 6.3429 1 0.0838 2 1.6082 3 0.9816 1 3.0604 3 2.8127 2 3.4565 1 2.2684 2 0.1525 7 0.4938 2 0.0419 1 13.7513 1 1.0838 2 0.1528 3 2.0561 7 0.0665 2 0.1253 2 13.223 8 0.0193 7 0.4594 3 0.4882 7 13.1543 1)
Average genome size in population (length): 72.242
Average program size in population (points): 73.242
Average percent parens in population: 0.014
Minimum age in population: 56.3948640516046
Maximum age in population: 61.31371797392876
Average age in population: 59.06967116520754
Median age in population: 59.12552895917179
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.251
Error (vector) diversity:			 0.252
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 68571589
--- Timings ---
Current time: 1529615047651 milliseconds
Total Time:         163.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.0 seconds, 39.1%
Fitness Testing:     78.7 seconds, 48.1%
Report:              20.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction float_tan} {:instruction float_swap} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult float_tan float_swap float_yankdup integer_dup float_yankdup float_tan float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_rot float_yank float_dec float_dec integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_mult integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2866.748720900002
Median total errors in population: 880.5502999999999
Error averages by case: (107.69316569999916 10.649 106.43389939999847 11.312 71.05255709999932 10.345 93.72801599999964 10.109 100.15090970000185 9.841 120.80081400000098 9.1 82.60475529999904 10.238 112.81659339999933 11.016 127.54601749999932 10.606 96.48085790000027 9.927 146.1369641 4.018 87.46748290000029 9.447 112.39111220000017 11.277 79.1179261000015 8.868 108.62963410000175 10.403 100.0527612000019 10.505 101.73913419999948 8.619 100.70520249999994 11.434 108.06945129999934 10.929 155.24107079999928 9.79 126.51854969999904 11.703 82.04053740000012 10.542 103.52604980000086 10.068 84.66172539999997 9.74 100.56153319999966 10.096)
Error minima by case: (0.1186 3 2.2991 8 0.0721 1 1.3429 1 1.0838 2 2.5825 2 0.1794 1 2.0604 2 32.6575 8 4.0752 1 3.2684 1 0.1659 5 0.4938 2 0.0419 2 8.7513 1 2.0838 3 0.1949 3 0.2896 7 0.0665 2 0.1253 2 14.6589 8 0.01 6 0.0977 2 0.0542 6 3.7975 1)
Average genome size in population (length): 72.041
Average program size in population (points): 73.041
Average percent parens in population: 0.014
Minimum age in population: 57.86394671632297
Maximum age in population: 62.44580447814133
Average age in population: 60.44002693589881
Median age in population: 60.49248584337829
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.237
Error (vector) diversity:			 0.238
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 70372614
--- Timings ---
Current time: 1529615051512 milliseconds
Total Time:         167.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.5 seconds, 39.1%
Fitness Testing:     80.6 seconds, 48.1%
Report:              21.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_pop integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec integer_flush float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_mult integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2967.2638312999998
Median total errors in population: 880.5502999999999
Error averages by case: (106.38399529999924 10.567 106.35827079999925 11.2 77.46214919999964 10.474 100.65251889999948 10.173 107.31192260000182 9.955 120.15321270000032 9.794 89.0680952999992 10.393 109.27216219999941 10.657 134.55941769999993 10.786 99.71418929999989 10.121 149.1936184 4.195 90.59720399999973 9.422 116.7501729 11.431 88.45099840000135 8.811 111.32144480000152 9.857 106.92230770000177 10.484 103.81517909999968 8.748 104.14510900000009 11.426 107.83940109999965 10.423 156.94440760000037 10.913 131.5039546999997 11.423 85.43411330000043 9.728 117.45301090000093 10.253 88.66128229999977 9.997 106.11769309999958 9.947)
Error minima by case: (0.1186 2 1.0826 8 0.0985 1 2.7658 1 3.0838 2 0.6082 2 0.1794 1 2.0604 2 18.6314 2 2.3305 1 3.2684 2 0.1371 7 1.0766 1 0.0419 1 3.1271 1 4.0838 2 0.414 2 3.4714 8 0.0665 2 0.0474 1 7.0435 8 0.01 6 0.0977 3 0.4208 6 7.7495 1)
Average genome size in population (length): 74.088
Average program size in population (points): 75.088
Average percent parens in population: 0.013
Minimum age in population: 59.09171073800826
Maximum age in population: 63.84584340721472
Average age in population: 61.82256207330658
Median age in population: 61.89075251771851
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.272
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 72224814
--- Timings ---
Current time: 1529615055758 milliseconds
Total Time:         171.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.9 seconds, 39.0%
Fitness Testing:     82.8 seconds, 48.3%
Report:              21.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2912.4308153999978
Median total errors in population: 877.8683000000001
Error averages by case: (103.88675119999895 9.694 92.91024840000038 11.243 73.68243250000016 10.665 97.18500859999948 10.418 102.85954610000162 10.019 116.67541750000026 9.959 86.17109809999923 10.642 102.94989019999916 9.718 131.69403710000068 10.835 98.95424799999918 10.0 147.12508869999996 4.18 89.83933939999915 9.021 117.18355450000054 11.087 80.56842180000112 8.538 109.51194430000132 9.26 102.57297890000171 10.484 104.30300189999963 8.574 101.38152479999982 11.337 104.28152659999942 10.006 155.22848190000116 12.156 129.76392119999983 10.915 84.22213970000062 8.894 140.3239630000007 10.088 87.51643490000019 10.116 103.79381609999913 9.997)
Error minima by case: (0.1186 2 1.2991 8 0.0737 1 0.3429 1 0.0838 3 0.5184 2 0.1794 1 2.0604 2 23.8546 2 4.0752 1 0.7552 1 0.0346 5 0.1304 1 0.0419 1 7.7513 1 1.0838 2 0.2114 2 3.7733 8 0.0665 2 0.2773 1 7.8189 8 0.0062 6 0.0977 1 0.4208 6 1.201 1)
Average genome size in population (length): 76.689
Average program size in population (points): 77.689
Average percent parens in population: 0.013
Minimum age in population: 60.74416599160395
Maximum age in population: 65.52505152461742
Average age in population: 63.36558050565811
Median age in population: 63.39864947988059
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.29
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 74142039
--- Timings ---
Current time: 1529615059897 milliseconds
Total Time:         175.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.4 seconds, 38.9%
Fitness Testing:     84.9 seconds, 48.3%
Report:              22.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_stackdepth})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_mult integer_stackdepth)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3413.8759555999955
Median total errors in population: 865.7632000000001
Error averages by case: (116.48370269999882 9.351 111.6311480000007 11.539 99.47703629999948 10.838 121.53238329999935 10.615 119.30367240000186 9.914 128.74605280000057 9.889 111.13356709999852 10.671 117.21908869999847 9.439 152.80468670000118 11.039 123.41228039999889 9.978 162.97322489999988 4.403 112.78824169999902 8.972 130.22078190000113 10.986 101.55450060000149 8.249 132.7730594000016 8.916 118.91733540000195 10.577 120.03215559999892 8.531 126.22441729999909 11.56 118.03507839999888 9.951 178.50083080000178 12.39 152.68132120000035 10.768 108.35996620000105 8.685 160.9308477000006 9.978 112.6549351000008 10.212 127.90964099999856 10.125)
Error minima by case: (0.0557 2 2.0491 7 0.0985 1 0.3429 1 5.0838 3 0.5184 2 0.1794 1 0.7512 3 9.7352 2 5.1271 1 2.2684 2 0.0192 5 0.5062 1 0.0419 1 7.7513 1 6.0838 2 0.414 2 7.1422 8 0.0665 2 1.6765 2 4.6994 8 0.01 6 0.9023 3 0.2634 5 7.1543 1)
Average genome size in population (length): 77.188
Average program size in population (points): 78.188
Average percent parens in population: 0.013
Minimum age in population: 61.74416599160395
Maximum age in population: 66.51803329768484
Average age in population: 64.76926196055415
Median age in population: 64.84433644052754
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.263
Error (vector) diversity:			 0.266
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 76071739
--- Timings ---
Current time: 1529615064005 milliseconds
Total Time:         179.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.8 seconds, 38.8%
Fitness Testing:     87.0 seconds, 48.4%
Report:              22.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction tagged_377} {:instruction integer_mult} {:instruction float_shove} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop})
Best program: (float_swap tagged_377 integer_mult float_shove float_yank integer_fromfloat float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup integer_add integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2915.6382856999962
Median total errors in population: 864.7632000000001
Error averages by case: (93.81879359999908 9.26 93.08678730000075 11.469 81.51938830000024 10.699 98.07542759999968 10.61 112.96779500000184 9.872 102.42080210000061 9.878 87.71641439999918 10.587 97.82232649999861 9.258 137.28099170000127 11.056 99.61619939999912 9.865 148.8070555000001 4.121 89.61027719999898 9.032 105.79059030000114 10.922 92.98875610000144 8.15 110.17592090000156 8.697 112.80962330000183 10.512 94.08638859999932 8.428 104.0826972999994 11.481 92.14049809999887 9.847 154.60120080000078 12.374 134.79058419999933 10.736 85.15163240000095 8.631 145.0259548000009 9.883 91.09031650000081 10.306 104.58786379999891 9.9)
Error minima by case: (0.1186 2 2.2991 7 0.0985 1 0.3429 1 2.0838 2 0.5184 2 0.8206 1 0.168 2 15.9073 2 10.8729 1 2.2684 2 0.0081 5 0.0394 1 0.0419 1 7.7513 1 3.0838 2 0.1291 2 0.3364 8 0.0665 2 1.0388 1 19.7388 8 0.0457 6 1.9023 3 1.5094 7 7.0838 1)
Average genome size in population (length): 77.407
Average program size in population (points): 78.407
Average percent parens in population: 0.013
Minimum age in population: 63.96776255110183
Maximum age in population: 67.81748028203631
Average age in population: 66.08565872460835
Median age in population: 66.10678825386208
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.229
Error (vector) diversity:			 0.229
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 78006914
--- Timings ---
Current time: 1529615067920 milliseconds
Total Time:         183.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.3 seconds, 38.8%
Fitness Testing:     89.0 seconds, 48.4%
Report:              23.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction float_yank} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult float_swap float_shove integer_mult integer_shove integer_mult integer_fromfloat integer_yank float_rot float_mult float_yank float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_min float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 integer_dup_times integer_max float_pop integer_stackdepth integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3046.357931399997
Median total errors in population: 864.7632000000001
Error averages by case: (106.98212949999876 9.362 98.1642898000007 11.534 79.45288850000033 10.687 106.41356639999935 10.614 108.03725760000168 9.721 120.1597029000006 9.941 95.6751388999988 10.591 107.39240409999842 9.312 135.50050610000108 11.058 100.265597099999 9.758 153.8078374 4.297 90.88684079999909 9.041 122.38594490000114 11.054 87.4394524000013 8.056 116.80519180000154 8.647 107.9120064000018 10.392 109.05310239999892 8.51 111.00525299999894 11.554 110.39586059999893 9.934 155.05316530000064 12.284 134.02691169999952 10.768 86.16909990000082 8.653 153.04078630000086 9.982 91.68450990000069 10.341 112.62948769999848 9.928)
Error minima by case: (0.1186 2 2.2991 8 0.0985 1 0.3429 1 3.0838 3 0.5184 2 0.1794 1 2.0604 2 2.9938 2 3.1271 2 2.2684 2 0.0081 5 0.5062 1 0.0419 1 3.7513 1 4.0838 2 0.546 2 0.3364 8 0.0665 2 2.0 1 19.7388 8 0.0457 6 1.4953 3 0.0614 6 3.1543 1)
Average genome size in population (length): 77.269
Average program size in population (points): 78.269
Average percent parens in population: 0.013
Minimum age in population: 65.16288488859419
Maximum age in population: 69.25969442374374
Average age in population: 67.51202679429773
Median age in population: 67.56975334847769
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.229
Error (vector) diversity:			 0.233
Behavioral diversity:				 0.233
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 79938639
--- Timings ---
Current time: 1529615072292 milliseconds
Total Time:         188.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.7 seconds, 38.7%
Fitness Testing:     91.2 seconds, 48.5%
Report:              23.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_pop integer_dup_times integer_max float_pop integer_mult integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2991.4707044999964
Median total errors in population: 864.7632000000001
Error averages by case: (108.77566749999849 9.507 95.15373840000068 11.464 75.66124040000032 10.693 100.95047749999938 10.654 100.73734560000169 9.73 121.72692800000071 10.057 91.3883653999989 10.621 108.62339959999818 9.433 131.72675600000127 11.069 99.72585709999899 9.855 150.74991909999994 4.347 89.47667619999912 8.981 122.5804540000013 11.147 81.35759930000124 8.047 111.69449350000156 8.719 100.32785560000174 10.376 113.16768619999856 8.626 105.40746989999924 11.497 111.07026959999881 10.021 156.64270250000092 12.306 131.0220352999991 10.706 84.4947917000009 8.64 156.0106044000008 10.068 88.98042730000067 10.241 107.25794439999855 9.955)
Error minima by case: (0.1186 2 0.5011 7 0.0985 1 1.3429 2 3.0838 2 0.5184 2 0.1794 1 0.7512 2 0.4352 2 6.9148 1 2.2684 1 0.0146 5 0.5062 2 0.0419 1 8.7513 1 4.0838 2 0.546 2 4.3537 8 0.253 2 0.4806 1 3.8189 9 0.0457 6 1.4953 3 0.3147 6 6.0838 1)
Average genome size in population (length): 76.914
Average program size in population (points): 77.914
Average percent parens in population: 0.013
Minimum age in population: 66.16288488859419
Maximum age in population: 70.94690686718509
Average age in population: 68.88839917340225
Median age in population: 68.97550840360357
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.231
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 81861489
--- Timings ---
Current time: 1529615076224 milliseconds
Total Time:         192.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.2 seconds, 38.6%
Fitness Testing:     93.1 seconds, 48.5%
Report:              24.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_pop integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec integer_flush float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_mult integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3089.9409866999963
Median total errors in population: 864.7632000000001
Error averages by case: (109.69615099999892 9.488 99.78027080000066 11.513 83.8015013999998 10.743 106.29690429999931 10.72 106.75744800000176 9.776 121.99139420000056 10.078 95.4690172999988 10.749 107.54407329999862 9.408 140.41387890000107 11.105 105.30975319999894 9.789 152.5765288999999 4.397 95.211092899999 9.01 123.4933041000011 11.166 87.61920280000126 8.092 117.39022260000145 8.748 106.46211380000179 10.484 111.04352749999913 8.659 112.004031999999 11.543 110.10047719999903 10.024 158.5975775000012 12.319 138.07174849999979 10.759 90.11300110000089 8.653 153.99037980000082 10.051 95.20197070000059 10.307 113.37441489999863 10.05)
Error minima by case: (0.1186 2 5.1379 7 0.0985 1 1.6571 1 3.0838 3 0.4816 3 0.1794 1 1.6203 2 21.6674 2 4.0752 1 2.2684 1 0.0192 5 0.5062 2 0.0419 1 1.8568 1 4.0838 3 0.546 2 0.3652 8 0.253 2 1.7985 1 5.9434 9 0.0283 6 1.4953 2 0.4906 7 5.1543 1)
Average genome size in population (length): 76.91
Average program size in population (points): 77.91
Average percent parens in population: 0.013
Minimum age in population: 67.8403104072691
Maximum age in population: 72.27135277204741
Average age in population: 70.28767173324955
Median age in population: 70.31703551112913
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.225
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.227
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 83784239
--- Timings ---
Current time: 1529615080194 milliseconds
Total Time:         196.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.7 seconds, 38.6%
Fitness Testing:     95.1 seconds, 48.5%
Report:              25.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_mult})
Best program: (float_swap float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank integer_flush float_mult float_yankdup float_tan float_yankdup float_yankdup float_tan float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_pop integer_mult)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3261.8523298999958
Median total errors in population: 864.7632000000001
Error averages by case: (112.35582249999858 9.492 109.61638040000072 11.534 91.60889639999967 10.711 114.33651429999934 10.67 114.24201690000207 9.783 122.56394410000057 10.103 104.08624089999861 10.649 114.9434489999982 9.508 148.51012760000137 11.084 112.57684719999878 9.793 161.31593149999998 4.497 102.805347999999 9.09 124.3675370000012 11.144 96.11923740000151 8.105 123.13906050000175 8.695 113.96926750000215 10.488 115.20148419999879 8.692 118.38893459999898 11.539 114.2270917999989 10.072 164.95998020000155 12.324 146.88406170000033 10.765 98.95811910000093 8.715 163.81512860000095 10.146 104.39857450000068 10.327 120.57733399999823 9.959)
Error minima by case: (0.1186 2 3.1664 7 0.0985 1 1.7369 1 3.0838 2 0.5184 2 0.1794 1 1.6203 2 24.8546 2 3.0752 1 2.2684 2 0.1498 5 0.4938 2 0.0419 1 5.5781 1 4.0838 3 0.546 2 0.3652 8 0.253 3 1.7985 1 8.8189 8 0.0457 6 1.4953 3 0.0614 7 6.1751 1)
Average genome size in population (length): 76.75
Average program size in population (points): 77.75
Average percent parens in population: 0.013
Minimum age in population: 69.1389534535667
Maximum age in population: 73.58326184012193
Average age in population: 71.66210201621087
Median age in population: 71.71774515183544
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.233
Error (vector) diversity:			 0.236
Behavioral diversity:				 0.236
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 85702989
--- Timings ---
Current time: 1529615084198 milliseconds
Total Time:         200.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.2 seconds, 38.6%
Fitness Testing:     97.1 seconds, 48.5%
Report:              25.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.866149329358805} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_stackdepth})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items integer_yank integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.866149329358805 integer_pop integer_dup_times integer_max float_pop integer_mult integer_stackdepth)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2976.6755914999962
Median total errors in population: 864.7632000000001
Error averages by case: (102.23970769999892 9.341 97.48760150000066 11.501 79.55290919999997 10.686 102.46960729999951 10.708 107.60496670000167 9.788 115.29828810000062 9.998 92.284501899999 10.673 101.13512299999863 9.283 135.10055960000108 11.038 99.49022969999903 9.845 148.3929733 4.161 89.09265779999915 9.004 115.87448070000114 11.097 88.24676990000121 8.129 113.74465880000152 8.676 107.14749990000169 10.458 104.59746759999925 8.488 107.51842489999906 11.443 103.58609419999887 9.925 155.16927020000065 12.334 132.98287139999945 10.727 84.58606540000072 8.572 148.52920480000077 9.983 89.65523970000068 10.262 108.81041819999882 9.958)
Error minima by case: (0.1186 2 5.1379 8 0.0985 1 0.3429 1 2.0838 3 0.5184 2 0.1794 1 0.7512 2 1.1873 2 4.6792 1 1.6791 2 0.0146 6 0.6534 1 0.0419 1 4.7513 1 3.0838 2 0.546 2 3.8367 7 0.253 2 1.8339 1 14.1355 9 0.0457 6 1.4953 3 0.4906 6 2.0619 1)
Average genome size in population (length): 76.974
Average program size in population (points): 77.974
Average percent parens in population: 0.013
Minimum age in population: 70.22610335959205
Maximum age in population: 74.97323840609974
Average age in population: 73.07241979306895
Median age in population: 73.08299928233734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.225
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 87627339
--- Timings ---
Current time: 1529615088227 milliseconds
Total Time:         204.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.8 seconds, 38.6%
Fitness Testing:     99.0 seconds, 48.5%
Report:              26.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction print_float} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_mult integer_fromfloat integer_yank in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec integer_flush float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 print_float integer_pop integer_dup_times integer_max float_pop integer_mult integer_stackdepth float_dup float_yankdup -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3239.192198399998
Median total errors in population: 864.7632000000001
Error averages by case: (117.36711439999857 9.539 105.20527600000061 11.51 87.00369049999995 10.697 108.95637019999964 10.628 114.39726310000205 9.767 132.83508600000044 10.156 99.12730239999868 10.648 115.1736124999983 9.485 141.84442180000138 11.048 110.12661699999894 9.883 163.05950590000003 4.307 100.96613269999878 9.016 132.92352540000124 11.244 92.99194440000143 8.127 122.1894421000017 8.645 113.85186630000197 10.461 121.94655519999868 8.664 115.73678169999916 11.504 120.39295449999874 10.093 164.64286760000144 12.386 141.44947620000025 10.76 94.67937040000108 8.622 159.6008992000009 10.134 99.78691150000094 10.326 115.37521139999843 9.912)
Error minima by case: (0.1186 3 5.1379 7 0.0985 1 0.3429 1 3.0838 2 0.5184 2 0.1794 1 1.6203 3 22.8546 2 3.1271 2 2.2684 2 0.4302 7 0.5062 2 0.0419 1 3.7513 2 4.0838 2 0.546 3 2.8997 8 0.253 3 0.0474 2 6.8189 8 0.0457 6 1.2344 3 0.4906 7 3.1543 1)
Average genome size in population (length): 77.21
Average program size in population (points): 78.21
Average percent parens in population: 0.013
Minimum age in population: 71.9283235079185
Maximum age in population: 76.44208551627075
Average age in population: 74.48291760756562
Median age in population: 74.52419620412707
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.219
Error (vector) diversity:			 0.22
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 89557589
--- Timings ---
Current time: 1529615092243 milliseconds
Total Time:         208.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.2 seconds, 38.6%
Fitness Testing:    101.1 seconds, 48.6%
Report:              26.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult integer_mult integer_fromfloat integer_yank float_mult integer_mult integer_yank float_rot float_pop integer_shove float_swap float_yankdup float_yankdup integer_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec integer_flush float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times float_dup float_yankdup -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3218.0760091999955
Median total errors in population: 864.7632000000001
Error averages by case: (111.33216029999916 9.356 110.34006920000078 11.553 87.18899550000006 10.739 114.04698339999959 10.796 118.54585590000175 9.83 124.49416760000062 9.976 101.9739570999991 10.77 111.18201569999871 9.371 142.7315077000011 11.095 108.29324149999893 9.897 155.50171630000003 4.31 98.04541659999911 9.035 125.99353100000114 11.046 99.31689860000137 8.164 125.41145020000151 8.84 118.2507189000018 10.528 115.63366459999924 8.52 117.30742869999929 11.51 113.36090909999886 9.96 163.73394450000072 12.374 139.9571334999998 10.748 93.52211470000083 8.607 155.63488910000078 10.009 97.77492690000071 10.294 121.06431259999874 10.11)
Error minima by case: (0.1186 2 5.1379 9 0.0985 1 3.6571 1 3.0838 3 0.5184 2 0.1794 1 0.7512 3 33.6348 2 4.0752 1 2.2684 2 0.248 7 0.0356 2 0.0419 1 3.7513 1 4.0838 2 0.546 2 0.2141 7 0.253 2 1.0388 2 28.5991 9 0.0371 6 1.9023 3 1.1501 7 3.1543 1)
Average genome size in population (length): 77.127
Average program size in population (points): 78.127
Average percent parens in population: 0.013
Minimum age in population: 73.2429356194392
Maximum age in population: 77.85816042266775
Average age in population: 75.93053598047477
Median age in population: 75.9687519156334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.223
Error (vector) diversity:			 0.223
Behavioral diversity:				 0.223
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 91485764
--- Timings ---
Current time: 1529615096101 milliseconds
Total Time:         212.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.6 seconds, 38.5%
Fitness Testing:    103.1 seconds, 48.6%
Report:              27.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 51258.065700000116
Test mean error for best: 25.62903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 2.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 2.0436026431  
Correct output: -17.9148224328 | Program output: 2.6783232     
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 2.7196541833  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 2.7597057509  
Correct output: 66.7769669244  | Program output: 2.3980829784  
Correct output: 3.7173929377   | Program output: 2.6717042389  
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 2.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction float_yank} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction float_dup} {:instruction integer_add} {:instruction -28.069662028429462})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_yank integer_yank float_rot float_mult float_yank float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_stackdepth in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec integer_shove float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_times float_inc float_yankdup print_float integer_yank in2 float_dup integer_add -28.069662028429462)
Errors: [5.6696 9 7.1379 11 8.1966 11 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 69.7691 11 20.5931 9 87.0 2 1.5698 8 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.0928 13 64.3789 10 1.0457 7 77.2047 10 14.0123 10 27.5927 10]
Total: 864.7632000000001
Mean: 17.295263
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2982.9742038999957
Median total errors in population: 864.7632000000001
Error averages by case: (107.64795839999893 9.414 91.01382210000072 11.424 81.04414080000015 10.778 98.8260615999998 10.747 98.13826630000193 9.685 120.43226330000059 10.041 87.69296869999907 10.725 105.94852959999844 9.414 137.10876420000122 11.076 102.3626873999989 9.853 150.03683070000005 4.251 91.65992669999883 8.915 122.21566350000124 11.206 79.20262920000154 8.077 111.9371800000017 8.723 97.77948790000193 10.45 110.00590739999907 8.596 104.56506679999941 11.405 109.74234859999873 10.003 158.61008460000073 12.405 135.50854569999964 10.692 86.62933530000093 8.55 150.5785180000009 10.057 92.26906520000085 10.241 105.26715189999894 10.023)
Error minima by case: (0.1186 2 1.5711 9 0.0985 1 3.6571 1 0.6912 3 0.5184 2 0.1794 1 1.6203 3 7.9661 2 6.1271 2 2.2684 2 0.0054 5 0.5062 1 0.0419 1 3.7513 1 2.0001 3 0.546 2 3.3086 8 0.2373 2 2.0 1 2.9304 8 0.0283 6 1.9023 3 0.4906 6 3.1543 1)
Average genome size in population (length): 77.363
Average program size in population (points): 78.363
Average percent parens in population: 0.013
Minimum age in population: 74.90806482680946
Maximum age in population: 79.50677983358591
Average age in population: 77.34334040666592
Median age in population: 77.40673030626365
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.216
Error (vector) diversity:			 0.217
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 93419839
--- Timings ---
Current time: 1529615100356 milliseconds
Total Time:         216.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.2 seconds, 38.5%
Fitness Testing:    105.1 seconds, 48.7%
Report:              27.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3201.7371699999962
Median total errors in population: 864.7632000000001
Error averages by case: (113.67401969999875 9.49 105.53187080000077 11.535 90.75042099999995 10.711 108.18371639999947 10.669 111.15227860000198 9.763 126.9234670000007 10.088 96.98248339999894 10.651 113.09806729999836 9.469 146.66386090000142 11.106 109.28808969999882 9.821 161.30734829999997 4.372 98.54302139999892 8.999 129.74563650000118 11.286 93.27953870000151 8.079 117.1203917000016 8.636 110.72447780000198 10.463 117.68127249999883 8.664 112.77372429999909 11.488 115.35564889999873 10.088 162.02704040000103 12.413 143.98356970000003 10.715 95.16128040000098 8.565 158.93663770000083 10.116 101.12457660000095 10.3 114.32573029999857 9.912)
Error minima by case: (0.1186 2 5.1379 8 0.0985 1 0.3429 1 3.0838 2 0.5184 2 0.1794 1 1.0593 2 22.8546 2 1.75 1 23.3808 2 0.0146 7 0.5062 1 0.0419 1 7.7513 1 4.0838 2 0.299 2 3.7485 8 0.253 3 2.0 1 6.8189 7 0.0457 6 1.4953 3 0.4906 7 7.1543 1)
Average genome size in population (length): 77.248
Average program size in population (points): 78.248
Average percent parens in population: 0.013
Minimum age in population: 76.55020597189
Maximum age in population: 80.73923082072778
Average age in population: 78.76686988533488
Median age in population: 78.78130831848375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.218
Error (vector) diversity:			 0.219
Behavioral diversity:				 0.22
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 95351039
--- Timings ---
Current time: 1529615104345 milliseconds
Total Time:         220.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.7 seconds, 38.5%
Fitness Testing:    107.1 seconds, 48.7%
Report:              28.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3153.679712799996
Median total errors in population: 864.7632000000001
Error averages by case: (114.61758639999861 9.418 101.76654830000072 11.576 84.3549613 10.705 104.95070899999959 10.599 111.8237525000018 9.737 128.93041460000063 10.011 94.70647199999901 10.589 115.45602739999829 9.432 140.1018527000012 11.041 105.57117609999898 9.846 155.6258269 4.398 96.02000129999907 9.035 129.3645683000011 11.113 92.58817830000137 8.085 117.43993500000153 8.71 111.51331510000176 10.468 117.76214869999889 8.645 111.43772269999911 11.533 116.93000439999885 10.032 161.53170510000083 12.299 137.4558008999997 10.775 90.81714120000089 8.646 159.55414650000083 10.022 95.23176800000067 10.332 111.13295009999887 9.948)
Error minima by case: (0.1186 2 3.4452 7 0.0737 1 0.3429 1 2.0838 2 0.5184 2 0.1794 1 0.27 2 9.6731 2 3.1271 1 2.2684 2 0.1654 5 0.6534 2 0.0419 1 3.7513 1 3.0838 2 0.454 2 0.5268 8 0.253 2 0.0474 1 14.7089 8 0.0193 6 1.4953 3 0.2634 7 3.1543 1)
Average genome size in population (length): 76.957
Average program size in population (points): 77.957
Average percent parens in population: 0.013
Minimum age in population: 77.55020597189
Maximum age in population: 81.96183640690391
Average age in population: 80.20922748395465
Median age in population: 80.28761317799047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.253
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 97274964
--- Timings ---
Current time: 1529615108637 milliseconds
Total Time:         224.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        86.3 seconds, 38.5%
Fitness Testing:    109.1 seconds, 48.6%
Report:              28.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_yank} {:instruction in2} {:instruction float_yankdup} {:instruction -28.069662028429462})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_yank in2 float_yankdup -28.069662028429462)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2924.0794700999945
Median total errors in population: 864.7632000000001
Error averages by case: (102.28827179999874 9.176 94.99571070000071 11.49 72.11878910000021 10.605 101.69590419999949 10.614 106.21305300000176 9.815 113.94041460000055 9.796 91.10531419999892 10.566 103.82011239999841 9.175 129.08408150000128 11.013 93.14892779999893 9.722 149.89970799999986 4.12 84.74520439999908 8.959 114.72787370000113 10.911 87.40448920000128 8.153 115.14519610000163 8.637 105.7934271000018 10.463 103.86127639999894 8.408 107.55337009999899 11.453 102.11431629999886 9.841 150.18930050000063 12.251 126.48078149999911 10.653 79.11678310000076 8.557 153.04090020000086 9.837 82.75788590000062 10.23 108.48237829999856 9.911)
Error minima by case: (0.1186 2 0.5011 7 0.0985 1 0.3429 1 3.0838 2 0.5184 2 0.1794 1 1.6203 2 1.1873 2 0.8729 2 0.7552 2 0.0146 5 0.5062 1 0.0419 1 3.7513 1 4.0838 3 0.546 2 1.1422 8 0.195 2 0.2791 1 17.223 8 0.0457 6 1.4953 2 0.2634 6 3.1543 1)
Average genome size in population (length): 76.468
Average program size in population (points): 77.468
Average percent parens in population: 0.013
Minimum age in population: 78.6210855035228
Maximum age in population: 83.6530902671311
Average age in population: 81.62117739944826
Median age in population: 81.62573307965336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.238
Error (vector) diversity:			 0.239
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 99186664
--- Timings ---
Current time: 1529615112745 milliseconds
Total Time:         228.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.8 seconds, 38.4%
Fitness Testing:    111.2 seconds, 48.7%
Report:              29.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3061.8142646999963
Median total errors in population: 864.7632000000001
Error averages by case: (108.66621789999888 9.406 105.20043570000061 11.508 77.02336730000005 10.637 107.99595749999946 10.591 110.99912710000164 9.673 121.19647340000049 9.945 97.83653279999942 10.58 107.78013939999866 9.44 133.67717710000096 11.009 98.65168519999915 9.725 152.2179517 4.432 89.07225319999918 8.979 122.24064430000095 11.062 92.50311780000108 7.999 118.66917700000135 8.661 110.53671900000164 10.366 110.96437689999912 8.591 113.71032489999914 11.492 110.02806349999916 10.037 152.10009810000045 12.25 131.95958759999942 10.753 85.07110740000066 8.662 154.33351480000084 10.043 89.25038940000051 10.21 114.2028256999987 9.876)
Error minima by case: (0.1186 2 5.1379 8 0.0985 1 1.6571 1 3.0838 2 1.6082 2 0.1794 1 0.7512 2 1.1873 2 1.2484 1 2.2684 1 0.2322 6 0.6534 2 0.0419 1 3.8879 1 4.0838 2 0.546 2 1.2489 7 0.1151 2 1.7985 1 17.223 8 0.0193 6 1.2344 2 0.2634 7 0.2667 1)
Average genome size in population (length): 76.375
Average program size in population (points): 77.375
Average percent parens in population: 0.013
Minimum age in population: 79.6210855035228
Maximum age in population: 85.22825420206274
Average age in population: 83.04121736655858
Median age in population: 83.09264992406472
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.251
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 101096039
--- Timings ---
Current time: 1529615116668 milliseconds
Total Time:         232.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.2 seconds, 38.4%
Fitness Testing:    113.3 seconds, 48.7%
Report:              30.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 16} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 16 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3160.440827399996
Median total errors in population: 864.7632000000001
Error averages by case: (104.11005319999832 9.368 121.36714090000066 11.526 72.9585885000004 10.674 126.13466709999877 10.715 132.66793990000184 9.814 114.07556280000063 9.844 115.7026378999979 10.679 107.85253079999784 9.563 128.73089170000142 10.885 92.85117859999897 9.476 151.45825249999996 4.233 81.29891989999898 8.827 118.79744320000133 11.209 114.86885220000156 8.106 136.11399200000167 8.764 132.2551464000019 10.505 105.43264759999859 8.613 130.60894569999834 11.558 104.5325934999987 10.196 147.8931506000005 12.259 127.51889109999905 10.752 77.66484060000087 8.571 153.6467382000011 10.073 83.45521700000073 10.088 132.10900549999803 10.037)
Error minima by case: (0.1186 2 5.1379 8 0.0985 1 0.3429 1 0.0838 3 0.5184 2 0.1794 1 0.7512 2 1.1873 1 4.0752 1 2.2684 1 0.209 6 0.5062 1 0.0419 1 3.7513 1 1.0838 2 0.454 2 0.3652 8 0.253 2 0.8945 1 7.8189 8 0.0457 6 1.9023 3 0.0614 7 3.1543 1)
Average genome size in population (length): 76.3
Average program size in population (points): 77.3
Average percent parens in population: 0.013
Minimum age in population: 82.3152552253583
Maximum age in population: 86.45524699911024
Average age in population: 84.54482603924856
Median age in population: 84.57007548411747
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.274
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 103003564
--- Timings ---
Current time: 1529615120620 milliseconds
Total Time:         236.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.7 seconds, 38.3%
Fitness Testing:    115.2 seconds, 48.7%
Report:              30.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dup} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup float_yankdup float_yankdup float_tan float_yankdup float_dup print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3376.5632923999956
Median total errors in population: 864.7632000000001
Error averages by case: (98.55354649999921 9.113 153.44307650000073 11.625 73.01244680000015 10.714 155.09886969999886 10.929 153.26904030000014 10.009 108.0347436000006 9.363 145.3128381999976 10.863 103.00119979999872 9.633 130.98345750000092 10.634 94.49786039999897 9.357 149.663871 4.062 85.49069639999905 8.664 110.55167680000112 10.857 134.45127560000114 8.32 169.49283940000157 9.064 153.07143290000013 10.661 98.10237659999945 8.411 162.19104129999857 11.541 97.56545699999893 10.227 148.59306380000052 12.306 128.74233839999954 10.831 81.28458570000085 8.73 148.68075570000076 9.837 86.05150890000067 9.856 161.5622935999996 10.254)
Error minima by case: (0.1186 2 5.1379 7 0.1404 1 0.6571 1 1.0838 3 0.5184 3 1.1794 1 1.6203 2 1.1873 2 6.1271 2 4.2684 2 0.0636 6 0.4938 2 0.0419 1 6.7513 2 2.0838 2 0.454 3 4.061 7 0.2449 2 0.7417 1 17.223 8 0.0283 7 1.9023 3 0.5094 6 3.4736 1)
Average genome size in population (length): 77.278
Average program size in population (points): 78.278
Average percent parens in population: 0.013
Minimum age in population: 83.3152552253583
Maximum age in population: 87.86361570220372
Average age in population: 85.95417983214033
Median age in population: 86.01984290365147
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.281
Error (vector) diversity:			 0.286
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 104935514
--- Timings ---
Current time: 1529615125010 milliseconds
Total Time:         240.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.3 seconds, 38.4%
Fitness Testing:    117.3 seconds, 48.7%
Report:              31.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction print_float} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap print_float integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3234.8554210999964
Median total errors in population: 864.7632000000001
Error averages by case: (95.60999399999973 8.984 141.30783430000068 11.61 64.55860930000036 10.65 145.89243019999915 10.788 151.55767290000097 9.983 103.41231060000051 9.154 135.7180209999982 10.699 100.29079259999914 9.68 121.92551940000065 10.517 91.46975439999913 9.179 139.79942659999995 4.122 82.78551849999948 8.624 106.20977260000096 10.732 131.7709383000017 8.273 159.79518280000167 8.877 151.47385460000092 10.597 93.89953479999993 8.295 152.64913019999872 11.549 93.80486959999924 10.182 149.88683460000036 12.218 122.35889679999968 10.904 77.84667700000035 8.775 143.6868239000009 9.734 80.63033610000029 9.786 152.5056859999993 10.097)
Error minima by case: (1.1186 2 5.1379 8 0.0985 1 3.2885 1 3.0838 2 0.6082 3 0.1794 1 0.7512 3 1.1873 2 4.0752 1 0.2448 1 0.0263 6 0.4938 2 0.0419 1 11.2927 1 4.0838 2 0.454 2 3.3086 8 0.253 2 1.7985 1 14.1653 8 0.0457 6 1.9023 3 0.8529 7 8.9581 1)
Average genome size in population (length): 77.549
Average program size in population (points): 78.549
Average percent parens in population: 0.013
Minimum age in population: 85.09851738523005
Maximum age in population: 89.16257453175128
Average age in population: 87.36907020825629
Median age in population: 87.45342441212826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.28
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 106874239
--- Timings ---
Current time: 1529615129312 milliseconds
Total Time:         245.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.8 seconds, 38.3%
Fitness Testing:    119.5 seconds, 48.8%
Report:              31.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank integer_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times float_swap print_integer integer_mult float_dec integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2802.3364256999957
Median total errors in population: 863.7632000000001
Error averages by case: (79.67692159999984 9.102 115.76889720000081 11.545 53.72337910000042 10.524 124.36608839999924 10.862 126.97946310000201 9.857 91.48644990000045 9.315 114.76723449999858 10.81 81.49619149999936 9.842 110.57257500000088 10.508 78.61033229999919 9.06 126.3386377 4.16 68.50176339999933 8.577 92.18299890000092 10.929 106.13581400000167 8.141 135.44431210000164 8.881 126.74013140000208 10.544 79.73390889999996 8.377 129.38314349999882 11.503 79.91122969999915 10.314 130.43814669999932 12.158 113.10421189999953 10.867 65.73794900000061 8.695 125.16920750000082 9.899 71.23745140000051 9.705 130.50298699999826 10.152)
Error minima by case: (1.1186 2 5.1379 8 0.13 1 0.6571 1 10.9581 2 1.5184 3 0.1794 1 1.7512 2 1.1873 2 5.1271 1 0.2448 2 0.1057 6 1.6348 2 0.0419 1 3.7513 1 9.9581 2 0.454 2 3.9392 8 0.253 2 1.2403 1 17.223 8 0.0457 6 0.0977 3 0.5094 6 3.1543 1)
Average genome size in population (length): 76.737
Average program size in population (points): 77.737
Average percent parens in population: 0.013
Minimum age in population: 86.38810398216589
Maximum age in population: 90.71387846298023
Average age in population: 88.7574272144251
Median age in population: 88.80900304904372
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.269
Error (vector) diversity:			 0.275
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 108792664
--- Timings ---
Current time: 1529615133465 milliseconds
Total Time:         249.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.4 seconds, 38.3%
Fitness Testing:    121.6 seconds, 48.8%
Report:              32.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap integer_yankdup float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2894.8427681999974
Median total errors in population: 864.2632000000001
Error averages by case: (83.61061319999968 8.872 126.56896010000065 11.496 52.31430610000039 10.527 131.07946019999895 10.834 136.90506910000155 9.856 94.26850520000059 9.081 121.54833739999805 10.793 85.93571209999928 9.585 111.34294350000084 10.45 76.15044479999924 9.255 127.85252270000002 3.993 67.62989549999934 8.549 95.85574830000095 10.671 115.67724650000154 8.143 143.3163823000015 8.971 136.62237460000165 10.463 82.59153369999996 8.189 136.55400769999872 11.462 83.94243379999918 10.067 135.53516919999976 12.182 109.41593759999971 10.858 63.10138930000057 8.739 130.82921270000085 9.629 66.30316280000038 9.637 137.4633997999983 10.126)
Error minima by case: (0.1186 2 0.4184 2 0.0985 1 0.3429 1 3.0838 2 0.6082 3 1.1794 1 0.0604 3 1.1873 2 5.8778 2 0.2448 1 0.1276 6 0.6988 2 0.0419 1 1.7094 1 4.0838 3 0.454 2 0.3652 1 0.253 2 0.0388 1 17.223 9 5.0E-4 6 1.9023 3 0.1738 7 0.7619 1)
Average genome size in population (length): 77.188
Average program size in population (points): 78.188
Average percent parens in population: 0.013
Minimum age in population: 87.38810398216589
Maximum age in population: 92.14999293670762
Average age in population: 90.15047249181158
Median age in population: 90.17403272520302
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.27
Error (vector) diversity:			 0.277
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 110722364
--- Timings ---
Current time: 1529615137919 milliseconds
Total Time:         253.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.0 seconds, 38.2%
Fitness Testing:    123.7 seconds, 48.8%
Report:              32.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_inc} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_sin} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap integer_inc integer_min integer_dup_items float_shove float_max integer_fromfloat integer_yank float_sin float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_dup_items integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2877.110090999996
Median total errors in population: 863.7632000000001
Error averages by case: (89.72941239999929 9.172 124.31890470000073 11.524 53.265748600000755 10.686 121.92438499999902 10.85 127.72662240000186 9.895 99.73160730000056 9.318 112.06709419999844 10.787 91.8504309999988 9.882 113.92714570000108 10.525 76.88804629999913 9.157 131.39638840000003 4.083 68.76326629999919 8.462 100.28756180000123 10.932 108.46734740000146 8.195 135.47591820000153 8.874 127.51643970000191 10.581 89.56394559999943 8.435 128.1356046999988 11.484 89.44439959999903 10.417 134.30567859999965 12.308 111.27239769999939 10.792 63.61626540000077 8.592 136.59089480000105 9.95 67.52839200000061 9.668 128.6101931999984 10.137)
Error minima by case: (0.6277 2 5.1379 8 0.2628 1 3.3429 2 2.0838 2 0.6082 3 0.1794 1 0.4665 2 0.1873 2 2.1271 2 4.2684 2 0.1498 6 0.4938 2 0.0419 1 10.7513 1 3.0838 2 0.454 2 0.3652 8 0.253 2 0.2791 1 5.764 7 0.0457 6 1.9023 3 0.5094 6 10.1543 1)
Average genome size in population (length): 76.845
Average program size in population (points): 77.845
Average percent parens in population: 0.013
Minimum age in population: 88.87962467948137
Maximum age in population: 93.44041822779762
Average age in population: 91.49147814194274
Median age in population: 91.53076765870001
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.26
Error (vector) diversity:			 0.27
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 112643489
--- Timings ---
Current time: 1529615141975 milliseconds
Total Time:         257.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.5 seconds, 38.2%
Fitness Testing:    125.8 seconds, 48.8%
Report:              33.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_dup_times} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max})
Best program: (float_swap float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float float_dup_times in2 41.15518667359108 integer_pop integer_dup_times integer_max)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2987.168349799996
Median total errors in population: 863.7632000000001
Error averages by case: (86.55504099999963 8.828 124.32625930000064 11.55 59.851691800000474 10.568 131.6156076999993 10.802 133.6686984000017 9.867 98.0433804000005 9.067 122.0238698999983 10.712 90.77623819999913 9.562 118.7548232000009 10.521 85.85472539999915 9.133 134.91262789999996 4.067 77.66387329999905 8.602 95.42678820000104 10.585 114.1146518000016 8.14 144.9241980000015 8.897 133.44405950000183 10.487 86.35010650000001 8.156 138.68604719999888 11.51 85.48936929999905 10.03 143.7737074999997 12.167 119.3085784999996 10.884 72.40572530000067 8.79 132.9859070000008 9.653 76.10259540000045 9.718 137.7277790999988 10.086)
Error minima by case: (0.1186 2 1.5711 8 0.0419 1 0.6571 2 1.0838 2 0.6082 2 1.0041 1 2.0604 3 1.1873 2 5.8778 1 4.2684 2 0.0978 6 0.401 1 0.0419 1 4.592 1 2.0838 2 0.454 3 2.6411 8 0.253 2 1.2403 2 6.9434 8 0.2286 7 0.4953 2 0.4487 6 1.0529 1)
Average genome size in population (length): 76.732
Average program size in population (points): 77.732
Average percent parens in population: 0.013
Minimum age in population: 90.05315122029369
Maximum age in population: 95.01374427642624
Average age in population: 92.85415787738452
Median age in population: 92.93523616074285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.267
Error (vector) diversity:			 0.275
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 114561789
--- Timings ---
Current time: 1529615146175 milliseconds
Total Time:         262.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.9 seconds, 38.1%
Fitness Testing:    128.0 seconds, 48.9%
Report:              33.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_sub} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_mult integer_fromfloat integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_rot float_max float_inc float_dup_items integer_dup_times float_sub print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3003.5420331999967
Median total errors in population: 863.7632000000001
Error averages by case: (87.75287349999908 8.895 124.57010460000068 11.509 61.23852010000077 10.656 130.34965179999907 10.893 136.34417750000136 9.842 95.28737870000059 9.068 119.27996429999799 10.858 93.63417299999868 9.617 117.94594700000114 10.479 85.66929219999902 9.116 135.60609820000005 3.814 76.625497899999 8.464 100.05130360000112 10.729 117.72665810000153 8.123 143.55506980000158 8.868 136.0755837000013 10.521 86.02312669999944 8.191 135.59286779999857 11.479 86.20221269999894 10.155 145.53768360000007 12.282 118.92280209999932 10.807 72.26527320000095 8.642 142.0085059000009 9.728 75.78831020000072 9.623 136.9519569999985 10.178)
Error minima by case: (1.1186 2 5.1379 8 0.1966 1 4.3429 1 0.0838 3 0.6082 2 0.1794 1 1.27 2 1.1873 2 4.8729 1 2.2684 1 0.0146 6 0.4938 1 0.0419 1 11.7513 1 1.0838 3 0.454 2 4.4448 8 0.253 2 0.2791 2 5.8189 7 0.0283 6 0.4953 3 1.5094 7 9.9581 1)
Average genome size in population (length): 76.895
Average program size in population (points): 77.895
Average percent parens in population: 0.013
Minimum age in population: 91.27389894239641
Maximum age in population: 96.08664919725153
Average age in population: 94.27368280235376
Median age in population: 94.30532757754216
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.272
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 116484164
--- Timings ---
Current time: 1529615150242 milliseconds
Total Time:         266.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.4 seconds, 38.1%
Fitness Testing:    130.1 seconds, 48.9%
Report:              34.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3347.2678425999925
Median total errors in population: 864.7632000000001
Error averages by case: (99.16528189999906 9.072 146.73604000000066 11.657 71.77277530000056 10.609 148.1918792999987 10.824 159.8818305999999 10.065 109.82252140000061 9.252 138.30189619999786 10.753 102.14425179999863 9.749 128.22750610000128 10.547 96.87377599999898 9.205 141.85274700000002 4.301 88.33088849999902 8.673 110.19586440000116 10.735 141.32246400000122 8.407 159.30400240000156 8.994 159.5100679999999 10.723 99.67810029999922 8.432 153.87670759999838 11.579 99.19950469999881 10.287 151.60850150000059 12.205 129.40769259999914 10.934 84.10155450000089 8.826 140.4099434000009 9.803 87.54231300000073 9.82 154.20773209999894 10.15)
Error minima by case: (1.1186 2 0.5011 7 0.0985 1 0.3429 1 3.0838 3 1.5184 3 0.1104 1 1.6203 3 1.1873 2 6.1271 2 4.2684 2 0.0388 6 0.4938 2 0.0419 1 5.7513 1 4.0838 3 0.0263 2 0.5118 8 0.0296 2 0.0474 1 17.223 7 0.0371 6 0.4953 3 0.4906 6 5.1543 1)
Average genome size in population (length): 76.131
Average program size in population (points): 77.131
Average percent parens in population: 0.013
Minimum age in population: 93.20074187678406
Maximum age in population: 97.64856608984535
Average age in population: 95.64589380601791
Median age in population: 95.68637369599092
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.305
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 118387439
--- Timings ---
Current time: 1529615154280 milliseconds
Total Time:         270.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.9 seconds, 38.1%
Fitness Testing:    132.1 seconds, 48.9%
Report:              35.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_swap} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove float_swap float_swap integer_min integer_dup_items integer_dup_times integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_rot integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_swap integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_rot integer_max integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3114.940599999994
Median total errors in population: 863.7632000000001
Error averages by case: (99.23060149999901 8.887 133.4360770000007 11.555 62.591560400000695 10.523 129.64715839999897 10.775 140.97820670000115 9.879 110.87320000000055 9.069 119.44185489999819 10.74 99.83761259999866 9.549 122.10805040000113 10.483 87.34200799999903 9.017 138.4558152 4.078 79.63259369999903 8.565 109.22070400000112 10.64 121.62555510000135 8.164 144.05062130000155 8.819 140.77363380000122 10.524 99.70409999999916 8.246 136.88966999999835 11.488 100.11331459999889 10.065 145.47604020000045 12.115 119.94975609999939 10.814 74.77306630000083 8.703 142.66329730000086 9.691 77.68955170000065 9.734 136.18655079999826 10.127)
Error minima by case: (0.5888 2 0.5011 7 0.4863 1 1.6571 2 3.0838 3 1.5184 2 0.1794 1 2.0604 2 1.1873 2 5.1271 1 4.2684 2 0.0321 6 0.4938 2 0.0419 1 5.7513 1 4.0838 3 0.454 2 4.0657 8 0.253 2 0.4664 1 0.8921 7 0.0457 6 0.4953 3 0.3358 7 5.1543 1)
Average genome size in population (length): 76.596
Average program size in population (points): 77.596
Average percent parens in population: 0.013
Minimum age in population: 94.82657451879172
Maximum age in population: 98.9421796726083
Average age in population: 97.01600976565979
Median age in population: 97.09645370245886
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.275
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 120302339
--- Timings ---
Current time: 1529615158358 milliseconds
Total Time:         274.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.5 seconds, 38.1%
Fitness Testing:    134.1 seconds, 48.9%
Report:              35.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_min} {:instruction float_dup})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max float_dup_items integer_mult integer_stackdepth integer_mult integer_mult float_min float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3285.919890099994
Median total errors in population: 863.7632000000001
Error averages by case: (104.91194349999897 8.944 129.76349210000066 11.576 71.55959179999999 10.592 137.44313459999879 10.927 145.41002310000042 10.007 114.91961380000069 9.138 127.17881419999783 10.864 106.9093909999985 9.589 128.26717220000114 10.498 99.06910149999892 9.109 143.96395619999998 4.198 90.74239859999896 8.622 115.95401250000107 10.628 123.72334900000146 8.307 152.0999107000015 8.988 144.98139250000057 10.628 104.58109879999914 8.313 144.50078079999855 11.529 104.90454119999896 10.104 154.37275420000108 12.091 129.20403419999923 10.934 84.78143300000075 8.808 152.2579711000008 9.74 86.08320090000068 9.768 144.1417785999991 10.293)
Error minima by case: (1.1186 2 6.1379 7 0.2628 1 1.3429 2 2.0838 2 0.6082 3 0.1794 1 0.222 3 1.1873 2 5.9409 1 4.2684 2 0.209 6 0.4938 2 0.0419 1 3.7513 1 3.0838 2 0.3878 2 1.3364 8 0.253 2 0.7985 1 2.4832 7 0.0283 6 1.9023 3 1.2634 7 3.1543 1)
Average genome size in population (length): 76.844
Average program size in population (points): 77.844
Average percent parens in population: 0.013
Minimum age in population: 96.01229629551736
Maximum age in population: 100.3613251888607
Average age in population: 98.37653285179515
Median age in population: 98.40755970026741
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.275
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 122223464
--- Timings ---
Current time: 1529615162439 milliseconds
Total Time:         278.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.9 seconds, 38.1%
Fitness Testing:    136.2 seconds, 49.0%
Report:              36.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_integer} {:instruction float_mult} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (integer_pop float_sub integer_mult integer_fromfloat integer_add print_integer float_mult float_swap integer_fromfloat integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth float_yank integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2957.0310634999937
Median total errors in population: 863.7632000000001
Error averages by case: (94.90292239999954 8.964 115.75307040000074 11.573 62.209975000000725 10.73 117.30280989999947 10.914 125.48909320000186 9.913 104.12987970000063 9.143 107.24711779999883 10.845 98.38087059999903 9.636 121.99623380000124 10.513 88.41492659999909 9.216 136.7590187000001 4.078 79.74629389999916 8.533 104.51379310000112 10.681 107.03686900000146 8.185 129.4220258000016 8.935 124.99154460000192 10.545 95.04975819999977 8.288 123.37326679999897 11.522 94.27630459999892 10.201 145.71137050000004 12.401 121.90647529999927 10.878 75.12287200000067 8.684 137.1466994000009 9.706 78.40748660000061 9.738 123.71738559999852 10.201)
Error minima by case: (0.9073 2 5.1379 9 0.6604 1 1.3429 2 0.0838 3 3.5825 3 0.8206 1 2.0604 3 1.1873 2 9.9148 2 3.2684 2 0.1898 6 0.6988 2 0.0419 1 8.7513 2 0.0838 3 0.454 2 0.5118 8 0.253 2 0.8147 1 17.223 7 0.2286 7 1.2344 3 1.2634 7 8.1543 1)
Average genome size in population (length): 76.632
Average program size in population (points): 77.632
Average percent parens in population: 0.013
Minimum age in population: 97.33167827411557
Maximum age in population: 101.9177586684344
Average age in population: 99.73372885630977
Median age in population: 99.76811565465451
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.287
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 124139264
--- Timings ---
Current time: 1529615166593 milliseconds
Total Time:         282.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.5 seconds, 38.1%
Fitness Testing:    138.2 seconds, 48.9%
Report:              36.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction float_shove} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_min} {:instruction float_dup})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_mult float_shove in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max integer_mult integer_sub integer_stackdepth integer_mult float_min float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3225.805188299994
Median total errors in population: 863.7632000000001
Error averages by case: (101.57128229999891 8.942 132.07487880000056 11.587 66.29643060000078 10.618 138.2270017999989 10.815 143.13140080000093 9.924 114.98393070000064 9.108 128.0334556999981 10.709 102.61276199999851 9.599 123.88400320000122 10.566 92.73638769999899 9.13 139.74309490000005 4.099 86.37470069999915 8.651 113.68361540000105 10.698 123.3555012000013 8.221 153.62961840000142 8.97 142.98805840000108 10.55 102.30237239999899 8.304 146.73204659999857 11.559 105.40768969999894 10.175 151.23843400000035 12.155 123.7770018999992 10.917 80.20324450000085 8.82 141.65075700000082 9.667 82.86795230000072 9.781 144.5725672999987 10.162)
Error minima by case: (1.1186 2 6.1379 7 0.0985 1 2.6571 1 3.0838 3 0.6082 2 0.1794 1 2.0604 3 1.1873 2 7.1271 2 0.7552 1 0.1606 6 0.4938 1 0.0419 1 4.7513 1 4.0838 3 0.3567 2 6.6114 8 0.253 2 3.0 1 17.223 7 0.2286 7 0.4953 3 0.9386 7 4.1543 1)
Average genome size in population (length): 76.38
Average program size in population (points): 77.38
Average percent parens in population: 0.013
Minimum age in population: 98.49098300306692
Maximum age in population: 103.2698656468447
Average age in population: 101.1649786297526
Median age in population: 101.2335967365584
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.299
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 126048764
--- Timings ---
Current time: 1529615170610 milliseconds
Total Time:         286.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.0 seconds, 38.0%
Fitness Testing:    140.2 seconds, 49.0%
Report:              37.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_div} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction tag_integer_494} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult float_shove float_tan integer_fromfloat float_frominteger float_dup_times float_mult float_mult integer_mult integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_div integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec tag_integer_494 float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_dup_items float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank float_dec integer_shove float_rot integer_mult integer_stackdepth integer_yank integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2900.1408181999946
Median total errors in population: 863.7632000000001
Error averages by case: (91.64727069999918 8.87 112.27819540000071 11.536 59.43039840000076 10.588 115.32308839999925 10.728 122.72414400000183 9.808 99.42808740000058 9.061 104.40112299999862 10.708 95.1343320999987 9.511 119.57588920000104 10.472 89.0959259999991 9.145 134.06904659999998 4.104 81.74640989999911 8.524 97.08671150000093 10.512 102.05596050000136 8.138 131.76436960000163 8.765 122.57216890000191 10.441 88.29184299999964 8.191 124.18887709999883 11.477 90.48945139999903 10.075 149.04018970000007 12.177 118.86571489999946 10.833 75.71615460000078 8.703 133.91308130000087 9.591 77.53896690000064 9.679 122.10641769999839 10.02)
Error minima by case: (1.1186 2 1.5711 7 0.0985 1 2.0838 1 1.9162 2 0.6082 3 0.1794 1 2.0604 2 1.1873 2 6.0727 1 2.2684 2 0.0948 6 0.4938 2 0.0419 1 3.7513 1 0.9162 2 0.454 2 4.6421 8 0.253 2 1.1878 1 17.223 9 0.0457 6 0.4897 3 0.3358 7 3.0838 1)
Average genome size in population (length): 76.099
Average program size in population (points): 77.099
Average percent parens in population: 0.013
Minimum age in population: 99.49098300306692
Maximum age in population: 104.7307241861028
Average age in population: 102.5115011025584
Median age in population: 102.5755970649959
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.277
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 127951239
--- Timings ---
Current time: 1529615174910 milliseconds
Total Time:         290.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.7 seconds, 38.1%
Fitness Testing:    142.2 seconds, 48.9%
Report:              37.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_shove} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_swap integer_min float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult float_shove integer_mult integer_yank print_integer float_mult integer_mult integer_fromfloat integer_yank float_rot integer_shove in1 17 in2 integer_mult float_dup_items integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max integer_sub integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3020.625798599995
Median total errors in population: 863.7632000000001
Error averages by case: (88.69627009999941 8.957 124.00129150000069 11.557 63.75796250000067 10.655 128.944860899999 10.897 134.26913110000186 9.984 96.8220729000006 9.126 118.02029659999823 10.859 93.5144096999989 9.679 122.19504450000119 10.521 90.67653119999903 9.023 138.14116439999995 4.067 82.86485439999896 8.55 96.18588370000107 10.778 115.97965560000154 8.225 140.79020980000175 8.908 133.92887510000193 10.647 86.74300939999982 8.256 134.00232159999862 11.519 87.46517879999884 10.23 148.70661320000062 12.255 121.34860279999944 10.889 77.95531110000094 8.657 134.91698910000082 9.766 81.24772700000072 9.742 135.46753159999827 10.237)
Error minima by case: (0.1186 2 5.1379 7 0.2628 1 1.3429 1 3.0838 3 1.5184 3 0.1794 1 2.0604 2 0.1873 2 5.8729 2 0.2448 2 0.0948 6 0.4938 2 0.0419 1 1.7094 1 4.0838 3 0.454 2 0.4676 8 0.253 2 0.8147 1 16.223 7 0.0371 6 0.0977 3 0.5094 6 1.1124 1)
Average genome size in population (length): 75.921
Average program size in population (points): 76.921
Average percent parens in population: 0.013
Minimum age in population: 101.3248067321473
Maximum age in population: 106.2708428621562
Average age in population: 103.8944717195785
Median age in population: 103.9579345401469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.285
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 129849289
--- Timings ---
Current time: 1529615179297 milliseconds
Total Time:         295.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.3 seconds, 38.0%
Fitness Testing:    144.5 seconds, 49.0%
Report:              38.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yank} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_yank float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 float_rot float_dup_times integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3028.786257799992
Median total errors in population: 863.7632000000001
Error averages by case: (94.37312079999933 8.888 122.34430370000071 11.604 63.58436650000057 10.67 125.58362939999944 10.89 135.43863800000142 10.02 103.47230060000054 9.106 114.95134869999873 10.8 96.95325869999897 9.533 121.870144300001 10.557 89.97023179999908 9.227 136.41406360000002 4.222 81.08399119999923 8.621 103.59860950000088 10.586 115.01455940000133 8.32 137.73650540000153 8.974 135.21286760000157 10.606 92.86337819999963 8.222 132.70669409999897 11.555 92.99663209999913 10.071 144.47281619999995 12.323 120.97296929999952 10.912 77.77768660000069 8.807 133.71791070000077 9.646 80.02486250000048 9.754 131.56936889999838 10.168)
Error minima by case: (0.9624 2 0.5753 7 0.0985 1 0.0838 2 0.0838 3 3.5825 3 0.1794 1 2.0604 3 1.1873 2 5.5942 1 0.2448 1 0.0735 6 0.4938 2 0.0419 1 9.7513 1 1.0838 2 0.454 2 0.3652 9 0.253 2 2.0 2 7.8189 8 0.2929 6 0.4953 3 1.4402 7 1.0838 1)
Average genome size in population (length): 75.663
Average program size in population (points): 76.663
Average percent parens in population: 0.013
Minimum age in population: 103.1604325329241
Maximum age in population: 107.6153681532316
Average age in population: 105.3080943114077
Median age in population: 105.3509733599276
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.303
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 131740864
--- Timings ---
Current time: 1529615183347 milliseconds
Total Time:         299.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.8 seconds, 38.0%
Fitness Testing:    146.5 seconds, 49.0%
Report:              38.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_add} {:instruction float_swap} {:instruction integer_min} {:instruction float_pop} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_shove} {:instruction tagged_931} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth})
Best program: (float_swap integer_add float_swap integer_min float_pop float_shove integer_mult integer_fromfloat integer_dup_items print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_yank integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_shove tagged_931 integer_swap float_yank float_dec integer_max float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2947.258217599993
Median total errors in population: 863.7632000000001
Error averages by case: (95.07227889999926 8.995 108.5949915000007 11.481 62.02178480000063 10.651 117.30860419999917 10.804 122.6554698000019 9.861 108.0494580000006 9.165 105.64050179999825 10.779 96.70603469999878 9.618 119.48843370000111 10.489 88.50419569999902 9.155 137.15852700000008 4.326 81.06184499999904 8.509 106.01592730000115 10.682 101.57388000000132 8.159 131.6392294000018 8.854 122.53023530000195 10.49 95.50203239999942 8.311 124.38904849999876 11.456 96.03883659999883 10.167 148.69534910000056 12.215 118.97718089999941 10.819 75.84755760000097 8.708 137.6556620000008 9.774 78.86206030000078 9.669 123.97909309999818 10.153)
Error minima by case: (1.1186 2 1.5711 8 0.0985 1 1.7369 1 3.0838 2 0.6082 3 0.1794 1 2.0604 2 1.1873 2 6.1271 1 4.2684 2 0.0028 6 0.4938 2 0.0419 1 4.7513 2 4.0838 2 0.3303 2 0.4676 9 0.253 2 0.2791 1 17.223 6 0.0457 6 1.9023 3 0.4487 7 4.1543 1)
Average genome size in population (length): 75.926
Average program size in population (points): 76.926
Average percent parens in population: 0.013
Minimum age in population: 104.4634868040586
Maximum age in population: 108.6005967815954
Average age in population: 106.7432707356465
Median age in population: 106.7842570211043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.281
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 133639014
--- Timings ---
Current time: 1529615187395 milliseconds
Total Time:         303.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.3 seconds, 38.0%
Fitness Testing:    148.5 seconds, 49.0%
Report:              39.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction print_float} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat integer_mult print_float integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3406.268670699993
Median total errors in population: 863.7632000000001
Error averages by case: (108.89219269999913 8.887 132.90797690000065 11.628 81.96943840000006 10.645 140.64987149999914 10.866 143.38901630000075 9.956 119.3236402000006 9.092 129.3953055999985 10.768 111.95615759999858 9.597 133.88479250000108 10.548 110.16328499999892 9.237 148.52314090000002 4.256 101.64845959999917 8.613 119.43629100000102 10.563 122.5305075000014 8.27 153.08576120000149 8.962 142.49605680000082 10.594 108.22477829999931 8.221 147.78134059999886 11.582 108.64184739999905 10.049 165.89483840000094 12.238 138.04717259999984 10.893 96.32598960000082 8.83 151.5390227000008 9.668 97.81245950000053 9.773 147.85932789999907 10.154)
Error minima by case: (1.1186 2 2.9018 8 0.13 1 1.7369 2 2.0838 3 0.6082 3 0.1794 1 1.727 2 1.1873 7 3.2799 2 4.2684 1 0.0502 6 0.4938 2 0.0419 1 6.362 2 3.0838 2 0.3284 2 1.3364 8 0.1242 2 0.4806 1 17.223 7 0.1029 7 0.4953 2 0.3358 6 6.959 1)
Average genome size in population (length): 75.689
Average program size in population (points): 76.689
Average percent parens in population: 0.013
Minimum age in population: 105.5772176093186
Maximum age in population: 109.9589956676322
Average age in population: 108.101591039559
Median age in population: 108.1449188877368
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.28
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 135531239
--- Timings ---
Current time: 1529615191385 milliseconds
Total Time:         307.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.8 seconds, 38.0%
Fitness Testing:    150.5 seconds, 49.0%
Report:              39.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_shove} {:instruction tag_integer_359} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_dup_times} {:instruction integer_max})
Best program: (float_swap float_shove integer_rot float_shove integer_mult integer_fromfloat float_dup float_shove tag_integer_359 integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_dec in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_dup_times integer_max)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3144.6638599999947
Median total errors in population: 863.7632000000001
Error averages by case: (99.11290219999948 9.051 121.63821150000076 11.554 75.52565610000013 10.67 129.59919489999953 10.852 130.7180430000018 9.904 106.16272490000043 9.197 119.30500349999865 10.786 103.11373919999902 9.691 131.4835203000009 10.5 96.41034969999914 9.19 148.26165969999997 4.226 85.51677939999927 8.549 107.17473750000107 10.76 111.93594830000148 8.215 141.53332240000145 8.923 130.35683160000184 10.549 96.72746559999977 8.312 134.41618699999933 11.544 97.45026279999904 10.234 147.59169130000032 12.278 132.13178519999957 10.868 82.59929670000045 8.779 147.3325185000008 9.804 88.32579430000042 9.749 135.90323439999906 10.152)
Error minima by case: (0.4827 2 5.1379 7 0.386 1 0.0307 1 3.0838 2 0.6082 3 0.8206 1 1.6203 2 1.1873 2 0.6757 1 3.1794 2 0.209 5 0.4938 2 0.0419 1 5.7513 1 4.0838 2 0.4236 2 0.3652 9 0.253 2 1.2403 1 17.223 8 0.0457 6 1.9023 3 1.2634 7 5.1543 1)
Average genome size in population (length): 76.325
Average program size in population (points): 77.325
Average percent parens in population: 0.013
Minimum age in population: 106.8835905153215
Maximum age in population: 111.4145553332631
Average age in population: 109.4662996541155
Median age in population: 109.5098348001239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.276
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 137439364
--- Timings ---
Current time: 1529615195592 milliseconds
Total Time:         311.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.4 seconds, 38.0%
Fitness Testing:    152.7 seconds, 49.0%
Report:              40.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_add} {:instruction float_swap} {:instruction integer_min} {:instruction float_pop} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_shove} {:instruction tagged_931} {:instruction float_frominteger} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_stackdepth})
Best program: (float_swap integer_add float_swap integer_min float_pop float_shove integer_mult integer_fromfloat integer_dup_items print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_yank integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_shove tagged_931 float_frominteger float_yank float_dec integer_max float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth float_rot integer_stackdepth)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2963.9887378999947
Median total errors in population: 863.7632000000001
Error averages by case: (92.31823829999917 8.937 121.72594440000074 11.485 58.45061020000068 10.557 124.59002559999904 10.905 131.24624080000171 9.871 103.15268490000051 9.135 114.21335999999863 10.813 95.26908079999873 9.638 118.10917830000115 10.437 83.4493069999991 9.101 135.0094504 4.011 74.57578109999906 8.468 103.74440020000111 10.747 111.21925050000144 8.174 137.6447330000015 8.936 130.91187520000182 10.511 93.28855769999932 8.265 131.44596529999868 11.418 92.496937899999 10.197 135.67021029999975 12.165 117.61636239999925 10.797 70.59843690000083 8.668 138.9341735000008 9.731 74.55978520000058 9.617 130.9911479999982 10.173)
Error minima by case: (0.1186 2 3.8283 7 0.0985 1 0.3429 1 3.0838 3 1.5184 2 0.0809 1 2.0604 2 1.1873 2 4.8778 1 2.2684 2 0.209 6 1.9259 1 0.0419 1 4.7513 2 4.0838 2 0.454 2 0.5118 8 0.253 2 0.5489 1 17.223 9 0.0457 6 0.4953 2 1.2634 7 4.1543 1)
Average genome size in population (length): 75.968
Average program size in population (points): 76.968
Average percent parens in population: 0.013
Minimum age in population: 108.2525022631306
Maximum age in population: 112.663632489632
Average age in population: 110.8262727614981
Median age in population: 110.8753403909991
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.29
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 139338564
--- Timings ---
Current time: 1529615199600 milliseconds
Total Time:         315.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.9 seconds, 38.0%
Fitness Testing:    154.7 seconds, 49.1%
Report:              40.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_dec} {:instruction integer_min} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction float_div} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop})
Best program: (float_swap integer_dec integer_min float_rot float_frominteger float_dup_times float_mult float_mult integer_mult float_yank integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 integer_dup float_dec integer_dup integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 float_div integer_dup_times integer_max float_pop)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3266.2763009999944
Median total errors in population: 863.7632000000001
Error averages by case: (105.85802459999859 9.098 133.40437960000077 11.598 79.05820090000024 10.66 132.48468059999874 10.847 140.15851040000146 9.931 112.69033010000066 9.303 122.73618409999774 10.815 110.11986929999802 9.789 137.33645990000159 10.535 97.59125909999896 9.17 151.7137881 4.324 87.11521159999897 8.528 113.84139110000126 10.776 121.81005820000168 8.299 143.63107950000162 8.892 139.79084580000153 10.601 103.07889099999863 8.422 137.76972639999846 11.555 103.95096269999877 10.328 148.31904750000012 12.266 134.726113399999 10.884 84.61935550000094 8.743 150.17243740000086 9.894 90.60322470000085 9.739 138.5732694999983 10.126)
Error minima by case: (1.1186 2 5.1379 8 0.0985 1 1.7369 1 3.0838 2 1.5184 2 0.1794 1 1.6203 2 1.1873 2 5.9409 1 3.2684 1 0.1333 6 0.4938 2 0.0419 1 0.658 1 4.0838 3 0.454 2 3.0419 9 0.253 2 1.5582 1 3.8189 8 0.2934 7 0.4953 2 0.1111 7 3.1543 1)
Average genome size in population (length): 75.512
Average program size in population (points): 76.512
Average percent parens in population: 0.013
Minimum age in population: 109.7206052795
Maximum age in population: 114.3141027885612
Average age in population: 112.2344257873903
Median age in population: 112.3138637306358
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.279
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 141226389
--- Timings ---
Current time: 1529615203853 milliseconds
Total Time:         319.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.3 seconds, 38.0%
Fitness Testing:    157.0 seconds, 49.1%
Report:              41.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 51298.49710000012
Test mean error for best: 25.64925
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yank} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_mult} {:instruction integer_shove} {:instruction float_swap} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_rot} {:instruction print_integer} {:instruction in1} {:instruction float_sub} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_dec} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank})
Best program: (float_swap float_yank float_shove integer_mult integer_fromfloat integer_yank float_rot float_mult integer_shove float_swap float_yankdup integer_fromfloat integer_yank float_rot float_shove integer_yank print_integer float_mult integer_mult float_shove integer_mult float_yankdup integer_yank float_rot print_integer in1 float_sub in2 integer_mult float_dup_items integer_dup integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_dec float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3240.6336007999926
Median total errors in population: 863.7632000000001
Error averages by case: (107.40272749999903 9.172 122.58771960000077 11.535 75.73979220000025 10.683 127.789820499999 10.955 135.20576020000152 10.029 115.89825280000055 9.326 116.44734609999823 10.913 110.74057889999857 9.836 132.7149654000011 10.513 100.35710859999901 9.221 146.83306070000006 4.234 92.69458649999912 8.564 117.23597720000112 10.871 115.7862407000013 8.304 142.14040590000155 8.977 134.94630980000161 10.661 106.20360529999915 8.469 135.0580470999985 11.504 105.870395299999 10.375 154.65352530000047 12.283 133.00963659999945 10.849 88.21527920000078 8.746 151.15849510000092 9.964 91.57212330000061 9.712 134.44884099999828 10.227)
Error minima by case: (0.1186 2 1.5711 7 0.0985 1 2.5245 1 1.8639 2 0.5184 2 0.1794 1 1.5258 2 1.1873 2 9.1271 1 2.2684 1 0.1393 6 0.4938 1 0.0419 1 11.362 1 2.8639 2 0.454 2 2.3063 8 0.017 2 0.0388 1 17.223 8 0.0457 6 1.9023 1 0.4487 6 2.2288 1)
Average genome size in population (length): 75.531
Average program size in population (points): 76.531
Average percent parens in population: 0.013
Minimum age in population: 111.0856028665934
Maximum age in population: 115.5714629426591
Average age in population: 113.6506243549768
Median age in population: 113.7028119469939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.278
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 143114664
--- Timings ---
Current time: 1529615207838 milliseconds
Total Time:         323.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.8 seconds, 37.9%
Fitness Testing:    159.0 seconds, 49.1%
Report:              41.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_div} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_mod} {:instruction float_dup})
Best program: (float_swap integer_div integer_min integer_dup_items float_shove integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult float_dup_items integer_mult float_mod float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2889.2705996999925
Median total errors in population: 863.7632000000001
Error averages by case: (95.24737859999925 8.79 102.15158640000064 11.504 61.18222740000064 10.603 111.3609221999995 10.82 120.45524140000168 9.888 104.91833410000059 8.978 100.91799949999894 10.755 98.13196639999889 9.461 117.9064763000011 10.478 87.38965539999913 9.116 134.2323636 4.095 80.78759429999931 8.605 105.51175250000101 10.499 97.66095270000126 8.192 127.61010810000154 8.908 120.68823370000179 10.498 94.02584969999951 8.132 119.28656369999898 11.461 95.37276389999892 9.978 144.96220319999998 12.169 117.79180849999918 10.865 75.22848940000075 8.764 137.8816289000009 9.551 77.72107020000055 9.767 118.75942959999868 10.211)
Error minima by case: (1.1186 2 2.5711 9 0.0985 1 0.6571 1 3.0838 3 0.6082 3 0.0041 1 0.6846 2 1.1873 2 2.9449 2 2.2684 1 0.1385 6 0.4938 1 0.0419 1 4.7513 1 4.0838 2 0.546 2 2.6411 9 0.1151 2 0.5677 1 17.223 8 0.0457 6 0.4953 2 0.5094 6 4.1543 1)
Average genome size in population (length): 75.181
Average program size in population (points): 76.181
Average percent parens in population: 0.013
Minimum age in population: 112.0856028665934
Maximum age in population: 116.9200016837979
Average age in population: 115.0436105726957
Median age in population: 115.0945679179397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.298
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 144994189
--- Timings ---
Current time: 1529615211828 milliseconds
Total Time:         327.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.3 seconds, 37.9%
Fitness Testing:    161.0 seconds, 49.1%
Report:              42.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_rot} {:instruction float_swap} {:instruction float_shove} {:instruction integer_shove} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth})
Best program: (float_swap float_shove integer_rot float_swap float_shove integer_shove float_shove integer_dup_items float_shove integer_mult integer_fromfloat integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_yankdup in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times float_shove float_sub integer_swap integer_dup_items integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_sub print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth integer_mult integer_stackdepth)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3013.363354999993
Median total errors in population: 863.7632000000001
Error averages by case: (97.42249029999886 8.969 113.07582550000065 11.546 63.6066437000007 10.562 123.48369929999912 10.787 125.36236310000187 9.86 110.34215510000062 9.158 112.8308809999982 10.703 98.60736689999865 9.602 121.257075400001 10.439 88.54575699999916 9.127 139.06783569999996 4.152 81.62996039999909 8.51 108.75696030000117 10.638 104.87062790000141 8.141 138.04334850000177 8.855 125.05217370000197 10.475 98.07036499999903 8.306 130.02161879999872 11.499 98.90007729999886 10.18 144.9727239000003 12.137 121.02964379999932 10.807 76.68508730000084 8.726 139.35258880000092 9.747 79.16433910000075 9.653 130.52974719999813 10.103)
Error minima by case: (1.1186 2 5.9574 8 0.0985 1 1.6571 1 3.0838 2 1.5184 2 0.1794 1 1.0604 2 1.1873 7 5.8778 2 4.2684 2 0.0146 6 0.4938 2 0.0419 1 5.7513 1 4.0838 2 0.454 2 2.8055 8 0.1151 2 2.2332 1 1.3958 8 0.0457 6 0.4953 3 0.4487 6 5.1543 1)
Average genome size in population (length): 74.659
Average program size in population (points): 75.659
Average percent parens in population: 0.013
Minimum age in population: 113.6190716031928
Maximum age in population: 118.5040481968757
Average age in population: 116.4842100174662
Median age in population: 116.5224357141342
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.276
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 146860664
--- Timings ---
Current time: 1529615215834 milliseconds
Total Time:         331.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.8 seconds, 37.9%
Fitness Testing:    163.0 seconds, 49.2%
Report:              42.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_rot} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove float_frominteger integer_fromfloat integer_yank print_integer integer_rot print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank integer_mult integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap integer_dup integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3125.6501787999923
Median total errors in population: 863.7632000000001
Error averages by case: (104.28766389999899 8.899 111.16995270000066 11.538 78.95054419999992 10.564 113.25464179999935 10.726 122.59013780000177 9.948 113.2693736000005 9.121 104.00887799999849 10.638 110.80801289999854 9.572 135.47096690000112 10.45 103.83249239999901 9.143 149.03023770000016 4.316 96.57186389999916 8.65 112.00689850000116 10.545 101.83140350000136 8.281 125.42924500000144 8.866 122.51136450000178 10.563 102.5981533999991 8.292 120.41499299999889 11.536 102.83588499999888 10.072 155.26195570000084 12.081 136.73548959999957 10.901 92.50952320000084 8.852 150.91303680000087 9.668 96.52969700000058 9.85 119.69076779999851 10.065)
Error minima by case: (1.1186 2 4.5723 8 0.0985 1 0.3429 1 1.0838 2 0.5184 2 0.1794 1 0.2488 2 1.1873 2 1.5049 1 3.2684 2 0.1498 6 0.3992 1 0.0419 1 3.7513 2 2.0838 2 0.454 2 4.4448 8 0.253 2 0.0388 1 17.223 8 0.0457 6 1.9023 3 0.8818 7 2.8074 1)
Average genome size in population (length): 74.701
Average program size in population (points): 75.701
Average percent parens in population: 0.013
Minimum age in population: 115.4091698337501
Maximum age in population: 119.6596199960542
Average age in population: 117.8635686548247
Median age in population: 117.8937777742071
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.301
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 148728189
--- Timings ---
Current time: 1529615219696 milliseconds
Total Time:         335.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.2 seconds, 37.9%
Fitness Testing:    165.0 seconds, 49.2%
Report:              43.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction in1} {:instruction 16} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction 41.15518667359108} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_shove integer_mult float_shove integer_mult integer_fromfloat float_dup integer_yank integer_shove float_mult integer_mult float_mult integer_mult float_shove integer_mult integer_fromfloat float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub integer_fromfloat integer_mult print_integer float_mult integer_mult float_shove in1 16 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_max integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 41.15518667359108 integer_pop integer_dup_times integer_max print_integer integer_mult integer_stackdepth integer_mult integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2730.615187199994
Median total errors in population: 864.7632000000001
Error averages by case: (86.58299799999921 8.76 102.65853010000056 11.491 54.17753530000051 10.654 106.80566979999962 10.739 113.29948020000158 9.772 98.84323030000044 8.944 96.49542789999887 10.665 91.26970889999892 9.381 114.21804360000084 10.456 77.52088759999911 9.174 129.65425640000004 4.043 69.78054409999935 8.446 98.77929680000078 10.464 92.71696240000101 8.079 120.41321920000163 8.799 113.44239030000169 10.392 87.79614259999934 8.143 115.13612959999897 11.45 87.22965689999914 9.882 135.55435689999968 12.165 112.91525289999949 10.797 66.0090282000005 8.722 135.8728926000008 9.509 68.9072644000004 9.645 113.88028219999872 10.084)
Error minima by case: (0.5888 2 0.2514 7 0.0635 1 0.3429 1 3.0838 2 0.1094 2 0.1794 1 2.0604 2 1.1873 2 4.9409 2 2.2684 1 0.1041 6 0.4938 1 0.0419 1 7.7513 1 4.0838 2 0.454 2 1.6042 8 0.253 2 1.4756 1 5.8745 8 0.0457 6 0.4953 3 0.4906 7 7.1543 1)
Average genome size in population (length): 74.709
Average program size in population (points): 75.709
Average percent parens in population: 0.013
Minimum age in population: 116.5649736205999
Maximum age in population: 121.2574188668128
Average age in population: 119.2121424516991
Median age in population: 119.2215936617937
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.283
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 150595939
--- Timings ---
Current time: 1529615223899 milliseconds
Total Time:         339.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.7 seconds, 37.9%
Fitness Testing:    167.1 seconds, 49.2%
Report:              43.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction float_shove} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_shove} {:instruction integer_mod} {:instruction in1} {:instruction 18} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.15518667359108} {:instruction float_div} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop})
Best program: (float_swap float_swap integer_min integer_dup_items float_shove integer_mult integer_fromfloat integer_yank integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_mult float_shove float_tan integer_fromfloat float_frominteger float_dup_times float_mult float_mult integer_mult float_yank integer_mult integer_fromfloat integer_yank float_shove integer_mod in1 18 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_yankdup float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.15518667359108 float_div integer_dup_times integer_max float_pop)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3183.228638499994
Median total errors in population: 864.7632000000001
Error averages by case: (102.13439899999905 8.815 127.2009527000007 11.535 71.2972638 10.54 133.25592029999947 10.762 132.4077174000016 9.821 108.35445730000049 9.076 123.13553299999857 10.713 107.14696879999875 9.49 124.86689700000078 10.459 98.0175340999991 9.179 141.01793059999997 4.239 89.97656249999923 8.572 110.08337520000086 10.451 110.56413460000107 8.133 146.89632990000143 8.858 132.21434190000164 10.442 99.60674239999935 8.178 140.19328469999914 11.485 99.25722119999926 9.981 154.34603460000076 12.113 128.93064199999955 10.809 85.20325440000065 8.775 147.81332890000067 9.644 87.41551640000043 9.733 140.00429579999928 10.085)
Error minima by case: (0.1186 2 1.3981 8 0.2656 1 0.6571 1 3.0838 2 0.6082 3 0.1794 1 1.3188 2 1.1873 2 6.1271 1 4.2684 2 0.0742 6 0.4938 2 0.0419 1 5.7513 1 4.0838 2 0.1291 2 0.8626 8 0.253 2 0.4664 1 9.4266 7 0.0457 6 0.4953 3 0.4906 6 5.1543 1)
Average genome size in population (length): 74.156
Average program size in population (points): 75.156
Average percent parens in population: 0.013
Minimum age in population: 118.0284027200711
Maximum age in population: 122.4241018102448
Average age in population: 120.5781601196957
Median age in population: 120.6289423720626
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.3
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 152449839
--- Timings ---
Current time: 1529615227910 milliseconds
Total Time:         343.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.2 seconds, 37.9%
Fitness Testing:    169.1 seconds, 49.2%
Report:              44.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction tag_float_705} {:instruction integer_mult} {:instruction print_float} {:instruction float_dup} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction tag_integer_385} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_swap float_shove integer_mult tag_float_705 integer_mult print_float float_dup integer_yank print_integer float_mult float_frominteger float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items float_dup_items 17.041899137023094 float_inc integer_flush integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec float_dec integer_dup float_dec float_stackdepth float_rot float_div tag_integer_385 float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_stackdepth float_dup)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3024.3332449999943
Median total errors in population: 863.7632000000001
Error averages by case: (102.38394259999887 9.007 111.27395810000077 11.55 71.77069140000043 10.717 111.97600439999918 10.941 115.68435550000183 9.904 108.85762600000058 9.221 102.43241719999824 10.88 106.47616759999822 9.716 129.8944728000013 10.489 96.474182999999 9.153 144.85703819999998 4.029 88.24795179999909 8.46 113.13001440000114 10.828 97.27373880000145 8.203 126.95348880000154 8.897 115.46787890000188 10.584 99.43784939999914 8.325 118.40038759999894 11.508 99.13621069999887 10.293 154.28409790000046 12.372 128.7538212999991 10.839 83.29824890000089 8.665 148.61873930000073 9.784 86.05064520000086 9.687 118.92231519999824 10.225)
Error minima by case: (1.1186 2 5.1379 8 0.0985 1 0.3429 1 2.0838 3 0.6082 2 0.1794 1 0.7512 1 1.1873 2 7.1271 2 4.2684 2 0.0177 6 0.6988 1 0.0419 1 3.7513 1 3.0838 2 0.454 2 0.8626 8 0.0726 2 2.0 1 7.8189 8 0.0457 6 0.4953 2 0.4794 6 3.1543 1)
Average genome size in population (length): 73.709
Average program size in population (points): 74.709
Average percent parens in population: 0.014
Minimum age in population: 119.5803369083909
Maximum age in population: 123.910197674897
Average age in population: 121.9214423626545
Median age in population: 121.9559712588344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.259
Error (vector) diversity:			 0.266
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 154292564
--- Timings ---
Current time: 1529615232258 milliseconds
Total Time:         348.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.8 seconds, 37.9%
Fitness Testing:    171.4 seconds, 49.2%
Report:              44.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_542} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction float_min} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_max} {:instruction float_pop})
Best program: (tag_float_542 float_shove integer_mult integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult float_min integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_min integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_pop float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_max float_pop)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2873.3783117999947
Median total errors in population: 863.7632000000001
Error averages by case: (98.31073389999901 8.863 93.59238480000067 11.503 64.73473960000071 10.534 97.80318089999966 10.652 114.5208530000018 9.815 108.37156010000052 9.072 87.61465959999919 10.601 100.2418943999988 9.473 123.1753966000012 10.396 94.5748594999991 9.067 140.50736289999992 4.047 87.92811159999907 8.458 109.09812750000107 10.58 93.88397770000135 8.112 112.95259930000152 8.702 114.25562710000183 10.46 98.09080059999927 8.209 106.43255869999908 11.468 97.69826369999886 10.039 150.21138090000025 12.107 124.13640079999931 10.768 83.03819450000083 8.664 142.45099100000084 9.606 83.36087690000056 9.651 105.58477619999866 9.961)
Error minima by case: (0.5888 2 0.5149 8 0.1966 1 2.6571 1 4.0838 2 0.6082 3 0.8206 1 1.7512 2 1.1873 2 6.1271 2 4.2684 1 0.1606 6 0.4938 2 0.0419 1 1.2183 1 5.0838 3 0.1291 2 0.4676 8 0.253 2 0.7985 1 17.223 8 0.01 6 0.9023 2 0.3269 7 1.8153 1)
Average genome size in population (length): 73.061
Average program size in population (points): 74.061
Average percent parens in population: 0.014
Minimum age in population: 120.5803369083909
Maximum age in population: 125.6777485739545
Average age in population: 123.2993629179193
Median age in population: 123.3314931324762
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.267
Error (vector) diversity:			 0.271
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 156119089
--- Timings ---
Current time: 1529615236207 milliseconds
Total Time:         352.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.2 seconds, 37.8%
Fitness Testing:    173.3 seconds, 49.2%
Report:              45.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_rot} {:instruction print_integer} {:instruction float_mult} {:instruction float_mod} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_shove} {:instruction tagged_931} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.22686982484308} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer})
Best program: (float_swap float_swap integer_min integer_rot integer_mult integer_fromfloat integer_yank print_integer integer_rot print_integer float_mult float_mod float_shove integer_mult float_shove integer_mult integer_fromfloat float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times float_sub integer_shove tagged_931 integer_swap float_yank float_dec integer_max float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.22686982484308 integer_pop integer_dup_times integer_max print_integer)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3013.320576099995
Median total errors in population: 863.7632000000001
Error averages by case: (109.10832699999892 8.919 107.41981650000069 11.555 66.76388370000052 10.617 105.53958699999963 10.759 116.45330490000177 9.787 122.1739444000005 9.117 95.72248009999893 10.752 107.20127119999871 9.539 129.43337650000117 10.476 92.34068519999906 9.133 145.2519604000001 4.216 87.09337909999911 8.576 120.78953140000108 10.622 98.03040500000134 8.105 119.7967828000015 8.851 116.08713050000182 10.463 110.01632679999904 8.273 114.54661889999906 11.523 110.82986899999891 10.102 147.2181118000002 12.177 127.60585189999932 10.842 80.92295160000083 8.765 145.7955781000008 9.629 82.42856190000062 9.77 112.09784039999872 10.085)
Error minima by case: (1.1186 2 6.1379 8 0.0985 1 4.3429 1 0.0838 2 0.6082 2 0.1794 1 1.7512 2 1.1873 7 2.6115 1 2.2684 1 0.1498 6 0.4938 1 0.0419 1 8.9162 1 1.0838 2 0.1291 2 1.2489 8 0.253 2 0.0388 1 4.7082 8 0.01 6 0.4953 3 0.5094 6 6.9581 1)
Average genome size in population (length): 72.868
Average program size in population (points): 73.868
Average percent parens in population: 0.014
Minimum age in population: 121.5803369083909
Maximum age in population: 126.9523030499616
Average age in population: 124.7070096774654
Median age in population: 124.7213905066678
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.288
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 157940789
--- Timings ---
Current time: 1529615240367 milliseconds
Total Time:         356.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.9 seconds, 37.9%
Fitness Testing:    175.3 seconds, 49.2%
Report:              45.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_rot} {:instruction print_integer} {:instruction float_mult} {:instruction float_mod} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_shove} {:instruction tagged_931} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 41.22686982484308} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_max} {:instruction print_integer})
Best program: (float_swap float_swap integer_min integer_rot integer_mult integer_fromfloat integer_yank print_integer integer_rot print_integer float_mult float_mod float_shove integer_mult float_shove integer_mult integer_fromfloat float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times float_sub integer_shove tagged_931 integer_swap float_yank float_dec integer_max float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 41.22686982484308 integer_pop integer_dup_times integer_max print_integer)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2901.852405299994
Median total errors in population: 863.7632000000001
Error averages by case: (93.27016939999928 8.936 100.27951940000071 11.512 66.56381340000071 10.673 106.50685379999946 10.858 113.89042810000191 9.9 101.74212960000064 9.124 96.0399897999989 10.778 96.96730269999884 9.616 129.2918609000012 10.448 94.15418779999902 9.144 142.00239009999996 4.132 88.23593599999896 8.455 101.49540540000118 10.68 93.23729330000137 8.182 120.83940180000162 8.875 113.57400000000193 10.51 93.86018049999943 8.332 113.79148679999908 11.474 92.35449859999879 10.168 148.3725620000004 12.21 127.84971419999921 10.774 83.81883100000086 8.641 142.63875310000077 9.771 84.15311790000081 9.63 113.87457969999846 10.225)
Error minima by case: (1.1186 2 1.4495 8 0.7218 1 0.6571 1 3.0838 2 0.6082 3 0.1794 1 1.0604 2 1.1873 2 3.9248 1 2.2684 2 0.1897 6 1.4705 2 0.0419 1 3.7513 2 4.0838 2 0.546 3 0.5118 8 0.1151 2 0.2791 1 7.8189 8 0.0457 6 1.9023 3 0.4906 7 3.1543 1)
Average genome size in population (length): 72.18
Average program size in population (points): 73.18
Average percent parens in population: 0.014
Minimum age in population: 122.5803369083909
Maximum age in population: 128.312889795237
Average age in population: 126.101825381447
Median age in population: 126.1297300030403
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.263
Error (vector) diversity:			 0.268
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 159745289
--- Timings ---
Current time: 1529615244420 milliseconds
Total Time:         360.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.5 seconds, 37.9%
Fitness Testing:    177.3 seconds, 49.2%
Report:              46.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_dup} {:instruction integer_yank} {:instruction print_integer} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2})
Best program: (float_swap float_shove integer_mult float_shove float_dup integer_yank print_integer float_dec float_frominteger float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_sub float_dec integer_dup float_dec integer_dup integer_flush float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2902.077026999994
Median total errors in population: 863.7632000000001
Error averages by case: (97.22736259999911 8.91 102.69570720000067 11.508 65.8517662000008 10.548 108.6171513999995 10.807 107.8309755000019 9.735 103.09987560000062 9.088 98.4575463999988 10.788 102.1810322999986 9.576 125.2757557000011 10.426 93.60064369999898 9.078 141.93475650000002 4.218 86.51754379999898 8.477 102.44986860000108 10.64 88.8495629000015 8.049 121.83622590000161 8.879 107.41240040000191 10.373 93.47570599999948 8.232 115.17141859999901 11.47 95.16167649999889 10.091 150.14298280000068 12.18 126.18487479999932 10.801 81.436689600001 8.693 144.4220979000008 9.678 84.89588230000075 9.675 115.31752379999836 10.11)
Error minima by case: (0.1186 2 5.1379 6 0.0985 1 4.3429 2 5.0838 2 0.1836 2 0.8206 1 1.3619 2 1.1873 2 3.9148 2 0.7552 1 0.0912 6 0.6988 1 0.0419 1 3.8879 1 6.0838 2 0.454 2 0.5268 8 0.1992 2 0.8339 1 5.2935 8 0.0457 6 1.9023 3 0.4906 6 0.2667 1)
Average genome size in population (length): 72.139
Average program size in population (points): 73.139
Average percent parens in population: 0.014
Minimum age in population: 123.5803369083909
Maximum age in population: 129.6990446016423
Average age in population: 127.5376787741129
Median age in population: 127.6095169768451
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.284
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 161548764
--- Timings ---
Current time: 1529615248431 milliseconds
Total Time:         364.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.0 seconds, 37.9%
Fitness Testing:    179.2 seconds, 49.2%
Report:              46.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_dup} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction 42.01100979503235} {:instruction 41.81490045192234} {:instruction integer_pop} {:instruction integer_dup_times})
Best program: (float_swap float_dup float_shove integer_mult integer_mult integer_fromfloat integer_yank print_integer float_mult integer_mult float_shove integer_mult integer_fromfloat integer_yank float_rot integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup integer_pop float_dec integer_dup float_dec float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank in2 42.01100979503235 41.81490045192234 integer_pop integer_dup_times)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2989.4511017999944
Median total errors in population: 863.7632000000001
Error averages by case: (103.22517349999906 8.895 102.3086953000007 11.505 73.6880875000002 10.571 105.19863779999963 10.811 118.32434750000175 9.892 113.34654350000058 9.078 94.92221429999933 10.751 104.93342849999878 9.582 132.3357186000009 10.443 94.40777779999911 9.024 145.509568 4.163 85.60541429999925 8.436 114.90849480000102 10.694 97.62116500000118 8.197 117.3347498000015 8.838 118.1171852000018 10.525 102.46216459999937 8.237 111.0843688999992 11.444 102.96075579999892 10.128 150.36795520000038 12.215 130.15774999999945 10.775 82.00421610000056 8.662 147.3257115000008 9.668 86.26483880000043 9.667 112.70013949999871 10.135)
Error minima by case: (1.1186 2 0.4864 8 0.1352 1 2.6571 1 3.0838 3 0.6082 2 0.1794 1 0.0027 2 1.1873 7 2.0752 1 4.2684 2 0.1584 6 0.4938 1 0.0419 1 3.7513 1 4.0838 2 0.454 2 0.5118 8 0.1992 2 2.2403 2 17.223 7 0.0283 6 0.4953 2 0.4906 7 3.1543 1)
Average genome size in population (length): 72.44
Average program size in population (points): 73.44
Average percent parens in population: 0.014
Minimum age in population: 125.8569524292507
Maximum age in population: 131.4055181946311
Average age in population: 128.8731764036248
Median age in population: 128.9198119631914
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.27
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 163359764
--- Timings ---
Current time: 1529615252427 milliseconds
Total Time:         368.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.5 seconds, 37.9%
Fitness Testing:    181.3 seconds, 49.2%
Report:              47.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 51289.49710000012
Test mean error for best: 25.64475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 1.2950870954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 133.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 119.4946774993
Correct output: 71.8127365426  | Program output: 1.0436026431  
Correct output: -17.9148224328 | Program output: 1.6783232     
Correct output: 93.2683698204  | Program output: 5.2683698204  
Correct output: 1.1498437373   | Program output: 1.7196541833  
Correct output: 85.1198734399  | Program output: 117.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 118.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 122.7277097113
Correct output: -78.3331420378 | Program output: 1.7597057509  
Correct output: 66.7769669244  | Program output: 1.3980829784  
Correct output: 3.7173929377   | Program output: 1.6717042389  
Correct output: 109.3750668562 | Program output: 185.5797604841
Correct output: 16.5512971727  | Program output: 1.5390047507  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction float_min} {:instruction float_swap} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_rot})
Best program: (integer_fromfloat integer_yank tag_float_743 integer_sub float_min float_swap integer_yank float_dec integer_sub float_shove integer_mult integer_fromfloat integer_yank integer_mult integer_sub in1 17 in2 integer_mult float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_add float_dec integer_dup integer_min float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_rot float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_rot)
Errors: [6.6696 9 7.1379 11 7.1966 11 20.6874 11 14.9581 9 9.4268 9 7.0691 11 8.1512 10 70.7691 10 19.5931 8 88.0 2 0.5698 7 32.3193 12 1.9581 7 28.3573 8 13.9581 10 5.8709 8 19.4907 11 1.253 11 80.0928 13 65.3789 10 2.0457 7 76.2047 10 15.0123 9 27.5927 10]
Total: 863.7632000000001
Mean: 17.275265
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2911.828419099994
Median total errors in population: 863.7632000000001
Error averages by case: (102.23575659999877 8.929 102.74983610000069 11.506 69.1763898000006 10.468 100.52698399999966 10.631 110.1548037000018 9.704 112.9853500000006 9.106 90.0359184999992 10.605 105.61991379999849 9.562 129.35552190000115 10.389 91.61244499999911 9.044 145.658956 4.122 84.24870689999896 8.463 111.83481340000107 10.55 91.09470950000147 8.019 112.44779450000155 8.678 109.84908350000194 10.351 102.038094799999 8.265 108.07953529999908 11.444 102.80568369999894 10.102 145.28369120000002 12.07 126.99546289999918 10.739 79.55202010000086 8.677 147.1991181000008 9.684 82.74697000000066 9.647 106.88185979999862 9.904)
Error minima by case: (0.2658 2 4.5555 8 0.2628 1 0.0838 1 0.0838 2 0.6082 2 0.1794 1 1.27 2 1.1873 2 7.1271 1 0.2448 2 0.1509 6 0.4938 2 0.0419 1 3.7513 1 1.0838 2 0.454 2 0.5118 8 0.253 2 0.7638 1 7.6125 8 0.0371 6 0.4953 2 0.5094 6 1.0838 1)
Average genome size in population (length): 72.219
Average program size in population (points): 73.219
Average percent parens in population: 0.014
Minimum age in population: 126.9533921424941
Maximum age in population: 132.8156513622365
Average age in population: 130.2999192878308
Median age in population: 130.3232861163939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.266
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 165165239
--- Timings ---
Current time: 1529615256453 milliseconds
Total Time:         372.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.0 seconds, 37.9%
Fitness Testing:    183.2 seconds, 49.2%
Report:              47.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 50728.05440000015
Test mean error for best: 25.36403
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 5.3888299954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 24.9343895202 
Correct output: -17.9148224328 | Program output: 3.4742234971  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3895562941  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 3.316299105   
Correct output: 66.7769669244  | Program output: 4.5120390829  
Correct output: 3.7173929377   | Program output: 3.488750468   
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 3.8552712175  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_mult integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod float_dup_items float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [5.6696 9 7.1379 11 11.2904 10 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 46.8783 11 21.389 10 87.0 2 2.2397 10 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.6494 11 62.2649 12 0.2286 10 77.2047 10 12.696 8 27.5927 10]
Total: 845.7412000000002
Mean: 16.914824
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3161.6432166999944
Median total errors in population: 863.7632000000001
Error averages by case: (107.45507309999887 8.729 106.46586940000063 11.485 81.39476390000007 10.629 116.13089309999937 10.869 117.92743360000176 9.924 116.00172060000051 8.967 105.70371369999866 10.812 110.88282329999846 9.452 135.720159800001 10.424 106.90701219999896 9.168 148.55927670000008 3.984 98.812591999999 8.459 118.11591380000098 10.453 98.39138150000133 8.202 132.0359562000015 8.89 117.74077700000183 10.533 106.89680269999904 8.119 122.93460179999902 11.445 106.01180579999902 9.963 164.4043496000011 12.213 137.29419989999974 10.739 93.9433256000008 8.654 150.28127070000073 9.512 96.87736300000066 9.655 123.30413769999838 10.17)
Error minima by case: (1.1186 2 5.1379 7 0.0985 1 1.0838 1 1.0838 2 1.5184 3 0.1794 1 1.0272 2 1.1873 2 7.1271 1 0.2448 2 0.0822 6 1.0356 2 0.0419 1 4.7513 2 2.0838 3 0.454 2 0.4676 8 0.253 2 0.4806 1 17.223 9 0.0457 6 0.4953 3 0.6823 7 2.0838 1)
Average genome size in population (length): 72.454
Average program size in population (points): 73.454
Average percent parens in population: 0.014
Minimum age in population: 128.7764053873884
Maximum age in population: 133.6865627979513
Average age in population: 131.6752040385998
Median age in population: 131.7078898014909
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.258
Error (vector) diversity:			 0.261
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 166976614
--- Timings ---
Current time: 1529615260310 milliseconds
Total Time:         376.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.4 seconds, 37.9%
Fitness Testing:    185.1 seconds, 49.2%
Report:              48.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 50728.05440000015
Test mean error for best: 25.36403
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 5.3888299954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 24.9343895202 
Correct output: -17.9148224328 | Program output: 3.4742234971  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3895562941  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 3.316299105   
Correct output: 66.7769669244  | Program output: 4.5120390829  
Correct output: 3.7173929377   | Program output: 3.488750468   
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 3.8552712175  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_mult integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod float_dup_items float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dup_times float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [5.6696 9 7.1379 11 11.2904 10 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 46.8783 11 21.389 10 87.0 2 2.2397 10 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.6494 11 62.2649 12 0.2286 10 77.2047 10 12.696 8 27.5927 10]
Total: 845.7412000000002
Mean: 16.914824
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3002.856862699993
Median total errors in population: 864.7632000000001
Error averages by case: (105.60666469999926 8.811 100.2975352000007 11.526 70.87566430000008 10.4 103.99736999999972 10.643 118.09581640000157 9.835 115.4018441000006 8.992 93.35529409999927 10.581 110.90187109999886 9.437 126.78074550000072 10.39 97.65686909999908 9.012 141.02117729999998 4.19 90.43066309999924 8.679 113.93729530000093 10.45 97.48155430000115 8.175 118.34776560000137 8.769 118.19812780000167 10.468 105.14030729999949 8.209 110.96259169999925 11.505 104.92658469999913 9.937 156.41029900000055 11.948 127.10627319999968 10.889 85.39026550000062 8.871 151.19065060000062 9.551 86.71664960000052 9.773 111.59698319999897 9.989)
Error minima by case: (0.1186 2 0.5011 7 0.614 1 1.7317 1 2.0838 2 0.6082 2 0.8206 1 1.6203 2 1.1873 2 6.9148 1 4.2684 1 0.0766 6 0.4938 2 0.0419 1 9.381 1 3.0838 2 0.454 2 0.5118 8 0.253 2 0.1055 1 11.223 8 0.0371 6 1.9023 3 0.5094 6 6.9581 1)
Average genome size in population (length): 72.276
Average program size in population (points): 73.276
Average percent parens in population: 0.014
Minimum age in population: 130.323358533639
Maximum age in population: 135.2388864913492
Average age in population: 133.0646786734843
Median age in population: 133.1298714253586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.319
Error (vector) diversity:			 0.323
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 168783564
--- Timings ---
Current time: 1529615264485 milliseconds
Total Time:         380.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.9 seconds, 37.8%
Fitness Testing:    187.3 seconds, 49.2%
Report:              49.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 51004.76660000015
Test mean error for best: 25.50238
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 5.3888299954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 24.9343895202 
Correct output: -17.9148224328 | Program output: 3.4742234971  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3895562941  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 3.316299105   
Correct output: 66.7769669244  | Program output: 4.5120390829  
Correct output: 3.7173929377   | Program output: 3.488750468   
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 3.8552712175  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction integer_mult} {:instruction tagged_949} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction float_shove} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_pop} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (integer_add float_swap integer_min integer_dup_items float_shove integer_mult float_shove float_tan integer_fromfloat float_frominteger float_dup_times float_mult float_mult integer_mult tagged_949 integer_mult integer_fromfloat integer_yank float_rot float_shove float_max integer_fromfloat integer_yank float_rot integer_pop in1 17 in2 integer_mult float_dup_items in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_swap integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_mult float_dec float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [5.6696 9 7.1379 11 11.2904 10 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 46.8783 11 21.389 10 87.0 2 2.2397 10 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.6494 11 62.2649 12 0.2286 10 77.2047 10 12.696 8 27.5927 10]
Total: 845.7412000000002
Mean: 16.914824
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3059.4444928999933
Median total errors in population: 863.7632000000001
Error averages by case: (107.9549735999989 8.95 105.60921760000058 11.491 77.47797810000007 10.578 107.9871102999994 10.74 111.37436250000137 9.81 114.66474570000045 9.108 98.31259949999895 10.688 113.74453419999851 9.603 133.41832370000083 10.439 101.18195899999905 9.103 148.96098599999988 4.173 91.58087419999927 8.569 116.02147200000101 10.64 93.36627730000093 8.139 119.23797780000132 8.822 110.92896830000136 10.457 106.13961089999904 8.3 114.01498119999903 11.489 105.27767029999907 10.087 153.24348540000037 12.172 134.15970639999964 10.844 88.03149570000053 8.756 157.25699580000065 9.665 92.78452600000047 9.734 114.33366139999876 10.023)
Error minima by case: (1.1186 2 5.1379 8 0.0985 1 2.6571 2 3.0838 2 0.5184 2 0.1794 1 2.0604 2 1.1873 7 7.1271 2 4.2684 1 0.0538 6 0.4938 1 0.0419 1 4.7513 1 4.0838 2 0.454 2 0.5268 8 0.2449 2 0.0388 1 17.223 8 0.0457 5 0.4953 3 0.3358 6 4.0838 1)
Average genome size in population (length): 71.685
Average program size in population (points): 72.685
Average percent parens in population: 0.014
Minimum age in population: 131.705858022756
Maximum age in population: 136.2731363684665
Average age in population: 134.4372667815932
Median age in population: 134.5035570991292
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.283
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 170575739
--- Timings ---
Current time: 1529615268405 milliseconds
Total Time:         384.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.4 seconds, 37.8%
Fitness Testing:    189.2 seconds, 49.2%
Report:              49.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 51004.76660000015
Test mean error for best: 25.50238
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 5.3888299954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 24.9343895202 
Correct output: -17.9148224328 | Program output: 3.4742234971  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3895562941  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 3.316299105   
Correct output: 66.7769669244  | Program output: 4.5120390829  
Correct output: 3.7173929377   | Program output: 3.488750468   
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 3.8552712175  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction integer_mult} {:instruction tagged_949} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_rot} {:instruction float_shove} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_pop} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mult} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (integer_add float_swap integer_min integer_dup_items float_shove integer_mult float_shove float_tan integer_fromfloat float_frominteger float_dup_times float_mult float_mult integer_mult tagged_949 integer_mult integer_fromfloat integer_max float_rot float_shove float_max integer_fromfloat integer_yank float_rot integer_pop in1 17 in2 integer_mult float_dup_items in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_swap integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_mult float_dec float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [5.6696 9 7.1379 11 11.2904 10 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 46.8783 11 21.389 10 87.0 2 2.2397 10 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.6494 11 62.2649 12 0.2286 10 77.2047 10 12.696 8 27.5927 10]
Total: 845.7412000000002
Mean: 16.914824
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2845.7177484999934
Median total errors in population: 863.7632000000001
Error averages by case: (99.61501629999903 8.923 93.16072300000069 11.424 65.32334160000067 10.631 99.10232119999972 10.726 110.02231180000179 9.75 112.24398700000069 9.12 88.28257349999932 10.654 100.96434409999885 9.474 123.55517880000087 10.426 88.52061519999907 9.147 139.64849390000006 4.152 81.86554049999909 8.467 112.04021880000109 10.67 88.30628580000132 8.073 112.8834810000016 8.756 110.01709260000179 10.375 99.57973199999937 8.235 104.93462689999937 11.437 100.43680549999885 10.04 148.33389620000005 12.165 121.75308539999945 10.7 76.61882160000077 8.685 142.6232204000008 9.617 78.52505380000063 9.644 106.00498159999884 10.065)
Error minima by case: (1.1186 2 2.9983 8 0.0985 1 0.3429 1 2.0838 2 0.5184 3 0.1794 1 2.0604 2 1.1873 2 5.9148 2 4.2684 1 0.0736 6 0.4938 2 0.0419 1 3.7513 1 3.0838 2 0.454 2 3.6716 8 0.253 2 0.8147 1 7.8189 8 0.0457 6 0.4953 2 0.3358 6 2.489 1)
Average genome size in population (length): 71.488
Average program size in population (points): 72.488
Average percent parens in population: 0.014
Minimum age in population: 132.705858022756
Maximum age in population: 137.681440362348
Average age in population: 135.8688799272025
Median age in population: 135.9145013613525
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.286
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 172363014
--- Timings ---
Current time: 1529615272381 milliseconds
Total Time:         388.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.9 seconds, 37.8%
Fitness Testing:    191.2 seconds, 49.3%
Report:              50.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 50728.05440000015
Test mean error for best: 25.36403
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 5.3888299954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 24.9343895202 
Correct output: -17.9148224328 | Program output: 3.4742234971  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3895562941  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 3.316299105   
Correct output: 66.7769669244  | Program output: 4.5120390829  
Correct output: 3.7173929377   | Program output: 3.488750468   
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 3.8552712175  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (integer_mod float_swap integer_min integer_dup_items integer_fromfloat integer_min integer_mult integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod float_dup_items float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dup_times float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [5.6696 9 7.1379 11 11.2904 10 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 46.8783 11 21.389 10 87.0 2 2.2397 10 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.6494 11 62.2649 12 0.2286 10 77.2047 10 12.696 8 27.5927 10]
Total: 845.7412000000002
Mean: 16.914824
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3211.3299506999933
Median total errors in population: 863.7632000000001
Error averages by case: (111.82288449999866 8.988 107.65582790000069 11.537 83.7325564000001 10.629 114.08123969999932 10.716 119.35115830000188 9.898 124.88909460000063 9.234 103.75431059999845 10.674 112.98108059999831 9.559 139.0736988000009 10.521 108.17471699999912 9.28 153.89179309999992 4.078 99.29150289999914 8.628 123.48102010000122 10.694 100.00774810000154 8.179 126.82010090000172 8.774 119.01749830000205 10.532 113.14978189999884 8.28 120.79211899999888 11.501 113.07891599999884 10.107 162.86496400000053 12.139 140.04495999999975 10.903 95.20720660000082 8.817 155.5070473000008 9.754 99.22709910000067 9.585 120.37962499999828 10.045)
Error minima by case: (0.1186 2 5.1379 7 0.0985 1 0.3429 1 3.0838 2 0.6082 3 1.1794 1 0.8776 3 1.1873 2 7.1271 1 4.2684 2 0.094 6 0.4938 2 0.0419 1 3.7513 1 4.0838 2 0.454 2 0.0831 6 0.253 2 1.6285 2 17.223 9 0.0457 6 1.9023 3 0.5094 6 0.2667 1)
Average genome size in population (length): 71.589
Average program size in population (points): 72.589
Average percent parens in population: 0.014
Minimum age in population: 134.6232815244044
Maximum age in population: 139.3451794027367
Average age in population: 137.2620016008857
Median age in population: 137.3337910084433
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.254
Error (vector) diversity:			 0.256
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 174152764
--- Timings ---
Current time: 1529615276245 milliseconds
Total Time:         392.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.4 seconds, 37.8%
Fitness Testing:    193.2 seconds, 49.3%
Report:              50.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 50728.05440000015
Test mean error for best: 25.36403
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.007851817 
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 5.3888299954  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 134.7678622143
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 120.4946774993
Correct output: 71.8127365426  | Program output: 24.9343895202 
Correct output: -17.9148224328 | Program output: 3.4742234971  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3895562941  
Correct output: 85.1198734399  | Program output: 118.4391297924
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 119.775863825 
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 123.7277097113
Correct output: -78.3331420378 | Program output: 3.316299105   
Correct output: 66.7769669244  | Program output: 4.5120390829  
Correct output: 3.7173929377   | Program output: 3.488750468   
Correct output: 109.3750668562 | Program output: 186.5797604841
Correct output: 16.5512971727  | Program output: 3.8552712175  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_swap} {:instruction integer_min} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (integer_mod float_swap integer_min integer_dup_items integer_fromfloat integer_min integer_mult integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod float_dup_items float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_dup_times float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_dup integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [5.6696 9 7.1379 11 11.2904 10 20.6874 11 14.9581 9 8.4268 10 7.0691 11 7.1512 9 46.8783 11 21.389 10 87.0 2 2.2397 10 33.3193 12 1.9581 7 28.3573 8 13.9581 10 6.8709 8 19.4907 11 0.253 10 81.6494 11 62.2649 12 0.2286 10 77.2047 10 12.696 8 27.5927 10]
Total: 845.7412000000002
Mean: 16.914824
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3015.4132769999937
Median total errors in population: 863.7632000000001
Error averages by case: (108.78079409999906 9.005 99.72582780000072 11.442 74.06234099999985 10.347 100.97651069999966 10.622 116.0115429000018 9.734 121.27978080000052 9.367 90.18298369999916 10.621 111.88898169999862 9.394 124.55759820000006 10.588 96.68476419999935 9.518 148.931997 4.174 89.19757179999948 9.155 121.53613980000108 10.677 96.3342126000013 8.025 113.86988810000153 8.669 115.88358780000193 10.4 109.37857349999919 8.287 108.28730389999943 11.4 111.12506249999898 9.953 150.28941089999984 11.604 130.13347389999902 11.184 84.43294300000072 9.339 154.08550760000082 9.71 87.68759280000044 9.524 107.46388669999892 9.886)
Error minima by case: (0.1186 2 1.5711 7 0.0985 1 0.6874 1 3.0838 3 0.3308 2 0.1794 1 0.2913 2 1.1873 2 5.1271 2 2.2684 2 0.0384 6 0.4568 2 0.0419 1 1.213 1 4.0838 3 0.454 2 6.6033 9 0.253 2 1.4515 1 10.7711 8 0.0193 6 1.4953 3 0.9386 7 1.81 1)
Average genome size in population (length): 71.59
Average program size in population (points): 72.59
Average percent parens in population: 0.014
Minimum age in population: 136.3094096543476
Maximum age in population: 141.0797790811414
Average age in population: 138.8183377883278
Median age in population: 138.8293707437325
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.302
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 175942539
--- Timings ---
Current time: 1529615280356 milliseconds
Total Time:         396.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.0 seconds, 37.9%
Fitness Testing:    195.2 seconds, 49.3%
Report:              51.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 46288.09430000012
Test mean error for best: 23.14405
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.8637919649
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 4.7084718699  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 128.4806739127
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 98.9744218015 
Correct output: 71.8127365426  | Program output: 9.9156188159  
Correct output: -17.9148224328 | Program output: 3.3872787122  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3201430517  
Correct output: 85.1198734399  | Program output: 111.145746585 
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 112.6059821492
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 116.8637608202
Correct output: -78.3331420378 | Program output: 3.2613669858  
Correct output: 66.7769669244  | Program output: 4.1466400256  
Correct output: 3.7173929377   | Program output: 3.3987130909  
Correct output: 109.3750668562 | Program output: 127.6816592516
Correct output: 16.5512971727  | Program output: 3.6792844464  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod float_dup_items float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [13.8137 10 7.1379 11 10.61 9 20.6874 11 14.9581 9 14.714 11 7.0691 11 28.6714 13 61.8971 11 21.3021 12 87.0 2 2.1703 9 26.0259 11 1.9581 7 28.3573 8 13.9581 10 0.299 7 19.4907 11 7.1169 10 81.5945 12 62.6303 10 0.3187 9 18.3066 11 12.872 11 27.5927 10]
Total: 836.5519
Mean: 16.731037
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2985.4341940999952
Median total errors in population: 863.7632000000001
Error averages by case: (111.04783459999885 9.184 98.29488140000069 11.469 82.00128779999964 10.145 90.78508399999973 10.451 106.28985130000187 9.706 122.55048030000073 9.687 81.25559279999905 10.442 113.89913129999854 9.312 128.90279469999896 10.907 101.15621449999948 9.963 152.32008349999998 4.398 93.31541250000002 9.962 122.13778160000112 10.794 87.46756350000138 7.961 100.59415020000155 8.472 105.90372880000194 10.337 111.62253279999918 8.353 96.8081675999995 11.484 111.18465739999895 9.843 153.05061599999905 11.039 136.00534269999912 11.715 87.98490180000063 9.994 157.41765560000076 9.872 92.22593220000016 9.331 96.68851519999905 9.703)
Error minima by case: (0.1186 2 0.6522 8 0.0985 1 0.6571 1 2.9162 2 0.5184 3 0.1794 1 2.0604 2 23.2168 2 5.1271 1 3.2684 1 0.0645 7 0.3056 2 0.0041 1 4.7513 1 1.9162 2 0.299 2 1.3364 8 0.0096 2 2.0 1 18.1811 9 0.0457 6 0.5406 2 0.4906 6 4.1543 1)
Average genome size in population (length): 71.615
Average program size in population (points): 72.615
Average percent parens in population: 0.014
Minimum age in population: 138.0191555356316
Maximum age in population: 142.6361219312916
Average age in population: 140.4163338226916
Median age in population: 140.4401428602285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.288
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 177732914
--- Timings ---
Current time: 1529615284183 milliseconds
Total Time:         400.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.4 seconds, 37.8%
Fitness Testing:    197.1 seconds, 49.3%
Report:              51.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 46288.09430000012
Test mean error for best: 23.14405
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.8637919649
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 4.7084718699  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 128.4806739127
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 98.9744218015 
Correct output: 71.8127365426  | Program output: 9.9156188159  
Correct output: -17.9148224328 | Program output: 3.3872787122  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3201430517  
Correct output: 85.1198734399  | Program output: 111.145746585 
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 112.6059821492
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 116.8637608202
Correct output: -78.3331420378 | Program output: 3.2613669858  
Correct output: 66.7769669244  | Program output: 4.1466400256  
Correct output: 3.7173929377   | Program output: 3.3987130909  
Correct output: 109.3750668562 | Program output: 127.6816592516
Correct output: 16.5512971727  | Program output: 3.6792844464  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod float_dup_items float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [13.8137 10 7.1379 11 10.61 9 20.6874 11 14.9581 9 14.714 11 7.0691 11 28.6714 13 61.8971 11 21.3021 12 87.0 2 2.1703 9 26.0259 11 1.9581 7 28.3573 8 13.9581 10 0.299 7 19.4907 11 7.1169 10 81.5945 12 62.6303 10 0.3187 9 18.3066 11 12.872 11 27.5927 10]
Total: 836.5519
Mean: 16.731037
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2602.076356799996
Median total errors in population: 845.7412000000002
Error averages by case: (97.66856509999893 9.154 73.42399220000064 11.385 66.65077749999953 10.137 73.8940073000003 10.502 89.41554100000172 9.639 114.78442050000058 9.786 63.17048390000049 10.506 96.11785739999875 9.12 107.00161669999862 10.984 88.08132309999972 10.337 138.9479452 4.121 80.09216910000005 10.166 111.55659860000102 10.807 70.83475830000135 7.874 83.71856530000143 8.443 88.93771180000176 10.257 99.84148869999912 8.26 79.60330979999986 11.39 100.71379349999899 9.716 146.93329739999857 10.945 117.19372109999868 11.827 73.51332390000066 10.2 140.61758140000072 9.832 75.22665050000056 9.213 79.80985749999951 9.726)
Error minima by case: (0.1186 2 0.5011 7 0.0985 1 0.4611 1 3.0838 3 0.5184 2 0.1794 1 0.9848 2 31.6821 2 5.1271 1 11.2419 2 0.0387 7 0.4527 1 0.0419 1 3.7513 1 4.0838 2 0.299 2 0.3652 9 0.253 2 2.0 1 24.0535 9 0.01 6 1.4953 2 0.4906 6 3.1543 1)
Average genome size in population (length): 71.509
Average program size in population (points): 72.509
Average percent parens in population: 0.014
Minimum age in population: 139.2715943460284
Maximum age in population: 144.1801266161438
Average age in population: 141.9130758141264
Median age in population: 141.9533984635791
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.254
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 179520639
--- Timings ---
Current time: 1529615288253 milliseconds
Total Time:         404.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.8 seconds, 37.8%
Fitness Testing:    199.2 seconds, 49.3%
Report:              51.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 46288.09430000012
Test mean error for best: 23.14405
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.8637919649
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 4.7084718699  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 128.4806739127
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 98.9744218015 
Correct output: 71.8127365426  | Program output: 9.9156188159  
Correct output: -17.9148224328 | Program output: 3.3872787122  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3201430517  
Correct output: 85.1198734399  | Program output: 111.145746585 
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 112.6059821492
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 116.8637608202
Correct output: -78.3331420378 | Program output: 3.2613669858  
Correct output: 66.7769669244  | Program output: 4.1466400256  
Correct output: 3.7173929377   | Program output: 3.3987130909  
Correct output: 109.3750668562 | Program output: 127.6816592516
Correct output: 16.5512971727  | Program output: 3.6792844464  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod float_shove integer_mult integer_fromfloat integer_pop print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod float_dup_items float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_pop float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [13.8137 10 7.1379 11 10.61 9 20.6874 11 14.9581 9 14.714 11 7.0691 11 28.6714 13 61.8971 11 21.3021 12 87.0 2 2.1703 9 26.0259 11 1.9581 7 28.3573 8 13.9581 10 0.299 7 19.4907 11 7.1169 10 81.5945 12 62.6303 10 0.3187 9 18.3066 11 12.872 11 27.5927 10]
Total: 836.5519
Mean: 16.731037
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2643.822284699995
Median total errors in population: 845.7412000000002
Error averages by case: (102.14923929999932 9.142 79.98264890000068 11.407 65.09993629999983 10.03 76.23534390000022 10.423 92.77597500000162 9.679 118.83054710000067 9.755 66.07788290000046 10.383 99.03315159999909 9.22 108.86546769999876 10.985 85.87321490000001 10.286 141.1558237 3.997 78.1706944999997 10.274 115.12767660000097 10.855 72.0543826000012 7.851 84.78882510000125 8.33 91.9603440000017 10.334 104.52799789999943 8.229 81.48659169999969 11.41 104.54813769999889 9.646 140.64418169999882 10.899 118.56904949999907 11.869 71.52864130000039 10.312 143.59303630000093 9.823 75.02757960000064 9.271 81.6749148999996 9.631)
Error minima by case: (0.1186 2 4.1379 8 0.0985 1 0.3429 1 1.0838 2 0.5184 3 0.1794 1 1.6203 2 1.1873 1 2.7411 1 2.2684 1 0.1703 7 0.4938 1 0.0419 1 1.7094 1 2.0838 3 0.299 2 0.302 8 0.253 2 1.0 1 17.223 8 0.004 7 1.4953 2 0.2634 7 1.1124 1)
Average genome size in population (length): 71.977
Average program size in population (points): 72.977
Average percent parens in population: 0.014
Minimum age in population: 140.4500678439307
Maximum age in population: 145.3899201369024
Average age in population: 143.3438348034208
Median age in population: 143.4147882490097
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.261
Error (vector) diversity:			 0.263
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 181320064
--- Timings ---
Current time: 1529615292345 milliseconds
Total Time:         408.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.2 seconds, 37.8%
Fitness Testing:    201.3 seconds, 49.3%
Report:              52.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 46288.09430000012
Test mean error for best: 23.14405
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 103.8637919649
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 4.7084718699  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 128.4806739127
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 98.9744218015 
Correct output: 71.8127365426  | Program output: 9.9156188159  
Correct output: -17.9148224328 | Program output: 3.3872787122  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3201430517  
Correct output: 85.1198734399  | Program output: 111.145746585 
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 112.6059821492
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 116.8637608202
Correct output: -78.3331420378 | Program output: 3.2613669858  
Correct output: 66.7769669244  | Program output: 4.1466400256  
Correct output: 3.7173929377   | Program output: 3.3987130909  
Correct output: 109.3750668562 | Program output: 127.6816592516
Correct output: 16.5512971727  | Program output: 3.6792844464  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod float_shove integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod float_dup_items float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [13.8137 10 7.1379 11 10.61 9 20.6874 11 14.9581 9 14.714 11 7.0691 11 28.6714 13 61.8971 11 21.3021 12 87.0 2 2.1703 9 26.0259 11 1.9581 7 28.3573 8 13.9581 10 0.299 7 19.4907 11 7.1169 10 81.5945 12 62.6303 10 0.3187 9 18.3066 11 12.872 11 27.5927 10]
Total: 836.5519
Mean: 16.731037
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2754.2855745999946
Median total errors in population: 845.7412000000002
Error averages by case: (101.42934699999927 9.236 78.47496630000074 11.432 76.96043269999971 10.043 79.51233190000036 10.398 95.4493170000017 9.653 117.16845840000066 9.879 68.30402470000021 10.379 101.25912599999921 9.382 118.4967568999988 11.028 97.04414849999986 10.528 145.28336830000003 4.026 88.20458119999984 10.178 117.18412690000069 10.733 76.99415070000127 7.95 87.44830370000129 8.354 95.05228050000174 10.317 104.74484199999942 8.221 84.00113760000005 11.451 104.417479499999 9.663 151.62489389999922 11.023 127.43168989999907 11.764 81.57832200000063 10.232 140.33294630000054 9.887 85.08126960000051 9.453 85.94327309999979 9.654)
Error minima by case: (0.1186 2 5.1379 8 0.0985 1 0.6571 1 0.0838 3 2.5825 2 0.1794 1 0.1756 2 1.1873 2 5.1271 2 2.2684 2 0.1703 6 0.5062 1 0.0419 1 4.7513 1 1.0838 2 0.299 2 0.3652 9 0.0462 2 1.6438 1 17.223 8 0.01 6 0.5406 2 0.5094 6 4.1543 1)
Average genome size in population (length): 71.733
Average program size in population (points): 72.733
Average percent parens in population: 0.014
Minimum age in population: 141.628541341833
Maximum age in population: 146.6280067419786
Average age in population: 144.6838077896717
Median age in population: 144.7217454032169
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.29
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 183113414
--- Timings ---
Current time: 1529615296358 milliseconds
Total Time:         412.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.8 seconds, 37.8%
Fitness Testing:    203.2 seconds, 49.3%
Report:              53.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 46808.58710000012
Test mean error for best: 23.40429
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.4702111075
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 4.6385941934  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 128.8180820876
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 103.4615946989
Correct output: 71.8127365426  | Program output: 9.8568651359  
Correct output: -17.9148224328 | Program output: 3.3712051765  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3077951311  
Correct output: 85.1198734399  | Program output: 111.145746585 
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 114.4610110691
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 118.7743684448
Correct output: -78.3331420378 | Program output: -106.3750411748
Correct output: 66.7769669244  | Program output: 4.1350376382  
Correct output: 3.7173929377   | Program output: 3.393601048   
Correct output: 109.3750668562 | Program output: 134.4563562199
Correct output: 16.5512971727  | Program output: 3.6654563797  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [12.2072 9 7.1379 11 10.5401 11 20.6874 11 14.9581 9 14.3765 10 7.0691 11 24.1843 10 61.9559 10 21.286 13 87.0 2 2.158 10 26.0259 11 1.9581 7 28.3573 8 13.9581 10 1.5561 11 19.4907 11 5.2063 11 28.0419 10 62.6419 12 0.3238 9 25.0813 10 12.8858 10 27.5927 10]
Total: 783.6804000000001
Mean: 15.673608
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2712.108393299995
Median total errors in population: 845.7412000000002
Error averages by case: (100.1802231999991 9.369 82.12440660000058 11.425 68.47663769999984 9.863 81.33564790000018 10.436 97.32416240000158 9.684 118.46179150000104 9.987 71.02905950000014 10.398 101.35325499999955 10.013 113.6381614999995 10.943 93.73940359999995 10.852 142.52530199999998 4.041 86.35268489999967 10.028 114.94087579999976 10.518 78.85249550000118 7.958 90.32735470000127 8.412 96.89623350000164 10.358 101.76484599999934 8.127 86.83218869999985 11.45 104.26137159999908 9.631 145.05986810000005 11.145 120.99704069999956 11.402 79.10187370000075 10.074 123.93385630000027 9.998 79.71111710000072 9.982 87.07053579999952 9.724)
Error minima by case: (0.1186 2 4.1379 7 0.0985 1 0.8836 1 0.0838 3 0.5184 2 0.1794 1 1.6203 2 1.1873 2 2.5359 1 3.2684 2 0.034 7 0.5062 2 0.0419 1 2.4361 1 1.0838 2 0.2455 2 3.6937 8 0.253 2 2.0 1 9.4819 8 0.0193 5 0.5406 3 0.4906 7 1.7635 1)
Average genome size in population (length): 72.165
Average program size in population (points): 73.165
Average percent parens in population: 0.014
Minimum age in population: 143.4198141024974
Maximum age in population: 148.0575486565902
Average age in population: 146.2227257388968
Median age in population: 146.285586336554
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 62
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.326
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 184917539
--- Timings ---
Current time: 1529615300355 milliseconds
Total Time:         416.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.2 seconds, 37.8%
Fitness Testing:    205.3 seconds, 49.3%
Report:              53.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 46808.58710000012
Test mean error for best: 23.40429
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.4702111075
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 4.6385941934  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 128.8180820876
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 103.4615946989
Correct output: 71.8127365426  | Program output: 9.8568651359  
Correct output: -17.9148224328 | Program output: 3.3712051765  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3077951311  
Correct output: 85.1198734399  | Program output: 111.145746585 
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 114.4610110691
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 118.7743684448
Correct output: -78.3331420378 | Program output: -106.3750411748
Correct output: 66.7769669244  | Program output: 4.1350376382  
Correct output: 3.7173929377   | Program output: 3.393601048   
Correct output: 109.3750668562 | Program output: 134.4563562199
Correct output: 16.5512971727  | Program output: 3.6654563797  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [12.2072 9 7.1379 11 10.5401 11 20.6874 11 14.9581 9 14.3765 10 7.0691 11 24.1843 10 61.9559 10 21.286 13 87.0 2 2.158 10 26.0259 11 1.9581 7 28.3573 8 13.9581 10 1.5561 11 19.4907 11 5.2063 11 28.0419 10 62.6419 12 0.3238 9 25.0813 10 12.8858 10 27.5927 10]
Total: 783.6804000000001
Mean: 15.673608
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2287.9119935999997
Median total errors in population: 840.2720000000002
Error averages by case: (83.56448479999939 9.721 70.57206510000074 11.364 54.004794600000224 9.415 65.88850350000065 10.393 81.71142550000134 9.523 95.09434930000118 10.339 55.832861000000406 10.382 92.32110170000057 11.173 106.89966620000042 10.78 75.48482780000032 11.241 128.24620960000018 3.85 67.46539779999968 9.734 93.29487729999927 10.25 63.53287000000093 7.753 75.40018010000117 8.308 81.26409650000139 10.195 77.50427969999966 7.867 72.04310110000004 11.352 83.72220549999962 9.684 126.87230730000124 11.347 107.19321450000024 10.772 60.209919300000536 9.756 89.5127039000004 10.322 62.877870900000666 10.634 71.63368060000026 9.61)
Error minima by case: (0.1186 2 3.5555 7 0.0449 1 2.3429 2 3.0838 2 1.4317 2 0.1794 1 2.0604 2 31.6821 2 3.1271 1 4.2684 1 0.1413 7 0.5009 1 0.0419 1 3.7513 1 4.0838 2 0.299 2 3.6937 7 0.253 2 1.2887 1 10.3117 8 0.0077 7 0.5406 2 0.5094 6 3.1543 1)
Average genome size in population (length): 72.792
Average program size in population (points): 73.792
Average percent parens in population: 0.014
Minimum age in population: 144.7374824643653
Maximum age in population: 149.5255283253994
Average age in population: 147.62756689626
Median age in population: 147.6701453574779
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.259
Error (vector) diversity:			 0.261
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 186737339
--- Timings ---
Current time: 1529615304255 milliseconds
Total Time:         420.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.7 seconds, 37.8%
Fitness Testing:    207.2 seconds, 49.3%
Report:              54.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 46808.58710000012
Test mean error for best: 23.40429
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.4702111075
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 4.6385941934  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 128.8180820876
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 103.4615946989
Correct output: 71.8127365426  | Program output: 9.8568651359  
Correct output: -17.9148224328 | Program output: 3.3712051765  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3077951311  
Correct output: 85.1198734399  | Program output: 111.145746585 
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 114.4610110691
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 118.7743684448
Correct output: -78.3331420378 | Program output: -106.3750411748
Correct output: 66.7769669244  | Program output: 4.1350376382  
Correct output: 3.7173929377   | Program output: 3.393601048   
Correct output: 109.3750668562 | Program output: 134.4563562199
Correct output: 16.5512971727  | Program output: 3.6654563797  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [12.2072 9 7.1379 11 10.5401 11 20.6874 11 14.9581 9 14.3765 10 7.0691 11 24.1843 10 61.9559 10 21.286 13 87.0 2 2.158 10 26.0259 11 1.9581 7 28.3573 8 13.9581 10 1.5561 11 19.4907 11 5.2063 11 28.0419 10 62.6419 12 0.3238 9 25.0813 10 12.8858 10 27.5927 10]
Total: 783.6804000000001
Mean: 15.673608
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2763.0694506000013
Median total errors in population: 836.5519
Error averages by case: (101.56891699999942 9.835 89.42292920000061 11.433 74.92011230000016 9.453 89.13767569999978 10.469 94.32063740000181 9.557 115.39359810000197 10.459 78.12640369999939 10.44 109.52979740000143 11.406 124.12776790000076 10.871 97.75710560000012 11.411 145.9240623000001 4.139 88.61628379999901 9.711 106.45812829999846 10.19 77.43975210000143 7.828 95.25088800000145 8.432 93.73864930000191 10.305 95.16094359999964 7.968 93.05910379999942 11.465 102.57899559999883 9.722 150.62315700000218 11.538 127.6718424000008 10.718 82.28428360000122 9.718 101.0590215999997 10.462 86.60925270000105 10.949 94.12114219999881 9.69)
Error minima by case: (3.5336 2 5.1379 7 0.0985 1 3.6571 1 7.9581 2 7.3979 2 0.1794 1 2.6121 2 3.1873 2 0.8729 1 2.2684 1 0.1059 7 1.6625 1 0.0419 1 0.7513 2 6.9581 2 0.1392 2 0.9988 9 0.253 2 0.8282 1 19.223 7 0.0079 7 0.5406 2 1.4906 7 0.1543 1)
Average genome size in population (length): 73.353
Average program size in population (points): 74.353
Average percent parens in population: 0.014
Minimum age in population: 146.4715352821011
Maximum age in population: 151.1252598959174
Average age in population: 149.008071328512
Median age in population: 148.9758849656021
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.256
Error (vector) diversity:			 0.256
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 188571164
--- Timings ---
Current time: 1529615308386 milliseconds
Total Time:         424.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.3 seconds, 37.8%
Fitness Testing:    209.2 seconds, 49.3%
Report:              54.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 46808.58710000012
Test mean error for best: 23.40429
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.4702111075
Correct output: -30.5973968421 | Program output: -37.7352775358
Correct output: -5.9015288603  | Program output: 4.6385941934  
Correct output: 24.3848067256  | Program output: 3.6973720264  
Correct output: -119.8990795364 | Program output: -104.9409786734
Correct output: 143.1946278344 | Program output: 128.8180820876
Correct output: 10.8625446508  | Program output: 3.7934609064  
Correct output: 127.6458652779 | Program output: 103.4615946989
Correct output: 71.8127365426  | Program output: 9.8568651359  
Correct output: -17.9148224328 | Program output: 3.3712051765  
Correct output: 93.2683698204  | Program output: 6.2683698204  
Correct output: 1.1498437373   | Program output: 3.3077951311  
Correct output: 85.1198734399  | Program output: 111.145746585 
Correct output: -62.5035732311 | Program output: -60.5454723681
Correct output: 31.7931803333  | Program output: 3.4358383388  
Correct output: -122.2934290035 | Program output: -108.3353281405
Correct output: 112.9049586254 | Program output: 114.4610110691
Correct output: -15.8996538358 | Program output: 3.591076193   
Correct output: 123.9806904826 | Program output: 118.7743684448
Correct output: -78.3331420378 | Program output: -106.3750411748
Correct output: 66.7769669244  | Program output: 4.1350376382  
Correct output: 3.7173929377   | Program output: 3.393601048   
Correct output: 109.3750668562 | Program output: 134.4563562199
Correct output: 16.5512971727  | Program output: 3.6654563797  
Correct output: 31.1961711525  | Program output: 3.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [12.2072 9 7.1379 11 10.5401 11 20.6874 11 14.9581 9 14.3765 10 7.0691 11 24.1843 10 61.9559 10 21.286 13 87.0 2 2.158 10 26.0259 11 1.9581 7 28.3573 8 13.9581 10 1.5561 11 19.4907 11 5.2063 11 28.0419 10 62.6419 12 0.3238 9 25.0813 10 12.8858 10 27.5927 10]
Total: 783.6804000000001
Mean: 15.673608
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2670.3717267000034
Median total errors in population: 836.5519
Error averages by case: (103.53730809999932 9.783 84.92559020000071 11.421 66.0532444000002 9.552 84.0437237999999 10.452 91.66242730000181 9.546 115.07636990000205 10.376 73.62691219999996 10.429 112.06154120000166 11.313 115.93501570000068 10.764 88.98786050000022 11.529 145.72014500000012 4.109 79.95310199999936 9.668 107.75086919999833 10.164 73.35195670000141 7.853 93.16590800000148 8.457 91.20501140000182 10.219 95.8007771999997 8.012 89.44449629999944 11.403 102.8979014999988 9.742 142.86293200000193 11.488 119.09608900000077 10.609 73.6509556000009 9.689 103.53271469999962 10.366 78.20177300000108 10.809 90.34110179999904 9.733)
Error minima by case: (0.631 2 4.1379 8 0.0985 1 0.3429 1 3.0838 2 4.4717 2 0.1794 1 2.6121 2 38.8918 2 2.1271 1 33.323 1 0.0476 7 0.3375 1 0.0419 1 3.7513 1 4.0838 2 0.0937 2 0.8626 9 0.253 2 0.0927 1 11.8524 8 0.0077 5 1.2245 2 0.5094 6 3.1543 1)
Average genome size in population (length): 74.226
Average program size in population (points): 75.226
Average percent parens in population: 0.013
Minimum age in population: 148.2533820029823
Maximum age in population: 152.8863718468126
Average age in population: 150.3505684989523
Median age in population: 150.3805644095546
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.269
Error (vector) diversity:			 0.271
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 190426814
--- Timings ---
Current time: 1529615312285 milliseconds
Total Time:         428.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.7 seconds, 37.8%
Fitness Testing:    211.1 seconds, 49.3%
Report:              55.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 46896.187700000126
Test mean error for best: 23.44809
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 106.4702111075
Correct output: -30.5973968421 | Program output: -36.7352775358
Correct output: -5.9015288603  | Program output: 5.6385941934  
Correct output: 24.3848067256  | Program output: 4.6973720264  
Correct output: -119.8990795364 | Program output: -103.9409786734
Correct output: 143.1946278344 | Program output: 129.8180820876
Correct output: 10.8625446508  | Program output: 4.7934609064  
Correct output: 127.6458652779 | Program output: 104.4615946989
Correct output: 71.8127365426  | Program output: 10.8568651359 
Correct output: -17.9148224328 | Program output: 4.3712051765  
Correct output: 93.2683698204  | Program output: 7.2683698204  
Correct output: 1.1498437373   | Program output: 4.3077951311  
Correct output: 85.1198734399  | Program output: 112.145746585 
Correct output: -62.5035732311 | Program output: -59.5454723681
Correct output: 31.7931803333  | Program output: 4.4358383388  
Correct output: -122.2934290035 | Program output: -107.3353281405
Correct output: 112.9049586254 | Program output: 115.4610110691
Correct output: -15.8996538358 | Program output: 4.591076193   
Correct output: 123.9806904826 | Program output: 119.7743684448
Correct output: -78.3331420378 | Program output: -105.3750411748
Correct output: 66.7769669244  | Program output: 5.1350376382  
Correct output: 3.7173929377   | Program output: 4.393601048   
Correct output: 109.3750668562 | Program output: 135.4563562199
Correct output: 16.5512971727  | Program output: 4.6654563797  
Correct output: 31.1961711525  | Program output: 4.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mod integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec float_dec in2 float_dec integer_shove float_yank integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [11.2072 9 6.1379 11 11.5401 10 19.6874 10 15.9581 9 13.3765 10 6.0691 11 23.1843 10 60.9559 10 22.286 13 86.0 2 3.158 10 27.0259 11 2.9581 8 27.3573 9 14.9581 10 2.5561 11 20.4907 11 4.2063 11 27.0419 10 61.6419 12 0.6762 10 26.0813 10 11.8858 10 26.5927 11]
Total: 782.0328000000001
Mean: 15.640656
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2062.3086410000024
Median total errors in population: 836.5519
Error averages by case: (73.89208969999947 9.475 59.600919400000706 11.361 46.03866420000008 9.58 59.27503690000067 10.296 71.6074310000014 9.414 86.04719970000053 10.091 48.79261750000044 10.233 83.1762615000003 10.814 96.4880034000005 10.511 69.84105220000023 11.475 115.70153360000013 3.803 61.288552399999794 9.743 79.16947489999963 10.068 52.52144080000085 7.841 67.32072020000099 8.417 71.35508470000137 10.109 67.84151019999997 8.262 64.72767740000036 11.364 74.05883080000018 9.641 119.3044195000008 11.203 98.57256160000033 10.684 53.97642580000004 9.745 76.92807690000038 9.993 55.781205700000235 10.752 64.38785100000047 9.739)
Error minima by case: (0.631 2 3.1379 8 0.0449 1 2.0838 1 2.0838 2 3.4347 2 0.1794 1 0.7512 2 31.4179 1 5.1271 1 29.9619 1 0.1703 7 0.208 1 0.0419 1 4.7513 1 3.0838 2 0.0937 2 2.6411 8 0.253 2 0.0 0 20.5189 9 0.0077 7 3.2245 2 0.4906 6 3.0838 1)
Average genome size in population (length): 76.382
Average program size in population (points): 77.382
Average percent parens in population: 0.013
Minimum age in population: 149.6935001050573
Maximum age in population: 154.0528228561171
Average age in population: 151.6892405539171
Median age in population: 151.7228413077601
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.325
Error (vector) diversity:			 0.328
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 192336389
--- Timings ---
Current time: 1529615316283 milliseconds
Total Time:         432.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.1 seconds, 37.8%
Fitness Testing:    213.2 seconds, 49.3%
Report:              55.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 46946.98530000015
Test mean error for best: 23.47349
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.4702111075
Correct output: -30.5973968421 | Program output: -35.7352775358
Correct output: -5.9015288603  | Program output: 6.6385941934  
Correct output: 24.3848067256  | Program output: 5.6973720264  
Correct output: -119.8990795364 | Program output: -102.9409786734
Correct output: 143.1946278344 | Program output: 130.8180820876
Correct output: 10.8625446508  | Program output: 5.7934609064  
Correct output: 127.6458652779 | Program output: 105.4615946989
Correct output: 71.8127365426  | Program output: 11.8568651359 
Correct output: -17.9148224328 | Program output: 5.3712051765  
Correct output: 93.2683698204  | Program output: 8.2683698204  
Correct output: 1.1498437373   | Program output: 5.3077951311  
Correct output: 85.1198734399  | Program output: 113.145746585 
Correct output: -62.5035732311 | Program output: -58.5454723681
Correct output: 31.7931803333  | Program output: 5.4358383388  
Correct output: -122.2934290035 | Program output: -106.3353281405
Correct output: 112.9049586254 | Program output: 116.4610110691
Correct output: -15.8996538358 | Program output: 5.591076193   
Correct output: 123.9806904826 | Program output: 120.7743684448
Correct output: -78.3331420378 | Program output: -104.3750411748
Correct output: 66.7769669244  | Program output: 6.1350376382  
Correct output: 3.7173929377   | Program output: 5.393601048   
Correct output: 109.3750668562 | Program output: 136.4563562199
Correct output: 16.5512971727  | Program output: 5.6654563797  
Correct output: 31.1961711525  | Program output: 5.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [10.2072 8 5.1379 11 12.5401 11 18.6874 11 16.9581 9 12.3765 10 5.0691 11 22.1843 10 59.9559 9 23.286 13 85.0 2 4.158 10 28.0259 11 3.9581 8 26.3573 9 15.9581 10 3.5561 11 21.4907 11 3.2063 10 26.0419 10 60.6419 11 1.6762 10 27.0813 10 10.8858 10 25.5927 11]
Total: 777.0328000000001
Mean: 15.540656
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2490.455932000003
Median total errors in population: 834.3164999999999
Error averages by case: (93.07496329999987 9.326 77.90423690000075 11.425 62.86226879999951 10.059 74.27490740000052 10.381 90.43010920000192 9.608 103.39384340000012 9.921 64.07964040000051 10.295 104.98804159999987 10.223 114.32644770000037 10.299 85.83993579999952 11.648 143.20426770000014 4.254 77.00098789999988 10.152 94.22109599999914 10.125 72.29423700000156 8.132 83.20183180000134 8.619 88.52324290000189 10.372 87.92420960000047 9.351 79.98776689999995 11.421 93.39970050000011 9.945 107.125716999999 10.666 116.47886410000078 11.202 70.57892829999946 9.801 103.61851410000044 9.893 73.77732159999984 10.652 80.33285209999968 9.842)
Error minima by case: (0.631 2 3.1379 8 0.0985 1 0.3429 1 2.0838 2 0.1094 2 0.1794 1 0.7512 2 12.0419 1 3.1271 1 2.2684 1 0.0982 7 0.3375 1 0.0419 1 6.7513 1 3.0838 2 0.0937 2 0.1204 8 0.2935 2 0.0 0 28.0419 7 0.0025 5 1.3785 2 0.4487 6 6.1543 1)
Average genome size in population (length): 79.238
Average program size in population (points): 80.238
Average percent parens in population: 0.013
Minimum age in population: 150.9611096159652
Maximum age in population: 155.3032411201097
Average age in population: 153.0171413712947
Median age in population: 153.0705511334525
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 77
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.358
Error (vector) diversity:			 0.362
Behavioral diversity:				 0.363
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 194317389
--- Timings ---
Current time: 1529615320393 milliseconds
Total Time:         436.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.6 seconds, 37.7%
Fitness Testing:    215.3 seconds, 49.4%
Report:              56.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 46946.98530000015
Test mean error for best: 23.47349
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.4702111075
Correct output: -30.5973968421 | Program output: -35.7352775358
Correct output: -5.9015288603  | Program output: 6.6385941934  
Correct output: 24.3848067256  | Program output: 5.6973720264  
Correct output: -119.8990795364 | Program output: -102.9409786734
Correct output: 143.1946278344 | Program output: 130.8180820876
Correct output: 10.8625446508  | Program output: 5.7934609064  
Correct output: 127.6458652779 | Program output: 105.4615946989
Correct output: 71.8127365426  | Program output: 11.8568651359 
Correct output: -17.9148224328 | Program output: 5.3712051765  
Correct output: 93.2683698204  | Program output: 8.2683698204  
Correct output: 1.1498437373   | Program output: 5.3077951311  
Correct output: 85.1198734399  | Program output: 113.145746585 
Correct output: -62.5035732311 | Program output: -58.5454723681
Correct output: 31.7931803333  | Program output: 5.4358383388  
Correct output: -122.2934290035 | Program output: -106.3353281405
Correct output: 112.9049586254 | Program output: 116.4610110691
Correct output: -15.8996538358 | Program output: 5.591076193   
Correct output: 123.9806904826 | Program output: 120.7743684448
Correct output: -78.3331420378 | Program output: -104.3750411748
Correct output: 66.7769669244  | Program output: 6.1350376382  
Correct output: 3.7173929377   | Program output: 5.393601048   
Correct output: 109.3750668562 | Program output: 136.4563562199
Correct output: 16.5512971727  | Program output: 5.6654563797  
Correct output: 31.1961711525  | Program output: 5.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [10.2072 8 5.1379 11 12.5401 11 18.6874 11 16.9581 9 12.3765 10 5.0691 11 22.1843 10 59.9559 9 23.286 13 85.0 2 4.158 10 28.0259 11 3.9581 8 26.3573 9 15.9581 10 3.5561 11 21.4907 11 3.2063 10 26.0419 10 60.6419 11 1.6762 10 27.0813 10 10.8858 10 25.5927 11]
Total: 777.0328000000001
Mean: 15.540656
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2387.762068600002
Median total errors in population: 803.233
Error averages by case: (95.46096289999998 9.285 74.2859157000008 11.37 56.79311599999921 10.495 70.97186900000054 10.467 78.36017950000176 9.507 106.75851419999965 9.881 60.147017400000486 10.456 104.00336659999954 9.868 108.33171800000048 10.251 84.16317019999917 12.046 139.9942068000002 4.055 76.29056400000034 10.28 88.38171669999947 10.012 60.664673700000996 7.822 82.02360480000144 8.551 77.79320060000178 10.243 89.5130129000005 9.999 77.6700837000003 11.377 94.56600950000026 10.204 84.1510844999983 10.235 111.90696510000085 11.604 68.10155029999932 9.627 102.58171400000042 9.905 69.37734179999931 10.457 77.68051070000008 9.793)
Error minima by case: (2.85 2 0.5523 8 0.0985 1 0.3429 1 1.0838 2 2.1855 2 0.1794 1 0.2488 2 10.0024 1 1.2123 2 43.0917 1 0.158 7 0.0696 1 0.0419 1 3.7513 2 2.0838 2 0.0937 2 1.3364 9 0.2935 2 1.0 1 4.45 7 0.0026 7 0.9887 2 0.0419 7 3.1543 1)
Average genome size in population (length): 79.327
Average program size in population (points): 80.327
Average percent parens in population: 0.012
Minimum age in population: 152.0675288487743
Maximum age in population: 156.2181525405459
Average age in population: 154.4297778920889
Median age in population: 154.4445297295504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.326
Error (vector) diversity:			 0.328
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 196300639
--- Timings ---
Current time: 1529615324773 milliseconds
Total Time:         440.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.1 seconds, 37.7%
Fitness Testing:    217.4 seconds, 49.4%
Report:              56.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 46894.89770000016
Test mean error for best: 23.44745
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.4702111075
Correct output: -30.5973968421 | Program output: -35.7352775358
Correct output: -5.9015288603  | Program output: 6.6385941934  
Correct output: 24.3848067256  | Program output: 5.6973720264  
Correct output: -119.8990795364 | Program output: -102.9409786734
Correct output: 143.1946278344 | Program output: 130.8180820876
Correct output: 10.8625446508  | Program output: 5.7934609064  
Correct output: 127.6458652779 | Program output: 105.4615946989
Correct output: 71.8127365426  | Program output: 11.8568651359 
Correct output: -17.9148224328 | Program output: 5.3712051765  
Correct output: 93.2683698204  | Program output: 8.2683698204  
Correct output: 1.1498437373   | Program output: 5.3077951311  
Correct output: 85.1198734399  | Program output: 113.145746585 
Correct output: -62.5035732311 | Program output: -58.5454723681
Correct output: 31.7931803333  | Program output: 5.4358383388  
Correct output: -122.2934290035 | Program output: -106.3353281405
Correct output: 112.9049586254 | Program output: 116.4610110691
Correct output: -15.8996538358 | Program output: 5.591076193   
Correct output: 123.9806904826 | Program output: 120.7743684448
Correct output: -78.3331420378 | Program output: -104.3750411748
Correct output: 66.7769669244  | Program output: 6.1350376382  
Correct output: 3.7173929377   | Program output: 5.393601048   
Correct output: 109.3750668562 | Program output: 136.4563562199
Correct output: 16.5512971727  | Program output: 5.6654563797  
Correct output: 31.1961711525  | Program output: 5.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod integer_fromfloat integer_mult integer_fromfloat integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 float_dec integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_dup float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_yankdup integer_rot float_max float_inc float_rot float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult integer_mult float_frominteger float_dup)
Errors: [10.2072 8 5.1379 11 12.5401 11 18.6874 11 16.9581 9 12.3765 10 5.0691 11 22.1843 10 59.9559 9 23.286 13 85.0 2 4.158 10 28.0259 11 3.9581 8 26.3573 9 15.9581 10 3.5561 11 21.4907 11 3.2063 10 26.0419 10 60.6419 11 1.6762 10 27.0813 10 10.8858 10 25.5927 11]
Total: 777.0328000000001
Mean: 15.540656
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2421.7954564000024
Median total errors in population: 783.6804000000001
Error averages by case: (91.75946760000018 9.302 76.7255752000008 11.345 59.246199599999265 10.441 75.50992880000031 10.256 84.24697020000154 9.534 104.47623889999952 9.921 65.06107760000047 10.376 101.01280519999939 9.858 109.49536930000042 10.198 84.63943799999919 12.099 135.80171840000014 4.049 75.43593360000023 10.207 88.09023839999925 10.17 66.57267920000108 7.919 84.34334120000139 8.505 83.84811830000153 10.243 88.12234220000062 10.122 81.27025459999976 11.375 91.99731840000048 10.247 93.86050829999857 10.212 113.16162220000075 11.694 68.43961509999954 9.7 98.2308779000007 9.906 71.02001489999942 10.395 81.58180329999973 9.772)
Error minima by case: (1.5835 2 1.9427 8 0.2682 1 3.3429 2 0.0838 2 7.0203 2 0.1794 1 0.7512 2 3.2379 1 0.2123 1 1.2684 1 0.1434 7 0.3375 1 0.0419 1 2.7513 1 1.0838 2 0.0937 2 0.4882 8 0.2935 2 1.0 1 3.052 8 0.0026 7 2.4911 2 0.7006 7 2.1543 1)
Average genome size in population (length): 79.504
Average program size in population (points): 80.504
Average percent parens in population: 0.012
Minimum age in population: 153.942989494759
Maximum age in population: 157.726201020594
Average age in population: 155.8899122919516
Median age in population: 155.9307759348405
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.329
Error (vector) diversity:			 0.331
Behavioral diversity:				 0.331
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 198288239
--- Timings ---
Current time: 1529615329074 milliseconds
Total Time:         444.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.6 seconds, 37.7%
Fitness Testing:    219.6 seconds, 49.4%
Report:              57.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 47204.29730000017
Test mean error for best: 23.60215
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 109.4702111075
Correct output: -30.5973968421 | Program output: -33.7352775358
Correct output: -5.9015288603  | Program output: 8.6385941934  
Correct output: 24.3848067256  | Program output: 7.6973720264  
Correct output: -119.8990795364 | Program output: -100.9409786734
Correct output: 143.1946278344 | Program output: 132.8180820876
Correct output: 10.8625446508  | Program output: 7.7934609064  
Correct output: 127.6458652779 | Program output: 107.4615946989
Correct output: 71.8127365426  | Program output: 13.8568651359 
Correct output: -17.9148224328 | Program output: 7.3712051765  
Correct output: 93.2683698204  | Program output: 10.2683698204 
Correct output: 1.1498437373   | Program output: 7.3077951311  
Correct output: 85.1198734399  | Program output: 115.145746585 
Correct output: -62.5035732311 | Program output: -56.5454723681
Correct output: 31.7931803333  | Program output: 7.4358383388  
Correct output: -122.2934290035 | Program output: -104.3353281405
Correct output: 112.9049586254 | Program output: 118.4610110691
Correct output: -15.8996538358 | Program output: 7.591076193   
Correct output: 123.9806904826 | Program output: 122.7743684448
Correct output: -78.3331420378 | Program output: -102.3750411748
Correct output: 66.7769669244  | Program output: 8.1350376382  
Correct output: 3.7173929377   | Program output: 7.393601048   
Correct output: 109.3750668562 | Program output: 138.4563562199
Correct output: 16.5512971727  | Program output: 7.6654563797  
Correct output: 31.1961711525  | Program output: 7.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [8.2072 9 3.1379 11 14.5401 11 16.6874 11 18.9581 9 10.3765 10 3.0691 11 20.1843 9 57.9559 10 25.286 12 83.0 2 6.158 10 30.0259 10 5.9581 8 24.3573 9 17.9581 10 5.5561 11 23.4907 11 1.2063 10 24.0419 10 58.6419 12 3.6762 10 29.0813 10 8.8858 10 23.5927 11]
Total: 771.0328000000001
Mean: 15.420656
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2544.2351296000006
Median total errors in population: 783.6804000000001
Error averages by case: (97.1934352000004 9.106 78.31070270000068 11.322 65.1879617999991 10.272 76.8724132000002 10.289 93.48229510000166 9.566 106.37903849999954 9.741 65.95454110000047 10.568 108.69029389999902 9.771 116.28063020000033 10.103 89.41946089999864 11.934 142.10867490000007 4.034 82.0049019 10.267 95.98158539999888 9.958 74.56960690000119 8.237 86.65596490000136 8.958 92.7029223000017 10.282 90.65373990000064 9.979 82.83457129999968 11.318 95.2419602000007 10.012 97.25400249999839 10.224 118.24555390000097 11.601 74.32409330000011 9.969 107.34758690000112 9.836 75.74245359999932 10.435 82.78273909999947 10.232)
Error minima by case: (0.4165 2 0.4154 7 0.0 0 1.6571 1 1.0838 2 1.4317 2 0.1794 1 0.7512 2 37.3371 1 0.2123 1 1.5806 1 0.0885 7 0.4916 1 0.0419 1 2.7513 1 2.0838 2 0.0937 2 1.6042 7 0.106 2 2.964 1 10.3117 8 0.0022 6 2.4911 2 0.0409 7 2.1543 1)
Average genome size in population (length): 81.006
Average program size in population (points): 82.006
Average percent parens in population: 0.012
Minimum age in population: 155.1146919473727
Maximum age in population: 159.3010123535023
Average age in population: 157.2980358644654
Median age in population: 157.2965031347215
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.354
Error (vector) diversity:			 0.358
Behavioral diversity:				 0.358
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 200313439
--- Timings ---
Current time: 1529615333245 milliseconds
Total Time:         449.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.0 seconds, 37.6%
Fitness Testing:    221.8 seconds, 49.4%
Report:              58.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 47204.29730000017
Test mean error for best: 23.60215
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 109.4702111075
Correct output: -30.5973968421 | Program output: -33.7352775358
Correct output: -5.9015288603  | Program output: 8.6385941934  
Correct output: 24.3848067256  | Program output: 7.6973720264  
Correct output: -119.8990795364 | Program output: -100.9409786734
Correct output: 143.1946278344 | Program output: 132.8180820876
Correct output: 10.8625446508  | Program output: 7.7934609064  
Correct output: 127.6458652779 | Program output: 107.4615946989
Correct output: 71.8127365426  | Program output: 13.8568651359 
Correct output: -17.9148224328 | Program output: 7.3712051765  
Correct output: 93.2683698204  | Program output: 10.2683698204 
Correct output: 1.1498437373   | Program output: 7.3077951311  
Correct output: 85.1198734399  | Program output: 115.145746585 
Correct output: -62.5035732311 | Program output: -56.5454723681
Correct output: 31.7931803333  | Program output: 7.4358383388  
Correct output: -122.2934290035 | Program output: -104.3353281405
Correct output: 112.9049586254 | Program output: 118.4610110691
Correct output: -15.8996538358 | Program output: 7.591076193   
Correct output: 123.9806904826 | Program output: 122.7743684448
Correct output: -78.3331420378 | Program output: -102.3750411748
Correct output: 66.7769669244  | Program output: 8.1350376382  
Correct output: 3.7173929377   | Program output: 7.393601048   
Correct output: 109.3750668562 | Program output: 138.4563562199
Correct output: 16.5512971727  | Program output: 7.6654563797  
Correct output: 31.1961711525  | Program output: 7.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [8.2072 9 3.1379 11 14.5401 11 16.6874 11 18.9581 9 10.3765 10 3.0691 11 20.1843 9 57.9559 10 25.286 12 83.0 2 6.158 10 30.0259 10 5.9581 8 24.3573 9 17.9581 10 5.5561 11 23.4907 11 1.2063 10 24.0419 10 58.6419 12 3.6762 10 29.0813 10 8.8858 10 23.5927 11]
Total: 771.0328000000001
Mean: 15.420656
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2285.9290935999957
Median total errors in population: 783.6804000000001
Error averages by case: (88.52346549999996 8.902 65.46251420000083 11.358 56.64802979999915 10.224 62.96444660000062 10.017 79.52173130000166 9.548 103.5710672999996 9.753 52.34032610000045 10.274 96.53772979999947 9.819 105.48634360000038 9.906 80.82004739999921 11.885 136.6616215000001 4.184 73.19666970000034 10.294 91.34387949999916 9.928 60.6993026000011 8.487 69.62312200000122 8.909 79.09190950000165 10.254 86.45297070000065 10.039 69.87171320000014 11.358 90.74773430000027 9.89 86.59702749999828 10.187 108.23743100000091 11.373 64.30459300000055 10.221 96.97470620000054 9.868 63.8148458999991 10.376 69.19686540000028 10.185)
Error minima by case: (0.4165 2 2.1379 7 0.0 0 3.3429 1 0.9162 2 5.0203 2 0.1794 1 0.2488 2 20.8546 1 3.1291 1 0.2684 1 0.158 7 0.3375 1 0.0419 1 8.3643 1 0.0838 2 0.074 2 8.0874 8 0.106 2 1.0 1 4.8189 7 2.0E-4 7 2.1925 2 0.0419 7 9.9581 1)
Average genome size in population (length): 83.126
Average program size in population (points): 84.126
Average percent parens in population: 0.012
Minimum age in population: 156.1146919473727
Maximum age in population: 160.8830404647679
Average age in population: 158.666076532919
Median age in population: 158.7029166478207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.387
Error (vector) diversity:			 0.391
Behavioral diversity:				 0.392
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 202391664
--- Timings ---
Current time: 1529615337639 milliseconds
Total Time:         453.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.4 seconds, 37.6%
Fitness Testing:    224.1 seconds, 49.4%
Report:              58.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 45545.55390000019
Test mean error for best: 22.77278
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 108.1163739517
Correct output: -30.5973968421 | Program output: -32.7352775358
Correct output: -5.9015288603  | Program output: 9.5610839998  
Correct output: 24.3848067256  | Program output: 8.6973720264  
Correct output: -119.8990795364 | Program output: -99.9409786734
Correct output: 143.1946278344 | Program output: 132.1033533343
Correct output: 10.8625446508  | Program output: 8.7934609064  
Correct output: 127.6458652779 | Program output: 101.6785414471
Correct output: 71.8127365426  | Program output: 14.5431163625 
Correct output: -17.9148224328 | Program output: 8.353635061   
Correct output: 93.2683698204  | Program output: 11.2683698204 
Correct output: 1.1498437373   | Program output: 8.2932708358  
Correct output: 85.1198734399  | Program output: 116.145746585 
Correct output: -62.5035732311 | Program output: -55.5454723681
Correct output: 31.7931803333  | Program output: 8.4358383388  
Correct output: -122.2934290035 | Program output: -103.3353281405
Correct output: 112.9049586254 | Program output: 117.4147065334
Correct output: -15.8996538358 | Program output: 8.591076193   
Correct output: 123.9806904826 | Program output: 121.826768925 
Correct output: -78.3331420378 | Program output: -101.3750411748
Correct output: 66.7769669244  | Program output: 9.0830167112  
Correct output: 3.7173929377   | Program output: 8.375512176   
Correct output: 109.3750668562 | Program output: 122.8121394023
Correct output: 16.5512971727  | Program output: 8.6346385068  
Correct output: 31.1961711525  | Program output: 8.6034605132  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction in1} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap in1 integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc integer_rot float_max float_inc float_max float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth)
Errors: [9.5611 11 2.1379 11 15.4626 11 15.6874 11 19.9581 9 11.0913 9 2.0691 11 25.9673 10 57.2696 10 26.2685 13 82.0 2 7.1434 10 31.0259 11 6.9581 8 23.3573 9 18.9581 10 4.5097 9 24.4907 11 2.1539 8 23.0419 10 57.694 11 4.6581 9 13.4371 12 7.9167 12 22.5927 11]
Total: 764.4104999999998
Mean: 15.28821
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2204.978238999995
Median total errors in population: 783.0328000000001
Error averages by case: (82.24011839999983 8.693 67.60390690000071 11.387 52.72451759999936 10.444 64.73527110000055 10.178 77.28613790000135 9.492 93.60628649999963 9.586 54.34284870000039 10.295 89.50391849999981 9.662 102.90442720000028 9.777 75.9682275999996 11.921 127.36037950000015 4.166 66.30423280000039 10.288 90.98147249999938 9.879 59.62983800000081 8.483 72.4606701000011 8.955 76.38131580000139 10.229 79.44798680000056 9.847 72.19560410000021 11.318 83.22536010000016 9.618 85.95437049999855 10.198 103.52362080000069 11.195 60.04347140000055 10.212 89.7901452000003 9.748 60.55838189999937 10.395 70.02172910000033 10.218)
Error minima by case: (0.4165 2 2.1379 8 0.0 0 1.6571 1 1.0838 2 5.0203 1 0.8206 1 0.3996 2 1.1873 1 0.219 1 0.2684 1 0.3605 7 0.0532 1 0.0419 1 1.7513 1 2.0838 2 0.073 2 0.1256 8 0.2063 2 0.0 0 2.2108 7 0.0352 7 0.2342 3 0.5094 6 1.1543 1)
Average genome size in population (length): 85.035
Average program size in population (points): 86.035
Average percent parens in population: 0.012
Minimum age in population: 157.1146919473727
Maximum age in population: 161.9316625530827
Average age in population: 159.9990623095976
Median age in population: 160.0298055312965
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.357
Error (vector) diversity:			 0.364
Behavioral diversity:				 0.365
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 204517589
--- Timings ---
Current time: 1529615341998 milliseconds
Total Time:         457.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.0 seconds, 37.6%
Fitness Testing:    226.4 seconds, 49.5%
Report:              59.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 47770.20990000018
Test mean error for best: 23.88510
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.4702111075
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.6385941934 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.8180820876
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 110.4615946989
Correct output: 71.8127365426  | Program output: 16.8568651359 
Correct output: -17.9148224328 | Program output: 10.3712051765 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.3077951311 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 121.4610110691
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 125.7743684448
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.1350376382 
Correct output: 3.7173929377   | Program output: 10.393601048  
Correct output: 109.3750668562 | Program output: 141.4563562199
Correct output: 16.5512971727  | Program output: 10.6654563797 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_yankdup} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_yankdup float_div integer_rot float_max float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc integer_dup_times float_dup_items float_max float_inc float_dup_items float_inc float_yankdup float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [5.2072 8 0.1379 10 17.5401 11 13.6874 11 21.9581 10 7.3765 10 0.0691 9 17.1843 10 54.9559 10 28.286 12 80.0 1 9.158 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 8.5561 12 26.4907 11 1.7937 10 21.0419 9 55.6419 12 6.6762 11 32.0813 10 5.8858 9 20.5927 11]
Total: 763.6202
Mean: 15.272404
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2705.1009044999946
Median total errors in population: 783.8566000000001
Error averages by case: (102.37708580000061 8.907 86.01893690000067 11.412 70.49854639999927 10.416 83.57090370000014 10.301 101.7837079000017 9.543 113.22825359999965 9.615 73.7884494999998 10.35 114.77297459999926 9.74 119.50658100000041 9.797 94.49870819999899 11.832 141.05321190000012 4.298 85.92401760000006 10.25 110.23901129999847 9.749 84.74440030000146 8.524 92.49255000000122 9.051 102.07787080000175 10.274 99.46053620000042 9.941 93.1105877999995 11.373 102.33700680000081 9.607 105.55681059999849 10.195 121.1824357000009 11.21 79.34201660000056 10.14 110.92361180000074 9.85 80.15393099999973 10.414 89.37575849999948 10.294)
Error minima by case: (0.15 2 0.1379 8 0.0 0 1.3429 1 0.0838 2 3.0203 1 0.0691 1 0.8311 2 17.1873 1 0.7877 1 2.2684 1 0.1289 7 0.0 0 0.0419 1 0.7513 1 0.0838 3 0.2892 2 5.5903 8 0.1915 2 1.0 1 22.223 8 0.0541 7 0.4911 2 0.0419 6 0.1543 1)
Average genome size in population (length): 85.531
Average program size in population (points): 86.531
Average percent parens in population: 0.012
Minimum age in population: 158.1146919473727
Maximum age in population: 163.4105110245722
Average age in population: 161.4119175216849
Median age in population: 161.4838962086921
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.356
Error (vector) diversity:			 0.365
Behavioral diversity:				 0.366
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 206655914
--- Timings ---
Current time: 1529615346495 milliseconds
Total Time:         462.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.5 seconds, 37.5%
Fitness Testing:    228.7 seconds, 49.5%
Report:              59.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 47770.20990000018
Test mean error for best: 23.88510
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 112.4702111075
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.6385941934 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.8180820876
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 110.4615946989
Correct output: 71.8127365426  | Program output: 16.8568651359 
Correct output: -17.9148224328 | Program output: 10.3712051765 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.3077951311 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 121.4610110691
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 125.7743684448
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.1350376382 
Correct output: 3.7173929377   | Program output: 10.393601048  
Correct output: 109.3750668562 | Program output: 141.4563562199
Correct output: 16.5512971727  | Program output: 10.6654563797 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction float_frominteger} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction tagged_365} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_dup_items integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub float_frominteger float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc tagged_365 float_inc float_yankdup integer_dec float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [5.2072 8 0.1379 10 17.5401 11 13.6874 11 21.9581 10 7.3765 10 0.0691 9 17.1843 10 54.9559 10 28.286 12 80.0 1 9.158 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 8.5561 12 26.4907 11 1.7937 10 21.0419 9 55.6419 12 6.6762 11 32.0813 10 5.8858 9 20.5927 11]
Total: 763.6202
Mean: 15.272404
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2489.5971456999964
Median total errors in population: 792.0328000000001
Error averages by case: (86.56793510000007 9.177 79.93304900000066 11.373 65.77818149999928 10.498 76.71944100000043 10.197 96.4716129000017 9.751 103.01593759999975 9.534 66.50830690000043 10.221 92.94814309999973 9.705 110.93665680000021 9.962 91.8457643999993 11.777 129.1871324000001 4.187 85.06792910000028 10.263 98.73512889999895 9.694 77.26452850000143 8.709 85.91387850000139 8.895 96.29874430000174 10.369 85.55639060000048 9.846 88.74489629999985 11.354 87.92654740000022 9.447 98.73692549999848 10.24 114.6354696000009 11.294 76.26959490000048 10.139 91.31044590000029 9.908 72.91004859999958 10.497 83.03945689999966 10.238)
Error minima by case: (0.15 2 0.1379 7 0.0 0 0.6571 1 0.8153 2 0.0203 1 0.0691 1 0.4755 2 20.8546 1 2.1901 1 1.2684 1 0.158 2 0.3375 1 0.0419 1 6.7513 1 0.7904 2 0.074 2 0.9878 8 0.1169 2 0.0 0 4.8189 2 0.0167 2 0.4911 2 0.4337 2 6.1543 1)
Average genome size in population (length): 86.864
Average program size in population (points): 87.864
Average percent parens in population: 0.011
Minimum age in population: 159.1146919473727
Maximum age in population: 165.3521193107879
Average age in population: 162.9370537973244
Median age in population: 163.0170984323753
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.409
Error (vector) diversity:			 0.421
Behavioral diversity:				 0.422
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 208827639
--- Timings ---
Current time: 1529615350716 milliseconds
Total Time:         466.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.9 seconds, 37.5%
Fitness Testing:    230.9 seconds, 49.5%
Report:              60.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 45902.027300000154
Test mean error for best: 22.95101
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.1163739517
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.5610839998 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 134.1033533343
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 103.6785414471
Correct output: 71.8127365426  | Program output: 16.5431163625 
Correct output: -17.9148224328 | Program output: 10.353635061  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2932708358 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.4147065334
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.826768925 
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0830167112 
Correct output: 3.7173929377   | Program output: 10.375512176  
Correct output: 109.3750668562 | Program output: 124.8121394023
Correct output: 16.5512971727  | Program output: 10.6346385068 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction in1} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_shove} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap in1 integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc integer_rot float_max float_inc float_max float_inc float_dup_items float_dup_items float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc integer_shove print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [7.5611 10 0.1379 10 17.4626 11 13.6874 11 21.9581 10 9.0913 9 0.0691 9 23.9673 10 55.2696 10 28.2685 12 80.0 1 9.1434 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 6.5097 9 26.4907 11 0.1539 7 21.0419 9 55.694 11 6.6581 10 15.4371 12 5.9167 11 20.5927 11]
Total: 751.4104999999998
Mean: 15.02821
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2707.0902242999964
Median total errors in population: 778.3558499999999
Error averages by case: (100.86371050000058 9.256 85.21459120000071 11.434 72.92018859999929 10.472 85.0831264000001 10.251 102.5280718000018 9.679 111.17865079999967 9.496 75.3142766999999 10.257 109.40927349999946 9.664 113.55472930000025 10.051 100.33957379999916 11.637 137.12329410000007 4.154 91.7197678000001 10.33 109.29418719999873 9.722 83.13741340000148 8.625 94.17992110000117 8.978 102.25131100000178 10.294 98.48346690000034 9.925 97.26554399999986 11.47 98.96056000000036 9.368 102.6519716999984 10.151 121.08119010000094 11.479 84.52411950000055 10.182 108.70627980000057 9.939 82.13590299999986 10.566 91.58210209999966 10.207)
Error minima by case: (0.4388 2 0.1379 8 0.0 0 0.3429 1 0.9162 2 2.0203 1 0.0127 1 0.4755 2 0.1873 1 0.1271 1 0.7316 1 0.3723 1 0.0 0 0.0419 1 0.2487 1 0.0838 2 0.074 2 2.0975 8 0.106 2 0.0 0 0.1811 2 0.0326 1 0.4911 2 0.0419 2 0.1543 1)
Average genome size in population (length): 88.966
Average program size in population (points): 89.966
Average percent parens in population: 0.011
Minimum age in population: 161.4060983483242
Maximum age in population: 166.532120418354
Average age in population: 164.3927093571865
Median age in population: 164.4426995148716
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.43
Error (vector) diversity:			 0.437
Behavioral diversity:				 0.437
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 211051839
--- Timings ---
Current time: 1529615355307 milliseconds
Total Time:         471.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.5 seconds, 37.5%
Fitness Testing:    233.4 seconds, 49.5%
Report:              61.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 45902.027300000154
Test mean error for best: 22.95101
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.1163739517
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.5610839998 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 134.1033533343
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 103.6785414471
Correct output: 71.8127365426  | Program output: 16.5431163625 
Correct output: -17.9148224328 | Program output: 10.353635061  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2932708358 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.4147065334
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.826768925 
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0830167112 
Correct output: 3.7173929377   | Program output: 10.375512176  
Correct output: 109.3750668562 | Program output: 124.8121394023
Correct output: 16.5512971727  | Program output: 10.6346385068 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction in1} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_shove} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap in1 integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc integer_rot float_max float_inc float_max float_inc float_dup_items float_dup_items float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc integer_shove print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [7.5611 10 0.1379 10 17.4626 11 13.6874 11 21.9581 10 9.0913 9 0.0691 9 23.9673 10 55.2696 10 28.2685 12 80.0 1 9.1434 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 6.5097 9 26.4907 11 0.1539 7 21.0419 9 55.694 11 6.6581 10 15.4371 12 5.9167 11 20.5927 11]
Total: 751.4104999999998
Mean: 15.02821
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2566.305645699997
Median total errors in population: 775.0328000000001
Error averages by case: (89.1922676000002 9.041 84.03277870000059 11.357 70.55230059999931 10.526 79.23500720000055 10.223 103.5673870000017 9.862 100.79024739999973 9.262 69.00717540000015 10.019 98.8563682999997 9.652 114.64554780000024 10.119 94.35135199999931 11.678 131.35028210000013 4.101 86.80857180000012 10.34 97.46851519999912 9.651 84.03096640000147 8.702 87.87566310000128 8.885 103.25732270000175 10.341 88.91197970000032 9.833 94.01071939999966 11.451 88.95588820000017 9.037 98.35362129999851 10.093 117.7160341000009 11.607 79.00499060000048 10.265 98.32585440000035 9.927 74.36994169999976 10.666 84.82486299999987 10.172)
Error minima by case: (1.1408 2 0.1379 8 0.0 0 0.1304 1 0.9162 2 0.0459 1 0.0127 1 0.5245 2 8.1873 1 0.1101 1 0.7316 1 0.1339 1 0.0 0 0.0419 1 7.7513 1 0.0838 3 0.1754 2 0.1422 9 0.1169 2 0.0 0 5.2298 2 0.0022 1 0.4911 2 0.0419 2 7.1543 1)
Average genome size in population (length): 91.334
Average program size in population (points): 92.334
Average percent parens in population: 0.011
Minimum age in population: 162.4060983483242
Maximum age in population: 167.6852288494039
Average age in population: 165.8099418437989
Median age in population: 165.8591908188947
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.439
Error (vector) diversity:			 0.445
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 213335314
--- Timings ---
Current time: 1529615359647 milliseconds
Total Time:         475.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.0 seconds, 37.4%
Fitness Testing:    235.6 seconds, 49.6%
Report:              61.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 45902.027300000154
Test mean error for best: 22.95101
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.1163739517
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.5610839998 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 134.1033533343
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 103.6785414471
Correct output: 71.8127365426  | Program output: 16.5431163625 
Correct output: -17.9148224328 | Program output: 10.353635061  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2932708358 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.4147065334
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.826768925 
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0830167112 
Correct output: 3.7173929377   | Program output: 10.375512176  
Correct output: 109.3750668562 | Program output: 124.8121394023
Correct output: 16.5512971727  | Program output: 10.6346385068 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_swap float_mod print_float float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [7.5611 10 0.1379 10 17.4626 11 13.6874 11 21.9581 10 9.0913 9 0.0691 9 23.9673 10 55.2696 10 28.2685 12 80.0 1 9.1434 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 6.5097 9 26.4907 11 0.1539 7 21.0419 9 55.694 11 6.6581 10 15.4371 12 5.9167 11 20.5927 11]
Total: 751.4104999999998
Mean: 15.02821
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2619.9018215999995
Median total errors in population: 772.4104999999998
Error averages by case: (86.14787780000037 9.132 86.81457400000066 11.218 70.52577049999928 10.504 82.75828539999999 10.242 110.18068210000196 9.92 94.62084259999985 9.282 72.98060839999974 9.715 97.92150159999969 9.66 110.18553610000012 10.068 100.40217989999927 11.618 128.1416772000001 3.795 93.4820955 10.349 103.47095389999849 9.889 92.42479410000175 8.573 93.26396890000146 8.913 109.65279060000205 10.249 85.3728090000003 9.841 98.58701839999969 11.431 83.82180870000002 8.937 106.4644295999983 9.791 117.041776600001 11.498 85.3321337000005 10.322 97.79549170000021 10.029 77.98596900000004 10.664 88.72324629999927 10.163)
Error minima by case: (0.1548 2 0.1379 9 0.0 0 0.6571 1 0.0838 2 0.0203 1 0.0127 1 0.0388 2 2.2911 1 0.2123 1 19.1646 1 0.1022 1 0.0 0 0.0419 1 0.2487 1 0.0838 2 0.0187 2 1.1422 9 0.1169 2 0.0 0 7.3268 2 0.3238 1 0.4911 2 0.1142 2 0.8457 1)
Average genome size in population (length): 92.79
Average program size in population (points): 93.79
Average percent parens in population: 0.011
Minimum age in population: 164.6328697390625
Maximum age in population: 169.2673678971717
Average age in population: 167.2725560333078
Median age in population: 167.2937949641415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.426
Error (vector) diversity:			 0.432
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 215655589
--- Timings ---
Current time: 1529615364191 milliseconds
Total Time:         479.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.5 seconds, 37.4%
Fitness Testing:    238.0 seconds, 49.6%
Report:              62.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 45902.027300000154
Test mean error for best: 22.95101
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.1163739517
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.5610839998 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 134.1033533343
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 103.6785414471
Correct output: 71.8127365426  | Program output: 16.5431163625 
Correct output: -17.9148224328 | Program output: 10.353635061  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2932708358 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.4147065334
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.826768925 
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0830167112 
Correct output: 3.7173929377   | Program output: 10.375512176  
Correct output: 109.3750668562 | Program output: 124.8121394023
Correct output: 16.5512971727  | Program output: 10.6346385068 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_frominteger} {:instruction float_min} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank})
Best program: (float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_fromfloat integer_yank print_integer float_frominteger float_min float_shove integer_yankdup integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc integer_rot float_max float_inc float_dec float_inc float_dup_items float_inc integer_rot float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank)
Errors: [7.5611 10 0.1379 10 17.4626 11 13.6874 11 21.9581 10 9.0913 9 0.0691 9 23.9673 10 55.2696 10 28.2685 12 80.0 1 9.1434 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 6.5097 9 26.4907 11 0.1539 7 21.0419 9 55.694 11 6.6581 10 15.4371 12 5.9167 11 20.5927 11]
Total: 751.4104999999998
Mean: 15.02821
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2676.877511900001
Median total errors in population: 771.0328000000001
Error averages by case: (91.94867010000047 9.142 83.8791291000005 11.163 76.40064259999923 10.689 84.73151720000025 10.313 102.58512530000195 10.209 104.53832589999985 9.297 75.53665809999971 9.472 103.78133909999978 9.668 117.74365180000007 10.269 105.66305759999949 11.662 130.1131722000001 3.806 95.89260150000008 10.305 108.97063699999859 9.857 81.98543930000166 8.619 92.40060510000146 8.932 102.30772500000198 10.323 96.84831340000005 9.934 100.43207499999944 11.439 93.86274539999972 8.86 97.7256845999984 9.742 122.18605690000115 11.48 88.50103070000043 10.429 100.10691650000022 10.232 81.72207540000014 10.499 90.46231709999931 10.211)
Error minima by case: (0.1548 2 0.1379 8 0.0 0 0.3429 1 2.0838 2 0.9797 1 0.0127 1 0.0388 2 12.2601 1 1.7877 1 0.7316 1 0.1498 6 0.0 0 0.0419 1 0.7513 1 2.9162 2 0.4634 2 0.4135 8 0.0905 2 1.0 1 17.2959 6 0.0308 7 0.4911 2 0.0419 6 0.1543 1)
Average genome size in population (length): 94.117
Average program size in population (points): 95.117
Average percent parens in population: 0.011
Minimum age in population: 166.4246685658353
Maximum age in population: 170.5042696154404
Average age in population: 168.6791306526442
Median age in population: 168.7122214312405
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.421
Error (vector) diversity:			 0.425
Behavioral diversity:				 0.425
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 218008914
--- Timings ---
Current time: 1529615368978 milliseconds
Total Time:         484.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.1 seconds, 37.4%
Fitness Testing:    240.4 seconds, 49.6%
Report:              62.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod print_float float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2448.6131989000005
Median total errors in population: 771.22165
Error averages by case: (84.79465470000054 9.328 79.28732510000044 11.208 70.50821819999935 10.668 73.88561310000031 10.299 92.20621910000162 10.211 94.51755019999992 9.12 64.83076470000024 9.44 96.98613500000009 9.607 108.854458 10.162 92.12607059999988 11.561 131.8358465000001 3.863 83.8657214000003 10.3 100.44632019999887 9.791 73.36126190000141 8.499 83.20184530000121 8.85 91.72957980000164 10.251 85.71094119999991 9.491 90.81339899999954 11.41 84.78388609999995 8.433 89.02574649999855 9.548 112.405919000001 11.294 76.16781520000032 10.334 93.23496730000001 10.43 69.53063040000015 10.693 79.59531039999976 10.116)
Error minima by case: (0.2072 2 0.1379 7 0.0 0 0.3429 1 1.0838 2 0.0203 1 0.0127 1 0.7852 2 23.3949 1 1.6077 1 1.7316 1 0.9113 1 0.0 0 0.9581 1 2.7513 1 1.9162 2 0.0335 2 4.463 9 0.0905 2 0.0 0 18.7971 2 0.0121 1 0.4911 2 0.0419 2 2.1543 1)
Average genome size in population (length): 95.6
Average program size in population (points): 96.6
Average percent parens in population: 0.010
Minimum age in population: 167.9250908232529
Maximum age in population: 171.9157182377022
Average age in population: 170.0239461723864
Median age in population: 170.0590481760588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.417
Error (vector) diversity:			 0.424
Behavioral diversity:				 0.424
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 220399489
--- Timings ---
Current time: 1529615373587 milliseconds
Total Time:         489.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.7 seconds, 37.3%
Fitness Testing:    242.8 seconds, 49.6%
Report:              63.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod print_float float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2521.8852431999985
Median total errors in population: 767.9053499999999
Error averages by case: (93.58788300000089 9.725 80.40753420000044 11.189 70.98188819999939 10.524 75.09920490000025 10.321 97.58949360000179 10.238 104.71927190000025 9.296 66.06097840000014 9.367 102.7731891000003 9.873 108.98647329999986 10.114 91.85409860000026 11.458 136.40184140000005 3.753 82.01516490000034 10.339 99.4343408999986 9.977 79.11890260000156 8.471 84.74973560000144 8.891 97.08846640000186 10.291 95.5592474999996 9.376 92.15150889999961 11.437 92.39862100000029 8.204 90.48658409999835 9.519 112.8601378000012 11.127 75.78589050000016 10.303 95.40799919999986 10.93 70.00240520000058 10.881 80.59738199999975 10.163)
Error minima by case: (0.1548 2 0.1379 7 0.0 0 0.3429 1 1.9162 2 1.0626 1 0.0127 1 0.0388 2 20.229 1 1.2123 1 2.546 1 0.2112 1 0.0 0 0.9581 1 0.2487 1 0.9162 2 0.1379 2 1.5162 8 0.0905 2 0.0 0 5.389 2 0.1967 1 0.5089 2 0.0338 2 0.1543 1)
Average genome size in population (length): 96.812
Average program size in population (points): 97.812
Average percent parens in population: 0.010
Minimum age in population: 169.1027713860738
Maximum age in population: 173.4612097778521
Average age in population: 171.4223684296392
Median age in population: 171.441308473112
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.405
Error (vector) diversity:			 0.411
Behavioral diversity:				 0.411
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 222820014
--- Timings ---
Current time: 1529615378374 milliseconds
Total Time:         494.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.1 seconds, 37.3%
Fitness Testing:    245.4 seconds, 49.7%
Report:              64.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction in1} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos float_sin integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap in1 integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2968.267532799998
Median total errors in population: 811.0540000000001
Error averages by case: (113.82511190000123 9.475 98.25306180000048 11.078 83.28196019999943 10.485 92.64796159999968 10.125 114.85746160000181 10.206 124.39221170000016 9.08 84.75271679999916 8.966 124.36409370000061 9.476 122.68966829999971 10.118 111.35387180000053 11.294 151.0384174000001 3.795 105.0801730000002 10.395 112.9721578999985 9.797 95.75291540000131 8.565 103.06828080000126 8.814 114.54731280000185 10.285 114.04630569999935 9.021 111.22673199999927 11.499 113.13410840000046 7.822 107.52937279999855 9.494 127.91456760000098 11.194 96.61195140000018 10.409 116.03049039999942 10.562 88.06330160000051 10.986 97.87732619999905 10.015)
Error minima by case: (0.1548 2 0.1379 8 0.0 0 0.3429 1 1.5369 2 0.7121 1 0.0127 1 0.0388 2 3.8669 1 1.8729 1 0.2684 1 0.0037 1 0.0 0 0.0419 1 1.7513 2 0.5369 2 0.3673 2 0.366 8 0.0376 2 0.0 0 0.1811 2 0.1994 1 0.5089 2 0.0419 2 1.1543 1)
Average genome size in population (length): 96.833
Average program size in population (points): 97.833
Average percent parens in population: 0.010
Minimum age in population: 170.2982726745145
Maximum age in population: 174.5467627449296
Average age in population: 172.817231587771
Median age in population: 172.8579628694885
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.407
Error (vector) diversity:			 0.411
Behavioral diversity:				 0.412
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 225241189
--- Timings ---
Current time: 1529615382873 milliseconds
Total Time:         498.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.6 seconds, 37.2%
Fitness Testing:    247.8 seconds, 49.7%
Report:              65.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float})
Best program: (float_swap float_swap float_swap float_swap float_mod print_float float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 print_integer float_mult float_min float_shove float_flush integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3193.986219
Median total errors in population: 784.3049999999998
Error averages by case: (121.89807160000123 9.703 107.92459870000043 11.124 93.17103969999954 10.487 100.16272909999974 10.243 125.24294450000187 10.328 131.09408080000017 9.308 92.50157289999905 9.166 132.0659483000006 9.715 133.40435639999976 10.241 121.29455890000065 11.401 155.87975660000004 4.015 114.00167840000027 10.414 124.3460397999983 9.889 106.29694430000133 8.768 108.61664340000135 8.914 124.904552300002 10.44 121.71931359999942 9.225 117.13760059999927 11.527 119.69395170000054 8.111 117.2443913999986 9.606 141.02880660000042 11.239 107.15672110000018 10.422 125.21822209999931 10.826 100.52496290000063 10.98 105.17473329999886 10.19)
Error minima by case: (0.1548 2 0.1379 8 0.0 0 0.6571 1 0.9162 2 0.286 1 0.0127 1 0.0388 2 4.6151 1 1.0419 1 2.7316 1 0.0 0 0.0 0 0.0419 2 3.2487 1 0.0838 2 0.5097 2 1.0122 8 0.0018 2 0.0 0 0.3632 2 0.1324 1 0.5089 2 0.0419 1 3.8457 1)
Average genome size in population (length): 97.34
Average program size in population (points): 98.34
Average percent parens in population: 0.010
Minimum age in population: 171.8067821300097
Maximum age in population: 176.0504439283146
Average age in population: 174.115733761833
Median age in population: 174.1488534476312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.397
Error (vector) diversity:			 0.403
Behavioral diversity:				 0.404
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 227674964
--- Timings ---
Current time: 1529615387736 milliseconds
Total Time:         503.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.1 seconds, 37.2%
Fitness Testing:    250.5 seconds, 49.8%
Report:              65.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod print_float float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 print_integer float_mult float_min float_shove integer_sub integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_div float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3282.4950233999984
Median total errors in population: 785.3813999999999
Error averages by case: (118.97868210000162 9.642 109.99800860000049 11.099 100.90375279999952 10.482 106.55414049999897 9.993 129.5655568000019 10.341 128.0760282 9.361 98.30155049999865 8.866 130.93622040000065 9.722 136.61202159999976 10.154 126.85452210000088 11.395 159.75335490000006 3.955 121.90322100000006 10.477 128.1658426999979 9.97 112.0798396000016 8.687 116.14099850000149 8.742 129.13356740000202 10.427 117.94909369999924 9.271 124.88774309999873 11.544 117.10108580000059 8.033 125.99098579999826 9.648 144.8609324000005 11.208 113.28431490000017 10.435 121.63654319999925 10.836 105.56328390000037 11.055 111.98473289999822 9.936)
Error minima by case: (0.1548 2 0.1379 7 0.0 0 1.3429 1 1.9162 2 1.4268 1 0.0095 1 0.0388 2 1.1873 1 0.4388 1 4.2684 1 0.1434 7 0.0 0 0.0419 1 0.7513 1 0.9162 2 0.4634 2 2.6914 8 0.0905 2 0.0 0 6.1811 8 0.0326 7 0.0064 2 0.0419 7 0.1543 1)
Average genome size in population (length): 98.023
Average program size in population (points): 99.023
Average percent parens in population: 0.010
Minimum age in population: 173.3024712492319
Maximum age in population: 177.4048105587024
Average age in population: 175.4530950464656
Median age in population: 175.4905598817355
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.403
Error (vector) diversity:			 0.408
Behavioral diversity:				 0.408
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 230125939
--- Timings ---
Current time: 1529615392347 milliseconds
Total Time:         508.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.7 seconds, 37.1%
Fitness Testing:    252.9 seconds, 49.8%
Report:              66.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction in1} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos float_dup_times integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap in1 integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2624.543826899999
Median total errors in population: 780.7879
Error averages by case: (99.91976100000105 9.124 82.66851170000061 11.003 71.98399369999946 10.199 77.2074478000004 9.992 100.31475720000174 10.205 109.92086759999985 9.198 69.2276061000002 8.873 116.33821709999994 9.358 107.60205089999963 10.07 98.95108660000007 11.294 130.79818530000014 3.895 91.75277780000015 10.332 105.41238399999868 9.606 79.7096906000013 8.633 86.27365570000129 8.716 100.11469320000184 10.352 97.1678853000001 8.992 95.4639335999995 11.455 99.0811627000001 7.718 98.32477379999851 9.589 118.48498930000058 10.986 84.34922989999997 10.323 101.46625659999991 10.508 77.43732800000045 10.922 83.26258139999968 9.967)
Error minima by case: (0.1548 2 0.1379 8 0.0 0 0.3429 1 0.9162 2 0.0913 1 0.0127 1 0.0388 2 1.1873 1 3.2123 1 0.9357 1 0.0024 6 0.0 0 0.0419 2 0.7513 1 0.0838 2 0.5366 2 1.1422 8 0.0376 2 0.6669 1 5.0976 7 0.0387 7 0.0064 2 0.0419 6 0.1543 1)
Average genome size in population (length): 99.567
Average program size in population (points): 100.567
Average percent parens in population: 0.010
Minimum age in population: 174.6086543097383
Maximum age in population: 178.7177880388583
Average age in population: 176.7410948434667
Median age in population: 176.7645793524405
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.432
Error (vector) diversity:			 0.435
Behavioral diversity:				 0.435
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 232615414
--- Timings ---
Current time: 1529615396997 milliseconds
Total Time:         512.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.2 seconds, 37.1%
Fitness Testing:    255.4 seconds, 49.8%
Report:              67.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_min} {:instruction float_shove} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod print_float float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 float_min float_shove float_flush integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2717.625535100001
Median total errors in population: 783.0417999999999
Error averages by case: (101.13693360000109 8.861 91.60019470000056 11.053 77.8338066999997 10.079 83.74416489999989 10.105 106.68625960000158 10.269 108.04553809999969 9.355 74.27789460000008 8.965 115.0083228999997 9.165 114.96584809999965 10.048 101.9004028999998 11.227 136.12472980000015 3.979 94.91046470000003 10.369 108.45724259999864 9.671 87.95985160000124 8.629 92.30740220000114 8.825 106.29279030000163 10.376 97.71862020000042 9.05 100.48969069999936 11.49 97.89132619999994 7.536 105.08320679999866 9.604 119.42996890000009 10.845 87.03728869999985 10.373 99.50193350000015 10.499 78.69614450000016 10.907 89.19850829999952 10.047)
Error minima by case: (0.4389 2 0.1379 8 0.0 0 0.6571 1 1.9162 2 1.0913 1 0.0127 1 0.0388 2 38.3515 1 1.9581 1 0.7316 1 0.0194 7 0.0 0 0.0419 2 1.2487 1 0.9162 2 0.1379 2 0.07 7 0.0376 2 1.0 1 9.341 8 0.1618 7 0.4911 2 0.0217 6 1.8457 1)
Average genome size in population (length): 101.549
Average program size in population (points): 102.549
Average percent parens in population: 0.010
Minimum age in population: 175.6086543097383
Maximum age in population: 180.4108606181165
Average age in population: 177.9969435186735
Median age in population: 177.9862569482958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.421
Error (vector) diversity:			 0.424
Behavioral diversity:				 0.425
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 235154239
--- Timings ---
Current time: 1529615402015 milliseconds
Total Time:         517.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.1 seconds, 37.1%
Fitness Testing:    257.9 seconds, 49.8%
Report:              67.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos integer_mult integer_fromfloat integer_yank float_cos integer_min integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap integer_dup_times float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc integer_rot float_dup_items float_max float_inc integer_rot integer_dec float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_dup_items integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2526.159236900002
Median total errors in population: 783.0417999999999
Error averages by case: (96.23082820000145 8.812 76.99045470000054 10.934 68.99239099999969 10.01 72.25843760000033 10.198 95.46865930000176 10.287 113.39360389999938 9.544 63.49617980000031 9.011 106.12069769999933 9.305 108.88607109999964 10.019 95.5251280999996 11.268 129.16337870000015 3.885 87.98459809999986 10.307 110.77632579999845 9.606 75.93888600000145 8.643 80.55640480000133 8.891 95.0472676000019 10.397 98.57158570000097 9.095 88.6344083999994 11.402 96.78579279999965 7.531 90.89870579999838 9.621 112.2248173999998 10.667 80.84902799999975 10.316 89.98122590000021 10.671 72.21428679999991 10.889 77.68407369999952 10.177)
Error minima by case: (0.1548 2 0.1379 9 0.0 0 0.3429 1 0.9162 2 2.0913 1 0.0127 1 0.0388 2 11.3988 1 0.1271 1 0.2684 1 0.0708 7 0.0 0 0.0419 1 0.7513 1 0.0838 2 0.0933 2 0.3088 8 0.0376 2 0.0 0 3.1811 8 0.2034 5 0.4911 2 0.0419 6 0.1543 1)
Average genome size in population (length): 102.735
Average program size in population (points): 103.735
Average percent parens in population: 0.010
Minimum age in population: 177.0860306628473
Maximum age in population: 181.3779708395998
Average age in population: 179.3039822324203
Median age in population: 179.3255047095873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.392
Error (vector) diversity:			 0.395
Behavioral diversity:				 0.395
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 237722764
--- Timings ---
Current time: 1529615407282 milliseconds
Total Time:         522.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       193.6 seconds, 37.0%
Fitness Testing:    260.7 seconds, 49.9%
Report:              68.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_dup_times} {:instruction tag_float_603} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction in1} {:instruction integer_yank} {:instruction tag_float_743} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_dup_times tag_float_603 float_swap float_mod float_swap float_dup_items float_mod print_float float_cos integer_mult integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap in1 integer_yank tag_float_743 tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3147.1776057000015
Median total errors in population: 796.0088
Error averages by case: (115.48041120000144 8.755 108.28282760000062 11.038 96.2741595999997 10.128 99.99076099999975 10.249 126.68821690000198 10.35 123.88491709999957 9.646 91.36818489999952 9.077 132.1724733999993 9.3 130.8891361999998 10.149 121.1796870999995 11.434 149.46842810000007 3.922 114.13237089999973 10.391 120.09082629999841 9.744 108.97443350000152 8.76 108.79146050000125 8.979 126.22364860000208 10.485 111.47285840000103 9.123 116.74295599999923 11.526 112.77869329999979 7.531 125.60130149999836 9.778 139.36480250000014 10.793 106.67752279999964 10.469 112.86863120000024 10.734 98.78237389999981 10.957 105.46652319999906 10.212)
Error minima by case: (1.9206 2 0.1379 9 0.0 0 0.3429 1 0.9162 2 0.1952 1 0.0127 1 2.0389 2 13.8151 1 1.8729 1 2.7316 1 0.637 7 0.0 0 0.9581 1 0.2487 1 0.0838 2 0.0853 2 1.9606 8 0.0376 2 0.0 0 19.0419 8 0.0391 7 0.4911 2 0.0419 6 0.8457 1)
Average genome size in population (length): 102.676
Average program size in population (points): 103.676
Average percent parens in population: 0.010
Minimum age in population: 178.2607688335064
Maximum age in population: 182.666260763527
Average age in population: 180.5410746223745
Median age in population: 180.5182415013638
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.394
Error (vector) diversity:			 0.398
Behavioral diversity:				 0.399
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 240289714
--- Timings ---
Current time: 1529615411926 milliseconds
Total Time:         527.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.1 seconds, 37.0%
Fitness Testing:    263.2 seconds, 49.9%
Report:              69.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction print_integer} {:instruction float_mult} {:instruction float_rot} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank})
Best program: (float_swap float_swap float_swap float_swap float_mod print_float float_cos float_sin integer_fromfloat integer_swap print_integer float_mult float_rot float_shove integer_swap integer_fromfloat integer_yank float_flush integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3097.3994641999993
Median total errors in population: 783.0417999999999
Error averages by case: (116.82331730000188 8.805 101.56402740000064 11.024 91.05482259999974 10.125 98.27977789999957 10.308 128.73026230000204 10.408 127.71939729999905 9.735 89.22079409999948 9.137 130.1110704999989 9.296 126.97046519999971 10.125 115.00309999999936 11.459 149.74505790000006 4.038 106.80093169999945 10.245 120.48069479999803 9.989 109.51099030000158 8.797 106.74266090000155 9.02 127.54935450000211 10.484 115.42117050000148 9.205 113.8232722999989 11.444 115.84945999999931 7.544 126.69497819999836 9.745 131.0795277999997 10.607 98.68238739999963 10.301 110.78527350000032 10.718 90.94828509999996 10.945 104.05238469999853 10.252)
Error minima by case: (1.0564 2 0.1379 8 0.0 0 0.3429 1 1.9162 2 3.7121 1 0.0127 1 3.082 2 8.0395 1 4.0419 1 0.7316 1 0.1543 1 0.0 0 1.0419 2 1.7513 1 0.9162 2 0.4634 2 0.366 9 0.0376 2 1.0 1 4.1811 2 0.0261 1 0.2459 2 0.0399 2 1.1543 1)
Average genome size in population (length): 102.551
Average program size in population (points): 103.551
Average percent parens in population: 0.010
Minimum age in population: 179.6749628241038
Maximum age in population: 184.2242644771245
Average age in population: 181.8722611561202
Median age in population: 181.885130006237
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.383
Error (vector) diversity:			 0.387
Behavioral diversity:				 0.387
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 242853614
--- Timings ---
Current time: 1529615417050 milliseconds
Total Time:         532.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.7 seconds, 36.9%
Fitness Testing:    266.1 seconds, 50.0%
Report:              69.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction in1} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_dup})
Best program: (float_swap float_swap float_swap float_mod print_float float_cos float_inc integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap in1 integer_yank tag_float_743 integer_fromfloat integer_yank print_integer float_mult in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_mult integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult float_frominteger float_dup)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3027.9396402000025
Median total errors in population: 784.3154999999998
Error averages by case: (111.06465970000154 8.751 97.49699050000052 10.981 88.06281109999966 9.997 97.63201439999968 10.299 117.82999330000187 10.336 120.58476249999923 9.696 88.38353899999917 9.133 126.49809359999902 9.27 134.5600208999999 10.21 114.79067219999949 11.325 153.72739880000015 3.862 107.06086619999972 10.311 126.87389109999836 9.917 100.04587740000149 8.76 103.81611200000144 9.017 117.6065170000019 10.471 108.53555440000126 9.138 113.36317219999918 11.494 109.48961679999952 7.516 113.10238409999842 9.711 132.1517804999996 10.691 99.35326219999965 10.418 108.10945370000027 10.673 91.37746769999956 10.957 103.20872889999887 10.28)
Error minima by case: (0.1548 2 0.1379 8 0.0 0 0.3429 1 0.0838 2 1.714 1 0.0127 1 0.2148 2 6.5227 1 4.1271 1 0.7316 1 0.0279 1 0.0 0 0.0419 1 0.2487 1 1.0838 2 0.4634 2 4.3198 9 0.0376 2 0.0 0 1.4869 2 0.0 0 0.4911 2 0.0419 2 0.1543 1)
Average genome size in population (length): 102.775
Average program size in population (points): 103.775
Average percent parens in population: 0.010
Minimum age in population: 180.6749628241038
Maximum age in population: 185.2396832022101
Average age in population: 183.2130730270565
Median age in population: 183.2521746393839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.386
Error (vector) diversity:			 0.389
Behavioral diversity:				 0.39
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 245423139
--- Timings ---
Current time: 1529615421677 milliseconds
Total Time:         537.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.2 seconds, 36.9%
Fitness Testing:    268.6 seconds, 50.0%
Report:              70.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 45552.65830000014
Test mean error for best: 22.77633
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap integer_fromfloat float_shove integer_swap integer_fromfloat integer_yank tag_float_743 print_integer float_mult float_min float_shove float_flush integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2838.6985015
Median total errors in population: 772.6819999999998
Error averages by case: (106.91617970000125 8.66 93.04196120000061 10.973 82.28348179999972 10.04 87.28524109999996 10.258 110.12940390000178 10.319 119.07158979999944 9.555 78.35269170000002 9.122 126.22347159999906 9.129 119.45069869999962 10.005 103.82179319999953 11.399 148.53864730000006 3.819 95.5685651999999 10.381 112.1660466999987 9.792 91.10969340000142 8.709 95.24152340000123 8.992 109.82751650000185 10.459 106.06883680000094 9.025 103.49880849999947 11.485 105.27338579999979 7.353 106.2360105999985 9.678 124.15286369999967 10.663 88.42033729999967 10.383 107.43074690000033 10.599 83.14927639999998 10.985 93.40873029999926 10.248)
Error minima by case: (0.1548 2 0.1379 9 0.0 0 0.3429 1 2.9162 2 1.4268 1 0.0127 1 0.1512 2 9.1873 1 0.5686 1 2.7316 1 0.1858 7 0.0 0 0.0419 2 0.7513 1 1.9162 2 0.1379 2 1.5896 8 0.0376 2 1.0 1 17.4179 7 0.1282 7 0.0064 2 0.0419 7 0.1543 1)
Average genome size in population (length): 102.745
Average program size in population (points): 103.745
Average percent parens in population: 0.010
Minimum age in population: 181.6749628241038
Maximum age in population: 186.6608751359983
Average age in population: 184.5364372564846
Median age in population: 184.5729421086288
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.392
Error (vector) diversity:			 0.395
Behavioral diversity:				 0.396
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 247991939
--- Timings ---
Current time: 1529615426234 milliseconds
Total Time:         541.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.5 seconds, 36.8%
Fitness Testing:    271.1 seconds, 50.0%
Report:              71.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 45563.775500000134
Test mean error for best: 22.78189
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 118.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [9.8102 8 0.1379 10 17.3851 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 28.2509 12 80.0 1 9.1289 10 33.0259 11 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 55.746 10 6.64 10 2.5089 12 5.9475 11 20.5927 11]
Total: 750.9064999999999
Mean: 15.01813
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2783.6758237000004
Median total errors in population: 801.6887
Error averages by case: (110.13712720000105 8.714 91.46549190000047 11.015 78.04559479999972 9.833 83.91802509999991 10.043 106.59197980000143 10.153 122.65602199999965 9.645 75.11525929999993 8.902 120.84695909999942 9.24 116.68326599999958 10.062 101.7608797999995 11.166 140.31679590000007 4.001 94.8832483999999 10.385 109.93893139999895 9.785 86.35522380000106 8.546 94.36783830000086 8.764 107.15836650000149 10.287 109.58077110000087 9.103 102.25610259999942 11.485 109.41984629999982 7.547 102.11697389999867 9.507 119.92177109999967 10.677 86.78391429999967 10.468 104.86707160000026 10.637 78.29636979999972 10.92 89.31599369999958 9.991)
Error minima by case: (0.2588 2 0.1379 7 0.0 0 0.3429 1 0.0838 2 0.0618 1 0.0127 1 0.8488 2 4.1873 1 1.4212 1 2.2684 1 0.1289 1 0.0 0 0.0419 2 1.7513 1 1.0838 2 0.1379 2 1.5162 8 0.0376 2 1.0 1 0.2538 2 0.0 0 0.3191 2 0.0419 2 1.1543 1)
Average genome size in population (length): 102.529
Average program size in population (points): 103.529
Average percent parens in population: 0.010
Minimum age in population: 182.6749628241038
Maximum age in population: 187.7950872751295
Average age in population: 185.8806529327892
Median age in population: 185.9281568301033
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.394
Error (vector) diversity:			 0.397
Behavioral diversity:				 0.397
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 250555264
--- Timings ---
Current time: 1529615431531 milliseconds
Total Time:         547.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.2 seconds, 36.8%
Fitness Testing:    273.8 seconds, 50.1%
Report:              71.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 45544.00270000014
Test mean error for best: 22.77200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 116.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 17.3851 10 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 28.2509 12 80.0 1 9.1289 10 31.0259 11 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 55.746 10 6.64 10 0.5089 10 5.9475 11 20.5927 11]
Total: 745.9295000000001
Mean: 14.91859
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2778.8860825000006
Median total errors in population: 796.0088
Error averages by case: (108.27257090000143 8.831 88.75093240000047 10.964 79.98744759999977 10.048 85.5780700999998 10.215 105.88119840000161 10.272 122.05636539999934 9.786 76.83959069999965 9.061 120.70976919999912 9.393 117.92251759999967 10.033 100.02253419999947 11.283 139.43363580000008 4.061 91.28256339999973 10.281 112.7007823999985 9.73 86.49287520000131 8.703 95.07442570000121 8.889 105.46500820000168 10.432 106.97919340000115 9.175 103.02756169999923 11.419 108.8734677999995 7.674 100.49176049999858 9.669 122.2769402999996 10.633 85.3029626999997 10.367 101.40450790000027 10.744 80.19713669999977 10.885 91.12926429999904 10.185)
Error minima by case: (0.2934 2 0.1379 5 0.0 0 0.6571 1 1.9162 2 1.714 1 0.0127 1 0.7852 2 1.1873 1 2.1271 1 0.7316 1 0.1289 7 0.0 0 0.0419 1 1.2487 1 0.9162 2 0.2055 2 0.07 5 0.0376 2 0.0 0 0.0264 8 0.0258 7 0.4911 2 0.0419 6 1.1543 1)
Average genome size in population (length): 102.595
Average program size in population (points): 103.595
Average percent parens in population: 0.010
Minimum age in population: 184.6888370706022
Maximum age in population: 189.1173852812735
Average age in population: 187.1978988216222
Median age in population: 187.2459685358577
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.402
Error (vector) diversity:			 0.407
Behavioral diversity:				 0.407
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 253120339
--- Timings ---
Current time: 1529615436203 milliseconds
Total Time:         551.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.6 seconds, 36.7%
Fitness Testing:    276.3 seconds, 50.1%
Report:              72.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 45544.00270000014
Test mean error for best: 22.77200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 116.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 17.3851 10 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 28.2509 12 80.0 1 9.1289 10 31.0259 11 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 55.746 10 6.64 10 0.5089 10 5.9475 11 20.5927 11]
Total: 745.9295000000001
Mean: 14.91859
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3179.406961000001
Median total errors in population: 813.36275
Error averages by case: (129.00282920000166 8.867 99.87970820000056 11.045 88.92235759999976 9.966 97.28349839999974 10.21 120.64480130000179 10.352 140.30760379999907 9.745 88.98576549999925 9.047 144.15032219999927 9.387 130.12543909999974 10.018 116.46876169999946 11.296 161.2226731000001 4.174 110.42422969999956 10.465 129.75237959999825 9.738 101.59403040000157 8.778 107.2523206000014 8.96 120.39289830000189 10.463 127.13267470000126 9.236 115.71471069999917 11.53 128.8706025999995 7.635 115.1518996999985 9.653 136.37697449999985 10.818 102.92807169999972 10.502 125.32308900000027 10.693 95.59749539999953 11.054 102.10182399999879 10.168)
Error minima by case: (0.1548 2 0.1379 7 0.0 0 0.3429 1 0.9162 2 0.3979 1 0.0127 1 0.2148 2 16.0679 1 0.8099 1 0.7316 1 0.0043 1 0.0 0 0.0419 1 2.6037 1 0.0838 2 0.3064 2 10.3289 8 0.0376 2 0.0 0 9.2695 2 0.1193 1 0.4911 2 0.0419 2 2.0067 1)
Average genome size in population (length): 102.184
Average program size in population (points): 103.184
Average percent parens in population: 0.010
Minimum age in population: 185.6888370706022
Maximum age in population: 190.4550655208022
Average age in population: 188.5918884472395
Median age in population: 188.6336396659572
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.426
Error (vector) diversity:			 0.428
Behavioral diversity:				 0.428
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 255675164
--- Timings ---
Current time: 1529615441248 milliseconds
Total Time:         556.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.2 seconds, 36.7%
Fitness Testing:    279.1 seconds, 50.1%
Report:              73.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 45544.00270000014
Test mean error for best: 22.77200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 116.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 17.3851 10 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 28.2509 12 80.0 1 9.1289 10 31.0259 11 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 55.746 10 6.64 10 0.5089 10 5.9475 11 20.5927 11]
Total: 745.9295000000001
Mean: 14.91859
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2982.3718843999995
Median total errors in population: 783.0417999999999
Error averages by case: (115.96222850000139 8.766 97.69328010000059 11.009 88.66284839999972 9.95 91.31942379999998 10.183 113.9146855000018 10.272 124.53146679999945 9.642 81.6547586999997 8.967 128.43836149999922 9.315 123.08028959999973 9.911 112.55952779999954 11.267 147.81750180000012 3.92 104.50889259999987 10.35 122.49565709999833 9.78 94.80378690000158 8.635 99.6524724000014 8.91 113.68507780000196 10.379 112.78500800000106 9.125 108.1854712999995 11.476 113.27791249999973 7.474 113.36893539999845 9.657 133.36375929999974 10.689 98.38903639999965 10.409 110.7827062000002 10.707 92.6160302999997 10.997 96.90076569999935 10.132)
Error minima by case: (0.7066 2 0.1379 9 0.0 0 0.3429 1 0.8572 2 0.6235 1 0.0127 1 1.0437 2 16.9024 1 2.0419 1 1.7316 1 0.1144 1 0.0 0 0.9581 1 0.7513 1 0.9162 2 0.0835 2 1.1422 8 0.0376 2 0.0 0 8.9984 2 0.2128 1 0.4911 2 0.0419 2 0.1543 1)
Average genome size in population (length): 102.389
Average program size in population (points): 103.389
Average percent parens in population: 0.010
Minimum age in population: 186.7401917350977
Maximum age in population: 192.2093221521711
Average age in population: 190.0529576202012
Median age in population: 190.1076978836456
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.403
Error (vector) diversity:			 0.408
Behavioral diversity:				 0.409
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 258235064
--- Timings ---
Current time: 1529615446141 milliseconds
Total Time:         561.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.7 seconds, 36.6%
Fitness Testing:    281.7 seconds, 50.2%
Report:              74.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 45544.00270000014
Test mean error for best: 22.77200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 116.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 17.3851 10 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 28.2509 12 80.0 1 9.1289 10 31.0259 11 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 55.746 10 6.64 10 0.5089 10 5.9475 11 20.5927 11]
Total: 745.9295000000001
Mean: 14.91859
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3029.271221600002
Median total errors in population: 789.15995
Error averages by case: (121.39684390000168 8.825 94.9271625000005 11.024 86.85474929999977 9.979 92.97369149999989 10.184 112.14536550000165 10.321 129.04707349999916 9.768 84.55810179999952 9.019 136.59094969999896 9.337 128.64949919999967 9.997 112.21015289999951 11.3 158.43758940000006 4.211 106.70649469999951 10.419 120.68267799999846 9.868 92.88056130000126 8.746 101.86256820000116 8.927 111.85597460000167 10.454 118.01828580000137 9.221 110.00057259999929 11.552 118.98589649999933 7.724 111.93930069999857 9.657 131.0011855999997 10.783 98.35829879999972 10.51 116.70098840000036 10.706 90.45647409999967 10.988 98.36476309999928 10.146)
Error minima by case: (0.1548 2 0.1379 8 0.0 0 0.3429 1 0.0838 2 1.4268 1 0.0041 1 0.1512 2 27.023 1 2.8978 1 2.7316 1 0.1219 7 0.0 0 0.0419 1 0.7513 1 0.9162 2 0.4634 2 4.8578 8 0.0376 2 0.0 0 5.7984 7 0.2655 7 0.4911 2 0.0419 7 0.1543 1)
Average genome size in population (length): 102.125
Average program size in population (points): 103.125
Average percent parens in population: 0.010
Minimum age in population: 189.0340709542825
Maximum age in population: 193.5294041698238
Average age in population: 191.4599171618224
Median age in population: 191.481036192164
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.415
Error (vector) diversity:			 0.417
Behavioral diversity:				 0.417
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 260788489
--- Timings ---
Current time: 1529615451266 milliseconds
Total Time:         567.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.3 seconds, 36.6%
Fitness Testing:    284.6 seconds, 50.2%
Report:              75.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 45544.00270000014
Test mean error for best: 22.77200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 116.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove integer_mult float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 17.3851 10 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 28.2509 12 80.0 1 9.1289 10 31.0259 11 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 55.746 10 6.64 10 0.5089 10 5.9475 11 20.5927 11]
Total: 745.9295000000001
Mean: 14.91859
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2875.1789891000008
Median total errors in population: 809.36515
Error averages by case: (112.29504320000132 8.858 94.39035640000058 11.002 76.90855629999967 9.964 85.44566670000007 10.102 113.84535580000161 10.378 124.34802879999938 9.647 76.93273419999977 8.959 130.50376029999904 9.266 123.00837069999963 9.593 101.99104389999951 11.22 147.41833520000006 4.102 95.98643550000006 10.395 119.10748679999864 9.82 93.7666131000014 8.808 95.96111750000138 8.818 113.53002120000166 10.508 110.50321560000097 9.173 103.98271999999953 11.46 111.40336399999975 7.659 108.69945969999857 9.661 123.12017549999973 10.734 88.53260139999965 10.469 108.71997440000017 10.546 81.86574549999986 10.903 90.82380739999945 10.044)
Error minima by case: (0.1548 2 0.1379 7 0.0 0 0.3429 1 3.9162 2 0.714 1 0.0127 1 0.2148 2 30.0419 1 0.0419 1 2.0 1 0.0043 7 0.0 0 0.9581 1 0.2487 1 2.9162 2 0.3673 2 0.1422 7 0.0376 2 0.0 0 20.7949 8 0.0035 7 0.4911 2 0.0419 6 0.1051 1)
Average genome size in population (length): 102.778
Average program size in population (points): 103.778
Average percent parens in population: 0.010
Minimum age in population: 190.135306366672
Maximum age in population: 194.8952411686406
Average age in population: 192.8894908960486
Median age in population: 192.9265234555168
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.46
Error (vector) diversity:			 0.462
Behavioral diversity:				 0.462
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 263358114
--- Timings ---
Current time: 1529615456113 milliseconds
Total Time:         571.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.7 seconds, 36.5%
Fitness Testing:    287.1 seconds, 50.2%
Report:              75.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 45544.00270000014
Test mean error for best: 22.77200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 116.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_min} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_mod integer_min float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult float_min float_shove integer_swap integer_fromfloat integer_fromfloat integer_yank print_integer float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc integer_min float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 17.3851 10 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 28.2509 12 80.0 1 9.1289 10 31.0259 11 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 55.746 10 6.64 10 0.5089 10 5.9475 11 20.5927 11]
Total: 745.9295000000001
Mean: 14.91859
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2887.474716
Median total errors in population: 783.0417999999999
Error averages by case: (105.18599270000132 8.603 100.34249830000068 11.012 86.69909679999971 9.94 90.9517062999999 10.119 116.72270450000191 10.316 113.87918319999943 9.41 81.93640769999969 8.961 119.30465569999915 9.116 124.79277929999961 9.148 105.32880489999951 11.263 146.17954020000013 3.762 98.60994479999972 10.358 113.6156592999984 9.725 98.68574100000157 8.741 100.2167425000015 8.811 116.32011810000203 10.439 100.98731480000109 8.888 109.49063659999935 11.497 102.87859849999971 7.373 113.06693879999841 9.6 127.28847359999972 10.72 91.46860899999967 10.423 102.19617430000021 10.376 85.21671719999986 10.939 96.48667789999915 10.083)
Error minima by case: (0.1548 2 0.1379 7 0.0 0 0.3429 1 1.0838 2 1.7603 1 0.0127 1 0.2148 2 32.8591 1 0.4212 1 6.7316 1 0.0963 7 0.0 0 0.0419 1 3.2487 1 0.9162 2 0.0187 2 0.1422 8 0.0376 2 0.0 0 22.5067 7 0.0307 5 0.4911 2 0.0121 6 3.8457 1)
Average genome size in population (length): 103.169
Average program size in population (points): 104.169
Average percent parens in population: 0.010
Minimum age in population: 191.7383174253593
Maximum age in population: 196.2729567397381
Average age in population: 194.2191927410699
Median age in population: 194.2462751971419
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.413
Error (vector) diversity:			 0.417
Behavioral diversity:				 0.418
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 265937664
--- Timings ---
Current time: 1529615461316 milliseconds
Total Time:         576.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.3 seconds, 36.5%
Fitness Testing:    290.0 seconds, 50.3%
Report:              76.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 45544.00270000014
Test mean error for best: 22.77200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 116.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 17.3851 10 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 28.2509 12 80.0 1 9.1289 10 31.0259 11 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 55.746 10 6.64 10 0.5089 10 5.9475 11 20.5927 11]
Total: 745.9295000000001
Mean: 14.91859
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2849.9057887000013
Median total errors in population: 811.1464
Error averages by case: (105.00976280000138 8.616 94.9801282000006 11.011 81.94727179999971 9.981 91.7331101999997 10.276 114.16291450000192 10.27 113.89134609999942 9.37 82.33388529999921 9.131 121.03198369999903 9.186 119.99604819999983 8.417 104.24262389999953 11.336 140.7445346 3.848 96.24372139999964 10.325 116.67518249999844 9.868 93.66666790000151 8.725 100.4648379000015 9.018 113.90815970000196 10.386 101.20780480000104 8.844 108.031064799999 11.47 103.27471539999965 7.452 108.70875639999848 9.66 124.59202439999964 10.697 89.90798789999965 10.406 102.83123450000029 10.121 83.47206419999972 10.903 97.26695759999876 10.264)
Error minima by case: (0.2072 2 0.1379 9 0.0 0 0.3429 1 0.0838 2 2.0203 1 0.0127 1 1.082 2 6.1873 1 0.7877 1 0.7316 1 0.1289 7 0.0 0 0.0419 2 2.2487 1 0.9162 2 0.3673 2 2.1422 8 0.0376 2 1.0 1 0.4385 7 0.0073 5 0.4911 2 0.0419 7 2.8457 1)
Average genome size in population (length): 105.916
Average program size in population (points): 106.916
Average percent parens in population: 0.009
Minimum age in population: 192.7447746421444
Maximum age in population: 197.6733346876336
Average age in population: 195.6123931656025
Median age in population: 195.6357432341104
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.455
Error (vector) diversity:			 0.459
Behavioral diversity:				 0.46
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 268585964
--- Timings ---
Current time: 1529615466381 milliseconds
Total Time:         581.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.8 seconds, 36.4%
Fitness Testing:    292.7 seconds, 50.3%
Report:              77.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 45544.00270000014
Test mean error for best: 22.77200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 11.4835738062 
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 10.3360649456 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 10.2787465405 
Correct output: 85.1198734399  | Program output: 116.145746585 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 11.0309957842 
Correct output: 3.7173929377   | Program output: 10.3574233041 
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 10.6038206339 
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove integer_mult float_div integer_pop float_div integer_rot float_swap float_inc print_integer float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 17.3851 10 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 28.2509 12 80.0 1 9.1289 10 31.0259 11 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 55.746 10 6.64 10 0.5089 10 5.9475 11 20.5927 11]
Total: 745.9295000000001
Mean: 14.91859
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3290.4755536000002
Median total errors in population: 835.4691000000001
Error averages by case: (125.71649200000157 8.735 109.11940380000053 11.088 101.49285909999982 9.926 107.22960619999971 10.01 131.5223645000018 10.301 133.6963788999992 9.296 97.41394109999915 8.902 139.47402139999912 9.106 137.97665859999995 7.1 124.23480929999947 11.195 157.79619740000004 3.838 115.00192639999955 10.422 128.80124559999825 9.606 112.1954986000015 8.703 114.94347790000137 8.777 130.30439190000203 10.419 121.26661380000121 8.819 124.2215086999992 11.57 123.69118709999954 7.587 128.28094599999844 9.641 144.23775570000035 10.747 108.4324747999997 10.478 119.60853770000027 9.817 104.30250909999933 10.988 112.48474799999866 9.959)
Error minima by case: (0.1548 2 0.1379 9 0.0 0 0.3429 1 0.0838 2 2.7603 1 0.0127 1 0.2148 2 0.5361 1 0.2123 1 2.2684 1 0.0 0 0.0 0 0.0419 1 0.2487 1 1.0838 2 0.4634 2 1.5162 8 0.0376 2 0.0 0 5.5718 2 0.0433 1 0.4911 2 0.0419 1 0.8457 1)
Average genome size in population (length): 108.803
Average program size in population (points): 109.803
Average percent parens in population: 0.009
Minimum age in population: 194.7786973329543
Maximum age in population: 198.9874757923945
Average age in population: 196.9950137163565
Median age in population: 196.9971209954245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.47
Error (vector) diversity:			 0.474
Behavioral diversity:				 0.475
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 271306214
--- Timings ---
Current time: 1529615471522 milliseconds
Total Time:         587.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       213.6 seconds, 36.4%
Fitness Testing:    295.4 seconds, 50.3%
Report:              78.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 45217.53830000015
Test mean error for best: 22.60877
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.1163739517
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 8.6686115768  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 134.1033533343
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 103.6785414471
Correct output: 71.8127365426  | Program output: 8.8426030568  
Correct output: -17.9148224328 | Program output: 8.2857920824  
Correct output: 93.2683698204  | Program output: 11.2683698204 
Correct output: 1.1498437373   | Program output: 8.0755286267  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.4147065334
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.826768925 
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 8.5692070277  
Correct output: 3.7173929377   | Program output: 7.5116089065  
Correct output: 109.3750668562 | Program output: 124.8121394023
Correct output: 16.5512971727  | Program output: 8.3245228712  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank print_integer float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_yank integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub float_sin integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_stackdepth float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_rot float_yank integer_inc float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.5611 10 0.1379 10 14.5701 12 13.6874 11 21.9581 10 9.0913 9 0.0691 9 23.9673 10 62.9701 9 26.2006 11 82.0 2 6.9257 11 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.5097 9 26.4907 11 0.1539 7 21.0419 9 58.2078 10 3.7942 9 15.4371 12 8.2268 9 20.5927 11]
Total: 710.8670000000002
Mean: 14.21734
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2942.919705999999
Median total errors in population: 816.3865499999999
Error averages by case: (108.79113900000145 8.816 95.2984675000006 11.014 88.01808849999976 9.986 94.20778569999962 10.102 119.47772630000168 10.324 119.72845389999915 9.338 85.73848949999936 8.967 128.07122149999887 9.332 121.38930249999986 5.742 110.16512259999945 11.273 144.4257179000001 3.357 101.95477599999975 10.45 114.62674129999851 9.942 99.91527070000137 8.683 102.48507580000137 8.827 119.18204350000171 10.396 103.83411560000111 8.822 111.56984229999922 11.521 107.81727939999962 7.588 111.64732749999855 9.595 130.5233441999997 10.67 95.79778289999973 10.462 101.76307940000036 9.65 90.9984375999994 10.922 99.6280748999989 10.086)
Error minima by case: (2.1548 2 0.1379 9 0.0 0 0.6571 1 0.0838 2 3.714 1 0.0127 1 0.5245 2 10.7982 1 0.2123 1 2.2684 1 0.1289 1 0.0 0 0.0419 1 0.7513 1 0.0838 2 0.2055 2 0.037 8 0.0376 2 0.0 0 5.2416 2 0.1736 1 0.0753 2 0.0419 2 0.1543 1)
Average genome size in population (length): 112.693
Average program size in population (points): 113.693
Average percent parens in population: 0.009
Minimum age in population: 196.1550096678862
Maximum age in population: 200.1744874056351
Average age in population: 198.382657069603
Median age in population: 198.4350805927931
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.458
Error (vector) diversity:			 0.461
Behavioral diversity:				 0.461
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 274123789
--- Timings ---
Current time: 1529615476735 milliseconds
Total Time:         592.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.1 seconds, 36.3%
Fitness Testing:    298.2 seconds, 50.4%
Report:              78.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 45217.53830000015
Test mean error for best: 22.60877
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.1163739517
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 8.6686115768  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 134.1033533343
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 103.6785414471
Correct output: 71.8127365426  | Program output: 8.8426030568  
Correct output: -17.9148224328 | Program output: 8.2857920824  
Correct output: 93.2683698204  | Program output: 11.2683698204 
Correct output: 1.1498437373   | Program output: 8.0755286267  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.4147065334
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.826768925 
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 8.5692070277  
Correct output: 3.7173929377   | Program output: 7.5116089065  
Correct output: 109.3750668562 | Program output: 124.8121394023
Correct output: 16.5512971727  | Program output: 8.3245228712  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc integer_sub in1 integer_yank integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_sub in1 integer_fromfloat integer_yank tag_float_743 integer_sub float_sin integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_stackdepth float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec integer_dup float_dec integer_dup float_dec in2 float_dec integer_rot float_yank integer_inc float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.5611 10 0.1379 10 14.5701 12 13.6874 11 21.9581 10 9.0913 9 0.0691 9 23.9673 10 62.9701 9 26.2006 11 82.0 2 6.9257 11 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.5097 9 26.4907 11 0.1539 7 21.0419 9 58.2078 10 3.7942 9 15.4371 12 8.2268 9 20.5927 11]
Total: 710.8670000000002
Mean: 14.21734
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2931.2990127999997
Median total errors in population: 821.03795
Error averages by case: (110.7170047000014 8.646 93.31710800000053 11.032 84.46884189999966 10.004 90.90597849999976 10.105 117.88545760000176 10.297 122.94638449999931 9.138 82.77911949999947 8.976 125.85439089999898 9.129 121.11400239999993 4.97 107.44148299999942 11.259 147.23771840000003 3.214 102.36946859999975 10.51 114.33954139999862 9.708 99.00432340000138 8.672 100.06382750000121 8.84 117.60420440000192 10.361 107.00761490000099 8.656 108.46071279999916 11.531 111.52158749999943 7.563 119.33209539999864 9.626 128.5176766999997 10.713 94.62038079999974 10.461 105.6117828000003 9.289 88.3445175999996 10.958 96.1137895999991 10.062)
Error minima by case: (0.6696 2 0.1379 9 0.0 0 0.3429 1 1.0838 2 3.4268 1 0.0127 1 0.5245 2 27.7453 1 0.9581 1 2.2684 1 0.1498 1 0.0 0 0.0419 1 2.2487 1 1.9162 2 0.3673 2 0.2247 8 0.0376 2 0.0 0 15.3807 2 0.3187 1 0.4911 2 0.0419 2 2.8457 1)
Average genome size in population (length): 114.689
Average program size in population (points): 115.689
Average percent parens in population: 0.009
Minimum age in population: 197.2563043190572
Maximum age in population: 201.745321845075
Average age in population: 199.7247648702945
Median age in population: 199.758199767406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.493
Error (vector) diversity:			 0.499
Behavioral diversity:				 0.499
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 276991514
--- Timings ---
Current time: 1529615481981 milliseconds
Total Time:         597.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.9 seconds, 36.3%
Fitness Testing:    301.0 seconds, 50.4%
Report:              79.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 46879.65590000011
Test mean error for best: 23.43983
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 4.7125262432  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -3.883181331  
Correct output: 93.2683698204  | Program output: 11.1021660898 
Correct output: 1.1498437373   | Program output: 6.5690322958  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 0.2097110673  
Correct output: 3.7173929377   | Program output: 7.6687601012  
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 8.6785265569  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction print_float} {:instruction float_cos} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction print_float} {:instruction tagged_340} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_mult} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max print_float float_cos float_sin integer_fromfloat float_mod print_float tagged_340 integer_dec integer_fromfloat float_dup_items print_integer float_mult float_mult -21.015740390879614 integer_yank tag_float_743 float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 10.6141 10 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 14.0316 11 82.1662 11 5.4192 10 1.0 1 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 66.5673 12 3.9514 11 0.5089 10 7.8728 11 20.5927 11]
Total: 705.4278000000002
Mean: 14.108556
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2663.342599999998
Median total errors in population: 816.6348999999999
Error averages by case: (102.26210150000125 8.597 82.77490150000062 10.981 79.62683149999985 10.077 79.88839879999999 10.23 100.48648810000164 10.307 112.41573879999946 9.038 71.07072889999995 9.013 117.5688304999992 9.07 116.5694059 4.616 99.2676267999995 11.358 139.3994021 3.028 93.34764109999985 10.442 101.41821679999866 9.802 82.50125390000129 8.63 88.05113080000122 8.876 99.98040080000169 10.41 97.2612214000008 8.541 96.15278589999942 11.46 101.67607599999995 7.441 98.24685909999855 9.636 121.09659959999972 10.651 86.64715179999979 10.5 97.06303180000026 9.249 80.0187284999995 10.934 85.49104809999938 10.173)
Error minima by case: (0.0419 2 0.1379 9 0.0 0 0.6571 1 1.9162 2 1.3646 1 0.0123 1 0.5245 2 9.2384 1 2.0487 1 0.7316 1 0.1289 6 0.0 0 0.0419 1 0.7513 1 0.9162 2 0.3864 2 1.07 8 0.0376 2 0.0 0 14.2742 8 0.36 7 0.4911 2 0.0419 7 0.1543 1)
Average genome size in population (length): 114.936
Average program size in population (points): 115.936
Average percent parens in population: 0.009
Minimum age in population: 198.3745823278319
Maximum age in population: 203.3543309412968
Average age in population: 200.9635433469255
Median age in population: 201.0165729294049
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.463
Error (vector) diversity:			 0.467
Behavioral diversity:				 0.468
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 279865214
--- Timings ---
Current time: 1529615487340 milliseconds
Total Time:         602.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.5 seconds, 36.2%
Fitness Testing:    303.8 seconds, 50.4%
Report:              80.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 46005.716300000146
Test mean error for best: 23.00286
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 8.2875957216  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 7.510167715   
Correct output: 93.2683698204  | Program output: 9.2683698204  
Correct output: 1.1498437373   | Program output: 6.9956904226  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 8.0931448025  
Correct output: 3.7173929377   | Program output: 6.8753786797  
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 8.1619232946  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_pop} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_mult} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_max} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_pop float_swap float_swap float_swap float_mod integer_max print_float integer_dup float_sin integer_fromfloat float_mod print_float tagged_570 integer_dec integer_fromfloat float_dup_items print_integer float_mult float_mult -21.015740390879614 integer_yank tag_float_743 float_max in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_cos integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 14.1891 11 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 25.425 11 84.0 1 5.8458 11 1.0 1 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 58.6838 12 3.158 9 0.5089 10 8.3894 11 20.5927 11]
Total: 704.4963000000002
Mean: 14.089926
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2831.4681622999988
Median total errors in population: 820.7216
Error averages by case: (106.81271970000152 8.528 95.8311072000006 11.011 82.3354205999998 10.071 88.01286859999962 10.213 107.99119270000175 10.306 122.23527899999911 8.906 79.03387979999927 9.095 121.87560769999877 8.971 124.18322299999994 4.665 104.6492079999994 11.304 142.36528180000008 3.355 98.65791849999972 10.476 114.21379919999843 9.446 89.17980270000156 8.662 95.55090460000133 8.921 107.66412400000182 10.35 105.52467100000109 8.443 104.51838329999904 11.481 108.44777019999952 7.39 104.33802609999859 9.651 123.9154678999997 10.69 90.9481089999998 10.477 101.87827780000029 9.092 84.81536769999946 10.945 93.87175219999887 10.169)
Error minima by case: (0.5612 2 0.1379 8 0.0 0 0.3429 1 0.0838 2 1.538 1 0.0081 1 0.5245 2 12.0619 1 2.0419 1 1.7316 1 0.0869 7 0.0 0 0.0419 1 0.2487 1 1.0838 2 0.1559 2 0.0122 8 0.0376 1 0.0 0 4.676 7 0.2903 7 0.2095 2 0.0419 7 0.1543 1)
Average genome size in population (length): 115.379
Average program size in population (points): 116.379
Average percent parens in population: 0.009
Minimum age in population: 199.3745823278319
Maximum age in population: 204.3106215973423
Average age in population: 202.3554703816378
Median age in population: 202.3961360742337
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.483
Error (vector) diversity:			 0.488
Behavioral diversity:				 0.489
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 282749914
--- Timings ---
Current time: 1529615492513 milliseconds
Total Time:         608.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.0 seconds, 36.2%
Fitness Testing:    306.7 seconds, 50.4%
Report:              81.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 46005.716300000146
Test mean error for best: 23.00286
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 8.2875957216  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 7.510167715   
Correct output: 93.2683698204  | Program output: 9.2683698204  
Correct output: 1.1498437373   | Program output: 6.9956904226  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 8.0931448025  
Correct output: 3.7173929377   | Program output: 6.8753786797  
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 8.1619232946  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_pop} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_mult} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_max} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_pop float_swap float_swap float_swap float_mod integer_max print_float integer_dup float_sin integer_fromfloat float_mod print_float tagged_570 integer_dec integer_fromfloat float_dup_items print_integer float_mult float_mult -21.015740390879614 integer_yank tag_float_743 float_max in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_cos integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 14.1891 11 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 25.425 11 84.0 1 5.8458 11 1.0 1 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 58.6838 12 3.158 9 0.5089 10 8.3894 11 20.5927 11]
Total: 704.4963000000002
Mean: 14.089926
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3058.7361260999987
Median total errors in population: 826.0984
Error averages by case: (114.37950920000134 8.601 101.20906130000056 11.045 88.89182929999977 10.165 111.4151296999995 10.296 119.51788650000175 10.373 121.13278859999951 8.94 95.71998559999938 9.217 129.1498025999993 9.126 122.84813190000008 5.126 114.38933199999944 11.252 149.94492790000015 3.651 104.20411869999991 10.458 109.71174309999894 8.671 101.46958080000151 8.81 108.64371010000133 8.972 119.01216720000184 10.516 107.58557850000079 8.527 127.18265869999914 11.52 111.27954369999969 7.509 113.59230759999849 9.806 133.03847659999985 10.644 98.07386119999971 10.432 111.56293800000016 9.298 92.78506629999971 10.803 117.99699099999873 10.241)
Error minima by case: (0.0419 2 0.1379 9 0.0 0 0.3126 1 1.9162 2 0.5732 1 0.0081 1 0.2148 2 0.3732 1 0.7339 1 0.7316 1 0.2969 1 0.0 0 0.0419 1 2.2487 1 0.9162 3 0.2055 2 3.3269 9 0.0376 2 0.0 0 6.9704 2 0.0465 1 0.4911 2 0.0525 2 2.8457 1)
Average genome size in population (length): 115.836
Average program size in population (points): 116.836
Average percent parens in population: 0.009
Minimum age in population: 201.3051452704863
Maximum age in population: 205.9899514543133
Average age in population: 203.7396252578783
Median age in population: 203.77598080403
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.514
Error (vector) diversity:			 0.52
Behavioral diversity:				 0.522
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 285646139
--- Timings ---
Current time: 1529615498072 milliseconds
Total Time:         613.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.8 seconds, 36.2%
Fitness Testing:    309.5 seconds, 50.5%
Report:              82.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 46005.716300000146
Test mean error for best: 23.00286
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 8.2875957216  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 130.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 95.7455960258 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: 7.510167715   
Correct output: 93.2683698204  | Program output: 9.2683698204  
Correct output: 1.1498437373   | Program output: 6.9956904226  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 115.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 119.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 8.0931448025  
Correct output: 3.7173929377   | Program output: 6.8753786797  
Correct output: 109.3750668562 | Program output: 109.8839371891
Correct output: 16.5512971727  | Program output: 8.1619232946  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_pop} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_mult} {:instruction float_mult} {:instruction -21.015740390879614} {:instruction integer_yank} {:instruction tag_float_598} {:instruction float_max} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_mod integer_max float_pop float_swap float_swap float_swap float_mod integer_max print_float integer_dup float_sin integer_fromfloat float_mod print_float tagged_570 integer_dec integer_fromfloat float_dup_items print_integer float_mult float_mult -21.015740390879614 integer_yank tag_float_598 float_max in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_cos integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec integer_shove float_yank integer_min float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [11.8102 9 0.1379 10 14.1891 11 13.6874 11 21.9581 10 12.7603 10 0.0691 9 31.9003 10 64.0 1 25.425 11 84.0 1 5.8458 11 1.0 1 8.9581 8 21.3573 9 20.9581 10 2.5366 9 26.4907 11 4.0376 7 21.0419 9 58.6838 12 3.158 9 0.5089 10 8.3894 11 20.5927 11]
Total: 704.4963000000002
Mean: 14.089926
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2886.964078499998
Median total errors in population: 832.7565500000001
Error averages by case: (100.27404210000097 8.396 95.58037680000056 11.116 82.70228139999958 10.162 109.41117099999958 10.181 114.78088810000189 10.263 110.0575698999997 8.466 92.09297659999895 9.204 115.33103669999967 8.843 117.52495790000039 6.06 107.35745359999949 11.048 137.14271520000005 4.077 101.0621208000002 10.474 102.18002389999936 6.875 94.83185490000149 8.781 102.30986300000126 8.862 114.40618960000198 10.444 97.16965180000037 8.264 124.6456319999992 11.488 97.5441280000002 7.33 109.85012479999837 9.781 128.5177677000001 10.613 94.9869407999999 10.284 103.34224920000011 9.047 89.02047989999963 10.568 114.09258279999865 10.122)
Error minima by case: (0.1453 2 0.1379 8 0.0 0 0.3429 1 0.0838 2 0.7986 1 0.0127 1 0.2148 2 10.516 1 0.0419 1 0.2684 1 0.2105 1 0.0 0 0.9581 2 1.2487 1 0.0838 2 0.2055 2 0.3088 8 0.0376 2 1.0 1 0.1811 2 0.1424 1 0.4911 2 0.0419 2 1.8457 1)
Average genome size in population (length): 116.171
Average program size in population (points): 117.171
Average percent parens in population: 0.009
Minimum age in population: 202.534043825387
Maximum age in population: 207.3039306758217
Average age in population: 205.1055083756116
Median age in population: 205.106401471135
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.565
Error (vector) diversity:			 0.569
Behavioral diversity:				 0.569
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 288550839
--- Timings ---
Current time: 1529615503895 milliseconds
Total Time:         619.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.5 seconds, 36.1%
Fitness Testing:    312.7 seconds, 50.5%
Report:              83.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 46759.65180000011
Test mean error for best: 23.37983
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 4.7125262432  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: -3.883181331  
Correct output: 93.2683698204  | Program output: 11.2683698204 
Correct output: 1.1498437373   | Program output: 6.5690322958  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 0.2097110673  
Correct output: 3.7173929377   | Program output: 7.6687601012  
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 8.6785265569  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_mult float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_dup float_dec in2 float_dec integer_rot float_yank integer_inc float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [9.8102 8 0.1379 10 10.6141 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 14.0316 11 82.0 2 5.4192 10 1.0 1 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 66.5673 12 3.9514 11 2.5089 12 7.8728 11 20.5927 11]
Total: 699.2386000000001
Mean: 13.984772
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3282.0604826
Median total errors in population: 886.7118499999999
Error averages by case: (110.60136150000116 8.546 108.16933950000055 11.242 92.97521089999947 10.594 140.21726639999906 10.23 132.96036130000144 10.438 117.68053279999992 8.219 122.40957299999835 9.514 130.52433960000025 8.721 134.8807761000003 7.542 120.80942799999961 11.152 150.47867560000012 4.806 109.55209550000025 10.506 112.71180719999957 5.339 112.26864140000154 8.965 117.12943210000125 8.961 132.73044700000162 10.636 107.8645421000001 8.223 156.11642319999882 11.558 107.56949650000017 7.503 127.4020760999984 9.968 139.32129470000024 10.69 101.84096019999984 10.23 118.38333589999976 9.122 99.06084519999978 10.424 145.1412207999989 10.132)
Error minima by case: (0.1548 2 0.1379 7 0.0 0 0.3429 1 0.9162 2 0.8553 1 0.0127 1 0.0388 2 2.9602 1 0.1291 1 1.6591 1 0.0743 7 0.0 0 0.0419 1 0.7513 1 0.0838 2 0.2055 2 0.3088 7 0.0376 2 0.0 0 6.3328 6 0.0486 6 0.4911 2 0.0525 6 0.1543 1)
Average genome size in population (length): 116.2
Average program size in population (points): 117.2
Average percent parens in population: 0.009
Minimum age in population: 204.3630302627495
Maximum age in population: 208.2140169763613
Average age in population: 206.4472278412519
Median age in population: 206.489876274736
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.602
Error (vector) diversity:			 0.608
Behavioral diversity:				 0.609
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 291456139
--- Timings ---
Current time: 1529615509262 milliseconds
Total Time:         624.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.1 seconds, 36.0%
Fitness Testing:    315.8 seconds, 50.5%
Report:              83.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 46759.65180000011
Test mean error for best: 23.37983
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 107.8672492776
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 4.7125262432  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 132.4343762405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 97.7455960258 
Correct output: 71.8127365426  | Program output: 8.8357721553  
Correct output: -17.9148224328 | Program output: -3.883181331  
Correct output: 93.2683698204  | Program output: 11.2683698204 
Correct output: 1.1498437373   | Program output: 6.5690322958  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 117.4415390236
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 121.9430690181
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 0.2097110673  
Correct output: 3.7173929377   | Program output: 7.6687601012  
Correct output: 109.3750668562 | Program output: 111.8839371891
Correct output: 16.5512971727  | Program output: 8.6785265569  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_mult float_swap float_swap float_swap float_mod integer_max float_cos integer_dec integer_fromfloat integer_yank float_min float_shove integer_swap integer_fromfloat integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_inc integer_inc integer_stackdepth integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_dup float_dec in2 float_dec integer_rot float_yank integer_inc float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc float_dup_items float_inc integer_rot float_max integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [9.8102 8 0.1379 10 10.6141 10 13.6874 11 21.9581 10 10.7603 10 0.0691 9 29.9003 9 62.977 10 14.0316 11 82.0 2 5.4192 10 1.0 1 8.9581 8 21.3573 9 20.9581 10 4.5366 9 26.4907 11 2.0376 6 21.0419 9 66.5673 12 3.9514 11 2.5089 12 7.8728 11 20.5927 11]
Total: 699.2386000000001
Mean: 13.984772
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3056.3152273
Median total errors in population: 947.7963
Error averages by case: (103.36668790000078 8.231 86.70510260000049 11.253 74.98276949999969 10.76 137.7111510999989 10.14 132.36589680000162 10.43 111.32895249999991 7.85 104.09071019999901 9.373 120.70631980000009 8.299 115.32461440000019 7.889 108.36812349999968 11.11 142.65740110000044 4.983 98.91504190000045 10.566 99.06676569999986 4.206 110.54140460000134 9.036 117.0549360000013 8.815 131.0466606000019 10.583 99.01018649999992 7.897 153.6682971999988 11.581 103.7304751000002 7.012 120.25505019999844 10.014 123.39959380000016 10.889 92.55966360000005 10.289 109.37643429999977 8.899 87.43051089999977 10.34 142.15047749999897 10.057)
Error minima by case: (0.1548 2 0.1379 8 0.0 0 0.6571 1 1.9162 2 0.9606 1 0.0105 1 0.0388 2 3.404 1 0.0716 2 0.7316 1 0.0024 6 0.0 0 0.0419 1 1.2487 1 0.9162 2 0.2055 2 0.3088 8 0.0376 1 0.0 0 1.6318 7 0.079 7 0.4911 2 0.3687 6 1.8457 1)
Average genome size in population (length): 115.829
Average program size in population (points): 116.829
Average percent parens in population: 0.009
Minimum age in population: 205.6854470458939
Maximum age in population: 209.6250352471545
Average age in population: 207.7907799284115
Median age in population: 207.8737472987459
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.656
Error (vector) diversity:			 0.661
Behavioral diversity:				 0.664
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 294351964
--- Timings ---
Current time: 1529615514712 milliseconds
Total Time:         630.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       226.7 seconds, 36.0%
Fitness Testing:    318.7 seconds, 50.6%
Report:              84.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 47036.789700000154
Test mean error for best: 23.51839
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.8795081929
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.392980845   
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.9619280405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 106.7117485101
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.4150848387 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1538257775  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 120.6259148809
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 124.8580659265
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.96898676   
Correct output: 3.7173929377   | Program output: 5.0816960439  
Correct output: 109.3750668562 | Program output: 127.5848376531
Correct output: 16.5512971727  | Program output: 5.7246902786  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_mod print_float float_cos float_swap float_swap float_mod print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [5.798 9 0.1379 10 11.2945 10 13.6874 11 21.9581 10 7.2327 10 0.0691 9 20.9341 12 64.0 1 12.4997 10 80.0 1 3.004 7 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.721 11 26.4907 11 0.8774 8 21.0419 9 67.746 10 1.3643 10 18.2098 11 10.8266 10 20.5927 11]
Total: 686.7593999999999
Mean: 13.735188
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2935.374276900001
Median total errors in population: 918.1385
Error averages by case: (94.52197510000076 8.176 92.54206990000044 11.154 74.17303229999975 10.713 129.74140189999915 10.172 123.27399530000174 10.37 101.26305719999979 7.918 101.24124579999904 9.201 126.2756032999999 8.387 116.58135300000002 7.492 102.4282369999999 10.988 137.91107570000057 5.395 91.45597410000023 10.415 101.2009722999998 3.814 100.40222900000128 8.862 111.10420470000125 8.899 123.15429610000172 10.541 93.5827589000001 7.951 145.67364409999874 11.523 92.66618150000015 6.866 116.31058539999854 9.763 123.36229060000011 11.055 83.5863468 10.323 102.46313719999986 8.905 86.37684399999982 10.415 134.70076569999853 10.083)
Error minima by case: (1.0727 2 0.1379 9 0.0 0 0.3429 1 0.9162 2 2.714 1 0.0127 1 0.0388 2 16.45 1 0.1651 1 1.2547 1 0.0521 1 0.0 0 0.0419 2 1.2487 1 0.0838 2 0.2836 2 1.1422 8 0.0376 2 1.0 1 0.6691 2 0.0 0 0.468 2 0.1339 2 1.8457 1)
Average genome size in population (length): 116.411
Average program size in population (points): 117.411
Average percent parens in population: 0.009
Minimum age in population: 206.7928544526902
Maximum age in population: 211.3674900786295
Average age in population: 209.0899200894247
Median age in population: 209.1030173703925
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.616
Error (vector) diversity:			 0.62
Behavioral diversity:				 0.622
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 297262489
--- Timings ---
Current time: 1529615520042 milliseconds
Total Time:         635.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.4 seconds, 35.9%
Fitness Testing:    321.6 seconds, 50.6%
Report:              85.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 47036.789700000154
Test mean error for best: 23.51839
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.8795081929
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.392980845   
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.9619280405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 106.7117485101
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.4150848387 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1538257775  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 120.6259148809
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 124.8580659265
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.96898676   
Correct output: 3.7173929377   | Program output: 5.0816960439  
Correct output: 109.3750668562 | Program output: 127.5848376531
Correct output: 16.5512971727  | Program output: 5.7246902786  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_yankdup} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_sub} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_yankdup print_float float_cos float_swap float_swap float_mod print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_sub float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [5.798 9 0.1379 10 11.2945 10 13.6874 11 21.9581 10 7.2327 10 0.0691 9 20.9341 12 64.0 1 12.4997 10 80.0 1 3.004 7 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.721 11 26.4907 11 0.8774 8 21.0419 9 67.746 10 1.3643 10 18.2098 11 10.8266 10 20.5927 11]
Total: 686.7593999999999
Mean: 13.735188
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3027.5025725000005
Median total errors in population: 861.3421000000002
Error averages by case: (101.14543090000083 8.083 91.55964330000039 11.182 79.94630080000002 10.609 135.7899475999993 10.162 122.14509140000177 10.425 110.17987519999964 8.149 97.97730659999927 9.084 127.58507279999944 8.39 124.10585870000008 6.767 103.00969310000029 11.088 144.5875592000008 5.659 100.85649170000016 10.364 89.5703910999999 3.654 99.80538370000147 8.867 117.57654920000127 8.885 122.05262420000189 10.571 93.09179950000036 7.98 151.9209748999988 11.567 101.04816820000003 6.923 116.16284759999851 9.805 129.4219060999997 11.228 95.01548880000023 10.509 105.07394180000006 8.793 95.67154759999966 10.661 142.69967849999927 10.098)
Error minima by case: (0.1548 2 0.1379 7 0.0 0 0.3429 1 0.9162 2 1.9382 1 0.0127 1 0.2148 2 7.8732 1 0.0752 2 0.9848 1 0.1297 6 0.0 0 0.0419 2 1.7891 1 0.0838 2 0.1265 2 0.3088 8 0.0376 2 0.0 0 2.5992 8 0.046 7 0.4172 2 0.1007 7 1.1921 1)
Average genome size in population (length): 117.672
Average program size in population (points): 118.672
Average percent parens in population: 0.008
Minimum age in population: 208.0040934329359
Maximum age in population: 212.7273592851428
Average age in population: 210.4532391541533
Median age in population: 210.4988004098535
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.624
Error (vector) diversity:			 0.626
Behavioral diversity:				 0.627
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 300204688
--- Timings ---
Current time: 1529615525433 milliseconds
Total Time:         640.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       229.8 seconds, 35.9%
Fitness Testing:    324.7 seconds, 50.7%
Report:              86.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 47036.789700000154
Test mean error for best: 23.51839
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.8795081929
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.392980845   
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.9619280405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 106.7117485101
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.4150848387 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1538257775  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 120.6259148809
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 124.8580659265
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.96898676   
Correct output: 3.7173929377   | Program output: 5.0816960439  
Correct output: 109.3750668562 | Program output: 127.5848376531
Correct output: 16.5512971727  | Program output: 5.7246902786  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_yankdup} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_mod print_float float_cos float_swap float_swap float_mod print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_yankdup in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [5.798 9 0.1379 10 11.2945 10 13.6874 11 21.9581 10 7.2327 10 0.0691 9 20.9341 12 64.0 1 12.4997 10 80.0 1 3.004 7 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.721 11 26.4907 11 0.8774 8 21.0419 9 67.746 10 1.3643 10 18.2098 11 10.8266 10 20.5927 11]
Total: 686.7593999999999
Mean: 13.735188
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2956.284224799998
Median total errors in population: 890.5304
Error averages by case: (103.90386550000116 7.946 93.2877223000004 11.165 76.30419410000005 10.441 127.50832589999919 10.256 117.1103264000018 10.245 113.80978669999952 8.111 86.13357109999943 9.131 127.8169927999992 8.264 122.54203290000004 6.779 97.99565830000046 11.032 143.1767427000008 5.24 90.7601235 10.31 86.1034916999999 3.515 95.95050060000142 8.719 123.40851980000144 8.947 116.93661270000194 10.41 106.2190458000006 8.058 143.96690789999872 11.518 102.50843580000003 6.865 113.66651099999841 9.727 128.87386169999962 11.333 86.45548610000021 10.56 109.34971700000004 8.836 83.09538699999962 10.766 131.07940549999833 10.147)
Error minima by case: (0.4389 2 0.1379 8 0.1947 1 0.3429 1 0.0838 2 0.6659 1 0.0107 1 1.082 2 6.1873 1 0.1901 1 0.2684 1 0.2005 2 0.0 0 0.0419 2 0.2487 1 1.0838 2 0.1265 2 9.0384 8 0.0376 2 1.0 1 2.1546 2 0.0486 2 0.4911 2 0.1765 1 0.8457 1)
Average genome size in population (length): 118.923
Average program size in population (points): 119.923
Average percent parens in population: 0.008
Minimum age in population: 209.5559342216438
Maximum age in population: 213.5189791880148
Average age in population: 211.7977562720261
Median age in population: 211.830912516721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.632
Error (vector) diversity:			 0.637
Behavioral diversity:				 0.638
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 303178138
--- Timings ---
Current time: 1529615530690 milliseconds
Total Time:         646.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.4 seconds, 35.8%
Fitness Testing:    327.7 seconds, 50.7%
Report:              87.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 46607.53120000015
Test mean error for best: 23.30377
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.8795081929
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.392980845   
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.9619280405
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 106.7117485101
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.4150848387 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1538257775  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 120.6259148809
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 124.8580659265
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.96898676   
Correct output: 3.7173929377   | Program output: 5.0816960439  
Correct output: 109.3750668562 | Program output: 127.5848376531
Correct output: 16.5512971727  | Program output: 5.7246902786  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_mod print_float float_cos float_swap float_swap float_mod print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc float_yankdup float_yank float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [5.798 9 0.1379 10 11.2945 10 13.6874 11 21.9581 10 7.2327 10 0.0691 9 20.9341 12 64.0 1 12.4997 10 80.0 1 3.004 7 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.721 11 26.4907 11 0.8774 8 21.0419 9 67.746 10 1.3643 10 18.2098 11 10.8266 10 20.5927 11]
Total: 686.7593999999999
Mean: 13.735188
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3019.6979404
Median total errors in population: 904.85965
Error averages by case: (106.96597770000099 7.921 93.61272150000053 11.166 75.32353550000009 10.461 136.9387069999993 10.285 124.0116459000018 10.33 111.71175919999953 8.177 88.83958019999938 9.148 130.1553776999991 8.346 120.03807729999977 7.517 97.70277740000066 11.001 140.76348510000048 4.744 91.77499190000013 10.211 84.69276049999984 3.721 102.93646910000147 8.842 137.8141437000014 8.968 122.85037030000183 10.476 106.9422091000007 8.1 152.35446859999868 11.56 101.66995219999986 6.805 110.46158029999853 9.799 126.02129319999948 11.348 88.70912060000047 10.666 110.20071750000011 8.998 85.71713189999954 10.81 141.85308699999905 10.236)
Error minima by case: (0.4596 2 0.1379 7 0.2013 1 0.3429 1 0.8572 2 0.6354 1 0.0127 1 0.0388 2 4.1873 1 0.8099 2 2.2684 1 0.004 2 0.0 0 0.0419 2 3.2848 1 0.0838 2 0.0533 2 2.7141 8 0.0376 2 1.0 1 0.8454 1 0.0486 1 0.0113 2 0.0622 2 3.1543 1)
Average genome size in population (length): 119.016
Average program size in population (points): 120.016
Average percent parens in population: 0.008
Minimum age in population: 210.7766303661876
Maximum age in population: 214.854334845921
Average age in population: 213.1546191168899
Median age in population: 213.2151831426692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.637
Error (vector) diversity:			 0.641
Behavioral diversity:				 0.641
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 306153988
--- Timings ---
Current time: 1529615536301 milliseconds
Total Time:         651.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       233.1 seconds, 35.8%
Fitness Testing:    330.8 seconds, 50.7%
Report:              87.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 47171.115500000116
Test mean error for best: 23.58556
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.0265128176
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.2767824405  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.5173763756
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 102.9928248086
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.3427975986 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.157909088   
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.981213676 
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 124.2790072571
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.6546698647 
Correct output: 3.7173929377   | Program output: 5.0811096357  
Correct output: 109.3750668562 | Program output: 118.4254836707
Correct output: 16.5512971727  | Program output: 5.7104694496  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_yankdup} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_yankdup print_float float_cos float_swap float_swap float_mod print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [6.6509 10 0.1379 10 11.1783 10 13.6874 11 21.9581 10 7.6773 11 0.0691 9 24.653 11 64.0 1 12.572 11 80.0 1 3.0081 10 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.0763 9 26.4907 11 0.2983 10 21.0419 9 67.4316 9 1.3637 8 9.0504 11 10.8408 12 20.5927 11]
Total: 685.0519999999999
Mean: 13.70104
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3018.2084217000015
Median total errors in population: 924.02565
Error averages by case: (102.04094560000088 7.865 95.29498070000048 11.184 74.86563670000017 10.184 135.46456629999923 10.26 118.76022830000184 10.277 111.01056079999921 8.273 85.07010429999966 9.23 129.69774019999934 8.475 120.83998769999984 7.732 98.51594790000046 10.773 144.68781200000032 4.522 93.99714440000012 9.935 87.20564279999996 3.563 97.59191460000156 8.775 140.1852633000015 8.982 118.49492970000196 10.414 108.54803510000094 8.2 148.31177189999863 11.519 98.89811909999976 6.87 115.14054729999843 9.721 130.40291569999945 11.274 95.47742550000034 10.689 108.21648509999999 8.994 90.82230719999954 10.732 140.035409499999 10.189)
Error minima by case: (0.1095 2 0.1379 9 0.0 0 0.3429 1 0.9162 2 1.0626 1 0.0127 1 0.9992 2 1.9294 1 0.2913 2 0.7316 1 0.004 5 0.0 0 0.9581 2 4.7513 1 0.0838 2 0.0415 2 1.6275 6 0.0376 2 1.0 1 1.2604 7 0.0218 7 0.3479 2 0.0419 6 4.1543 1)
Average genome size in population (length): 118.564
Average program size in population (points): 119.564
Average percent parens in population: 0.008
Minimum age in population: 212.4542269313782
Maximum age in population: 216.6443391590209
Average age in population: 214.5432595190189
Median age in population: 214.5801379519354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.638
Error (vector) diversity:			 0.642
Behavioral diversity:				 0.642
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 309118463
--- Timings ---
Current time: 1529615541556 milliseconds
Total Time:         657.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.7 seconds, 35.7%
Fitness Testing:    333.7 seconds, 50.8%
Report:              88.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 47177.638900000115
Test mean error for best: 23.58882
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.0265128176
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.2767824405  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.5173763756
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 102.9928248086
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.3427975986 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.157909088   
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.981213676 
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 124.2790072571
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.6546698647 
Correct output: 3.7173929377   | Program output: 5.0811096357  
Correct output: 109.3750668562 | Program output: 118.4254836707
Correct output: 16.5512971727  | Program output: 5.7104694496  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction integer_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_mod print_float float_cos float_swap float_swap float_mod print_float integer_div integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_div integer_stackdepth float_min integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_shove float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [6.6509 10 0.1379 10 11.1783 10 13.6874 11 21.9581 10 7.6773 11 0.0691 9 24.653 11 64.0 1 12.572 11 80.0 1 3.0081 10 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.0763 9 26.4907 11 0.2983 10 21.0419 9 67.4316 9 1.3637 8 9.0504 11 10.8408 12 20.5927 11]
Total: 685.0519999999999
Mean: 13.70104
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2931.8587296000023
Median total errors in population: 932.7023499999999
Error averages by case: (97.78726080000045 8.108 91.98239260000047 11.202 76.11469110000039 10.245 128.27251779999935 10.194 118.67780680000176 10.382 107.78077949999931 8.472 88.33704899999935 9.218 117.97115739999948 8.966 123.0370475999997 7.015 89.89337250000051 10.764 141.62440360000016 4.41 87.1139787000001 9.601 86.61549029999992 3.962 96.11017810000158 8.96 132.22562330000156 8.888 118.47175140000193 10.506 102.48174900000053 8.548 142.82415049999886 11.48 97.90401379999979 7.285 116.01661349999833 9.867 127.46832399999958 11.035 91.29021680000032 10.636 103.67449379999981 9.265 83.6481716999998 10.685 134.72049599999895 10.121)
Error minima by case: (0.039 2 0.1379 9 0.0 0 1.3429 1 0.0838 2 0.0252 1 0.0127 1 0.1232 2 3.1873 1 0.0752 1 0.7316 1 0.004 1 0.0 0 0.9581 2 3.7513 1 1.0838 2 0.2055 2 0.07 7 0.0376 1 1.0 1 0.0601 2 0.0486 1 0.3004 2 0.0525 2 3.1543 1)
Average genome size in population (length): 117.893
Average program size in population (points): 118.893
Average percent parens in population: 0.008
Minimum age in population: 213.5925387374793
Maximum age in population: 217.7844735935595
Average age in population: 215.9173674377142
Median age in population: 215.9542995380077
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.638
Error (vector) diversity:			 0.643
Behavioral diversity:				 0.644
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 312066388
--- Timings ---
Current time: 1529615547122 milliseconds
Total Time:         662.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.3 seconds, 35.7%
Fitness Testing:    336.7 seconds, 50.8%
Report:              89.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 46753.549900000144
Test mean error for best: 23.37677
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.1528482796  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.268557755  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1620873128  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.323382085  
Correct output: 3.7173929377   | Program output: 5.0805071707  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.6956802637  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_yankdup} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_swap float_yankdup print_float float_cos float_swap float_swap float_mod print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth float_dup_times integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float)
Errors: [7.4676 10 0.1379 10 11.0544 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 12.6463 11 80.0 1 3.0122 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 67.1003 12 1.3631 10 1.5628 11 10.8556 11 20.5927 11]
Total: 680.0978000000001
Mean: 13.601956
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2681.971199000001
Median total errors in population: 895.9973
Error averages by case: (94.2629692000002 8.3 84.2920940000005 11.159 61.586312400000295 10.19 115.32256529999952 10.256 105.63313060000169 10.328 100.1195492999995 8.601 70.54080720000005 9.218 117.6774947999996 9.268 113.51731079999972 5.786 81.26680450000029 10.639 137.7370531000004 4.387 72.56670520000009 9.392 80.06959089999995 3.853 83.11927580000155 8.904 121.02499540000137 8.948 105.68138050000186 10.465 98.03002120000053 8.721 129.81589779999902 11.525 91.25970539999982 7.47 103.37891999999843 9.825 118.1762398999996 10.967 76.71668440000028 10.561 103.83833309999946 9.149 67.77513999999996 10.692 119.76521819999871 10.193)
Error minima by case: (0.0939 2 0.1379 8 0.0 0 0.3429 1 2.9162 2 0.1498 1 0.0052 1 8.0E-4 2 3.8127 1 0.5123 1 0.3603 1 0.0057 5 0.0 0 0.0419 1 5.7513 1 1.9162 2 0.0559 2 10.5775 8 0.0376 2 0.0 0 2.6305 2 0.0482 7 0.1636 2 0.0713 7 5.1543 1)
Average genome size in population (length): 117.642
Average program size in population (points): 118.642
Average percent parens in population: 0.008
Minimum age in population: 214.7837378232657
Maximum age in population: 219.2662169518863
Average age in population: 217.2841199049949
Median age in population: 217.3163275363889
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.64
Error (vector) diversity:			 0.645
Behavioral diversity:				 0.646
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 315008013
--- Timings ---
Current time: 1529615552559 milliseconds
Total Time:         668.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.9 seconds, 35.6%
Fitness Testing:    339.9 seconds, 50.9%
Report:              90.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 47177.638900000115
Test mean error for best: 23.58882
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.0265128176
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.2767824405  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.5173763756
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 102.9928248086
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.3427975986 
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.157909088   
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.981213676 
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 124.2790072571
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.6546698647 
Correct output: 3.7173929377   | Program output: 5.0811096357  
Correct output: 109.3750668562 | Program output: 118.4254836707
Correct output: 16.5512971727  | Program output: 5.7104694496  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction integer_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_792} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_mod print_float float_cos float_swap float_swap float_mod print_float integer_div integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_div integer_stackdepth float_min integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_792 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_shove float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [6.6509 10 0.1379 10 11.1783 10 13.6874 11 21.9581 10 7.6773 11 0.0691 9 24.653 11 64.0 1 12.572 11 80.0 1 3.0081 10 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.0763 9 26.4907 11 0.2983 10 21.0419 9 67.4316 9 1.3637 8 9.0504 11 10.8408 12 20.5927 11]
Total: 685.0519999999999
Mean: 13.70104
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2794.455089700001
Median total errors in population: 890.1882
Error averages by case: (95.38591169999977 8.664 85.85209290000049 11.107 67.76426500000055 10.221 123.62915319999952 10.196 110.44896200000169 10.352 106.86173429999943 9.018 78.56496589999992 9.072 112.93392239999984 9.723 122.01835629999972 4.958 79.04901560000025 10.625 141.38430230000043 4.535 74.61551020000013 9.236 80.6890537000001 3.842 88.46391830000137 8.873 128.74812920000136 8.941 110.44161630000181 10.496 97.58259220000028 9.1 140.45726339999896 11.508 95.70590799999958 8.038 107.06076229999853 9.806 122.65955179999959 10.775 81.65765110000032 10.44 108.35991309999933 9.349 74.81446790000017 10.67 129.6570705999986 10.104)
Error minima by case: (0.0939 2 0.1379 8 0.0 0 0.3429 1 2.9162 2 0.2286 1 0.0127 1 0.0 0 9.0619 1 1.8021 2 34.0709 1 0.004 5 0.0 0 0.9581 1 0.7043 1 1.9162 2 0.0072 2 0.1422 8 0.0376 2 0.0 0 6.2228 7 0.0193 5 0.5089 1 0.0609 6 1.8457 1)
Average genome size in population (length): 116.617
Average program size in population (points): 117.617
Average percent parens in population: 0.009
Minimum age in population: 216.589821533799
Maximum age in population: 220.7558452453498
Average age in population: 218.6052275539037
Median age in population: 218.640530787261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.587
Error (vector) diversity:			 0.592
Behavioral diversity:				 0.592
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 317923538
--- Timings ---
Current time: 1529615557950 milliseconds
Total Time:         673.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.4 seconds, 35.6%
Fitness Testing:    342.9 seconds, 50.9%
Report:              91.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 46744.94450000014
Test mean error for best: 23.37247
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.1528482796  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.268557755  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1620873128  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.323382085  
Correct output: 3.7173929377   | Program output: 5.0805071707  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.6956802637  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_dup_items float_inc float_dup_items float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 11.0544 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 12.6463 11 80.0 1 3.0122 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 67.1003 12 1.3631 10 1.5628 11 10.8556 11 20.5927 11]
Total: 680.0978000000001
Mean: 13.601956
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2760.731713100001
Median total errors in population: 889.75125
Error averages by case: (91.74302639999988 8.743 86.02276370000057 11.115 69.57420800000051 10.182 123.42616229999958 10.231 114.39129790000175 10.46 99.54816029999962 9.118 76.89263049999983 9.028 106.64308229999997 9.793 114.81964209999975 4.396 82.40997000000023 10.61 131.2231912000003 4.294 74.03828450000023 9.325 76.53360130000007 3.834 92.9242499000016 8.926 129.78925500000156 8.946 114.6713087000019 10.546 93.81353790000011 9.059 138.38766429999905 11.544 89.13411749999968 8.238 114.65186139999824 9.867 121.50380379999979 10.701 84.90012410000047 10.312 99.99470089999912 9.4 75.53286210000019 10.846 128.50720699999857 10.141)
Error minima by case: (0.0305 2 0.1379 9 0.0 0 0.6571 1 4.352 2 0.2286 2 0.0127 1 0.1615 2 2.3081 1 0.2482 1 2.2684 1 0.0017 5 0.0 0 1.0419 1 2.2487 1 0.3238 2 0.3443 2 0.3088 8 0.0376 2 0.9545 1 7.3439 8 0.1043 6 0.3786 2 0.2154 7 1.9162 1)
Average genome size in population (length): 116.997
Average program size in population (points): 117.997
Average percent parens in population: 0.008
Minimum age in population: 217.589821533799
Maximum age in population: 222.1042569496995
Average age in population: 219.8823759458153
Median age in population: 219.8965059811886
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.584
Error (vector) diversity:			 0.587
Behavioral diversity:				 0.588
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 320848763
--- Timings ---
Current time: 1529615563294 milliseconds
Total Time:         679.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.0 seconds, 35.5%
Fitness Testing:    346.0 seconds, 51.0%
Report:              91.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 46753.549900000144
Test mean error for best: 23.37677
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.1528482796  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.268557755  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1620873128  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.323382085  
Correct output: 3.7173929377   | Program output: 5.0805071707  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.6956802637  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_mod print_float float_cos float_swap float_swap float_mod print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_yank in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 11.0544 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 12.6463 11 80.0 1 3.0122 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 67.1003 12 1.3631 10 1.5628 11 10.8556 11 20.5927 11]
Total: 680.0978000000001
Mean: 13.601956
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2970.826953300001
Median total errors in population: 907.6395500000001
Error averages by case: (111.84627729999919 8.746 92.66835300000055 11.064 72.63169960000039 10.201 122.28537439999918 10.305 112.90192630000186 10.28 123.42104149999903 9.134 85.9733096999994 9.093 125.9346131000006 9.631 130.88314279999963 4.563 87.99441810000025 10.805 149.53201180000045 4.579 78.23599510000017 9.642 88.61597300000008 4.08 92.45701730000162 8.77 130.9204910000015 8.971 112.60035640000193 10.45 115.22846260000046 8.808 140.02119889999878 11.509 113.30189419999937 8.453 113.16290169999822 9.681 129.54759449999966 10.677 85.41060860000057 10.092 119.88326859999884 9.316 77.85398680000027 11.041 127.40403699999847 10.22)
Error minima by case: (0.0305 1 0.1379 7 0.0 0 0.3429 1 0.9162 2 0.1478 1 0.0127 1 8.0E-4 2 7.8127 1 0.1271 2 1.0 1 0.0 4 0.0 0 0.0419 1 1.8711 1 0.0838 2 0.0072 2 2.0324 8 0.0571 2 0.0 0 7.777 8 0.2366 7 0.6996 2 0.0304 7 0.4592 1)
Average genome size in population (length): 117.089
Average program size in population (points): 118.089
Average percent parens in population: 0.008
Minimum age in population: 218.9708611546829
Maximum age in population: 223.3144562706443
Average age in population: 221.2571613234316
Median age in population: 221.2665741273638
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.564
Error (vector) diversity:			 0.567
Behavioral diversity:				 0.567
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 323776188
--- Timings ---
Current time: 1529615568566 milliseconds
Total Time:         684.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       242.5 seconds, 35.4%
Fitness Testing:    349.1 seconds, 51.0%
Report:              92.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 46753.549900000144
Test mean error for best: 23.37677
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.1528482796  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.268557755  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1620873128  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.323382085  
Correct output: 3.7173929377   | Program output: 5.0805071707  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.6956802637  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_mod print_float float_cos float_swap float_swap float_mod print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_yank in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 11.0544 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 12.6463 11 80.0 1 3.0122 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 67.1003 12 1.3631 10 1.5628 11 10.8556 11 20.5927 11]
Total: 680.0978000000001
Mean: 13.601956
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3091.0179966
Median total errors in population: 879.6639499999999
Error averages by case: (105.82633079999924 8.966 96.2223683000005 11.113 78.49811199999996 10.071 143.5077655999989 10.287 122.3216342000018 10.362 116.87879699999964 9.33 90.15913939999906 9.069 120.26269180000085 9.607 129.3075932999996 4.497 92.54200530000016 10.878 146.97169360000044 4.468 87.0721072000005 9.844 87.57808270000007 4.021 101.56904600000152 8.884 148.08444990000137 8.979 122.06335460000196 10.497 108.35385790000022 8.785 159.26536629999853 11.537 105.67616189999954 8.754 119.89530399999838 9.77 133.07638819999966 10.669 96.60587540000034 9.998 111.07028659999901 9.391 88.99447050000042 11.216 148.0671140999993 10.155)
Error minima by case: (0.0305 2 0.1379 7 0.0 0 1.3429 1 3.9162 2 0.1498 1 0.0127 1 8.0E-4 2 7.8127 1 1.2697 2 0.0729 1 0.0081 5 0.0 0 0.0419 2 1.7513 1 2.9162 2 0.4687 2 0.5196 8 0.0944 2 0.9545 1 7.777 2 0.0672 6 0.3004 2 0.358 7 1.1543 1)
Average genome size in population (length): 117.71
Average program size in population (points): 118.71
Average percent parens in population: 0.008
Minimum age in population: 220.4991581810461
Maximum age in population: 224.8157859978118
Average age in population: 222.6133820878522
Median age in population: 222.6440975664282
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.568
Error (vector) diversity:			 0.572
Behavioral diversity:				 0.573
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 326719163
--- Timings ---
Current time: 1529615573658 milliseconds
Total Time:         689.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.1 seconds, 35.4%
Fitness Testing:    351.9 seconds, 51.1%
Report:              93.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 46744.94450000014
Test mean error for best: 23.37247
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 5.1528482796  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.268557755  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1620873128  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.323382085  
Correct output: 3.7173929377   | Program output: 5.0805071707  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.6956802637  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction integer_shove} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_mod print_float float_cos float_swap float_swap integer_shove print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc float_swap integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_inc float_tan integer_sub integer_inc integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_shove float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 11.0544 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 12.6463 11 80.0 1 3.0122 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 67.1003 12 1.3631 10 1.5628 11 10.8556 11 20.5927 11]
Total: 680.0978000000001
Mean: 13.601956
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2713.5435961999997
Median total errors in population: 940.71385
Error averages by case: (91.19002969999963 8.681 80.84955080000067 11.093 67.8782962 10.132 124.26013849999919 10.178 108.05880660000173 10.311 95.36544109999994 8.998 71.5546682999998 9.003 109.32357230000063 9.319 113.29593349999973 4.35 84.03226970000021 10.841 135.11249330000035 4.262 75.16630809999995 9.836 76.99785040000008 3.947 85.7515832000015 8.905 130.82308450000147 8.889 108.24179450000179 10.479 88.61614960000024 8.279 138.5327564999988 11.463 86.63550569999984 8.455 107.36617769999839 9.772 120.9276103 10.663 84.11535430000048 9.93 99.78499209999929 9.112 73.78177940000023 11.214 127.67344989999822 10.096)
Error minima by case: (0.0305 2 0.1379 9 0.0 0 0.3429 1 0.0753 2 0.0662 1 0.0127 1 8.0E-4 2 4.8732 1 0.7405 2 9.7316 1 0.0017 5 0.0 0 0.0419 2 1.7513 1 1.0838 2 0.1217 2 1.1422 8 0.1043 2 0.0 0 8.5106 8 0.0474 7 0.3004 2 0.1007 7 1.1543 1)
Average genome size in population (length): 118.318
Average program size in population (points): 119.318
Average percent parens in population: 0.008
Minimum age in population: 221.8141832521726
Maximum age in population: 225.8193454525991
Average age in population: 223.9661964458218
Median age in population: 224.0101638000096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.588
Error (vector) diversity:			 0.59
Behavioral diversity:				 0.59
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 329677352
--- Timings ---
Current time: 1529615578820 milliseconds
Total Time:         694.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.7 seconds, 35.4%
Fitness Testing:    354.8 seconds, 51.1%
Report:              93.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 47356.402500000135
Test mean error for best: 23.67820
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.0265128176
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.1715186636  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.5173763756
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 102.9928248086
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -13.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 0.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.981213676 
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 124.2790072571
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.4328622281 
Correct output: 3.7173929377   | Program output: 2.1251148222  
Correct output: 109.3750668562 | Program output: 118.4254836707
Correct output: 16.5512971727  | Program output: 3.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_yankdup} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_733} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_yankdup print_float float_cos float_swap integer_fromfloat float_dec in1 integer_fromfloat float_pop integer_inc integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_fromfloat integer_yank integer_inc integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_733 integer_flush in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_yankdup integer_sub integer_inc integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_shove float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [6.6509 10 0.1379 10 7.073 8 13.6874 11 21.9581 10 7.6773 11 0.0691 9 24.653 11 64.0 1 4.0752 11 80.0 1 0.3514 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.0763 9 26.4907 11 0.2983 10 21.0419 9 67.2098 10 1.5923 11 9.0504 11 13.1007 11 20.5927 11]
Total: 672.0599
Mean: 13.441198
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2890.2126715000004
Median total errors in population: 946.4435
Error averages by case: (105.56314369999981 8.76 83.77068060000055 11.073 72.82431710000013 9.907 119.28077659999931 10.159 111.66790910000152 10.374 114.78097289999978 8.962 73.15479400000001 9.007 122.01014600000099 9.373 125.2333643999997 4.593 92.46474779999988 10.95 144.1594779000003 4.507 85.3455013 9.959 90.05071390000005 4.034 90.11425850000127 8.905 124.63258820000115 8.92 111.60464880000158 10.466 104.4972873000003 8.263 131.6893574999989 11.47 105.75358519999978 8.467 114.20009419999863 9.783 129.85564279999994 10.904 93.48033060000036 10.138 109.66459929999944 9.137 80.38663810000021 11.243 124.63209569999856 10.041)
Error minima by case: (0.1209 2 0.1379 9 0.0 0 0.3429 1 1.0838 2 0.1302 1 0.0127 1 0.3313 2 0.8127 1 0.2827 1 4.2684 1 0.0081 5 0.0 0 1.0419 1 1.2487 1 1.9162 2 0.3567 2 1.1422 8 0.1226 2 0.3331 1 3.777 7 0.0564 6 0.5628 2 0.304 6 1.8457 1)
Average genome size in population (length): 118.843
Average program size in population (points): 119.843
Average percent parens in population: 0.008
Minimum age in population: 222.8141832521726
Maximum age in population: 227.2407401381191
Average age in population: 225.2550936934133
Median age in population: 225.2925964434426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.603
Error (vector) diversity:			 0.604
Behavioral diversity:				 0.605
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 332648652
--- Timings ---
Current time: 1529615584240 milliseconds
Total Time:         699.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.3 seconds, 35.3%
Fitness Testing:    357.8 seconds, 51.1%
Report:              94.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 46807.526400000155
Test mean error for best: 23.40376
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.1528482796  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.268557755  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1620873128  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.323382085  
Correct output: 3.7173929377   | Program output: 5.0805071707  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.6956802637  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat integer_yank float_swap integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_dup_times integer_inc integer_sub integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 7.0544 9 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 12.6463 11 80.0 1 3.0122 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 67.1003 12 1.3631 10 1.5628 11 10.8556 11 20.5927 11]
Total: 677.0978000000001
Mean: 13.541956
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2821.386659999999
Median total errors in population: 848.7631000000001
Error averages by case: (94.48196360000026 9.03 87.94997560000054 11.051 73.3685409999999 9.838 121.86836419999919 10.181 119.46919160000174 10.402 104.32564620000007 9.21 78.76569399999967 8.926 112.99836510000047 9.736 123.26064409999968 4.38 83.67918589999985 10.901 140.15087430000037 4.31 75.25402219999987 9.907 79.12662190000012 3.921 99.85871210000147 8.866 126.88251930000149 8.858 119.3619539000019 10.551 99.10771370000055 8.383 134.0177558999989 11.523 93.8609199 8.632 114.44772009999828 9.747 124.32307560000035 11.123 80.66189170000044 10.195 100.47523149999952 9.355 75.5809578000001 11.24 127.71811879999836 10.125)
Error minima by case: (0.0272 2 0.1379 8 0.0 0 0.6571 1 3.9162 2 0.1374 2 0.0127 1 0.3313 2 0.8127 1 0.7405 2 0.2684 1 0.0017 5 0.0 0 0.0419 2 2.2487 2 2.9162 2 0.3608 2 0.8359 8 0.1226 2 1.0 1 0.2893 8 0.2663 6 0.4017 2 0.1007 7 2.8457 1)
Average genome size in population (length): 119.787
Average program size in population (points): 120.787
Average percent parens in population: 0.008
Minimum age in population: 224.2702453006544
Maximum age in population: 228.3740149084424
Average age in population: 226.5160253794491
Median age in population: 226.5866303947694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.559
Error (vector) diversity:			 0.564
Behavioral diversity:				 0.565
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 335643527
--- Timings ---
Current time: 1529615589680 milliseconds
Total Time:         705.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.8 seconds, 35.3%
Fitness Testing:    360.8 seconds, 51.2%
Report:              95.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 46807.526400000155
Test mean error for best: 23.40376
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.1528482796  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.268557755  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1620873128  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.323382085  
Correct output: 3.7173929377   | Program output: 5.0805071707  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.6956802637  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_yankdup})
Best program: (float_swap float_swap float_swap float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat integer_yank float_swap integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_dup_times integer_inc integer_sub integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_yankdup)
Errors: [7.4676 10 0.1379 10 7.0544 9 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 12.6463 11 80.0 1 3.0122 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 67.1003 12 1.3631 10 1.5628 11 10.8556 11 20.5927 11]
Total: 677.0978000000001
Mean: 13.541956
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2874.6762509999985
Median total errors in population: 933.6185
Error averages by case: (99.06950540000082 9.105 88.11200820000057 11.088 72.61134860000017 9.756 122.37045889999928 10.25 119.64602420000166 10.397 105.55205710000021 9.039 79.89405809999991 9.032 122.48674240000044 9.823 124.60602679999965 4.731 84.67273069999962 10.876 142.0548536000004 4.602 77.55452389999952 9.761 87.76416550000005 4.035 98.62036770000135 8.942 130.90760460000143 8.996 119.49311190000181 10.549 101.2092707000007 8.313 138.498589699999 11.534 96.77850550000045 8.635 116.70585619999837 9.863 124.09838310000066 11.375 82.35077880000044 10.341 104.37542239999993 9.372 76.22014800000017 11.049 127.38370899999853 10.176)
Error minima by case: (0.0272 2 0.1379 7 0.0 0 0.6571 1 0.0838 2 0.0662 1 0.0127 1 8.0E-4 2 0.1873 1 0.7668 2 0.7316 1 0.0051 5 0.0 0 0.0419 1 4.7513 1 1.0838 2 0.0416 2 0.3088 8 0.0751 2 0.0 0 0.223 8 0.0026 6 0.4372 2 0.0661 6 4.1543 1)
Average genome size in population (length): 120.712
Average program size in population (points): 121.712
Average percent parens in population: 0.008
Minimum age in population: 225.4226036774663
Maximum age in population: 229.7980588741984
Average age in population: 227.8087801771411
Median age in population: 227.8532299567924
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.581
Error (vector) diversity:			 0.583
Behavioral diversity:				 0.583
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 338661502
--- Timings ---
Current time: 1529615595003 milliseconds
Total Time:         710.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       250.2 seconds, 35.2%
Fitness Testing:    363.7 seconds, 51.2%
Report:              96.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 46807.526400000155
Test mean error for best: 23.40376
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.1528482796  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.268557755  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1620873128  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.323382085  
Correct output: 3.7173929377   | Program output: 5.0805071707  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.6956802637  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_yankdup})
Best program: (float_swap float_swap float_swap float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat integer_yank float_swap integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_dup_times integer_inc integer_sub integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_yankdup)
Errors: [7.4676 10 0.1379 10 7.0544 9 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 12.6463 11 80.0 1 3.0122 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 67.1003 12 1.3631 10 1.5628 11 10.8556 11 20.5927 11]
Total: 677.0978000000001
Mean: 13.541956
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3287.4937460999995
Median total errors in population: 943.09485
Error averages by case: (117.76734030000085 9.025 106.7443713000005 11.167 90.11117199999954 9.62 135.45775429999907 10.224 128.47730790000182 10.5 127.3698340000003 8.99 96.56729929999894 9.136 138.5749103000007 9.909 141.6441079999997 5.031 107.95122429999947 11.008 158.2175352000003 4.813 100.17033899999934 9.881 98.49678640000006 4.166 106.03390530000144 9.04 144.73177780000137 8.959 128.26443490000196 10.618 119.87321290000067 8.259 151.70489289999873 11.615 116.19681500000038 8.597 130.27510079999828 9.991 145.61737070000072 11.663 102.91748340000045 10.526 120.68223969999997 9.296 99.97763479999975 11.11 140.35689559999867 10.168)
Error minima by case: (0.2127 2 0.1379 7 0.0 0 0.3429 1 1.9162 2 0.1477 1 0.0127 1 8.0E-4 1 7.8127 1 0.2294 2 0.2684 1 0.0081 2 0.0 0 0.0419 1 4.7513 1 0.9162 2 0.4033 2 6.4732 7 0.2623 2 1.0 1 11.5235 2 0.0093 2 0.4372 2 0.2753 1 4.1543 1)
Average genome size in population (length): 120.485
Average program size in population (points): 121.485
Average percent parens in population: 0.008
Minimum age in population: 226.5608783802847
Maximum age in population: 231.3964968328479
Average age in population: 229.1353344737758
Median age in population: 229.171637253014
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.562
Error (vector) diversity:			 0.563
Behavioral diversity:				 0.564
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 341673877
--- Timings ---
Current time: 1529615600202 milliseconds
Total Time:         715.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.8 seconds, 35.2%
Fitness Testing:    366.6 seconds, 51.2%
Report:              97.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 46807.526400000155
Test mean error for best: 23.40376
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.1528482796  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -5.268557755  
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 4.1620873128  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.323382085  
Correct output: 3.7173929377   | Program output: 5.0805071707  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.6956802637  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_div} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_mod float_swap float_swap float_swap float_yankdup integer_fromfloat float_cos float_swap float_swap float_mod print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_stackdepth integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_div float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 7.0544 9 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 12.6463 11 80.0 1 3.0122 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 67.1003 12 1.3631 10 1.5628 11 10.8556 11 20.5927 11]
Total: 677.0978000000001
Mean: 13.541956
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3501.232310999999
Median total errors in population: 980.8743500000002
Error averages by case: (125.7927849000011 9.194 117.18531680000048 11.233 97.16559789999958 9.65 152.01826539999874 10.236 137.97991330000139 10.501 135.44790220000024 9.062 107.0377556999987 9.173 142.49705030000067 9.897 142.3332039999997 4.968 114.71207729999921 10.999 162.32848900000042 4.787 105.35628569999929 9.825 108.64229460000008 4.556 117.9192278000015 9.105 157.76990770000154 9.014 138.22607880000146 10.632 124.54389370000064 8.449 166.55270059999862 11.608 125.05572120000056 8.714 137.65913569999867 9.951 150.47833460000052 11.549 111.65277290000058 10.545 128.53784120000006 9.347 102.41432839999987 10.998 157.7814312999992 10.151)
Error minima by case: (0.2874 2 0.1379 8 0.0 0 0.3429 1 0.9162 2 0.1477 1 0.0127 1 0.8228 2 1.5377 1 0.5563 2 0.7404 1 0.0081 5 0.0 0 0.0419 2 0.2487 1 0.0838 2 0.4827 2 1.1422 8 0.1226 2 1.0 1 5.8641 7 0.1154 6 0.4372 2 0.2848 7 0.8457 1)
Average genome size in population (length): 120.643
Average program size in population (points): 121.643
Average percent parens in population: 0.008
Minimum age in population: 228.2142719823679
Maximum age in population: 232.5278219529825
Average age in population: 230.4519976012828
Median age in population: 230.4841520431559
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.571
Error (vector) diversity:			 0.573
Behavioral diversity:				 0.573
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 344690177
--- Timings ---
Current time: 1529615605537 milliseconds
Total Time:         721.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.4 seconds, 35.1%
Fitness Testing:    369.6 seconds, 51.2%
Report:              98.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 48375.31030000017
Test mean error for best: 24.18766
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 2.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 136.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 100.6880789458
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -10.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 3.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 120.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 124.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 0.8854306003  
Correct output: 3.7173929377   | Program output: 5.1251148222  
Correct output: 109.3750668562 | Program output: 111.9378343197
Correct output: 16.5512971727  | Program output: 6.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction float_flush} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap float_swap float_swap float_swap integer_fromfloat float_dec in1 float_flush integer_yank float_swap integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_dup_times integer_inc integer_sub integer_yank tag_float_743 integer_sub integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_inc float_inc float_max float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [6.4676 10 0.1379 10 7.9456 8 13.6874 11 21.9581 10 7.1103 10 0.0691 9 26.9578 11 64.0 1 7.0752 11 80.0 1 2.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.4538 9 26.4907 11 0.7377 10 21.0419 9 65.8915 12 1.4077 11 2.5628 11 10.1007 10 20.5927 11]
Total: 669.6106
Mean: 13.392212
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3042.8506645999996
Median total errors in population: 935.9911
Error averages by case: (104.73978270000096 9.081 98.8807434000005 11.23 81.25654429999992 9.519 127.96736139999938 10.016 122.96012170000176 10.42 114.64897620000028 9.101 90.39008939999924 8.816 124.2535986000004 9.882 130.8572824999997 4.729 94.49995709999945 10.917 144.52476670000038 4.519 91.4281568999993 9.802 93.05989310000008 4.271 100.84111580000143 8.936 135.83960360000142 8.873 122.92833410000193 10.55 108.1183804000007 8.382 143.82118219999907 11.673 102.3296248000004 8.641 120.41974259999834 9.871 132.04696360000108 11.509 96.53735510000055 10.633 108.3755519 9.341 86.35732370000011 11.079 134.03821279999858 9.939)
Error minima by case: (0.2309 2 0.1379 9 0.0 0 0.3429 1 0.0838 2 0.1103 1 0.0127 1 8.0E-4 1 1.1873 1 0.5176 2 0.7316 1 0.0024 5 0.0 0 0.9581 2 4.7513 1 0.0838 2 0.0416 2 0.5896 8 0.1945 2 1.0 1 1.223 8 0.007 7 0.2964 1 0.1901 7 4.1543 1)
Average genome size in population (length): 121.268
Average program size in population (points): 122.268
Average percent parens in population: 0.008
Minimum age in population: 229.2789261183835
Maximum age in population: 233.7758189925927
Average age in population: 231.7643239360274
Median age in population: 231.8328111969902
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.585
Error (vector) diversity:			 0.588
Behavioral diversity:				 0.588
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 347722177
--- Timings ---
Current time: 1529615611093 milliseconds
Total Time:         726.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       254.9 seconds, 35.1%
Fitness Testing:    372.6 seconds, 51.3%
Report:              98.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 48492.442900000184
Test mean error for best: 24.24622
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -13.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 0.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 2.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 3.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 4.0752 11 80.0 1 0.3514 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 1.5923 11 1.5628 11 13.1007 11 20.5927 11]
Total: 667.0226
Mean: 13.340452
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3110.5138138999996
Median total errors in population: 942.7408500000001
Error averages by case: (112.23253540000103 9.035 93.88789560000045 11.131 80.99573809999971 9.491 131.593685299999 10.019 124.24118210000178 10.415 117.77433190000025 8.966 83.08640399999916 8.862 132.92930960000055 9.804 131.8416359999997 4.852 96.43965109999944 10.813 150.50394800000026 4.605 90.24611839999949 9.702 94.62689660000005 4.526 101.88446840000147 8.991 143.0325948000014 8.819 124.138317200002 10.584 110.45174490000066 8.289 149.90967569999864 11.56 110.42591580000037 8.633 123.7695695999983 9.885 136.93969400000051 11.399 94.8560453000003 10.546 118.19146560000013 9.279 88.22201539999966 10.871 137.30197509999863 9.914)
Error minima by case: (0.2874 2 0.1379 9 0.0 0 0.3429 1 0.0838 2 0.0714 1 0.0127 1 0.1512 2 1.1873 1 0.0752 1 0.7316 1 0.0077 5 0.0 0 0.0419 1 0.2487 1 0.9162 2 0.0045 2 0.3088 8 0.0193 2 0.0 0 1.223 7 0.007 7 0.4372 2 0.316 7 0.8457 1)
Average genome size in population (length): 122.102
Average program size in population (points): 123.102
Average percent parens in population: 0.008
Minimum age in population: 230.6138703850752
Maximum age in population: 235.1560446255204
Average age in population: 233.1429579113922
Median age in population: 233.1896751344477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.959
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.959
Total error diversity:				 0.609
Error (vector) diversity:			 0.612
Behavioral diversity:				 0.613
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 350775152
--- Timings ---
Current time: 1529615616346 milliseconds
Total Time:         732.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.4 seconds, 35.0%
Fitness Testing:    375.6 seconds, 51.3%
Report:              99.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 48492.442900000184
Test mean error for best: 24.24622
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -13.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 0.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 2.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 3.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 4.0752 11 80.0 1 0.3514 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 1.5923 11 1.5628 11 13.1007 11 20.5927 11]
Total: 667.0226
Mean: 13.340452
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3248.6813492999995
Median total errors in population: 940.9911500000001
Error averages by case: (115.812368600001 9.172 108.13633290000038 11.177 92.14835649999976 9.584 134.44561039999923 10.036 129.5077743000018 10.312 124.22180020000023 9.065 99.34289549999917 8.95 131.25498250000038 9.904 138.22508029999972 4.946 103.71404929999974 10.943 153.20555210000032 4.662 98.89708949999961 9.829 97.96697990000004 4.364 109.77529670000153 8.855 145.61674360000154 8.902 129.30407440000198 10.501 114.25892850000074 8.463 153.90486889999883 11.65 114.21715260000035 8.731 122.75575219999826 9.776 142.54442510000055 11.491 103.96925580000025 10.578 117.2261936 9.385 95.94011429999988 10.946 140.0306715999989 10.037)
Error minima by case: (0.1933 2 0.1379 3 0.0 0 0.6571 1 0.9162 2 0.0218 1 0.0127 1 0.1615 2 21.507 1 1.2085 2 2.2684 1 0.0081 5 0.0 0 0.0419 1 0.2487 1 0.0838 2 0.0045 2 0.07 2 0.0793 2 0.0 0 21.6932 6 0.007 6 0.2964 2 0.4906 7 0.8457 1)
Average genome size in population (length): 123.26
Average program size in population (points): 124.26
Average percent parens in population: 0.008
Minimum age in population: 232.0797000483065
Maximum age in population: 236.5932003819627
Average age in population: 234.4894203332703
Median age in population: 234.5203120557248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.609
Error (vector) diversity:			 0.612
Behavioral diversity:				 0.613
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 353857002
--- Timings ---
Current time: 1529615621527 milliseconds
Total Time:         737.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.9 seconds, 35.0%
Fitness Testing:    378.5 seconds, 51.4%
Report:             100.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 48275.58580000017
Test mean error for best: 24.13779
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -13.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 0.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 2.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 3.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_cos} {:instruction float_swap} {:instruction integer_flush} {:instruction float_mod} {:instruction print_float} {:instruction tagged_570} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_mult} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank})
Best program: (float_swap float_max float_swap float_mod float_swap integer_yankdup float_swap float_inc print_float float_cos float_swap integer_flush float_mod print_float tagged_570 integer_dec integer_fromfloat float_dec in1 integer_fromfloat integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times integer_pop float_frominteger integer_flush integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_mult integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_flush integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap integer_stackdepth integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_yank float_inc float_yankdup print_float integer_yank)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 4.0752 11 80.0 1 0.3514 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 1.5923 11 1.5628 11 13.1007 11 20.5927 11]
Total: 667.0226
Mean: 13.340452
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3234.3281300999993
Median total errors in population: 942.4186500000001
Error averages by case: (116.49474460000098 8.883 102.74878850000047 11.167 87.91231409999962 9.58 133.80620239999925 10.213 131.11112680000204 10.452 126.57721860000017 8.8 97.76143969999909 9.077 134.54661160000055 9.547 140.2824963999997 4.895 98.35034499999973 11.02 155.37129690000032 4.593 91.28224269999943 9.769 100.53555460000014 4.031 109.52552800000156 8.998 145.08805990000147 8.964 130.8977132000021 10.593 115.78282900000058 8.259 154.10058339999867 11.602 116.9583228000003 8.458 125.47457019999821 9.901 139.27243490000063 11.273 98.15908390000041 10.562 120.73144469999998 9.079 90.82363069999995 10.868 140.03954749999895 10.11)
Error minima by case: (0.0774 2 0.1379 7 0.0 0 0.3429 1 0.0838 2 0.0218 1 0.0127 1 0.1615 2 2.447 1 0.5647 2 1.7316 1 0.0024 5 0.0 0 0.0419 1 2.2487 1 0.9162 2 0.018 2 0.1422 8 0.0824 2 0.0 0 2.5887 8 0.0505 7 0.4372 2 0.5124 7 2.8457 1)
Average genome size in population (length): 125.021
Average program size in population (points): 126.021
Average percent parens in population: 0.008
Minimum age in population: 233.0797000483065
Maximum age in population: 237.8821245288202
Average age in population: 235.7923801344237
Median age in population: 235.8159416636831
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.621
Error (vector) diversity:			 0.623
Behavioral diversity:				 0.624
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 356982752
--- Timings ---
Current time: 1529615627607 milliseconds
Total Time:         742.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       259.5 seconds, 34.9%
Fitness Testing:    382.0 seconds, 51.4%
Report:             101.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 48492.442900000184
Test mean error for best: 24.24622
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -13.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 0.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 2.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 3.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float})
Best program: (float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 float_frominteger integer_flush integer_dup_items integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_inc integer_sub integer_sub integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap integer_dup_times float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 4.0752 11 80.0 1 0.3514 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 1.5923 11 1.5628 11 13.1007 11 20.5927 11]
Total: 667.0226
Mean: 13.340452
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2898.976953199999
Median total errors in population: 955.6958
Error averages by case: (102.091510600001 8.734 87.36307090000057 11.151 72.52834520000013 9.632 132.78095489999902 10.122 116.56104840000178 10.446 107.20689890000017 8.609 81.75310669999939 9.009 124.58448470000044 9.428 120.87950599999976 4.631 79.69373219999969 10.938 139.9015771000003 4.429 76.48140159999946 9.626 83.9738351000001 3.984 93.74899590000149 8.993 143.87505340000146 8.903 117.04426830000195 10.551 102.16623560000066 8.108 151.17556829999864 11.555 98.83138720000024 8.258 117.46696509999842 9.862 120.85906930000067 11.115 79.84693590000043 10.521 106.3097714999999 8.981 73.65604340000044 10.763 139.8221869999985 10.026)
Error minima by case: (0.2292 2 0.1379 8 0.0 0 0.3429 1 0.9162 2 0.1103 1 0.0127 1 0.1615 2 3.8127 1 0.0188 1 2.2684 1 0.0122 5 0.0 0 0.0419 1 3.2487 1 0.0838 2 0.0611 2 0.5896 8 0.1185 2 0.0 0 3.777 7 0.103 7 0.1554 2 0.4906 6 3.1543 1)
Average genome size in population (length): 125.799
Average program size in population (points): 126.799
Average percent parens in population: 0.008
Minimum age in population: 234.8053385625948
Maximum age in population: 238.9760704670738
Average age in population: 237.113323434571
Median age in population: 237.1558585127683
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.638
Error (vector) diversity:			 0.642
Behavioral diversity:				 0.642
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 360128127
--- Timings ---
Current time: 1529615633136 milliseconds
Total Time:         748.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.0 seconds, 34.9%
Fitness Testing:    385.0 seconds, 51.4%
Report:             102.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 48492.442900000184
Test mean error for best: 24.24622
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -13.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 0.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 2.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 3.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float})
Best program: (float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 float_frominteger integer_flush integer_dup_items integer_yank tag_float_743 integer_sub in1 integer_fromfloat integer_yank float_tan integer_sub integer_inc integer_sub integer_inc integer_inc integer_sub integer_sub integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap integer_dup_times float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 4.0752 11 80.0 1 0.3514 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 1.5923 11 1.5628 11 13.1007 11 20.5927 11]
Total: 667.0226
Mean: 13.340452
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3225.012273299999
Median total errors in population: 961.9489999999998
Error averages by case: (118.14972190000091 8.882 100.39037760000052 11.213 82.91606019999989 9.545 138.90484779999926 10.248 131.0153808000016 10.43 129.29660300000018 8.853 94.19703619999919 9.116 136.20374260000037 9.602 130.91160169999972 4.721 97.50207439999978 11.021 150.89602030000026 4.618 91.20105579999947 9.778 96.56383980000012 3.876 107.54458720000137 9.045 148.59400140000145 9.077 129.8106209000017 10.577 122.26826130000059 8.346 154.72407949999888 11.624 117.92881890000015 8.501 128.8134894999985 9.89 134.05481360000053 11.173 96.8147000000004 10.642 118.41685739999994 9.079 89.8100646999999 10.856 147.1826167999995 10.188)
Error minima by case: (0.1209 2 0.1379 7 0.0 0 0.3429 1 0.0838 2 0.0821 1 0.0127 1 0.1615 2 10.1873 1 0.4092 1 12.2684 1 0.004 5 0.0 0 0.0419 1 1.183 1 0.8958 2 0.0708 2 9.0245 8 0.122 2 0.0 0 9.9586 7 0.0723 5 0.4372 2 0.1151 7 1.8457 1)
Average genome size in population (length): 127.39
Average program size in population (points): 128.39
Average percent parens in population: 0.008
Minimum age in population: 235.8996247248345
Maximum age in population: 240.2939118691577
Average age in population: 238.4104063723933
Median age in population: 238.4642021717145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.661
Error (vector) diversity:			 0.669
Behavioral diversity:				 0.67
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 363313227
--- Timings ---
Current time: 1529615638757 milliseconds
Total Time:         754.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       262.7 seconds, 34.8%
Fitness Testing:    388.3 seconds, 51.5%
Report:             103.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 49429.96770000021
Test mean error for best: 24.71498
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -12.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 1.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 3.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 4.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap integer_fromfloat float_mult in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 5.0752 11 80.0 1 0.6486 8 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 0.5923 10 1.5628 11 12.1007 11 20.5927 11]
Total: 664.3198
Mean: 13.286396
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3214.860677699999
Median total errors in population: 984.13585
Error averages by case: (115.08085530000112 8.868 96.17178250000042 11.194 82.10671139999985 9.545 148.48532399999883 10.109 123.39022030000174 10.452 124.27193930000028 8.827 89.51627249999929 9.054 132.57202110000063 9.581 132.25043279999966 4.98 97.73984339999991 11.1 157.48998590000028 4.841 90.32952279999954 9.722 104.4659019000001 4.048 99.80961020000154 8.999 156.75803260000146 8.893 123.39141840000188 10.599 115.35106060000061 8.209 164.0258930999986 11.616 113.40901340000018 8.474 124.45562629999847 9.897 138.40347800000032 11.114 92.25457030000031 10.702 118.6462459 9.108 90.24494250000016 10.827 153.4389731999991 10.042)
Error minima by case: (0.2874 2 0.1379 8 0.0 0 0.3429 1 1.8916 2 0.1477 1 0.0077 1 0.1615 2 9.6412 1 0.6617 2 12.2684 1 0.0027 5 0.0 0 0.0419 1 1.2487 1 0.8958 2 0.0708 2 0.366 8 0.122 2 0.0 0 4.6054 8 0.095 5 0.1863 2 0.1007 6 1.8457 1)
Average genome size in population (length): 128.142
Average program size in population (points): 129.142
Average percent parens in population: 0.008
Minimum age in population: 236.8996247248345
Maximum age in population: 241.6388024263278
Average age in population: 239.6984328703376
Median age in population: 239.7115498825283
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.678
Error (vector) diversity:			 0.681
Behavioral diversity:				 0.682
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 366517077
--- Timings ---
Current time: 1529615644205 milliseconds
Total Time:         759.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.1 seconds, 34.8%
Fitness Testing:    391.5 seconds, 51.5%
Report:             104.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 49429.96770000021
Test mean error for best: 24.71498
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -12.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 1.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 3.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 4.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float})
Best program: (float_swap float_swap integer_fromfloat float_mult in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 5.0752 11 80.0 1 0.6486 8 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 0.5923 10 1.5628 11 12.1007 11 20.5927 11]
Total: 664.3198
Mean: 13.286396
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3130.8065310999996
Median total errors in population: 986.49675
Error averages by case: (107.501890700001 8.791 96.06854740000055 11.315 77.62463389999999 9.38 144.09422599999888 9.995 128.4005125000016 10.369 116.4913999000003 8.923 87.33150889999945 8.964 129.30652700000067 9.652 127.51804499999963 5.023 93.2437106000001 10.997 148.00553910000028 4.825 86.7149967999996 9.807 96.89019280000005 3.923 105.56602740000139 9.01 150.6686474000014 8.799 128.12648220000176 10.57 108.97733910000048 8.241 158.82722989999874 11.636 106.88090780000024 8.552 126.48386339999844 9.945 133.2939191000005 11.225 90.90770220000022 10.799 112.99566049999996 9.128 87.19695259999992 10.916 150.99606889999922 9.909)
Error minima by case: (0.0376 2 0.1379 9 0.0 0 0.3429 1 0.0838 2 0.0714 1 0.008 1 0.8228 2 9.1873 1 1.5581 1 3.7316 1 0.0081 5 0.0 0 0.9581 2 0.7513 1 0.0838 2 0.0611 2 0.3088 8 0.1185 2 1.0 1 18.9978 8 0.1809 8 0.1863 2 0.358 7 0.1543 1)
Average genome size in population (length): 129.684
Average program size in population (points): 130.684
Average percent parens in population: 0.008
Minimum age in population: 238.693693809915
Maximum age in population: 243.1956558499734
Average age in population: 241.0074760335352
Median age in population: 241.0363398924379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.697
Error (vector) diversity:			 0.7
Behavioral diversity:				 0.702
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 369759577
--- Timings ---
Current time: 1529615649957 milliseconds
Total Time:         765.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       265.8 seconds, 34.7%
Fitness Testing:    394.7 seconds, 51.6%
Report:             104.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 49429.96770000021
Test mean error for best: 24.71498
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -12.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 1.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 3.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 4.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float})
Best program: (float_swap float_swap integer_fromfloat float_mult in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 5.0752 11 80.0 1 0.6486 8 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 0.5923 10 1.5628 11 12.1007 11 20.5927 11]
Total: 664.3198
Mean: 13.286396
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3265.8143063
Median total errors in population: 1017.2733999999999
Error averages by case: (115.21364430000075 8.803 102.80435240000037 11.276 78.13883120000003 9.283 161.075704399999 9.914 127.91891880000169 10.419 123.06102370000029 8.772 95.39024529999932 8.901 128.7241481000005 9.433 130.1318901999997 4.943 100.91254920000027 11.018 151.3374916000003 4.754 93.9728207999996 9.832 99.97054510000004 4.099 103.07701560000125 9.071 163.56277800000132 8.727 128.00792700000187 10.605 112.13725120000034 8.132 175.46385169999868 11.647 113.00645290000026 8.434 128.14781619999832 9.988 138.51305960000028 11.259 94.2242795000002 10.803 118.44263460000003 8.967 87.62620410000004 10.834 165.22887079999933 9.81)
Error minima by case: (0.0093 2 0.1379 7 0.0 0 0.3429 1 0.9162 2 0.9782 1 0.0127 1 0.1615 2 1.113 1 0.4169 2 0.2684 1 0.0122 5 0.0 0 0.0419 2 2.2487 1 0.0838 2 0.018 2 0.5896 8 0.122 2 1.0 1 0.111 8 0.0366 7 0.4372 2 0.1007 7 2.8457 1)
Average genome size in population (length): 129.307
Average program size in population (points): 130.307
Average percent parens in population: 0.008
Minimum age in population: 239.7076792133225
Maximum age in population: 244.3655903820704
Average age in population: 242.3136487629662
Median age in population: 242.3181298822106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.728
Error (vector) diversity:			 0.734
Behavioral diversity:				 0.734
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 372992552
--- Timings ---
Current time: 1529615655437 milliseconds
Total Time:         770.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       267.3 seconds, 34.7%
Fitness Testing:    397.8 seconds, 51.6%
Report:             105.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 49429.96770000021
Test mean error for best: 24.71498
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -12.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 1.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 3.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 4.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap integer_fromfloat float_mult in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 5.0752 11 80.0 1 0.6486 8 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 0.5923 10 1.5628 11 12.1007 11 20.5927 11]
Total: 664.3198
Mean: 13.286396
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2892.7671580999977
Median total errors in population: 945.85745
Error averages by case: (99.62672050000083 8.631 83.90924510000042 11.172 68.1760857 9.222 131.9005435999992 10.139 111.42261640000166 10.28 107.46544040000022 8.629 71.47719920000002 9.018 119.81563450000047 9.51 122.23048179999977 4.795 90.53345270000037 11.037 140.71749420000026 4.454 88.67010409999976 9.811 92.65889710000012 3.706 87.91728250000135 8.865 139.44436730000143 8.939 111.29626500000182 10.444 99.22655630000052 7.989 145.39012679999882 11.538 97.2281970000003 8.274 112.39673409999854 9.869 130.04316900000032 11.263 87.59869620000016 10.887 104.50154039999993 8.932 82.52886680000005 10.876 138.21444139999852 10.097)
Error minima by case: (0.2396 2 0.1379 7 0.0 0 1.6571 1 0.9162 2 0.1537 1 0.0127 1 8.0E-4 2 25.1076 1 1.6854 1 4.2684 1 0.0122 5 0.0 0 0.9581 2 1.2487 1 0.0838 2 0.0708 2 4.6531 8 0.0414 2 1.0 1 6.5189 8 0.0839 7 0.4372 2 0.358 7 1.8457 1)
Average genome size in population (length): 128.828
Average program size in population (points): 129.828
Average percent parens in population: 0.008
Minimum age in population: 240.7076792133225
Maximum age in population: 245.816812513774
Average age in population: 243.633109326441
Median age in population: 243.743023097046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.712
Error (vector) diversity:			 0.713
Behavioral diversity:				 0.713
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 376213577
--- Timings ---
Current time: 1529615660999 milliseconds
Total Time:         776.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       268.9 seconds, 34.6%
Fitness Testing:    401.0 seconds, 51.6%
Report:             106.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 49429.96770000021
Test mean error for best: 24.71498
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -12.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 1.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 3.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 4.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_inc} {:instruction integer_inc} {:instruction tagged_570} {:instruction integer_dec} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_dec} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_yankdup float_swap float_inc integer_inc tagged_570 integer_dec float_mult in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush float_dec tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 5.0752 11 80.0 1 0.6486 8 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 0.5923 10 1.5628 11 12.1007 11 20.5927 11]
Total: 664.3198
Mean: 13.286396
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3151.5570222999986
Median total errors in population: 974.7275
Error averages by case: (104.42999990000088 8.927 97.68847800000049 11.246 75.15333790000008 9.144 155.16138299999903 9.933 127.75429090000169 10.404 116.01083190000027 8.977 91.9075458999994 8.843 121.8148767000005 9.801 129.52956189999963 4.886 96.6862534000006 11.163 144.73943660000023 4.664 92.3875226999997 9.802 90.04595100000007 3.515 103.70219200000142 8.982 159.79441270000137 8.728 128.7380327000018 10.556 106.27778440000056 8.252 171.48549619999855 11.608 104.25958240000031 8.548 128.1834075999984 9.918 132.60127060000008 11.239 89.33714720000006 10.871 106.65418759999994 9.272 86.33685250000005 10.891 160.88918659999948 9.818)
Error minima by case: (0.7126 2 0.1379 6 0.0 0 0.3429 1 0.9162 2 0.1537 1 0.0127 1 0.1615 2 1.1873 1 0.2612 1 4.2684 1 0.0081 5 0.0 0 0.0419 1 4.7513 1 0.0838 2 0.0072 2 0.1258 8 0.0414 2 0.0 0 0.7777 7 0.0464 7 0.1863 2 0.0922 7 4.1543 1)
Average genome size in population (length): 128.587
Average program size in population (points): 129.587
Average percent parens in population: 0.008
Minimum age in population: 242.0524014704469
Maximum age in population: 247.1033870410473
Average age in population: 244.8350267305017
Median age in population: 244.8570328414968
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.671
Error (vector) diversity:			 0.676
Behavioral diversity:				 0.677
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 379428527
--- Timings ---
Current time: 1529615666529 milliseconds
Total Time:         782.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       270.5 seconds, 34.6%
Fitness Testing:    404.2 seconds, 51.7%
Report:             107.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 49429.96770000021
Test mean error for best: 24.71498
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -12.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 1.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 3.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 4.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_mult} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap integer_mult float_mult in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_mod integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 5.0752 11 80.0 1 0.6486 8 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 0.5923 10 1.5628 11 12.1007 11 20.5927 11]
Total: 664.3198
Mean: 13.286396
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3250.6488546999994
Median total errors in population: 945.3712499999999
Error averages by case: (111.60881190000083 8.805 102.20710770000021 11.196 77.24397669999993 9.155 166.32977079999887 10.357 132.25477010000162 10.454 116.32289240000019 8.742 90.60411059999973 9.165 131.8414869000002 9.693 124.93309069999977 4.633 98.48933440000044 11.092 144.3962869000002 4.57 93.35033659999976 9.771 90.47383540000003 3.593 106.5614715000012 9.057 170.90881050000138 9.086 134.1962974000016 10.617 110.76149160000047 8.051 180.0677459999987 11.519 107.95385910000022 8.348 128.4583365999986 9.919 136.64295999999993 11.271 92.29016510000004 10.916 114.33154660000004 9.087 86.97980940000012 10.915 171.21854979999964 10.21)
Error minima by case: (0.2187 2 0.1379 8 0.0 0 0.6571 1 0.9162 2 0.1537 1 0.0127 1 8.0E-4 2 3.1873 1 0.5218 2 1.6326 1 0.0122 5 0.0 0 1.0419 1 3.2487 1 0.0838 2 0.0072 2 1.1207 8 0.0414 2 0.0 0 3.6864 8 0.16 7 0.4372 2 0.5094 6 3.8457 1)
Average genome size in population (length): 128.673
Average program size in population (points): 129.673
Average percent parens in population: 0.008
Minimum age in population: 243.0524014704469
Maximum age in population: 248.1474801454085
Average age in population: 246.0562173047638
Median age in population: 246.0572269733672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.662
Error (vector) diversity:			 0.665
Behavioral diversity:				 0.666
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 382645652
--- Timings ---
Current time: 1529615672466 milliseconds
Total Time:         787.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       272.0 seconds, 34.5%
Fitness Testing:    407.7 seconds, 51.7%
Report:             108.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 49429.96770000021
Test mean error for best: 24.71498
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -12.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 1.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 3.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 4.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dup_items} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat float_swap float_swap integer_fromfloat float_mult in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 float_dup_items integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 5.0752 11 80.0 1 0.6486 8 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 0.5923 10 1.5628 11 12.1007 11 20.5927 11]
Total: 664.3198
Mean: 13.286396
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2827.832086999999
Median total errors in population: 940.1475
Error averages by case: (95.61313360000084 8.895 78.61782500000042 11.086 58.87917999999982 8.928 148.77642699999916 10.03 112.35120170000154 10.385 103.85084190000022 8.852 76.8982634999999 8.827 114.82020520000043 9.819 114.4038776999997 4.602 77.67371400000033 11.033 130.57826800000024 4.326 75.17012259999989 9.664 76.01847010000003 3.469 88.92885890000116 8.996 149.73174680000128 8.793 112.4888206000016 10.542 96.13773990000057 8.1 164.0464044999988 11.497 94.89489610000032 8.443 117.23339929999865 9.829 116.45798689999978 11.207 72.33400719999972 10.817 97.2893706999999 9.21 71.3431156000004 10.871 155.13921019999927 9.934)
Error minima by case: (0.2874 2 0.1379 9 0.0 0 0.3429 1 2.0838 2 0.4344 1 0.0127 1 0.1615 2 4.5691 1 1.5185 2 5.1662 1 0.0122 5 0.0 0 0.0419 1 3.2487 2 2.9162 2 0.0378 2 1.1422 8 0.0414 2 0.0 0 0.0027 7 0.2452 6 0.1863 2 0.0687 7 2.8081 1)
Average genome size in population (length): 128.589
Average program size in population (points): 129.589
Average percent parens in population: 0.008
Minimum age in population: 245.4583879213156
Maximum age in population: 249.5711609276997
Average age in population: 247.4316247866606
Median age in population: 247.4741104371287
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.651
Error (vector) diversity:			 0.654
Behavioral diversity:				 0.655
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 385860727
--- Timings ---
Current time: 1529615678109 milliseconds
Total Time:         793.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       273.6 seconds, 34.5%
Fitness Testing:    410.9 seconds, 51.8%
Report:             109.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 49413.343000000204
Test mean error for best: 24.70667
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -12.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 1.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 3.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 4.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dup_items} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float})
Best program: (float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 float_dup_items integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 5.0752 11 80.0 1 0.6486 8 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 21.0419 9 66.8915 11 0.5923 10 1.5628 11 12.1007 11 20.5927 11]
Total: 664.3198
Mean: 13.286396
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3008.121436299998
Median total errors in population: 941.8031000000001
Error averages by case: (102.8736427000008 9.074 88.8918672000004 11.175 69.38279159999979 9.06 145.2420962999991 9.981 126.16705250000162 10.506 110.32962890000016 9.066 80.17388179999982 8.787 122.8297948000006 10.032 122.38002929999969 4.562 85.00154310000056 11.129 140.32721090000027 4.325 85.72647439999994 9.664 93.26549700000008 3.634 101.8272897000014 9.067 155.09109600000136 8.77 124.62878880000181 10.66 102.25723500000059 8.315 162.22096769999877 11.535 100.23960300000027 8.609 121.23826019999848 9.919 122.91183079999988 11.245 82.39317989999977 10.81 104.34698840000004 9.42 77.4200293000003 10.866 150.90465699999885 9.839)
Error minima by case: (0.3925 2 0.1379 8 0.0 0 0.6571 1 1.0838 2 0.1103 1 0.0127 1 0.1615 2 3.1873 1 0.5581 2 0.2684 1 0.0122 6 0.0 0 0.9581 1 0.3602 1 2.0838 2 0.1628 2 0.07 7 0.0273 2 0.0 0 5.5167 8 0.0715 6 0.2412 2 0.146 7 2.8457 1)
Average genome size in population (length): 128.152
Average program size in population (points): 129.152
Average percent parens in population: 0.008
Minimum age in population: 246.5471217105532
Maximum age in population: 250.8136095396266
Average age in population: 248.6539174484958
Median age in population: 248.6456641080544
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.661
Error (vector) diversity:			 0.664
Behavioral diversity:				 0.664
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 389064727
--- Timings ---
Current time: 1529615683759 milliseconds
Total Time:         799.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       275.1 seconds, 34.4%
Fitness Testing:    414.3 seconds, 51.8%
Report:             109.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 46925.35600000014
Test mean error for best: 23.46268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.9575363916
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: -0.49264794   
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.5173763756
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 106.7117485101
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -13.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 0.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.981213676 
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 9.092556704   
Correct output: 3.7173929377   | Program output: 2.1251148222  
Correct output: 109.3750668562 | Program output: 118.4254836707
Correct output: 16.5512971727  | Program output: 3.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_swap} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap integer_fromfloat float_dec in1 integer_fromfloat integer_yank float_mod integer_stackdepth float_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_swap tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub integer_stackdepth integer_stackdepth integer_sub float_dup integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float float_inc integer_stackdepth integer_mult)
Errors: [11.7199 10 0.1379 10 5.4089 10 13.6874 11 21.9581 10 7.6773 11 0.0691 9 20.9341 12 64.0 1 4.0752 11 80.0 1 0.3514 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.0763 9 26.4907 11 0.2623 9 21.0419 9 57.6844 10 1.5923 11 9.0504 11 13.1007 11 20.5927 11]
Total: 664.1845000000001
Mean: 13.28369
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3125.771864999999
Median total errors in population: 992.96915
Error averages by case: (101.48885940000083 8.935 95.15385920000043 11.212 72.16152860000003 9.197 165.0451397999986 10.114 126.59743000000167 10.434 112.2362538000002 9.019 80.58755949999961 8.857 123.01331630000048 10.014 125.15057309999966 4.543 89.70857750000086 11.177 142.59286160000033 4.4 89.3919366000001 9.615 82.14791490000009 3.479 101.10677240000139 8.998 173.0874800000013 8.924 127.72934120000176 10.617 104.04317910000067 8.232 180.88643639999847 11.571 100.71262970000036 8.541 129.32651609999849 9.904 126.80552399999966 11.292 86.23508049999997 10.768 107.2346016 9.412 81.5917497999999 10.908 171.67874389999957 9.895)
Error minima by case: (0.8216 2 0.1379 9 0.0 0 0.3429 1 1.9162 2 0.2286 1 0.0127 1 0.1512 2 5.3666 1 2.0752 2 6.3209 1 0.0122 6 0.0 0 0.0419 1 0.2487 2 0.9162 2 0.4827 2 7.8626 9 0.0384 2 0.0 0 4.9516 7 0.2262 6 0.3004 2 0.146 7 0.8457 1)
Average genome size in population (length): 127.773
Average program size in population (points): 128.773
Average percent parens in population: 0.008
Minimum age in population: 247.908855942135
Maximum age in population: 252.1198024415264
Average age in population: 249.9007732437401
Median age in population: 249.9002729221109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.673
Error (vector) diversity:			 0.675
Behavioral diversity:				 0.675
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 392259527
--- Timings ---
Current time: 1529615689250 milliseconds
Total Time:         804.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       276.6 seconds, 34.4%
Fitness Testing:    417.5 seconds, 51.9%
Report:             110.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 46925.35600000014
Test mean error for best: 23.46268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 105.9575363916
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: -0.49264794   
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.5173763756
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 106.7117485101
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -13.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 0.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.981213676 
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: 9.092556704   
Correct output: 3.7173929377   | Program output: 2.1251148222  
Correct output: 109.3750668562 | Program output: 118.4254836707
Correct output: 16.5512971727  | Program output: 3.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_swap} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_dec in1 integer_fromfloat integer_yank float_mod integer_stackdepth float_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_swap tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub integer_stackdepth integer_stackdepth integer_sub float_dup integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float float_inc integer_stackdepth integer_mult)
Errors: [11.7199 10 0.1379 10 5.4089 10 13.6874 11 21.9581 10 7.6773 11 0.0691 9 20.9341 12 64.0 1 4.0752 11 80.0 1 0.3514 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.0763 9 26.4907 11 0.2623 9 21.0419 9 57.6844 10 1.5923 11 9.0504 11 13.1007 11 20.5927 11]
Total: 664.1845000000001
Mean: 13.28369
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3044.0207473999994
Median total errors in population: 954.14345
Error averages by case: (103.57152800000068 8.863 90.13790590000039 11.19 66.63368499999989 9.036 157.32239729999864 10.074 121.06626900000154 10.417 116.08775050000017 8.95 81.77540659999927 8.858 127.0728839000005 9.881 122.16394669999974 4.577 83.47563770000076 11.142 143.77328470000032 4.334 79.65750130000008 9.591 86.89550700000007 3.589 95.9547472000012 8.937 166.02925040000133 8.975 121.50657610000172 10.565 108.04582410000063 8.217 173.09942969999872 11.57 103.78806080000037 8.503 125.47788979999851 9.977 121.97243929999976 11.226 73.29857959999973 10.673 108.64583320000001 9.275 72.6588066000002 10.925 164.6056070000001 9.959)
Error minima by case: (0.15 2 0.1379 8 0.0 0 0.3429 1 0.0838 2 0.3404 1 0.0127 1 0.1072 2 9.1873 1 0.5732 2 0.2684 1 0.0876 5 0.0 0 0.9581 1 1.7513 1 1.0838 2 0.4827 2 4.366 8 0.0571 2 0.0 0 1.2813 8 0.2452 7 0.3004 2 0.7247 6 1.1543 1)
Average genome size in population (length): 126.986
Average program size in population (points): 127.986
Average percent parens in population: 0.008
Minimum age in population: 249.3421018335988
Maximum age in population: 253.2364163670464
Average age in population: 251.2140704754069
Median age in population: 251.2618492097385
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.673
Error (vector) diversity:			 0.673
Behavioral diversity:				 0.673
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 395434502
--- Timings ---
Current time: 1529615694938 milliseconds
Total Time:         810.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       278.1 seconds, 34.3%
Fitness Testing:    420.7 seconds, 51.9%
Report:             111.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 49247.991400000225
Test mean error for best: 24.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 108.6766022955
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 0.7619371316  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 134.251284049 
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 94.0720923293 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 118.1761404066
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 122.6488033424
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: 0.5765155001  
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 99.4295479972 
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap integer_fromfloat float_mult integer_dup_times integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_dec float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [9.0009 7 0.1379 10 6.6635 11 13.6874 11 21.9581 10 8.9433 10 0.0691 9 33.5738 12 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 5.2712 11 26.4907 11 1.3319 9 0.274 8 66.2005 10 0.4077 11 9.9455 11 11.1007 11 20.5927 11]
Total: 662.6462
Mean: 13.252924
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2718.1713352999996
Median total errors in population: 938.6588
Error averages by case: (82.6281970000009 8.985 81.10146140000046 11.075 60.46959419999981 9.223 141.16913979999924 10.191 114.24182840000164 10.439 91.87624680000023 8.935 78.93719129999965 9.031 100.62639700000022 9.994 107.56586669999976 4.32 78.41182350000064 11.146 125.40829610000027 4.358 76.06268970000008 9.436 69.40187920000005 3.343 89.05815580000133 8.931 147.69343830000165 9.036 114.3195356000017 10.585 83.22686620000076 8.144 155.44700279999887 11.448 80.00639690000037 8.45 122.76621019999855 9.902 115.07318079999969 11.218 70.3418398999997 10.583 84.07486009999997 9.396 71.53050540000012 10.844 147.69773219999925 10.022)
Error minima by case: (0.0441 2 0.1379 9 0.0 0 0.3429 1 0.0838 2 0.0218 1 0.0127 1 0.085 2 3.1873 1 0.34 2 0.7316 1 0.2658 6 0.0 0 0.0419 1 1.7513 1 0.0838 2 0.3608 2 0.5896 8 0.0571 2 0.274 1 0.0328 8 0.0066 6 0.4372 2 0.1007 7 1.1543 1)
Average genome size in population (length): 126.815
Average program size in population (points): 127.815
Average percent parens in population: 0.008
Minimum age in population: 250.4865149241597
Maximum age in population: 254.5308713921156
Average age in population: 252.518997734506
Median age in population: 252.5662033578163
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.64
Error (vector) diversity:			 0.64
Behavioral diversity:				 0.64
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 398605177
--- Timings ---
Current time: 1529615700493 milliseconds
Total Time:         816.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       279.6 seconds, 34.3%
Fitness Testing:    424.0 seconds, 52.0%
Report:             112.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 49984.939200000255
Test mean error for best: 24.99247
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.209847505 
Correct output: -30.5973968421 | Program output: -29.7352775358
Correct output: -5.9015288603  | Program output: 2.0440806039  
Correct output: 24.3848067256  | Program output: 11.6973720264 
Correct output: -119.8990795364 | Program output: -96.9409786734
Correct output: 143.1946278344 | Program output: 136.0843777936
Correct output: 10.8625446508  | Program output: 11.7934609064 
Correct output: 127.6458652779 | Program output: 100.6880789458
Correct output: 71.8127365426  | Program output: 8.8127365426  
Correct output: -17.9148224328 | Program output: -10.8396566161
Correct output: 93.2683698204  | Program output: 14.2683698204 
Correct output: 1.1498437373   | Program output: 3.7984066847  
Correct output: 85.1198734399  | Program output: 87.1198734399 
Correct output: -62.5035732311 | Program output: -52.5454723681
Correct output: 31.7931803333  | Program output: 11.4358383388 
Correct output: -122.2934290035 | Program output: -100.3353281405
Correct output: 112.9049586254 | Program output: 120.3587596184
Correct output: -15.8996538358 | Program output: 11.591076193  
Correct output: 123.9806904826 | Program output: 124.7183436366
Correct output: -78.3331420378 | Program output: -77.6071240294
Correct output: 66.7769669244  | Program output: 0.8854306003  
Correct output: 3.7173929377   | Program output: 5.1251148222  
Correct output: 109.3750668562 | Program output: 111.9378343197
Correct output: 16.5512971727  | Program output: 6.4505483995  
Correct output: 31.1961711525  | Program output: 11.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dup_items} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 float_dup_items integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [6.4676 10 0.8621 12 7.9456 8 12.6874 11 22.9581 10 7.1103 10 0.9309 10 26.9578 11 63.0 2 7.0752 11 79.0 2 2.6486 9 2.0 1 9.9581 7 20.3573 8 21.9581 10 7.4538 9 27.4907 11 0.7377 10 0.726 9 65.8915 12 1.4077 11 2.5628 11 10.1007 10 19.5927 10]
Total: 652.8807
Mean: 13.057614
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2976.6644428000013
Median total errors in population: 946.4493
Error averages by case: (88.77831970000095 8.784 82.21895190000049 11.096 66.90865939999979 9.078 167.0453751999992 10.322 122.54932480000166 10.551 102.65617770000016 8.822 81.80273499999973 9.034 113.29142030000025 9.897 116.98329929999964 4.308 81.72197140000054 11.206 135.8100377000003 4.165 82.53012730000012 9.531 75.31342480000004 3.291 96.62994000000138 9.05 173.56292740000146 9.177 122.55510800000178 10.691 94.0582140000007 8.062 181.88241309999887 11.474 87.3249099000004 8.361 126.28824679999852 10.001 121.68294659999981 11.25 79.8999457999997 10.601 96.4077445 9.269 78.63995500000011 10.876 171.0442671999999 10.181)
Error minima by case: (0.2396 2 0.1379 8 0.0 0 0.3429 1 0.0838 2 0.3977 1 0.0127 1 0.1615 1 21.6978 1 0.0241 2 0.2422 1 0.1978 7 0.0 0 0.9581 1 2.7513 2 1.0838 2 0.018 2 7.4676 8 0.2351 2 0.0 0 4.7179 8 0.0066 7 0.2963 2 0.146 7 2.1543 1)
Average genome size in population (length): 126.361
Average program size in population (points): 127.361
Average percent parens in population: 0.008
Minimum age in population: 251.5917173732126
Maximum age in population: 255.8872361277307
Average age in population: 253.8413245035526
Median age in population: 253.854930121508
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.639
Error (vector) diversity:			 0.64
Behavioral diversity:				 0.641
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 401764427
--- Timings ---
Current time: 1529615706470 milliseconds
Total Time:         821.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       281.3 seconds, 34.2%
Fitness Testing:    427.4 seconds, 52.0%
Report:             113.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 49984.939200000255
Test mean error for best: 24.99247
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.209847505 
Correct output: -30.5973968421 | Program output: -29.7352775358
Correct output: -5.9015288603  | Program output: 2.0440806039  
Correct output: 24.3848067256  | Program output: 11.6973720264 
Correct output: -119.8990795364 | Program output: -96.9409786734
Correct output: 143.1946278344 | Program output: 136.0843777936
Correct output: 10.8625446508  | Program output: 11.7934609064 
Correct output: 127.6458652779 | Program output: 100.6880789458
Correct output: 71.8127365426  | Program output: 8.8127365426  
Correct output: -17.9148224328 | Program output: -10.8396566161
Correct output: 93.2683698204  | Program output: 14.2683698204 
Correct output: 1.1498437373   | Program output: 3.7984066847  
Correct output: 85.1198734399  | Program output: 87.1198734399 
Correct output: -62.5035732311 | Program output: -52.5454723681
Correct output: 31.7931803333  | Program output: 11.4358383388 
Correct output: -122.2934290035 | Program output: -100.3353281405
Correct output: 112.9049586254 | Program output: 120.3587596184
Correct output: -15.8996538358 | Program output: 11.591076193  
Correct output: 123.9806904826 | Program output: 124.7183436366
Correct output: -78.3331420378 | Program output: -77.6071240294
Correct output: 66.7769669244  | Program output: 0.8854306003  
Correct output: 3.7173929377   | Program output: 5.1251148222  
Correct output: 109.3750668562 | Program output: 111.9378343197
Correct output: 16.5512971727  | Program output: 6.4505483995  
Correct output: 31.1961711525  | Program output: 11.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dup_items} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 float_dup_items integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [6.4676 10 0.8621 12 7.9456 8 12.6874 11 22.9581 10 7.1103 10 0.9309 10 26.9578 11 63.0 2 7.0752 11 79.0 2 2.6486 9 2.0 1 9.9581 7 20.3573 8 21.9581 10 7.4538 9 27.4907 11 0.7377 10 0.726 9 65.8915 12 1.4077 11 2.5628 11 10.1007 10 19.5927 10]
Total: 652.8807
Mean: 13.057614
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2512.41796
Median total errors in population: 939.0445500000001
Error averages by case: (81.30169090000084 8.826 67.88799270000062 11.073 50.97758459999978 9.139 127.91818409999922 10.046 99.70764500000155 10.33 91.46192090000017 8.767 57.73003840000033 8.824 99.78849950000044 9.71 104.87571809999969 4.263 69.98934630000007 11.112 124.76918720000032 4.189 67.02709230000012 9.453 61.28719730000006 3.239 74.77564680000127 8.81 137.8829784000013 8.912 99.15907640000168 10.474 81.01320140000072 8.064 145.33286159999886 11.435 79.97594990000037 8.349 106.33635779999855 9.832 111.91176159999986 11.23 61.64601309999944 10.611 86.20706189999993 9.141 62.160819000000586 10.828 134.74913479999867 9.888)
Error minima by case: (0.2396 2 0.1379 8 0.0 0 0.3429 1 0.0838 2 0.1477 1 0.0099 1 8.0E-4 2 14.0 1 0.1482 2 0.1242 1 0.0122 6 0.0 0 0.0419 1 2.7513 1 0.9162 2 0.1217 2 1.07 8 0.1226 2 0.0 0 5.5189 8 0.031 7 0.2963 2 0.146 7 0.9162 1)
Average genome size in population (length): 126.098
Average program size in population (points): 127.098
Average percent parens in population: 0.008
Minimum age in population: 252.5917173732126
Maximum age in population: 257.1374972296503
Average age in population: 255.0995485297836
Median age in population: 255.1207850842663
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.648
Error (vector) diversity:			 0.649
Behavioral diversity:				 0.65
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 404917202
--- Timings ---
Current time: 1529615712018 milliseconds
Total Time:         827.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       282.7 seconds, 34.2%
Fitness Testing:    430.6 seconds, 52.0%
Report:             114.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 49984.939200000255
Test mean error for best: 24.99247
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.209847505 
Correct output: -30.5973968421 | Program output: -29.7352775358
Correct output: -5.9015288603  | Program output: 2.0440806039  
Correct output: 24.3848067256  | Program output: 11.6973720264 
Correct output: -119.8990795364 | Program output: -96.9409786734
Correct output: 143.1946278344 | Program output: 136.0843777936
Correct output: 10.8625446508  | Program output: 11.7934609064 
Correct output: 127.6458652779 | Program output: 100.6880789458
Correct output: 71.8127365426  | Program output: 8.8127365426  
Correct output: -17.9148224328 | Program output: -10.8396566161
Correct output: 93.2683698204  | Program output: 14.2683698204 
Correct output: 1.1498437373   | Program output: 3.7984066847  
Correct output: 85.1198734399  | Program output: 87.1198734399 
Correct output: -62.5035732311 | Program output: -52.5454723681
Correct output: 31.7931803333  | Program output: 11.4358383388 
Correct output: -122.2934290035 | Program output: -100.3353281405
Correct output: 112.9049586254 | Program output: 120.3587596184
Correct output: -15.8996538358 | Program output: 11.591076193  
Correct output: 123.9806904826 | Program output: 124.7183436366
Correct output: -78.3331420378 | Program output: -77.6071240294
Correct output: 66.7769669244  | Program output: 0.8854306003  
Correct output: 3.7173929377   | Program output: 5.1251148222  
Correct output: 109.3750668562 | Program output: 111.9378343197
Correct output: 16.5512971727  | Program output: 6.4505483995  
Correct output: 31.1961711525  | Program output: 11.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dup_items} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 float_dup_items integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [6.4676 10 0.8621 12 7.9456 8 12.6874 11 22.9581 10 7.1103 10 0.9309 10 26.9578 11 63.0 2 7.0752 11 79.0 2 2.6486 9 2.0 1 9.9581 7 20.3573 8 21.9581 10 7.4538 9 27.4907 11 0.7377 10 0.726 9 65.8915 12 1.4077 11 2.5628 11 10.1007 10 19.5927 10]
Total: 652.8807
Mean: 13.057614
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2741.5644499999976
Median total errors in population: 908.0302999999999
Error averages by case: (92.49057700000064 8.898 76.40731280000048 11.082 60.91682749999986 9.278 139.9002432999991 10.293 97.83844990000146 10.362 102.07864960000019 8.967 75.21970949999995 9.049 109.53532080000032 9.969 117.21058579999979 4.104 79.97640730000043 11.19 135.3048233000003 3.962 77.3999875000002 9.449 78.41346280000008 3.362 74.11826300000105 8.765 146.66454860000138 9.072 98.10542590000149 10.476 91.67977980000059 8.265 153.16611709999884 11.486 91.77067840000029 8.475 108.78491329999865 9.836 119.83742569999981 11.241 71.36458059999971 10.627 95.69527789999991 9.357 73.20907310000021 10.876 145.87300949999903 10.162)
Error minima by case: (0.0441 2 0.1379 9 0.0 0 0.6571 1 0.0838 2 0.1477 1 0.0099 1 0.085 2 1.5691 1 0.3928 2 1.2684 1 0.2105 6 0.0 0 0.0419 2 3.2487 1 0.9162 2 0.1086 2 1.8742 8 0.0157 2 0.274 1 10.7041 6 0.0021 7 0.4372 2 0.146 7 3.8457 1)
Average genome size in population (length): 126.477
Average program size in population (points): 127.477
Average percent parens in population: 0.008
Minimum age in population: 254.4166298945702
Maximum age in population: 258.4253678712384
Average age in population: 256.4996637498885
Median age in population: 256.5305796267803
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.635
Error (vector) diversity:			 0.638
Behavioral diversity:				 0.64
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 408079427
--- Timings ---
Current time: 1529615717738 milliseconds
Total Time:         833.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       284.3 seconds, 34.1%
Fitness Testing:    434.0 seconds, 52.1%
Report:             114.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 50073.006300000256
Test mean error for best: 25.03650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 111.209847505 
Correct output: -30.5973968421 | Program output: -29.7352775358
Correct output: -5.9015288603  | Program output: 2.0440806039  
Correct output: 24.3848067256  | Program output: 11.6973720264 
Correct output: -119.8990795364 | Program output: -96.9409786734
Correct output: 143.1946278344 | Program output: 136.0843777936
Correct output: 10.8625446508  | Program output: 11.7934609064 
Correct output: 127.6458652779 | Program output: 100.6880789458
Correct output: 71.8127365426  | Program output: 8.8127365426  
Correct output: -17.9148224328 | Program output: -10.8396566161
Correct output: 93.2683698204  | Program output: 14.2683698204 
Correct output: 1.1498437373   | Program output: 3.7984066847  
Correct output: 85.1198734399  | Program output: 87.1198734399 
Correct output: -62.5035732311 | Program output: -52.5454723681
Correct output: 31.7931803333  | Program output: 11.4358383388 
Correct output: -122.2934290035 | Program output: -100.3353281405
Correct output: 112.9049586254 | Program output: 120.3587596184
Correct output: -15.8996538358 | Program output: 11.591076193  
Correct output: 123.9806904826 | Program output: 124.7183436366
Correct output: -78.3331420378 | Program output: -77.6071240294
Correct output: 66.7769669244  | Program output: 0.8854306003  
Correct output: 3.7173929377   | Program output: 5.1251148222  
Correct output: 109.3750668562 | Program output: 111.9378343197
Correct output: 16.5512971727  | Program output: 6.4505483995  
Correct output: 31.1961711525  | Program output: 11.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction -77} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dup_items} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 -77 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 float_dup_items integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_dup_times integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [6.4676 10 0.8621 12 7.9456 8 12.6874 11 22.9581 10 7.1103 10 0.9309 10 26.9578 11 63.0 2 7.0752 11 79.0 2 2.6486 9 2.0 1 9.9581 7 20.3573 8 21.9581 10 7.4538 9 27.4907 11 0.7377 10 0.726 9 65.8915 12 1.4077 11 2.5628 11 10.1007 10 19.5927 10]
Total: 652.8807
Mean: 13.057614
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3125.9545641999985
Median total errors in population: 953.2884000000001
Error averages by case: (109.66267190000062 8.936 86.50668160000046 11.127 72.52636489999999 9.317 152.21432869999907 10.029 118.79872050000156 10.435 119.74575150000011 9.057 92.71172409999957 8.911 128.7642592000003 9.997 128.49823079999967 4.644 95.45919760000069 11.21 147.79258660000025 4.311 90.60753830000016 9.529 91.33236820000008 3.501 93.91656480000142 8.924 158.1378274000015 8.879 118.81798800000159 10.567 111.17969330000062 8.495 165.5485446999989 11.492 108.16821900000022 8.628 125.59481009999867 9.879 133.85690119999998 11.243 85.14299289999973 10.69 115.79603289999991 9.424 84.52862460000013 10.891 160.63694139999933 9.893)
Error minima by case: (0.2396 2 0.1379 8 0.0 0 0.6571 1 0.9162 2 0.1477 1 0.0127 1 0.1615 2 2.1873 1 0.1482 2 4.7316 1 0.0122 6 0.0 0 0.0419 2 2.4939 1 0.0838 2 0.4827 2 0.1422 8 0.069 2 0.274 1 1.8189 8 0.2327 6 0.0875 2 0.1007 7 2.1543 1)
Average genome size in population (length): 127.45
Average program size in population (points): 128.45
Average percent parens in population: 0.008
Minimum age in population: 255.4594589305386
Maximum age in population: 259.6436135707637
Average age in population: 257.7443626688227
Median age in population: 257.7697205094476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.639
Error (vector) diversity:			 0.64
Behavioral diversity:				 0.641
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 411266152
--- Timings ---
Current time: 1529615723077 milliseconds
Total Time:         838.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       285.7 seconds, 34.1%
Fitness Testing:    437.2 seconds, 52.1%
Report:             115.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 48121.63220000015
Test mean error for best: 24.06082
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 109.4272396425
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 0.9078663922  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.5173763756
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 127.8073669381
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -13.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 0.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.981213676 
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.175212232 
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.7348498647 
Correct output: 3.7173929377   | Program output: 2.1251148222  
Correct output: 109.3750668562 | Program output: 118.4254836707
Correct output: 16.5512971727  | Program output: 3.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_swap} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_dec in1 integer_fromfloat integer_yank float_mod integer_stackdepth float_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_swap tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub integer_stackdepth integer_stackdepth integer_sub float_dup integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan float_tan integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [8.2502 9 0.1379 10 6.8094 10 13.6874 11 21.9581 10 7.6773 11 0.0691 9 0.1615 9 64.0 1 4.0752 11 80.0 1 0.3514 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 7.0763 9 26.4907 11 0.8055 9 21.0419 9 67.5118 10 1.5923 11 9.0504 11 13.1007 11 20.5927 11]
Total: 647.7133
Mean: 12.954266
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2981.1303517999995
Median total errors in population: 917.0094
Error averages by case: (99.39288410000049 8.736 81.27996260000047 11.147 69.49700519999998 9.308 148.25654969999883 10.269 114.48351710000169 10.47 106.8375291 8.968 93.64394449999922 9.079 118.94839320000025 9.862 123.57297499999973 4.21 88.47048850000098 11.164 141.66135150000036 4.247 87.7710803000002 9.551 81.60115990000006 3.334 89.81322540000127 8.94 156.13522230000152 9.029 115.44169050000176 10.632 98.24819630000059 8.379 163.2379300999985 11.474 97.65247970000024 8.527 121.58791319999881 9.877 128.12401709999986 11.189 82.4336653999998 10.77 103.61275969999993 9.342 81.66392339999992 10.959 158.17748799999907 10.122)
Error minima by case: (0.0441 2 0.1379 9 0.0 0 0.6571 1 2.9162 2 0.1477 1 0.0127 1 0.085 2 4.1873 1 0.5217 2 1.2684 1 0.1498 7 0.0 0 1.9581 2 0.2487 1 1.9162 2 0.1217 2 5.6636 9 0.1066 2 0.0466 1 0.5941 6 0.0066 7 0.4372 2 0.1394 7 0.8457 1)
Average genome size in population (length): 127.685
Average program size in population (points): 128.685
Average percent parens in population: 0.008
Minimum age in population: 256.4594589305386
Maximum age in population: 260.7261507931295
Average age in population: 258.9757353292556
Median age in population: 259.0300847320616
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.645
Error (vector) diversity:			 0.648
Behavioral diversity:				 0.65
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 414458527
--- Timings ---
Current time: 1529615728738 milliseconds
Total Time:         844.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       287.2 seconds, 34.0%
Fitness Testing:    440.6 seconds, 52.2%
Report:             116.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 49800.396000000255
Test mean error for best: 24.90020
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dup_items} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 float_dup_items integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 0.274 8 66.8915 11 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 645.3673
Mean: 12.907346
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3135.1767524999996
Median total errors in population: 920.8539499999999
Error averages by case: (106.4286212000003 8.854 94.16954250000026 11.234 74.90280890000005 9.564 146.8462257999988 10.096 126.29934110000174 10.547 118.78148420000004 9.223 116.47160819999898 9.142 123.26952790000011 10.011 125.26692539999978 4.44 92.30778160000091 11.173 143.75459780000037 4.504 88.95734710000018 9.55 93.7453987000001 3.484 104.2557682000012 9.01 159.11542590000138 8.989 127.13804420000172 10.713 107.10176540000043 8.778 162.2340586999986 11.498 109.54426670000022 8.851 125.59708209999911 10.012 128.2217195999999 11.081 83.70331260000016 10.749 105.49740249999985 9.481 82.51721289999989 10.87 157.1664832999998 10.029)
Error minima by case: (0.2874 2 0.1379 7 0.0 0 1.3429 1 0.9162 2 0.1103 1 0.0127 1 0.1615 2 0.6978 1 0.5477 2 0.2684 1 0.2313 6 0.0 0 0.0419 1 0.2487 1 0.0838 2 0.4146 2 0.1422 8 0.069 2 0.0 0 1.223 7 0.0253 6 0.3004 2 0.2304 6 0.8457 1)
Average genome size in population (length): 128.552
Average program size in population (points): 129.552
Average percent parens in population: 0.008
Minimum age in population: 257.6824067675522
Maximum age in population: 262.2734509367831
Average age in population: 260.3006928899301
Median age in population: 260.353888375955
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.655
Error (vector) diversity:			 0.656
Behavioral diversity:				 0.659
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 417672577
--- Timings ---
Current time: 1529615734462 milliseconds
Total Time:         849.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       288.7 seconds, 34.0%
Fitness Testing:    443.8 seconds, 52.2%
Report:             117.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 49800.396000000255
Test mean error for best: 24.90020
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dup_items} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 float_dup_items integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 0.274 8 66.8915 11 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 645.3673
Mean: 12.907346
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3074.0960564
Median total errors in population: 945.5715499999999
Error averages by case: (106.1326501000001 8.806 85.75966530000018 11.374 73.62463580000015 9.76 137.65040399999899 10.05 118.30225580000172 10.396 115.28936559999994 9.115 114.44905549999946 9.201 121.66404380000012 9.947 128.45929929999974 4.581 96.13296730000086 11.202 146.02728570000036 4.593 93.60082120000027 9.759 89.91982900000008 3.802 94.32174170000133 8.816 145.86473060000154 8.844 117.79525850000186 10.513 104.95947330000045 8.824 153.76887129999875 11.502 103.78108490000022 8.812 126.75622689999935 10.07 130.77857910000003 11.132 85.97360609999993 10.91 112.67292249999991 9.441 86.28724150000004 10.861 151.88304159999882 9.93)
Error minima by case: (0.087 2 0.1379 9 0.0 0 0.3429 1 3.9162 2 0.2286 1 0.0082 1 8.0E-4 1 1.1873 1 0.0605 2 4.2684 1 0.0383 6 0.0 0 0.0419 2 2.2487 1 2.9162 2 0.4033 2 0.1422 8 0.0423 2 0.0 0 0.5227 4 0.1329 7 0.3004 2 0.1232 6 2.4407 1)
Average genome size in population (length): 128.426
Average program size in population (points): 129.426
Average percent parens in population: 0.008
Minimum age in population: 259.1880612766762
Maximum age in population: 263.7746227390132
Average age in population: 261.692778092153
Median age in population: 261.7330249294889
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.707
Error (vector) diversity:			 0.708
Behavioral diversity:				 0.709
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 420883677
--- Timings ---
Current time: 1529615739967 milliseconds
Total Time:         855.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       290.3 seconds, 33.9%
Fitness Testing:    447.1 seconds, 52.3%
Report:             118.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 49800.396000000255
Test mean error for best: 24.90020
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dup_items} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 float_dup_items integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 0.274 8 66.8915 11 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 645.3673
Mean: 12.907346
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3263.206730899999
Median total errors in population: 961.6299999999999
Error averages by case: (110.3672945000004 8.544 100.75109749999999 11.482 74.22833330000002 9.517 153.43685749999906 10.044 137.03475210000133 10.461 124.44425250000012 8.803 133.38361759999947 9.334 126.66269610000025 9.483 125.0961352999997 4.843 97.55372070000095 11.109 143.8286445000003 4.719 95.4580731000002 9.742 90.1760547000001 3.421 111.11676930000134 8.903 164.14414100000158 8.921 135.53569420000153 10.689 112.86484080000047 8.524 167.6263538999988 11.518 113.4150720999999 8.595 127.42816959999949 10.049 130.56950439999986 11.203 91.00017749999992 10.858 113.38556139999983 9.092 86.910729 10.77 166.19318829999926 9.971)
Error minima by case: (0.0441 2 0.1379 8 0.0 0 0.3429 1 0.0838 2 0.0218 1 0.0082 1 0.085 2 3.1873 1 0.2979 1 1.3778 1 0.1498 7 0.0 0 0.0419 1 3.2487 1 1.0838 2 0.0337 2 0.1569 8 0.069 2 0.0 0 0.6297 6 0.001 7 0.1554 1 0.358 6 3.8457 1)
Average genome size in population (length): 128.149
Average program size in population (points): 129.149
Average percent parens in population: 0.008
Minimum age in population: 260.1880612766762
Maximum age in population: 264.7242977467317
Average age in population: 262.9724627012651
Median age in population: 263.0472977188025
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.72
Error (vector) diversity:			 0.722
Behavioral diversity:				 0.722
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 424087852
--- Timings ---
Current time: 1529615745564 milliseconds
Total Time:         861.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       292.0 seconds, 33.9%
Fitness Testing:    450.2 seconds, 52.3%
Report:             118.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 49727.60630000028
Test mean error for best: 24.86380
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction 18} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction 15} {:instruction integer_mult})
Best program: (float_swap float_swap integer_fromfloat integer_mult in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 18 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan integer_sub integer_stackdepth integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub integer_sub integer_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_dec float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank 15 integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 0.274 8 66.8915 11 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 645.3673
Mean: 12.907346
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3160.1319364999995
Median total errors in population: 944.3832999999998
Error averages by case: (104.15773380000046 8.689 97.2688576000001 11.529 73.68995970000002 9.627 145.88695709999877 9.989 131.94478380000166 10.533 115.67060930000005 8.914 136.99119649999923 9.238 123.97297330000052 9.583 127.4683019999996 4.601 90.68398390000085 11.293 144.85746400000045 4.656 86.9150457000002 9.799 95.55453670000007 3.479 105.98704450000147 8.94 158.71245090000158 8.796 129.75332610000206 10.703 106.69944310000034 8.581 164.5540170999986 11.557 104.56443839999999 8.736 119.95421289999965 10.218 129.32342799999986 11.318 81.13293950000015 10.982 110.10710429999988 9.208 79.78522550000007 10.778 162.8529027999995 9.896)
Error minima by case: (0.0939 2 0.1379 8 0.0 0 0.3429 1 1.9162 2 0.1596 1 0.0082 1 8.0E-4 2 4.8745 1 0.2941 2 1.2684 1 0.2658 6 0.0 0 0.9581 1 0.2487 1 0.9162 2 0.0337 2 6.1422 8 0.0944 2 0.0824 1 0.3703 7 0.0211 7 0.3004 2 0.1007 7 0.8457 1)
Average genome size in population (length): 126.957
Average program size in population (points): 127.957
Average percent parens in population: 0.008
Minimum age in population: 261.9478941577054
Maximum age in population: 266.1481739283052
Average age in population: 264.2496508621358
Median age in population: 264.2792338014459
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.732
Error (vector) diversity:			 0.734
Behavioral diversity:				 0.735
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 427262227
--- Timings ---
Current time: 1529615750922 milliseconds
Total Time:         866.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       293.5 seconds, 33.9%
Fitness Testing:    453.3 seconds, 52.3%
Report:             119.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 48469.53380000022
Test mean error for best: 24.23477
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 110.209847505 
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 1.0440806039  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 99.6880789458 
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 123.7183436366
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.1145693997 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction float_dup_items} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_mult})
Best program: (float_swap float_swap integer_fromfloat float_mult in1 integer_fromfloat integer_yank float_mod integer_stackdepth integer_yank integer_inc integer_sub in1 17 integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 float_dup_items integer_sub in1 integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_dec float_inc integer_rot float_max float_inc float_dup_items float_inc float_yankdup print_float integer_yank integer_stackdepth integer_mult)
Errors: [7.4676 10 0.1379 10 6.9456 8 13.6874 11 21.9581 10 8.1103 10 0.0691 9 27.9578 12 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 0.2623 9 0.274 8 66.8915 11 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 645.3673
Mean: 12.907346
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3033.274713299999
Median total errors in population: 924.36315
Error averages by case: (100.08198610000062 8.754 93.43009650000018 11.485 71.5175798 9.388 136.9609778999991 10.058 121.02903870000164 10.466 106.84557029999999 8.921 135.6552664999992 9.262 119.14761850000035 9.579 127.23023969999969 4.754 85.15999920000041 11.226 144.97997920000032 4.535 83.57105290000021 9.887 87.45801320000008 3.545 97.63024820000143 8.847 149.9612903000013 8.878 120.37479820000175 10.632 101.26786910000048 8.551 155.62936679999873 11.601 100.19235429999995 8.695 117.09880729999978 10.126 125.48473629999961 11.377 80.08184580000021 11.081 108.03030519999975 9.277 80.45982490000021 10.849 152.2768483999993 9.945)
Error minima by case: (0.2874 2 0.1379 7 0.0 0 0.3429 1 2.9162 2 0.1374 1 0.0127 1 8.0E-4 2 1.7339 1 1.1779 1 2.2684 1 0.1701 5 0.0 0 0.0419 2 0.2487 1 1.9162 2 0.3538 2 3.8578 8 0.0514 2 0.0824 1 3.3019 6 0.135 8 0.3004 2 0.0169 7 0.8457 1)
Average genome size in population (length): 126.435
Average program size in population (points): 127.435
Average percent parens in population: 0.008
Minimum age in population: 263.5770284274582
Maximum age in population: 267.692718526021
Average age in population: 265.5818819218392
Median age in population: 265.6280498026559
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.692
Error (vector) diversity:			 0.695
Behavioral diversity:				 0.696
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 430423502
--- Timings ---
Current time: 1529615756551 milliseconds
Total Time:         872.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       295.0 seconds, 33.8%
Fitness Testing:    456.5 seconds, 52.4%
Report:             120.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 48565.1472000002
Test mean error for best: 24.28257
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 108.6766022955
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 0.7619371316  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 121.3124721576
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 122.6488033424
Correct output: -78.3331420378 | Program output: -99.3750411748
Correct output: 66.7769669244  | Program output: -0.4328622281 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_pop} {:instruction integer_mult})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan float_tan integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_yank integer_pop integer_mult)
Errors: [9.0009 7 0.1379 10 6.6635 11 13.6874 11 21.9581 10 8.1103 10 0.0691 9 6.3334 10 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 1.3319 9 21.0419 9 67.2098 10 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 645.1499
Mean: 12.902998
Genome size: 138
Size: 139
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3170.110550599999
Median total errors in population: 932.7572
Error averages by case: (103.27874880000063 8.745 91.08295230000019 11.294 77.31781509999996 9.474 157.55003179999866 10.263 122.82527520000163 10.554 114.1691467000001 8.814 148.81606829999902 9.408 121.40686890000033 9.493 123.93750899999966 4.649 91.91133310000086 11.195 142.76017420000045 4.504 90.42753700000023 9.853 88.87672780000007 3.596 95.16122370000119 9.005 174.53702220000133 9.18 122.88585280000177 10.756 104.96083820000058 8.302 174.23267499999855 11.414 102.8118552 8.492 113.82007159999995 10.024 130.1351659999995 11.247 83.86209430000001 10.99 108.31634629999988 9.187 81.06785639999995 10.731 172.51436069999994 10.275)
Error minima by case: (0.0441 2 0.1379 8 0.0 0 0.3429 1 1.0838 2 0.2034 1 0.0015 1 8.0E-4 1 0.8127 1 0.3042 2 1.7316 1 0.0122 7 0.0 0 0.0419 2 3.7513 1 1.9162 2 0.4033 2 1.1422 8 0.069 2 0.0824 1 9.6254 8 0.0691 6 0.4372 2 0.0035 7 3.1543 1)
Average genome size in population (length): 125.793
Average program size in population (points): 126.793
Average percent parens in population: 0.008
Minimum age in population: 264.7183253023395
Maximum age in population: 268.8694033326784
Average age in population: 267.0077405107037
Median age in population: 267.0540977495295
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.679
Error (vector) diversity:			 0.682
Behavioral diversity:				 0.683
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 433568627
--- Timings ---
Current time: 1529615761940 milliseconds
Total Time:         877.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       296.5 seconds, 33.8%
Fitness Testing:    459.6 seconds, 52.4%
Report:             121.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 48743.53820000022
Test mean error for best: 24.37177
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 108.6766022955
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 0.7619371316  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 121.3124721576
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 122.6488033424
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.4328622281 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction 17} {:instruction in2} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_pop})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 17 in2 integer_dup integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan float_tan integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_yank integer_pop)
Errors: [9.0009 7 0.1379 10 6.6635 11 13.6874 11 21.9581 10 8.1103 10 0.0691 9 6.3334 10 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 1.3319 9 0.274 8 67.2098 10 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 623.3820000000001
Mean: 12.46764
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2794.4512656999987
Median total errors in population: 945.09335
Error averages by case: (85.32176040000061 8.719 77.12693920000036 11.217 56.35998709999976 9.374 146.65324549999892 10.055 108.31025510000153 10.411 93.07629390000017 8.728 140.6383658999988 9.139 101.06481330000014 9.586 106.60687699999976 4.461 77.38528030000009 11.123 123.49214740000035 4.347 75.69169300000019 9.863 67.71444970000009 3.724 82.20485080000108 8.884 166.57227940000126 9.079 108.53257290000158 10.608 85.60364140000057 8.105 166.22855839999897 11.404 87.23950080000022 8.409 100.33183000000001 10.005 117.56181899999953 11.171 69.84470470000049 10.978 89.03800519999987 9.142 68.70957890000052 10.704 163.79681639999924 10.109)
Error minima by case: (0.0441 2 0.1379 5 0.0 0 0.3429 1 2.9162 2 0.0175 1 0.0127 1 8.0E-4 2 4.8976 1 0.5198 2 0.2684 1 0.2658 7 0.0 0 0.9581 1 3.2487 1 1.9162 2 0.4033 2 2.7105 8 0.069 2 0.0 0 0.1382 7 0.205 8 0.0975 2 0.358 7 3.8457 1)
Average genome size in population (length): 125.917
Average program size in population (points): 126.917
Average percent parens in population: 0.008
Minimum age in population: 265.9764132458607
Maximum age in population: 270.4385718302388
Average age in population: 268.3284934280028
Median age in population: 268.3824500567402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.689
Error (vector) diversity:			 0.691
Behavioral diversity:				 0.692
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 436716902
--- Timings ---
Current time: 1529615767766 milliseconds
Total Time:         883.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       298.2 seconds, 33.8%
Fitness Testing:    463.0 seconds, 52.4%
Report:             122.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 48743.53820000022
Test mean error for best: 24.37177
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 108.6766022955
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 0.7619371316  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 121.3124721576
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 122.6488033424
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.4328622281 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction 17} {:instruction in2} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_pop})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 17 in2 integer_dup integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan float_tan integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_yank integer_pop)
Errors: [9.0009 7 0.1379 10 6.6635 11 13.6874 11 21.9581 10 8.1103 10 0.0691 9 6.3334 10 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 1.3319 9 0.274 8 67.2098 10 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 623.3820000000001
Mean: 12.46764
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2822.513727399999
Median total errors in population: 922.6796999999999
Error averages by case: (90.95966530000078 8.813 78.7909484000005 11.173 62.76771719999976 9.294 134.31948689999894 9.852 114.61081550000168 10.481 102.51846270000016 8.9 128.93141999999833 8.944 106.72926730000053 9.629 115.10744039999966 4.505 79.6802263000007 11.167 129.14502510000037 4.442 78.74594120000017 9.799 71.56970460000007 3.48 87.80136040000127 8.997 148.84555800000155 8.862 114.49173650000183 10.647 92.25786920000068 8.209 150.3952471999989 11.477 91.1858291000003 8.463 108.2396625000002 10.039 114.8550238999995 11.199 74.38738010000002 10.994 94.45559619999989 9.258 71.22831219999998 10.802 151.171031199999 9.897)
Error minima by case: (0.2127 2 0.1379 8 0.0 0 0.3429 1 1.9162 2 0.0372 1 0.0127 1 8.0E-4 2 5.8901 1 0.9554 2 0.2684 1 0.0662 5 0.0 0 0.9162 1 3.699 1 0.9162 2 0.1743 2 1.5162 8 0.1226 2 0.0097 1 11.6948 8 0.0968 7 0.4372 2 0.1159 6 2.1938 1)
Average genome size in population (length): 126.231
Average program size in population (points): 127.231
Average percent parens in population: 0.008
Minimum age in population: 267.2174728225167
Maximum age in population: 271.7742204023299
Average age in population: 269.7152697063642
Median age in population: 269.7838707947793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.674
Error (vector) diversity:			 0.674
Behavioral diversity:				 0.674
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 439873027
--- Timings ---
Current time: 1529615773114 milliseconds
Total Time:         888.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       299.6 seconds, 33.7%
Fitness Testing:    466.1 seconds, 52.4%
Report:             122.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 48743.53820000022
Test mean error for best: 24.37177
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 108.6766022955
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 0.7619371316  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 121.3124721576
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 122.6488033424
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.4328622281 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction 17} {:instruction in2} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_pop})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 17 in2 integer_dup integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan float_tan integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_yank integer_pop)
Errors: [9.0009 7 0.1379 10 6.6635 11 13.6874 11 21.9581 10 8.1103 10 0.0691 9 6.3334 10 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 1.3319 9 0.274 8 67.2098 10 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 623.3820000000001
Mean: 12.46764
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3106.856532899999
Median total errors in population: 932.9116999999999
Error averages by case: (103.14298440000074 8.86 87.76050520000048 11.174 72.72782619999981 9.385 145.8614449999989 10.026 116.02243660000161 10.465 115.16715250000016 9.01 141.32032849999848 9.142 124.06486480000044 9.805 128.13516639999975 4.641 90.68854570000062 11.221 145.62906160000043 4.542 89.97703430000024 9.85 88.0176031000001 3.778 89.33093220000129 8.985 162.43517000000153 9.04 115.74606640000175 10.668 106.16894680000061 8.234 163.5071709999989 11.46 106.85864030000035 8.538 114.95436110000007 10.055 127.5597432999995 11.187 85.59775730000035 11.015 112.69560029999984 9.368 81.73733430000017 10.829 160.40985559999908 10.062)
Error minima by case: (0.2874 2 0.1379 8 0.0 0 0.3429 1 2.9162 2 0.1477 1 0.0127 1 8.0E-4 2 1.8191 1 0.9395 2 0.7316 1 0.0649 7 0.0 0 0.0419 1 5.7513 1 1.9162 2 0.3717 2 0.5896 8 0.0833 2 0.0 0 3.2167 8 0.16 8 0.4372 2 0.2074 7 5.1543 1)
Average genome size in population (length): 126.464
Average program size in population (points): 127.464
Average percent parens in population: 0.008
Minimum age in population: 268.5952420802841
Maximum age in population: 273.2257052307429
Average age in population: 271.1164777119655
Median age in population: 271.1550674933066
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.662
Error (vector) diversity:			 0.663
Behavioral diversity:				 0.664
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 443034977
--- Timings ---
Current time: 1529615778949 milliseconds
Total Time:         894.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       301.1 seconds, 33.7%
Fitness Testing:    469.4 seconds, 52.5%
Report:             123.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 48743.53820000022
Test mean error for best: 24.37177
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 108.6766022955
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 0.7619371316  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 121.3124721576
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 122.6488033424
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.4328622281 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction 17} {:instruction in2} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_pop})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 17 in2 integer_dup integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan float_tan integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_yank integer_pop)
Errors: [9.0009 7 0.1379 10 6.6635 11 13.6874 11 21.9581 10 8.1103 10 0.0691 9 6.3334 10 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 1.3319 9 0.274 8 67.2098 10 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 623.3820000000001
Mean: 12.46764
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2673.108952399999
Median total errors in population: 914.7532
Error averages by case: (85.73944410000063 8.648 74.20199200000049 11.089 50.26928689999972 9.183 122.84670389999943 9.952 115.99838440000175 10.391 94.96801080000017 8.682 120.08832379999892 9.056 105.41776980000016 9.518 105.45892139999975 4.173 73.31765569999988 11.049 123.78119450000032 4.193 72.83121020000021 9.871 71.86109060000004 3.606 87.8413694000012 8.919 138.43355950000137 8.968 114.7760342000018 10.591 85.23447030000062 7.993 141.0294696999993 11.363 86.71302420000019 8.307 98.76600530000013 9.882 113.63234229999964 11.134 67.65523860000071 10.96 90.66622569999991 9.019 66.40870080000062 10.798 137.80452429999903 10.023)
Error minima by case: (0.0939 2 0.1379 8 0.0 0 0.0141 1 0.0838 2 0.1477 1 0.0127 1 0.1615 2 22.341 1 1.1237 1 1.5462 1 0.2658 6 0.0 0 0.9581 2 2.1615 1 0.0838 2 0.2038 2 0.07 7 0.0518 2 0.0505 1 3.0688 7 0.16 7 0.1554 2 0.2207 6 1.5645 1)
Average genome size in population (length): 126.822
Average program size in population (points): 127.822
Average percent parens in population: 0.008
Minimum age in population: 269.5952420802841
Maximum age in population: 274.1131631944424
Average age in population: 272.4899788003916
Median age in population: 272.5251500735432
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.669
Error (vector) diversity:			 0.671
Behavioral diversity:				 0.671
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 446205777
--- Timings ---
Current time: 1529615784433 milliseconds
Total Time:         900.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       302.7 seconds, 33.6%
Fitness Testing:    472.5 seconds, 52.5%
Report:             124.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 48743.53820000022
Test mean error for best: 24.37177
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 108.6766022955
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 0.7619371316  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 121.3124721576
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 122.6488033424
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.4328622281 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction 17} {:instruction in2} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_pop})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 17 in2 integer_dup integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan float_tan integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_yank integer_pop)
Errors: [9.0009 7 0.1379 10 6.6635 11 13.6874 11 21.9581 10 8.1103 10 0.0691 9 6.3334 10 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 1.3319 9 0.274 8 67.2098 10 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 623.3820000000001
Mean: 12.46764
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2976.2466414999994
Median total errors in population: 922.1865499999999
Error averages by case: (96.99599640000066 8.905 90.34408530000043 11.14 67.95256009999981 9.331 135.1517754999991 9.93 123.05707530000174 10.441 108.5236414000002 8.91 130.96196249999863 8.999 117.29746500000053 9.817 121.8628705999997 4.711 85.64265320000051 11.175 139.28323910000032 4.563 85.28055230000022 9.799 82.34635990000011 3.547 95.53601290000127 8.99 149.13174930000127 8.946 123.06201100000192 10.611 98.27641990000072 8.275 152.02235599999872 11.453 97.3389796000003 8.545 111.52119790000019 9.954 123.68614989999948 11.176 80.97365790000009 11.048 105.69757459999991 9.367 76.93292330000021 10.819 146.93137259999898 9.984)
Error minima by case: (0.2396 2 0.1379 8 0.0 0 0.3429 1 2.0838 2 0.1477 2 0.0127 1 0.1615 2 1.1873 1 0.9148 2 2.7316 1 0.1498 7 0.0 0 0.0419 1 0.7513 1 1.9162 2 0.4827 2 12.3212 7 0.2623 2 0.0 0 5.5167 8 0.0055 6 0.4372 2 0.1007 7 0.1543 1)
Average genome size in population (length): 127.623
Average program size in population (points): 128.623
Average percent parens in population: 0.008
Minimum age in population: 271.2291758948949
Maximum age in population: 275.5160102819887
Average age in population: 273.8151218516204
Median age in population: 273.8248473840358
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.633
Error (vector) diversity:			 0.635
Behavioral diversity:				 0.636
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 449396727
--- Timings ---
Current time: 1529615790203 milliseconds
Total Time:         905.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       304.2 seconds, 33.6%
Fitness Testing:    475.9 seconds, 52.5%
Report:             125.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 48743.53820000022
Test mean error for best: 24.37177
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 108.6766022955
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 0.7619371316  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 121.3124721576
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 122.6488033424
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.4328622281 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction 17} {:instruction in2} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_swap} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_pop})
Best program: (float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 17 in2 integer_dup integer_dup_times float_dup_items float_frominteger integer_flush integer_swap tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan float_tan integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_yank integer_pop)
Errors: [9.0009 7 0.1379 10 6.6635 11 13.6874 11 21.9581 10 8.1103 10 0.0691 9 6.3334 10 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 1.3319 9 0.274 8 67.2098 10 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 623.3820000000001
Mean: 12.46764
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3257.2064863
Median total errors in population: 931.7499499999999
Error averages by case: (115.41944510000081 8.831 95.60600600000042 11.216 77.61248590000017 9.46 144.35242949999886 9.94 130.7412997000017 10.434 123.37518810000024 8.974 144.09642639999834 9.074 133.15876940000055 9.717 133.0068080999997 4.755 97.36102000000108 11.228 150.31268020000047 4.756 96.39496900000023 10.027 91.69154710000008 3.73 102.23335590000123 8.983 158.32351460000112 9.004 130.65442150000183 10.652 113.50460860000076 8.243 161.6824640999986 11.491 113.89615950000035 8.56 117.78107610000029 9.977 135.99415699999952 11.259 92.72600519999997 11.175 117.94894100000002 9.302 91.4700001999998 10.97 156.12070809999958 9.984)
Error minima by case: (0.2396 2 0.1379 9 0.0 0 0.3429 1 0.9162 2 0.0662 1 0.0127 1 8.0E-4 2 5.1873 1 0.7457 1 0.2684 1 0.2658 6 0.0 0 0.0419 2 1.5826 1 0.0838 2 0.1217 2 1.1422 8 0.1226 2 0.1511 1 4.765 7 0.1329 6 0.4372 2 0.0257 7 1.1543 1)
Average genome size in population (length): 127.95
Average program size in population (points): 128.95
Average percent parens in population: 0.008
Minimum age in population: 273.3173509643221
Maximum age in population: 277.1551089683564
Average age in population: 275.1262202371908
Median age in population: 275.1622479740646
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.652
Error (vector) diversity:			 0.652
Behavioral diversity:				 0.654
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 452595827
--- Timings ---
Current time: 1529615796013 milliseconds
Total Time:         911.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       305.9 seconds, 33.6%
Fitness Testing:    479.1 seconds, 52.6%
Report:             126.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 48743.53820000022
Test mean error for best: 24.37177
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.6774606975 | Program output: 108.6766022955
Correct output: -30.5973968421 | Program output: -30.7352775358
Correct output: -5.9015288603  | Program output: 0.7619371316  
Correct output: 24.3848067256  | Program output: 10.6973720264 
Correct output: -119.8990795364 | Program output: -97.9409786734
Correct output: 143.1946278344 | Program output: 135.0843777936
Correct output: 10.8625446508  | Program output: 10.7934609064 
Correct output: 127.6458652779 | Program output: 121.3124721576
Correct output: 71.8127365426  | Program output: 7.8127365426  
Correct output: -17.9148224328 | Program output: -11.8396566161
Correct output: 93.2683698204  | Program output: 13.2683698204 
Correct output: 1.1498437373   | Program output: 2.7984066847  
Correct output: 85.1198734399  | Program output: 86.1198734399 
Correct output: -62.5035732311 | Program output: -53.5454723681
Correct output: 31.7931803333  | Program output: 10.4358383388 
Correct output: -122.2934290035 | Program output: -101.3353281405
Correct output: 112.9049586254 | Program output: 119.3587596184
Correct output: -15.8996538358 | Program output: 10.591076193  
Correct output: 123.9806904826 | Program output: 122.6488033424
Correct output: -78.3331420378 | Program output: -78.6071240294
Correct output: 66.7769669244  | Program output: -0.4328622281 
Correct output: 3.7173929377   | Program output: 4.1251148222  
Correct output: 109.3750668562 | Program output: 110.9378343197
Correct output: 16.5512971727  | Program output: 5.4505483995  
Correct output: 31.1961711525  | Program output: 10.6034605132 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction 17} {:instruction in2} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_743} {:instruction integer_sub} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_sub} {:instruction in1} {:instruction 17} {:instruction in2} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction 17.041899137023094} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_div} {:instruction integer_pop} {:instruction float_div} {:instruction integer_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_pop})
Best program: (float_swap float_yankdup float_swap float_mod float_swap integer_min float_swap float_inc in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat integer_stackdepth integer_sub integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 17 in2 integer_dup integer_dup_times float_dup_items float_frominteger integer_flush integer_yank tag_float_743 integer_sub integer_sub in1 integer_fromfloat float_tan float_tan integer_inc integer_sub integer_fromfloat float_tan integer_sub integer_inc integer_sub integer_inc integer_sub integer_inc integer_sub integer_sub integer_inc float_inc float_inc integer_inc integer_sub in1 17 in2 integer_mod integer_dup_times float_dup_items float_frominteger float_frominteger integer_flush in1 integer_yank integer_fromfloat float_dup_items 17.041899137023094 float_inc integer_dup_times integer_yank float_sub integer_swap float_yank integer_swap float_yank float_dec integer_dup float_dec integer_dup float_yank float_dec float_dec integer_mult float_dec in2 float_dec float_dec integer_dup float_dec integer_shove float_yank float_div integer_pop float_div integer_rot float_swap float_inc float_dup_items float_inc float_inc float_dup_items float_inc float_max float_inc float_dup_items float_inc integer_inc float_inc integer_rot float_max float_inc integer_rot float_max float_inc float_dup_items float_max float_yankdup print_float integer_yank integer_stackdepth integer_yank integer_pop)
Errors: [9.0009 7 0.1379 10 6.6635 11 13.6874 11 21.9581 10 8.1103 10 0.0691 9 6.3334 10 64.0 1 6.0752 11 80.0 1 1.6486 9 1.0 1 8.9581 8 21.3573 9 20.9581 10 6.4538 8 26.4907 11 1.3319 9 0.274 8 67.2098 10 0.4077 11 1.5628 11 11.1007 11 20.5927 11]
Total: 623.3820000000001
Mean: 12.46764
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2869.0984308
Median total errors in population: 894.7497999999998
Error averages by case: (90.66443780000058 8.542 86.44697440000056 11.161 58.51681319999986 9.343 138.95164099999897 9.946 119.6542853000017 10.411 100.49584190000024 8.82 138.5047019999984 9.065 105.89702350000043 9.553 111.18872049999972 4.338 81.3415977000003 11.11 129.8918058000003 4.214 81.80114650000027 9.858 72.43001920000003 3.369 92.60702890000114 9.001 156.1030685000016 8.966 118.93421210000186 10.616 94.41055580000057 8.094 157.11058539999885 11.373 91.65261270000025 8.393 103.66501230000001 9.924 116.76192299999953 11.115 75.39031890000031 10.962 92.44220509999992 9.156 72.1951575000002 10.832 153.88874179999928 9.99)
Error minima by case: (0.2396 2 0.1379 8 0.0 0 0.3258 1 2.9162 2 0.0372 1 0.0127 1 0.1615 2 4.8127 1 1.1779 2 2.2684 1 0.0259 7 0.0 0 0.0419 2 1.7513 1 1.9162 2 0.1217 2 4.3652 8 0.039 2 0.1097 1 4.777 8 0.2989 7 0.4372 2 0.358 7 0.7892 1)
Average genome size in population (length): 129.145
Average program size in population (points): 130.145
Average percent parens in population: 0.008
Minimum age in population: 274.5758933425454
Maximum age in population: 278.21893147383
Average age in population: 276.4029621055683
Median age in population: 276.4488269969538
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.656
Error (vector) diversity:			 0.659
Behavioral diversity:				 0.66
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 455824727
--- Timings ---
Current time: 1529615801576 milliseconds
Total Time:         917.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       307.5 seconds, 33.5%
Fitness Testing:    482.2 seconds, 52.6%
Report:             127.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
