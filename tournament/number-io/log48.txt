Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-34.4474659360944 -53] -87.4474659360944]
Train Case:   1 | Input/Output: [[-50.02746548305239 -86] -136.0274654830524]
Train Case:   2 | Input/Output: [[60.75318024171844 -70] -9.24681975828156]
Train Case:   3 | Input/Output: [[-16.364927910857375 27] 10.635072089142625]
Train Case:   4 | Input/Output: [[-94.39916937980412 35] -59.39916937980412]
Train Case:   5 | Input/Output: [[-30.204857284850135 -85] -115.20485728485014]
Train Case:   6 | Input/Output: [[40.87449870304391 -47] -6.125501296956088]
Train Case:   7 | Input/Output: [[-40.568783878772166 -94] -134.56878387877217]
Train Case:   8 | Input/Output: [[-80.70528528247252 -68] -148.70528528247252]
Train Case:   9 | Input/Output: [[23.87674616735778 -34] -10.12325383264222]
Train Case:  10 | Input/Output: [[13.636435397155495 -33] -19.363564602844505]
Train Case:  11 | Input/Output: [[-63.82674153480434 13] -50.82674153480434]
Train Case:  12 | Input/Output: [[-24.18339673357353 75] 50.81660326642647]
Train Case:  13 | Input/Output: [[43.69896834856536 -10] 33.69896834856536]
Train Case:  14 | Input/Output: [[99.14199747480035 26] 125.14199747480035]
Train Case:  15 | Input/Output: [[79.37139467527155 2] 81.37139467527155]
Train Case:  16 | Input/Output: [[30.133676102273 -43] -12.866323897727]
Train Case:  17 | Input/Output: [[-94.8091035840654 86] -8.809103584065397]
Train Case:  18 | Input/Output: [[-30.698865713309857 -54] -84.69886571330986]
Train Case:  19 | Input/Output: [[-11.319589746311948 84] 72.68041025368805]
Train Case:  20 | Input/Output: [[-56.57865262446924 -98] -154.57865262446924]
Train Case:  21 | Input/Output: [[-28.51149519504355 5] -23.51149519504355]
Train Case:  22 | Input/Output: [[-97.65369214317712 11] -86.65369214317712]
Train Case:  23 | Input/Output: [[-69.96463907678444 -25] -94.96463907678444]
Train Case:  24 | Input/Output: [[-67.2671699492711 -78] -145.2671699492711]
Test Case:   0 | Input/Output: [[-10.98382558297584 -74] -84.98382558297584]
Test Case:   1 | Input/Output: [[19.77782895616687 -98] -78.22217104383313]
Test Case:   2 | Input/Output: [[82.32195551134711 69] 151.3219555113471]
Test Case:   3 | Input/Output: [[11.882165753685968 -65] -53.11783424631403]
Test Case:   4 | Input/Output: [[92.14199183094138 -41] 51.14199183094138]
Test Case:   5 | Input/Output: [[72.76615872515703 -51] 21.766158725157027]
Test Case:   6 | Input/Output: [[26.407842067532485 -68] -41.592157932467515]
Test Case:   7 | Input/Output: [[47.94999857875092 4] 51.94999857875092]
Test Case:   8 | Input/Output: [[-13.449502344388506 -16] -29.449502344388506]
Test Case:   9 | Input/Output: [[-12.42985769689291 -83] -95.42985769689291]
Test Case:  10 | Input/Output: [[-60.972329967633485 -17] -77.97232996763348]
Test Case:  11 | Input/Output: [[30.759271321738424 90] 120.75927132173842]
Test Case:  12 | Input/Output: [[51.24330169750678 -97] -45.75669830249322]
Test Case:  13 | Input/Output: [[67.45832351209799 43] 110.45832351209799]
Test Case:  14 | Input/Output: [[-1.5846414649600717 33] 31.41535853503993]
Test Case:  15 | Input/Output: [[-70.15647237982203 -73] -143.15647237982205]
Test Case:  16 | Input/Output: [[23.677310433705728 -27] -3.3226895662942724]
Test Case:  17 | Input/Output: [[41.640733554655526 -41] 0.640733554655526]
Test Case:  18 | Input/Output: [[47.08275899363332 4] 51.08275899363332]
Test Case:  19 | Input/Output: [[-29.636548728072526 -78] -107.63654872807253]
Test Case:  20 | Input/Output: [[66.67795721651538 -51] 15.67795721651538]
Test Case:  21 | Input/Output: [[64.96940340931411 -65] -0.030596590685888714]
Test Case:  22 | Input/Output: [[-96.18201119890712 60] -36.18201119890712]
Test Case:  23 | Input/Output: [[58.33685361860569 55] 113.33685361860569]
Test Case:  24 | Input/Output: [[41.44086949494309 65] 106.44086949494309]
Test Case:  25 | Input/Output: [[1.4096767273903623 -51] -49.59032327260964]
Test Case:  26 | Input/Output: [[-8.655320978021308 -34] -42.65532097802131]
Test Case:  27 | Input/Output: [[-40.83433107940802 -38] -78.83433107940802]
Test Case:  28 | Input/Output: [[36.73166246141943 83] 119.73166246141943]
Test Case:  29 | Input/Output: [[27.170466743081718 7] 34.17046674308172]
Test Case:  30 | Input/Output: [[-29.238018151906516 95] 65.76198184809348]
Test Case:  31 | Input/Output: [[-48.01651917786782 48] -0.016519177867820645]
Test Case:  32 | Input/Output: [[-69.50418367662287 17] -52.50418367662287]
Test Case:  33 | Input/Output: [[-7.618459768069258 -80] -87.61845976806926]
Test Case:  34 | Input/Output: [[-73.89795382901329 -79] -152.8979538290133]
Test Case:  35 | Input/Output: [[69.89100445695934 -30] 39.89100445695934]
Test Case:  36 | Input/Output: [[-39.98223552732778 -59] -98.98223552732779]
Test Case:  37 | Input/Output: [[-2.0373958210405902 77] 74.96260417895941]
Test Case:  38 | Input/Output: [[92.49956620015644 -46] 46.49956620015644]
Test Case:  39 | Input/Output: [[72.48562517061123 -55] 17.48562517061123]
Test Case:  40 | Input/Output: [[88.76455075038174 -57] 31.764550750381744]
Test Case:  41 | Input/Output: [[-71.2402115771781 -42] -113.2402115771781]
Test Case:  42 | Input/Output: [[80.11566493434958 -40] 40.11566493434958]
Test Case:  43 | Input/Output: [[-94.26526530705308 -98] -192.26526530705308]
Test Case:  44 | Input/Output: [[-54.19216104344717 74] 19.80783895655283]
Test Case:  45 | Input/Output: [[-74.42459559109702 16] -58.42459559109702]
Test Case:  46 | Input/Output: [[-2.67203650728365 19] 16.32796349271635]
Test Case:  47 | Input/Output: [[65.15222000377943 49] 114.15222000377943]
Test Case:  48 | Input/Output: [[-6.828686170912036 -11] -17.828686170912036]
Test Case:  49 | Input/Output: [[95.9780485369736 -93] 2.9780485369736027]
Test Case:  50 | Input/Output: [[-49.41400738378843 -13] -62.41400738378843]
Test Case:  51 | Input/Output: [[92.18425423788347 14] 106.18425423788347]
Test Case:  52 | Input/Output: [[-75.72803129788707 -44] -119.72803129788707]
Test Case:  53 | Input/Output: [[81.970650563497 100] 181.970650563497]
Test Case:  54 | Input/Output: [[-26.212421068788274 -67] -93.21242106878827]
Test Case:  55 | Input/Output: [[-28.646374145645524 -88] -116.64637414564552]
Test Case:  56 | Input/Output: [[85.4644950882404 22] 107.4644950882404]
Test Case:  57 | Input/Output: [[71.69555864109321 -43] 28.695558641093214]
Test Case:  58 | Input/Output: [[-47.846604496364506 20] -27.846604496364506]
Test Case:  59 | Input/Output: [[-27.350444989803975 36] 8.649555010196025]
Test Case:  60 | Input/Output: [[-95.25126662469872 -85] -180.2512666246987]
Test Case:  61 | Input/Output: [[-60.33550627068689 48] -12.335506270686892]
Test Case:  62 | Input/Output: [[-75.6364506292381 6] -69.6364506292381]
Test Case:  63 | Input/Output: [[20.10775897741381 10] 30.10775897741381]
Test Case:  64 | Input/Output: [[11.606032648891713 75] 86.60603264889171]
Test Case:  65 | Input/Output: [[15.049249709370741 22] 37.04924970937074]
Test Case:  66 | Input/Output: [[-44.682521670463956 32] -12.682521670463956]
Test Case:  67 | Input/Output: [[-42.262662694409926 -20] -62.262662694409926]
Test Case:  68 | Input/Output: [[-3.3584575973648185 55] 51.64154240263518]
Test Case:  69 | Input/Output: [[-92.26452313791343 -38] -130.26452313791344]
Test Case:  70 | Input/Output: [[-42.25272743656072 39] -3.2527274365607184]
Test Case:  71 | Input/Output: [[66.89886021317704 34] 100.89886021317704]
Test Case:  72 | Input/Output: [[-62.11964307832039 91] 28.880356921679613]
Test Case:  73 | Input/Output: [[-61.205315289257854 70] 8.794684710742146]
Test Case:  74 | Input/Output: [[35.28539988648848 -86] -50.71460011351152]
Test Case:  75 | Input/Output: [[-96.45740441099524 -67] -163.45740441099525]
Test Case:  76 | Input/Output: [[-35.27739681121153 42] 6.722603188788469]
Test Case:  77 | Input/Output: [[6.576232495628815 21] 27.576232495628815]
Test Case:  78 | Input/Output: [[4.759239719778122 38] 42.75923971977812]
Test Case:  79 | Input/Output: [[-93.79333232578789 73] -20.793332325787887]
Test Case:  80 | Input/Output: [[-34.741154997148826 -18] -52.741154997148826]
Test Case:  81 | Input/Output: [[-89.80875416907865 75] -14.808754169078654]
Test Case:  82 | Input/Output: [[-53.01553723428791 51] -2.015537234287912]
Test Case:  83 | Input/Output: [[-62.494949705015415 -78] -140.49494970501542]
Test Case:  84 | Input/Output: [[56.27659096596693 -74] -17.723409034033068]
Test Case:  85 | Input/Output: [[22.888562711974302 -15] 7.888562711974302]
Test Case:  86 | Input/Output: [[81.06519256294888 -29] 52.06519256294888]
Test Case:  87 | Input/Output: [[-59.315726159222514 21] -38.315726159222514]
Test Case:  88 | Input/Output: [[54.77436408111666 -9] 45.77436408111666]
Test Case:  89 | Input/Output: [[-63.83909290909786 78] 14.160907090902143]
Test Case:  90 | Input/Output: [[-62.729609748228235 -19] -81.72960974822823]
Test Case:  91 | Input/Output: [[89.70734864700438 -12] 77.70734864700438]
Test Case:  92 | Input/Output: [[-67.41372765191295 -73] -140.41372765191295]
Test Case:  93 | Input/Output: [[-98.47354158834052 58] -40.473541588340524]
Test Case:  94 | Input/Output: [[49.70913853470435 -13] 36.70913853470435]
Test Case:  95 | Input/Output: [[79.18305303888496 82] 161.18305303888496]
Test Case:  96 | Input/Output: [[-76.27478389996789 70] -6.274783899967886]
Test Case:  97 | Input/Output: [[78.84102432616527 66] 144.84102432616527]
Test Case:  98 | Input/Output: [[35.386130974819906 -67] -31.613869025180094]
Test Case:  99 | Input/Output: [[80.96835595702555 36] 116.96835595702555]
Test Case: 100 | Input/Output: [[60.840091373063046 -17] 43.840091373063046]
Test Case: 101 | Input/Output: [[-71.14695219258253 54] -17.146952192582532]
Test Case: 102 | Input/Output: [[-37.0179183496725 -81] -118.0179183496725]
Test Case: 103 | Input/Output: [[-86.10458186702287 -85] -171.1045818670229]
Test Case: 104 | Input/Output: [[-28.129700188323 -74] -102.129700188323]
Test Case: 105 | Input/Output: [[-55.66939323530591 -97] -152.6693932353059]
Test Case: 106 | Input/Output: [[-69.88633172212404 -63] -132.88633172212405]
Test Case: 107 | Input/Output: [[-87.68814019300439 -11] -98.68814019300439]
Test Case: 108 | Input/Output: [[5.712488717715772 -55] -49.28751128228423]
Test Case: 109 | Input/Output: [[-10.768635221120931 -26] -36.76863522112093]
Test Case: 110 | Input/Output: [[-27.13489552351757 46] 18.86510447648243]
Test Case: 111 | Input/Output: [[72.4718845738569 -98] -25.528115426143103]
Test Case: 112 | Input/Output: [[-69.80788283812491 92] 22.19211716187509]
Test Case: 113 | Input/Output: [[15.711912482732075 35] 50.711912482732075]
Test Case: 114 | Input/Output: [[-44.16241927977524 -59] -103.16241927977524]
Test Case: 115 | Input/Output: [[92.90685574756304 61] 153.90685574756304]
Test Case: 116 | Input/Output: [[3.4171604613975006 -37] -33.5828395386025]
Test Case: 117 | Input/Output: [[-37.58465329074434 -43] -80.58465329074434]
Test Case: 118 | Input/Output: [[-49.91082877734194 -40] -89.91082877734195]
Test Case: 119 | Input/Output: [[-86.60737396416076 45] -41.60737396416076]
Test Case: 120 | Input/Output: [[37.58967370698301 -64] -26.410326293016993]
Test Case: 121 | Input/Output: [[98.08428648087326 60] 158.08428648087326]
Test Case: 122 | Input/Output: [[3.3053680609283873 -32] -28.694631939071613]
Test Case: 123 | Input/Output: [[9.965962616194446 -97] -87.03403738380555]
Test Case: 124 | Input/Output: [[-88.2783244739316 -100] -188.2783244739316]
Test Case: 125 | Input/Output: [[37.5731559900309 51] 88.5731559900309]
Test Case: 126 | Input/Output: [[8.565940797648679 -53] -44.43405920235132]
Test Case: 127 | Input/Output: [[-62.94433832663324 -32] -94.94433832663324]
Test Case: 128 | Input/Output: [[-89.33924077779218 -31] -120.33924077779218]
Test Case: 129 | Input/Output: [[93.31019516485125 13] 106.31019516485125]
Test Case: 130 | Input/Output: [[-98.46050456432687 25] -73.46050456432687]
Test Case: 131 | Input/Output: [[55.906758486191734 -27] 28.906758486191734]
Test Case: 132 | Input/Output: [[76.12021732151189 30] 106.12021732151189]
Test Case: 133 | Input/Output: [[2.834564885583646 -9] -6.165435114416354]
Test Case: 134 | Input/Output: [[-36.803424786487085 8] -28.803424786487085]
Test Case: 135 | Input/Output: [[56.14015384660803 -99] -42.85984615339197]
Test Case: 136 | Input/Output: [[16.05542229433827 79] 95.05542229433827]
Test Case: 137 | Input/Output: [[82.1527413703603 21] 103.1527413703603]
Test Case: 138 | Input/Output: [[-8.848936480985216 96] 87.15106351901478]
Test Case: 139 | Input/Output: [[9.45830662294182 -23] -13.54169337705818]
Test Case: 140 | Input/Output: [[93.92565625734352 -1] 92.92565625734352]
Test Case: 141 | Input/Output: [[39.02549334943194 -4] 35.02549334943194]
Test Case: 142 | Input/Output: [[-76.8963016821927 -33] -109.8963016821927]
Test Case: 143 | Input/Output: [[1.2645413398751657 -81] -79.73545866012483]
Test Case: 144 | Input/Output: [[64.46718460660927 41] 105.46718460660927]
Test Case: 145 | Input/Output: [[-52.28635736802194 -97] -149.28635736802192]
Test Case: 146 | Input/Output: [[31.188437625576512 86] 117.18843762557651]
Test Case: 147 | Input/Output: [[95.37403048196902 -51] 44.374030481969015]
Test Case: 148 | Input/Output: [[33.641773940392795 14] 47.641773940392795]
Test Case: 149 | Input/Output: [[16.624250131731927 4] 20.624250131731927]
Test Case: 150 | Input/Output: [[33.76878190896454 58] 91.76878190896454]
Test Case: 151 | Input/Output: [[45.72555289967087 -71] -25.274447100329127]
Test Case: 152 | Input/Output: [[78.24898627785493 60] 138.24898627785493]
Test Case: 153 | Input/Output: [[-33.264604023106 3] -30.264604023106003]
Test Case: 154 | Input/Output: [[69.56679904550748 -1] 68.56679904550748]
Test Case: 155 | Input/Output: [[-37.29626866417226 -10] -47.29626866417226]
Test Case: 156 | Input/Output: [[98.92306842281405 27] 125.92306842281405]
Test Case: 157 | Input/Output: [[54.072996767082 55] 109.072996767082]
Test Case: 158 | Input/Output: [[-16.917961994798006 -30] -46.917961994798006]
Test Case: 159 | Input/Output: [[92.14003499939392 -10] 82.14003499939392]
Test Case: 160 | Input/Output: [[74.93878143788706 81] 155.93878143788706]
Test Case: 161 | Input/Output: [[-9.23246215088065 94] 84.76753784911935]
Test Case: 162 | Input/Output: [[-21.920967174167828 -54] -75.92096717416783]
Test Case: 163 | Input/Output: [[-27.824721574983016 -53] -80.82472157498302]
Test Case: 164 | Input/Output: [[-18.260656860060593 -40] -58.26065686006059]
Test Case: 165 | Input/Output: [[25.94461627627338 -9] 16.94461627627338]
Test Case: 166 | Input/Output: [[-67.18832055495905 -87] -154.18832055495903]
Test Case: 167 | Input/Output: [[65.80811524124022 -16] 49.808115241240216]
Test Case: 168 | Input/Output: [[38.21479444433379 65] 103.21479444433379]
Test Case: 169 | Input/Output: [[-25.248625376022503 70] 44.7513746239775]
Test Case: 170 | Input/Output: [[63.087124647819394 81] 144.0871246478194]
Test Case: 171 | Input/Output: [[-86.68262081968483 -90] -176.68262081968481]
Test Case: 172 | Input/Output: [[82.30703367693906 -54] 28.307033676939056]
Test Case: 173 | Input/Output: [[-56.24691666653015 -8] -64.24691666653015]
Test Case: 174 | Input/Output: [[19.899436802729966 -71] -51.100563197270034]
Test Case: 175 | Input/Output: [[23.994584124202305 76] 99.9945841242023]
Test Case: 176 | Input/Output: [[21.492770413869295 98] 119.4927704138693]
Test Case: 177 | Input/Output: [[-99.78233783810535 -53] -152.78233783810535]
Test Case: 178 | Input/Output: [[-43.65081371784041 -5] -48.65081371784041]
Test Case: 179 | Input/Output: [[18.0163033768776 -41] -22.9836966231224]
Test Case: 180 | Input/Output: [[-55.08678046058175 -12] -67.08678046058175]
Test Case: 181 | Input/Output: [[-32.720715904909355 74] 41.279284095090645]
Test Case: 182 | Input/Output: [[-39.80510113984212 74] 34.19489886015788]
Test Case: 183 | Input/Output: [[28.521231340385924 73] 101.52123134038592]
Test Case: 184 | Input/Output: [[38.60563559669811 85] 123.60563559669811]
Test Case: 185 | Input/Output: [[51.74133735695801 22] 73.74133735695801]
Test Case: 186 | Input/Output: [[-68.37143975207752 -15] -83.37143975207752]
Test Case: 187 | Input/Output: [[-0.42345784005306086 2] 1.5765421599469391]
Test Case: 188 | Input/Output: [[4.663309210696042 -67] -62.33669078930396]
Test Case: 189 | Input/Output: [[-36.26162288341541 -49] -85.26162288341541]
Test Case: 190 | Input/Output: [[33.6078230637865 59] 92.6078230637865]
Test Case: 191 | Input/Output: [[65.35005605098141 -2] 63.35005605098141]
Test Case: 192 | Input/Output: [[-6.067161828681392 -89] -95.06716182868139]
Test Case: 193 | Input/Output: [[24.55090542992626 -47] -22.44909457007374]
Test Case: 194 | Input/Output: [[60.75575678901839 -16] 44.75575678901839]
Test Case: 195 | Input/Output: [[62.17534170576201 70] 132.175341705762]
Test Case: 196 | Input/Output: [[-8.137763334691812 -85] -93.13776333469181]
Test Case: 197 | Input/Output: [[-78.8190258750854 -11] -89.8190258750854]
Test Case: 198 | Input/Output: [[76.00206679476219 -67] 9.002066794762186]
Test Case: 199 | Input/Output: [[-30.562433238580695 83] 52.437566761419305]
Test Case: 200 | Input/Output: [[24.85966619260512 -72] -47.14033380739488]
Test Case: 201 | Input/Output: [[-75.04508203526443 25] -50.04508203526443]
Test Case: 202 | Input/Output: [[-46.61204820569041 -97] -143.6120482056904]
Test Case: 203 | Input/Output: [[-15.582425294723734 -72] -87.58242529472373]
Test Case: 204 | Input/Output: [[-94.54434126762025 -43] -137.54434126762027]
Test Case: 205 | Input/Output: [[17.728181461522837 35] 52.72818146152284]
Test Case: 206 | Input/Output: [[-0.35164452542353786 -85] -85.35164452542354]
Test Case: 207 | Input/Output: [[-87.71973074109565 -56] -143.71973074109565]
Test Case: 208 | Input/Output: [[0.864933376167599 -40] -39.1350666238324]
Test Case: 209 | Input/Output: [[-90.16456172137157 72] -18.16456172137157]
Test Case: 210 | Input/Output: [[-36.672180587048665 33] -3.672180587048665]
Test Case: 211 | Input/Output: [[-4.953103644326106 -32] -36.953103644326106]
Test Case: 212 | Input/Output: [[-56.21293528060028 -85] -141.21293528060028]
Test Case: 213 | Input/Output: [[-64.74105603072073 -6] -70.74105603072073]
Test Case: 214 | Input/Output: [[-22.084369006275082 35] 12.915630993724918]
Test Case: 215 | Input/Output: [[11.529910563117625 -29] -17.470089436882375]
Test Case: 216 | Input/Output: [[-9.178196127125673 16] 6.821803872874327]
Test Case: 217 | Input/Output: [[90.44699793461345 79] 169.44699793461345]
Test Case: 218 | Input/Output: [[55.11524035667006 -66] -10.884759643329943]
Test Case: 219 | Input/Output: [[-1.3099719841875128 -80] -81.30997198418751]
Test Case: 220 | Input/Output: [[-23.31077285838883 58] 34.68922714161117]
Test Case: 221 | Input/Output: [[-52.945603700201715 -42] -94.94560370020172]
Test Case: 222 | Input/Output: [[-17.112475470690683 -82] -99.11247547069068]
Test Case: 223 | Input/Output: [[92.75586673979831 -12] 80.75586673979831]
Test Case: 224 | Input/Output: [[-21.700047445575393 -88] -109.7000474455754]
Test Case: 225 | Input/Output: [[-41.77629753347283 -39] -80.77629753347283]
Test Case: 226 | Input/Output: [[-22.73807369794048 5] -17.73807369794048]
Test Case: 227 | Input/Output: [[90.54168826496263 53] 143.54168826496263]
Test Case: 228 | Input/Output: [[-39.831179316159094 38] -1.8311793161590941]
Test Case: 229 | Input/Output: [[89.82747116097713 -53] 36.827471160977126]
Test Case: 230 | Input/Output: [[-37.02655173759075 -49] -86.02655173759075]
Test Case: 231 | Input/Output: [[63.40999728043343 40] 103.40999728043343]
Test Case: 232 | Input/Output: [[-6.66973902763921 -27] -33.66973902763921]
Test Case: 233 | Input/Output: [[-75.56916669291019 14] -61.56916669291019]
Test Case: 234 | Input/Output: [[-71.98117081009458 -97] -168.98117081009457]
Test Case: 235 | Input/Output: [[-22.83776496009189 -14] -36.83776496009189]
Test Case: 236 | Input/Output: [[48.51641861370939 -2] 46.51641861370939]
Test Case: 237 | Input/Output: [[-38.124800253292634 -36] -74.12480025329263]
Test Case: 238 | Input/Output: [[60.944626340232304 1] 61.944626340232304]
Test Case: 239 | Input/Output: [[37.54896217200343 -68] -30.451037827996572]
Test Case: 240 | Input/Output: [[20.85259471330822 63] 83.85259471330822]
Test Case: 241 | Input/Output: [[-65.12336995486731 46] -19.123369954867314]
Test Case: 242 | Input/Output: [[96.87555152881598 18] 114.87555152881598]
Test Case: 243 | Input/Output: [[72.12936446974123 93] 165.12936446974123]
Test Case: 244 | Input/Output: [[-13.08688450817634 -39] -52.08688450817634]
Test Case: 245 | Input/Output: [[-29.42365493117522 -83] -112.42365493117522]
Test Case: 246 | Input/Output: [[-84.44904221156813 61] -23.449042211568127]
Test Case: 247 | Input/Output: [[-50.065193609959 31] -19.065193609959003]
Test Case: 248 | Input/Output: [[-86.29009736465363 46] -40.29009736465363]
Test Case: 249 | Input/Output: [[1.1069418181882185 43] 44.10694181818822]
Test Case: 250 | Input/Output: [[-53.69205289840193 98] 44.30794710159807]
Test Case: 251 | Input/Output: [[76.7141184345096 -53] 23.7141184345096]
Test Case: 252 | Input/Output: [[59.22075198692579 9] 68.22075198692579]
Test Case: 253 | Input/Output: [[93.6887275994246 -77] 16.688727599424595]
Test Case: 254 | Input/Output: [[-46.39028889847352 32] -14.390288898473521]
Test Case: 255 | Input/Output: [[33.938728085989766 49] 82.93872808598977]
Test Case: 256 | Input/Output: [[-15.186970789598917 57] 41.81302921040108]
Test Case: 257 | Input/Output: [[-98.49794669566893 -58] -156.49794669566893]
Test Case: 258 | Input/Output: [[95.17867984411811 -64] 31.178679844118108]
Test Case: 259 | Input/Output: [[53.647928020988644 -22] 31.647928020988644]
Test Case: 260 | Input/Output: [[13.281718593226415 12] 25.281718593226415]
Test Case: 261 | Input/Output: [[-49.2737528982216 38] -11.273752898221602]
Test Case: 262 | Input/Output: [[38.16065006016032 -18] 20.16065006016032]
Test Case: 263 | Input/Output: [[-63.48744562355366 -59] -122.48744562355367]
Test Case: 264 | Input/Output: [[-97.56491169301435 -94] -191.56491169301435]
Test Case: 265 | Input/Output: [[-77.29718850231544 32] -45.297188502315436]
Test Case: 266 | Input/Output: [[82.24239213753509 83] 165.2423921375351]
Test Case: 267 | Input/Output: [[-10.371024634746504 38] 27.628975365253496]
Test Case: 268 | Input/Output: [[78.24413111224291 7] 85.24413111224291]
Test Case: 269 | Input/Output: [[-84.77674781110731 62] -22.776747811107313]
Test Case: 270 | Input/Output: [[-90.12642112275849 -24] -114.12642112275849]
Test Case: 271 | Input/Output: [[54.653081599573426 100] 154.65308159957343]
Test Case: 272 | Input/Output: [[16.59189328727004 -57] -40.40810671272996]
Test Case: 273 | Input/Output: [[-50.566554509968476 51] 0.43344549003152366]
Test Case: 274 | Input/Output: [[-52.12492872782002 56] 3.87507127217998]
Test Case: 275 | Input/Output: [[89.48619084475439 46] 135.4861908447544]
Test Case: 276 | Input/Output: [[65.41103792482548 -81] -15.588962075174521]
Test Case: 277 | Input/Output: [[54.58636454600895 60] 114.58636454600895]
Test Case: 278 | Input/Output: [[32.38088723475164 85] 117.38088723475164]
Test Case: 279 | Input/Output: [[-97.48180786774321 -23] -120.48180786774321]
Test Case: 280 | Input/Output: [[-30.074201043420487 96] 65.92579895657951]
Test Case: 281 | Input/Output: [[-67.99439846876714 85] 17.005601531232855]
Test Case: 282 | Input/Output: [[-65.10581368732795 4] -61.10581368732795]
Test Case: 283 | Input/Output: [[24.94746183141214 32] 56.94746183141214]
Test Case: 284 | Input/Output: [[81.52944658080614 -39] 42.52944658080614]
Test Case: 285 | Input/Output: [[44.12985986943056 2] 46.12985986943056]
Test Case: 286 | Input/Output: [[-89.41581938526807 65] -24.415819385268065]
Test Case: 287 | Input/Output: [[27.689582729445576 -24] 3.6895827294455756]
Test Case: 288 | Input/Output: [[-33.001933238014345 -47] -80.00193323801435]
Test Case: 289 | Input/Output: [[-23.57020790191571 37] 13.429792098084292]
Test Case: 290 | Input/Output: [[-86.34857820999 36] -50.348578209989995]
Test Case: 291 | Input/Output: [[84.34853853138026 63] 147.34853853138026]
Test Case: 292 | Input/Output: [[53.126455690279215 38] 91.12645569027922]
Test Case: 293 | Input/Output: [[-44.87064899562772 -69] -113.87064899562772]
Test Case: 294 | Input/Output: [[-14.585840814055345 93] 78.41415918594465]
Test Case: 295 | Input/Output: [[78.56568057241469 -7] 71.56568057241469]
Test Case: 296 | Input/Output: [[-42.31956710126421 -92] -134.31956710126423]
Test Case: 297 | Input/Output: [[62.2383006677521 -58] 4.2383006677521]
Test Case: 298 | Input/Output: [[71.76424378297219 -25] 46.76424378297219]
Test Case: 299 | Input/Output: [[-94.02575022232162 -50] -144.02575022232162]
Test Case: 300 | Input/Output: [[-89.07880884588965 5] -84.07880884588965]
Test Case: 301 | Input/Output: [[66.08311059636307 25] 91.08311059636307]
Test Case: 302 | Input/Output: [[-86.27341606372568 -33] -119.27341606372568]
Test Case: 303 | Input/Output: [[-96.84570241798463 -75] -171.84570241798463]
Test Case: 304 | Input/Output: [[76.76721649549413 37] 113.76721649549413]
Test Case: 305 | Input/Output: [[-96.28457722104073 -73] -169.28457722104073]
Test Case: 306 | Input/Output: [[19.664911982785966 -70] -50.335088017214034]
Test Case: 307 | Input/Output: [[74.03764414136293 -9] 65.03764414136293]
Test Case: 308 | Input/Output: [[-1.1063341309187251 -26] -27.106334130918725]
Test Case: 309 | Input/Output: [[24.663399776443455 72] 96.66339977644346]
Test Case: 310 | Input/Output: [[-28.10844292376177 -15] -43.10844292376177]
Test Case: 311 | Input/Output: [[77.60582990857432 55] 132.60582990857432]
Test Case: 312 | Input/Output: [[-91.75688075656385 -16] -107.75688075656385]
Test Case: 313 | Input/Output: [[80.65366316973922 76] 156.65366316973922]
Test Case: 314 | Input/Output: [[95.40873045283766 -10] 85.40873045283766]
Test Case: 315 | Input/Output: [[44.97746715186338 6] 50.97746715186338]
Test Case: 316 | Input/Output: [[-87.08406844724972 78] -9.08406844724972]
Test Case: 317 | Input/Output: [[62.83902095574052 -99] -36.16097904425948]
Test Case: 318 | Input/Output: [[-31.29718439317253 -86] -117.29718439317253]
Test Case: 319 | Input/Output: [[-4.96673674885551 -22] -26.96673674885551]
Test Case: 320 | Input/Output: [[71.82741705032066 -55] 16.827417050320662]
Test Case: 321 | Input/Output: [[72.31941999593164 -44] 28.31941999593164]
Test Case: 322 | Input/Output: [[-65.53846212909804 -90] -155.53846212909804]
Test Case: 323 | Input/Output: [[70.30539756610398 -88] -17.694602433896023]
Test Case: 324 | Input/Output: [[42.0680618582424 -89] -46.9319381417576]
Test Case: 325 | Input/Output: [[-7.388834211318908 57] 49.61116578868109]
Test Case: 326 | Input/Output: [[-18.635124302932965 12] -6.635124302932965]
Test Case: 327 | Input/Output: [[-90.49227694294603 86] -4.4922769429460345]
Test Case: 328 | Input/Output: [[-21.785988099415036 -65] -86.78598809941504]
Test Case: 329 | Input/Output: [[68.12453884065476 84] 152.12453884065476]
Test Case: 330 | Input/Output: [[-48.76345357492637 86] 37.23654642507363]
Test Case: 331 | Input/Output: [[-97.13754411910145 3] -94.13754411910145]
Test Case: 332 | Input/Output: [[-42.268556852279616 -60] -102.26855685227962]
Test Case: 333 | Input/Output: [[27.369452933382973 38] 65.36945293338297]
Test Case: 334 | Input/Output: [[-39.63164052120316 -42] -81.63164052120317]
Test Case: 335 | Input/Output: [[-95.83523262561395 68] -27.835232625613955]
Test Case: 336 | Input/Output: [[-41.688069442822155 -39] -80.68806944282215]
Test Case: 337 | Input/Output: [[71.57012748535638 -98] -26.42987251464362]
Test Case: 338 | Input/Output: [[-90.90759836632098 -76] -166.907598366321]
Test Case: 339 | Input/Output: [[14.849648774372938 -6] 8.849648774372938]
Test Case: 340 | Input/Output: [[-94.72949447793447 -25] -119.72949447793447]
Test Case: 341 | Input/Output: [[-97.59355151508602 -89] -186.593551515086]
Test Case: 342 | Input/Output: [[-22.037306173979303 28] 5.962693826020697]
Test Case: 343 | Input/Output: [[42.64981312292812 68] 110.64981312292812]
Test Case: 344 | Input/Output: [[-33.047877446215665 -99] -132.04787744621567]
Test Case: 345 | Input/Output: [[41.93614862120336 -54] -12.063851378796642]
Test Case: 346 | Input/Output: [[-23.918937036329652 11] -12.918937036329652]
Test Case: 347 | Input/Output: [[19.98661795241101 -22] -2.0133820475889905]
Test Case: 348 | Input/Output: [[-63.99223480674125 68] 4.007765193258749]
Test Case: 349 | Input/Output: [[98.59708540839944 54] 152.59708540839944]
Test Case: 350 | Input/Output: [[-91.61173343848345 -11] -102.61173343848345]
Test Case: 351 | Input/Output: [[2.426744820220833 68] 70.42674482022083]
Test Case: 352 | Input/Output: [[73.21762022643114 49] 122.21762022643114]
Test Case: 353 | Input/Output: [[79.94109916048342 -3] 76.94109916048342]
Test Case: 354 | Input/Output: [[54.80704782302598 -28] 26.807047823025982]
Test Case: 355 | Input/Output: [[17.27782396997351 94] 111.27782396997351]
Test Case: 356 | Input/Output: [[-19.640501537680493 21] 1.3594984623195074]
Test Case: 357 | Input/Output: [[41.320979260845206 -69] -27.679020739154794]
Test Case: 358 | Input/Output: [[41.216183129625136 12] 53.216183129625136]
Test Case: 359 | Input/Output: [[30.018355749726567 -11] 19.018355749726567]
Test Case: 360 | Input/Output: [[-51.01972168649924 78] 26.98027831350076]
Test Case: 361 | Input/Output: [[-2.4447981008704858 -22] -24.444798100870486]
Test Case: 362 | Input/Output: [[6.658924147900393 -61] -54.34107585209961]
Test Case: 363 | Input/Output: [[34.71812459051904 -72] -37.28187540948096]
Test Case: 364 | Input/Output: [[63.82677471707535 -12] 51.82677471707535]
Test Case: 365 | Input/Output: [[71.92149128315725 -50] 21.921491283157252]
Test Case: 366 | Input/Output: [[-92.52345105356466 -66] -158.52345105356466]
Test Case: 367 | Input/Output: [[-61.62946309137058 25] -36.62946309137058]
Test Case: 368 | Input/Output: [[-98.9767410254929 -26] -124.9767410254929]
Test Case: 369 | Input/Output: [[-58.69715192476337 -97] -155.69715192476338]
Test Case: 370 | Input/Output: [[-60.92129563630937 30] -30.921295636309367]
Test Case: 371 | Input/Output: [[6.348995347309682 -100] -93.65100465269032]
Test Case: 372 | Input/Output: [[-78.53640771110948 -9] -87.53640771110948]
Test Case: 373 | Input/Output: [[-12.45660879692305 71] 58.54339120307695]
Test Case: 374 | Input/Output: [[1.17344812471174 77] 78.17344812471174]
Test Case: 375 | Input/Output: [[-68.4742450703739 50] -18.474245070373897]
Test Case: 376 | Input/Output: [[40.149084539118775 -4] 36.149084539118775]
Test Case: 377 | Input/Output: [[95.02418271553427 36] 131.02418271553427]
Test Case: 378 | Input/Output: [[-82.80173150017043 -87] -169.80173150017043]
Test Case: 379 | Input/Output: [[12.404976518513934 24] 36.404976518513934]
Test Case: 380 | Input/Output: [[-11.269461359092176 60] 48.730538640907824]
Test Case: 381 | Input/Output: [[79.982444101592 -91] -11.017555898408006]
Test Case: 382 | Input/Output: [[-55.73533829350659 16] -39.73533829350659]
Test Case: 383 | Input/Output: [[73.85098024551081 -29] 44.85098024551081]
Test Case: 384 | Input/Output: [[-31.056351056561866 -66] -97.05635105656187]
Test Case: 385 | Input/Output: [[14.543309893979455 -60] -45.456690106020545]
Test Case: 386 | Input/Output: [[-24.00589043049007 -67] -91.00589043049007]
Test Case: 387 | Input/Output: [[-90.38774308592492 25] -65.38774308592492]
Test Case: 388 | Input/Output: [[77.19182140153694 63] 140.19182140153694]
Test Case: 389 | Input/Output: [[2.2743849982045106 -31] -28.72561500179549]
Test Case: 390 | Input/Output: [[-6.10904363501794 -42] -48.10904363501794]
Test Case: 391 | Input/Output: [[-96.1754871894665 -78] -174.17548718946648]
Test Case: 392 | Input/Output: [[-11.536620229613149 -30] -41.53662022961315]
Test Case: 393 | Input/Output: [[54.32193907164043 69] 123.32193907164043]
Test Case: 394 | Input/Output: [[72.43352710007736 96] 168.43352710007736]
Test Case: 395 | Input/Output: [[-97.24559778539286 -72] -169.24559778539287]
Test Case: 396 | Input/Output: [[43.49848085322682 32] 75.49848085322682]
Test Case: 397 | Input/Output: [[-31.356096777936983 -21] -52.35609677793698]
Test Case: 398 | Input/Output: [[79.54115038537105 1] 80.54115038537105]
Test Case: 399 | Input/Output: [[-79.72618530838619 97] 17.273814691613808]
Test Case: 400 | Input/Output: [[-47.36941424930337 58] 10.630585750696632]
Test Case: 401 | Input/Output: [[58.32589476988463 70] 128.32589476988463]
Test Case: 402 | Input/Output: [[5.713187320691546 -32] -26.286812679308454]
Test Case: 403 | Input/Output: [[29.997649637840937 -77] -47.00235036215906]
Test Case: 404 | Input/Output: [[-49.3262027081268 17] -32.3262027081268]
Test Case: 405 | Input/Output: [[-77.23796615210803 -79] -156.23796615210802]
Test Case: 406 | Input/Output: [[42.62558725704554 6] 48.62558725704554]
Test Case: 407 | Input/Output: [[93.25260951560011 90] 183.2526095156001]
Test Case: 408 | Input/Output: [[-14.761790072235883 35] 20.238209927764117]
Test Case: 409 | Input/Output: [[-61.33673709180365 60] -1.3367370918036485]
Test Case: 410 | Input/Output: [[-18.02430134029403 -77] -95.02430134029403]
Test Case: 411 | Input/Output: [[-84.30664949312504 -19] -103.30664949312504]
Test Case: 412 | Input/Output: [[-80.55394834249911 9] -71.55394834249911]
Test Case: 413 | Input/Output: [[-15.811226296715759 -54] -69.81122629671576]
Test Case: 414 | Input/Output: [[-36.3382995762471 63] 26.661700423752897]
Test Case: 415 | Input/Output: [[-88.19527388329978 -57] -145.19527388329976]
Test Case: 416 | Input/Output: [[-0.3150791967489397 33] 32.68492080325106]
Test Case: 417 | Input/Output: [[37.925000940250555 -90] -52.074999059749445]
Test Case: 418 | Input/Output: [[-22.62726425737334 55] 32.37273574262666]
Test Case: 419 | Input/Output: [[-27.124304838656727 -96] -123.12430483865673]
Test Case: 420 | Input/Output: [[88.71812309093235 -29] 59.71812309093235]
Test Case: 421 | Input/Output: [[21.449051772607476 -98] -76.55094822739252]
Test Case: 422 | Input/Output: [[42.04399514453513 -28] 14.043995144535131]
Test Case: 423 | Input/Output: [[-28.74056652601513 -27] -55.74056652601513]
Test Case: 424 | Input/Output: [[86.86516050282552 7] 93.86516050282552]
Test Case: 425 | Input/Output: [[85.2967708776822 5] 90.2967708776822]
Test Case: 426 | Input/Output: [[8.618538070670212 17] 25.618538070670212]
Test Case: 427 | Input/Output: [[38.990900386729436 24] 62.990900386729436]
Test Case: 428 | Input/Output: [[6.153638889017827 1] 7.153638889017827]
Test Case: 429 | Input/Output: [[83.1628818568851 6] 89.1628818568851]
Test Case: 430 | Input/Output: [[-21.007528867620977 -24] -45.00752886762098]
Test Case: 431 | Input/Output: [[-11.629441491161074 -83] -94.62944149116107]
Test Case: 432 | Input/Output: [[17.162571666560808 54] 71.16257166656081]
Test Case: 433 | Input/Output: [[42.19777366099072 76] 118.19777366099072]
Test Case: 434 | Input/Output: [[-60.7292483379011 -89] -149.72924833790108]
Test Case: 435 | Input/Output: [[-6.220010376181278 -96] -102.22001037618128]
Test Case: 436 | Input/Output: [[70.3506993951525 -73] -2.6493006048474967]
Test Case: 437 | Input/Output: [[-68.99994202770364 23] -45.99994202770364]
Test Case: 438 | Input/Output: [[85.536787668437 -4] 81.536787668437]
Test Case: 439 | Input/Output: [[-91.23928909060359 19] -72.23928909060359]
Test Case: 440 | Input/Output: [[-17.703997495178953 -56] -73.70399749517895]
Test Case: 441 | Input/Output: [[-54.00480100044829 68] 13.995198999551711]
Test Case: 442 | Input/Output: [[-76.99431992168081 19] -57.99431992168081]
Test Case: 443 | Input/Output: [[-52.551411373527145 -21] -73.55141137352715]
Test Case: 444 | Input/Output: [[-85.09973184624806 93] 7.900268153751938]
Test Case: 445 | Input/Output: [[5.379358550078692 -62] -56.62064144992131]
Test Case: 446 | Input/Output: [[42.61604402401278 -68] -25.38395597598722]
Test Case: 447 | Input/Output: [[-37.6211662783198 32] -5.621166278319798]
Test Case: 448 | Input/Output: [[-21.855259464846412 -52] -73.85525946484641]
Test Case: 449 | Input/Output: [[0.12442394563272785 93] 93.12442394563273]
Test Case: 450 | Input/Output: [[-46.35715354881646 -80] -126.35715354881646]
Test Case: 451 | Input/Output: [[83.15787809658349 -32] 51.15787809658349]
Test Case: 452 | Input/Output: [[-17.767882713167054 43] 25.232117286832946]
Test Case: 453 | Input/Output: [[5.034909851991756 28] 33.034909851991756]
Test Case: 454 | Input/Output: [[8.941103368480753 87] 95.94110336848075]
Test Case: 455 | Input/Output: [[26.954782529230442 -38] -11.045217470769558]
Test Case: 456 | Input/Output: [[-48.8386925111443 -58] -106.8386925111443]
Test Case: 457 | Input/Output: [[34.091252383277435 45] 79.09125238327744]
Test Case: 458 | Input/Output: [[-51.900587705759094 -60] -111.9005877057591]
Test Case: 459 | Input/Output: [[-35.05297366449432 25] -10.052973664494317]
Test Case: 460 | Input/Output: [[-71.98515856105779 -26] -97.98515856105779]
Test Case: 461 | Input/Output: [[-63.909878007842245 12] -51.909878007842245]
Test Case: 462 | Input/Output: [[-80.85217338134083 -49] -129.85217338134083]
Test Case: 463 | Input/Output: [[84.2824489694463 -67] 17.282448969446307]
Test Case: 464 | Input/Output: [[-36.37422707527011 -23] -59.37422707527011]
Test Case: 465 | Input/Output: [[80.71046130634707 -20] 60.71046130634707]
Test Case: 466 | Input/Output: [[-44.87294397138892 -43] -87.87294397138892]
Test Case: 467 | Input/Output: [[-76.87305040440253 -97] -173.87305040440253]
Test Case: 468 | Input/Output: [[7.640502543911552 -38] -30.359497456088448]
Test Case: 469 | Input/Output: [[-32.20729579533821 -83] -115.20729579533821]
Test Case: 470 | Input/Output: [[-66.45162230873555 26] -40.45162230873555]
Test Case: 471 | Input/Output: [[-25.331925014354468 26] 0.6680749856455321]
Test Case: 472 | Input/Output: [[96.43169244593108 -50] 46.43169244593108]
Test Case: 473 | Input/Output: [[47.95638912590911 56] 103.95638912590911]
Test Case: 474 | Input/Output: [[3.4402252885674613 -3] 0.44022528856746135]
Test Case: 475 | Input/Output: [[82.51504715230672 -37] 45.51504715230672]
Test Case: 476 | Input/Output: [[94.33706069953107 -16] 78.33706069953107]
Test Case: 477 | Input/Output: [[-84.47673282858463 -20] -104.47673282858463]
Test Case: 478 | Input/Output: [[-25.810399694481916 -81] -106.81039969448192]
Test Case: 479 | Input/Output: [[-12.169706927804754 -60] -72.16970692780475]
Test Case: 480 | Input/Output: [[-82.05389306954436 56] -26.05389306954436]
Test Case: 481 | Input/Output: [[2.0657973296385137 11] 13.065797329638514]
Test Case: 482 | Input/Output: [[47.10247291457887 -63] -15.897527085421132]
Test Case: 483 | Input/Output: [[-29.815071362732226 33] 3.184928637267774]
Test Case: 484 | Input/Output: [[-63.334252737880384 45] -18.334252737880384]
Test Case: 485 | Input/Output: [[3.550647302497282 -52] -48.44935269750272]
Test Case: 486 | Input/Output: [[40.61785822758759 75] 115.61785822758759]
Test Case: 487 | Input/Output: [[-18.693543460370577 60] 41.30645653962942]
Test Case: 488 | Input/Output: [[61.82295874287172 -77] -15.17704125712828]
Test Case: 489 | Input/Output: [[-96.43632382227831 -56] -152.43632382227833]
Test Case: 490 | Input/Output: [[31.53604079494258 47] 78.53604079494258]
Test Case: 491 | Input/Output: [[34.614525127347235 -63] -28.385474872652765]
Test Case: 492 | Input/Output: [[-9.42261260190243 16] 6.577387398097571]
Test Case: 493 | Input/Output: [[76.93646164452946 -44] 32.93646164452946]
Test Case: 494 | Input/Output: [[37.44578261430996 0] 37.44578261430996]
Test Case: 495 | Input/Output: [[66.54345219490159 -54] 12.54345219490159]
Test Case: 496 | Input/Output: [[77.76274499830706 42] 119.76274499830706]
Test Case: 497 | Input/Output: [[-38.4225683157521 2] -36.4225683157521]
Test Case: 498 | Input/Output: [[95.7043703185746 -8] 87.7043703185746]
Test Case: 499 | Input/Output: [[-18.582016594232414 -98] -116.58201659423241]
Test Case: 500 | Input/Output: [[3.8738857152091413 99] 102.87388571520914]
Test Case: 501 | Input/Output: [[-95.21532919422204 61] -34.215329194222036]
Test Case: 502 | Input/Output: [[4.649945324524495 36] 40.649945324524495]
Test Case: 503 | Input/Output: [[-13.907937763766427 43] 29.092062236233573]
Test Case: 504 | Input/Output: [[63.348413751822875 -54] 9.348413751822875]
Test Case: 505 | Input/Output: [[-14.821103156082984 94] 79.17889684391702]
Test Case: 506 | Input/Output: [[91.10193408175786 73] 164.10193408175786]
Test Case: 507 | Input/Output: [[-38.9567889006375 98] 59.0432110993625]
Test Case: 508 | Input/Output: [[22.993836580219735 -22] 0.9938365802197353]
Test Case: 509 | Input/Output: [[53.74336855321417 76] 129.74336855321417]
Test Case: 510 | Input/Output: [[-5.136955756003502 62] 56.8630442439965]
Test Case: 511 | Input/Output: [[17.402354680557778 81] 98.40235468055778]
Test Case: 512 | Input/Output: [[-15.572492808548063 41] 25.427507191451937]
Test Case: 513 | Input/Output: [[-66.03635999223198 40] -26.03635999223198]
Test Case: 514 | Input/Output: [[20.20442878789106 -84] -63.79557121210894]
Test Case: 515 | Input/Output: [[73.80751405153018 100] 173.80751405153018]
Test Case: 516 | Input/Output: [[66.70511485629729 -79] -12.294885143702714]
Test Case: 517 | Input/Output: [[-99.0113791332714 -45] -144.01137913327142]
Test Case: 518 | Input/Output: [[57.5953454842205 -33] 24.595345484220502]
Test Case: 519 | Input/Output: [[-98.58844389629371 78] -20.58844389629371]
Test Case: 520 | Input/Output: [[-89.89121689211679 17] -72.89121689211679]
Test Case: 521 | Input/Output: [[-42.61591061851115 60] 17.38408938148885]
Test Case: 522 | Input/Output: [[-52.20187185122707 -86] -138.20187185122705]
Test Case: 523 | Input/Output: [[49.48727152635635 63] 112.48727152635635]
Test Case: 524 | Input/Output: [[4.66007233530317 -92] -87.33992766469683]
Test Case: 525 | Input/Output: [[-9.508633769287528 -90] -99.50863376928753]
Test Case: 526 | Input/Output: [[-2.973650695538055 -90] -92.97365069553805]
Test Case: 527 | Input/Output: [[51.73929045299167 99] 150.73929045299167]
Test Case: 528 | Input/Output: [[-79.69011183110865 18] -61.69011183110865]
Test Case: 529 | Input/Output: [[7.152838714045501 -20] -12.847161285954499]
Test Case: 530 | Input/Output: [[-16.650708410200465 -3] -19.650708410200465]
Test Case: 531 | Input/Output: [[60.068852894939994 -6] 54.068852894939994]
Test Case: 532 | Input/Output: [[-88.64322904719648 -89] -177.64322904719648]
Test Case: 533 | Input/Output: [[69.62821987683606 -16] 53.628219876836056]
Test Case: 534 | Input/Output: [[-3.619050864126578 -62] -65.61905086412658]
Test Case: 535 | Input/Output: [[-41.52194760574035 -89] -130.52194760574037]
Test Case: 536 | Input/Output: [[-4.819752172825801 63] 58.1802478271742]
Test Case: 537 | Input/Output: [[-46.885197725617054 98] 51.114802274382946]
Test Case: 538 | Input/Output: [[-8.100277732676162 -38] -46.10027773267616]
Test Case: 539 | Input/Output: [[-77.58243560648515 -49] -126.58243560648515]
Test Case: 540 | Input/Output: [[-97.6482631868069 -84] -181.6482631868069]
Test Case: 541 | Input/Output: [[26.405072841629206 -28] -1.594927158370794]
Test Case: 542 | Input/Output: [[-56.40273802692606 35] -21.40273802692606]
Test Case: 543 | Input/Output: [[-20.464639665692744 43] 22.535360334307256]
Test Case: 544 | Input/Output: [[-75.65287827500697 -27] -102.65287827500697]
Test Case: 545 | Input/Output: [[-75.10112452029192 54] -21.10112452029192]
Test Case: 546 | Input/Output: [[8.472389276354335 64] 72.47238927635433]
Test Case: 547 | Input/Output: [[64.71821752525722 -39] 25.718217525257216]
Test Case: 548 | Input/Output: [[-27.228736972360295 -64] -91.2287369723603]
Test Case: 549 | Input/Output: [[-50.937617515327105 -41] -91.9376175153271]
Test Case: 550 | Input/Output: [[-83.84831025460286 -15] -98.84831025460286]
Test Case: 551 | Input/Output: [[61.71412352461178 87] 148.71412352461178]
Test Case: 552 | Input/Output: [[8.32192325192149 83] 91.32192325192149]
Test Case: 553 | Input/Output: [[21.177335336849595 59] 80.1773353368496]
Test Case: 554 | Input/Output: [[87.47802623134478 -61] 26.478026231344785]
Test Case: 555 | Input/Output: [[55.92498898799403 3] 58.92498898799403]
Test Case: 556 | Input/Output: [[22.409120157710106 1] 23.409120157710106]
Test Case: 557 | Input/Output: [[-20.714393011459848 100] 79.28560698854015]
Test Case: 558 | Input/Output: [[97.13149828900634 -37] 60.131498289006345]
Test Case: 559 | Input/Output: [[69.33406702251841 92] 161.3340670225184]
Test Case: 560 | Input/Output: [[84.84356815522983 99] 183.84356815522983]
Test Case: 561 | Input/Output: [[-28.198013683591185 -28] -56.198013683591185]
Test Case: 562 | Input/Output: [[-47.97941592774737 -73] -120.97941592774737]
Test Case: 563 | Input/Output: [[-75.04645881124519 37] -38.04645881124519]
Test Case: 564 | Input/Output: [[-33.35112857245488 -24] -57.35112857245488]
Test Case: 565 | Input/Output: [[64.91000866643884 -68] -3.0899913335611586]
Test Case: 566 | Input/Output: [[-31.263481664974677 9] -22.263481664974677]
Test Case: 567 | Input/Output: [[-65.37149901324268 -53] -118.37149901324268]
Test Case: 568 | Input/Output: [[85.7928089608273 -96] -10.207191039172699]
Test Case: 569 | Input/Output: [[40.28179237812776 -99] -58.71820762187224]
Test Case: 570 | Input/Output: [[-33.0132046798459 -93] -126.0132046798459]
Test Case: 571 | Input/Output: [[1.5328048976118964 -60] -58.467195102388104]
Test Case: 572 | Input/Output: [[54.72268512916875 -28] 26.722685129168752]
Test Case: 573 | Input/Output: [[-10.196990249835608 -78] -88.19699024983561]
Test Case: 574 | Input/Output: [[86.26137017615272 -40] 46.261370176152724]
Test Case: 575 | Input/Output: [[98.11867209123116 48] 146.11867209123116]
Test Case: 576 | Input/Output: [[81.95735877508605 68] 149.95735877508605]
Test Case: 577 | Input/Output: [[-44.595875119602965 -79] -123.59587511960297]
Test Case: 578 | Input/Output: [[68.65383324998524 58] 126.65383324998524]
Test Case: 579 | Input/Output: [[0.43381410859693403 51] 51.433814108596934]
Test Case: 580 | Input/Output: [[8.393861596341637 -61] -52.60613840365836]
Test Case: 581 | Input/Output: [[-4.8376751988792535 -24] -28.837675198879253]
Test Case: 582 | Input/Output: [[12.455489162888924 94] 106.45548916288892]
Test Case: 583 | Input/Output: [[57.328263429380854 -96] -38.671736570619146]
Test Case: 584 | Input/Output: [[-24.288540689526002 87] 62.711459310474]
Test Case: 585 | Input/Output: [[-73.11776682754136 -86] -159.11776682754135]
Test Case: 586 | Input/Output: [[-83.48612784380376 2] -81.48612784380376]
Test Case: 587 | Input/Output: [[-99.9841709981662 30] -69.9841709981662]
Test Case: 588 | Input/Output: [[8.78390220644907 58] 66.78390220644907]
Test Case: 589 | Input/Output: [[55.37120976929546 18] 73.37120976929546]
Test Case: 590 | Input/Output: [[-20.626286553584066 -50] -70.62628655358407]
Test Case: 591 | Input/Output: [[-17.600675214935578 -40] -57.60067521493558]
Test Case: 592 | Input/Output: [[42.07861267638731 -48] -5.9213873236126915]
Test Case: 593 | Input/Output: [[46.77800052946509 -57] -10.22199947053491]
Test Case: 594 | Input/Output: [[70.38970769789316 3] 73.38970769789316]
Test Case: 595 | Input/Output: [[-75.75327141570199 6] -69.75327141570199]
Test Case: 596 | Input/Output: [[-5.119322325468474 90] 84.88067767453153]
Test Case: 597 | Input/Output: [[-66.3510087798121 40] -26.351008779812105]
Test Case: 598 | Input/Output: [[63.98878195293227 -23] 40.98878195293227]
Test Case: 599 | Input/Output: [[-94.95354500365023 14] -80.95354500365023]
Test Case: 600 | Input/Output: [[11.96553356898579 32] 43.96553356898579]
Test Case: 601 | Input/Output: [[-35.61588757825287 -81] -116.61588757825287]
Test Case: 602 | Input/Output: [[-87.11710907805754 11] -76.11710907805754]
Test Case: 603 | Input/Output: [[11.76811990322551 -87] -75.23188009677449]
Test Case: 604 | Input/Output: [[-45.40085751681184 40] -5.40085751681184]
Test Case: 605 | Input/Output: [[-95.00817452024484 -61] -156.00817452024484]
Test Case: 606 | Input/Output: [[-40.97649006803816 63] 22.02350993196184]
Test Case: 607 | Input/Output: [[84.15460859370415 94] 178.15460859370415]
Test Case: 608 | Input/Output: [[9.657432096721479 4] 13.657432096721479]
Test Case: 609 | Input/Output: [[-4.032915744689973 99] 94.96708425531003]
Test Case: 610 | Input/Output: [[-52.27069212671827 55] 2.7293078732817335]
Test Case: 611 | Input/Output: [[7.754120415426911 71] 78.75412041542691]
Test Case: 612 | Input/Output: [[-43.314829469031224 -41] -84.31482946903122]
Test Case: 613 | Input/Output: [[-75.61161410896824 -4] -79.61161410896824]
Test Case: 614 | Input/Output: [[5.801493867526801 -71] -65.1985061324732]
Test Case: 615 | Input/Output: [[75.2129250705955 50] 125.2129250705955]
Test Case: 616 | Input/Output: [[-63.50519537213559 20] -43.50519537213559]
Test Case: 617 | Input/Output: [[32.35474247061799 -79] -46.64525752938201]
Test Case: 618 | Input/Output: [[30.708966561854226 -43] -12.291033438145774]
Test Case: 619 | Input/Output: [[81.7041425999958 98] 179.7041425999958]
Test Case: 620 | Input/Output: [[93.52586755030492 -50] 43.52586755030492]
Test Case: 621 | Input/Output: [[-0.16217926452610243 -42] -42.1621792645261]
Test Case: 622 | Input/Output: [[-59.48206709639361 98] 38.51793290360639]
Test Case: 623 | Input/Output: [[-90.5975647307894 69] -21.5975647307894]
Test Case: 624 | Input/Output: [[7.463089268473439 -48] -40.53691073152656]
Test Case: 625 | Input/Output: [[60.239839889708264 27] 87.23983988970826]
Test Case: 626 | Input/Output: [[15.811156238678919 -96] -80.18884376132108]
Test Case: 627 | Input/Output: [[98.84495763973158 75] 173.84495763973158]
Test Case: 628 | Input/Output: [[-60.064022373758405 -48] -108.0640223737584]
Test Case: 629 | Input/Output: [[-92.54643556677465 56] -36.54643556677465]
Test Case: 630 | Input/Output: [[-9.414600206382545 -41] -50.414600206382545]
Test Case: 631 | Input/Output: [[18.20777948673708 -42] -23.79222051326292]
Test Case: 632 | Input/Output: [[41.0639446071616 82] 123.0639446071616]
Test Case: 633 | Input/Output: [[47.65175747170588 -27] 20.651757471705878]
Test Case: 634 | Input/Output: [[-55.56745599033333 -42] -97.56745599033333]
Test Case: 635 | Input/Output: [[32.04017471927722 -63] -30.959825280722782]
Test Case: 636 | Input/Output: [[-2.1264534436291456 16] 13.873546556370854]
Test Case: 637 | Input/Output: [[-23.256835171780324 33] 9.743164828219676]
Test Case: 638 | Input/Output: [[18.689990478081768 26] 44.68999047808177]
Test Case: 639 | Input/Output: [[83.5220492748148 -63] 20.522049274814805]
Test Case: 640 | Input/Output: [[-20.288627276233882 -87] -107.28862727623388]
Test Case: 641 | Input/Output: [[92.93075201617 -14] 78.93075201617]
Test Case: 642 | Input/Output: [[40.10261183507404 29] 69.10261183507404]
Test Case: 643 | Input/Output: [[24.490762461776214 -48] -23.509237538223786]
Test Case: 644 | Input/Output: [[67.41290286504179 -37] 30.412902865041787]
Test Case: 645 | Input/Output: [[97.86345039528501 -30] 67.86345039528501]
Test Case: 646 | Input/Output: [[-37.99232431699649 -11] -48.99232431699649]
Test Case: 647 | Input/Output: [[62.057825352760545 25] 87.05782535276055]
Test Case: 648 | Input/Output: [[-2.6850047179080434 -18] -20.685004717908043]
Test Case: 649 | Input/Output: [[83.80056984597493 -7] 76.80056984597493]
Test Case: 650 | Input/Output: [[-31.153477416348153 61] 29.846522583651847]
Test Case: 651 | Input/Output: [[93.61518735287154 100] 193.61518735287154]
Test Case: 652 | Input/Output: [[70.74452096053923 43] 113.74452096053923]
Test Case: 653 | Input/Output: [[49.77348211810357 19] 68.77348211810357]
Test Case: 654 | Input/Output: [[26.31938965570326 -85] -58.68061034429674]
Test Case: 655 | Input/Output: [[96.10812038553976 -1] 95.10812038553976]
Test Case: 656 | Input/Output: [[-58.92921245745646 98] 39.07078754254354]
Test Case: 657 | Input/Output: [[16.7386204491619 17] 33.7386204491619]
Test Case: 658 | Input/Output: [[-38.34745994293798 25] -13.34745994293798]
Test Case: 659 | Input/Output: [[67.45137205193188 26] 93.45137205193188]
Test Case: 660 | Input/Output: [[63.89810785944053 -67] -3.101892140559471]
Test Case: 661 | Input/Output: [[23.77070953309301 -79] -55.22929046690699]
Test Case: 662 | Input/Output: [[-40.10173409672579 -5] -45.10173409672579]
Test Case: 663 | Input/Output: [[57.31018929941354 -68] -10.689810700586463]
Test Case: 664 | Input/Output: [[68.72786360776561 67] 135.7278636077656]
Test Case: 665 | Input/Output: [[-53.67500660646773 -61] -114.67500660646773]
Test Case: 666 | Input/Output: [[1.756950673000432 -48] -46.24304932699957]
Test Case: 667 | Input/Output: [[-2.5903091490679486 -100] -102.59030914906795]
Test Case: 668 | Input/Output: [[-97.59249821436728 80] -17.592498214367282]
Test Case: 669 | Input/Output: [[-31.79784935132963 35] 3.2021506486703686]
Test Case: 670 | Input/Output: [[68.15414911467056 5] 73.15414911467056]
Test Case: 671 | Input/Output: [[-96.62759582765695 35] -61.62759582765695]
Test Case: 672 | Input/Output: [[55.28530256580382 98] 153.28530256580382]
Test Case: 673 | Input/Output: [[65.63498235819964 -46] 19.634982358199636]
Test Case: 674 | Input/Output: [[-11.86143060576461 -56] -67.86143060576461]
Test Case: 675 | Input/Output: [[-84.16506734807443 90] 5.83493265192557]
Test Case: 676 | Input/Output: [[82.33881059059246 -84] -1.661189409407541]
Test Case: 677 | Input/Output: [[38.94991944272425 17] 55.94991944272425]
Test Case: 678 | Input/Output: [[-21.96454042685548 -70] -91.96454042685548]
Test Case: 679 | Input/Output: [[-30.83850302816529 56] 25.16149697183471]
Test Case: 680 | Input/Output: [[-46.40177828220986 5] -41.40177828220986]
Test Case: 681 | Input/Output: [[-12.263639220254689 -52] -64.26363922025469]
Test Case: 682 | Input/Output: [[58.92043539868524 -12] 46.92043539868524]
Test Case: 683 | Input/Output: [[-12.006223678645213 -13] -25.006223678645213]
Test Case: 684 | Input/Output: [[-86.38638416579272 74] -12.38638416579272]
Test Case: 685 | Input/Output: [[70.63925898791089 -34] 36.63925898791089]
Test Case: 686 | Input/Output: [[-59.759361821838766 49] -10.759361821838766]
Test Case: 687 | Input/Output: [[95.9234690015846 54] 149.9234690015846]
Test Case: 688 | Input/Output: [[78.15458221954245 63] 141.15458221954245]
Test Case: 689 | Input/Output: [[9.288234746854044 40] 49.288234746854044]
Test Case: 690 | Input/Output: [[-40.281411055276386 -83] -123.28141105527638]
Test Case: 691 | Input/Output: [[59.02336201496959 -36] 23.023362014969592]
Test Case: 692 | Input/Output: [[-74.82056338151153 -92] -166.82056338151153]
Test Case: 693 | Input/Output: [[-75.71347461986468 -18] -93.71347461986468]
Test Case: 694 | Input/Output: [[25.0283885088525 65] 90.0283885088525]
Test Case: 695 | Input/Output: [[3.487843861141897 -38] -34.5121561388581]
Test Case: 696 | Input/Output: [[89.74880284333338 -77] 12.74880284333338]
Test Case: 697 | Input/Output: [[43.16821232139333 45] 88.16821232139333]
Test Case: 698 | Input/Output: [[-85.40099775351516 21] -64.40099775351516]
Test Case: 699 | Input/Output: [[-9.360485094246869 11] 1.6395149057531313]
Test Case: 700 | Input/Output: [[2.6662743156333164 17] 19.666274315633316]
Test Case: 701 | Input/Output: [[34.58411360822922 -87] -52.41588639177078]
Test Case: 702 | Input/Output: [[30.378873162729064 -72] -41.621126837270936]
Test Case: 703 | Input/Output: [[-75.1343148741973 95] 19.8656851258027]
Test Case: 704 | Input/Output: [[-96.1485513940807 -52] -148.1485513940807]
Test Case: 705 | Input/Output: [[-64.4671805083554 -7] -71.4671805083554]
Test Case: 706 | Input/Output: [[63.33618113606323 99] 162.33618113606323]
Test Case: 707 | Input/Output: [[-82.53483689830021 -58] -140.53483689830023]
Test Case: 708 | Input/Output: [[-45.150807886541934 -2] -47.150807886541934]
Test Case: 709 | Input/Output: [[83.53617967981805 70] 153.53617967981805]
Test Case: 710 | Input/Output: [[-49.04576073366063 54] 4.954239266339371]
Test Case: 711 | Input/Output: [[-30.506915237084257 71] 40.49308476291574]
Test Case: 712 | Input/Output: [[84.76898392921183 -68] 16.768983929211828]
Test Case: 713 | Input/Output: [[91.60282279770283 -82] 9.602822797702828]
Test Case: 714 | Input/Output: [[42.12093498924244 67] 109.12093498924244]
Test Case: 715 | Input/Output: [[81.83389329413444 58] 139.83389329413444]
Test Case: 716 | Input/Output: [[-1.4783027153432187 13] 11.521697284656781]
Test Case: 717 | Input/Output: [[97.36286395695157 -19] 78.36286395695157]
Test Case: 718 | Input/Output: [[-4.167673865989812 -61] -65.16767386598981]
Test Case: 719 | Input/Output: [[-61.74876395925752 4] -57.74876395925752]
Test Case: 720 | Input/Output: [[48.51171155786008 -67] -18.48828844213992]
Test Case: 721 | Input/Output: [[-13.067740129608467 -48] -61.06774012960847]
Test Case: 722 | Input/Output: [[-32.770418394416566 91] 58.229581605583434]
Test Case: 723 | Input/Output: [[99.31366133624223 6] 105.31366133624223]
Test Case: 724 | Input/Output: [[79.27465688789704 33] 112.27465688789704]
Test Case: 725 | Input/Output: [[-58.43518487129282 -92] -150.43518487129282]
Test Case: 726 | Input/Output: [[40.99351358863444 24] 64.99351358863444]
Test Case: 727 | Input/Output: [[-83.5662626295073 -42] -125.5662626295073]
Test Case: 728 | Input/Output: [[51.22336233779271 -26] 25.223362337792707]
Test Case: 729 | Input/Output: [[17.594895237090384 80] 97.59489523709038]
Test Case: 730 | Input/Output: [[-39.2782626368301 -44] -83.2782626368301]
Test Case: 731 | Input/Output: [[90.86412852246454 -62] 28.86412852246454]
Test Case: 732 | Input/Output: [[-47.951948065687475 68] 20.048051934312525]
Test Case: 733 | Input/Output: [[-4.517530070111505 40] 35.482469929888495]
Test Case: 734 | Input/Output: [[3.258524462202587 -47] -43.74147553779741]
Test Case: 735 | Input/Output: [[-11.781507345840865 -88] -99.78150734584086]
Test Case: 736 | Input/Output: [[83.14575347022733 13] 96.14575347022733]
Test Case: 737 | Input/Output: [[81.07969603357972 95] 176.07969603357972]
Test Case: 738 | Input/Output: [[37.22462325855045 2] 39.22462325855045]
Test Case: 739 | Input/Output: [[-85.60376379154802 -26] -111.60376379154802]
Test Case: 740 | Input/Output: [[-77.58063784452966 20] -57.58063784452966]
Test Case: 741 | Input/Output: [[3.773593728541073 37] 40.77359372854107]
Test Case: 742 | Input/Output: [[-57.091007727561106 18] -39.091007727561106]
Test Case: 743 | Input/Output: [[9.866807882019543 48] 57.86680788201954]
Test Case: 744 | Input/Output: [[4.767093143528342 89] 93.76709314352834]
Test Case: 745 | Input/Output: [[95.94905253793559 -43] 52.949052537935586]
Test Case: 746 | Input/Output: [[-42.26424705268879 43] 0.7357529473112123]
Test Case: 747 | Input/Output: [[-42.21330493368922 -64] -106.21330493368922]
Test Case: 748 | Input/Output: [[-23.9369908387431 -12] -35.9369908387431]
Test Case: 749 | Input/Output: [[-72.76306712770705 -71] -143.76306712770705]
Test Case: 750 | Input/Output: [[-40.262367418659785 -47] -87.26236741865978]
Test Case: 751 | Input/Output: [[4.556145942747662 58] 62.55614594274766]
Test Case: 752 | Input/Output: [[48.23412092468669 94] 142.2341209246867]
Test Case: 753 | Input/Output: [[-61.68660717862691 -22] -83.6866071786269]
Test Case: 754 | Input/Output: [[57.67800440401126 78] 135.67800440401126]
Test Case: 755 | Input/Output: [[-30.087115850331543 49] 18.912884149668457]
Test Case: 756 | Input/Output: [[40.959091167360896 6] 46.959091167360896]
Test Case: 757 | Input/Output: [[-75.73544005068906 74] -1.7354400506890642]
Test Case: 758 | Input/Output: [[19.889248710044185 -92] -72.11075128995581]
Test Case: 759 | Input/Output: [[-14.657932584606044 -68] -82.65793258460604]
Test Case: 760 | Input/Output: [[-34.65530994146077 -94] -128.65530994146076]
Test Case: 761 | Input/Output: [[30.22701830376434 -43] -12.77298169623566]
Test Case: 762 | Input/Output: [[-38.29317119054802 36] -2.2931711905480228]
Test Case: 763 | Input/Output: [[-54.47979986205538 83] 28.52020013794462]
Test Case: 764 | Input/Output: [[24.85302920151375 78] 102.85302920151375]
Test Case: 765 | Input/Output: [[78.84621244963367 -74] 4.8462124496336685]
Test Case: 766 | Input/Output: [[-1.9983398368378573 -87] -88.99833983683786]
Test Case: 767 | Input/Output: [[-14.621721631775912 -2] -16.621721631775912]
Test Case: 768 | Input/Output: [[4.608140610795459 -11] -6.391859389204541]
Test Case: 769 | Input/Output: [[54.82409200304397 65] 119.82409200304397]
Test Case: 770 | Input/Output: [[52.11468617745382 -51] 1.1146861774538195]
Test Case: 771 | Input/Output: [[-28.577433820375518 -45] -73.57743382037552]
Test Case: 772 | Input/Output: [[98.87947866060384 20] 118.87947866060384]
Test Case: 773 | Input/Output: [[35.78786444442872 -51] -15.21213555557128]
Test Case: 774 | Input/Output: [[-23.47836445029769 62] 38.52163554970231]
Test Case: 775 | Input/Output: [[-69.9095368575403 84] 14.090463142459697]
Test Case: 776 | Input/Output: [[-38.97652208612548 -68] -106.97652208612547]
Test Case: 777 | Input/Output: [[14.597047466835562 91] 105.59704746683556]
Test Case: 778 | Input/Output: [[61.2876385572462 -98] -36.7123614427538]
Test Case: 779 | Input/Output: [[53.770321265592514 -15] 38.770321265592514]
Test Case: 780 | Input/Output: [[48.34198862597759 87] 135.3419886259776]
Test Case: 781 | Input/Output: [[-57.309041756613844 5] -52.309041756613844]
Test Case: 782 | Input/Output: [[-99.60085643396485 -70] -169.60085643396485]
Test Case: 783 | Input/Output: [[99.3510502306026 -43] 56.351050230602596]
Test Case: 784 | Input/Output: [[-47.740204695803065 50] 2.2597953041969348]
Test Case: 785 | Input/Output: [[-12.721690020012105 -77] -89.7216900200121]
Test Case: 786 | Input/Output: [[-95.33537981751667 10] -85.33537981751667]
Test Case: 787 | Input/Output: [[-57.61706060308833 49] -8.617060603088333]
Test Case: 788 | Input/Output: [[36.968747941700144 11] 47.968747941700144]
Test Case: 789 | Input/Output: [[-99.66105583163423 -62] -161.66105583163423]
Test Case: 790 | Input/Output: [[57.42773210960982 30] 87.42773210960982]
Test Case: 791 | Input/Output: [[32.32869805503026 -74] -41.67130194496974]
Test Case: 792 | Input/Output: [[52.184550239906855 29] 81.18455023990686]
Test Case: 793 | Input/Output: [[-58.69952123727569 70] 11.30047876272431]
Test Case: 794 | Input/Output: [[-2.5371994706146097 -69] -71.53719947061461]
Test Case: 795 | Input/Output: [[56.998361422164635 0] 56.998361422164635]
Test Case: 796 | Input/Output: [[56.61776509804801 -60] -3.382234901951989]
Test Case: 797 | Input/Output: [[66.93609010369235 12] 78.93609010369235]
Test Case: 798 | Input/Output: [[49.18345621022709 19] 68.18345621022709]
Test Case: 799 | Input/Output: [[56.273367897961236 96] 152.27336789796124]
Test Case: 800 | Input/Output: [[89.96989819145597 -19] 70.96989819145597]
Test Case: 801 | Input/Output: [[15.481098799226118 -94] -78.51890120077388]
Test Case: 802 | Input/Output: [[76.93702640069881 -51] 25.937026400698812]
Test Case: 803 | Input/Output: [[-35.62585193874959 56] 20.37414806125041]
Test Case: 804 | Input/Output: [[-14.115731476603969 33] 18.88426852339603]
Test Case: 805 | Input/Output: [[89.67782258634045 75] 164.67782258634045]
Test Case: 806 | Input/Output: [[-89.83280763070816 19] -70.83280763070816]
Test Case: 807 | Input/Output: [[29.61925156388773 -25] 4.61925156388773]
Test Case: 808 | Input/Output: [[6.929657376752914 -58] -51.070342623247086]
Test Case: 809 | Input/Output: [[74.89074218046005 -47] 27.89074218046005]
Test Case: 810 | Input/Output: [[4.437627628866082 97] 101.43762762886608]
Test Case: 811 | Input/Output: [[-97.56183754258822 67] -30.561837542588222]
Test Case: 812 | Input/Output: [[21.359786573240342 71] 92.35978657324034]
Test Case: 813 | Input/Output: [[-28.741409448321974 -53] -81.74140944832197]
Test Case: 814 | Input/Output: [[86.01492241471053 70] 156.01492241471053]
Test Case: 815 | Input/Output: [[48.52508576625786 -1] 47.52508576625786]
Test Case: 816 | Input/Output: [[-72.28880718293513 69] -3.2888071829351304]
Test Case: 817 | Input/Output: [[27.982185324097017 -88] -60.01781467590298]
Test Case: 818 | Input/Output: [[-17.38930351178267 83] 65.61069648821733]
Test Case: 819 | Input/Output: [[-52.92293289384982 8] -44.92293289384982]
Test Case: 820 | Input/Output: [[40.60425929646635 -57] -16.395740703533647]
Test Case: 821 | Input/Output: [[-5.008349661730051 39] 33.99165033826995]
Test Case: 822 | Input/Output: [[44.152006764675235 81] 125.15200676467524]
Test Case: 823 | Input/Output: [[48.24386375522408 -30] 18.243863755224083]
Test Case: 824 | Input/Output: [[17.75820529463803 86] 103.75820529463803]
Test Case: 825 | Input/Output: [[29.908335490807048 41] 70.90833549080705]
Test Case: 826 | Input/Output: [[6.060040679238 15] 21.060040679238]
Test Case: 827 | Input/Output: [[-40.825148269313736 99] 58.174851730686264]
Test Case: 828 | Input/Output: [[6.947949735695232 10] 16.947949735695232]
Test Case: 829 | Input/Output: [[88.09267639042517 71] 159.09267639042517]
Test Case: 830 | Input/Output: [[46.77877312100861 18] 64.77877312100861]
Test Case: 831 | Input/Output: [[43.10250083384008 91] 134.10250083384008]
Test Case: 832 | Input/Output: [[-78.3559105021618 -94] -172.3559105021618]
Test Case: 833 | Input/Output: [[-68.6778322692833 -74] -142.6778322692833]
Test Case: 834 | Input/Output: [[-75.17078165697126 28] -47.17078165697126]
Test Case: 835 | Input/Output: [[14.925291764247376 -6] 8.925291764247376]
Test Case: 836 | Input/Output: [[-90.58414277077947 -28] -118.58414277077947]
Test Case: 837 | Input/Output: [[0.026077854018154767 -24] -23.973922145981845]
Test Case: 838 | Input/Output: [[-25.220817952747026 -71] -96.22081795274703]
Test Case: 839 | Input/Output: [[71.40108812979281 -50] 21.40108812979281]
Test Case: 840 | Input/Output: [[46.94334303198849 -47] -0.056656968011509434]
Test Case: 841 | Input/Output: [[61.97275690821829 58] 119.97275690821829]
Test Case: 842 | Input/Output: [[4.529180590266833 -50] -45.47081940973317]
Test Case: 843 | Input/Output: [[1.9226508665039006 15] 16.9226508665039]
Test Case: 844 | Input/Output: [[11.897474007809762 5] 16.897474007809762]
Test Case: 845 | Input/Output: [[1.4474970226463881 0] 1.4474970226463881]
Test Case: 846 | Input/Output: [[2.6192192222200816 -53] -50.38078077777992]
Test Case: 847 | Input/Output: [[-68.92063761443967 -25] -93.92063761443967]
Test Case: 848 | Input/Output: [[-25.661136201899808 97] 71.33886379810019]
Test Case: 849 | Input/Output: [[-47.1568321968479 98] 50.8431678031521]
Test Case: 850 | Input/Output: [[-87.4776779878645 37] -50.477677987864496]
Test Case: 851 | Input/Output: [[37.55458807176427 30] 67.55458807176427]
Test Case: 852 | Input/Output: [[-8.758622368122985 49] 40.241377631877015]
Test Case: 853 | Input/Output: [[44.04293397605073 10] 54.04293397605073]
Test Case: 854 | Input/Output: [[-51.38360523341967 -58] -109.38360523341967]
Test Case: 855 | Input/Output: [[-25.975470816666203 -80] -105.9754708166662]
Test Case: 856 | Input/Output: [[73.0009048081888 41] 114.0009048081888]
Test Case: 857 | Input/Output: [[-61.23237452466734 -13] -74.23237452466734]
Test Case: 858 | Input/Output: [[-16.339592516423835 -93] -109.33959251642383]
Test Case: 859 | Input/Output: [[-98.45584880648592 87] -11.455848806485918]
Test Case: 860 | Input/Output: [[15.842537460614807 -40] -24.157462539385193]
Test Case: 861 | Input/Output: [[70.4436553380088 59] 129.4436553380088]
Test Case: 862 | Input/Output: [[-72.62249751608442 42] -30.622497516084422]
Test Case: 863 | Input/Output: [[-31.484907956275237 72] 40.51509204372476]
Test Case: 864 | Input/Output: [[19.9073673656802 41] 60.9073673656802]
Test Case: 865 | Input/Output: [[-0.641816300667017 69] 68.35818369933298]
Test Case: 866 | Input/Output: [[-26.459250464879133 88] 61.54074953512087]
Test Case: 867 | Input/Output: [[-69.94156389466279 32] -37.94156389466279]
Test Case: 868 | Input/Output: [[23.632363710079886 7] 30.632363710079886]
Test Case: 869 | Input/Output: [[-17.461075440623517 29] 11.538924559376483]
Test Case: 870 | Input/Output: [[34.888183325516025 74] 108.88818332551602]
Test Case: 871 | Input/Output: [[36.547422504945814 -19] 17.547422504945814]
Test Case: 872 | Input/Output: [[69.63239087183399 -50] 19.63239087183399]
Test Case: 873 | Input/Output: [[45.87860980876289 -50] -4.121390191237111]
Test Case: 874 | Input/Output: [[12.437513935459535 63] 75.43751393545953]
Test Case: 875 | Input/Output: [[-72.94066653487931 29] -43.94066653487931]
Test Case: 876 | Input/Output: [[81.73862227696324 63] 144.73862227696324]
Test Case: 877 | Input/Output: [[7.297848989528106 6] 13.297848989528106]
Test Case: 878 | Input/Output: [[29.205982134418292 42] 71.20598213441829]
Test Case: 879 | Input/Output: [[-47.87096761107523 -94] -141.87096761107523]
Test Case: 880 | Input/Output: [[-63.63905338604228 20] -43.63905338604228]
Test Case: 881 | Input/Output: [[-59.16061108209804 0] -59.16061108209804]
Test Case: 882 | Input/Output: [[-67.94082969394924 -86] -153.94082969394924]
Test Case: 883 | Input/Output: [[52.53340882897203 7] 59.53340882897203]
Test Case: 884 | Input/Output: [[-60.56072693311461 -6] -66.56072693311461]
Test Case: 885 | Input/Output: [[88.45158440979193 -51] 37.451584409791934]
Test Case: 886 | Input/Output: [[-74.47323366641555 4] -70.47323366641555]
Test Case: 887 | Input/Output: [[25.80995942519779 -4] 21.80995942519779]
Test Case: 888 | Input/Output: [[-82.59445430553598 70] -12.594454305535976]
Test Case: 889 | Input/Output: [[31.183969646885146 37] 68.18396964688515]
Test Case: 890 | Input/Output: [[95.27242864181434 -7] 88.27242864181434]
Test Case: 891 | Input/Output: [[54.01217558317356 22] 76.01217558317356]
Test Case: 892 | Input/Output: [[40.116619783996924 -81] -40.883380216003076]
Test Case: 893 | Input/Output: [[-29.18107895603643 -2] -31.18107895603643]
Test Case: 894 | Input/Output: [[4.755001323924745 6] 10.755001323924745]
Test Case: 895 | Input/Output: [[-76.36281989033927 86] 9.637180109660733]
Test Case: 896 | Input/Output: [[-24.3481615623449 -37] -61.3481615623449]
Test Case: 897 | Input/Output: [[-17.121137565171196 96] 78.8788624348288]
Test Case: 898 | Input/Output: [[-19.708732415671193 47] 27.291267584328807]
Test Case: 899 | Input/Output: [[92.20901608727141 14] 106.20901608727141]
Test Case: 900 | Input/Output: [[17.256844427329312 7] 24.256844427329312]
Test Case: 901 | Input/Output: [[25.480414432178804 78] 103.4804144321788]
Test Case: 902 | Input/Output: [[4.435579460790564 46] 50.435579460790564]
Test Case: 903 | Input/Output: [[-78.13710811291472 -69] -147.13710811291472]
Test Case: 904 | Input/Output: [[-5.90091592458117 -97] -102.90091592458117]
Test Case: 905 | Input/Output: [[85.83533598389266 54] 139.83533598389266]
Test Case: 906 | Input/Output: [[11.219581125098046 -47] -35.780418874901954]
Test Case: 907 | Input/Output: [[22.672798400442915 58] 80.67279840044291]
Test Case: 908 | Input/Output: [[-22.824645611908224 34] 11.175354388091776]
Test Case: 909 | Input/Output: [[-93.56139318751828 -17] -110.56139318751828]
Test Case: 910 | Input/Output: [[97.56489348528339 57] 154.5648934852834]
Test Case: 911 | Input/Output: [[17.991953173648056 -97] -79.00804682635194]
Test Case: 912 | Input/Output: [[25.077295782561208 92] 117.07729578256121]
Test Case: 913 | Input/Output: [[-19.735162565279495 97] 77.2648374347205]
Test Case: 914 | Input/Output: [[-57.55966352588988 -70] -127.55966352588987]
Test Case: 915 | Input/Output: [[67.24130330919627 56] 123.24130330919627]
Test Case: 916 | Input/Output: [[39.44384080968791 9] 48.44384080968791]
Test Case: 917 | Input/Output: [[50.59716322090878 58] 108.59716322090878]
Test Case: 918 | Input/Output: [[7.002258252446808 95] 102.00225825244681]
Test Case: 919 | Input/Output: [[-89.95062570600886 -23] -112.95062570600886]
Test Case: 920 | Input/Output: [[10.684592077833074 -73] -62.315407922166926]
Test Case: 921 | Input/Output: [[34.960566168766604 42] 76.9605661687666]
Test Case: 922 | Input/Output: [[-49.600113212298204 31] -18.600113212298204]
Test Case: 923 | Input/Output: [[-26.246452299071706 8] -18.246452299071706]
Test Case: 924 | Input/Output: [[47.94855330774661 -5] 42.94855330774661]
Test Case: 925 | Input/Output: [[77.8008861983337 -30] 47.8008861983337]
Test Case: 926 | Input/Output: [[-42.11755125965446 88] 45.88244874034554]
Test Case: 927 | Input/Output: [[19.995103539643466 -42] -22.004896460356534]
Test Case: 928 | Input/Output: [[57.484291722353106 -71] -13.515708277646894]
Test Case: 929 | Input/Output: [[-35.642966924633 65] 29.357033075367]
Test Case: 930 | Input/Output: [[-49.59979114307913 -40] -89.59979114307913]
Test Case: 931 | Input/Output: [[-54.34446792644898 3] -51.34446792644898]
Test Case: 932 | Input/Output: [[35.593439160248494 -82] -46.406560839751506]
Test Case: 933 | Input/Output: [[18.86225991159469 -94] -75.13774008840531]
Test Case: 934 | Input/Output: [[10.098338372395574 73] 83.09833837239557]
Test Case: 935 | Input/Output: [[-70.56194973266467 54] -16.561949732664672]
Test Case: 936 | Input/Output: [[74.09990087299298 38] 112.09990087299298]
Test Case: 937 | Input/Output: [[-44.00886107544193 24] -20.008861075441928]
Test Case: 938 | Input/Output: [[-6.2984702979073575 -67] -73.29847029790736]
Test Case: 939 | Input/Output: [[-90.85557957711102 -59] -149.85557957711103]
Test Case: 940 | Input/Output: [[-69.83000465860428 -62] -131.83000465860428]
Test Case: 941 | Input/Output: [[60.91359344863997 -71] -10.086406551360028]
Test Case: 942 | Input/Output: [[42.045080689395576 11] 53.045080689395576]
Test Case: 943 | Input/Output: [[-91.54773563110828 49] -42.54773563110828]
Test Case: 944 | Input/Output: [[-41.86880664306874 -60] -101.86880664306874]
Test Case: 945 | Input/Output: [[58.860364248518835 -95] -36.139635751481165]
Test Case: 946 | Input/Output: [[66.93644194637704 -30] 36.936441946377045]
Test Case: 947 | Input/Output: [[-31.52366753123745 29] -2.52366753123745]
Test Case: 948 | Input/Output: [[-66.59712737656167 -38] -104.59712737656167]
Test Case: 949 | Input/Output: [[-63.63369085847472 -71] -134.63369085847472]
Test Case: 950 | Input/Output: [[46.15842853803022 -19] 27.158428538030222]
Test Case: 951 | Input/Output: [[-50.62388218545087 -99] -149.62388218545087]
Test Case: 952 | Input/Output: [[-74.2337057709561 50] -24.233705770956107]
Test Case: 953 | Input/Output: [[20.9074884593671 -80] -59.0925115406329]
Test Case: 954 | Input/Output: [[17.200217768978774 43] 60.200217768978774]
Test Case: 955 | Input/Output: [[-38.09961356175866 -42] -80.09961356175866]
Test Case: 956 | Input/Output: [[88.01818780071463 -71] 17.018187800714628]
Test Case: 957 | Input/Output: [[45.0155310259251 -97] -51.9844689740749]
Test Case: 958 | Input/Output: [[-5.2891248464094645 -20] -25.289124846409464]
Test Case: 959 | Input/Output: [[-47.42225748779458 -78] -125.42225748779458]
Test Case: 960 | Input/Output: [[-32.080310943796704 -21] -53.080310943796704]
Test Case: 961 | Input/Output: [[81.1361769956981 -29] 52.136176995698094]
Test Case: 962 | Input/Output: [[80.23778104553253 -46] 34.23778104553253]
Test Case: 963 | Input/Output: [[-90.02504175565034 -11] -101.02504175565034]
Test Case: 964 | Input/Output: [[-77.13033988394393 -90] -167.13033988394392]
Test Case: 965 | Input/Output: [[-76.8080215123782 -56] -132.80802151237822]
Test Case: 966 | Input/Output: [[-61.29444736560556 87] 25.705552634394436]
Test Case: 967 | Input/Output: [[-60.13077925521726 81] 20.869220744782737]
Test Case: 968 | Input/Output: [[63.52061416426224 -85] -21.47938583573776]
Test Case: 969 | Input/Output: [[5.934563791523246 14] 19.934563791523246]
Test Case: 970 | Input/Output: [[9.22252450239884 -52] -42.77747549760116]
Test Case: 971 | Input/Output: [[1.733995229999266 27] 28.733995229999266]
Test Case: 972 | Input/Output: [[54.365997992862276 44] 98.36599799286228]
Test Case: 973 | Input/Output: [[-18.937601282294935 -52] -70.93760128229493]
Test Case: 974 | Input/Output: [[44.05895721862788 -71] -26.94104278137212]
Test Case: 975 | Input/Output: [[-36.8741423102537 -95] -131.87414231025372]
Test Case: 976 | Input/Output: [[-37.029673696043666 -80] -117.02967369604366]
Test Case: 977 | Input/Output: [[89.49822963407041 60] 149.4982296340704]
Test Case: 978 | Input/Output: [[-60.82252924592411 -73] -133.8225292459241]
Test Case: 979 | Input/Output: [[0.8512720089683228 75] 75.85127200896832]
Test Case: 980 | Input/Output: [[-22.425317322985492 -90] -112.42531732298549]
Test Case: 981 | Input/Output: [[66.84792947207285 -32] 34.84792947207285]
Test Case: 982 | Input/Output: [[-87.82256012013825 85] -2.822560120138249]
Test Case: 983 | Input/Output: [[11.334182298787539 13] 24.33418229878754]
Test Case: 984 | Input/Output: [[37.001384556643956 4] 41.001384556643956]
Test Case: 985 | Input/Output: [[-76.75798629599612 -49] -125.75798629599612]
Test Case: 986 | Input/Output: [[88.87529930429511 43] 131.8752993042951]
Test Case: 987 | Input/Output: [[77.69453998763521 89] 166.6945399876352]
Test Case: 988 | Input/Output: [[-82.51625032037671 35] -47.51625032037671]
Test Case: 989 | Input/Output: [[1.2757139196084353 4] 5.275713919608435]
Test Case: 990 | Input/Output: [[26.427358029836867 -50] -23.572641970163133]
Test Case: 991 | Input/Output: [[-5.281071835339574 -52] -57.281071835339574]
Test Case: 992 | Input/Output: [[-68.29214050021847 62] -6.292140500218466]
Test Case: 993 | Input/Output: [[15.12295459017463 -38] -22.87704540982537]
Test Case: 994 | Input/Output: [[69.576615516662 91] 160.576615516662]
Test Case: 995 | Input/Output: [[-81.02439649551738 41] -40.02439649551738]
Test Case: 996 | Input/Output: [[93.82351511039269 60] 153.8235151103927]
Test Case: 997 | Input/Output: [[66.66167530570812 71] 137.66167530570812]
Test Case: 998 | Input/Output: [[-70.77461044529855 -86] -156.77461044529855]
Test Case: 999 | Input/Output: [[-53.454763046000984 11] -42.454763046000984]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -25 86 43 -25 50 12 -64 0 -77 -69 -110 -114 47 -58 -15 -81
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 54788.0
Test mean error for best: 27.39400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -35.4474659361
Correct output: -136.0274654831 | Program output: -51.0274654831
Correct output: -9.2468197583  | Program output: 59.7531802417 
Correct output: 10.6350720891  | Program output: -17.3649279109
Correct output: -59.3991693798 | Program output: -95.3991693798
Correct output: -115.2048572849 | Program output: -31.2048572849
Correct output: -6.125501297   | Program output: 39.874498703  
Correct output: -134.5687838788 | Program output: -41.5687838788
Correct output: -148.7052852825 | Program output: -81.7052852825
Correct output: -10.1232538326 | Program output: 22.8767461674 
Correct output: -19.3635646028 | Program output: 12.6364353972 
Correct output: -50.8267415348 | Program output: -64.8267415348
Correct output: 50.8166032664  | Program output: -25.1833967336
Correct output: 33.6989683486  | Program output: 42.6989683486 
Correct output: 125.1419974748 | Program output: 98.1419974748 
Correct output: 81.3713946753  | Program output: 78.3713946753 
Correct output: -12.8663238977 | Program output: 29.1336761023 
Correct output: -8.8091035841  | Program output: -95.8091035841
Correct output: -84.6988657133 | Program output: -31.6988657133
Correct output: 72.6804102537  | Program output: -12.3195897463
Correct output: -154.5786526245 | Program output: -57.5786526245
Correct output: -23.511495195  | Program output: -29.511495195 
Correct output: -86.6536921432 | Program output: -98.6536921432
Correct output: -94.9646390768 | Program output: -70.9646390768
Correct output: -145.2671699493 | Program output: -68.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_flush} {:instruction float_min} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_min} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction print_float} {:instruction float_div} {:instruction integer_swap} {:instruction tag_integer_743} {:instruction integer_dec} {:instruction integer_swap} {:instruction float_flush} {:instruction float_min} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction float_cos} {:instruction float_sub} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_swap} {:instruction integer_mult} {:instruction tagged_985} {:instruction float_rot} {:instruction print_float} {:instruction float_add})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_flush float_min float_dec integer_dup integer_swap float_min integer_flush float_mult integer_mult integer_inc float_inc integer_yank float_dec print_float float_div integer_swap tag_integer_743 integer_dec integer_swap float_flush float_min float_dec integer_shove integer_flush float_min integer_fromfloat integer_inc float_cos float_sub integer_yank float_stackdepth integer_dec integer_swap integer_mult tagged_985 float_rot print_float float_add)
Errors: [52.0 2 85.0 3 69.0 11 28.0 10 36.0 2 84.0 2 46.0 11 93.0 3 67.0 3 33.0 13 32.0 9 14.0 2 76.0 11 9.0 2 27.0 3 3.0 2 42.0 13 87.0 2 53.0 2 85.0 12 97.0 2 6.0 1 12.0 2 24.0 2 77.0 3]
Total: 1365.0
Mean: 27.3
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 18294.5109137
Median total errors in population: 25346.0
Error averages by case: (727.6545451000012 13.331 739.7584157999994 14.062 712.2100208 13.115 697.2831417 12.932 711.3702100999988 13.336 735.4068500000013 14.062 708.6466414999999 12.288 740.460663100001 14.19 742.3772322000004 14.109 706.1900537999991 13.938 705.4577617000002 13.635 705.6979414999979 13.154 707.0603166000009 13.074 709.9508452000018 12.664 718.726216199999 13.412 706.4406494999978 12.525 709.0359909999997 13.999 704.655857499999 12.4 726.1313867999991 13.325 711.3665218999997 13.104 745.3802898999988 14.139 702.0516149000023 12.414 715.0746137000027 13.322 728.822831399998 13.326 743.2693018000001 14.175)
Error minima by case: (4.4475 2 35.9725 3 0.3801 8 0.6351 8 0.3992 2 18.0079 2 0.1095 8 37.3718 3 12.7053 3 1.2566 8 0.7075 7 1.1733 2 0.8166 6 0.2619 1 25.0 2 0.6286 2 0.1337 7 0.0576 2 1.6989 2 0.3196 7 41.4213 2 0.5115 1 3.6537 2 2.2323 2 10.7328 3)
Average genome size in population (length): 50.396
Average program size in population (points): 51.396
Average percent parens in population: 0.045
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.321
Error (vector) diversity:			 0.34
Behavioral diversity:				 0.361
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1263430
--- Timings ---
Current time: 1529615251316 milliseconds
Total Time:           3.6 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.6 seconds, 15.2%
Fitness Testing:      3.0 seconds, 81.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 54788.0
Test mean error for best: 27.39400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -35.4474659361
Correct output: -136.0274654831 | Program output: -51.0274654831
Correct output: -9.2468197583  | Program output: 59.7531802417 
Correct output: 10.6350720891  | Program output: -17.3649279109
Correct output: -59.3991693798 | Program output: -95.3991693798
Correct output: -115.2048572849 | Program output: -31.2048572849
Correct output: -6.125501297   | Program output: 39.874498703  
Correct output: -134.5687838788 | Program output: -41.5687838788
Correct output: -148.7052852825 | Program output: -81.7052852825
Correct output: -10.1232538326 | Program output: 22.8767461674 
Correct output: -19.3635646028 | Program output: 12.6364353972 
Correct output: -50.8267415348 | Program output: -64.8267415348
Correct output: 50.8166032664  | Program output: -25.1833967336
Correct output: 33.6989683486  | Program output: 42.6989683486 
Correct output: 125.1419974748 | Program output: 98.1419974748 
Correct output: 81.3713946753  | Program output: 78.3713946753 
Correct output: -12.8663238977 | Program output: 29.1336761023 
Correct output: -8.8091035841  | Program output: -95.8091035841
Correct output: -84.6988657133 | Program output: -31.6988657133
Correct output: 72.6804102537  | Program output: -12.3195897463
Correct output: -154.5786526245 | Program output: -57.5786526245
Correct output: -23.511495195  | Program output: -29.511495195 
Correct output: -86.6536921432 | Program output: -98.6536921432
Correct output: -94.9646390768 | Program output: -70.9646390768
Correct output: -145.2671699493 | Program output: -68.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction in1} {:instruction integer_flush} {:instruction integer_mod} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_dup} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_sin} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_max} {:instruction float_sin} {:instruction float_swap})
Best program: (integer_max in1 integer_flush integer_mod print_integer float_rot float_rot integer_max integer_yankdup float_swap float_dup_items float_yank float_mult float_yank float_dec integer_max float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec float_dup_items integer_shove float_tan float_pop integer_mult float_yankdup integer_add in2 float_sin float_dup float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_swap integer_flush integer_div float_swap integer_dup integer_dup integer_dup_times float_dup float_sin float_yank 21 float_tan float_stackdepth float_frominteger integer_sub integer_max float_sin float_swap)
Errors: [52.0 2 85.0 3 69.0 11 28.0 10 36.0 2 84.0 2 46.0 11 93.0 3 67.0 3 33.0 13 32.0 9 14.0 2 76.0 11 9.0 2 27.0 3 3.0 2 42.0 13 87.0 2 53.0 2 85.0 12 97.0 2 6.0 1 12.0 2 24.0 2 77.0 3]
Total: 1365.0
Mean: 27.3
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 6836.767456399992
Median total errors in population: 2036.9854
Error averages by case: (273.5278234000014 11.001 304.6170544000003 11.691 246.00016179999994 12.033 219.73900550000045 11.787 250.29135290000247 11.146 292.30879000000175 11.627 238.10980579999998 11.398 304.39101580000124 11.918 310.8199002999987 11.797 232.06345220000014 12.81 231.59878229999984 11.917 237.13151090000102 10.831 249.30449339999956 12.152 241.9541271999985 10.735 279.73582289999916 11.424 248.76336400000108 10.605 236.76858739999983 12.871 243.4108945000013 10.282 272.01213099999853 11.053 257.0874386000007 12.235 316.4933083000026 11.736 220.2667192999989 10.326 257.424349499999 11.109 276.07822150000175 11.161 309.3813435000006 11.843)
Error minima by case: (4.4475 2 35.9725 3 0.2468 8 0.8703 8 0.3992 2 29.2049 2 0.1095 8 39.5688 3 12.7053 3 1.1233 8 0.7075 6 0.8267 2 1.1834 6 0.2619 1 0.858 3 1.0 2 0.1337 7 0.0576 2 1.6989 2 0.3196 7 41.4213 2 0.5115 1 3.6537 2 11.9646 2 10.7328 3)
Average genome size in population (length): 60.077
Average program size in population (points): 61.077
Average percent parens in population: 0.025
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.513
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.301
Error (vector) diversity:			 0.315
Behavioral diversity:				 0.342
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2770265
--- Timings ---
Current time: 1529615256435 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.6 seconds, 40.3%
Fitness Testing:      4.6 seconds, 51.3%
Report:               0.6 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 54788.0
Test mean error for best: 27.39400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -35.4474659361
Correct output: -136.0274654831 | Program output: -51.0274654831
Correct output: -9.2468197583  | Program output: 59.7531802417 
Correct output: 10.6350720891  | Program output: -17.3649279109
Correct output: -59.3991693798 | Program output: -95.3991693798
Correct output: -115.2048572849 | Program output: -31.2048572849
Correct output: -6.125501297   | Program output: 39.874498703  
Correct output: -134.5687838788 | Program output: -41.5687838788
Correct output: -148.7052852825 | Program output: -81.7052852825
Correct output: -10.1232538326 | Program output: 22.8767461674 
Correct output: -19.3635646028 | Program output: 12.6364353972 
Correct output: -50.8267415348 | Program output: -64.8267415348
Correct output: 50.8166032664  | Program output: -25.1833967336
Correct output: 33.6989683486  | Program output: 42.6989683486 
Correct output: 125.1419974748 | Program output: 98.1419974748 
Correct output: 81.3713946753  | Program output: 78.3713946753 
Correct output: -12.8663238977 | Program output: 29.1336761023 
Correct output: -8.8091035841  | Program output: -95.8091035841
Correct output: -84.6988657133 | Program output: -31.6988657133
Correct output: 72.6804102537  | Program output: -12.3195897463
Correct output: -154.5786526245 | Program output: -57.5786526245
Correct output: -23.511495195  | Program output: -29.511495195 
Correct output: -86.6536921432 | Program output: -98.6536921432
Correct output: -94.9646390768 | Program output: -70.9646390768
Correct output: -145.2671699493 | Program output: -68.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_flush} {:instruction float_min} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_min} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction print_float} {:instruction float_div} {:instruction integer_swap} {:instruction tag_integer_743} {:instruction integer_dec} {:instruction integer_swap} {:instruction float_flush} {:instruction float_min} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction float_cos} {:instruction float_sub} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_swap} {:instruction integer_mult} {:instruction tagged_985} {:instruction float_rot} {:instruction print_float} {:instruction float_add})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_flush float_min float_dec integer_dup integer_swap float_min integer_flush float_mult integer_mult integer_inc float_inc integer_yank float_dec print_float float_div integer_swap tag_integer_743 integer_dec integer_swap float_flush float_min float_dec integer_shove integer_flush float_min integer_fromfloat integer_inc float_cos float_sub integer_yank float_stackdepth integer_dec integer_swap integer_mult tagged_985 float_rot print_float float_add)
Errors: [52.0 2 85.0 3 69.0 11 28.0 10 36.0 2 84.0 2 46.0 11 93.0 3 67.0 3 33.0 13 32.0 9 14.0 2 76.0 11 9.0 2 27.0 3 3.0 2 42.0 13 87.0 2 53.0 2 85.0 12 97.0 2 6.0 1 12.0 2 24.0 2 77.0 3]
Total: 1365.0
Mean: 27.3
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 4720.658524899988
Median total errors in population: 1412.0
Error averages by case: (183.50915270000004 6.62 210.7526655999995 7.623 188.7829021000006 12.338 156.32436039999968 11.421 175.09335190000064 6.804 205.72385420000046 7.418 171.14473260000045 11.893 214.51716490000024 7.593 204.51466950000028 7.62 159.85238999999953 13.507 157.5265676999999 10.567 155.8173008000003 6.642 191.70303310000025 12.114 150.43354549999938 6.211 172.17875220000016 7.219 148.5818796000006 6.585 166.9010692000005 13.136 205.41191590000062 6.438 183.42939769999973 6.706 196.8696919999996 12.998 220.91702800000078 7.022 142.86108719999945 5.871 162.2308873999996 6.798 171.3394170000008 6.82 208.67170770000033 7.606)
Error minima by case: (12.4475 2 35.9725 3 0.3801 8 6.3919 9 1.6008 2 29.2049 2 0.1095 8 39.5688 2 12.7053 3 1.2566 10 0.7075 7 0.8267 2 13.5105 8 3.6072 1 25.0 2 1.0 1 0.1337 7 0.0576 2 9.6989 2 1.4036 9 41.4213 2 0.5115 1 10.0 1 19.9646 2 10.7328 3)
Average genome size in population (length): 56.737
Average program size in population (points): 57.737
Average percent parens in population: 0.022
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0255
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.148
Error (vector) diversity:			 0.153
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4191715
--- Timings ---
Current time: 1529615260046 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.1 seconds, 40.6%
Fitness Testing:      6.2 seconds, 49.8%
Report:               1.1 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 54795.0
Test mean error for best: 27.39750
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -36.4474659361
Correct output: -136.0274654831 | Program output: -52.0274654831
Correct output: -9.2468197583  | Program output: 58.7531802417 
Correct output: 10.6350720891  | Program output: -18.3649279109
Correct output: -59.3991693798 | Program output: -96.3991693798
Correct output: -115.2048572849 | Program output: -32.2048572849
Correct output: -6.125501297   | Program output: 38.874498703  
Correct output: -134.5687838788 | Program output: -42.5687838788
Correct output: -148.7052852825 | Program output: -82.7052852825
Correct output: -10.1232538326 | Program output: 21.8767461674 
Correct output: -19.3635646028 | Program output: 11.6364353972 
Correct output: -50.8267415348 | Program output: -65.8267415348
Correct output: 50.8166032664  | Program output: -26.1833967336
Correct output: 33.6989683486  | Program output: 41.6989683486 
Correct output: 125.1419974748 | Program output: 97.1419974748 
Correct output: 81.3713946753  | Program output: 77.3713946753 
Correct output: -12.8663238977 | Program output: 28.1336761023 
Correct output: -8.8091035841  | Program output: -96.8091035841
Correct output: -84.6988657133 | Program output: -32.6988657133
Correct output: 72.6804102537  | Program output: -13.3195897463
Correct output: -154.5786526245 | Program output: -58.5786526245
Correct output: -23.511495195  | Program output: -30.511495195 
Correct output: -86.6536921432 | Program output: -99.6536921432
Correct output: -94.9646390768 | Program output: -71.9646390768
Correct output: -145.2671699493 | Program output: -69.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_flush} {:instruction float_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_dup} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_sin} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_max} {:instruction float_sin} {:instruction float_swap})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_flush float_min float_dec integer_dup float_rot float_rot integer_max integer_yankdup float_swap float_dup_items float_yank float_mult float_yank float_dec integer_max float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec float_dup_items integer_shove float_tan float_pop integer_mult float_yankdup integer_add in2 float_sin float_dup float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_swap integer_flush integer_div float_swap integer_dup integer_dup integer_dup_times float_dup float_sin float_yank 21 float_tan float_stackdepth float_frominteger integer_sub integer_max float_sin float_swap)
Errors: [51.0 2 84.0 3 68.0 12 29.0 10 37.0 2 83.0 3 45.0 11 92.0 3 66.0 3 32.0 12 31.0 9 15.0 2 77.0 11 8.0 2 28.0 3 4.0 2 41.0 13 88.0 2 52.0 2 86.0 13 96.0 2 7.0 2 13.0 2 23.0 2 76.0 3]
Total: 1363.0
Mean: 27.26
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4594.227432199999
Median total errors in population: 1372.0
Error averages by case: (180.13125559999997 3.893 208.85900419999996 4.817 193.22603129999996 12.12 156.80043640000002 10.765 165.26556650000003 3.883 207.68562379999997 4.493 173.61523939999998 11.595 215.61379540000004 4.787 193.8219543 4.821 162.1596926 13.516 161.059563 9.912 146.3506857 3.895 198.22352619999995 11.636 142.77679759999995 3.232 158.8038343 4.727 137.61043170000002 3.767 170.1924066 13.373 207.75703930000003 3.792 180.9391616 3.885 205.60008920000004 13.027 219.3204746 3.957 138.9618601 2.925 145.32222270000003 3.88 156.53062780000002 3.865 202.22111230000004 4.816)
Error minima by case: (33.4475 2 49.0275 3 2.8659 9 9.0784 8 34.0 2 29.2049 2 0.2554 8 39.5688 2 66.0 3 3.7424 9 12.9827 9 12.0 2 9.3297 6 8.0 1 25.0 2 1.0 1 6.4854 9 1.6703 2 29.6989 2 0.3297 7 55.5787 2 4.0 1 10.0 1 23.0 2 66.2672 3)
Average genome size in population (length): 52.691
Average program size in population (points): 53.691
Average percent parens in population: 0.021
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5155
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.065
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5510865
--- Timings ---
Current time: 1529615263949 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.8 seconds, 41.7%
Fitness Testing:      7.9 seconds, 48.0%
Report:               1.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 54795.0
Test mean error for best: 27.39750
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -36.4474659361
Correct output: -136.0274654831 | Program output: -52.0274654831
Correct output: -9.2468197583  | Program output: 58.7531802417 
Correct output: 10.6350720891  | Program output: -18.3649279109
Correct output: -59.3991693798 | Program output: -96.3991693798
Correct output: -115.2048572849 | Program output: -32.2048572849
Correct output: -6.125501297   | Program output: 38.874498703  
Correct output: -134.5687838788 | Program output: -42.5687838788
Correct output: -148.7052852825 | Program output: -82.7052852825
Correct output: -10.1232538326 | Program output: 21.8767461674 
Correct output: -19.3635646028 | Program output: 11.6364353972 
Correct output: -50.8267415348 | Program output: -65.8267415348
Correct output: 50.8166032664  | Program output: -26.1833967336
Correct output: 33.6989683486  | Program output: 41.6989683486 
Correct output: 125.1419974748 | Program output: 97.1419974748 
Correct output: 81.3713946753  | Program output: 77.3713946753 
Correct output: -12.8663238977 | Program output: 28.1336761023 
Correct output: -8.8091035841  | Program output: -96.8091035841
Correct output: -84.6988657133 | Program output: -32.6988657133
Correct output: 72.6804102537  | Program output: -13.3195897463
Correct output: -154.5786526245 | Program output: -58.5786526245
Correct output: -23.511495195  | Program output: -30.511495195 
Correct output: -86.6536921432 | Program output: -99.6536921432
Correct output: -94.9646390768 | Program output: -71.9646390768
Correct output: -145.2671699493 | Program output: -69.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_pop} {:instruction float_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_dup} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_sin} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_max} {:instruction float_sin} {:instruction float_swap})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_pop float_min float_dec integer_dup float_rot float_rot integer_max integer_yankdup float_swap float_dup_items float_yank float_mult float_yank float_dec integer_max float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec float_dup_items integer_shove float_tan float_pop integer_mult float_yankdup integer_add in2 float_sin float_dup float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_swap integer_flush integer_div float_swap integer_dup integer_dup integer_dup_times float_dup float_sin float_yank 21 float_tan float_stackdepth float_frominteger integer_sub integer_max float_sin float_swap)
Errors: [51.0 2 84.0 3 68.0 12 29.0 10 37.0 2 83.0 3 45.0 11 92.0 3 66.0 3 32.0 12 31.0 9 15.0 2 77.0 11 8.0 2 28.0 3 4.0 2 41.0 13 88.0 2 52.0 2 86.0 13 96.0 2 7.0 2 13.0 2 23.0 2 76.0 3]
Total: 1363.0
Mean: 27.26
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3028.6791209000003
Median total errors in population: 1365.0
Error averages by case: (119.6990764 2.887 150.4807748 3.859 131.7165099 11.353 92.8028255 10.273 103.6488051 2.891 149.36120069999998 3.112 110.54701900000002 11.135 157.8075134 3.849 134.0883568 3.868 97.37510249999997 13.047 95.4327699 9.389 83.2956825 2.886 138.43648509999997 11.167 76.9398236 2.71 93.49863979999999 3.848 70.89325659999999 2.852 106.7007109 13.077 150.11118910000002 2.829 120.5946447 2.885 144.7314187 12.298 161.68043670000003 2.938 75.00407080000001 1.941 81.8199509 2.883 94.06496709999999 2.881 143.22989040000004 3.86)
Error minima by case: (34.4475 2 50.0275 3 7.373 10 9.6388 9 34.0 2 30.2049 2 5.0917 7 40.5688 2 66.0 3 6.0523 9 13.6364 9 12.0 2 24.1834 6 8.0 1 25.0 2 1.0 1 8.4974 9 6.8091 2 30.6989 2 11.3196 10 56.5787 2 4.0 1 10.0 1 23.0 2 67.2672 3)
Average genome size in population (length): 51.58
Average program size in population (points): 52.58
Average percent parens in population: 0.021
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.0285
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.033
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6801115
--- Timings ---
Current time: 1529615267570 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.5 seconds, 42.2%
Fitness Testing:      9.4 seconds, 46.7%
Report:               2.1 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 54769.0
Test mean error for best: 27.38450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -38.4474659361
Correct output: -136.0274654831 | Program output: -54.0274654831
Correct output: -9.2468197583  | Program output: 56.7531802417 
Correct output: 10.6350720891  | Program output: -20.3649279109
Correct output: -59.3991693798 | Program output: -98.3991693798
Correct output: -115.2048572849 | Program output: -34.2048572849
Correct output: -6.125501297   | Program output: 36.874498703  
Correct output: -134.5687838788 | Program output: -44.5687838788
Correct output: -148.7052852825 | Program output: -84.7052852825
Correct output: -10.1232538326 | Program output: 19.8767461674 
Correct output: -19.3635646028 | Program output: 9.6364353972  
Correct output: -50.8267415348 | Program output: -67.8267415348
Correct output: 50.8166032664  | Program output: -28.1833967336
Correct output: 33.6989683486  | Program output: 39.6989683486 
Correct output: 125.1419974748 | Program output: 95.1419974748 
Correct output: 81.3713946753  | Program output: 75.3713946753 
Correct output: -12.8663238977 | Program output: 26.1336761023 
Correct output: -8.8091035841  | Program output: -98.8091035841
Correct output: -84.6988657133 | Program output: -34.6988657133
Correct output: 72.6804102537  | Program output: -15.3195897463
Correct output: -154.5786526245 | Program output: -60.5786526245
Correct output: -23.511495195  | Program output: -32.511495195 
Correct output: -86.6536921432 | Program output: -101.6536921432
Correct output: -94.9646390768 | Program output: -73.9646390768
Correct output: -145.2671699493 | Program output: -71.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction in1} {:instruction integer_flush} {:instruction integer_mod} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_dup} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_sin} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_max} {:instruction float_sin} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_cos})
Best program: (integer_max in1 integer_flush integer_mod print_integer float_rot float_rot integer_max integer_yankdup float_swap float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec float_dup_items integer_shove float_tan float_pop integer_mult float_yankdup integer_add in2 float_sin float_dup float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_swap integer_flush integer_div float_swap integer_dup integer_dup integer_dup_times float_dup float_sin float_yank 21 float_tan float_stackdepth float_frominteger integer_sub integer_max float_sin float_swap float_dup_items integer_max integer_shove integer_shove float_cos)
Errors: [49.0 2 82.0 3 66.0 12 31.0 10 39.0 2 81.0 3 43.0 10 90.0 2 64.0 2 30.0 12 29.0 9 17.0 2 79.0 11 6.0 1 30.0 2 6.0 2 39.0 13 90.0 1 50.0 1 88.0 13 94.0 3 9.0 2 15.0 3 21.0 2 74.0 3]
Total: 1348.0
Mean: 26.96
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2849.4091881000004
Median total errors in population: 1365.0
Error averages by case: (111.63630900000003 2.787 142.62011900000002 3.771 126.88056950000002 11.365 81.43986779999997 10.212 98.2360617 2.819 141.599677 3.093 105.5080702 11.095 150.078703 3.775 125.93698080000001 3.772 89.23043489999998 12.813 84.66322420000002 9.326 77.67650820000001 2.811 129.70763369999997 11.104 71.59517939999999 2.754 90.6740915 3.789 68.05157399999999 2.801 101.00118870000003 13.039 145.63769310000004 2.758 112.55099609999999 2.796 132.4134709 12.311 153.88799709999998 2.847 68.0719189 2.048 76.08422250000001 2.822 85.74147350000001 2.796 135.20022340000003 3.781)
Error minima by case: (16.5525 1 33.9725 2 6.373 8 0.0586 7 35.0 2 52.7951 2 3.6781 9 51.4312 2 13.7053 2 7.1724 7 17.8848 9 13.0 2 50.8672 8 6.0 1 26.0 2 2.0 2 9.9077 10 6.2768 1 21.3011 1 42.1331 10 39.4213 2 5.0 1 11.0 2 21.0 2 8.7328 3)
Average genome size in population (length): 52.838
Average program size in population (points): 53.838
Average percent parens in population: 0.021
Minimum age in population: 5.5
Maximum age in population: 9.4375
Average age in population: 7.5745
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.031
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8122565
--- Timings ---
Current time: 1529615270990 milliseconds
Total Time:          23.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.9 seconds, 42.2%
Fitness Testing:     10.9 seconds, 46.5%
Report:               2.5 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 54816.0
Test mean error for best: 27.40800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -39.4474659361
Correct output: -136.0274654831 | Program output: -55.0274654831
Correct output: -9.2468197583  | Program output: 55.7531802417 
Correct output: 10.6350720891  | Program output: -21.3649279109
Correct output: -59.3991693798 | Program output: -99.3991693798
Correct output: -115.2048572849 | Program output: -35.2048572849
Correct output: -6.125501297   | Program output: 35.874498703  
Correct output: -134.5687838788 | Program output: -45.5687838788
Correct output: -148.7052852825 | Program output: -85.7052852825
Correct output: -10.1232538326 | Program output: 18.8767461674 
Correct output: -19.3635646028 | Program output: 8.6364353972  
Correct output: -50.8267415348 | Program output: -68.8267415348
Correct output: 50.8166032664  | Program output: -29.1833967336
Correct output: 33.6989683486  | Program output: 38.6989683486 
Correct output: 125.1419974748 | Program output: 94.1419974748 
Correct output: 81.3713946753  | Program output: 74.3713946753 
Correct output: -12.8663238977 | Program output: 25.1336761023 
Correct output: -8.8091035841  | Program output: -99.8091035841
Correct output: -84.6988657133 | Program output: -35.6988657133
Correct output: 72.6804102537  | Program output: -16.3195897463
Correct output: -154.5786526245 | Program output: -61.5786526245
Correct output: -23.511495195  | Program output: -33.511495195 
Correct output: -86.6536921432 | Program output: -102.6536921432
Correct output: -94.9646390768 | Program output: -74.9646390768
Correct output: -145.2671699493 | Program output: -72.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_min} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mod} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_max} {:instruction float_sin} {:instruction float_swap})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_yankdup float_min float_dec float_dec integer_shove float_rot float_dec integer_dup integer_swap float_min float_dec integer_shove float_rot integer_mod float_swap float_dup_items float_yank float_mult float_yank float_dec integer_max float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec float_dup_items integer_shove float_tan float_pop integer_mult float_yankdup integer_add in2 float_sin float_stackdepth float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_swap integer_flush integer_div float_swap integer_dup integer_inc integer_dup_times float_dup in1 float_yank 21 float_tan float_mod float_frominteger integer_sub integer_max float_sin float_swap)
Errors: [48.0 2 81.0 3 65.0 12 32.0 11 40.0 1 80.0 2 42.0 11 89.0 3 63.0 3 29.0 12 28.0 10 18.0 2 80.0 11 5.0 1 31.0 3 7.0 2 38.0 13 91.0 2 49.0 2 89.0 13 93.0 3 10.0 1 16.0 3 20.0 1 73.0 3]
Total: 1347.0
Mean: 26.94
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2868.9791694
Median total errors in population: 1363.0
Error averages by case: (111.5433848 2.729 142.7196399 3.705 125.3574297 11.934 88.0626071 10.245 98.7357104 2.79 141.45640129999998 3.619 103.71931879999998 11.116 150.0624631 3.701 126.15036060000001 3.768 90.14532260000003 12.323 88.03389370000001 9.35 78.09912589999999 2.794 133.78138539999998 11.17 69.767736 2.772 89.4668135 3.768 66.8001149 2.782 99.620822 13.07 146.06408359999998 2.731 112.4149961 2.786 140.57262519999998 12.883 154.06614960000002 2.849 69.57479629999999 2.56 76.4756982 2.877 85.94606590000001 2.79 135.4532248 3.777)
Error minima by case: (15.5525 1 32.9725 2 6.373 10 10.1086 8 35.0 1 51.7951 2 4.0917 9 50.4312 2 15.7053 2 7.1724 9 18.0229 9 13.0 2 19.1821 8 5.0 1 26.0 2 2.0 2 9.9077 8 7.8186 1 20.3011 1 10.1821 9 38.4213 2 5.0 1 11.0 2 20.0 1 7.7328 3)
Average genome size in population (length): 57.112
Average program size in population (points): 58.112
Average percent parens in population: 0.019
Minimum age in population: 7.0
Maximum age in population: 10.90625
Average age in population: 9.1166875
Median age in population: 9.15625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.028
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9550515
--- Timings ---
Current time: 1529615274902 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.5 seconds, 42.2%
Fitness Testing:     12.7 seconds, 46.5%
Report:               3.0 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 54815.0
Test mean error for best: 27.40750
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -40.4474659361
Correct output: -136.0274654831 | Program output: -56.0274654831
Correct output: -9.2468197583  | Program output: 54.7531802417 
Correct output: 10.6350720891  | Program output: -22.3649279109
Correct output: -59.3991693798 | Program output: -100.3991693798
Correct output: -115.2048572849 | Program output: -36.2048572849
Correct output: -6.125501297   | Program output: 34.874498703  
Correct output: -134.5687838788 | Program output: -46.5687838788
Correct output: -148.7052852825 | Program output: -86.7052852825
Correct output: -10.1232538326 | Program output: 17.8767461674 
Correct output: -19.3635646028 | Program output: 7.6364353972  
Correct output: -50.8267415348 | Program output: -69.8267415348
Correct output: 50.8166032664  | Program output: -30.1833967336
Correct output: 33.6989683486  | Program output: 37.6989683486 
Correct output: 125.1419974748 | Program output: 93.1419974748 
Correct output: 81.3713946753  | Program output: 73.3713946753 
Correct output: -12.8663238977 | Program output: 24.1336761023 
Correct output: -8.8091035841  | Program output: -100.8091035841
Correct output: -84.6988657133 | Program output: -36.6988657133
Correct output: 72.6804102537  | Program output: -17.3195897463
Correct output: -154.5786526245 | Program output: -62.5786526245
Correct output: -23.511495195  | Program output: -34.511495195 
Correct output: -86.6536921432 | Program output: -103.6536921432
Correct output: -94.9646390768 | Program output: -75.9646390768
Correct output: -145.2671699493 | Program output: -73.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction in1} {:instruction integer_flush} {:instruction integer_mod} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_dup} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_sin} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_max} {:instruction float_sin} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_cos})
Best program: (integer_max in1 integer_flush integer_mod print_integer float_rot float_rot integer_max integer_yankdup float_swap float_dup_items float_yank float_mult float_yank float_dec float_dec float_add float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec float_dup_items integer_shove float_tan float_pop integer_mult float_yankdup integer_add in2 float_sin float_dup float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_swap integer_flush integer_div float_swap integer_dup integer_dup integer_dup_times float_dup float_sin float_yank 21 float_tan float_stackdepth float_frominteger integer_sub integer_max float_sin float_swap float_dup_items integer_max integer_shove integer_shove float_cos)
Errors: [47.0 2 80.0 2 64.0 12 33.0 11 41.0 3 79.0 3 41.0 11 88.0 3 62.0 3 28.0 12 27.0 10 19.0 2 81.0 10 4.0 1 32.0 3 8.0 2 37.0 13 92.0 3 48.0 2 90.0 13 92.0 3 11.0 2 17.0 3 19.0 2 72.0 3]
Total: 1346.0
Mean: 26.92
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2930.5163946000002
Median total errors in population: 1363.0
Error averages by case: (114.5079168 2.538 145.3904588 3.504 128.5098067 12.079 87.04093089999999 10.278 102.2535561 2.848 144.26077450000003 3.8 107.254427 11.088 152.785416 3.454 128.8306506 3.782 90.93611779999998 12.207 86.46631640000001 9.375 81.862663 2.844 134.4751356 11.176 73.56368479999999 2.752 94.00608030000001 3.762 71.3404665 2.83 102.62139280000001 13.076 149.00797410000004 2.752 115.3766528 2.805 138.02863539999996 13.025 156.64331570000004 2.961 72.69697779999998 2.75 80.25962150000001 3.235 88.77550740000001 2.848 138.02891530000002 3.824)
Error minima by case: (34.4475 1 50.0275 2 5.373 9 10.1086 8 35.0 1 30.2049 2 1.7444 6 40.5688 2 62.0 2 6.0523 8 13.6364 9 13.0 2 18.6063 7 4.0 1 26.0 2 2.0 2 8.4974 9 6.2768 1 30.6989 1 3.2575 9 56.5787 2 5.0 1 11.0 2 19.0 1 67.2672 3)
Average genome size in population (length): 59.006
Average program size in population (points): 60.006
Average percent parens in population: 0.018
Minimum age in population: 8.53125
Maximum age in population: 12.40625
Average age in population: 10.70603125
Median age in population: 10.765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.04
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11025740
--- Timings ---
Current time: 1529615278467 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.0 seconds, 41.9%
Fitness Testing:     14.3 seconds, 46.2%
Report:               3.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 54815.0
Test mean error for best: 27.40750
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -40.4474659361
Correct output: -136.0274654831 | Program output: -56.0274654831
Correct output: -9.2468197583  | Program output: 54.7531802417 
Correct output: 10.6350720891  | Program output: -22.3649279109
Correct output: -59.3991693798 | Program output: -100.3991693798
Correct output: -115.2048572849 | Program output: -36.2048572849
Correct output: -6.125501297   | Program output: 34.874498703  
Correct output: -134.5687838788 | Program output: -46.5687838788
Correct output: -148.7052852825 | Program output: -86.7052852825
Correct output: -10.1232538326 | Program output: 17.8767461674 
Correct output: -19.3635646028 | Program output: 7.6364353972  
Correct output: -50.8267415348 | Program output: -69.8267415348
Correct output: 50.8166032664  | Program output: -30.1833967336
Correct output: 33.6989683486  | Program output: 37.6989683486 
Correct output: 125.1419974748 | Program output: 93.1419974748 
Correct output: 81.3713946753  | Program output: 73.3713946753 
Correct output: -12.8663238977 | Program output: 24.1336761023 
Correct output: -8.8091035841  | Program output: -100.8091035841
Correct output: -84.6988657133 | Program output: -36.6988657133
Correct output: 72.6804102537  | Program output: -17.3195897463
Correct output: -154.5786526245 | Program output: -62.5786526245
Correct output: -23.511495195  | Program output: -34.511495195 
Correct output: -86.6536921432 | Program output: -103.6536921432
Correct output: -94.9646390768 | Program output: -75.9646390768
Correct output: -145.2671699493 | Program output: -73.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_dup} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_sin} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_frominteger})
Best program: (integer_pop float_dec integer_pop integer_dup_times print_float in1 float_dec integer_shove float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dup_items float_yank float_mult float_yank float_dec integer_max float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec float_dup_items integer_shove float_tan float_pop integer_mult float_yankdup integer_add in2 float_sin float_dup float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_swap integer_flush integer_div float_swap integer_dup integer_dup integer_dup_times float_dup float_sin float_yank 21 float_tan float_stackdepth float_frominteger)
Errors: [47.0 2 80.0 2 64.0 12 33.0 11 41.0 3 79.0 3 41.0 11 88.0 3 62.0 3 28.0 12 27.0 10 19.0 2 81.0 10 4.0 1 32.0 3 8.0 2 37.0 13 92.0 3 48.0 2 90.0 13 92.0 3 11.0 2 17.0 3 19.0 2 72.0 3]
Total: 1346.0
Mean: 26.92
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2866.7180209999997
Median total errors in population: 1356.0
Error averages by case: (109.8083678 2.342 140.8580567 3.299 124.9052496 12.083 88.7298239 10.315 100.209882 2.847 139.76816630000002 3.798 103.55807990000001 10.865 148.27431789999997 3.045 124.31166510000001 3.587 89.6794914 12.176 87.41406500000001 9.425 79.6858369 2.886 135.05861969999998 11.171 69.7353756 2.498 92.73751319999998 3.561 70.07937820000001 2.834 99.3627329 13.066 146.9784209 2.575 110.72143169999998 2.609 141.0480774 13.014 152.15328870000002 3.237 71.45118299999999 2.745 78.2628529 3.732 84.05469040000001 2.821 133.49245389999996 3.848)
Error minima by case: (12.5525 1 29.9725 2 3.2468 9 10.6351 10 25.7154 1 48.7951 2 0.1255 6 47.4312 2 16.7053 2 4.0523 8 13.3636 9 13.0 2 50.8166 8 4.0 1 26.0 2 2.0 2 6.4974 8 2.8091 1 17.3011 1 52.4527 9 35.4213 2 5.0 1 11.0 2 19.0 1 4.7328 3)
Average genome size in population (length): 60.064
Average program size in population (points): 61.064
Average percent parens in population: 0.017
Minimum age in population: 9.53125
Maximum age in population: 13.875
Average age in population: 12.2575859375
Median age in population: 12.328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.034
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 12527440
--- Timings ---
Current time: 1529615282235 milliseconds
Total Time:          34.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.4 seconds, 41.6%
Fitness Testing:     16.1 seconds, 46.4%
Report:               4.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 54888.0
Test mean error for best: 27.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -42.4474659361
Correct output: -136.0274654831 | Program output: -58.0274654831
Correct output: -9.2468197583  | Program output: 52.7531802417 
Correct output: 10.6350720891  | Program output: -24.3649279109
Correct output: -59.3991693798 | Program output: -102.3991693798
Correct output: -115.2048572849 | Program output: -38.2048572849
Correct output: -6.125501297   | Program output: 32.874498703  
Correct output: -134.5687838788 | Program output: -48.5687838788
Correct output: -148.7052852825 | Program output: -88.7052852825
Correct output: -10.1232538326 | Program output: 15.8767461674 
Correct output: -19.3635646028 | Program output: 5.6364353972  
Correct output: -50.8267415348 | Program output: -71.8267415348
Correct output: 50.8166032664  | Program output: -32.1833967336
Correct output: 33.6989683486  | Program output: 35.6989683486 
Correct output: 125.1419974748 | Program output: 91.1419974748 
Correct output: 81.3713946753  | Program output: 71.3713946753 
Correct output: -12.8663238977 | Program output: 22.1336761023 
Correct output: -8.8091035841  | Program output: -102.8091035841
Correct output: -84.6988657133 | Program output: -38.6988657133
Correct output: 72.6804102537  | Program output: -19.3195897463
Correct output: -154.5786526245 | Program output: -64.5786526245
Correct output: -23.511495195  | Program output: -36.511495195 
Correct output: -86.6536921432 | Program output: -105.6536921432
Correct output: -94.9646390768 | Program output: -77.9646390768
Correct output: -145.2671699493 | Program output: -75.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction in1} {:instruction integer_flush} {:instruction integer_mod} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_min} {:instruction float_max})
Best program: (integer_max in1 integer_flush integer_mod print_integer float_rot float_rot integer_max integer_yankdup float_swap float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank float_mult float_dec float_dec float_mult float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec float_dup_items integer_shove float_tan float_dup float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_inc float_inc float_add integer_min float_max)
Errors: [45.0 2 78.0 3 62.0 12 35.0 11 43.0 3 77.0 3 39.0 11 86.0 3 60.0 2 26.0 12 25.0 10 21.0 2 83.0 11 2.0 1 34.0 3 10.0 1 35.0 12 94.0 3 46.0 2 92.0 13 90.0 2 13.0 2 19.0 3 17.0 2 70.0 2]
Total: 1333.0
Mean: 26.66
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3046.6571137
Median total errors in population: 1348.0
Error averages by case: (117.2795883 2.799 147.9337071 3.693 132.6846371 12.083 92.28363869999997 10.574 110.5252127 2.761 146.9687183 3.637 111.4409901 10.635 155.3400072 3.292 131.32384820000001 3.382 93.33806340000001 12.164 87.2332521 9.682 90.1616711 2.899 141.1096852 11.068 77.5380218 2.016 102.68402849999998 3.36 80.36131160000002 2.86 105.91843300000001 13.053 157.44623450000003 2.454 118.19973549999999 2.395 141.8904144 12.998 159.0825637 3.75 80.98621229999999 2.588 88.4626536 3.804 91.4604662 2.653 140.5410191 3.863)
Error minima by case: (15.5525 1 32.9725 2 3.373 10 11.7502 9 35.0 1 51.7951 2 1.0917 7 50.4312 2 15.7053 2 3.0523 7 15.2408 8 13.0 1 52.3196 7 2.0 1 26.0 2 2.0 1 5.4974 8 4.1803 1 20.3011 1 47.4527 8 38.4213 2 5.0 1 11.0 2 17.0 1 7.7328 2)
Average genome size in population (length): 62.578
Average program size in population (points): 63.578
Average percent parens in population: 0.017
Minimum age in population: 11.6875
Maximum age in population: 15.68359375
Average age in population: 13.79137109375
Median age in population: 13.84375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.041
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 14091965
--- Timings ---
Current time: 1529615285988 milliseconds
Total Time:          38.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.9 seconds, 41.2%
Fitness Testing:     17.9 seconds, 46.6%
Report:               4.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 54994.0
Test mean error for best: 27.49700
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -44.4474659361
Correct output: -136.0274654831 | Program output: -60.0274654831
Correct output: -9.2468197583  | Program output: 50.7531802417 
Correct output: 10.6350720891  | Program output: -26.3649279109
Correct output: -59.3991693798 | Program output: -104.3991693798
Correct output: -115.2048572849 | Program output: -40.2048572849
Correct output: -6.125501297   | Program output: 30.874498703  
Correct output: -134.5687838788 | Program output: -50.5687838788
Correct output: -148.7052852825 | Program output: -90.7052852825
Correct output: -10.1232538326 | Program output: 13.8767461674 
Correct output: -19.3635646028 | Program output: 3.6364353972  
Correct output: -50.8267415348 | Program output: -73.8267415348
Correct output: 50.8166032664  | Program output: -34.1833967336
Correct output: 33.6989683486  | Program output: 33.6989683486 
Correct output: 125.1419974748 | Program output: 89.1419974748 
Correct output: 81.3713946753  | Program output: 69.3713946753 
Correct output: -12.8663238977 | Program output: 20.1336761023 
Correct output: -8.8091035841  | Program output: -104.8091035841
Correct output: -84.6988657133 | Program output: -40.6988657133
Correct output: 72.6804102537  | Program output: -21.3195897463
Correct output: -154.5786526245 | Program output: -66.5786526245
Correct output: -23.511495195  | Program output: -38.511495195 
Correct output: -86.6536921432 | Program output: -107.6536921432
Correct output: -94.9646390768 | Program output: -79.9646390768
Correct output: -145.2671699493 | Program output: -77.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_min} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mod} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction in2} {:instruction integer_flush} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_sin} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_cos})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_yankdup float_min float_dec float_dec integer_shove float_rot float_dec integer_dup integer_swap float_min float_dec integer_shove float_rot integer_mod float_mult float_yank float_dec float_dec float_add float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec integer_mult float_yankdup integer_add in2 integer_flush integer_div float_swap integer_dup integer_dup integer_dup_times float_dup float_sin float_yank 21 float_tan float_cos)
Errors: [43.0 2 76.0 3 60.0 12 37.0 11 45.0 3 75.0 3 37.0 11 84.0 3 58.0 3 24.0 12 23.0 10 23.0 2 85.0 11 0.0 0 36.0 3 12.0 2 33.0 13 96.0 3 44.0 2 94.0 12 88.0 3 15.0 2 21.0 3 15.0 2 68.0 3]
Total: 1326.0
Mean: 26.52
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3028.5009285
Median total errors in population: 1347.0
Error averages by case: (114.3183235 2.871 145.02094129999998 3.469 130.65952080000002 12.067 95.28592910000002 11.039 110.7086176 2.953 144.0717703 3.492 109.4182579 11.014 152.4544558 3.748 128.43623920000002 3.746 92.3303 12.143 88.12130690000001 10.158 90.3080649 2.871 143.62593189999998 10.795 75.70447670000001 1.974 104.0209967 3.748 81.67394980000002 2.862 103.81656330000001 13.016 157.58041569999997 3.194 115.2417809 2.793 145.17738549999999 12.993 156.18754510000002 3.794 82.1151415 2.454 88.6748253 3.82 88.6294611 2.501 137.5997277 3.804)
Error minima by case: (10.5525 1 27.9725 2 1.373 10 10.5797 8 32.599 1 46.7951 2 0.0917 7 45.4312 2 20.7053 2 2.1724 8 13.2408 9 10.599 1 50.0277 8 0.0 0 23.599 2 0.401 1 4.9077 9 4.2609 1 15.3011 1 49.4527 9 33.4213 2 2.599 1 8.599 2 15.0 1 2.7328 2)
Average genome size in population (length): 65.202
Average program size in population (points): 66.202
Average percent parens in population: 0.016
Minimum age in population: 12.7265625
Maximum age in population: 17.03515625
Average age in population: 15.441939453125
Median age in population: 15.4775390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.043
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 15722040
--- Timings ---
Current time: 1529615289511 milliseconds
Total Time:          42.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.3 seconds, 41.0%
Fitness Testing:     19.7 seconds, 46.8%
Report:               5.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 55281.0
Test mean error for best: 27.64050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -47.4474659361
Correct output: -136.0274654831 | Program output: -63.0274654831
Correct output: -9.2468197583  | Program output: 47.7531802417 
Correct output: 10.6350720891  | Program output: -29.3649279109
Correct output: -59.3991693798 | Program output: -107.3991693798
Correct output: -115.2048572849 | Program output: -43.2048572849
Correct output: -6.125501297   | Program output: 27.874498703  
Correct output: -134.5687838788 | Program output: -53.5687838788
Correct output: -148.7052852825 | Program output: -93.7052852825
Correct output: -10.1232538326 | Program output: 10.8767461674 
Correct output: -19.3635646028 | Program output: 0.6364353972  
Correct output: -50.8267415348 | Program output: -76.8267415348
Correct output: 50.8166032664  | Program output: -37.1833967336
Correct output: 33.6989683486  | Program output: 30.6989683486 
Correct output: 125.1419974748 | Program output: 86.1419974748 
Correct output: 81.3713946753  | Program output: 66.3713946753 
Correct output: -12.8663238977 | Program output: 17.1336761023 
Correct output: -8.8091035841  | Program output: -107.8091035841
Correct output: -84.6988657133 | Program output: -43.6988657133
Correct output: 72.6804102537  | Program output: -24.3195897463
Correct output: -154.5786526245 | Program output: -69.5786526245
Correct output: -23.511495195  | Program output: -41.511495195 
Correct output: -86.6536921432 | Program output: -110.6536921432
Correct output: -94.9646390768 | Program output: -82.9646390768
Correct output: -145.2671699493 | Program output: -80.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_yankdup float_min float_dec float_dec integer_shove float_rot float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec)
Errors: [40.0 1 73.0 2 57.0 12 40.0 11 48.0 3 72.0 3 34.0 11 81.0 2 55.0 3 21.0 11 20.0 10 26.0 2 88.0 11 3.0 1 39.0 3 15.0 2 30.0 12 99.0 3 41.0 2 97.0 12 85.0 3 18.0 2 24.0 3 12.0 2 65.0 3]
Total: 1313.0
Mean: 26.26
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3064.3108809999994
Median total errors in population: 1346.0
Error averages by case: (116.35169529999999 3.001 146.99555390000006 3.475 131.05225800000002 12.071 97.01365260000001 11.153 111.13622500000001 3.771 145.93477010000004 3.938 110.0578533 11.102 154.34016350000002 3.952 130.72022500000003 3.843 94.1301204 12.161 90.16356010000001 10.277 90.74044719999996 2.844 144.06011069999997 10.675 77.113536 2.071 104.04857569999997 3.794 81.5389713 2.873 105.2025278 12.857 157.34630700000002 3.748 117.2573804 2.993 147.9760001 12.917 158.1643646 3.781 82.0048327 2.876 89.4374536 3.856 91.11975669999998 2.967 139.70353999999998 3.705)
Error minima by case: (7.5525 1 2.276 2 0.1839 8 9.6619 8 35.0 1 1.276 2 0.0518 6 10.276 2 15.724 2 0.349 9 8.2408 9 13.0 1 49.8733 8 0.0 0 26.0 2 2.0 1 0.0923 9 2.1803 1 12.3011 1 48.4527 6 14.276 2 5.0 1 11.0 2 12.0 1 0.2672 2)
Average genome size in population (length): 68.485
Average program size in population (points): 69.485
Average percent parens in population: 0.015
Minimum age in population: 14.74609375
Maximum age in population: 18.6640625
Average age in population: 16.9648798828125
Median age in population: 16.994140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.057
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 17434165
--- Timings ---
Current time: 1529615293248 milliseconds
Total Time:          45.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.8 seconds, 41.0%
Fitness Testing:     21.5 seconds, 46.9%
Report:               5.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 55588.0
Test mean error for best: 27.79400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -50.4474659361
Correct output: -136.0274654831 | Program output: -66.0274654831
Correct output: -9.2468197583  | Program output: 44.7531802417 
Correct output: 10.6350720891  | Program output: -32.3649279109
Correct output: -59.3991693798 | Program output: -110.3991693798
Correct output: -115.2048572849 | Program output: -46.2048572849
Correct output: -6.125501297   | Program output: 24.874498703  
Correct output: -134.5687838788 | Program output: -56.5687838788
Correct output: -148.7052852825 | Program output: -96.7052852825
Correct output: -10.1232538326 | Program output: 7.8767461674  
Correct output: -19.3635646028 | Program output: -2.3635646028 
Correct output: -50.8267415348 | Program output: -79.8267415348
Correct output: 50.8166032664  | Program output: -40.1833967336
Correct output: 33.6989683486  | Program output: 27.6989683486 
Correct output: 125.1419974748 | Program output: 83.1419974748 
Correct output: 81.3713946753  | Program output: 63.3713946753 
Correct output: -12.8663238977 | Program output: 14.1336761023 
Correct output: -8.8091035841  | Program output: -110.8091035841
Correct output: -84.6988657133 | Program output: -46.6988657133
Correct output: 72.6804102537  | Program output: -27.3195897463
Correct output: -154.5786526245 | Program output: -72.5786526245
Correct output: -23.511495195  | Program output: -44.511495195 
Correct output: -86.6536921432 | Program output: -113.6536921432
Correct output: -94.9646390768 | Program output: -85.9646390768
Correct output: -145.2671699493 | Program output: -83.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction in1} {:instruction integer_flush} {:instruction integer_mod} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction float_yankdup} {:instruction -76.57038870316195} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_sin} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_cos})
Best program: (integer_max in1 integer_flush integer_mod print_integer float_rot float_rot integer_max integer_yankdup float_swap float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank float_mult float_dec integer_max float_dec integer_max float_yank float_dec float_mult float_dec float_dec float_yank float_dec float_dec float_yank float_mult float_dec integer_max float_dec integer_max float_yank float_dec float_mult float_dec float_dec float_rot float_yank float_mult float_yank float_dec float_dec float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc float_yankdup -76.57038870316195 float_dup_items integer_shove float_tan float_pop integer_mult float_yankdup integer_add in2 float_sin float_dup float_sin float_sin float_yank 21 float_tan float_stackdepth float_frominteger integer_fromfloat integer_max float_sin float_swap float_dup_items integer_max integer_shove integer_shove float_cos)
Errors: [37.0 2 70.0 2 54.0 12 43.0 11 51.0 3 69.0 3 31.0 11 78.0 3 52.0 3 18.0 13 17.0 2 29.0 2 91.0 10 6.0 2 42.0 3 18.0 2 27.0 12 102.0 3 38.0 2 100.0 12 82.0 3 21.0 2 27.0 3 9.0 2 62.0 3]
Total: 1300.0
Mean: 26.0
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3140.0319465
Median total errors in population: 1333.0
Error averages by case: (118.95355920000002 3.027 149.5955424 3.922 132.89279460000003 12.046 99.8631273 11.164 117.04351380000001 3.882 148.39291310000002 3.974 111.79769850000004 11.116 156.84996190000004 4.0 133.6022906 3.703 94.1674588 12.145 88.9691596 10.274 96.54121719999999 2.841 148.0342592 11.098 78.93640400000001 2.012 108.96604190000001 3.789 86.41033790000002 2.72 106.07414910000001 12.486 163.15477040000005 3.835 119.79976939999999 3.027 149.5038645 12.632 160.7744604 3.476 87.41201509999998 2.931 95.4615707 3.711 94.02019700000001 3.012 142.46086989999998 3.531)
Error minima by case: (5.5525 1 22.9725 2 0.2395 8 6.0586 9 35.0 1 41.7951 2 1.3027 8 40.4312 2 20.7053 2 0.1724 8 10.2408 2 13.0 1 28.3119 8 0.0 0 26.0 2 2.0 1 1.9077 9 0.6557 1 10.3011 1 0.0307 6 28.4213 2 5.0 1 11.0 2 9.0 1 0.7328 2)
Average genome size in population (length): 68.414
Average program size in population (points): 69.414
Average percent parens in population: 0.015
Minimum age in population: 16.02734375
Maximum age in population: 20.337890625
Average age in population: 18.5058046875
Median age in population: 18.52880859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.059
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 19144565
--- Timings ---
Current time: 1529615297110 milliseconds
Total Time:          49.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.4 seconds, 41.1%
Fitness Testing:     23.2 seconds, 46.9%
Report:               5.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 55914.0
Test mean error for best: 27.95700
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -52.4474659361
Correct output: -136.0274654831 | Program output: -68.0274654831
Correct output: -9.2468197583  | Program output: 42.7531802417 
Correct output: 10.6350720891  | Program output: -34.3649279109
Correct output: -59.3991693798 | Program output: -112.3991693798
Correct output: -115.2048572849 | Program output: -48.2048572849
Correct output: -6.125501297   | Program output: 22.874498703  
Correct output: -134.5687838788 | Program output: -58.5687838788
Correct output: -148.7052852825 | Program output: -98.7052852825
Correct output: -10.1232538326 | Program output: 5.8767461674  
Correct output: -19.3635646028 | Program output: -4.3635646028 
Correct output: -50.8267415348 | Program output: -81.8267415348
Correct output: 50.8166032664  | Program output: -42.1833967336
Correct output: 33.6989683486  | Program output: 25.6989683486 
Correct output: 125.1419974748 | Program output: 81.1419974748 
Correct output: 81.3713946753  | Program output: 61.3713946753 
Correct output: -12.8663238977 | Program output: 12.1336761023 
Correct output: -8.8091035841  | Program output: -112.8091035841
Correct output: -84.6988657133 | Program output: -48.6988657133
Correct output: 72.6804102537  | Program output: -29.3195897463
Correct output: -154.5786526245 | Program output: -74.5786526245
Correct output: -23.511495195  | Program output: -46.511495195 
Correct output: -86.6536921432 | Program output: -115.6536921432
Correct output: -94.9646390768 | Program output: -87.9646390768
Correct output: -145.2671699493 | Program output: -85.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_min} {:instruction float_max})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_yankdup float_min float_dec float_dec integer_shove float_rot float_dec float_swap float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank float_mult float_dec float_dec float_mult float_yank float_dec float_dec float_dec float_yank float_mult float_dec float_dec float_mult float_yank float_dec float_dec float_mult float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc integer_rot integer_dec float_dup_items integer_shove float_tan float_dup float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_inc float_inc float_add integer_min float_max)
Errors: [35.0 2 68.0 3 52.0 12 45.0 11 53.0 3 67.0 3 29.0 11 76.0 3 50.0 2 16.0 13 15.0 2 31.0 2 93.0 11 8.0 2 44.0 3 20.0 1 25.0 11 104.0 3 36.0 2 102.0 12 80.0 2 23.0 2 29.0 3 7.0 2 60.0 2]
Total: 1291.0
Mean: 25.82
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3259.3613419999997
Median total errors in population: 1326.0
Error averages by case: (121.01383270000001 3.046 151.44119410000002 3.991 135.996096 11.942 108.30761349999997 11.181 123.64709800000001 3.984 150.24178590000002 3.946 115.36378189999999 11.102 158.72979310000002 4.019 135.36635389999998 3.991 97.51028349999999 12.126 92.68941680000002 10.081 103.62861910000001 3.082 156.239639 11.19 85.24676649999998 1.986 118.47992819999997 4.059 95.2009034 3.061 108.911741 12.444 169.17839519999998 3.913 121.82814030000002 3.087 157.85296119999998 12.217 162.5145636 3.721 95.38937659999998 3.019 102.24318349999999 3.75 96.06078579999999 3.07 144.27108919999998 4.0)
Error minima by case: (3.4475 1 6.9725 2 0.0527 8 12.8308 9 23.6033 1 13.7604 2 0.1102 7 4.7604 2 30.7604 2 0.1724 9 8.2408 1 13.0 1 51.8435 8 0.0 0 26.0 2 2.0 1 0.0923 8 0.1803 1 1.3011 1 46.4527 8 0.7604 2 5.0 1 3.6512 2 7.0 1 11.2672 2)
Average genome size in population (length): 70.178
Average program size in population (points): 71.178
Average percent parens in population: 0.015
Minimum age in population: 17.02734375
Maximum age in population: 21.57958984375
Average age in population: 19.96413354492188
Median age in population: 19.98388671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.066
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 20899015
--- Timings ---
Current time: 1529615301062 milliseconds
Total Time:          53.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.9 seconds, 40.9%
Fitness Testing:     25.2 seconds, 47.1%
Report:               6.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 56291.0
Test mean error for best: 28.14550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -55.4474659361
Correct output: -136.0274654831 | Program output: -71.0274654831
Correct output: -9.2468197583  | Program output: 39.7531802417 
Correct output: 10.6350720891  | Program output: -37.3649279109
Correct output: -59.3991693798 | Program output: -115.3991693798
Correct output: -115.2048572849 | Program output: -51.2048572849
Correct output: -6.125501297   | Program output: 19.874498703  
Correct output: -134.5687838788 | Program output: -61.5687838788
Correct output: -148.7052852825 | Program output: -101.7052852825
Correct output: -10.1232538326 | Program output: 2.8767461674  
Correct output: -19.3635646028 | Program output: -7.3635646028 
Correct output: -50.8267415348 | Program output: -84.8267415348
Correct output: 50.8166032664  | Program output: -45.1833967336
Correct output: 33.6989683486  | Program output: 22.6989683486 
Correct output: 125.1419974748 | Program output: 78.1419974748 
Correct output: 81.3713946753  | Program output: 58.3713946753 
Correct output: -12.8663238977 | Program output: 9.1336761023  
Correct output: -8.8091035841  | Program output: -115.8091035841
Correct output: -84.6988657133 | Program output: -51.6988657133
Correct output: 72.6804102537  | Program output: -32.3195897463
Correct output: -154.5786526245 | Program output: -77.5786526245
Correct output: -23.511495195  | Program output: -49.511495195 
Correct output: -86.6536921432 | Program output: -118.6536921432
Correct output: -94.9646390768 | Program output: -90.9646390768
Correct output: -145.2671699493 | Program output: -88.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_min} {:instruction float_max})
Best program: (integer_pop float_dec integer_pop integer_dup_times print_float in1 float_dec integer_shove float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_mult float_shove float_dec float_dec float_swap float_dup_items float_yank float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger integer_sub integer_pop -16 integer_rot float_add integer_inc integer_inc float_inc float_add integer_min float_max)
Errors: [32.0 2 65.0 3 49.0 11 48.0 11 56.0 3 64.0 2 26.0 11 73.0 3 47.0 2 13.0 13 12.0 2 34.0 2 96.0 11 11.0 2 47.0 3 23.0 2 22.0 12 107.0 3 33.0 2 105.0 12 77.0 3 26.0 2 32.0 3 4.0 1 57.0 3]
Total: 1283.0
Mean: 25.66
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3340.7711848999998
Median total errors in population: 1319.0
Error averages by case: (123.8648266 2.9 154.04043769999998 3.841 138.37177490000002 11.897 114.47308279999997 11.135 127.26985130000001 3.956 153.0235812 3.865 117.6546834 11.068 161.3886518 3.834 137.9153028 4.005 100.83696479999999 12.103 96.51118519999997 9.032 107.1499348 3.079 161.06042369999997 11.153 88.6448898 2.186 120.09149809999997 3.976 97.92604820000003 3.033 111.6437165 12.256 173.15853620000001 3.871 124.6755031 3.045 164.84538020000002 12.127 165.04302719999998 4.016 99.29718989999998 2.962 105.8669751 3.976 98.66741010000001 3.053 146.9383095 4.043)
Error minima by case: (0.4475 1 16.9725 2 0.1141 8 4.8664 8 35.0 1 35.7951 2 0.5213 7 34.4312 2 24.7053 2 0.5096 8 4.4274 1 9.2548 1 50.1821 8 0.0 0 26.0 2 2.0 1 0.2248 8 0.6563 1 4.3011 1 46.4527 7 22.4213 2 5.0 1 11.0 2 4.0 1 1.2672 2)
Average genome size in population (length): 69.598
Average program size in population (points): 70.598
Average percent parens in population: 0.015
Minimum age in population: 19.35986328125
Maximum age in population: 23.259765625
Average age in population: 21.51100317382812
Median age in population: 21.5614013671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.058
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 22638965
--- Timings ---
Current time: 1529615304816 milliseconds
Total Time:          57.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.4 seconds, 40.8%
Fitness Testing:     27.0 seconds, 47.1%
Report:               6.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 56840.0
Test mean error for best: 28.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -58.4474659361
Correct output: -136.0274654831 | Program output: -74.0274654831
Correct output: -9.2468197583  | Program output: 36.7531802417 
Correct output: 10.6350720891  | Program output: -40.3649279109
Correct output: -59.3991693798 | Program output: -118.3991693798
Correct output: -115.2048572849 | Program output: -54.2048572849
Correct output: -6.125501297   | Program output: 16.874498703  
Correct output: -134.5687838788 | Program output: -64.5687838788
Correct output: -148.7052852825 | Program output: -104.7052852825
Correct output: -10.1232538326 | Program output: -0.1232538326 
Correct output: -19.3635646028 | Program output: -10.3635646028
Correct output: -50.8267415348 | Program output: -87.8267415348
Correct output: 50.8166032664  | Program output: -48.1833967336
Correct output: 33.6989683486  | Program output: 19.6989683486 
Correct output: 125.1419974748 | Program output: 75.1419974748 
Correct output: 81.3713946753  | Program output: 55.3713946753 
Correct output: -12.8663238977 | Program output: 6.1336761023  
Correct output: -8.8091035841  | Program output: -118.8091035841
Correct output: -84.6988657133 | Program output: -54.6988657133
Correct output: 72.6804102537  | Program output: -35.3195897463
Correct output: -154.5786526245 | Program output: -80.5786526245
Correct output: -23.511495195  | Program output: -52.511495195 
Correct output: -86.6536921432 | Program output: -121.6536921432
Correct output: -94.9646390768 | Program output: -93.9646390768
Correct output: -145.2671699493 | Program output: -91.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction float_yankdup} {:instruction -76.57038870316195} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_max} {:instruction integer_shove} {:instruction -55} {:instruction float_cos})
Best program: (integer_pop float_dec integer_pop integer_dup_times print_float in1 float_dec integer_shove float_rot float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_add float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank float_dec integer_max float_dec integer_max float_yank float_dec float_mult float_dec float_dec float_yank float_dec float_dec float_yank float_mult float_dec integer_max float_dec integer_max float_yank float_dec float_mult float_dec float_dec float_rot float_yank float_mult float_yank float_dec float_dec float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc float_yankdup -76.57038870316195 float_dup_items integer_shove float_tan integer_max integer_shove -55 float_cos)
Errors: [29.0 2 62.0 3 46.0 12 51.0 10 59.0 3 61.0 3 23.0 10 70.0 2 44.0 2 10.0 1 9.0 1 37.0 2 99.0 11 14.0 2 50.0 2 26.0 2 19.0 12 110.0 2 30.0 1 108.0 13 74.0 3 29.0 2 35.0 3 1.0 1 54.0 3]
Total: 1258.0
Mean: 25.16
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3368.7779045
Median total errors in population: 1313.0
Error averages by case: (122.79479989999997 2.946 153.27002560000003 3.759 137.0001821 12.059 116.6609733 11.086 133.09617310000002 3.979 151.84553689999996 4.006 116.0164651 11.01 160.31974880000004 3.783 137.72400699999997 3.996 97.2971205 12.366 92.72858169999998 6.239 113.16690520000002 3.174 164.47522310000002 11.119 91.1181626 2.746 126.37351799999999 3.959 104.0320176 3.139 109.0323734 12.153 177.980582 3.927 123.59798680000002 3.092 165.4907719 12.146 164.37660129999998 4.091 104.312237 2.993 112.0828292 4.107 98.52054670000001 3.037 146.4665357 4.086)
Error minima by case: (5.4475 1 8.9725 2 0.9473 8 3.9587 8 18.4252 1 27.7951 2 0.7 6 26.4312 2 24.7053 2 0.7626 1 3.8436 1 13.0 1 21.5748 8 0.0 0 26.0 2 2.0 1 0.0061 7 0.6371 2 0.6989 1 30.5748 7 14.4213 2 5.0 1 11.0 2 1.0 1 1.2672 2)
Average genome size in population (length): 69.99
Average program size in population (points): 70.99
Average percent parens in population: 0.015
Minimum age in population: 20.7105712890625
Maximum age in population: 24.69598388671875
Average age in population: 23.08033770751953
Median age in population: 23.09750366210938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.074
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 24388715
--- Timings ---
Current time: 1529615308592 milliseconds
Total Time:          61.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.8 seconds, 40.7%
Fitness Testing:     28.9 seconds, 47.2%
Report:               7.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 58793.0
Test mean error for best: 29.39650
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -66.4474659361
Correct output: -136.0274654831 | Program output: -82.0274654831
Correct output: -9.2468197583  | Program output: 28.7531802417 
Correct output: 10.6350720891  | Program output: -48.3649279109
Correct output: -59.3991693798 | Program output: -126.3991693798
Correct output: -115.2048572849 | Program output: -62.2048572849
Correct output: -6.125501297   | Program output: 8.874498703   
Correct output: -134.5687838788 | Program output: -72.5687838788
Correct output: -148.7052852825 | Program output: -112.7052852825
Correct output: -10.1232538326 | Program output: -8.1232538326 
Correct output: -19.3635646028 | Program output: -18.3635646028
Correct output: -50.8267415348 | Program output: -95.8267415348
Correct output: 50.8166032664  | Program output: -56.1833967336
Correct output: 33.6989683486  | Program output: 11.6989683486 
Correct output: 125.1419974748 | Program output: 67.1419974748 
Correct output: 81.3713946753  | Program output: 47.3713946753 
Correct output: -12.8663238977 | Program output: -1.8663238977 
Correct output: -8.8091035841  | Program output: -126.8091035841
Correct output: -84.6988657133 | Program output: -62.6988657133
Correct output: 72.6804102537  | Program output: -43.3195897463
Correct output: -154.5786526245 | Program output: -88.5786526245
Correct output: -23.511495195  | Program output: -60.511495195 
Correct output: -86.6536921432 | Program output: -129.6536921432
Correct output: -94.9646390768 | Program output: -101.9646390768
Correct output: -145.2671699493 | Program output: -99.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_mod})
Best program: (integer_pop float_dec integer_pop integer_dup_times print_float in1 float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_yank float_mult float_shove float_dec float_dec float_swap float_dup_items integer_max float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_dec float_mult float_yank float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger integer_div float_swap integer_dup integer_inc integer_dup_times float_dup in1 float_yank 21 float_tan float_mod)
Errors: [21.0 2 54.0 3 38.0 12 59.0 11 67.0 3 53.0 3 15.0 11 62.0 3 36.0 2 2.0 2 1.0 1 45.0 2 107.0 10 22.0 2 58.0 3 34.0 2 11.0 1 118.0 3 22.0 2 116.0 13 66.0 3 37.0 2 43.0 3 7.0 3 46.0 3]
Total: 1245.0
Mean: 24.9
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3226.7681819000004
Median total errors in population: 1300.0
Error averages by case: (116.04122549999998 3.074 146.51700979999998 3.889 130.3608368 12.023 113.68689129999997 11.11 129.4347781 3.845 145.25002750000002 3.87 109.22625269999999 11.04 153.7913074 3.971 130.55528450000003 3.788 89.59559340000001 12.798 82.0712352 3.435 109.11310900000001 2.945 162.09542459999994 11.046 88.17822349999999 3.032 123.1383974 3.844 99.8803682 2.981 102.09126880000002 11.948 174.90975290000006 3.907 116.8469466 3.047 162.52800210000004 12.187 157.6262831 3.88 100.06157979999998 2.862 108.0430887 3.971 91.1600312 2.89 139.42726379999996 3.755)
Error minima by case: (0.4475 1 4.9725 2 0.3061 7 5.9376 10 2.0624 1 23.7951 2 0.9083 7 22.4312 2 27.7053 2 0.0865 1 0.2408 1 14.0 1 42.0624 8 0.0 0 6.9376 2 3.0 1 0.1327 1 0.3629 2 4.3011 1 40.4527 7 10.4213 2 6.0 1 10.0833 2 0.0 0 4.2672 2)
Average genome size in population (length): 74.324
Average program size in population (points): 75.324
Average percent parens in population: 0.014
Minimum age in population: 22.4161376953125
Maximum age in population: 26.40399169921875
Average age in population: 24.63315255737305
Median age in population: 24.65115356445312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.076
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 26246815
--- Timings ---
Current time: 1529615312555 milliseconds
Total Time:          64.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.2 seconds, 40.5%
Fitness Testing:     30.7 seconds, 47.4%
Report:               7.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 58502.0
Test mean error for best: 29.25100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -65.4474659361
Correct output: -136.0274654831 | Program output: -81.0274654831
Correct output: -9.2468197583  | Program output: 29.7531802417 
Correct output: 10.6350720891  | Program output: -47.3649279109
Correct output: -59.3991693798 | Program output: -125.3991693798
Correct output: -115.2048572849 | Program output: -61.2048572849
Correct output: -6.125501297   | Program output: 9.874498703   
Correct output: -134.5687838788 | Program output: -71.5687838788
Correct output: -148.7052852825 | Program output: -111.7052852825
Correct output: -10.1232538326 | Program output: -7.1232538326 
Correct output: -19.3635646028 | Program output: -17.3635646028
Correct output: -50.8267415348 | Program output: -94.8267415348
Correct output: 50.8166032664  | Program output: -55.1833967336
Correct output: 33.6989683486  | Program output: 12.6989683486 
Correct output: 125.1419974748 | Program output: 68.1419974748 
Correct output: 81.3713946753  | Program output: 48.3713946753 
Correct output: -12.8663238977 | Program output: -0.8663238977 
Correct output: -8.8091035841  | Program output: -125.8091035841
Correct output: -84.6988657133 | Program output: -61.6988657133
Correct output: 72.6804102537  | Program output: -42.3195897463
Correct output: -154.5786526245 | Program output: -87.5786526245
Correct output: -23.511495195  | Program output: -59.511495195 
Correct output: -86.6536921432 | Program output: -128.6536921432
Correct output: -94.9646390768 | Program output: -100.9646390768
Correct output: -145.2671699493 | Program output: -98.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_sin} {:instruction float_dup} {:instruction float_max} {:instruction integer_swap} {:instruction integer_flush} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_yankdup float_min float_dec float_dec integer_shove float_rot float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_yank float_mult float_yank integer_dup_items float_dec float_add float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank integer_dec float_dec float_dec integer_max float_shove float_yankdup float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger integer_sub float_pop integer_mult float_yankdup integer_add float_sin float_dup float_max integer_swap integer_flush float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_swap integer_flush integer_div float_swap integer_dup integer_dup)
Errors: [22.0 2 55.0 3 39.0 11 58.0 11 66.0 3 54.0 2 16.0 11 63.0 3 37.0 2 3.0 2 2.0 1 44.0 2 106.0 10 21.0 2 57.0 3 33.0 2 12.0 2 117.0 3 23.0 2 115.0 12 67.0 3 36.0 2 42.0 3 6.0 3 47.0 3]
Total: 1244.0
Mean: 24.88
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3522.5624468
Median total errors in population: 1291.0
Error averages by case: (124.6700605 3.347 154.9269328 4.257 137.03358000000006 11.987 131.6642871 11.222 142.70736330000003 4.271 153.4240492 4.234 116.8225071 11.091 161.94248950000008 4.292 139.51689629999998 3.736 101.95596460000002 12.268 98.59282920000003 3.431 123.91307849999995 3.313 176.62985170000005 11.202 101.89349930000003 3.235 136.15790829999995 4.192 113.7713182 3.1 111.62512979999998 11.831 186.60340240000005 4.181 125.3867904 3.389 181.76025960000004 12.496 165.98555140000002 4.028 114.84999680000001 3.266 122.12566379999997 4.222 100.72753459999998 3.105 148.1705024 4.009)
Error minima by case: (0.4475 1 12.9725 2 1.7566 8 9.8265 9 24.4274 2 17.586 2 0.1549 1 30.4312 2 27.0 1 0.2132 1 0.0968 1 2.4274 1 12.7195 9 0.0 0 15.4274 2 2.0 1 0.9077 1 2.6533 2 0.3011 1 5.2342 6 18.4213 2 0.1296 1 0.4274 2 0.0 0 5.2672 2)
Average genome size in population (length): 77.826
Average program size in population (points): 78.826
Average percent parens in population: 0.013
Minimum age in population: 23.7515869140625
Maximum age in population: 28.1116943359375
Average age in population: 26.19842695617676
Median age in population: 26.18791961669922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.08
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 28192465
--- Timings ---
Current time: 1529615317109 milliseconds
Total Time:          69.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.9 seconds, 40.2%
Fitness Testing:     32.9 seconds, 47.5%
Report:               8.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 59076.0
Test mean error for best: 29.53800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -67.4474659361
Correct output: -136.0274654831 | Program output: -83.0274654831
Correct output: -9.2468197583  | Program output: 27.7531802417 
Correct output: 10.6350720891  | Program output: -49.3649279109
Correct output: -59.3991693798 | Program output: -127.3991693798
Correct output: -115.2048572849 | Program output: -63.2048572849
Correct output: -6.125501297   | Program output: 7.874498703   
Correct output: -134.5687838788 | Program output: -73.5687838788
Correct output: -148.7052852825 | Program output: -113.7052852825
Correct output: -10.1232538326 | Program output: -9.1232538326 
Correct output: -19.3635646028 | Program output: -19.3635646028
Correct output: -50.8267415348 | Program output: -96.8267415348
Correct output: 50.8166032664  | Program output: -57.1833967336
Correct output: 33.6989683486  | Program output: 10.6989683486 
Correct output: 125.1419974748 | Program output: 66.1419974748 
Correct output: 81.3713946753  | Program output: 46.3713946753 
Correct output: -12.8663238977 | Program output: -2.8663238977 
Correct output: -8.8091035841  | Program output: -127.8091035841
Correct output: -84.6988657133 | Program output: -63.6988657133
Correct output: 72.6804102537  | Program output: -44.3195897463
Correct output: -154.5786526245 | Program output: -89.5786526245
Correct output: -23.511495195  | Program output: -61.511495195 
Correct output: -86.6536921432 | Program output: -130.6536921432
Correct output: -94.9646390768 | Program output: -102.9646390768
Correct output: -145.2671699493 | Program output: -100.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction in1} {:instruction integer_flush} {:instruction integer_mod} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction 18} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_sin} {:instruction float_dup} {:instruction float_max} {:instruction integer_swap} {:instruction integer_flush} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_swap})
Best program: (integer_max in1 integer_flush integer_mod print_integer float_rot float_rot integer_max integer_yankdup float_swap float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank float_mult float_dec integer_max float_dec integer_max float_yank float_dec float_mult integer_flush float_dec float_dec float_yank float_mult float_dec float_dec float_dec float_yank float_mult float_dec integer_max float_dec integer_max 18 float_dec float_mult float_dec float_dec integer_max float_yank float_dec float_dup_items float_dec float_dec float_yank integer_dec float_dec float_dec integer_max float_shove float_yankdup float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger integer_sub float_pop integer_mult float_yankdup integer_add float_sin float_dup float_max integer_swap integer_flush float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_swap)
Errors: [20.0 1 53.0 2 37.0 12 60.0 11 68.0 3 52.0 3 14.0 11 61.0 2 35.0 2 1.0 2 0.0 0 46.0 2 108.0 10 23.0 2 59.0 3 35.0 2 10.0 1 119.0 3 21.0 2 117.0 13 65.0 3 38.0 2 44.0 3 8.0 3 45.0 2]
Total: 1239.0
Mean: 24.78
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3469.9602756
Median total errors in population: 1282.0
Error averages by case: (120.24706789999998 3.17 150.29024999999996 4.048 133.6307062 11.956 132.24614359999998 11.167 145.95836840000007 4.153 149.006555 4.101 111.6834123 11.068 157.39561279999998 4.065 134.95941829999998 3.463 93.44182580000002 9.612 88.19354670000003 2.976 127.9462412 3.323 178.88817469999998 11.06 103.17709069999998 3.21 139.36645879999998 4.172 117.02950370000002 3.266 104.41471750000001 11.666 190.31793090000008 4.095 121.04689349999997 3.273 180.72890999999998 12.81 161.21030309999998 4.197 117.6999721 3.168 125.1876132 4.214 97.29513189999999 2.653 143.51242730000004 4.2)
Error minima by case: (2.4475 1 5.0275 2 0.2434 7 9.8197 7 17.1712 2 6.7951 2 0.1299 1 5.4312 2 27.0 1 0.0895 1 0.0 0 13.0 1 50.2091 8 1.0 1 25.142 2 2.0 1 0.3775 1 0.6533 2 1.3011 1 35.4527 9 0.4213 2 0.2698 1 10.0833 2 0.0 0 10.2672 1)
Average genome size in population (length): 80.954
Average program size in population (points): 81.954
Average percent parens in population: 0.013
Minimum age in population: 25.6978759765625
Maximum age in population: 29.72868347167969
Average age in population: 27.86301856231689
Median age in population: 27.91464233398438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.09
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 30216315
--- Timings ---
Current time: 1529615321125 milliseconds
Total Time:          73.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.3 seconds, 39.8%
Fitness Testing:     34.9 seconds, 47.5%
Report:               9.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction integer_shove} {:instruction float_add} {:instruction integer_mod} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dup} {:instruction in1})
Best program: (integer_pop float_dec integer_pop integer_dup_times print_float in1 float_dec float_dec integer_shove float_rot integer_max integer_yankdup float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec integer_max float_add float_dec float_dec float_min float_dec integer_shove float_add integer_mod float_swap float_dec float_dec integer_inc float_mult float_dec float_dec float_dec float_add integer_max float_dec integer_max float_yank float_dec float_mult float_div float_dec float_rot float_yank float_mult float_yank float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max integer_yank float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger integer_div integer_stackdepth integer_dup integer_inc integer_dup_times float_dup in1)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3537.6774131999996
Median total errors in population: 1257.0
Error averages by case: (120.36737439999999 3.176 150.5180779 4.067 134.3643442 11.987 136.30702659999997 11.087 153.7759005 4.067 149.01055660000006 4.045 113.08929229999997 10.916 157.5587762 4.03 134.9865663 3.353 91.159424 4.926 85.01590519999999 2.584 134.09335559999997 3.252 185.02436049999997 10.713 111.6092607 3.225 147.74189219999997 4.064 125.70384489999999 3.235 103.50985310000004 9.863 198.30341190000007 4.024 121.0875291 3.18 182.9489496 12.872 161.4349941 4.143 125.47148559999997 3.071 133.1121528 4.157 100.9869334 2.723 143.67514549999999 4.061)
Error minima by case: (3.4475 1 13.9725 2 0.5616 9 2.3778 9 18.1 2 1.2049 2 0.567 1 2.5688 2 25.0 1 0.0 0 0.0 0 9.5276 1 37.8037 9 2.301 1 15.142 2 2.0 1 0.0 0 0.0879 2 1.3011 1 35.7723 9 14.5787 2 0.1296 1 10.3463 2 0.0 0 11.2672 1)
Average genome size in population (length): 88.133
Average program size in population (points): 89.133
Average percent parens in population: 0.012
Minimum age in population: 27.31166839599609
Maximum age in population: 31.16052627563477
Average age in population: 29.46081856536865
Median age in population: 29.51602554321289
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.092
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 32419640
--- Timings ---
Current time: 1529615325570 milliseconds
Total Time:          77.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.7 seconds, 39.5%
Fitness Testing:     37.2 seconds, 47.8%
Report:               9.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_rot} {:instruction in1} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_rot} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction float_cos} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_sin} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94} {:instruction float_dup_items} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_cos})
Best program: (integer_sub float_div float_sin integer_rot in1 integer_yankdup float_min float_dec float_dec integer_shove float_rot float_dec float_yank float_mult float_dec float_frominteger float_dec float_dec float_yank float_yank float_dec float_swap float_dup_items integer_max float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec float_dec float_dup_times float_dec float_mult float_yank float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_yank float_dec float_rot float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_items float_rot float_tan float_pop integer_mult float_cos integer_add in2 float_sin float_dup float_sin float_sin float_yank 21 float_tan float_stackdepth float_frominteger integer_fromfloat integer_max float_sin 94 float_dup_items integer_max integer_shove integer_shove float_cos)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3823.1404940000007
Median total errors in population: 1250.0
Error averages by case: (128.49911379999998 3.456 158.4806366 4.334 142.37895749999998 11.961 151.91177939999994 11.209 170.02201460000003 4.362 156.33810600000004 4.245 118.65647230000003 10.982 165.10119410000001 4.334 144.02509860000006 3.587 97.52243829999996 3.33 92.57234429999997 2.808 150.7105951 3.526 199.85697000000002 10.544 125.5107776 3.434 164.49068159999996 4.33 141.6390915 3.468 108.12589229999998 6.126 213.50005050000001 4.304 129.0353896 3.469 198.0399204999999 12.876 169.47209120000005 4.345 140.82762079999998 3.375 149.8714351 4.4 117.51845699999998 3.769 152.36036570000005 4.099)
Error minima by case: (10.0 1 2.7626 2 0.4384 7 9.64 8 3.5243 2 1.7626 2 0.4532 1 1.7075 2 15.2374 1 0.0 0 0.0 0 1.279 1 22.3677 7 6.0 1 9.142 2 3.0 1 0.0 0 0.1559 2 7.6989 1 0.5039 7 2.5787 2 0.0669 1 0.721 2 0.0 0 5.2374 1)
Average genome size in population (length): 96.765
Average program size in population (points): 97.765
Average percent parens in population: 0.010
Minimum age in population: 28.35205078125
Maximum age in population: 32.78068542480469
Average age in population: 30.97153866958618
Median age in population: 31.05293560028076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.103
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 34838765
--- Timings ---
Current time: 1529615330111 milliseconds
Total Time:          82.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.4 seconds, 39.3%
Fitness Testing:     39.5 seconds, 48.0%
Report:              10.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_yankdup float_min integer_sub integer_rot integer_shove float_rot float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_yankdup float_yank float_mult float_dec float_dec float_add float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec float_add float_dec float_dec float_yank float_mult float_dec integer_swap integer_max float_yank float_dec float_mult float_dec float_dec float_yank float_dec float_dec float_yank float_mult float_dec integer_max float_dec integer_max float_yank float_dec float_mult float_dec float_dec float_rot float_yank float_mult float_yank float_dec float_dec float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3610.9494072000007
Median total errors in population: 1244.0
Error averages by case: (119.95459459999996 3.238 149.7158033 4.117 133.62901179999997 11.963 145.43179899999998 11.051 161.5115572 4.247 148.20133890000002 4.188 109.28447429999999 10.868 156.66090640000002 4.0 134.65300620000002 3.477 88.38748909999998 3.043 84.3591884 2.724 141.8454263 3.428 192.48237870000006 10.424 118.16984559999997 3.35 156.2566942 4.15 132.7479302 3.393 99.1400021 4.551 205.5546338 4.078 120.64742639999999 3.256 192.20192850000004 12.849 160.62799260000003 4.289 132.88089659999994 3.266 141.18872969999995 4.283 109.90693790000002 3.96 143.47841540000002 3.838)
Error minima by case: (8.0 1 1.0275 2 0.1323 9 10.4524 9 1.9058 2 5.2049 2 0.5371 1 6.5688 2 23.0 1 0.0 0 0.0 0 6.6666 1 16.0017 6 1.0 1 3.3793 2 6.0 1 0.553 1 0.4521 1 8.6989 1 23.4527 8 1.4213 2 0.0067 1 15.0 2 0.0 0 21.2672 1)
Average genome size in population (length): 99.07
Average program size in population (points): 100.07
Average percent parens in population: 0.010
Minimum age in population: 29.9390869140625
Maximum age in population: 34.27651882171631
Average age in population: 32.48081172084808
Median age in population: 32.49301958084106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.099
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 37315565
--- Timings ---
Current time: 1529615334854 milliseconds
Total Time:          87.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.9 seconds, 38.9%
Fitness Testing:     42.1 seconds, 48.3%
Report:              11.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_max} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_sin} {:instruction float_dup} {:instruction float_max} {:instruction integer_swap})
Best program: (integer_pop float_dec integer_pop integer_dup_times print_float in1 float_dec integer_shove float_rot float_dec float_yank float_dec float_dec float_yank float_dec integer_min float_dec float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_yank float_mult float_shove float_dec float_dec float_swap float_dup_items integer_max float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_dec float_mult float_yank float_dec float_yank float_mult float_dec integer_max integer_max float_add float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_yank integer_sub float_dec float_yank float_mult float_dec float_yank integer_max float_dec float_dec integer_sub float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times integer_add float_sin float_dup float_max integer_swap)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3091.1713184
Median total errors in population: 1239.0
Error averages by case: (97.29782389999997 3.067 128.07071200000004 3.966 109.84216590000001 11.985 127.48501230000001 10.792 139.94279310000005 4.099 126.24767720000006 4.11 88.092176 10.575 135.15506960000002 3.655 112.8368657 3.323 71.90550809999999 2.509 68.8084987 2.724 121.16427610000004 3.245 174.1083428 10.403 97.62367239999996 3.253 134.12404530000006 3.798 110.6390585 3.217 81.41397030000002 3.789 184.2121453 3.722 98.13320030000004 2.903 178.20604809999998 12.877 139.3983996 4.144 110.60441200000001 3.118 119.30491639999997 4.134 88.48426220000003 3.933 121.23826659999997 3.491)
Error minima by case: (8.0 1 2.9725 2 2.747 9 9.3649 7 19.1019 1 9.7951 2 2.0 1 8.4312 2 23.0 1 0.0 0 0.0 0 10.5295 1 30.8166 9 0.0 0 26.0 2 2.0 1 0.0 0 1.7325 1 6.6989 1 52.6804 8 3.5787 2 0.2987 1 11.0 2 0.0 0 19.2672 1)
Average genome size in population (length): 99.839
Average program size in population (points): 100.839
Average percent parens in population: 0.010
Minimum age in population: 31.57839775085449
Maximum age in population: 35.87947607040405
Average age in population: 33.96602323532104
Median age in population: 33.99402284622192
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.1
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 39811590
--- Timings ---
Current time: 1529615339321 milliseconds
Total Time:          91.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.4 seconds, 38.6%
Fitness Testing:     44.5 seconds, 48.5%
Report:              11.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_min} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc})
Best program: (integer_sub float_div float_sin integer_yank in1 integer_yankdup float_dec integer_min float_rot float_dec integer_dup float_dec float_dec float_dec float_yank float_mult float_dec float_yank float_mult float_dec float_mult float_dec float_dec float_dec float_yank float_mult integer_min float_dec float_dec integer_max integer_inc float_dec float_dec float_dec float_add float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank integer_dec float_dec float_dec integer_yank float_dec float_add float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_yank float_dec float_dec float_add print_float float_dup_times integer_inc integer_yank float_min float_max float_sin float_inc)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3543.796092100001
Median total errors in population: 1239.0
Error averages by case: (114.65296829999996 3.278 144.28369750000005 4.143 128.10557450000005 12.07 145.26369830000004 10.83 160.30174920000002 4.257 142.98166089999998 4.272 106.40806810000002 10.563 151.28669379999997 3.746 129.22180300000002 3.455 89.84557579999996 2.472 85.97299109999999 2.986 140.53886680000002 3.425 192.4777272 10.506 116.13876609999998 3.285 152.3760605 3.811 130.5136832 3.33 99.8484877 4.002 205.81398070000012 3.781 115.34013600000003 2.956 192.4383024999999 12.974 155.12838030000003 4.241 131.96520139999996 3.278 139.66568449999997 4.261 105.96496600000005 4.071 137.66436869999998 3.604)
Error minima by case: (1.4475 1 1.9725 2 0.8677 8 13.448 8 25.4858 2 2.2049 2 0.1342 1 0.07 2 25.0 1 0.0 0 0.0 0 16.0 1 52.4342 9 0.0 0 3.142 2 5.0 1 0.0 0 0.8192 2 3.3011 1 61.4115 8 4.07 2 0.5416 1 14.0 2 0.0 0 9.2672 1)
Average genome size in population (length): 99.38
Average program size in population (points): 100.38
Average percent parens in population: 0.010
Minimum age in population: 32.90426445007324
Maximum age in population: 37.39014506340027
Average age in population: 35.33848394846916
Median age in population: 35.34853672981262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.092
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 42296190
--- Timings ---
Current time: 1529615344114 milliseconds
Total Time:          96.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.8 seconds, 38.2%
Fitness Testing:     47.2 seconds, 49.0%
Report:              12.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_min} {:instruction float_max} {:instruction float_sin} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_swap} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_dup} {:instruction float_max} {:instruction float_yank} {:instruction integer_pop} {:instruction -16} {:instruction integer_rot} {:instruction float_add} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_add} {:instruction integer_dup})
Best program: (integer_pop float_dec integer_pop integer_dup_times print_float in1 float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_yank float_mult float_shove float_dec float_dec float_swap float_dup_items integer_max float_dec integer_min float_dec integer_dup float_dec integer_shove float_rot float_dec integer_dup float_dec float_dec float_dec float_dec float_dec float_mult float_yank float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec print_float float_add print_float float_dup_times float_dup_times float_min float_max float_sin float_inc integer_rot integer_dec float_dup_items float_swap float_tan float_pop integer_mult float_yankdup integer_add in2 float_sin float_dup float_max float_yank integer_pop -16 integer_rot float_add integer_inc integer_swap integer_flush integer_div float_add integer_dup)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3849.2936215000004
Median total errors in population: 1239.0
Error averages by case: (129.32127699999998 3.522 158.8914414 4.397 141.7743254 12.05 154.7269398 10.804 171.72460430000007 4.462 157.38017109999998 4.473 119.30189620000006 10.482 165.7294035 4.003 144.28411130000003 3.703 93.96475229999997 2.62 90.37452 3.254 152.5227699 3.597 202.69334000000003 10.543 130.10851369999997 3.535 166.78085480000001 4.004 144.9733356 3.541 106.86936290000001 4.25 214.38659879999997 3.963 129.9629502 3.157 199.87357299999994 12.935 169.74027490000003 4.492 144.32210179999998 3.479 152.2084751 4.478 120.83647750000006 4.297 152.67655100000002 3.824)
Error minima by case: (6.0 1 2.9725 2 0.8837 8 9.6866 7 24.1563 2 5.2049 2 0.0 0 2.1909 2 21.0 1 0.0 0 0.0 0 13.0 1 23.9619 8 3.548 1 13.142 2 2.0 1 0.2895 1 0.6501 1 7.0 1 33.7723 7 1.8091 2 0.4595 1 1.4051 2 0.0 0 18.1909 1)
Average genome size in population (length): 99.543
Average program size in population (points): 100.543
Average percent parens in population: 0.010
Minimum age in population: 34.07585144042969
Maximum age in population: 38.83905124664307
Average age in population: 36.68740457510948
Median age in population: 36.73041135072708
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.108
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 44784840
--- Timings ---
Current time: 1529615348706 milliseconds
Total Time:         101.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.4 seconds, 38.0%
Fitness Testing:     49.7 seconds, 49.1%
Report:              12.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction float_sin} {:instruction integer_rot} {:instruction in1} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction tag_integer_303} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction 18} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_yank} {:instruction 21} {:instruction float_inc})
Best program: (integer_sub float_div float_sin integer_rot in1 integer_yankdup float_min float_dec float_dec integer_shove tag_integer_303 float_dec float_yank float_mult float_dec float_dec float_dec print_integer float_dup_items float_yank float_mult float_shove float_dec float_dec float_swap float_dup_items integer_max float_mult float_shove float_dec float_dec float_yank float_mult float_dec integer_shove float_dec integer_max float_yank float_dec float_mult float_dec float_dec float_yank float_dec float_dec float_yank float_mult float_dec integer_max float_dec integer_max float_yank float_dec float_mult float_dec float_dec float_rot 18 float_dec float_mult float_dec float_dec integer_max float_yank float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger integer_div float_swap integer_dup integer_inc integer_dup_times float_dup in1 float_yank 21 float_inc)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3834.9812828000004
Median total errors in population: 1239.0
Error averages by case: (128.10598819999996 3.473 158.27626 4.384 141.59049399999998 12.088 153.57570089999996 10.844 171.20104519999998 4.456 156.09716299999994 4.48 117.29041440000002 10.538 164.86255880000002 3.943 143.76760679999998 3.696 95.74838510000004 2.669 92.466287 3.2 151.708499 3.615 201.30543369999992 10.553 128.25895770000002 3.519 167.0926764 4.025 144.9350173 3.56 106.85453490000003 4.17 213.99336179999997 3.978 128.6967122 3.175 199.76918419999993 12.958 169.23824779999998 4.492 142.78428020000004 3.47 151.5868567 4.471 119.9472637 4.274 151.9493538 3.848)
Error minima by case: (7.0 1 1.9725 2 0.3164 8 9.9251 7 19.2733 1 0.7552 2 0.7444 1 2.4312 2 22.0 1 0.0 0 0.0 0 15.988 1 20.7267 9 2.699 1 22.142 2 6.0 1 0.0 0 0.3935 1 8.0 1 29.7267 6 3.5787 2 0.2144 1 15.0 2 0.0 0 23.2672 1)
Average genome size in population (length): 98.466
Average program size in population (points): 99.466
Average percent parens in population: 0.010
Minimum age in population: 35.9182391166687
Maximum age in population: 39.93673533201218
Average age in population: 38.0371659822464
Median age in population: 38.05341517925262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.097
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 47246540
--- Timings ---
Current time: 1529615353491 milliseconds
Total Time:         105.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.0 seconds, 37.8%
Fitness Testing:     52.0 seconds, 49.3%
Report:              13.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_pop} {:instruction -16} {:instruction integer_shove} {:instruction float_add} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_min} {:instruction float_max})
Best program: (in1 integer_yankdup float_min float_dec float_dec integer_shove float_rot float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_yankdup float_yank float_mult float_dec float_dec float_add float_dec float_dec float_mod float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop float_tan integer_inc float_frominteger integer_sub integer_pop -16 integer_shove float_add integer_inc integer_inc float_inc float_add integer_min float_max)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3515.3573448
Median total errors in population: 1239.0
Error averages by case: (115.09440969999994 3.239 145.2222416 4.13 127.3097991 12.02 144.13015279999996 10.744 158.91686640000003 4.218 143.74550879999998 4.224 102.68615700000004 10.529 152.10172649999998 3.734 130.23460930000002 3.424 83.59292860000001 2.441 81.32753520000003 3.021 139.25345620000002 3.357 191.0010845 10.452 113.74791790000002 3.331 152.96950259999997 3.81 130.60036630000002 3.341 94.38388250000003 3.875 202.49316130000003 3.73 115.88348720000002 2.909 191.4214620999999 12.939 156.2064528 4.254 130.63229369999996 3.254 138.5512105 4.226 106.33701260000005 4.055 138.68711960000002 3.57)
Error minima by case: (7.0 1 1.0275 2 0.5442 7 1.9052 7 19.2466 1 7.7951 2 1.0 1 6.4312 2 22.0 1 0.0 0 0.0 0 9.2867 1 24.1834 8 4.0 1 26.142 2 3.0 1 0.0 0 0.6501 2 8.0 1 11.3196 7 3.5787 2 0.6113 1 1.4051 2 0.0 0 26.2672 1)
Average genome size in population (length): 98.596
Average program size in population (points): 99.596
Average percent parens in population: 0.010
Minimum age in population: 37.01086640357971
Maximum age in population: 41.37925741076469
Average age in population: 39.39730857023597
Median age in population: 39.46753890812397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.097
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 49711465
--- Timings ---
Current time: 1529615358573 milliseconds
Total Time:         110.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.6 seconds, 37.5%
Fitness Testing:     54.7 seconds, 49.4%
Report:              14.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction integer_yank} {:instruction in1} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_min} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_mod})
Best program: (integer_pop float_dec integer_pop integer_dup_times print_float in1 float_dec integer_yank in1 integer_yankdup float_min float_dec float_dec float_frominteger float_dec float_mult float_yankdup float_dec float_dec float_yank float_dec integer_min float_dec integer_dup float_dec integer_shove float_rot float_dec integer_dup integer_swap float_min float_dec integer_shove float_dec integer_mod float_swap float_dup_items float_mult float_yank float_dec float_dec float_add float_dup_items integer_min float_mult float_yank float_dec float_dec float_yank integer_dec float_dec float_dec float_dec float_dec float_add float_dup_items float_yank float_mult float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_yank integer_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger integer_div integer_mod integer_dup integer_inc integer_dup_times float_dup in1 float_yank 21 float_tan float_mod)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3575.2209262000006
Median total errors in population: 1239.0
Error averages by case: (118.46274079999995 3.38 148.28773740000003 4.238 130.17698729999995 12.009 145.8141258 10.76 160.88350040000012 4.337 146.83115599999996 4.37 104.4857207 10.5 155.20685809999995 3.853 133.6755105 3.527 84.96072939999998 2.5 83.92058339999997 3.107 142.01533340000003 3.48 192.9101755 10.469 114.85203829999993 3.378 154.34612879999997 3.866 131.39433990000003 3.407 95.14571159999998 3.951 203.84817120000017 3.827 119.15810970000008 3.04 194.0214267 12.915 159.27558699999994 4.358 131.84582569999995 3.343 140.79221299999992 4.346 110.07659300000005 4.19 141.98762260000007 3.695)
Error minima by case: (6.0 1 0.9725 2 0.1682 7 7.0527 8 26.563 2 7.7951 2 0.0 0 6.4312 2 21.0 1 0.0 0 0.0 0 14.0 1 1.7446 9 3.0 1 26.142 2 3.0 1 0.0 0 0.1248 2 7.0 1 35.0288 9 3.4213 2 0.4939 1 12.0 2 0.0 0 20.2672 1)
Average genome size in population (length): 97.47
Average program size in population (points): 98.47
Average percent parens in population: 0.010
Minimum age in population: 38.34828495979309
Maximum age in population: 42.77028289437294
Average age in population: 40.81401509621739
Median age in population: 40.85202581435442
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.104
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 52148315
--- Timings ---
Current time: 1529615362934 milliseconds
Total Time:         115.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.0 seconds, 37.3%
Fitness Testing:     57.0 seconds, 49.5%
Report:              15.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction integer_shove} {:instruction float_add} {:instruction integer_mod} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_mult} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dup} {:instruction in1})
Best program: (integer_pop float_dec integer_pop integer_dup_times print_float in1 float_dec float_dec integer_shove float_rot integer_max integer_yankdup float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec integer_max float_add float_dec float_dec float_min float_dec integer_shove float_add integer_mod float_swap float_dec float_dec integer_inc float_mult float_dec float_dec float_dec float_add integer_max float_dec integer_max float_yank float_dec float_mult float_div float_dec float_rot float_yank float_mult float_yank float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max integer_yank float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger integer_div integer_stackdepth integer_dup integer_inc integer_dup_times float_dup in1)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4068.6961705999997
Median total errors in population: 1239.0
Error averages by case: (137.79656839999998 3.622 167.5825209 4.52 149.83957949999996 12.046 164.8504007 10.801 180.68562190000006 4.58 165.28970779999997 4.607 125.44934140000004 10.488 174.11223280000002 4.104 153.42881010000002 3.812 103.20231649999997 2.707 98.9455375 3.405 161.64017160000003 3.733 211.34129000000001 10.559 136.6500436 3.67 176.81497010000004 4.115 153.8304649 3.658 114.69068989999995 4.28 222.51702090000003 4.06 138.31524980000003 3.287 210.5555444 12.934 178.4829814 4.601 152.77825319999997 3.611 161.40497129999997 4.597 130.45691040000003 4.417 161.88997160000005 3.931)
Error minima by case: (0.1183 1 0.9725 2 0.8837 7 5.9493 7 19.7374 2 3.7951 2 0.0 0 2.4312 2 14.8817 1 0.0 0 0.0 0 15.2867 1 20.2626 9 2.0 1 22.142 2 5.0 1 0.0 0 1.6511 2 0.8817 1 29.2626 9 2.5787 2 0.5061 1 1.4051 2 0.0 0 18.2672 1)
Average genome size in population (length): 96.737
Average program size in population (points): 97.737
Average percent parens in population: 0.010
Minimum age in population: 39.54563634097576
Maximum age in population: 44.19287540763617
Average age in population: 42.21800432813913
Median age in population: 42.28759936243296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.113
Error (vector) diversity:			 0.122
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 54566915
--- Timings ---
Current time: 1529615367293 milliseconds
Total Time:         119.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.5 seconds, 37.2%
Fitness Testing:     59.3 seconds, 49.6%
Report:              15.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 59381.0
Test mean error for best: 29.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -128.3991693798
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -114.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -128.8091035841
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -131.6536921432
Correct output: -94.9646390768 | Program output: -103.9646390768
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_max} {:instruction 21} {:instruction float_tan} {:instruction float_rot} {:instruction float_frominteger})
Best program: (integer_pop float_dec integer_pop integer_dup_times print_float in1 float_dec integer_shove float_yank float_dec float_dec float_dup_times float_mult float_dec float_dec integer_max float_add float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_dec float_mult float_yank float_dec float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_yank float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add print_float float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult integer_max 21 float_tan float_rot float_frominteger)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 69.0 3 51.0 3 13.0 10 60.0 2 34.0 2 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 120.0 2 20.0 1 118.0 13 64.0 3 39.0 2 45.0 3 9.0 3 44.0 2]
Total: 1238.0
Mean: 24.76
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3813.7419103999996
Median total errors in population: 1239.0
Error averages by case: (126.83946389999998 3.404 156.51186800000002 4.292 140.24509519999998 12.052 153.70195940000002 10.799 172.5643569 4.392 155.12083950000005 4.398 115.95034480000001 10.585 163.4451045 3.889 141.72345650000003 3.571 95.11153040000004 2.539 89.2758666 3.11 152.92064370000008 3.539 202.83818310000004 10.495 124.82388159999996 3.43 167.04611220000004 3.947 142.67972749999998 3.448 107.27992650000002 4.222 215.6357558 3.919 127.84506090000001 3.07 198.97870239999997 12.934 167.3522258 4.387 144.02892109999996 3.413 151.760849 4.393 117.91883210000003 4.159 150.016203 3.74)
Error minima by case: (2.1814 1 1.9725 2 0.1396 7 10.7344 9 26.8064 2 11.7951 2 0.0 0 10.4312 2 12.8186 1 0.0 0 0.0 0 13.0 1 48.8895 9 0.0 0 26.0 2 2.0 1 0.0 0 0.1909 2 1.1814 1 46.0919 8 1.5787 2 0.4939 1 11.0 2 0.0 0 21.2672 1)
Average genome size in population (length): 95.735
Average program size in population (points): 96.735
Average percent parens in population: 0.011
Minimum age in population: 40.54563634097576
Maximum age in population: 45.59875337034464
Average age in population: 43.60610782463104
Median age in population: 43.67806517891586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.1
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 56960390
--- Timings ---
Current time: 1529615371900 milliseconds
Total Time:         124.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.0 seconds, 37.1%
Fitness Testing:     61.8 seconds, 49.7%
Report:              16.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 60349.06850000003
Test mean error for best: 30.17453
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -102.2775828589
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -102.2775828589
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -102.2775828589
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -102.2775828589
Correct output: -94.9646390768 | Program output: -102.2775828589
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_mod})
Best program: (integer_sub float_div -69.27758285891792 in1 float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_max float_mult float_shove float_dec float_dec float_swap float_dup_items integer_max float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_dec float_mult float_yank float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec integer_max float_add float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_dec float_mult float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_mod float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger float_add integer_inc float_frominteger integer_div float_swap integer_dup integer_inc integer_dup_times float_dup in1 float_yank 21 float_tan float_mod)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 42.8784 13 51.0 3 13.0 10 60.0 2 46.4277 8 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 93.4685 12 20.0 1 118.0 13 64.0 3 39.0 2 15.6239 12 7.3129 13 44.0 2]
Total: 1211.7114
Mean: 24.234228
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3841.0525159
Median total errors in population: 1239.0
Error averages by case: (128.0751115 3.438 157.6115067 4.306 139.78489679999998 12.023 157.28352840000005 10.784 173.3273129 4.412 156.09186570000003 4.414 115.83417530000004 10.516 164.3152178 3.915 142.91838310000003 3.634 94.3993202 2.635 90.79908169999997 3.199 154.98356440000003 3.564 204.7884667 10.48 126.58760210000001 3.486 166.24381860000005 4.012 144.1217801 3.514 105.79176649999998 4.188 216.43350740000002 3.912 128.84112840000003 3.1 202.4991368 12.915 168.4121097 4.421 145.3154724 3.43 153.20699509999997 4.438 119.54493260000001 4.216 151.13983500000003 3.75)
Error minima by case: (7.0 1 2.9725 2 1.0816 7 9.64 8 22.8064 2 2.7951 2 0.2138 1 1.4312 2 22.0 1 0.0 0 0.0 0 13.0 1 23.4218 8 1.0 1 9.142 2 2.0 1 0.0 0 0.3522 2 8.0 1 1.558 7 7.5787 2 0.184 1 11.0 2 0.0 0 22.2672 1)
Average genome size in population (length): 94.935
Average program size in population (points): 95.935
Average percent parens in population: 0.011
Minimum age in population: 42.96972710266709
Maximum age in population: 47.11741119809449
Average age in population: 45.04126191108674
Median age in population: 45.10685316007584
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.098
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 59333840
--- Timings ---
Current time: 1529615376293 milliseconds
Total Time:         128.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.6 seconds, 37.0%
Fitness Testing:     64.0 seconds, 49.8%
Report:              16.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 59568.563500000026
Test mean error for best: 29.78428
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -65.4474659361
Correct output: -136.0274654831 | Program output: -81.0274654831
Correct output: -9.2468197583  | Program output: 29.7531802417 
Correct output: 10.6350720891  | Program output: -47.3649279109
Correct output: -59.3991693798 | Program output: -99.2775828589
Correct output: -115.2048572849 | Program output: -61.2048572849
Correct output: -6.125501297   | Program output: 9.874498703   
Correct output: -134.5687838788 | Program output: -71.5687838788
Correct output: -148.7052852825 | Program output: -99.2775828589
Correct output: -10.1232538326 | Program output: -7.1232538326 
Correct output: -19.3635646028 | Program output: -17.3635646028
Correct output: -50.8267415348 | Program output: -94.8267415348
Correct output: 50.8166032664  | Program output: -55.1833967336
Correct output: 33.6989683486  | Program output: 12.6989683486 
Correct output: 125.1419974748 | Program output: 68.1419974748 
Correct output: 81.3713946753  | Program output: 48.3713946753 
Correct output: -12.8663238977 | Program output: -0.8663238977 
Correct output: -8.8091035841  | Program output: -99.2775828589
Correct output: -84.6988657133 | Program output: -61.6988657133
Correct output: 72.6804102537  | Program output: -42.3195897463
Correct output: -154.5786526245 | Program output: -87.5786526245
Correct output: -23.511495195  | Program output: -59.511495195 
Correct output: -86.6536921432 | Program output: -99.2775828589
Correct output: -94.9646390768 | Program output: -99.2775828589
Correct output: -145.2671699493 | Program output: -98.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_max} {:instruction integer_max} {:instruction float_min} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction integer_max} {:instruction float_max} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction float_mod})
Best program: (integer_sub float_div -69.27758285891792 in1 float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_max float_mult float_dec integer_shove float_dec integer_shove float_mult float_dec float_dec float_yank float_dec integer_max integer_max float_min integer_swap float_dec float_dec float_mult float_yank float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_mult float_yank float_dec float_dec float_yank float_mult float_dec integer_max float_max integer_max float_yank float_dec float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_yank float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_mod float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger float_add integer_inc float_frominteger integer_div float_swap integer_dup integer_inc integer_dup_times float_dup in1 float_yank 21 float_tan float_mod)
Errors: [22.0 2 55.0 3 39.0 11 58.0 11 39.8784 11 54.0 2 16.0 11 63.0 3 49.4277 9 3.0 2 2.0 1 44.0 2 106.0 10 21.0 2 57.0 3 33.0 2 12.0 2 90.4685 11 23.0 2 115.0 12 67.0 3 36.0 2 12.6239 11 4.3129 11 47.0 3]
Total: 1211.7114
Mean: 24.234228
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3742.3255370000006
Median total errors in population: 1239.0
Error averages by case: (124.35434750000002 3.305 154.03748179999997 4.196 136.74046600000005 12.1 154.33194180000004 10.813 168.1052294 4.335 152.75105960000002 4.288 111.4924184 10.511 161.03540529999995 3.818 139.54927330000004 3.517 92.34144280000001 2.439 90.12149930000001 3.025 148.8074093 3.423 200.94457289999994 10.509 122.72819950000003 3.373 159.93685870000004 3.826 137.46062080000002 3.323 102.92430969999998 4.058 211.93412469999998 3.859 125.24142839999999 2.971 200.9053561 12.993 164.84772589999997 4.29 140.5127526 3.301 147.64798560000003 4.346 115.88916639999998 4.142 147.30746119999998 3.616)
Error minima by case: (6.0 1 1.9725 2 0.0067 7 8.1096 8 16.1096 2 9.7951 2 0.0 0 8.4312 2 3.5168 1 0.0 0 0.0 0 5.8904 1 50.0114 7 1.6863 1 7.1096 2 3.0 1 0.0 0 0.6501 2 7.0 1 36.3132 9 3.5787 2 1.7282 1 7.8904 2 0.0 0 6.4832 1)
Average genome size in population (length): 94.81
Average program size in population (points): 95.81
Average percent parens in population: 0.011
Minimum age in population: 44.08502320945263
Maximum age in population: 48.66944563109428
Average age in population: 46.41188477640506
Median age in population: 46.46294556744397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.093
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 61704315
--- Timings ---
Current time: 1529615381026 milliseconds
Total Time:         133.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.1 seconds, 36.8%
Fitness Testing:     66.5 seconds, 49.9%
Report:              17.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 60076.06850000003
Test mean error for best: 30.03803
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -67.4474659361
Correct output: -136.0274654831 | Program output: -83.0274654831
Correct output: -9.2468197583  | Program output: 27.7531802417 
Correct output: 10.6350720891  | Program output: -49.3649279109
Correct output: -59.3991693798 | Program output: -101.2775828589
Correct output: -115.2048572849 | Program output: -63.2048572849
Correct output: -6.125501297   | Program output: 7.874498703   
Correct output: -134.5687838788 | Program output: -73.5687838788
Correct output: -148.7052852825 | Program output: -101.2775828589
Correct output: -10.1232538326 | Program output: -9.1232538326 
Correct output: -19.3635646028 | Program output: -19.3635646028
Correct output: -50.8267415348 | Program output: -96.8267415348
Correct output: 50.8166032664  | Program output: -57.1833967336
Correct output: 33.6989683486  | Program output: 10.6989683486 
Correct output: 125.1419974748 | Program output: 66.1419974748 
Correct output: 81.3713946753  | Program output: 46.3713946753 
Correct output: -12.8663238977 | Program output: -2.8663238977 
Correct output: -8.8091035841  | Program output: -101.2775828589
Correct output: -84.6988657133 | Program output: -63.6988657133
Correct output: 72.6804102537  | Program output: -44.3195897463
Correct output: -154.5786526245 | Program output: -89.5786526245
Correct output: -23.511495195  | Program output: -61.511495195 
Correct output: -86.6536921432 | Program output: -101.2775828589
Correct output: -94.9646390768 | Program output: -101.2775828589
Correct output: -145.2671699493 | Program output: -100.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float})
Best program: (integer_sub float_div -69.27758285891792 in1 float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_max float_mult float_shove float_dec float_dec float_swap float_dup_items integer_max float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_dec float_mult float_yank float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec integer_max float_add float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_dec float_mult float_yankdup float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_mod float_dup_times float_dup_times print_float)
Errors: [20.0 1 53.0 2 37.0 12 60.0 11 41.8784 13 52.0 3 14.0 11 61.0 2 47.4277 8 1.0 2 0.0 0 46.0 2 108.0 10 23.0 2 59.0 3 35.0 2 10.0 1 92.4685 12 21.0 2 117.0 13 65.0 3 38.0 2 14.6239 12 6.3129 13 45.0 2]
Total: 1211.7114
Mean: 24.234228
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3683.1457852000003
Median total errors in population: 1239.0
Error averages by case: (123.10888579999997 3.416 153.15376439999997 4.31 136.30536720000003 12.016 147.14584999999994 10.743 164.6765232 4.612 151.1685217 4.38 111.73101950000006 10.487 159.71177730000002 3.883 138.9869239 3.773 87.4723185 2.507 83.29218509999997 3.158 145.79098000000005 3.491 195.79466689999998 10.446 122.4502689 3.432 159.6242508 3.891 137.17544940000002 3.435 99.82299320000003 4.123 209.15439329999987 4.101 123.81463519999998 3.045 192.81347879999998 12.904 164.18537940000002 4.406 136.44703739999997 3.347 144.42235980000004 4.608 115.29589420000008 4.468 146.89286130000005 3.726)
Error minima by case: (7.0 1 0.9725 2 0.6991 7 9.3735 8 25.1563 2 7.2049 2 1.0 1 6.2776 2 22.0 1 0.0 0 0.0 0 12.0759 1 47.0197 7 8.301 1 8.142 2 1.0759 1 0.0 0 1.6511 2 8.0 1 21.4527 8 2.2776 2 0.8562 1 3.6239 2 0.0 0 22.2672 1)
Average genome size in population (length): 93.591
Average program size in population (points): 94.591
Average percent parens in population: 0.011
Minimum age in population: 45.47299098409712
Maximum age in population: 49.84740733448416
Average age in population: 47.80938832087908
Median age in population: 47.83429425628856
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.105
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 64044165
--- Timings ---
Current time: 1529615385499 milliseconds
Total Time:         138.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.6 seconds, 36.7%
Fitness Testing:     69.0 seconds, 50.0%
Report:              18.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 60349.06850000003
Test mean error for best: 30.17453
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -102.2775828589
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -102.2775828589
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -102.2775828589
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -102.2775828589
Correct output: -94.9646390768 | Program output: -102.2775828589
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_tan} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times})
Best program: (integer_sub float_div -69.27758285891792 in1 float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_max float_mult float_shove float_dec float_dec float_swap float_dup_items integer_max float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_dec float_mult float_yank float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec integer_max float_add float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_mult float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_dec float_mult float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_mod float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_dup float_mult float_yank 21 float_tan integer_inc float_frominteger float_add integer_inc float_frominteger integer_div float_swap integer_dup integer_inc integer_dup_times)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 42.8784 13 51.0 3 13.0 10 60.0 2 46.4277 8 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 93.4685 12 20.0 1 118.0 13 64.0 3 39.0 2 15.6239 12 7.3129 13 44.0 2]
Total: 1211.7114
Mean: 24.234228
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4180.4902728
Median total errors in population: 1239.0
Error averages by case: (143.3300809000001 3.641 172.45889609999998 4.525 156.391571 12.033 167.05070479999992 10.876 180.60034079999983 5.775 170.81503760000004 4.571 132.47098100000002 10.572 179.0896323 4.184 159.81381720000002 4.69 110.99050889999997 3.018 105.62828170000003 3.335 165.89316530000002 3.742 213.64849449999994 10.586 141.43899990000003 3.748 179.8432807 4.213 155.6034859000001 3.675 122.3548133 4.63 222.63132749999963 5.259 144.0193699 3.405 212.12139390000002 12.917 183.15459120000003 4.613 156.53622299999998 3.58 160.80619050000033 5.713 134.46432090000013 5.629 166.38576400000002 4.019)
Error minima by case: (3.0 1 0.9725 2 0.6991 8 1.5498 8 16.5717 1 6.9273 2 0.5371 1 6.2776 2 18.0 1 0.0 0 0.0 0 12.4502 1 4.2869 9 0.0 0 0.5498 2 2.0 1 0.0 0 0.1909 2 4.0 1 12.2582 9 1.4213 2 0.302 1 2.3761 2 0.0 0 22.2672 1)
Average genome size in population (length): 94.097
Average program size in population (points): 95.097
Average percent parens in population: 0.011
Minimum age in population: 46.47299098409712
Maximum age in population: 51.18117192061618
Average age in population: 49.16705032534013
Median age in population: 49.20756080839783
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.126
Error (vector) diversity:			 0.144
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 66396690
--- Timings ---
Current time: 1529615390044 milliseconds
Total Time:         142.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.1 seconds, 36.6%
Fitness Testing:     71.3 seconds, 50.1%
Report:              18.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 60076.06850000003
Test mean error for best: 30.03803
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -67.4474659361
Correct output: -136.0274654831 | Program output: -83.0274654831
Correct output: -9.2468197583  | Program output: 27.7531802417 
Correct output: 10.6350720891  | Program output: -49.3649279109
Correct output: -59.3991693798 | Program output: -101.2775828589
Correct output: -115.2048572849 | Program output: -63.2048572849
Correct output: -6.125501297   | Program output: 7.874498703   
Correct output: -134.5687838788 | Program output: -73.5687838788
Correct output: -148.7052852825 | Program output: -101.2775828589
Correct output: -10.1232538326 | Program output: -9.1232538326 
Correct output: -19.3635646028 | Program output: -19.3635646028
Correct output: -50.8267415348 | Program output: -96.8267415348
Correct output: 50.8166032664  | Program output: -57.1833967336
Correct output: 33.6989683486  | Program output: 10.6989683486 
Correct output: 125.1419974748 | Program output: 66.1419974748 
Correct output: 81.3713946753  | Program output: 46.3713946753 
Correct output: -12.8663238977 | Program output: -2.8663238977 
Correct output: -8.8091035841  | Program output: -101.2775828589
Correct output: -84.6988657133 | Program output: -63.6988657133
Correct output: 72.6804102537  | Program output: -44.3195897463
Correct output: -154.5786526245 | Program output: -89.5786526245
Correct output: -23.511495195  | Program output: -61.511495195 
Correct output: -86.6536921432 | Program output: -101.2775828589
Correct output: -94.9646390768 | Program output: -101.2775828589
Correct output: -145.2671699493 | Program output: -100.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -65} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_sin} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction integer_swap} {:instruction float_yank} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 22})
Best program: (integer_sub float_div -69.27758285891792 in1 float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_max float_mult float_shove float_dec float_dec float_swap float_dup_items integer_max float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec float_dec -65 float_dec float_mult float_yank float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec integer_max float_add float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_dec float_yank float_dec float_dec float_yank integer_mult float_dec float_dec float_mult float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec float_add float_div float_dec float_dec float_div float_yank float_mult float_dec float_dec integer_max float_add float_mod float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_sin float_inc float_dup_times integer_max float_mult float_dec float_dec integer_max float_add float_dec integer_swap float_yank float_mult float_stackdepth float_dec integer_max float_add print_float float_dup_times float_dec print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 22)
Errors: [20.0 1 53.0 2 37.0 12 60.0 11 41.8784 13 52.0 3 14.0 11 61.0 2 47.4277 8 1.0 2 0.0 0 46.0 2 108.0 10 23.0 2 59.0 3 35.0 2 10.0 1 92.4685 12 21.0 2 117.0 13 65.0 3 38.0 2 14.6239 12 6.3129 13 45.0 2]
Total: 1211.7114
Mean: 24.234228
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3782.6131953999925
Median total errors in population: 1238.0
Error averages by case: (126.83777800000001 3.534 156.17009779999998 4.357 142.39791559999998 11.972 151.56925119999994 10.965 153.6170396999991 9.019 154.41517299999995 4.401 119.78220700000004 10.75 162.76792020000002 4.217 148.2255963000001 6.816 98.83050909999999 3.109 93.04215969999998 3.03 147.54501460000003 3.594 199.0518503 10.542 128.3954508 3.574 165.08220549999996 4.236 142.94218540000006 3.583 110.12804380000001 5.565 196.44947169999847 8.357 127.6185189 3.447 195.68634169999996 12.842 167.16805290000005 4.455 139.58461909999997 3.507 132.3247261000013 8.594 115.54392840000062 8.737 150.23113859999998 4.003)
Error minima by case: (8.0 1 4.9725 2 1.0524 8 9.9251 8 9.8784 2 7.2776 2 0.8677 1 0.2776 2 23.0 1 0.0 0 0.0 0 10.8788 1 50.0114 7 0.0 0 26.142 2 3.0 1 0.2531 1 0.1808 2 7.6989 1 24.4527 6 2.5787 2 0.1541 1 0.3761 2 0.0 0 14.2776 1)
Average genome size in population (length): 95.257
Average program size in population (points): 96.257
Average percent parens in population: 0.011
Minimum age in population: 47.47299098409712
Maximum age in population: 52.33691425493453
Average age in population: 50.5495161491615
Median age in population: 50.57261626096442
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.156
Error (vector) diversity:			 0.175
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 68778190
--- Timings ---
Current time: 1529615394620 milliseconds
Total Time:         147.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.7 seconds, 36.6%
Fitness Testing:     73.6 seconds, 50.1%
Report:              19.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 60348.151000000034
Test mean error for best: 30.17408
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -101.2775828589
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -101.2775828589
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -101.2775828589
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -101.2775828589
Correct output: -94.9646390768 | Program output: -101.2775828589
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_swap} {:instruction float_yank} {:instruction integer_inc} {:instruction tagged_984} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_sin} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec})
Best program: (integer_sub float_div -69.27758285891792 in1 float_dec integer_shove float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_max float_mult float_shove float_dec float_dec float_swap float_dup_items integer_max float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_dec integer_max float_yank float_dec float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_add float_swap float_yank integer_inc tagged_984 float_mult float_dec float_frominteger float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_dec float_div float_yank float_mult float_dec float_dec integer_max float_add float_mod float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_sin float_inc float_dup_times integer_max float_mult float_dec float_dec)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 41.8784 13 51.0 3 13.0 10 60.0 2 47.4277 8 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 92.4685 12 20.0 1 118.0 13 64.0 3 39.0 2 14.6239 12 6.3129 13 44.0 2]
Total: 1208.7114
Mean: 24.174229
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4132.274277600004
Median total errors in population: 1217.7114
Error averages by case: (139.2503887 3.681 167.98105529999998 4.481 158.09190290000004 11.881 166.7670946 11.059 158.14790629999916 12.328 166.12345080000003 4.483 134.99088590000005 10.942 174.3136237000001 4.441 164.4730766000002 9.054 119.08748310000001 3.478 110.99735599999995 3.074 160.9749141 3.825 211.14571589999994 10.549 143.59393329999997 3.759 183.04185229999993 4.586 160.40709349999995 3.8 129.69064990000004 5.234 200.69616189999786 11.553 140.21538110000003 3.701 208.93484560000013 12.738 179.01759870000006 4.641 153.0309294 3.732 136.43224650000187 11.64 127.50079410000102 12.167 162.2409374 4.3)
Error minima by case: (10.0 1 4.9725 2 0.5442 8 6.1426 8 9.6008 2 5.2049 2 1.3496 1 6.5688 2 31.2776 1 0.0 0 0.0 0 13.0 1 49.8376 9 5.0 1 9.142 2 2.0 1 0.0 0 0.4433 2 7.6989 1 31.7723 7 4.2776 2 0.7832 1 3.3761 2 0.3129 1 20.2672 1)
Average genome size in population (length): 97.58
Average program size in population (points): 98.58
Average percent parens in population: 0.010
Minimum age in population: 49.51268065208569
Maximum age in population: 53.97399804269662
Average age in population: 51.96946725294675
Median age in population: 51.98724776972085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.146
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 71217715
--- Timings ---
Current time: 1529615399145 milliseconds
Total Time:         151.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.3 seconds, 36.5%
Fitness Testing:     75.9 seconds, 50.1%
Report:              20.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 60348.151000000034
Test mean error for best: 30.17408
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -68.4474659361
Correct output: -136.0274654831 | Program output: -84.0274654831
Correct output: -9.2468197583  | Program output: 26.7531802417 
Correct output: 10.6350720891  | Program output: -50.3649279109
Correct output: -59.3991693798 | Program output: -101.2775828589
Correct output: -115.2048572849 | Program output: -64.2048572849
Correct output: -6.125501297   | Program output: 6.874498703   
Correct output: -134.5687838788 | Program output: -74.5687838788
Correct output: -148.7052852825 | Program output: -101.2775828589
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -97.8267415348
Correct output: 50.8166032664  | Program output: -58.1833967336
Correct output: 33.6989683486  | Program output: 9.6989683486  
Correct output: 125.1419974748 | Program output: 65.1419974748 
Correct output: 81.3713946753  | Program output: 45.3713946753 
Correct output: -12.8663238977 | Program output: -3.8663238977 
Correct output: -8.8091035841  | Program output: -101.2775828589
Correct output: -84.6988657133 | Program output: -64.6988657133
Correct output: 72.6804102537  | Program output: -45.3195897463
Correct output: -154.5786526245 | Program output: -90.5786526245
Correct output: -23.511495195  | Program output: -62.511495195 
Correct output: -86.6536921432 | Program output: -101.2775828589
Correct output: -94.9646390768 | Program output: -101.2775828589
Correct output: -145.2671699493 | Program output: -101.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_dec} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_swap} {:instruction float_yank} {:instruction integer_inc} {:instruction tagged_984} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction float_yank} {:instruction 21} {:instruction float_sin} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec})
Best program: (integer_sub float_div -69.27758285891792 in1 float_dec integer_shove float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_max float_mult float_shove float_dec float_dec float_swap float_dup_items integer_max float_mult float_shove float_dec float_dec float_yank float_mult float_dec float_dec float_dec float_dec float_dec integer_max float_yank float_dec float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_add float_swap float_yank integer_inc tagged_984 float_mult float_dec float_frominteger float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_add float_dec float_dec float_dec float_div float_yank float_mult float_dec float_dec integer_max float_add float_mod float_dup_times float_dup_times print_float float_tan float_pop integer_dup_times float_dup float_mult float_yank 21 float_sin float_inc float_dup_times integer_max float_mult float_dec float_dec)
Errors: [19.0 2 52.0 3 36.0 12 61.0 10 41.8784 13 51.0 3 13.0 10 60.0 2 47.4277 8 0.0 0 1.0 2 47.0 2 109.0 10 24.0 2 60.0 2 36.0 2 9.0 2 92.4685 12 20.0 1 118.0 13 64.0 3 39.0 2 14.6239 12 6.3129 13 44.0 2]
Total: 1208.7114
Mean: 24.174229
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3887.100916800005
Median total errors in population: 1211.7114
Error averages by case: (130.55179560000008 3.552 159.3007728 4.364 147.05316239999996 11.831 160.24657670000005 10.983 148.70019489999893 12.317 157.88558599999996 4.349 122.32597570000004 10.886 165.9474631000001 4.261 155.50987920000014 8.94 103.88531439999994 3.237 96.80074300000001 2.9 152.8310081 3.696 205.24384969999997 10.522 131.97925899999996 3.659 171.82050559999993 4.429 148.92829870000003 3.687 114.57928690000004 4.632 191.23209939999748 11.548 131.374155 3.549 205.2388315 12.701 170.3363645999999 4.545 145.1159831999999 3.622 126.32629480000251 11.658 118.31097260000152 12.211 153.36854390000005 4.129)
Error minima by case: (1.8301 1 7.0925 2 0.8318 8 9.9858 9 13.8784 3 3.7951 2 0.0 0 2.4312 2 21.6322 2 0.0 0 0.0 0 16.3759 1 25.1834 9 2.699 1 22.142 2 7.0 1 0.0 0 0.5798 2 3.4575 1 12.3196 9 3.2776 2 1.544 1 0.6239 3 0.3129 3 19.2045 1)
Average genome size in population (length): 97.395
Average program size in population (points): 98.395
Average percent parens in population: 0.010
Minimum age in population: 50.51268065208569
Maximum age in population: 55.37541866928223
Average age in population: 53.4475780021704
Median age in population: 53.45017528611061
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.139
Error (vector) diversity:			 0.159
Behavioral diversity:				 0.159
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 73652590
--- Timings ---
Current time: 1529615403773 milliseconds
Total Time:         156.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.8 seconds, 36.4%
Fitness Testing:     78.4 seconds, 50.2%
Report:              20.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 34218.80269999999
Test mean error for best: 17.10940
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -119.4474659361
Correct output: -136.0274654831 | Program output: -168.0274654831
Correct output: -9.2468197583  | Program output: -41.2468197583
Correct output: 10.6350720891  | Program output: -21.3649279109
Correct output: -59.3991693798 | Program output: -65.2775828589
Correct output: -115.2048572849 | Program output: -147.2048572849
Correct output: -6.125501297   | Program output: -38.125501297 
Correct output: -134.5687838788 | Program output: -166.5687838788
Correct output: -148.7052852825 | Program output: -168.2775828589
Correct output: -10.1232538326 | Program output: -42.1232538326
Correct output: -19.3635646028 | Program output: -51.3635646028
Correct output: -50.8267415348 | Program output: -82.8267415348
Correct output: 50.8166032664  | Program output: 18.8166032664 
Correct output: 33.6989683486  | Program output: 1.6989683486  
Correct output: 125.1419974748 | Program output: 93.1419974748 
Correct output: 81.3713946753  | Program output: 49.3713946753 
Correct output: -12.8663238977 | Program output: -44.8663238977
Correct output: -8.8091035841  | Program output: -14.2775828589
Correct output: -84.6988657133 | Program output: -116.6988657133
Correct output: 72.6804102537  | Program output: 40.6804102537 
Correct output: -154.5786526245 | Program output: -186.5786526245
Correct output: -23.511495195  | Program output: -55.511495195 
Correct output: -86.6536921432 | Program output: -89.2775828589
Correct output: -94.9646390768 | Program output: -125.2775828589
Correct output: -145.2671699493 | Program output: -177.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_min} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_tan} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div -69.27758285891792 in1 float_dec integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_max float_mult float_dec integer_shove float_dec integer_shove float_mult float_dec float_dec float_yank float_dec float_dec integer_max float_min integer_swap float_dec float_dec float_mult float_yank float_dec float_dec float_yank float_dec float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_dec integer_div float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec integer_sub float_mult float_dec float_dec integer_max float_add float_dec float_dec in2 float_mult float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_tan integer_yankdup float_frominteger integer_div float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [32.0 3 32.0 2 32.0 2 32.0 11 5.8784 12 32.0 2 32.0 2 32.0 2 19.5723 7 32.0 2 32.0 2 32.0 2 32.0 2 32.0 2 32.0 3 32.0 2 32.0 2 5.4685 11 32.0 3 32.0 2 32.0 2 32.0 2 2.6239 10 30.3129 13 32.0 2]
Total: 808.856
Mean: 16.17712
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3812.406746100004
Median total errors in population: 1211.7114
Error averages by case: (128.41889190000006 3.485 157.8084602 4.296 142.96721469999994 11.843 155.38798419999995 10.972 144.18324429999979 12.39 155.91029010000005 4.365 121.04016480000003 10.879 164.32687180000005 4.192 153.97626790000015 8.973 104.52518479999996 3.318 96.08966850000003 2.902 147.29543580000006 3.651 200.30663199999995 10.485 131.18901359999998 3.688 164.99511349999995 4.404 141.00451470000002 3.67 115.43404900000007 4.726 187.61040589999823 11.605 129.42901789999996 3.549 199.18858910000003 12.72 168.85152450000007 4.536 140.30925709999997 3.578 122.04269940000202 11.686 116.17072010000112 12.254 151.63953030000002 4.139)
Error minima by case: (2.8301 1 3.7418 2 2.7494 2 5.3668 8 5.8784 2 4.7418 2 1.0 1 4.2582 2 9.3141 2 0.0 0 0.0 0 7.4502 1 11.7881 2 0.9561 1 8.142 2 4.0 1 0.0 0 0.3406 2 5.5787 1 11.3196 2 3.2776 2 0.0205 1 0.3761 2 0.3129 2 11.7418 1)
Average genome size in population (length): 96.763
Average program size in population (points): 97.763
Average percent parens in population: 0.010
Minimum age in population: 52.8351029457408
Maximum age in population: 56.97209435257537
Average age in population: 54.82970067079154
Median age in population: 54.84253058696049
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.14
Error (vector) diversity:			 0.164
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 76071690
--- Timings ---
Current time: 1529615408291 milliseconds
Total Time:         160.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.3 seconds, 36.3%
Fitness Testing:     80.8 seconds, 50.3%
Report:              21.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 33131.63909999999
Test mean error for best: 16.56582
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -118.4474659361
Correct output: -136.0274654831 | Program output: -167.0274654831
Correct output: -9.2468197583  | Program output: -40.2468197583
Correct output: 10.6350720891  | Program output: -20.3649279109
Correct output: -59.3991693798 | Program output: -64.2775828589
Correct output: -115.2048572849 | Program output: -146.2048572849
Correct output: -6.125501297   | Program output: -37.125501297 
Correct output: -134.5687838788 | Program output: -165.5687838788
Correct output: -148.7052852825 | Program output: -167.2775828589
Correct output: -10.1232538326 | Program output: -41.1232538326
Correct output: -19.3635646028 | Program output: -50.3635646028
Correct output: -50.8267415348 | Program output: -81.8267415348
Correct output: 50.8166032664  | Program output: 19.8166032664 
Correct output: 33.6989683486  | Program output: 2.6989683486  
Correct output: 125.1419974748 | Program output: 94.1419974748 
Correct output: 81.3713946753  | Program output: 50.3713946753 
Correct output: -12.8663238977 | Program output: -43.8663238977
Correct output: -8.8091035841  | Program output: -13.2775828589
Correct output: -84.6988657133 | Program output: -115.6988657133
Correct output: 72.6804102537  | Program output: 41.6804102537 
Correct output: -154.5786526245 | Program output: -185.5786526245
Correct output: -23.511495195  | Program output: -54.511495195 
Correct output: -86.6536921432 | Program output: -88.2775828589
Correct output: -94.9646390768 | Program output: -124.2775828589
Correct output: -145.2671699493 | Program output: -176.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_swap} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_min} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction integer_yank} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_tan} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div -69.27758285891792 in1 float_dec integer_shove float_rot integer_max integer_swap print_integer float_dup_items float_max float_mult float_dec integer_shove float_dec integer_shove float_mult float_dec float_dec float_yank float_dec float_dec integer_max float_min integer_swap float_dec float_dec float_mult float_yank float_dec float_dec float_yank float_dec float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_dec integer_div float_dec float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec float_dec float_dec integer_sub float_mult float_dec float_dec integer_max float_add float_dec integer_yank in2 float_mult float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_tan integer_yankdup float_frominteger integer_div float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [31.0 3 31.0 2 31.0 2 31.0 10 4.8784 12 31.0 2 31.0 2 31.0 2 18.5723 8 31.0 2 31.0 2 31.0 2 31.0 2 31.0 2 31.0 3 31.0 2 31.0 2 4.4685 11 31.0 3 31.0 2 31.0 2 31.0 2 1.6239 10 29.3129 12 31.0 2]
Total: 782.856
Mean: 15.65712
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3909.514177200005
Median total errors in population: 1211.7114
Error averages by case: (132.68626660000004 3.454 161.79272739999993 4.3 145.88611310000002 11.832 162.3725422 10.992 151.02857339999986 12.425 159.88826859999995 4.373 120.11296950000003 10.789 168.20657450000007 4.168 158.17909150000017 8.986 104.07139690000002 3.234 97.61895759999997 2.889 154.5424295 3.646 206.66444840000003 10.434 129.80565299999998 3.588 169.11486609999997 4.352 146.70145270000006 3.626 111.30659169999997 4.584 193.16666629999804 11.582 133.3065612 3.505 206.4155817999999 12.689 172.62396309999997 4.473 146.55452839999995 3.549 128.91962150000182 11.705 121.1791028000009 12.254 155.81722940000003 4.123)
Error minima by case: (9.0 1 1.9725 2 0.6588 2 9.6351 8 4.8784 2 0.7951 2 0.2282 1 0.5688 2 18.5723 2 0.0 0 0.0 0 13.3759 1 21.8389 2 0.0 0 19.142 2 4.0 1 1.0 1 0.364 3 6.6989 1 30.8389 2 0.4213 2 0.4939 1 0.3761 3 0.0 0 19.2672 1)
Average genome size in population (length): 96.729
Average program size in population (points): 97.729
Average percent parens in population: 0.010
Minimum age in population: 53.94901699319598
Maximum age in population: 58.29324136134528
Average age in population: 56.20716448176434
Median age in population: 56.26550579045215
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.158
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 78489940
--- Timings ---
Current time: 1529615412938 milliseconds
Total Time:         165.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.8 seconds, 36.2%
Fitness Testing:     83.4 seconds, 50.4%
Report:              22.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 27094.14179999999
Test mean error for best: 13.54707
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -112.4474659361
Correct output: -136.0274654831 | Program output: -161.0274654831
Correct output: -9.2468197583  | Program output: -34.2468197583
Correct output: 10.6350720891  | Program output: -14.3649279109
Correct output: -59.3991693798 | Program output: -59.2775828589
Correct output: -115.2048572849 | Program output: -140.2048572849
Correct output: -6.125501297   | Program output: -31.125501297 
Correct output: -134.5687838788 | Program output: -159.5687838788
Correct output: -148.7052852825 | Program output: -162.2775828589
Correct output: -10.1232538326 | Program output: -35.1232538326
Correct output: -19.3635646028 | Program output: -44.3635646028
Correct output: -50.8267415348 | Program output: -75.8267415348
Correct output: 50.8166032664  | Program output: 25.8166032664 
Correct output: 33.6989683486  | Program output: 8.6989683486  
Correct output: 125.1419974748 | Program output: 100.1419974748
Correct output: 81.3713946753  | Program output: 56.3713946753 
Correct output: -12.8663238977 | Program output: -37.8663238977
Correct output: -8.8091035841  | Program output: -8.2775828589 
Correct output: -84.6988657133 | Program output: -109.6988657133
Correct output: 72.6804102537  | Program output: 47.6804102537 
Correct output: -154.5786526245 | Program output: -179.5786526245
Correct output: -23.511495195  | Program output: -48.511495195 
Correct output: -86.6536921432 | Program output: -83.2775828589
Correct output: -94.9646390768 | Program output: -119.2775828589
Correct output: -145.2671699493 | Program output: -170.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction integer_swap} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_min} {:instruction float_max} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction integer_yank} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_tan} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div -69.27758285891792 in1 integer_swap print_integer float_dup_items float_max float_mult float_dec integer_shove float_dec integer_shove float_mult float_dec float_dec float_yank float_dec float_dec integer_max float_min float_max integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_max float_mult float_shove float_dec float_dec float_swap float_dup_items float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_dec integer_div float_dec float_dec float_yank float_yankdup float_dec float_dec integer_max float_dec float_dec float_dec float_dec integer_sub float_mult float_dec float_dec integer_max float_add float_dec integer_yank in2 float_mult float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_tan integer_yankdup float_frominteger integer_div float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [25.0 3 25.0 2 25.0 2 25.0 10 0.1216 10 25.0 2 25.0 2 25.0 2 13.5723 8 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 0.5315 9 25.0 3 25.0 2 25.0 2 25.0 2 3.3761 10 24.3129 13 25.0 2]
Total: 641.9144
Mean: 12.838288
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4026.413807600004
Median total errors in population: 1209.7114
Error averages by case: (137.5403098 3.65 165.6490855999999 4.434 152.46255399999998 11.483 164.06169399999993 11.007 152.55967039999967 12.395 163.7309687 4.462 129.17446330000007 10.463 171.91781580000006 4.306 162.2199834000001 9.039 113.52674729999997 3.511 105.58511319999995 3.06 156.95663460000003 3.76 206.97339709999997 10.245 138.97477030000002 3.852 176.00582929999996 4.517 154.01355130000007 3.798 122.61397350000004 4.665 192.55734589999824 11.421 138.4298544 3.702 205.7424003 12.322 176.1301057000001 4.622 150.0557605999999 3.707 131.5147224000019 11.588 125.43173000000101 12.14 159.93832670000006 4.498)
Error minima by case: (8.8301 1 8.9726 1 0.8677 1 7.5769 9 0.1216 3 3.9273 1 0.0912 1 6.5688 1 12.5723 2 0.0 0 0.0 0 13.0359 1 22.2879 1 1.0 1 13.142 2 6.0 1 0.0 0 0.2576 2 10.0 1 11.3196 1 4.5787 1 1.4874 1 0.3761 3 0.3129 1 25.0 1)
Average genome size in population (length): 97.346
Average program size in population (points): 98.346
Average percent parens in population: 0.010
Minimum age in population: 54.94901699319598
Maximum age in population: 59.33140160855328
Average age in population: 57.62475034455481
Median age in population: 57.67324608849594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.192
Error (vector) diversity:			 0.212
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 80923615
--- Timings ---
Current time: 1529615417208 milliseconds
Total Time:         169.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.2 seconds, 36.1%
Fitness Testing:     85.7 seconds, 50.5%
Report:              22.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 21606.517199999987
Test mean error for best: 10.80326
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -107.4474659361
Correct output: -136.0274654831 | Program output: -156.0274654831
Correct output: -9.2468197583  | Program output: -29.2468197583
Correct output: 10.6350720891  | Program output: -9.3649279109 
Correct output: -59.3991693798 | Program output: -52.2775828589
Correct output: -115.2048572849 | Program output: -135.2048572849
Correct output: -6.125501297   | Program output: -26.125501297 
Correct output: -134.5687838788 | Program output: -154.5687838788
Correct output: -148.7052852825 | Program output: -155.2775828589
Correct output: -10.1232538326 | Program output: -30.1232538326
Correct output: -19.3635646028 | Program output: -39.3635646028
Correct output: -50.8267415348 | Program output: -70.8267415348
Correct output: 50.8166032664  | Program output: 30.8166032664 
Correct output: 33.6989683486  | Program output: 13.6989683486 
Correct output: 125.1419974748 | Program output: 105.1419974748
Correct output: 81.3713946753  | Program output: 61.3713946753 
Correct output: -12.8663238977 | Program output: -32.8663238977
Correct output: -8.8091035841  | Program output: -1.2775828589 
Correct output: -84.6988657133 | Program output: -104.6988657133
Correct output: 72.6804102537  | Program output: 52.6804102537 
Correct output: -154.5786526245 | Program output: -174.5786526245
Correct output: -23.511495195  | Program output: -43.511495195 
Correct output: -86.6536921432 | Program output: -76.2775828589
Correct output: -94.9646390768 | Program output: -112.2775828589
Correct output: -145.2671699493 | Program output: -165.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_yank} {:instruction float_rot} {:instruction float_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div -69.27758285891792 in1 float_dec integer_shove float_rot integer_max float_dec integer_shove float_rot integer_max integer_yankdup float_yank float_rot float_max float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_dec integer_max float_yank float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_yank float_mult float_dec float_dec integer_max float_dec float_dec integer_sub float_dec float_dec float_dec integer_max float_add float_dec float_dec in2 float_mult float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_tan float_dup_items float_frominteger float_pop float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [20.0 2 20.0 1 20.0 1 20.0 10 7.1216 11 20.0 1 20.0 1 20.0 1 6.5723 8 20.0 1 20.0 1 20.0 1 20.0 1 20.0 1 20.0 1 20.0 1 20.0 1 7.5315 10 20.0 2 20.0 1 20.0 1 20.0 1 10.3761 10 17.3129 13 20.0 1]
Total: 531.9144
Mean: 10.638288
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3635.327137400003
Median total errors in population: 1208.7114
Error averages by case: (126.41525650000003 3.898 149.51758399999994 4.348 141.4003933 9.888 142.61375650000005 11.025 132.89548150000078 12.08 147.54315449999996 4.168 123.80496570000011 9.278 154.30501010000003 4.275 145.25733480000008 8.89 106.93659439999995 3.627 96.40910659999997 3.191 140.89431660000002 3.726 180.0465398 9.041 130.57283689999994 4.16 160.1542594 4.557 139.54634280000008 3.777 114.47004130000009 4.984 164.99693739999887 11.001 126.94482750000003 3.908 176.19077179999996 10.587 158.30619279999996 4.445 132.95955799999996 3.682 115.69366670000174 11.202 115.80515690000144 11.835 145.4410516 4.633)
Error minima by case: (5.0089 1 9.2776 1 0.7532 1 0.7121 9 0.1216 2 2.2049 1 0.4532 1 1.2776 1 6.5723 1 0.0 0 0.0 0 15.0 1 0.7973 1 2.0 1 16.142 1 0.9663 1 0.0 0 0.2395 2 5.7895 1 3.0212 1 1.7224 1 0.031 1 0.3761 3 0.3129 1 15.8726 1)
Average genome size in population (length): 97.145
Average program size in population (points): 98.145
Average percent parens in population: 0.010
Minimum age in population: 56.87943921500118
Maximum age in population: 60.97137964855392
Average age in population: 59.15767655045051
Median age in population: 59.20405703129654
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.239
Error (vector) diversity:			 0.262
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 83352265
--- Timings ---
Current time: 1529615421497 milliseconds
Total Time:         173.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.6 seconds, 36.0%
Fitness Testing:     88.0 seconds, 50.6%
Report:              23.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 10124.0
Test mean error for best: 5.06200
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -95.4474659361
Correct output: -136.0274654831 | Program output: -144.0274654831
Correct output: -9.2468197583  | Program output: -17.2468197583
Correct output: 10.6350720891  | Program output: 2.6350720891  
Correct output: -59.3991693798 | Program output: -67.3991693798
Correct output: -115.2048572849 | Program output: -123.2048572849
Correct output: -6.125501297   | Program output: -14.125501297 
Correct output: -134.5687838788 | Program output: -142.5687838788
Correct output: -148.7052852825 | Program output: -156.7052852825
Correct output: -10.1232538326 | Program output: -18.1232538326
Correct output: -19.3635646028 | Program output: -27.3635646028
Correct output: -50.8267415348 | Program output: -58.8267415348
Correct output: 50.8166032664  | Program output: 42.8166032664 
Correct output: 33.6989683486  | Program output: 25.6989683486 
Correct output: 125.1419974748 | Program output: 117.1419974748
Correct output: 81.3713946753  | Program output: 73.3713946753 
Correct output: -12.8663238977 | Program output: -20.8663238977
Correct output: -8.8091035841  | Program output: -16.8091035841
Correct output: -84.6988657133 | Program output: -92.6988657133
Correct output: 72.6804102537  | Program output: 64.6804102537 
Correct output: -154.5786526245 | Program output: -162.5786526245
Correct output: -23.511495195  | Program output: -31.511495195 
Correct output: -86.6536921432 | Program output: -94.6536921432
Correct output: -94.9646390768 | Program output: -102.9646390768
Correct output: -145.2671699493 | Program output: -153.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div integer_shove float_rot float_mult float_dec float_dec float_yank float_dec float_dec float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_dec integer_max float_yank float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_yank float_mult float_dec in1 integer_max float_dec float_dec integer_sub float_dec float_dec float_dec integer_max float_add float_dec float_dec in2 float_mult float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_tan float_dup_items float_frominteger float_pop float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 1 8.0 2 8.0 1 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 3 8.0 2]
Total: 249.0
Mean: 4.98
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3419.454895500006
Median total errors in population: 865.856
Error averages by case: (128.64695469999995 4.303 137.92117349999995 3.967 139.8938990000001 6.08 129.26122619999998 10.857 115.98915700000069 11.921 136.66379009999994 3.841 132.1901918000001 5.827 139.49019189999993 4.018 130.18144420000002 8.941 122.6673486999999 3.745 116.4264626 3.437 130.36122650000013 3.688 142.7219672999999 5.793 131.9490825999999 4.561 143.0756443000001 4.397 132.61195320000004 3.681 126.56908840000011 4.533 128.38190850000103 10.93 128.81526600000007 4.304 139.72543190000002 6.353 141.43128079999997 4.056 125.45252619999984 3.62 108.65725820000074 10.843 123.51363930000157 12.361 136.30978260000006 4.49)
Error minima by case: (2.3222 1 5.7773 1 1.5908 1 0.369 2 0.1216 2 0.0852 1 0.0403 1 5.5688 1 4.5723 2 0.0 0 0.0 0 8.0 1 1.0969 1 3.0 1 6.0 1 8.0 1 0.9898 1 0.1778 2 0.3679 1 0.5798 1 8.0 1 1.0013 1 0.2906 2 0.3129 3 8.0 1)
Average genome size in population (length): 96.798
Average program size in population (points): 97.798
Average percent parens in population: 0.010
Minimum age in population: 58.15979231419624
Maximum age in population: 62.48018191337178
Average age in population: 60.72511815116237
Median age in population: 60.79838296818662
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.255
Error (vector) diversity:			 0.267
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 85772240
--- Timings ---
Current time: 1529615425942 milliseconds
Total Time:         178.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.1 seconds, 35.9%
Fitness Testing:     90.4 seconds, 50.7%
Report:              23.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 10124.0
Test mean error for best: 5.06200
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -95.4474659361
Correct output: -136.0274654831 | Program output: -144.0274654831
Correct output: -9.2468197583  | Program output: -17.2468197583
Correct output: 10.6350720891  | Program output: 2.6350720891  
Correct output: -59.3991693798 | Program output: -67.3991693798
Correct output: -115.2048572849 | Program output: -123.2048572849
Correct output: -6.125501297   | Program output: -14.125501297 
Correct output: -134.5687838788 | Program output: -142.5687838788
Correct output: -148.7052852825 | Program output: -156.7052852825
Correct output: -10.1232538326 | Program output: -18.1232538326
Correct output: -19.3635646028 | Program output: -27.3635646028
Correct output: -50.8267415348 | Program output: -58.8267415348
Correct output: 50.8166032664  | Program output: 42.8166032664 
Correct output: 33.6989683486  | Program output: 25.6989683486 
Correct output: 125.1419974748 | Program output: 117.1419974748
Correct output: 81.3713946753  | Program output: 73.3713946753 
Correct output: -12.8663238977 | Program output: -20.8663238977
Correct output: -8.8091035841  | Program output: -16.8091035841
Correct output: -84.6988657133 | Program output: -92.6988657133
Correct output: 72.6804102537  | Program output: 64.6804102537 
Correct output: -154.5786526245 | Program output: -162.5786526245
Correct output: -23.511495195  | Program output: -31.511495195 
Correct output: -86.6536921432 | Program output: -94.6536921432
Correct output: -94.9646390768 | Program output: -102.9646390768
Correct output: -145.2671699493 | Program output: -153.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div integer_shove float_rot float_mult float_dec float_dec float_yank float_dec float_dec float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_dec integer_max float_yank float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_yank float_mult float_dec in1 integer_max float_dec float_dec integer_pop float_dec float_dec float_dec integer_max float_add float_dec float_dec in2 float_mult float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_tan float_dup_items float_frominteger float_pop float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 1 8.0 2 8.0 1 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 3 8.0 2]
Total: 249.0
Mean: 4.98
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3032.1792801000056
Median total errors in population: 707.6082
Error averages by case: (119.37968539999993 4.532 121.69100549999993 3.787 124.45004570000005 4.09 113.28712080000004 10.364 103.41510289999984 11.291 120.52320069999992 3.74 118.6170677000001 3.952 121.49374799999981 3.824 112.98629749999992 8.685 108.0586945999999 3.829 103.68971780000005 3.631 119.20812260000012 3.706 118.77952029999999 4.115 116.59381319999987 3.886 127.26564580000013 4.284 119.50981720000009 3.724 110.57489950000009 4.136 104.98627119999983 10.336 119.46199840000006 4.54 111.28943760000003 4.086 122.45515859999996 3.857 112.71771169999984 3.68 103.08890379999926 10.391 117.68950290000112 12.567 121.48579070000004 4.448)
Error minima by case: (8.0 1 7.3926 1 5.7532 1 0.3544 1 0.1216 2 5.4984 1 5.0244 1 8.0 1 1.4277 2 1.0 1 0.0 0 8.0 1 0.0481 1 5.0 1 1.0 1 8.0 1 6.1183 1 0.1778 2 5.9555 1 0.3206 1 8.0 1 3.6263 1 0.174 2 0.3129 3 8.0 1)
Average genome size in population (length): 92.751
Average program size in population (points): 93.751
Average percent parens in population: 0.011
Minimum age in population: 59.15979231419624
Maximum age in population: 64.19987079446992
Average age in population: 62.18506136969005
Median age in population: 62.20860426408285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.252
Error (vector) diversity:			 0.261
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 88091040
--- Timings ---
Current time: 1529615430334 milliseconds
Total Time:         182.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.6 seconds, 35.9%
Fitness Testing:     92.8 seconds, 50.8%
Report:              24.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 5583.0
Test mean error for best: 2.79150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -91.4474659361
Correct output: -136.0274654831 | Program output: -140.0274654831
Correct output: -9.2468197583  | Program output: -13.2468197583
Correct output: 10.6350720891  | Program output: 6.6350720891  
Correct output: -59.3991693798 | Program output: -63.3991693798
Correct output: -115.2048572849 | Program output: -119.2048572849
Correct output: -6.125501297   | Program output: -10.125501297 
Correct output: -134.5687838788 | Program output: -138.5687838788
Correct output: -148.7052852825 | Program output: -152.7052852825
Correct output: -10.1232538326 | Program output: -14.1232538326
Correct output: -19.3635646028 | Program output: -23.3635646028
Correct output: -50.8267415348 | Program output: -54.8267415348
Correct output: 50.8166032664  | Program output: 46.8166032664 
Correct output: 33.6989683486  | Program output: 29.6989683486 
Correct output: 125.1419974748 | Program output: 121.1419974748
Correct output: 81.3713946753  | Program output: 77.3713946753 
Correct output: -12.8663238977 | Program output: -16.8663238977
Correct output: -8.8091035841  | Program output: -12.8091035841
Correct output: -84.6988657133 | Program output: -88.6988657133
Correct output: 72.6804102537  | Program output: 68.6804102537 
Correct output: -154.5786526245 | Program output: -158.5786526245
Correct output: -23.511495195  | Program output: -27.511495195 
Correct output: -86.6536921432 | Program output: -90.6536921432
Correct output: -94.9646390768 | Program output: -98.9646390768
Correct output: -145.2671699493 | Program output: -149.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction -69.27758285891792} {:instruction in1} {:instruction integer_swap} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction tag_float_725} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_min} {:instruction float_max} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_max} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction integer_yank} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_tan} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_dec} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div -69.27758285891792 in1 integer_swap print_integer float_dup_items float_max float_mult float_dec integer_shove tag_float_725 integer_shove float_mult float_dec float_dec float_yank float_dec float_dec integer_max float_min float_max integer_shove float_rot integer_max integer_yankdup print_integer float_dup_items float_max float_mult float_shove float_dec float_dec float_swap float_rot float_dec float_yank float_dec float_dec float_yank float_mult float_dec float_mult float_dec integer_div float_dec float_dec float_yank float_yankdup float_dec float_dec integer_max float_dec float_dec float_dec float_dec integer_add in1 float_dec float_dec integer_max float_add float_dec integer_yank in2 float_mult float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_tan integer_yankdup float_frominteger integer_div float_dec float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [4.0 2 4.0 2 4.0 2 4.0 2 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 1 4.0 2 4.0 1 4.0 1]
Total: 139.0
Mean: 2.78
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3460.7291393000028
Median total errors in population: 624.9144
Error averages by case: (136.59310060000004 4.594 138.4748690999999 3.889 141.24005030000004 4.202 129.351269 9.952 124.48579089999924 10.868 137.39967050000004 3.88 137.76848120000014 4.035 138.44194139999993 3.923 130.8580034999999 8.435 127.93133319999984 4.118 121.00593240000002 3.835 134.55091390000013 3.793 129.8460117 4.222 132.4404369999999 3.907 141.37731030000003 3.994 131.61988040000017 3.808 132.6431582000001 4.305 125.68233859999867 10.018 136.2673182000001 4.577 123.89505260000006 4.186 139.32777980000003 3.956 129.32560169999985 3.705 125.34953039999817 10.384 136.0706647000007 12.244 139.06169970000002 4.891)
Error minima by case: (2.4475 1 4.0 1 4.0 1 0.1692 1 0.1216 1 2.337 1 0.9988 1 2.14 1 0.2373 1 2.8767 1 0.3636 1 4.0 1 0.5626 1 1.0 1 4.0 1 2.0 1 0.9902 1 0.4685 1 2.3011 1 0.1557 1 4.0 1 0.4859 1 0.174 1 0.6871 1 4.0 1)
Average genome size in population (length): 87.823
Average program size in population (points): 88.823
Average percent parens in population: 0.011
Minimum age in population: 61.39529972037053
Maximum age in population: 65.58354813597725
Average age in population: 63.66733698317818
Median age in population: 63.69227432444529
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.264
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 90286740
--- Timings ---
Current time: 1529615434618 milliseconds
Total Time:         187.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.1 seconds, 35.9%
Fitness Testing:     95.0 seconds, 50.8%
Report:              24.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 5583.0
Test mean error for best: 2.79150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -91.4474659361
Correct output: -136.0274654831 | Program output: -140.0274654831
Correct output: -9.2468197583  | Program output: -13.2468197583
Correct output: 10.6350720891  | Program output: 6.6350720891  
Correct output: -59.3991693798 | Program output: -63.3991693798
Correct output: -115.2048572849 | Program output: -119.2048572849
Correct output: -6.125501297   | Program output: -10.125501297 
Correct output: -134.5687838788 | Program output: -138.5687838788
Correct output: -148.7052852825 | Program output: -152.7052852825
Correct output: -10.1232538326 | Program output: -14.1232538326
Correct output: -19.3635646028 | Program output: -23.3635646028
Correct output: -50.8267415348 | Program output: -54.8267415348
Correct output: 50.8166032664  | Program output: 46.8166032664 
Correct output: 33.6989683486  | Program output: 29.6989683486 
Correct output: 125.1419974748 | Program output: 121.1419974748
Correct output: 81.3713946753  | Program output: 77.3713946753 
Correct output: -12.8663238977 | Program output: -16.8663238977
Correct output: -8.8091035841  | Program output: -12.8091035841
Correct output: -84.6988657133 | Program output: -88.6988657133
Correct output: 72.6804102537  | Program output: 68.6804102537 
Correct output: -154.5786526245 | Program output: -158.5786526245
Correct output: -23.511495195  | Program output: -27.511495195 
Correct output: -86.6536921432 | Program output: -90.6536921432
Correct output: -94.9646390768 | Program output: -98.9646390768
Correct output: -145.2671699493 | Program output: -149.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction integer_sub} {:instruction float_dec} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap})
Best program: (integer_sub float_div integer_shove float_rot float_mult float_dec float_dec float_yank float_dec float_dec float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_dec integer_max float_yank float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_yank float_mult float_dec in1 integer_max float_dec float_dec float_add integer_sub float_dec in2 float_mult float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_tan float_dup_items float_frominteger float_pop float_dec integer_rot float_sin float_dup integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap)
Errors: [4.0 2 4.0 2 4.0 2 4.0 2 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 1 4.0 2 4.0 1 4.0 1]
Total: 139.0
Mean: 2.78
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3467.432509400002
Median total errors in population: 529.9144
Error averages by case: (137.78890059999983 4.797 140.93579179999983 4.249 140.6753153000002 4.547 122.36237610000003 8.817 133.5167418999994 9.587 138.8633079999999 4.249 136.76458880000027 4.431 140.13063139999977 4.349 136.69835910000006 7.579 123.89496649999974 4.437 114.7628374000001 4.251 134.41216270000024 4.082 129.14201229999986 4.624 127.6988559999997 4.281 139.01321940000022 4.283 126.02223620000022 4.182 130.77388780000024 4.642 135.84248549999907 8.94 137.7571983000001 4.694 121.2460381000001 4.517 142.1954822 4.386 124.74867119999972 4.086 133.1706368999984 9.316 138.16188610000097 10.526 141.91991980000006 5.082)
Error minima by case: (4.0 1 2.7773 1 4.0 1 0.2015 1 0.1216 1 1.6577 1 4.0 1 1.86 1 0.4277 1 0.8767 1 0.3636 1 2.0 1 1.2726 1 0.0 0 0.858 1 4.0 1 4.0 1 0.4685 1 2.1517 1 0.4991 1 4.0 1 0.0357 1 0.0 0 4.0 1 4.0 1)
Average genome size in population (length): 81.741
Average program size in population (points): 82.741
Average percent parens in population: 0.012
Minimum age in population: 63.16730462502028
Maximum age in population: 67.05288056601432
Average age in population: 65.17241330474386
Median age in population: 65.22961242851852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.279
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 92330690
--- Timings ---
Current time: 1529615438785 milliseconds
Total Time:         191.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.6 seconds, 35.9%
Fitness Testing:     97.1 seconds, 50.8%
Report:              25.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 4421.0
Test mean error for best: 2.21050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -90.4474659361
Correct output: -136.0274654831 | Program output: -139.0274654831
Correct output: -9.2468197583  | Program output: -12.2468197583
Correct output: 10.6350720891  | Program output: 7.6350720891  
Correct output: -59.3991693798 | Program output: -62.3991693798
Correct output: -115.2048572849 | Program output: -118.2048572849
Correct output: -6.125501297   | Program output: -9.125501297  
Correct output: -134.5687838788 | Program output: -137.5687838788
Correct output: -148.7052852825 | Program output: -151.7052852825
Correct output: -10.1232538326 | Program output: -13.1232538326
Correct output: -19.3635646028 | Program output: -22.3635646028
Correct output: -50.8267415348 | Program output: -53.8267415348
Correct output: 50.8166032664  | Program output: 47.8166032664 
Correct output: 33.6989683486  | Program output: 30.6989683486 
Correct output: 125.1419974748 | Program output: 122.1419974748
Correct output: 81.3713946753  | Program output: 78.3713946753 
Correct output: -12.8663238977 | Program output: -15.8663238977
Correct output: -8.8091035841  | Program output: -11.8091035841
Correct output: -84.6988657133 | Program output: -87.6988657133
Correct output: 72.6804102537  | Program output: 69.6804102537 
Correct output: -154.5786526245 | Program output: -157.5786526245
Correct output: -23.511495195  | Program output: -26.511495195 
Correct output: -86.6536921432 | Program output: -89.6536921432
Correct output: -94.9646390768 | Program output: -97.9646390768
Correct output: -145.2671699493 | Program output: -148.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div integer_shove float_rot float_mult float_dec float_dec float_yank float_dec float_dec float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_dec integer_max float_yank float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec float_yank float_mult float_dec in1 float_add float_dec float_dec in2 float_mult float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_tan float_dup_items float_frominteger float_pop float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [3.0 2 3.0 1 3.0 2 3.0 2 3.0 2 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1]
Total: 110.0
Mean: 2.2
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2424.442783900001
Median total errors in population: 249.0
Error averages by case: (95.04877319999994 3.818 97.8849578999998 3.662 97.36430650000007 3.937 81.82593330000002 5.26 99.16728389999984 5.431 95.95838159999985 3.669 94.61534670000003 3.851 97.3111466999999 3.703 98.0442911000001 4.661 86.08093509999992 3.407 78.76807610000004 3.81 95.91464030000004 3.077 87.27704440000001 3.943 84.79849539999991 3.628 93.05096490000012 3.629 86.87194100000015 3.615 89.74921350000005 3.897 101.42052729999968 5.156 94.72067180000013 3.684 81.04407490000008 3.899 99.0555966999999 3.711 91.24526129999991 3.495 99.23417699999985 5.348 96.68482570000009 6.001 98.98491760000009 4.029)
Error minima by case: (2.0458 1 2.0458 1 2.0458 1 1.7197 1 2.0458 1 2.0458 1 2.0458 1 0.86 1 0.4277 1 2.0458 1 0.3636 1 1.0 1 2.0458 1 1.0 1 2.0458 1 2.0458 1 2.0458 1 2.0458 1 2.0458 1 0.4397 1 2.0458 1 2.0458 1 2.0458 1 2.0458 1 2.0458 1)
Average genome size in population (length): 78.539
Average program size in population (points): 79.539
Average percent parens in population: 0.013
Minimum age in population: 64.16730462502028
Maximum age in population: 68.74329567991833
Average age in population: 66.64220047534972
Median age in population: 66.6765213751556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.184
Error (vector) diversity:			 0.188
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 94294540
--- Timings ---
Current time: 1529615442701 milliseconds
Total Time:         195.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.1 seconds, 35.9%
Fitness Testing:     99.0 seconds, 50.7%
Report:              26.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 2148.0
Test mean error for best: 1.07400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -88.4474659361
Correct output: -136.0274654831 | Program output: -137.0274654831
Correct output: -9.2468197583  | Program output: -10.2468197583
Correct output: 10.6350720891  | Program output: 9.6350720891  
Correct output: -59.3991693798 | Program output: -60.3991693798
Correct output: -115.2048572849 | Program output: -116.2048572849
Correct output: -6.125501297   | Program output: -7.125501297  
Correct output: -134.5687838788 | Program output: -135.5687838788
Correct output: -148.7052852825 | Program output: -149.7052852825
Correct output: -10.1232538326 | Program output: -11.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -51.8267415348
Correct output: 50.8166032664  | Program output: 49.8166032664 
Correct output: 33.6989683486  | Program output: 32.6989683486 
Correct output: 125.1419974748 | Program output: 124.1419974748
Correct output: 81.3713946753  | Program output: 80.3713946753 
Correct output: -12.8663238977 | Program output: -13.8663238977
Correct output: -8.8091035841  | Program output: -9.8091035841 
Correct output: -84.6988657133 | Program output: -85.6988657133
Correct output: 72.6804102537  | Program output: 71.6804102537 
Correct output: -154.5786526245 | Program output: -155.5786526245
Correct output: -23.511495195  | Program output: -24.511495195 
Correct output: -86.6536921432 | Program output: -87.6536921432
Correct output: -94.9646390768 | Program output: -95.9646390768
Correct output: -145.2671699493 | Program output: -146.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_max} {:instruction float_dec} {:instruction in2} {:instruction float_inc} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_pop} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div integer_shove float_rot float_mult float_dec float_dec float_yank float_dec float_dec float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_dec integer_max float_yank float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec integer_sub float_mult float_dec in1 integer_max float_dec in2 float_inc float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_pop float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [1.0 1 1.0 1 1.0 2 1.0 2 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 55.0
Mean: 1.1
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1843.4373218
Median total errors in population: 223.0
Error averages by case: (72.7626204 3.272 75.1664979999999 3.236 73.26798770000002 3.504 61.99374600000003 3.553 74.70741619999997 3.57 73.66780359999993 3.158 70.0775985 3.418 74.84922289999997 3.133 76.43910680000008 3.398 63.84496650000002 2.754 59.37892680000007 3.397 71.45926950000002 2.418 67.27525280000008 3.517 66.44838730000002 3.179 70.88423340000001 3.03 64.95954650000009 3.174 67.00642179999997 3.041 76.35022929999991 3.526 72.4818520000001 3.066 62.266305800000076 3.499 76.13112729999992 3.145 66.83329020000002 2.857 74.30281200000002 3.59 73.39856610000005 3.764 76.02413440000004 3.261)
Error minima by case: (1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.4277 1 1.0 1 0.6364 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.943 1 1.0 1 0.0 0 0.0 0 1.0 1 1.0 1)
Average genome size in population (length): 76.5
Average program size in population (points): 77.5
Average percent parens in population: 0.013
Minimum age in population: 66.00425072116013
Maximum age in population: 70.19199632479547
Average age in population: 68.19111487412928
Median age in population: 68.21025029389516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.116
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 96207040
--- Timings ---
Current time: 1529615446689 milliseconds
Total Time:         199.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.7 seconds, 36.0%
Fitness Testing:    100.9 seconds, 50.6%
Report:              26.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 2148.0
Test mean error for best: 1.07400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -88.4474659361
Correct output: -136.0274654831 | Program output: -137.0274654831
Correct output: -9.2468197583  | Program output: -10.2468197583
Correct output: 10.6350720891  | Program output: 9.6350720891  
Correct output: -59.3991693798 | Program output: -60.3991693798
Correct output: -115.2048572849 | Program output: -116.2048572849
Correct output: -6.125501297   | Program output: -7.125501297  
Correct output: -134.5687838788 | Program output: -135.5687838788
Correct output: -148.7052852825 | Program output: -149.7052852825
Correct output: -10.1232538326 | Program output: -11.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -51.8267415348
Correct output: 50.8166032664  | Program output: 49.8166032664 
Correct output: 33.6989683486  | Program output: 32.6989683486 
Correct output: 125.1419974748 | Program output: 124.1419974748
Correct output: 81.3713946753  | Program output: 80.3713946753 
Correct output: -12.8663238977 | Program output: -13.8663238977
Correct output: -8.8091035841  | Program output: -9.8091035841 
Correct output: -84.6988657133 | Program output: -85.6988657133
Correct output: 72.6804102537  | Program output: 71.6804102537 
Correct output: -154.5786526245 | Program output: -155.5786526245
Correct output: -23.511495195  | Program output: -24.511495195 
Correct output: -86.6536921432 | Program output: -87.6536921432
Correct output: -94.9646390768 | Program output: -95.9646390768
Correct output: -145.2671699493 | Program output: -146.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_max} {:instruction float_dec} {:instruction in2} {:instruction float_inc} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_pop} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div integer_shove float_rot float_mult float_dec float_dec float_yank float_dec float_dec float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_dec integer_max float_yank float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec integer_sub float_mult float_dec in1 integer_max float_dec in2 float_inc float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_pop float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [1.0 1 1.0 1 1.0 2 1.0 2 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 55.0
Mean: 1.1
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1625.8509653000003
Median total errors in population: 166.0
Error averages by case: (63.732188800000024 3.015 65.51963929999994 2.915 64.69697939999998 3.187 54.17062400000002 3.109 66.45251749999997 3.205 64.41633379999996 2.535 63.31374119999997 3.038 65.24167550000003 2.397 65.96469450000004 3.118 56.63618100000002 2.356 52.11726750000003 3.126 63.422403399999965 2.114 60.43280140000004 3.186 58.56905400000002 2.854 64.55981979999999 2.325 58.60882460000005 2.938 60.524213599999975 2.354 67.50096289999996 3.126 63.55281250000005 2.354 55.78963200000004 3.166 66.22291279999996 2.418 58.72309510000003 2.098 66.19404340000006 3.147 64.35173089999999 2.595 65.84681640000004 2.614)
Error minima by case: (1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.4277 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.3196 1 1.0 1 0.0 0 1.0 1 1.0 1 1.0 1)
Average genome size in population (length): 75.578
Average program size in population (points): 76.578
Average percent parens in population: 0.013
Minimum age in population: 67.0403285364381
Maximum age in population: 71.8553924580336
Average age in population: 69.71555267727163
Median age in population: 69.77715744280007
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.097
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 98096490
--- Timings ---
Current time: 1529615450521 milliseconds
Total Time:         203.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.2 seconds, 36.1%
Fitness Testing:    102.7 seconds, 50.6%
Report:              26.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 2148.0
Test mean error for best: 1.07400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -88.4474659361
Correct output: -136.0274654831 | Program output: -137.0274654831
Correct output: -9.2468197583  | Program output: -10.2468197583
Correct output: 10.6350720891  | Program output: 9.6350720891  
Correct output: -59.3991693798 | Program output: -60.3991693798
Correct output: -115.2048572849 | Program output: -116.2048572849
Correct output: -6.125501297   | Program output: -7.125501297  
Correct output: -134.5687838788 | Program output: -135.5687838788
Correct output: -148.7052852825 | Program output: -149.7052852825
Correct output: -10.1232538326 | Program output: -11.1232538326
Correct output: -19.3635646028 | Program output: -20.3635646028
Correct output: -50.8267415348 | Program output: -51.8267415348
Correct output: 50.8166032664  | Program output: 49.8166032664 
Correct output: 33.6989683486  | Program output: 32.6989683486 
Correct output: 125.1419974748 | Program output: 124.1419974748
Correct output: 81.3713946753  | Program output: 80.3713946753 
Correct output: -12.8663238977 | Program output: -13.8663238977
Correct output: -8.8091035841  | Program output: -9.8091035841 
Correct output: -84.6988657133 | Program output: -85.6988657133
Correct output: 72.6804102537  | Program output: 71.6804102537 
Correct output: -154.5786526245 | Program output: -155.5786526245
Correct output: -23.511495195  | Program output: -24.511495195 
Correct output: -86.6536921432 | Program output: -87.6536921432
Correct output: -94.9646390768 | Program output: -95.9646390768
Correct output: -145.2671699493 | Program output: -146.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction integer_shove} {:instruction float_rot} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_max} {:instruction float_dec} {:instruction in2} {:instruction float_inc} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_pop} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div integer_shove float_rot float_mult float_dec float_dec float_yank float_dec float_dec float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_dec integer_max float_yank float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec integer_sub float_mult float_dec in1 integer_max float_dec in2 float_inc float_dec float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_pop float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [1.0 1 1.0 1 1.0 2 1.0 2 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 55.0
Mean: 1.1
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1842.4017473
Median total errors in population: 139.0
Error averages by case: (72.72955420000001 3.042 75.01423209999992 2.677 73.43989130000003 3.394 59.34901620000001 3.291 76.42986670000002 3.139 73.95602499999995 2.337 70.81814019999999 2.837 74.88768319999998 2.331 76.65616840000004 3.121 60.5273384 2.567 54.37669840000001 3.29 74.00198600000002 2.28 69.59886140000003 3.389 68.41762959999998 2.631 73.87076910000005 2.273 69.84583300000006 3.013 66.0738806 2.596 77.57642969999995 3.055 72.58397540000009 2.259 60.68820030000005 3.309 75.86786349999997 2.337 70.95104669999998 2.221 75.91598450000001 2.725 74.46037590000003 2.252 75.57429750000006 2.424)
Error minima by case: (1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1)
Average genome size in population (length): 74.717
Average program size in population (points): 75.717
Average percent parens in population: 0.013
Minimum age in population: 69.19001692608373
Maximum age in population: 73.23120404364592
Average age in population: 71.27186079780462
Median age in population: 71.31494706168704
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.097
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 99964415
--- Timings ---
Current time: 1529615454449 milliseconds
Total Time:         206.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.8 seconds, 36.1%
Fitness Testing:    104.6 seconds, 50.6%
Report:              27.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -87.4474659361
Correct output: -136.0274654831 | Program output: -136.0274654831
Correct output: -9.2468197583  | Program output: -9.2468197583 
Correct output: 10.6350720891  | Program output: 10.6350720891 
Correct output: -59.3991693798 | Program output: -59.3991693798
Correct output: -115.2048572849 | Program output: -115.2048572849
Correct output: -6.125501297   | Program output: -6.125501297  
Correct output: -134.5687838788 | Program output: -134.5687838788
Correct output: -148.7052852825 | Program output: -148.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -19.3635646028
Correct output: -50.8267415348 | Program output: -50.8267415348
Correct output: 50.8166032664  | Program output: 50.8166032664 
Correct output: 33.6989683486  | Program output: 33.6989683486 
Correct output: 125.1419974748 | Program output: 125.1419974748
Correct output: 81.3713946753  | Program output: 81.3713946753 
Correct output: -12.8663238977 | Program output: -12.8663238977
Correct output: -8.8091035841  | Program output: -8.8091035841 
Correct output: -84.6988657133 | Program output: -84.6988657133
Correct output: 72.6804102537  | Program output: 72.6804102537 
Correct output: -154.5786526245 | Program output: -154.5786526245
Correct output: -23.511495195  | Program output: -23.511495195 
Correct output: -86.6536921432 | Program output: -86.6536921432
Correct output: -94.9646390768 | Program output: -94.9646390768
Correct output: -145.2671699493 | Program output: -145.2671699493
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_div} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dec} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_max} {:instruction float_dec} {:instruction in2} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_add} {:instruction print_float} {:instruction float_yank} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction 21} {:instruction float_pop} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_sin} {:instruction 94})
Best program: (integer_sub float_div integer_shove integer_mult float_mult float_dec float_dec float_yank float_dec float_dec float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_swap float_mult float_dec float_dec integer_max float_add float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec integer_sub float_mult float_dec in1 integer_max float_dec in2 float_inc integer_rot float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_pop float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2237.6812005
Median total errors in population: 110.0
Error averages by case: (89.17405279999993 2.788 91.40201189999993 2.415 89.23298040000007 3.542 75.4967104 3.454 90.10601499999999 3.222 90.44342189999996 2.402 87.37702510000004 2.591 91.4884879999999 2.438 91.92589550000004 3.059 79.3371994 2.728 74.45790410000005 3.444 87.77555820000006 2.369 84.39020129999994 3.534 83.34708939999994 2.316 88.6949235000001 2.37 84.03876810000007 2.934 84.19727820000006 2.741 91.70649479999994 2.955 88.97008080000005 2.346 78.65893940000002 3.146 92.24779009999995 2.412 83.32655239999994 2.253 90.03376159999993 2.42 89.32776870000008 2.341 91.81628950000002 2.488)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 72.473
Average program size in population (points): 73.473
Average percent parens in population: 0.014
Minimum age in population: 70.78608220908392
Maximum age in population: 74.74191996725725
Average age in population: 72.82294959426177
Median age in population: 72.85025430497133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.079
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 101776240
--- Timings ---
Current time: 1529615458455 milliseconds
Total Time:         210.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.3 seconds, 36.2%
Fitness Testing:    106.6 seconds, 50.5%
Report:              27.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 49
Successful program: (integer_sub float_div integer_shove integer_mult float_mult float_dec float_dec float_yank float_dec float_dec float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_swap float_mult float_dec float_dec integer_max float_add float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec integer_sub float_mult float_dec in1 integer_max float_dec in2 float_inc integer_rot float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_pop float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 69


Auto-simplifying with starting size: 69
step: 0
program: (integer_sub float_div integer_shove integer_mult float_mult float_dec float_dec float_yank float_dec float_dec float_mult float_shove float_dec float_dec float_sub integer_shove float_mult float_dec float_swap float_mult float_dec float_dec integer_max float_add float_stackdepth float_swap float_mult float_dec float_dec integer_max float_add float_dec float_yank float_dec integer_sub float_mult float_dec in1 integer_max float_dec in2 float_inc integer_rot float_frominteger integer_max float_add print_float float_yank float_dup_times print_float float_tan integer_swap integer_dup_times float_dup float_mult integer_fromfloat 21 float_pop float_dec integer_rot float_sin float_dup float_sin float_frominteger integer_fromfloat integer_max float_sin 94)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 69

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.4474659361 | Program output: -87.4474659361
Correct output: -136.0274654831 | Program output: -136.0274654831
Correct output: -9.2468197583  | Program output: -9.2468197583 
Correct output: 10.6350720891  | Program output: 10.6350720891 
Correct output: -59.3991693798 | Program output: -59.3991693798
Correct output: -115.2048572849 | Program output: -115.2048572849
Correct output: -6.125501297   | Program output: -6.125501297  
Correct output: -134.5687838788 | Program output: -134.5687838788
Correct output: -148.7052852825 | Program output: -148.7052852825
Correct output: -10.1232538326 | Program output: -10.1232538326
Correct output: -19.3635646028 | Program output: -19.3635646028
Correct output: -50.8267415348 | Program output: -50.8267415348
Correct output: 50.8166032664  | Program output: 50.8166032664 
Correct output: 33.6989683486  | Program output: 33.6989683486 
Correct output: 125.1419974748 | Program output: 125.1419974748
Correct output: 81.3713946753  | Program output: 81.3713946753 
Correct output: -12.8663238977 | Program output: -12.8663238977
Correct output: -8.8091035841  | Program output: -8.8091035841 
Correct output: -84.6988657133 | Program output: -84.6988657133
Correct output: 72.6804102537  | Program output: 72.6804102537 
Correct output: -154.5786526245 | Program output: -154.5786526245
Correct output: -23.511495195  | Program output: -23.511495195 
Correct output: -86.6536921432 | Program output: -86.6536921432
Correct output: -94.9646390768 | Program output: -94.9646390768
Correct output: -145.2671699493 | Program output: -145.2671699493
;;******************************
