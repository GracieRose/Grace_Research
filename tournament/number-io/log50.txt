Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-75.61472385802217 83] 7.385276141977826]
Train Case:   1 | Input/Output: [[-62.77790666018692 4] -58.77790666018692]
Train Case:   2 | Input/Output: [[-48.45443415909902 -22] -70.45443415909902]
Train Case:   3 | Input/Output: [[52.03031592284137 -4] 48.03031592284137]
Train Case:   4 | Input/Output: [[55.544404533756875 26] 81.54440453375688]
Train Case:   5 | Input/Output: [[80.60518199399647 27] 107.60518199399647]
Train Case:   6 | Input/Output: [[-21.867680175682608 78] 56.13231982431739]
Train Case:   7 | Input/Output: [[-97.51108112695282 -22] -119.51108112695282]
Train Case:   8 | Input/Output: [[-77.69530047075939 -60] -137.69530047075938]
Train Case:   9 | Input/Output: [[-18.973539861674936 47] 28.026460138325064]
Train Case:  10 | Input/Output: [[-31.985738807030017 51] 19.014261192969983]
Train Case:  11 | Input/Output: [[-55.56522346059434 -21] -76.56522346059434]
Train Case:  12 | Input/Output: [[-97.24960222569916 5] -92.24960222569916]
Train Case:  13 | Input/Output: [[-60.7264396507448 51] -9.726439650744801]
Train Case:  14 | Input/Output: [[10.404897195716003 -85] -74.595102804284]
Train Case:  15 | Input/Output: [[-82.22240670559175 -29] -111.22240670559175]
Train Case:  16 | Input/Output: [[8.202928908632387 17] 25.202928908632387]
Train Case:  17 | Input/Output: [[-11.777918065064895 -88] -99.7779180650649]
Train Case:  18 | Input/Output: [[26.32385749142938 -3] 23.32385749142938]
Train Case:  19 | Input/Output: [[-23.99754257873117 -58] -81.99754257873117]
Train Case:  20 | Input/Output: [[-61.38400592837212 -71] -132.38400592837212]
Train Case:  21 | Input/Output: [[61.94061596985506 -83] -21.05938403014494]
Train Case:  22 | Input/Output: [[-63.80567589374533 -22] -85.80567589374533]
Train Case:  23 | Input/Output: [[-93.91166940431224 -56] -149.91166940431225]
Train Case:  24 | Input/Output: [[39.68566778980366 -90] -50.31433221019634]
Test Case:   0 | Input/Output: [[77.77214793384482 95] 172.77214793384482]
Test Case:   1 | Input/Output: [[56.90527468133007 -86] -29.09472531866993]
Test Case:   2 | Input/Output: [[-37.44419215572512 -54] -91.44419215572512]
Test Case:   3 | Input/Output: [[22.676536472883384 -58] -35.323463527116616]
Test Case:   4 | Input/Output: [[-14.205705009585827 79] 64.79429499041417]
Test Case:   5 | Input/Output: [[46.80846500349071 -56] -9.19153499650929]
Test Case:   6 | Input/Output: [[76.60380634254679 -31] 45.60380634254679]
Test Case:   7 | Input/Output: [[52.99265048214096 -91] -38.00734951785904]
Test Case:   8 | Input/Output: [[-5.359839368305089 -69] -74.35983936830509]
Test Case:   9 | Input/Output: [[-57.70033336435254 -97] -154.70033336435253]
Test Case:  10 | Input/Output: [[-45.19352238398731 -2] -47.19352238398731]
Test Case:  11 | Input/Output: [[-53.31369324543782 72] 18.68630675456218]
Test Case:  12 | Input/Output: [[57.67601369690084 99] 156.67601369690084]
Test Case:  13 | Input/Output: [[3.856520969047523 -43] -39.14347903095248]
Test Case:  14 | Input/Output: [[88.52382879660288 -61] 27.523828796602885]
Test Case:  15 | Input/Output: [[-46.84357225192801 -24] -70.84357225192801]
Test Case:  16 | Input/Output: [[61.46241150616035 -97] -35.53758849383965]
Test Case:  17 | Input/Output: [[-43.716845399134826 69] 25.283154600865174]
Test Case:  18 | Input/Output: [[88.33633255416603 60] 148.33633255416603]
Test Case:  19 | Input/Output: [[-77.53924231696053 -31] -108.53924231696053]
Test Case:  20 | Input/Output: [[27.469402484992216 -2] 25.469402484992216]
Test Case:  21 | Input/Output: [[-16.445429928450167 70] 53.55457007154983]
Test Case:  22 | Input/Output: [[0.6048530129261849 50] 50.604853012926185]
Test Case:  23 | Input/Output: [[85.13783500536476 -55] 30.137835005364764]
Test Case:  24 | Input/Output: [[-48.53120393935879 25] -23.53120393935879]
Test Case:  25 | Input/Output: [[-61.932476960622985 -17] -78.93247696062298]
Test Case:  26 | Input/Output: [[7.061839955834287 -26] -18.938160044165713]
Test Case:  27 | Input/Output: [[-40.8436906930671 -81] -121.8436906930671]
Test Case:  28 | Input/Output: [[-85.37500232369332 -22] -107.37500232369332]
Test Case:  29 | Input/Output: [[-58.62383659879147 10] -48.62383659879147]
Test Case:  30 | Input/Output: [[12.707418384435115 36] 48.707418384435115]
Test Case:  31 | Input/Output: [[46.89971646371859 24] 70.89971646371859]
Test Case:  32 | Input/Output: [[70.98101882595768 -86] -15.018981174042324]
Test Case:  33 | Input/Output: [[55.23421329603502 -81] -25.765786703964977]
Test Case:  34 | Input/Output: [[87.63413288472049 -87] 0.6341328847204863]
Test Case:  35 | Input/Output: [[72.64960953193719 -81] -8.350390468062812]
Test Case:  36 | Input/Output: [[65.12673983269147 18] 83.12673983269147]
Test Case:  37 | Input/Output: [[14.556894306437826 -44] -29.443105693562174]
Test Case:  38 | Input/Output: [[-23.84605273634837 66] 42.15394726365163]
Test Case:  39 | Input/Output: [[83.69669932301304 88] 171.69669932301304]
Test Case:  40 | Input/Output: [[73.73952025038096 -9] 64.73952025038096]
Test Case:  41 | Input/Output: [[92.26411971274379 5] 97.26411971274379]
Test Case:  42 | Input/Output: [[-86.01096803699397 -41] -127.01096803699397]
Test Case:  43 | Input/Output: [[-50.01920129275954 90] 39.98079870724046]
Test Case:  44 | Input/Output: [[21.813891834522607 -66] -44.18610816547739]
Test Case:  45 | Input/Output: [[-52.707333084028996 28] -24.707333084028996]
Test Case:  46 | Input/Output: [[55.61289306307947 8] 63.61289306307947]
Test Case:  47 | Input/Output: [[27.379226051880636 62] 89.37922605188064]
Test Case:  48 | Input/Output: [[27.971655510780053 -17] 10.971655510780053]
Test Case:  49 | Input/Output: [[-43.16845041709178 -99] -142.16845041709178]
Test Case:  50 | Input/Output: [[-23.75291670421629 18] -5.75291670421629]
Test Case:  51 | Input/Output: [[-23.683771659275664 -90] -113.68377165927566]
Test Case:  52 | Input/Output: [[-68.39200789896267 -98] -166.39200789896267]
Test Case:  53 | Input/Output: [[23.96084658307649 69] 92.96084658307649]
Test Case:  54 | Input/Output: [[6.204613204699825 47] 53.204613204699825]
Test Case:  55 | Input/Output: [[-98.44475767809844 -75] -173.44475767809843]
Test Case:  56 | Input/Output: [[-99.3268002144784 90] -9.326800214478396]
Test Case:  57 | Input/Output: [[72.77428957081656 20] 92.77428957081656]
Test Case:  58 | Input/Output: [[45.69286467208579 -49] -3.30713532791421]
Test Case:  59 | Input/Output: [[-94.11643184230954 -40] -134.11643184230954]
Test Case:  60 | Input/Output: [[10.513069601653129 84] 94.51306960165313]
Test Case:  61 | Input/Output: [[86.58971727687651 41] 127.58971727687651]
Test Case:  62 | Input/Output: [[-63.142858247913615 -52] -115.14285824791361]
Test Case:  63 | Input/Output: [[-74.08235088653639 79] 4.917649113463611]
Test Case:  64 | Input/Output: [[58.56599333950882 9] 67.56599333950882]
Test Case:  65 | Input/Output: [[-25.304462392906274 -33] -58.304462392906274]
Test Case:  66 | Input/Output: [[-7.847849129385409 100] 92.15215087061459]
Test Case:  67 | Input/Output: [[-81.91544801654271 -91] -172.9154480165427]
Test Case:  68 | Input/Output: [[63.299243930348894 -10] 53.299243930348894]
Test Case:  69 | Input/Output: [[23.78613752222462 69] 92.78613752222462]
Test Case:  70 | Input/Output: [[99.35850964084472 -23] 76.35850964084472]
Test Case:  71 | Input/Output: [[36.01911050378058 42] 78.01911050378058]
Test Case:  72 | Input/Output: [[-81.58588117567848 -79] -160.58588117567848]
Test Case:  73 | Input/Output: [[11.889835638328435 -63] -51.110164361671565]
Test Case:  74 | Input/Output: [[50.08731046810681 -100] -49.91268953189319]
Test Case:  75 | Input/Output: [[-78.86779293139267 -44] -122.86779293139267]
Test Case:  76 | Input/Output: [[77.15726558288739 -15] 62.15726558288739]
Test Case:  77 | Input/Output: [[-42.51581843372216 13] -29.51581843372216]
Test Case:  78 | Input/Output: [[-61.58572148478174 -78] -139.58572148478174]
Test Case:  79 | Input/Output: [[12.30742607130368 -44] -31.69257392869632]
Test Case:  80 | Input/Output: [[18.101016236527755 -70] -51.898983763472245]
Test Case:  81 | Input/Output: [[-1.0906000383329513 20] 18.90939996166705]
Test Case:  82 | Input/Output: [[63.19195395929728 24] 87.19195395929728]
Test Case:  83 | Input/Output: [[-3.9898972132927213 11] 7.010102786707279]
Test Case:  84 | Input/Output: [[6.730913040306305 42] 48.730913040306305]
Test Case:  85 | Input/Output: [[-22.025632662339774 -100] -122.02563266233977]
Test Case:  86 | Input/Output: [[52.602857043485415 -45] 7.602857043485415]
Test Case:  87 | Input/Output: [[-7.872673348089052 56] 48.12732665191095]
Test Case:  88 | Input/Output: [[15.308690290595294 -91] -75.6913097094047]
Test Case:  89 | Input/Output: [[-75.20303661569005 -21] -96.20303661569005]
Test Case:  90 | Input/Output: [[-49.00409757150823 13] -36.00409757150823]
Test Case:  91 | Input/Output: [[93.53069867876596 51] 144.53069867876596]
Test Case:  92 | Input/Output: [[-87.1394164418242 4] -83.1394164418242]
Test Case:  93 | Input/Output: [[17.86693434842661 77] 94.86693434842661]
Test Case:  94 | Input/Output: [[-39.81541720831181 54] 14.184582791688193]
Test Case:  95 | Input/Output: [[-50.59019774713309 36] -14.59019774713309]
Test Case:  96 | Input/Output: [[-48.13160276517452 22] -26.13160276517452]
Test Case:  97 | Input/Output: [[32.20790705814619 -72] -39.79209294185381]
Test Case:  98 | Input/Output: [[-56.64580652429865 -9] -65.64580652429865]
Test Case:  99 | Input/Output: [[34.84541609877553 -49] -14.15458390122447]
Test Case: 100 | Input/Output: [[-14.997353737924769 -86] -100.99735373792477]
Test Case: 101 | Input/Output: [[-98.6593783065559 -30] -128.65937830655588]
Test Case: 102 | Input/Output: [[69.60518069773411 66] 135.6051806977341]
Test Case: 103 | Input/Output: [[72.74592944922034 18] 90.74592944922034]
Test Case: 104 | Input/Output: [[-37.028823711844375 24] -13.028823711844375]
Test Case: 105 | Input/Output: [[25.70342160747788 100] 125.70342160747788]
Test Case: 106 | Input/Output: [[64.99155478748384 -64] 0.9915547874838353]
Test Case: 107 | Input/Output: [[-50.07581787283475 77] 26.924182127165253]
Test Case: 108 | Input/Output: [[-23.631216177949483 -23] -46.63121617794948]
Test Case: 109 | Input/Output: [[9.143824216354488 -86] -76.85617578364551]
Test Case: 110 | Input/Output: [[-97.6545991077648 64] -33.654599107764795]
Test Case: 111 | Input/Output: [[73.63897070127092 90] 163.63897070127092]
Test Case: 112 | Input/Output: [[86.53719732803086 -74] 12.537197328030857]
Test Case: 113 | Input/Output: [[0.8435309960327828 29] 29.843530996032783]
Test Case: 114 | Input/Output: [[-28.096495593629967 48] 19.903504406370033]
Test Case: 115 | Input/Output: [[-72.62028015917718 63] -9.620280159177184]
Test Case: 116 | Input/Output: [[-32.92906698476142 -94] -126.92906698476142]
Test Case: 117 | Input/Output: [[1.1502768049577412 -67] -65.84972319504226]
Test Case: 118 | Input/Output: [[23.437964644287362 40] 63.43796464428736]
Test Case: 119 | Input/Output: [[-85.48294500150666 28] -57.482945001506664]
Test Case: 120 | Input/Output: [[51.39148044617653 26] 77.39148044617653]
Test Case: 121 | Input/Output: [[-36.65931528527302 67] 30.340684714726983]
Test Case: 122 | Input/Output: [[71.48783577241048 22] 93.48783577241048]
Test Case: 123 | Input/Output: [[-54.08652565093794 10] -44.08652565093794]
Test Case: 124 | Input/Output: [[-99.58708384915873 75] -24.58708384915873]
Test Case: 125 | Input/Output: [[46.26977166113198 94] 140.26977166113198]
Test Case: 126 | Input/Output: [[-65.88676736003862 13] -52.88676736003862]
Test Case: 127 | Input/Output: [[-96.4114486448064 20] -76.4114486448064]
Test Case: 128 | Input/Output: [[-25.57176138325923 -21] -46.57176138325923]
Test Case: 129 | Input/Output: [[-25.303071053870752 -42] -67.30307105387075]
Test Case: 130 | Input/Output: [[0.830665795115678 59] 59.83066579511568]
Test Case: 131 | Input/Output: [[53.53398838185848 -45] 8.533988381858478]
Test Case: 132 | Input/Output: [[47.39198248768696 60] 107.39198248768696]
Test Case: 133 | Input/Output: [[-85.62775809336065 94] 8.372241906639346]
Test Case: 134 | Input/Output: [[-72.91491356655476 29] -43.91491356655476]
Test Case: 135 | Input/Output: [[-98.7857189284 -90] -188.7857189284]
Test Case: 136 | Input/Output: [[50.543950848172415 50] 100.54395084817241]
Test Case: 137 | Input/Output: [[5.352629792561345 -45] -39.647370207438655]
Test Case: 138 | Input/Output: [[0.057894312398019565 -63] -62.94210568760198]
Test Case: 139 | Input/Output: [[10.551939552029793 79] 89.5519395520298]
Test Case: 140 | Input/Output: [[27.457953380514198 -77] -49.5420466194858]
Test Case: 141 | Input/Output: [[-39.10180158584049 93] 53.89819841415951]
Test Case: 142 | Input/Output: [[-72.30074767312607 -94] -166.30074767312607]
Test Case: 143 | Input/Output: [[1.7121769010537378 57] 58.71217690105374]
Test Case: 144 | Input/Output: [[56.15266991573117 96] 152.15266991573117]
Test Case: 145 | Input/Output: [[-47.27449246312669 89] 41.72550753687331]
Test Case: 146 | Input/Output: [[-40.39749880674637 44] 3.60250119325363]
Test Case: 147 | Input/Output: [[-76.96005090711995 -48] -124.96005090711995]
Test Case: 148 | Input/Output: [[-71.76799241454579 -70] -141.7679924145458]
Test Case: 149 | Input/Output: [[-49.838725246751835 48] -1.8387252467518351]
Test Case: 150 | Input/Output: [[-61.41982926851863 53] -8.419829268518633]
Test Case: 151 | Input/Output: [[98.97890293134682 -5] 93.97890293134682]
Test Case: 152 | Input/Output: [[-53.61403031437919 -41] -94.61403031437919]
Test Case: 153 | Input/Output: [[33.40541508850839 -57] -23.59458491149161]
Test Case: 154 | Input/Output: [[89.84662159167215 87] 176.84662159167215]
Test Case: 155 | Input/Output: [[-76.04537926546374 97] 20.954620734536263]
Test Case: 156 | Input/Output: [[31.287444362171044 9] 40.287444362171044]
Test Case: 157 | Input/Output: [[-2.7819574501607605 45] 42.21804254983924]
Test Case: 158 | Input/Output: [[-65.1430131430977 38] -27.143013143097704]
Test Case: 159 | Input/Output: [[-51.9070798420628 71] 19.0929201579372]
Test Case: 160 | Input/Output: [[-69.68844539611626 -79] -148.68844539611626]
Test Case: 161 | Input/Output: [[-48.46366597783618 42] -6.463665977836179]
Test Case: 162 | Input/Output: [[-68.5971128344119 -13] -81.5971128344119]
Test Case: 163 | Input/Output: [[-37.718988290910936 -43] -80.71898829091094]
Test Case: 164 | Input/Output: [[91.54258210270544 22] 113.54258210270544]
Test Case: 165 | Input/Output: [[63.84735126528372 -63] 0.8473512652837201]
Test Case: 166 | Input/Output: [[83.22523115103039 -61] 22.225231151030385]
Test Case: 167 | Input/Output: [[-16.131146719954543 87] 70.86885328004546]
Test Case: 168 | Input/Output: [[84.427424976378 -82] 2.4274249763780062]
Test Case: 169 | Input/Output: [[87.16985701946183 -80] 7.16985701946183]
Test Case: 170 | Input/Output: [[62.80545037151484 -21] 41.80545037151484]
Test Case: 171 | Input/Output: [[43.331363704359205 -10] 33.331363704359205]
Test Case: 172 | Input/Output: [[-79.30082493858708 -3] -82.30082493858708]
Test Case: 173 | Input/Output: [[73.54642704406032 56] 129.54642704406032]
Test Case: 174 | Input/Output: [[-4.3258893623205665 16] 11.674110637679433]
Test Case: 175 | Input/Output: [[-58.14533224379439 46] -12.145332243794392]
Test Case: 176 | Input/Output: [[47.29000523275036 67] 114.29000523275036]
Test Case: 177 | Input/Output: [[-33.31659293728386 -23] -56.31659293728386]
Test Case: 178 | Input/Output: [[98.02401634604664 -62] 36.024016346046636]
Test Case: 179 | Input/Output: [[78.4756953235134 36] 114.4756953235134]
Test Case: 180 | Input/Output: [[-63.5684803974685 -6] -69.5684803974685]
Test Case: 181 | Input/Output: [[-13.709485878547184 -24] -37.709485878547184]
Test Case: 182 | Input/Output: [[-8.007893385770032 53] 44.99210661422997]
Test Case: 183 | Input/Output: [[37.05896921517177 -81] -43.94103078482823]
Test Case: 184 | Input/Output: [[-74.74350620836721 79] 4.256493791632792]
Test Case: 185 | Input/Output: [[-82.00365216498841 -69] -151.0036521649884]
Test Case: 186 | Input/Output: [[-78.37644498405126 -69] -147.37644498405126]
Test Case: 187 | Input/Output: [[2.257997233996207 73] 75.2579972339962]
Test Case: 188 | Input/Output: [[78.34015002748504 94] 172.34015002748504]
Test Case: 189 | Input/Output: [[42.40521962288929 38] 80.40521962288929]
Test Case: 190 | Input/Output: [[24.515313435634667 83] 107.51531343563467]
Test Case: 191 | Input/Output: [[84.25890051670444 -28] 56.25890051670444]
Test Case: 192 | Input/Output: [[-81.34452517782265 -10] -91.34452517782265]
Test Case: 193 | Input/Output: [[69.11030117005325 66] 135.11030117005325]
Test Case: 194 | Input/Output: [[-92.11121722740924 -35] -127.11121722740924]
Test Case: 195 | Input/Output: [[-47.70833505053367 -16] -63.70833505053367]
Test Case: 196 | Input/Output: [[-98.03477488920727 75] -23.03477488920727]
Test Case: 197 | Input/Output: [[87.43619496150009 -22] 65.43619496150009]
Test Case: 198 | Input/Output: [[-41.892893339673606 -44] -85.8928933396736]
Test Case: 199 | Input/Output: [[10.540176683193025 -15] -4.459823316806975]
Test Case: 200 | Input/Output: [[-31.183168477777684 89] 57.816831522222316]
Test Case: 201 | Input/Output: [[-95.71784187780143 8] -87.71784187780143]
Test Case: 202 | Input/Output: [[-28.149180847865637 21] -7.149180847865637]
Test Case: 203 | Input/Output: [[-23.79633265366033 71] 47.20366734633967]
Test Case: 204 | Input/Output: [[61.1504897238506 76] 137.1504897238506]
Test Case: 205 | Input/Output: [[19.783315638671212 100] 119.78331563867121]
Test Case: 206 | Input/Output: [[-58.509067579856634 -93] -151.50906757985663]
Test Case: 207 | Input/Output: [[-13.400160161953977 48] 34.59983983804602]
Test Case: 208 | Input/Output: [[-53.54754405491826 83] 29.452455945081738]
Test Case: 209 | Input/Output: [[-3.8158184862871565 -29] -32.81581848628716]
Test Case: 210 | Input/Output: [[-83.57177154604321 -40] -123.57177154604321]
Test Case: 211 | Input/Output: [[47.397027997057734 96] 143.39702799705773]
Test Case: 212 | Input/Output: [[-83.48083615685536 75] -8.48083615685536]
Test Case: 213 | Input/Output: [[-32.765759246992204 -26] -58.765759246992204]
Test Case: 214 | Input/Output: [[-46.695784856523595 53] 6.304215143476405]
Test Case: 215 | Input/Output: [[-50.3514182303755 -92] -142.3514182303755]
Test Case: 216 | Input/Output: [[-4.080316375991671 35] 30.91968362400833]
Test Case: 217 | Input/Output: [[-6.6882000167975235 -23] -29.688200016797524]
Test Case: 218 | Input/Output: [[43.04801685734748 1] 44.04801685734748]
Test Case: 219 | Input/Output: [[-58.57454637329802 26] -32.57454637329802]
Test Case: 220 | Input/Output: [[-48.93063272057261 -81] -129.93063272057262]
Test Case: 221 | Input/Output: [[91.11495540121547 -45] 46.11495540121547]
Test Case: 222 | Input/Output: [[49.50119832991126 36] 85.50119832991126]
Test Case: 223 | Input/Output: [[-95.58121149706373 -82] -177.58121149706375]
Test Case: 224 | Input/Output: [[94.63282501655274 85] 179.63282501655274]
Test Case: 225 | Input/Output: [[30.75196812059872 6] 36.75196812059872]
Test Case: 226 | Input/Output: [[53.47680016282993 24] 77.47680016282993]
Test Case: 227 | Input/Output: [[57.96761078524702 -55] 2.967610785247018]
Test Case: 228 | Input/Output: [[86.53805662275013 79] 165.53805662275013]
Test Case: 229 | Input/Output: [[-4.094732089440512 14] 9.905267910559488]
Test Case: 230 | Input/Output: [[-85.7535066767065 -27] -112.7535066767065]
Test Case: 231 | Input/Output: [[-35.086865561597364 0] -35.086865561597364]
Test Case: 232 | Input/Output: [[37.21047830614572 -69] -31.789521693854283]
Test Case: 233 | Input/Output: [[-6.844870355696003 -26] -32.844870355696]
Test Case: 234 | Input/Output: [[-59.78310608571642 57] -2.783106085716419]
Test Case: 235 | Input/Output: [[25.022692295513053 83] 108.02269229551305]
Test Case: 236 | Input/Output: [[-42.4256729620178 69] 26.5743270379822]
Test Case: 237 | Input/Output: [[66.11130458967685 10] 76.11130458967685]
Test Case: 238 | Input/Output: [[-41.783724055022596 -46] -87.78372405502259]
Test Case: 239 | Input/Output: [[-70.08666915340993 -96] -166.08666915340993]
Test Case: 240 | Input/Output: [[85.90283544951939 54] 139.9028354495194]
Test Case: 241 | Input/Output: [[22.483947460815173 -73] -50.51605253918483]
Test Case: 242 | Input/Output: [[-76.62803529280262 23] -53.62803529280262]
Test Case: 243 | Input/Output: [[-2.9282618876565323 67] 64.07173811234347]
Test Case: 244 | Input/Output: [[55.77637656660923 -82] -26.22362343339077]
Test Case: 245 | Input/Output: [[49.78821088790289 -98] -48.21178911209711]
Test Case: 246 | Input/Output: [[-35.067665923384325 5] -30.067665923384325]
Test Case: 247 | Input/Output: [[-57.685792272036274 19] -38.685792272036274]
Test Case: 248 | Input/Output: [[60.17869473272927 83] 143.17869473272927]
Test Case: 249 | Input/Output: [[-77.02391909911586 -40] -117.02391909911586]
Test Case: 250 | Input/Output: [[70.99298295908241 -71] -0.007017040917588702]
Test Case: 251 | Input/Output: [[90.22368980179957 22] 112.22368980179957]
Test Case: 252 | Input/Output: [[-31.002558395331263 -51] -82.00255839533126]
Test Case: 253 | Input/Output: [[84.44104371316422 -15] 69.44104371316422]
Test Case: 254 | Input/Output: [[-48.98768996160181 9] -39.98768996160181]
Test Case: 255 | Input/Output: [[-41.5412155642763 -38] -79.5412155642763]
Test Case: 256 | Input/Output: [[-61.30703814497123 -45] -106.30703814497123]
Test Case: 257 | Input/Output: [[-34.5336595430564 51] 16.4663404569436]
Test Case: 258 | Input/Output: [[-86.93840393893578 -65] -151.93840393893578]
Test Case: 259 | Input/Output: [[-31.76387738952525 35] 3.2361226104747516]
Test Case: 260 | Input/Output: [[71.04010078428834 -95] -23.95989921571166]
Test Case: 261 | Input/Output: [[40.29571012137146 -31] 9.295710121371457]
Test Case: 262 | Input/Output: [[52.421212375622076 -31] 21.421212375622076]
Test Case: 263 | Input/Output: [[26.75692886435108 -70] -43.24307113564892]
Test Case: 264 | Input/Output: [[-40.80488221669469 3] -37.80488221669469]
Test Case: 265 | Input/Output: [[31.61442688043752 -40] -8.38557311956248]
Test Case: 266 | Input/Output: [[-82.26638343738546 61] -21.266383437385457]
Test Case: 267 | Input/Output: [[-41.26692432437793 -59] -100.26692432437792]
Test Case: 268 | Input/Output: [[90.99148283543431 96] 186.9914828354343]
Test Case: 269 | Input/Output: [[76.8781276557919 12] 88.8781276557919]
Test Case: 270 | Input/Output: [[37.799136732107144 -98] -60.200863267892856]
Test Case: 271 | Input/Output: [[46.66872221929711 -54] -7.331277780702891]
Test Case: 272 | Input/Output: [[-99.94088734675142 33] -66.94088734675142]
Test Case: 273 | Input/Output: [[21.712142382706134 64] 85.71214238270613]
Test Case: 274 | Input/Output: [[4.1984084507931385 92] 96.19840845079314]
Test Case: 275 | Input/Output: [[-15.782552994467295 -52] -67.7825529944673]
Test Case: 276 | Input/Output: [[96.32464967890354 40] 136.32464967890354]
Test Case: 277 | Input/Output: [[87.57809212840667 -45] 42.57809212840667]
Test Case: 278 | Input/Output: [[-50.22041665066821 18] -32.22041665066821]
Test Case: 279 | Input/Output: [[17.20107717525501 55] 72.20107717525501]
Test Case: 280 | Input/Output: [[-82.82409732233344 11] -71.82409732233344]
Test Case: 281 | Input/Output: [[50.98653616515128 -17] 33.98653616515128]
Test Case: 282 | Input/Output: [[13.28160642365539 29] 42.28160642365539]
Test Case: 283 | Input/Output: [[-56.56695938264937 20] -36.56695938264937]
Test Case: 284 | Input/Output: [[57.59512978174541 84] 141.5951297817454]
Test Case: 285 | Input/Output: [[-51.44884275695543 -82] -133.44884275695543]
Test Case: 286 | Input/Output: [[-66.35467238967726 -56] -122.35467238967726]
Test Case: 287 | Input/Output: [[28.95551643755155 74] 102.95551643755155]
Test Case: 288 | Input/Output: [[-6.724301830089942 46] 39.27569816991006]
Test Case: 289 | Input/Output: [[5.2733577485556395 59] 64.27335774855564]
Test Case: 290 | Input/Output: [[-66.80078931084694 -19] -85.80078931084694]
Test Case: 291 | Input/Output: [[-61.996203227812316 -15] -76.99620322781232]
Test Case: 292 | Input/Output: [[-95.66968841232747 19] -76.66968841232747]
Test Case: 293 | Input/Output: [[8.94394243121377 80] 88.94394243121377]
Test Case: 294 | Input/Output: [[-42.95702071865919 18] -24.957020718659187]
Test Case: 295 | Input/Output: [[93.75390084031136 -90] 3.75390084031136]
Test Case: 296 | Input/Output: [[-37.523807297380515 -33] -70.52380729738051]
Test Case: 297 | Input/Output: [[-98.58434563068298 14] -84.58434563068298]
Test Case: 298 | Input/Output: [[-18.620538548957 26] 7.379461451042999]
Test Case: 299 | Input/Output: [[-67.53631934184692 62] -5.536319341846919]
Test Case: 300 | Input/Output: [[20.808585263286062 -9] 11.808585263286062]
Test Case: 301 | Input/Output: [[70.23710016848511 -15] 55.237100168485114]
Test Case: 302 | Input/Output: [[-81.08230191084616 60] -21.082301910846155]
Test Case: 303 | Input/Output: [[9.19283352346369 -54] -44.80716647653631]
Test Case: 304 | Input/Output: [[80.49940181816655 -8] 72.49940181816655]
Test Case: 305 | Input/Output: [[60.056248473331095 45] 105.0562484733311]
Test Case: 306 | Input/Output: [[30.99514231917024 67] 97.99514231917024]
Test Case: 307 | Input/Output: [[-30.332213654775273 98] 67.66778634522473]
Test Case: 308 | Input/Output: [[-37.16745793064105 67] 29.83254206935895]
Test Case: 309 | Input/Output: [[-50.03062796804399 30] -20.030627968043987]
Test Case: 310 | Input/Output: [[21.75725071967183 -100] -78.24274928032817]
Test Case: 311 | Input/Output: [[78.93947457788204 75] 153.93947457788204]
Test Case: 312 | Input/Output: [[-47.2069722877476 -5] -52.2069722877476]
Test Case: 313 | Input/Output: [[22.583625194784247 50] 72.58362519478425]
Test Case: 314 | Input/Output: [[15.60965528021778 24] 39.60965528021778]
Test Case: 315 | Input/Output: [[-33.25307491957838 -20] -53.25307491957838]
Test Case: 316 | Input/Output: [[97.66754601506085 -80] 17.66754601506085]
Test Case: 317 | Input/Output: [[0.2594397100942274 -98] -97.74056028990577]
Test Case: 318 | Input/Output: [[40.49140319499662 80] 120.49140319499662]
Test Case: 319 | Input/Output: [[-29.86104637217022 -41] -70.86104637217022]
Test Case: 320 | Input/Output: [[-30.115184788703203 10] -20.115184788703203]
Test Case: 321 | Input/Output: [[-65.69218561695627 -17] -82.69218561695627]
Test Case: 322 | Input/Output: [[26.94648402620618 80] 106.94648402620618]
Test Case: 323 | Input/Output: [[21.312142063858502 93] 114.3121420638585]
Test Case: 324 | Input/Output: [[56.26801805855203 90] 146.26801805855203]
Test Case: 325 | Input/Output: [[-18.284535507471844 71] 52.715464492528156]
Test Case: 326 | Input/Output: [[-96.69488622817948 -27] -123.69488622817948]
Test Case: 327 | Input/Output: [[77.21641181954905 42] 119.21641181954905]
Test Case: 328 | Input/Output: [[-43.77847065960332 2] -41.77847065960332]
Test Case: 329 | Input/Output: [[2.119333106177848 -60] -57.88066689382215]
Test Case: 330 | Input/Output: [[22.64042014760888 -10] 12.640420147608879]
Test Case: 331 | Input/Output: [[1.256900113450527 -23] -21.743099886549473]
Test Case: 332 | Input/Output: [[-71.38527566776729 40] -31.38527566776729]
Test Case: 333 | Input/Output: [[-43.591776593274226 68] 24.408223406725774]
Test Case: 334 | Input/Output: [[55.875754470808005 81] 136.875754470808]
Test Case: 335 | Input/Output: [[-35.806612872560635 60] 24.193387127439365]
Test Case: 336 | Input/Output: [[-18.191372964346343 -37] -55.19137296434634]
Test Case: 337 | Input/Output: [[58.46213797097727 93] 151.46213797097727]
Test Case: 338 | Input/Output: [[-13.990587892175668 42] 28.009412107824332]
Test Case: 339 | Input/Output: [[-11.237789570076856 35] 23.762210429923144]
Test Case: 340 | Input/Output: [[-25.59510751721028 55] 29.40489248278972]
Test Case: 341 | Input/Output: [[-39.929559938141864 -3] -42.929559938141864]
Test Case: 342 | Input/Output: [[-59.70235812590929 57] -2.702358125909292]
Test Case: 343 | Input/Output: [[-36.866555998243975 -20] -56.866555998243975]
Test Case: 344 | Input/Output: [[-25.789989870718216 79] 53.210010129281784]
Test Case: 345 | Input/Output: [[-0.509018828109788 41] 40.49098117189021]
Test Case: 346 | Input/Output: [[-17.88194748953586 -3] -20.88194748953586]
Test Case: 347 | Input/Output: [[-34.33528572908759 -78] -112.33528572908759]
Test Case: 348 | Input/Output: [[-31.616700711735234 -36] -67.61670071173523]
Test Case: 349 | Input/Output: [[-72.5862817428559 67] -5.586281742855903]
Test Case: 350 | Input/Output: [[-80.53886060100612 32] -48.53886060100612]
Test Case: 351 | Input/Output: [[-35.03695716559845 -82] -117.03695716559845]
Test Case: 352 | Input/Output: [[-78.41650860930312 -78] -156.41650860930312]
Test Case: 353 | Input/Output: [[32.56613896800667 -75] -42.43386103199333]
Test Case: 354 | Input/Output: [[-31.20282946275266 99] 67.79717053724734]
Test Case: 355 | Input/Output: [[-62.07510682027837 -59] -121.07510682027836]
Test Case: 356 | Input/Output: [[19.64461570617648 100] 119.64461570617648]
Test Case: 357 | Input/Output: [[-0.7881615510761293 -58] -58.78816155107613]
Test Case: 358 | Input/Output: [[-29.51265933025813 -75] -104.51265933025813]
Test Case: 359 | Input/Output: [[89.30302072188312 -14] 75.30302072188312]
Test Case: 360 | Input/Output: [[-62.92318482272587 -39] -101.92318482272587]
Test Case: 361 | Input/Output: [[-87.96640574630422 -18] -105.96640574630422]
Test Case: 362 | Input/Output: [[46.07260294848729 -45] 1.0726029484872868]
Test Case: 363 | Input/Output: [[-35.16577362479532 -66] -101.16577362479532]
Test Case: 364 | Input/Output: [[-50.11806052738792 83] 32.88193947261208]
Test Case: 365 | Input/Output: [[63.34590896177994 35] 98.34590896177994]
Test Case: 366 | Input/Output: [[-67.73412931209579 -71] -138.73412931209577]
Test Case: 367 | Input/Output: [[-69.08999935571028 70] 0.9100006442897239]
Test Case: 368 | Input/Output: [[-33.44396499066981 -2] -35.44396499066981]
Test Case: 369 | Input/Output: [[93.07338466579216 14] 107.07338466579216]
Test Case: 370 | Input/Output: [[57.41509660278635 -8] 49.41509660278635]
Test Case: 371 | Input/Output: [[54.844743632709026 -93] -38.155256367290974]
Test Case: 372 | Input/Output: [[44.992212518352346 -20] 24.992212518352346]
Test Case: 373 | Input/Output: [[85.80507310492206 -33] 52.80507310492206]
Test Case: 374 | Input/Output: [[-97.57726891228695 -37] -134.57726891228697]
Test Case: 375 | Input/Output: [[60.574957296675905 -37] 23.574957296675905]
Test Case: 376 | Input/Output: [[-26.279422212378563 8] -18.279422212378563]
Test Case: 377 | Input/Output: [[5.690338103113348 -36] -30.309661896886652]
Test Case: 378 | Input/Output: [[3.893108918187636 -78] -74.10689108181236]
Test Case: 379 | Input/Output: [[-99.05026642152083 -92] -191.05026642152083]
Test Case: 380 | Input/Output: [[-90.70615674407965 6] -84.70615674407965]
Test Case: 381 | Input/Output: [[10.615087347598902 -68] -57.3849126524011]
Test Case: 382 | Input/Output: [[-74.64249896402684 83] 8.357501035973158]
Test Case: 383 | Input/Output: [[-45.81660428658631 16] -29.816604286586312]
Test Case: 384 | Input/Output: [[-35.75452219641659 25] -10.754522196416588]
Test Case: 385 | Input/Output: [[-52.35229667468282 3] -49.35229667468282]
Test Case: 386 | Input/Output: [[92.06693463792993 -36] 56.06693463792993]
Test Case: 387 | Input/Output: [[62.90121424035385 84] 146.90121424035385]
Test Case: 388 | Input/Output: [[-37.910807001489324 61] 23.089192998510676]
Test Case: 389 | Input/Output: [[-21.815749184841266 13] -8.815749184841266]
Test Case: 390 | Input/Output: [[-67.34731011043436 -32] -99.34731011043436]
Test Case: 391 | Input/Output: [[-18.250743874211224 19] 0.7492561257887758]
Test Case: 392 | Input/Output: [[14.42934352514365 -50] -35.57065647485635]
Test Case: 393 | Input/Output: [[-83.77498980263347 48] -35.77498980263347]
Test Case: 394 | Input/Output: [[3.3668272554902217 -34] -30.63317274450978]
Test Case: 395 | Input/Output: [[-48.361716728517344 61] 12.638283271482656]
Test Case: 396 | Input/Output: [[-2.6103247994457632 -39] -41.61032479944576]
Test Case: 397 | Input/Output: [[-82.64052883232422 38] -44.64052883232422]
Test Case: 398 | Input/Output: [[-84.22789763200376 -82] -166.22789763200376]
Test Case: 399 | Input/Output: [[-92.77259837495278 -94] -186.7725983749528]
Test Case: 400 | Input/Output: [[19.866313872152034 81] 100.86631387215203]
Test Case: 401 | Input/Output: [[95.4562882937623 40] 135.4562882937623]
Test Case: 402 | Input/Output: [[45.976633339107394 -7] 38.976633339107394]
Test Case: 403 | Input/Output: [[79.52011706270878 -50] 29.520117062708778]
Test Case: 404 | Input/Output: [[-46.379787973707586 51] 4.620212026292414]
Test Case: 405 | Input/Output: [[30.787624950976408 92] 122.78762495097641]
Test Case: 406 | Input/Output: [[-73.59324808516759 -96] -169.5932480851676]
Test Case: 407 | Input/Output: [[68.58373008407568 -35] 33.58373008407568]
Test Case: 408 | Input/Output: [[-72.32875690718203 53] -19.328756907182026]
Test Case: 409 | Input/Output: [[72.13681644999525 26] 98.13681644999525]
Test Case: 410 | Input/Output: [[39.293462822443615 99] 138.29346282244362]
Test Case: 411 | Input/Output: [[-99.08998202410382 -37] -136.08998202410382]
Test Case: 412 | Input/Output: [[27.58041646453549 3] 30.58041646453549]
Test Case: 413 | Input/Output: [[54.08430555064146 60] 114.08430555064146]
Test Case: 414 | Input/Output: [[-10.898733269656773 7] -3.8987332696567734]
Test Case: 415 | Input/Output: [[99.71319105249768 -89] 10.713191052497677]
Test Case: 416 | Input/Output: [[84.90984527448967 100] 184.90984527448967]
Test Case: 417 | Input/Output: [[3.461805638138742 -7] -3.538194361861258]
Test Case: 418 | Input/Output: [[-5.432592521401531 -21] -26.43259252140153]
Test Case: 419 | Input/Output: [[78.41850873097621 58] 136.4185087309762]
Test Case: 420 | Input/Output: [[49.161831415134856 -62] -12.838168584865144]
Test Case: 421 | Input/Output: [[1.9793641355032747 41] 42.979364135503275]
Test Case: 422 | Input/Output: [[77.81886583213338 69] 146.81886583213338]
Test Case: 423 | Input/Output: [[-23.73559822550142 -91] -114.73559822550142]
Test Case: 424 | Input/Output: [[54.04716120305147 -27] 27.047161203051473]
Test Case: 425 | Input/Output: [[-35.62806086518819 73] 37.37193913481181]
Test Case: 426 | Input/Output: [[-28.87292807914727 -45] -73.87292807914727]
Test Case: 427 | Input/Output: [[37.23140171686134 -17] 20.231401716861342]
Test Case: 428 | Input/Output: [[51.713197574380786 7] 58.713197574380786]
Test Case: 429 | Input/Output: [[44.37515615473612 85] 129.37515615473612]
Test Case: 430 | Input/Output: [[-49.35531183536492 12] -37.35531183536492]
Test Case: 431 | Input/Output: [[-64.99593998349387 -2] -66.99593998349387]
Test Case: 432 | Input/Output: [[-40.11242478583576 -94] -134.11242478583577]
Test Case: 433 | Input/Output: [[94.10773991619493 -61] 33.10773991619493]
Test Case: 434 | Input/Output: [[-77.33854557051079 -37] -114.33854557051079]
Test Case: 435 | Input/Output: [[-95.50319772575955 25] -70.50319772575955]
Test Case: 436 | Input/Output: [[34.74026777292292 57] 91.74026777292292]
Test Case: 437 | Input/Output: [[40.6800027775044 18] 58.6800027775044]
Test Case: 438 | Input/Output: [[-37.41396536424135 12] -25.41396536424135]
Test Case: 439 | Input/Output: [[90.01456316037846 -97] -6.985436839621542]
Test Case: 440 | Input/Output: [[66.69000762640897 38] 104.69000762640897]
Test Case: 441 | Input/Output: [[-9.977386628223982 -48] -57.97738662822398]
Test Case: 442 | Input/Output: [[-10.126209125632045 -43] -53.126209125632045]
Test Case: 443 | Input/Output: [[-20.129220095288886 -75] -95.12922009528889]
Test Case: 444 | Input/Output: [[-61.64269059918812 -68] -129.64269059918811]
Test Case: 445 | Input/Output: [[16.967225217624176 -60] -43.032774782375824]
Test Case: 446 | Input/Output: [[86.70974757113387 40] 126.70974757113387]
Test Case: 447 | Input/Output: [[43.39948742987926 -79] -35.60051257012074]
Test Case: 448 | Input/Output: [[24.822379312872968 91] 115.82237931287297]
Test Case: 449 | Input/Output: [[21.927449878482875 -89] -67.07255012151712]
Test Case: 450 | Input/Output: [[-94.01150819171127 -30] -124.01150819171127]
Test Case: 451 | Input/Output: [[94.74259414793224 -51] 43.74259414793224]
Test Case: 452 | Input/Output: [[59.65213412898106 46] 105.65213412898106]
Test Case: 453 | Input/Output: [[-78.54471604635745 77] -1.5447160463574505]
Test Case: 454 | Input/Output: [[-11.018445128760973 91] 79.98155487123903]
Test Case: 455 | Input/Output: [[-43.28559035574915 -36] -79.28559035574915]
Test Case: 456 | Input/Output: [[-40.79100123775197 7] -33.79100123775197]
Test Case: 457 | Input/Output: [[23.017193318544955 61] 84.01719331854495]
Test Case: 458 | Input/Output: [[-51.5782101157056 -15] -66.5782101157056]
Test Case: 459 | Input/Output: [[-96.37435546526115 -60] -156.37435546526115]
Test Case: 460 | Input/Output: [[39.007620120632424 47] 86.00762012063242]
Test Case: 461 | Input/Output: [[98.64106270529757 75] 173.64106270529757]
Test Case: 462 | Input/Output: [[-22.08934863977727 -51] -73.08934863977727]
Test Case: 463 | Input/Output: [[77.17297702122389 -59] 18.172977021223886]
Test Case: 464 | Input/Output: [[77.71263663882019 -60] 17.712636638820186]
Test Case: 465 | Input/Output: [[-62.94049018133836 47] -15.940490181338362]
Test Case: 466 | Input/Output: [[89.69903189634084 27] 116.69903189634084]
Test Case: 467 | Input/Output: [[-27.500541377313795 64] 36.499458622686205]
Test Case: 468 | Input/Output: [[-96.40166046922411 63] -33.40166046922411]
Test Case: 469 | Input/Output: [[-20.967654853667455 -15] -35.967654853667455]
Test Case: 470 | Input/Output: [[68.2967159568197 -41] 27.296715956819696]
Test Case: 471 | Input/Output: [[45.99843531627948 -73] -27.001564683720517]
Test Case: 472 | Input/Output: [[37.220590135479256 -23] 14.220590135479256]
Test Case: 473 | Input/Output: [[51.57796907401351 -58] -6.4220309259864905]
Test Case: 474 | Input/Output: [[-99.68616376344622 -42] -141.68616376344622]
Test Case: 475 | Input/Output: [[26.974698179337466 -37] -10.025301820662534]
Test Case: 476 | Input/Output: [[-16.628673758005135 44] 27.371326241994865]
Test Case: 477 | Input/Output: [[27.539174594534515 -54] -26.460825405465485]
Test Case: 478 | Input/Output: [[-51.522454205950694 -67] -118.5224542059507]
Test Case: 479 | Input/Output: [[59.63311250293458 -39] 20.63311250293458]
Test Case: 480 | Input/Output: [[6.1702293269385535 8] 14.170229326938554]
Test Case: 481 | Input/Output: [[58.764068378192945 11] 69.76406837819295]
Test Case: 482 | Input/Output: [[67.61821721118523 96] 163.61821721118523]
Test Case: 483 | Input/Output: [[-13.395284289124177 -88] -101.39528428912418]
Test Case: 484 | Input/Output: [[-71.4999612500138 -68] -139.4999612500138]
Test Case: 485 | Input/Output: [[-57.35936919420483 31] -26.35936919420483]
Test Case: 486 | Input/Output: [[98.1303008368103 64] 162.1303008368103]
Test Case: 487 | Input/Output: [[-50.200217101111974 43] -7.200217101111974]
Test Case: 488 | Input/Output: [[34.02310548055112 30] 64.02310548055112]
Test Case: 489 | Input/Output: [[4.268908614921244 22] 26.268908614921244]
Test Case: 490 | Input/Output: [[-10.934154889640595 -80] -90.9341548896406]
Test Case: 491 | Input/Output: [[-30.330481918868244 -5] -35.330481918868244]
Test Case: 492 | Input/Output: [[24.39850156835199 -25] -0.601498431648011]
Test Case: 493 | Input/Output: [[22.47546613283589 -66] -43.52453386716411]
Test Case: 494 | Input/Output: [[-82.96891823233301 23] -59.96891823233301]
Test Case: 495 | Input/Output: [[3.3222349009584633 -72] -68.67776509904154]
Test Case: 496 | Input/Output: [[52.5691167348553 91] 143.5691167348553]
Test Case: 497 | Input/Output: [[86.65583026895024 -34] 52.65583026895024]
Test Case: 498 | Input/Output: [[74.9869525475392 37] 111.9869525475392]
Test Case: 499 | Input/Output: [[91.99279373386503 -31] 60.99279373386503]
Test Case: 500 | Input/Output: [[-88.38431389217236 -85] -173.38431389217237]
Test Case: 501 | Input/Output: [[16.403291173889983 64] 80.40329117388998]
Test Case: 502 | Input/Output: [[-25.72809038706292 -6] -31.72809038706292]
Test Case: 503 | Input/Output: [[19.005828730171032 -89] -69.99417126982897]
Test Case: 504 | Input/Output: [[99.34265434096304 94] 193.34265434096304]
Test Case: 505 | Input/Output: [[49.864000453816374 84] 133.86400045381637]
Test Case: 506 | Input/Output: [[-61.905944279261014 51] -10.905944279261014]
Test Case: 507 | Input/Output: [[-98.24921402130222 -17] -115.24921402130222]
Test Case: 508 | Input/Output: [[36.9095909609876 80] 116.9095909609876]
Test Case: 509 | Input/Output: [[-25.549000639752634 96] 70.45099936024737]
Test Case: 510 | Input/Output: [[-31.11050570151994 -92] -123.11050570151994]
Test Case: 511 | Input/Output: [[96.01019371123328 1] 97.01019371123328]
Test Case: 512 | Input/Output: [[-54.47684198320242 -44] -98.47684198320242]
Test Case: 513 | Input/Output: [[62.73295073224054 -91] -28.26704926775946]
Test Case: 514 | Input/Output: [[0.19798228934459416 82] 82.1979822893446]
Test Case: 515 | Input/Output: [[-38.67937599761903 66] 27.320624002380967]
Test Case: 516 | Input/Output: [[-42.624096836886125 43] 0.3759031631138754]
Test Case: 517 | Input/Output: [[-19.080592325098493 -35] -54.08059232509849]
Test Case: 518 | Input/Output: [[11.846236332884914 100] 111.84623633288491]
Test Case: 519 | Input/Output: [[50.77271788649506 -40] 10.772717886495059]
Test Case: 520 | Input/Output: [[-33.73785549808062 -94] -127.73785549808062]
Test Case: 521 | Input/Output: [[18.48986526226315 73] 91.48986526226315]
Test Case: 522 | Input/Output: [[-98.20052285314624 88] -10.20052285314624]
Test Case: 523 | Input/Output: [[-82.29762179570281 75] -7.29762179570281]
Test Case: 524 | Input/Output: [[70.66578817485254 57] 127.66578817485254]
Test Case: 525 | Input/Output: [[59.45108903130455 -39] 20.451089031304548]
Test Case: 526 | Input/Output: [[65.88821334172297 -14] 51.888213341722974]
Test Case: 527 | Input/Output: [[-20.77864093664796 18] -2.7786409366479603]
Test Case: 528 | Input/Output: [[-72.11392419549323 28] -44.113924195493226]
Test Case: 529 | Input/Output: [[-43.44071436329116 71] 27.559285636708843]
Test Case: 530 | Input/Output: [[10.62932604820459 39] 49.62932604820459]
Test Case: 531 | Input/Output: [[-23.768005488501814 -15] -38.768005488501814]
Test Case: 532 | Input/Output: [[45.49035154786185 49] 94.49035154786185]
Test Case: 533 | Input/Output: [[24.008279194383448 -95] -70.99172080561655]
Test Case: 534 | Input/Output: [[17.087930036451766 18] 35.087930036451766]
Test Case: 535 | Input/Output: [[-1.0890806951653786 -73] -74.08908069516538]
Test Case: 536 | Input/Output: [[33.95572554793685 89] 122.95572554793685]
Test Case: 537 | Input/Output: [[34.53036883657953 -66] -31.469631163420473]
Test Case: 538 | Input/Output: [[26.466869810978636 3] 29.466869810978636]
Test Case: 539 | Input/Output: [[-66.69098965527516 36] -30.69098965527516]
Test Case: 540 | Input/Output: [[20.22424660536221 28] 48.22424660536221]
Test Case: 541 | Input/Output: [[-38.277362846375304 50] 11.722637153624696]
Test Case: 542 | Input/Output: [[57.00793906958822 0] 57.00793906958822]
Test Case: 543 | Input/Output: [[-76.80011081230697 -60] -136.80011081230697]
Test Case: 544 | Input/Output: [[-37.44550326618048 74] 36.55449673381952]
Test Case: 545 | Input/Output: [[-21.726636107110167 -85] -106.72663610711017]
Test Case: 546 | Input/Output: [[98.56852500314059 98] 196.5685250031406]
Test Case: 547 | Input/Output: [[-16.547708822146177 -76] -92.54770882214618]
Test Case: 548 | Input/Output: [[7.949222706757837 11] 18.949222706757837]
Test Case: 549 | Input/Output: [[-69.24215886660576 -72] -141.24215886660576]
Test Case: 550 | Input/Output: [[-25.251736151235377 -55] -80.25173615123538]
Test Case: 551 | Input/Output: [[-29.992955884201123 65] 35.00704411579888]
Test Case: 552 | Input/Output: [[-10.25874957497443 71] 60.74125042502557]
Test Case: 553 | Input/Output: [[77.1815918339141 48] 125.1815918339141]
Test Case: 554 | Input/Output: [[-95.1577093452683 -14] -109.1577093452683]
Test Case: 555 | Input/Output: [[-55.20205086705248 -95] -150.2020508670525]
Test Case: 556 | Input/Output: [[83.42045601927163 4] 87.42045601927163]
Test Case: 557 | Input/Output: [[88.39064851092331 -28] 60.39064851092331]
Test Case: 558 | Input/Output: [[17.04725852073645 97] 114.04725852073645]
Test Case: 559 | Input/Output: [[2.55564790908673 0] 2.55564790908673]
Test Case: 560 | Input/Output: [[21.55866001795708 87] 108.55866001795708]
Test Case: 561 | Input/Output: [[40.0436746408254 6] 46.0436746408254]
Test Case: 562 | Input/Output: [[78.58818138693869 34] 112.58818138693869]
Test Case: 563 | Input/Output: [[48.83528427153564 73] 121.83528427153564]
Test Case: 564 | Input/Output: [[64.84428371600521 19] 83.84428371600521]
Test Case: 565 | Input/Output: [[-45.57687178283225 -45] -90.57687178283226]
Test Case: 566 | Input/Output: [[31.103809720253395 12] 43.103809720253395]
Test Case: 567 | Input/Output: [[21.977603447592983 -63] -41.02239655240702]
Test Case: 568 | Input/Output: [[87.35710959755875 -100] -12.642890402441253]
Test Case: 569 | Input/Output: [[81.35969662745083 92] 173.35969662745083]
Test Case: 570 | Input/Output: [[7.299906062281792 -31] -23.700093937718208]
Test Case: 571 | Input/Output: [[81.03759704847252 30] 111.03759704847252]
Test Case: 572 | Input/Output: [[-81.17541592421627 25] -56.17541592421627]
Test Case: 573 | Input/Output: [[89.30061903739232 85] 174.30061903739232]
Test Case: 574 | Input/Output: [[-20.630339442225406 -11] -31.630339442225406]
Test Case: 575 | Input/Output: [[-85.66813142630156 -91] -176.66813142630156]
Test Case: 576 | Input/Output: [[-46.37877695585817 45] -1.3787769558581715]
Test Case: 577 | Input/Output: [[61.41950715102951 56] 117.4195071510295]
Test Case: 578 | Input/Output: [[41.09641823160922 -59] -17.90358176839078]
Test Case: 579 | Input/Output: [[63.65515845499695 -55] 8.65515845499695]
Test Case: 580 | Input/Output: [[79.07549378321215 100] 179.07549378321215]
Test Case: 581 | Input/Output: [[-10.9097435323674 -8] -18.9097435323674]
Test Case: 582 | Input/Output: [[66.45624710206013 -49] 17.456247102060132]
Test Case: 583 | Input/Output: [[-95.13488814369042 -41] -136.13488814369043]
Test Case: 584 | Input/Output: [[-80.05755574458297 -24] -104.05755574458297]
Test Case: 585 | Input/Output: [[48.21620037317854 83] 131.21620037317854]
Test Case: 586 | Input/Output: [[45.15603568879504 -16] 29.156035688795043]
Test Case: 587 | Input/Output: [[60.937512113294645 -31] 29.937512113294645]
Test Case: 588 | Input/Output: [[-99.25744501314007 -52] -151.25744501314006]
Test Case: 589 | Input/Output: [[-32.37516907891977 64] 31.624830921080232]
Test Case: 590 | Input/Output: [[-89.47678198790192 39] -50.476781987901916]
Test Case: 591 | Input/Output: [[12.572345885814485 -60] -47.427654114185515]
Test Case: 592 | Input/Output: [[22.899248579712946 45] 67.89924857971295]
Test Case: 593 | Input/Output: [[1.078848506164448 -99] -97.92115149383555]
Test Case: 594 | Input/Output: [[-38.73364681601033 72] 33.26635318398967]
Test Case: 595 | Input/Output: [[97.06203203904496 -10] 87.06203203904496]
Test Case: 596 | Input/Output: [[-28.242409612306062 18] -10.242409612306062]
Test Case: 597 | Input/Output: [[-73.23472891102051 27] -46.23472891102051]
Test Case: 598 | Input/Output: [[41.426433085840785 -25] 16.426433085840785]
Test Case: 599 | Input/Output: [[95.63970387157016 44] 139.63970387157016]
Test Case: 600 | Input/Output: [[-45.1660602007508 60] 14.833939799249201]
Test Case: 601 | Input/Output: [[25.936069637185483 52] 77.93606963718548]
Test Case: 602 | Input/Output: [[-19.330001817027394 54] 34.669998182972606]
Test Case: 603 | Input/Output: [[-5.432819648587355 -93] -98.43281964858735]
Test Case: 604 | Input/Output: [[67.53934026769377 -100] -32.460659732306226]
Test Case: 605 | Input/Output: [[-79.99396144659407 49] -30.99396144659407]
Test Case: 606 | Input/Output: [[24.225183983377036 24] 48.225183983377036]
Test Case: 607 | Input/Output: [[-24.574974949841334 56] 31.425025050158666]
Test Case: 608 | Input/Output: [[-20.17156772888444 62] 41.82843227111556]
Test Case: 609 | Input/Output: [[-90.8928210460906 24] -66.8928210460906]
Test Case: 610 | Input/Output: [[-1.115374679414046 -27] -28.115374679414046]
Test Case: 611 | Input/Output: [[97.23693340966773 100] 197.23693340966773]
Test Case: 612 | Input/Output: [[71.0225708455637 -96] -24.977429154436294]
Test Case: 613 | Input/Output: [[34.77016525545105 31] 65.77016525545105]
Test Case: 614 | Input/Output: [[-48.59869170344226 23] -25.598691703442263]
Test Case: 615 | Input/Output: [[81.95291862086401 9] 90.95291862086401]
Test Case: 616 | Input/Output: [[84.9870171284366 -16] 68.9870171284366]
Test Case: 617 | Input/Output: [[82.39100935133627 -48] 34.391009351336265]
Test Case: 618 | Input/Output: [[-79.10280081773327 -76] -155.10280081773328]
Test Case: 619 | Input/Output: [[-4.338325613394488 -12] -16.33832561339449]
Test Case: 620 | Input/Output: [[62.68038253094551 18] 80.68038253094551]
Test Case: 621 | Input/Output: [[81.643309431288 68] 149.643309431288]
Test Case: 622 | Input/Output: [[-0.9422342251902478 45] 44.05776577480975]
Test Case: 623 | Input/Output: [[55.026718444914735 49] 104.02671844491474]
Test Case: 624 | Input/Output: [[48.14201362909239 -4] 44.14201362909239]
Test Case: 625 | Input/Output: [[55.20517704298763 -31] 24.20517704298763]
Test Case: 626 | Input/Output: [[-92.96746997001418 88] -4.967469970014179]
Test Case: 627 | Input/Output: [[-16.123804707976603 -33] -49.1238047079766]
Test Case: 628 | Input/Output: [[-56.48555017580161 -52] -108.48555017580162]
Test Case: 629 | Input/Output: [[47.356660467672725 -28] 19.356660467672725]
Test Case: 630 | Input/Output: [[-18.309738749731963 58] 39.69026125026804]
Test Case: 631 | Input/Output: [[-82.78437563227597 61] -21.784375632275967]
Test Case: 632 | Input/Output: [[-10.199329133048991 26] 15.800670866951009]
Test Case: 633 | Input/Output: [[-64.16726560495616 35] -29.167265604956157]
Test Case: 634 | Input/Output: [[-84.0966641234677 -50] -134.0966641234677]
Test Case: 635 | Input/Output: [[59.87752017455273 -98] -38.12247982544727]
Test Case: 636 | Input/Output: [[59.960132143312165 47] 106.96013214331217]
Test Case: 637 | Input/Output: [[93.853821992008 13] 106.853821992008]
Test Case: 638 | Input/Output: [[95.70132561347287 -99] -3.298674386527125]
Test Case: 639 | Input/Output: [[54.08734675579072 37] 91.08734675579072]
Test Case: 640 | Input/Output: [[-59.66452977042065 6] -53.66452977042065]
Test Case: 641 | Input/Output: [[95.08800255963772 -83] 12.088002559637715]
Test Case: 642 | Input/Output: [[-10.15867860990474 -47] -57.15867860990474]
Test Case: 643 | Input/Output: [[20.547797359123308 100] 120.54779735912331]
Test Case: 644 | Input/Output: [[16.530898585547774 -31] -14.469101414452226]
Test Case: 645 | Input/Output: [[41.925938481450885 10] 51.925938481450885]
Test Case: 646 | Input/Output: [[62.99426687344163 87] 149.99426687344163]
Test Case: 647 | Input/Output: [[1.1457463119238156 28] 29.145746311923816]
Test Case: 648 | Input/Output: [[21.367391958744975 -66] -44.632608041255025]
Test Case: 649 | Input/Output: [[-18.710052452909153 23] 4.289947547090847]
Test Case: 650 | Input/Output: [[-62.49468184368852 62] -0.4946818436885181]
Test Case: 651 | Input/Output: [[-35.62191441001259 84] 48.37808558998741]
Test Case: 652 | Input/Output: [[2.270980892467932 -66] -63.72901910753207]
Test Case: 653 | Input/Output: [[23.36643859143959 14] 37.36643859143959]
Test Case: 654 | Input/Output: [[46.73854113169452 70] 116.73854113169452]
Test Case: 655 | Input/Output: [[2.281738766545132 3] 5.281738766545132]
Test Case: 656 | Input/Output: [[98.33157653881761 -78] 20.331576538817615]
Test Case: 657 | Input/Output: [[-66.12326698107762 -84] -150.12326698107762]
Test Case: 658 | Input/Output: [[44.0002724070348 -51] -6.9997275929652005]
Test Case: 659 | Input/Output: [[83.0628238337789 -72] 11.062823833778907]
Test Case: 660 | Input/Output: [[-44.4513039984521 78] 33.5486960015479]
Test Case: 661 | Input/Output: [[-32.27395514400864 -30] -62.27395514400864]
Test Case: 662 | Input/Output: [[74.07126298559962 -5] 69.07126298559962]
Test Case: 663 | Input/Output: [[-2.33681517296705 -27] -29.33681517296705]
Test Case: 664 | Input/Output: [[-95.41658590874806 50] -45.41658590874806]
Test Case: 665 | Input/Output: [[-20.23416304420229 19] -1.2341630442022904]
Test Case: 666 | Input/Output: [[-0.5274088689869387 -89] -89.52740886898694]
Test Case: 667 | Input/Output: [[23.3774572241489 61] 84.3774572241489]
Test Case: 668 | Input/Output: [[65.39285665287252 13] 78.39285665287252]
Test Case: 669 | Input/Output: [[30.669617816115647 69] 99.66961781611565]
Test Case: 670 | Input/Output: [[22.5377461618462 -28] -5.462253838153799]
Test Case: 671 | Input/Output: [[27.65124346327903 85] 112.65124346327903]
Test Case: 672 | Input/Output: [[43.18103976211722 40] 83.18103976211722]
Test Case: 673 | Input/Output: [[-14.400413383196977 -40] -54.40041338319698]
Test Case: 674 | Input/Output: [[12.55086458566322 -5] 7.55086458566322]
Test Case: 675 | Input/Output: [[68.45899299979274 27] 95.45899299979274]
Test Case: 676 | Input/Output: [[-11.49156938450433 79] 67.50843061549567]
Test Case: 677 | Input/Output: [[-83.00909337852474 -1] -84.00909337852474]
Test Case: 678 | Input/Output: [[-35.40367125450588 -75] -110.40367125450588]
Test Case: 679 | Input/Output: [[1.3476774082933076 -87] -85.65232259170669]
Test Case: 680 | Input/Output: [[32.8608927864467 37] 69.8608927864467]
Test Case: 681 | Input/Output: [[81.16334353367733 67] 148.16334353367733]
Test Case: 682 | Input/Output: [[-16.50407543777095 -100] -116.50407543777095]
Test Case: 683 | Input/Output: [[-38.921794798975505 3] -35.921794798975505]
Test Case: 684 | Input/Output: [[-91.50608833793497 46] -45.50608833793497]
Test Case: 685 | Input/Output: [[1.5494558966399694 59] 60.54945589663997]
Test Case: 686 | Input/Output: [[-14.02505240173788 -62] -76.02505240173788]
Test Case: 687 | Input/Output: [[94.64790776982016 95] 189.64790776982016]
Test Case: 688 | Input/Output: [[-37.46844688166926 75] 37.53155311833074]
Test Case: 689 | Input/Output: [[-21.30584693186688 2] -19.30584693186688]
Test Case: 690 | Input/Output: [[44.491037110848595 -45] -0.5089628891514053]
Test Case: 691 | Input/Output: [[76.86924867753007 -86] -9.130751322469933]
Test Case: 692 | Input/Output: [[17.7360453814197 -100] -82.2639546185803]
Test Case: 693 | Input/Output: [[13.65378533836352 -98] -84.34621466163648]
Test Case: 694 | Input/Output: [[-98.34579164857135 -57] -155.34579164857135]
Test Case: 695 | Input/Output: [[9.23949504931636 -43] -33.76050495068364]
Test Case: 696 | Input/Output: [[72.78301807408641 50] 122.78301807408641]
Test Case: 697 | Input/Output: [[40.53635258325792 -30] 10.536352583257923]
Test Case: 698 | Input/Output: [[11.259533596540166 10] 21.259533596540166]
Test Case: 699 | Input/Output: [[33.3803899272458 11] 44.3803899272458]
Test Case: 700 | Input/Output: [[81.87494671336435 14] 95.87494671336435]
Test Case: 701 | Input/Output: [[62.39202695773639 85] 147.3920269577364]
Test Case: 702 | Input/Output: [[-87.85310292367288 56] -31.85310292367288]
Test Case: 703 | Input/Output: [[69.30137842602676 -32] 37.30137842602676]
Test Case: 704 | Input/Output: [[-28.998868381357255 -31] -59.998868381357255]
Test Case: 705 | Input/Output: [[38.725468221069264 -5] 33.725468221069264]
Test Case: 706 | Input/Output: [[-22.40572679300925 -93] -115.40572679300925]
Test Case: 707 | Input/Output: [[95.44239835972027 -64] 31.442398359720272]
Test Case: 708 | Input/Output: [[-0.059668287203336945 24] 23.940331712796663]
Test Case: 709 | Input/Output: [[5.926754206154655 56] 61.926754206154655]
Test Case: 710 | Input/Output: [[-83.61326669674993 49] -34.61326669674993]
Test Case: 711 | Input/Output: [[-25.390952545311848 -52] -77.39095254531185]
Test Case: 712 | Input/Output: [[29.728940173438588 -91] -61.27105982656141]
Test Case: 713 | Input/Output: [[22.93728260328001 -19] 3.9372826032800106]
Test Case: 714 | Input/Output: [[48.94920510264248 22] 70.94920510264248]
Test Case: 715 | Input/Output: [[29.47213449982158 -1] 28.47213449982158]
Test Case: 716 | Input/Output: [[54.09234984648458 -11] 43.09234984648458]
Test Case: 717 | Input/Output: [[-58.01131001149762 -91] -149.0113100114976]
Test Case: 718 | Input/Output: [[1.968854330425728 50] 51.96885433042573]
Test Case: 719 | Input/Output: [[-81.67763239353786 58] -23.677632393537863]
Test Case: 720 | Input/Output: [[-44.682788789506404 -23] -67.6827887895064]
Test Case: 721 | Input/Output: [[-55.79426958058378 -59] -114.79426958058377]
Test Case: 722 | Input/Output: [[53.845608745391246 94] 147.84560874539125]
Test Case: 723 | Input/Output: [[72.3047814303948 100] 172.3047814303948]
Test Case: 724 | Input/Output: [[-14.71550617424873 -3] -17.71550617424873]
Test Case: 725 | Input/Output: [[-76.8418429235072 -27] -103.8418429235072]
Test Case: 726 | Input/Output: [[-95.68526218015165 3] -92.68526218015165]
Test Case: 727 | Input/Output: [[-26.208999554556073 -1] -27.208999554556073]
Test Case: 728 | Input/Output: [[59.61015828816363 -92] -32.38984171183637]
Test Case: 729 | Input/Output: [[73.70528958084543 31] 104.70528958084543]
Test Case: 730 | Input/Output: [[-16.300126362818673 -64] -80.30012636281867]
Test Case: 731 | Input/Output: [[87.20615477840502 -45] 42.20615477840502]
Test Case: 732 | Input/Output: [[88.16005054833556 -57] 31.160050548335562]
Test Case: 733 | Input/Output: [[-34.079083441095364 -95] -129.07908344109535]
Test Case: 734 | Input/Output: [[25.327962019162214 -33] -7.672037980837786]
Test Case: 735 | Input/Output: [[-33.27306913144467 50] 16.72693086855533]
Test Case: 736 | Input/Output: [[26.493391509608315 -87] -60.506608490391685]
Test Case: 737 | Input/Output: [[-60.50137488536467 27] -33.50137488536467]
Test Case: 738 | Input/Output: [[-4.06197797395717 76] 71.93802202604283]
Test Case: 739 | Input/Output: [[32.25266458527787 49] 81.25266458527787]
Test Case: 740 | Input/Output: [[-2.122611295133396 53] 50.877388704866604]
Test Case: 741 | Input/Output: [[-85.46684553053225 91] 5.533154469467746]
Test Case: 742 | Input/Output: [[25.628364144904594 -17] 8.628364144904594]
Test Case: 743 | Input/Output: [[35.69396109353758 -49] -13.306038906462419]
Test Case: 744 | Input/Output: [[51.12541003832541 83] 134.1254100383254]
Test Case: 745 | Input/Output: [[-30.45094259219067 55] 24.54905740780933]
Test Case: 746 | Input/Output: [[18.78786490838263 -77] -58.21213509161737]
Test Case: 747 | Input/Output: [[-58.26861253943627 -77] -135.26861253943628]
Test Case: 748 | Input/Output: [[61.69013032835761 32] 93.69013032835761]
Test Case: 749 | Input/Output: [[22.91333479663112 -36] -13.08666520336888]
Test Case: 750 | Input/Output: [[7.6956360145283185 56] 63.69563601452832]
Test Case: 751 | Input/Output: [[-29.35943975064437 34] 4.64056024935563]
Test Case: 752 | Input/Output: [[-81.68109410088198 4] -77.68109410088198]
Test Case: 753 | Input/Output: [[-94.96285049232725 61] -33.96285049232725]
Test Case: 754 | Input/Output: [[60.55307356174751 32] 92.55307356174751]
Test Case: 755 | Input/Output: [[80.33617557075635 -19] 61.33617557075635]
Test Case: 756 | Input/Output: [[-23.30495181846051 96] 72.69504818153949]
Test Case: 757 | Input/Output: [[-27.354261761618233 94] 66.64573823838177]
Test Case: 758 | Input/Output: [[79.00288615379696 -62] 17.002886153796965]
Test Case: 759 | Input/Output: [[28.7790623090398 -96] -67.2209376909602]
Test Case: 760 | Input/Output: [[-62.62700523254874 81] 18.37299476745126]
Test Case: 761 | Input/Output: [[55.26637104594175 77] 132.26637104594175]
Test Case: 762 | Input/Output: [[-44.565725061582164 -52] -96.56572506158216]
Test Case: 763 | Input/Output: [[-64.31362254248003 -20] -84.31362254248003]
Test Case: 764 | Input/Output: [[-15.509699527185035 67] 51.490300472814965]
Test Case: 765 | Input/Output: [[69.93230517491625 -3] 66.93230517491625]
Test Case: 766 | Input/Output: [[63.607918837923904 74] 137.6079188379239]
Test Case: 767 | Input/Output: [[-70.31133979715318 -33] -103.31133979715318]
Test Case: 768 | Input/Output: [[31.62140007231224 -6] 25.62140007231224]
Test Case: 769 | Input/Output: [[-39.67196644823827 74] 34.32803355176173]
Test Case: 770 | Input/Output: [[73.61966718466039 -26] 47.619667184660386]
Test Case: 771 | Input/Output: [[-60.42053716881301 63] 2.579462831186987]
Test Case: 772 | Input/Output: [[-77.73811967945326 29] -48.73811967945326]
Test Case: 773 | Input/Output: [[69.2499005672799 -68] 1.2499005672798944]
Test Case: 774 | Input/Output: [[80.43974439427456 86] 166.43974439427456]
Test Case: 775 | Input/Output: [[30.594695258960712 54] 84.59469525896071]
Test Case: 776 | Input/Output: [[-51.97834416189207 34] -17.978344161892068]
Test Case: 777 | Input/Output: [[91.04690277926596 -37] 54.04690277926596]
Test Case: 778 | Input/Output: [[-35.98234664507321 -72] -107.9823466450732]
Test Case: 779 | Input/Output: [[70.47067949714685 -35] 35.47067949714685]
Test Case: 780 | Input/Output: [[36.152548926951255 -98] -61.847451073048745]
Test Case: 781 | Input/Output: [[66.59091060939076 92] 158.59091060939076]
Test Case: 782 | Input/Output: [[-70.97264203682583 -27] -97.97264203682583]
Test Case: 783 | Input/Output: [[-4.379073448216573 -26] -30.379073448216573]
Test Case: 784 | Input/Output: [[-39.5075927578838 2] -37.5075927578838]
Test Case: 785 | Input/Output: [[55.62103890015334 -94] -38.37896109984666]
Test Case: 786 | Input/Output: [[-82.96747693215704 99] 16.03252306784296]
Test Case: 787 | Input/Output: [[48.36793069314672 27] 75.36793069314672]
Test Case: 788 | Input/Output: [[71.16623472320228 -41] 30.16623472320228]
Test Case: 789 | Input/Output: [[28.19470179674559 64] 92.19470179674559]
Test Case: 790 | Input/Output: [[83.54282514563752 41] 124.54282514563752]
Test Case: 791 | Input/Output: [[89.77402376687857 95] 184.77402376687857]
Test Case: 792 | Input/Output: [[51.8241327679861 43] 94.8241327679861]
Test Case: 793 | Input/Output: [[-64.86626695756534 -57] -121.86626695756534]
Test Case: 794 | Input/Output: [[-12.691669637914842 -97] -109.69166963791484]
Test Case: 795 | Input/Output: [[57.358459718693524 33] 90.35845971869352]
Test Case: 796 | Input/Output: [[-62.27780556505482 -48] -110.27780556505482]
Test Case: 797 | Input/Output: [[-35.3597514753085 55] 19.6402485246915]
Test Case: 798 | Input/Output: [[79.68516658509901 53] 132.685166585099]
Test Case: 799 | Input/Output: [[-55.41971734189184 -27] -82.41971734189184]
Test Case: 800 | Input/Output: [[-26.02397268773315 -90] -116.02397268773315]
Test Case: 801 | Input/Output: [[-25.424483464585364 -25] -50.424483464585364]
Test Case: 802 | Input/Output: [[12.176988757947925 61] 73.17698875794792]
Test Case: 803 | Input/Output: [[37.658360120607455 3] 40.658360120607455]
Test Case: 804 | Input/Output: [[62.43251215499302 -47] 15.43251215499302]
Test Case: 805 | Input/Output: [[48.738084695949766 -1] 47.738084695949766]
Test Case: 806 | Input/Output: [[-95.50657252016612 -88] -183.50657252016612]
Test Case: 807 | Input/Output: [[26.902715733791922 -71] -44.09728426620808]
Test Case: 808 | Input/Output: [[31.93875176943388 -72] -40.06124823056612]
Test Case: 809 | Input/Output: [[-97.16958247002974 68] -29.169582470029738]
Test Case: 810 | Input/Output: [[-37.3516762451525 16] -21.351676245152497]
Test Case: 811 | Input/Output: [[35.35053187300818 -83] -47.64946812699182]
Test Case: 812 | Input/Output: [[-60.45986736977247 -99] -159.45986736977247]
Test Case: 813 | Input/Output: [[33.56873560331897 -93] -59.43126439668103]
Test Case: 814 | Input/Output: [[15.459993263841326 -36] -20.540006736158674]
Test Case: 815 | Input/Output: [[-2.898698849296565 91] 88.10130115070343]
Test Case: 816 | Input/Output: [[-28.641535501630983 -25] -53.64153550163098]
Test Case: 817 | Input/Output: [[33.555218818733096 29] 62.555218818733096]
Test Case: 818 | Input/Output: [[88.39007688461331 -72] 16.390076884613308]
Test Case: 819 | Input/Output: [[40.605830867042556 46] 86.60583086704256]
Test Case: 820 | Input/Output: [[40.28730156233934 76] 116.28730156233934]
Test Case: 821 | Input/Output: [[-39.54474162532624 -34] -73.54474162532624]
Test Case: 822 | Input/Output: [[-5.809279081187228 92] 86.19072091881277]
Test Case: 823 | Input/Output: [[76.13466488722852 90] 166.13466488722852]
Test Case: 824 | Input/Output: [[35.370963138785214 -38] -2.629036861214786]
Test Case: 825 | Input/Output: [[-34.39613134993415 31] -3.3961313499341514]
Test Case: 826 | Input/Output: [[-23.064387089346596 -58] -81.0643870893466]
Test Case: 827 | Input/Output: [[-38.199901172226824 -91] -129.19990117222682]
Test Case: 828 | Input/Output: [[-72.26327306541134 6] -66.26327306541134]
Test Case: 829 | Input/Output: [[4.477955222728809 -74] -69.52204477727119]
Test Case: 830 | Input/Output: [[-44.0209992049043 100] 55.9790007950957]
Test Case: 831 | Input/Output: [[93.92860474584143 71] 164.92860474584143]
Test Case: 832 | Input/Output: [[1.831545065136524 -5] -3.168454934863476]
Test Case: 833 | Input/Output: [[35.251794927338665 93] 128.25179492733866]
Test Case: 834 | Input/Output: [[-81.45549408932527 -89] -170.45549408932527]
Test Case: 835 | Input/Output: [[29.909314839266358 -48] -18.090685160733642]
Test Case: 836 | Input/Output: [[86.15171913109577 -7] 79.15171913109577]
Test Case: 837 | Input/Output: [[-73.5383764029875 -70] -143.5383764029875]
Test Case: 838 | Input/Output: [[72.54059108379448 -19] 53.54059108379448]
Test Case: 839 | Input/Output: [[53.02830953095622 56] 109.02830953095622]
Test Case: 840 | Input/Output: [[-35.953106837745636 57] 21.046893162254364]
Test Case: 841 | Input/Output: [[52.094274042027166 -59] -6.905725957972834]
Test Case: 842 | Input/Output: [[94.20757906842755 10] 104.20757906842755]
Test Case: 843 | Input/Output: [[-21.936423301192562 -91] -112.93642330119256]
Test Case: 844 | Input/Output: [[-73.88280050780018 27] -46.882800507800184]
Test Case: 845 | Input/Output: [[54.77313346715255 -77] -22.226866532847453]
Test Case: 846 | Input/Output: [[92.88322214718309 48] 140.8832221471831]
Test Case: 847 | Input/Output: [[-95.67840016855813 26] -69.67840016855813]
Test Case: 848 | Input/Output: [[-94.7898934474906 -74] -168.7898934474906]
Test Case: 849 | Input/Output: [[72.81831355445277 -40] 32.81831355445277]
Test Case: 850 | Input/Output: [[96.35442077933175 -95] 1.3544207793317469]
Test Case: 851 | Input/Output: [[-91.47205427333509 57] -34.47205427333509]
Test Case: 852 | Input/Output: [[63.652933860486854 1] 64.65293386048685]
Test Case: 853 | Input/Output: [[55.52706579060103 5] 60.52706579060103]
Test Case: 854 | Input/Output: [[56.775343188440644 -98] -41.224656811559356]
Test Case: 855 | Input/Output: [[-4.079949682189294 25] 20.920050317810706]
Test Case: 856 | Input/Output: [[-95.757293473979 -72] -167.75729347397902]
Test Case: 857 | Input/Output: [[94.53522530151864 18] 112.53522530151864]
Test Case: 858 | Input/Output: [[62.238519404392406 -98] -35.761480595607594]
Test Case: 859 | Input/Output: [[-89.20105547046569 -10] -99.20105547046569]
Test Case: 860 | Input/Output: [[-18.361999713859404 -35] -53.361999713859404]
Test Case: 861 | Input/Output: [[-95.86568400090523 72] -23.865684000905233]
Test Case: 862 | Input/Output: [[27.47385516456231 93] 120.47385516456231]
Test Case: 863 | Input/Output: [[-71.09285090175621 -6] -77.09285090175621]
Test Case: 864 | Input/Output: [[19.590385022024435 14] 33.590385022024435]
Test Case: 865 | Input/Output: [[-57.373537823809606 37] -20.373537823809606]
Test Case: 866 | Input/Output: [[-31.410409204959095 79] 47.589590795040905]
Test Case: 867 | Input/Output: [[-97.08378391178087 33] -64.08378391178087]
Test Case: 868 | Input/Output: [[72.47410246065189 84] 156.4741024606519]
Test Case: 869 | Input/Output: [[13.454696913937141 60] 73.45469691393714]
Test Case: 870 | Input/Output: [[3.504679468465511 61] 64.50467946846551]
Test Case: 871 | Input/Output: [[-85.1664061743939 16] -69.1664061743939]
Test Case: 872 | Input/Output: [[-77.38154237503466 67] -10.381542375034655]
Test Case: 873 | Input/Output: [[-24.383595764067792 17] -7.383595764067792]
Test Case: 874 | Input/Output: [[67.08022526087422 52] 119.08022526087422]
Test Case: 875 | Input/Output: [[19.41371929968963 -41] -21.58628070031037]
Test Case: 876 | Input/Output: [[13.422262741895537 32] 45.42226274189554]
Test Case: 877 | Input/Output: [[33.62227722949447 65] 98.62227722949447]
Test Case: 878 | Input/Output: [[61.92144641240279 71] 132.9214464124028]
Test Case: 879 | Input/Output: [[-15.781830968193631 100] 84.21816903180637]
Test Case: 880 | Input/Output: [[-11.769658637547067 -34] -45.76965863754707]
Test Case: 881 | Input/Output: [[25.862894391409185 -36] -10.137105608590815]
Test Case: 882 | Input/Output: [[-91.46607431810448 93] 1.533925681895525]
Test Case: 883 | Input/Output: [[95.88277526887984 -100] -4.11722473112016]
Test Case: 884 | Input/Output: [[-19.46363784790978 31] 11.53636215209022]
Test Case: 885 | Input/Output: [[-98.5994171793006 0] -98.5994171793006]
Test Case: 886 | Input/Output: [[-70.59280423619192 37] -33.592804236191924]
Test Case: 887 | Input/Output: [[33.51973770026055 56] 89.51973770026055]
Test Case: 888 | Input/Output: [[-40.32275132455614 88] 47.67724867544386]
Test Case: 889 | Input/Output: [[-36.47515967712507 22] -14.47515967712507]
Test Case: 890 | Input/Output: [[-51.97363749718404 60] 8.026362502815957]
Test Case: 891 | Input/Output: [[-69.21022652591785 -84] -153.21022652591785]
Test Case: 892 | Input/Output: [[-63.07902434824133 47] -16.079024348241333]
Test Case: 893 | Input/Output: [[78.24841767053829 58] 136.2484176705383]
Test Case: 894 | Input/Output: [[14.176825634906649 -69] -54.82317436509335]
Test Case: 895 | Input/Output: [[-34.103334152030286 -45] -79.10333415203029]
Test Case: 896 | Input/Output: [[18.403335309350524 -58] -39.596664690649476]
Test Case: 897 | Input/Output: [[97.31783332664597 8] 105.31783332664597]
Test Case: 898 | Input/Output: [[23.886293455630764 -7] 16.886293455630764]
Test Case: 899 | Input/Output: [[-60.28298362676794 1] -59.28298362676794]
Test Case: 900 | Input/Output: [[67.72945288083108 54] 121.72945288083108]
Test Case: 901 | Input/Output: [[-10.902498166231169 4] -6.902498166231169]
Test Case: 902 | Input/Output: [[-42.059564800394455 33] -9.059564800394455]
Test Case: 903 | Input/Output: [[91.10816262108321 3] 94.10816262108321]
Test Case: 904 | Input/Output: [[-97.44617445341981 -37] -134.44617445341981]
Test Case: 905 | Input/Output: [[83.23598375149149 56] 139.2359837514915]
Test Case: 906 | Input/Output: [[-50.16515806504502 -92] -142.16515806504503]
Test Case: 907 | Input/Output: [[-95.0377077611314 90] -5.037707761131401]
Test Case: 908 | Input/Output: [[78.89324189754399 73] 151.893241897544]
Test Case: 909 | Input/Output: [[-29.362121839426322 -14] -43.36212183942632]
Test Case: 910 | Input/Output: [[52.19419254486712 39] 91.19419254486712]
Test Case: 911 | Input/Output: [[-3.0609204868076887 -32] -35.06092048680769]
Test Case: 912 | Input/Output: [[73.11975092975902 75] 148.11975092975902]
Test Case: 913 | Input/Output: [[88.66544099047826 78] 166.66544099047826]
Test Case: 914 | Input/Output: [[-24.785389509329647 5] -19.785389509329647]
Test Case: 915 | Input/Output: [[-38.25525141220574 -55] -93.25525141220574]
Test Case: 916 | Input/Output: [[47.261341090925555 44] 91.26134109092555]
Test Case: 917 | Input/Output: [[80.54069143102001 43] 123.54069143102001]
Test Case: 918 | Input/Output: [[23.42661985728718 -11] 12.426619857287179]
Test Case: 919 | Input/Output: [[74.76752998848798 -34] 40.76752998848798]
Test Case: 920 | Input/Output: [[12.048430656889494 77] 89.0484306568895]
Test Case: 921 | Input/Output: [[1.7457740944575306 -33] -31.25422590554247]
Test Case: 922 | Input/Output: [[9.19319322437886 -72] -62.80680677562114]
Test Case: 923 | Input/Output: [[65.11936473227985 -56] 9.119364732279848]
Test Case: 924 | Input/Output: [[-7.982177225079795 16] 8.017822774920205]
Test Case: 925 | Input/Output: [[52.95309283619659 39] 91.95309283619659]
Test Case: 926 | Input/Output: [[76.41722957285151 -76] 0.41722957285151097]
Test Case: 927 | Input/Output: [[83.45657478591912 40] 123.45657478591912]
Test Case: 928 | Input/Output: [[-35.700477311927514 85] 49.299522688072486]
Test Case: 929 | Input/Output: [[-48.78281633290833 -25] -73.78281633290834]
Test Case: 930 | Input/Output: [[-44.3729598981796 50] 5.627040101820398]
Test Case: 931 | Input/Output: [[-9.038876014249553 -84] -93.03887601424955]
Test Case: 932 | Input/Output: [[-40.99620340778345 10] -30.996203407783447]
Test Case: 933 | Input/Output: [[80.63487615096224 -14] 66.63487615096224]
Test Case: 934 | Input/Output: [[-79.73001177431311 -79] -158.7300117743131]
Test Case: 935 | Input/Output: [[12.104989226728975 84] 96.10498922672897]
Test Case: 936 | Input/Output: [[5.718963211167605 54] 59.718963211167605]
Test Case: 937 | Input/Output: [[-50.94608085274106 11] -39.94608085274106]
Test Case: 938 | Input/Output: [[-72.94280883875011 -76] -148.94280883875012]
Test Case: 939 | Input/Output: [[60.70912552219329 36] 96.70912552219329]
Test Case: 940 | Input/Output: [[55.389755129521575 2] 57.389755129521575]
Test Case: 941 | Input/Output: [[-42.61461193692699 -72] -114.61461193692699]
Test Case: 942 | Input/Output: [[37.704803765880854 20] 57.704803765880854]
Test Case: 943 | Input/Output: [[-40.017605483989804 87] 46.982394516010196]
Test Case: 944 | Input/Output: [[-47.484500771970595 36] -11.484500771970595]
Test Case: 945 | Input/Output: [[87.98826807399459 66] 153.9882680739946]
Test Case: 946 | Input/Output: [[-97.33314406817182 7] -90.33314406817182]
Test Case: 947 | Input/Output: [[-38.35106236907806 87] 48.64893763092194]
Test Case: 948 | Input/Output: [[-12.081097381208082 -73] -85.08109738120808]
Test Case: 949 | Input/Output: [[-26.771366600160036 -4] -30.771366600160036]
Test Case: 950 | Input/Output: [[87.45434105033428 -26] 61.45434105033428]
Test Case: 951 | Input/Output: [[76.92685405671489 -56] 20.926854056714888]
Test Case: 952 | Input/Output: [[27.348829876813 62] 89.348829876813]
Test Case: 953 | Input/Output: [[43.070819499259244 38] 81.07081949925924]
Test Case: 954 | Input/Output: [[83.89009593989596 66] 149.89009593989596]
Test Case: 955 | Input/Output: [[59.36301061709938 -65] -5.636989382900623]
Test Case: 956 | Input/Output: [[-17.212177319596506 55] 37.787822680403494]
Test Case: 957 | Input/Output: [[-34.90113995119037 -9] -43.90113995119037]
Test Case: 958 | Input/Output: [[94.00015994756149 -60] 34.000159947561485]
Test Case: 959 | Input/Output: [[11.38956333031409 91] 102.38956333031409]
Test Case: 960 | Input/Output: [[-71.12660781906992 44] -27.126607819069918]
Test Case: 961 | Input/Output: [[-72.36156882971613 0] -72.36156882971613]
Test Case: 962 | Input/Output: [[-13.997000930472538 56] 42.00299906952746]
Test Case: 963 | Input/Output: [[36.32306349426426 -88] -51.67693650573574]
Test Case: 964 | Input/Output: [[-65.40720105586783 51] -14.40720105586783]
Test Case: 965 | Input/Output: [[76.23719996269 67] 143.23719996269]
Test Case: 966 | Input/Output: [[-98.32361863950521 -51] -149.3236186395052]
Test Case: 967 | Input/Output: [[-4.553136011339134 -76] -80.55313601133913]
Test Case: 968 | Input/Output: [[-75.99596451062783 0] -75.99596451062783]
Test Case: 969 | Input/Output: [[-40.67938833971305 -83] -123.67938833971306]
Test Case: 970 | Input/Output: [[-37.662842230777514 -76] -113.66284223077751]
Test Case: 971 | Input/Output: [[48.00926270931862 -62] -13.99073729068138]
Test Case: 972 | Input/Output: [[22.312928503055048 5] 27.312928503055048]
Test Case: 973 | Input/Output: [[89.37262167510607 48] 137.37262167510607]
Test Case: 974 | Input/Output: [[-34.254064991537476 62] 27.745935008462524]
Test Case: 975 | Input/Output: [[-72.94659318534889 -7] -79.94659318534889]
Test Case: 976 | Input/Output: [[-89.58050201770382 -91] -180.58050201770382]
Test Case: 977 | Input/Output: [[91.092367958815 1] 92.092367958815]
Test Case: 978 | Input/Output: [[12.185297964339071 92] 104.18529796433907]
Test Case: 979 | Input/Output: [[52.266770387309265 42] 94.26677038730926]
Test Case: 980 | Input/Output: [[-31.845617378332733 -24] -55.84561737833273]
Test Case: 981 | Input/Output: [[83.01669354444931 -6] 77.01669354444931]
Test Case: 982 | Input/Output: [[-75.8316276816075 -72] -147.8316276816075]
Test Case: 983 | Input/Output: [[-24.719862473106133 -84] -108.71986247310613]
Test Case: 984 | Input/Output: [[-61.31871409667653 -89] -150.31871409667653]
Test Case: 985 | Input/Output: [[91.54856158236458 -33] 58.548561582364584]
Test Case: 986 | Input/Output: [[-93.16982986608926 76] -17.16982986608926]
Test Case: 987 | Input/Output: [[7.2166801394727855 -77] -69.78331986052721]
Test Case: 988 | Input/Output: [[-6.574902510643483 97] 90.42509748935652]
Test Case: 989 | Input/Output: [[-93.82411447971488 35] -58.82411447971488]
Test Case: 990 | Input/Output: [[-64.00297427872877 -22] -86.00297427872877]
Test Case: 991 | Input/Output: [[-99.09815725405426 56] -43.09815725405426]
Test Case: 992 | Input/Output: [[-57.78418134632257 51] -6.784181346322569]
Test Case: 993 | Input/Output: [[29.729429166858353 -99] -69.27057083314165]
Test Case: 994 | Input/Output: [[96.5584815886767 -25] 71.5584815886767]
Test Case: 995 | Input/Output: [[-79.1776492686844 -44] -123.1776492686844]
Test Case: 996 | Input/Output: [[44.53621671125558 53] 97.53621671125558]
Test Case: 997 | Input/Output: [[-51.51915233922764 95] 43.48084766077236]
Test Case: 998 | Input/Output: [[-17.75312697394071 -36] -53.75312697394071]
Test Case: 999 | Input/Output: [[-56.07173536156076 -25] -81.07173536156077]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -15 -33 -6 11 -38 -7 18 16 84 115 -37 97 -126 24 60 73
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 55365.0
Test mean error for best: 27.68250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -76.614723858 
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -49.4544341591
Correct output: 48.0303159228  | Program output: 51.0303159228 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -22.8676801757
Correct output: -119.511081127 | Program output: -98.511081127 
Correct output: -137.6953004708 | Program output: -78.6953004708
Correct output: 28.0264601383  | Program output: -19.9735398617
Correct output: 19.014261193   | Program output: -32.985738807 
Correct output: -76.5652234606 | Program output: -56.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -61.7264396507
Correct output: -74.5951028043 | Program output: 9.4048971957  
Correct output: -111.2224067056 | Program output: -83.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -12.7779180651
Correct output: 23.3238574914  | Program output: 25.3238574914 
Correct output: -81.9975425787 | Program output: -24.9975425787
Correct output: -132.3840059284 | Program output: -62.3840059284
Correct output: -21.0593840301 | Program output: 60.9406159699 
Correct output: -85.8056758937 | Program output: -64.8056758937
Correct output: -149.9116694043 | Program output: -94.9116694043
Correct output: -50.3143322102 | Program output: 38.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_shove} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_div} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction in2} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_div} {:instruction float_shove} {:instruction float_cos} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_min} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_mult} {:instruction float_pop} {:instruction float_min} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth integer_dup_times tagged_44 float_sin integer_yank float_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 float_sin float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth in2 integer_add float_shove integer_swap float_dup_times float_yankdup float_div float_frominteger float_inc integer_pop integer_yankdup in2 float_pop integer_dup_times float_shove integer_div float_shove float_cos float_min integer_dup_items float_sub integer_stackdepth integer_mult integer_rot float_min integer_fromfloat in2 float_dup integer_yank integer_rot integer_yank float_mult float_pop float_min float_frominteger float_frominteger)
Errors: [84.0 11 5.0 2 21.0 2 3.0 2 27.0 2 28.0 3 79.0 13 21.0 3 59.0 3 48.0 13 52.0 12 20.0 1 6.0 1 52.0 2 84.0 12 28.0 3 18.0 2 87.0 2 2.0 1 57.0 2 70.0 2 82.0 13 21.0 2 55.0 2 89.0 13]
Total: 1222.0
Mean: 24.44
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 18057.3022604
Median total errors in population: 25341.0
Error averages by case: (702.6194148999998 11.52 698.6171375999979 13.335 710.2505196000011 13.217 696.701025599999 12.456 702.7903122000018 12.558 709.3960550999988 12.466 706.9157282000012 13.298 722.449661800001 13.219 729.1277426000017 13.868 699.8370584000005 13.111 699.5411967000006 12.379 710.9629768999991 13.157 708.5129012999979 13.162 699.7881858000009 12.427 710.2070218 13.767 721.5341984000002 14.047 686.2363584000002 12.488 721.0969565999983 13.188 689.8655045999989 12.407 715.3083359000025 13.164 728.5712759999989 14.032 704.0481448000012 13.682 713.8810819000028 13.241 732.1134638000026 14.014 708.8130015000005 13.914)
Error minima by case: (0.6147 8 0.7779 2 0.8175 2 0.0303 2 0.4556 2 8.4676 2 3.2811 8 21.0 3 18.6953 2 0.5337 8 3.4569 8 1.5652 1 2.0502 1 0.2736 2 0.4049 10 14.6789 3 0.5742 2 2.7779 2 0.0096 1 0.2468 2 8.616 2 0.425 7 0.7958 2 24.4929 2 0.3143 9)
Average genome size in population (length): 50.152
Average program size in population (points): 51.152
Average percent parens in population: 0.043
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.319
Error (vector) diversity:			 0.343
Behavioral diversity:				 0.363
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1257285
--- Timings ---
Current time: 1529615278277 milliseconds
Total Time:           3.4 seconds
Initialization:       0.1 seconds,  3.3%
Reproduction:         0.6 seconds, 16.8%
Fitness Testing:      2.7 seconds, 79.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 55365.0
Test mean error for best: 27.68250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -76.614723858 
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -49.4544341591
Correct output: 48.0303159228  | Program output: 51.0303159228 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -22.8676801757
Correct output: -119.511081127 | Program output: -98.511081127 
Correct output: -137.6953004708 | Program output: -78.6953004708
Correct output: 28.0264601383  | Program output: -19.9735398617
Correct output: 19.014261193   | Program output: -32.985738807 
Correct output: -76.5652234606 | Program output: -56.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -61.7264396507
Correct output: -74.5951028043 | Program output: 9.4048971957  
Correct output: -111.2224067056 | Program output: -83.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -12.7779180651
Correct output: 23.3238574914  | Program output: 25.3238574914 
Correct output: -81.9975425787 | Program output: -24.9975425787
Correct output: -132.3840059284 | Program output: -62.3840059284
Correct output: -21.0593840301 | Program output: 60.9406159699 
Correct output: -85.8056758937 | Program output: -64.8056758937
Correct output: -149.9116694043 | Program output: -94.9116694043
Correct output: -50.3143322102 | Program output: 38.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_shove} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_div} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction in2} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_div} {:instruction float_shove} {:instruction float_cos} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_min} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_mult} {:instruction float_pop} {:instruction float_min} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth integer_dup_times tagged_44 float_sin integer_yank float_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 float_sin float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth in2 integer_add float_shove integer_swap float_dup_times float_yankdup float_div float_frominteger float_inc integer_pop integer_yankdup in2 float_pop integer_dup_times float_shove integer_div float_shove float_cos float_min integer_dup_items float_sub integer_stackdepth integer_mult integer_rot float_min integer_fromfloat in2 float_dup integer_yank integer_rot integer_yank float_mult float_pop float_min float_frominteger float_frominteger)
Errors: [84.0 11 5.0 2 21.0 2 3.0 2 27.0 2 28.0 3 79.0 13 21.0 3 59.0 3 48.0 13 52.0 12 20.0 1 6.0 1 52.0 2 84.0 12 28.0 3 18.0 2 87.0 2 2.0 1 57.0 2 70.0 2 82.0 13 21.0 2 55.0 2 89.0 13]
Total: 1222.0
Mean: 24.44
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 6611.811144400006
Median total errors in population: 2051.2585
Error averages by case: (244.32088599999946 10.96 229.90426739999833 11.111 244.4369305999987 10.875 237.13448610000182 10.433 252.05365170000206 10.527 268.06147059999876 10.316 254.25872789999985 12.699 271.3838964000011 10.97 288.0359821 11.27 233.96734670000058 12.376 233.48660830000054 11.806 248.29818380000134 10.754 248.8447925000015 10.709 232.52617610000138 10.237 259.5063645000004 12.727 267.94807189999955 11.673 220.23542580000094 10.393 272.17114769999756 10.798 224.8458745999986 10.228 257.313957099999 10.725 287.4885929999995 11.682 250.56046509999993 12.448 252.57367049999908 10.933 294.2813918999989 11.653 256.94277609999983 12.927)
Error minima by case: (0.6147 8 0.2221 2 0.8175 2 0.0303 2 1.3984 2 10.6052 2 3.2811 8 21.0 3 16.6953 2 2.2494 8 1.0143 8 1.5652 1 2.0502 1 0.2736 2 0.4049 9 14.6789 3 0.5742 2 2.7779 2 0.0096 1 0.2468 2 8.616 2 0.425 7 0.1239 2 24.4929 2 0.3143 9)
Average genome size in population (length): 59.416
Average program size in population (points): 60.416
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.499
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.306
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2747160
--- Timings ---
Current time: 1529615283660 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.3 seconds, 37.8%
Fitness Testing:      4.4 seconds, 50.2%
Report:               0.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 55365.0
Test mean error for best: 27.68250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -76.614723858 
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -49.4544341591
Correct output: 48.0303159228  | Program output: 51.0303159228 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -22.8676801757
Correct output: -119.511081127 | Program output: -98.511081127 
Correct output: -137.6953004708 | Program output: -78.6953004708
Correct output: 28.0264601383  | Program output: -19.9735398617
Correct output: 19.014261193   | Program output: -32.985738807 
Correct output: -76.5652234606 | Program output: -56.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -61.7264396507
Correct output: -74.5951028043 | Program output: 9.4048971957  
Correct output: -111.2224067056 | Program output: -83.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -12.7779180651
Correct output: 23.3238574914  | Program output: 25.3238574914 
Correct output: -81.9975425787 | Program output: -24.9975425787
Correct output: -132.3840059284 | Program output: -62.3840059284
Correct output: -21.0593840301 | Program output: 60.9406159699 
Correct output: -85.8056758937 | Program output: -64.8056758937
Correct output: -149.9116694043 | Program output: -94.9116694043
Correct output: -50.3143322102 | Program output: 38.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_shove} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_div} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction in2} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_div} {:instruction float_shove} {:instruction float_cos} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_min} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_mult} {:instruction float_pop} {:instruction float_min} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth integer_dup_times tagged_44 float_sin integer_yank float_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 float_sin float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth in2 integer_add float_shove integer_swap float_dup_times float_yankdup float_div float_frominteger float_inc integer_pop integer_yankdup in2 float_pop integer_dup_times float_shove integer_div float_shove float_cos float_min integer_dup_items float_sub integer_stackdepth integer_mult integer_rot float_min integer_fromfloat in2 float_dup integer_yank integer_rot integer_yank float_mult float_pop float_min float_frominteger float_frominteger)
Errors: [84.0 11 5.0 2 21.0 2 3.0 2 27.0 2 28.0 3 79.0 13 21.0 3 59.0 3 48.0 13 52.0 12 20.0 1 6.0 1 52.0 2 84.0 12 28.0 3 18.0 2 87.0 2 2.0 1 57.0 2 70.0 2 82.0 13 21.0 2 55.0 2 89.0 13]
Total: 1222.0
Mean: 24.44
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4711.362654899995
Median total errors in population: 1271.0
Error averages by case: (204.0187281 11.36 149.8104981 6.668 166.23918429999983 6.572 153.5148546 6.368 167.0310700000004 6.423 172.31635319999995 6.292 198.08472770000014 13.667 175.0283017000005 6.981 199.4941441999998 6.635 174.5969860999998 13.192 178.37315760000013 12.899 166.70667620000017 6.391 156.51959659999991 5.823 180.31797140000023 6.288 202.21739289999985 13.352 177.40851129999984 7.439 148.09253870000032 6.068 207.708448599999 6.458 147.98095660000018 5.546 187.5742435999997 6.376 204.70805039999954 7.409 207.33101730000018 12.847 168.89779379999965 6.54 199.51116879999964 7.259 209.2222831000001 13.805)
Error minima by case: (3.0667 8 1.2221 2 0.8175 2 0.0303 2 16.5444 2 8.1492 2 7.1204 9 21.0 3 18.6953 2 3.9735 9 12.9857 9 2.5652 1 2.8254 1 6.6802 2 0.5951 10 28.0 3 6.2029 2 2.7779 2 1.3239 1 0.2468 2 8.616 2 3.9406 8 4.0549 2 38.9117 2 0.3143 9)
Average genome size in population (length): 54.311
Average program size in population (points): 55.311
Average percent parens in population: 0.023
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.984
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.158
Error (vector) diversity:			 0.167
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4108635
--- Timings ---
Current time: 1529615287860 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.0 seconds, 38.1%
Fitness Testing:      6.2 seconds, 47.2%
Report:               1.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 55365.0
Test mean error for best: 27.68250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -76.614723858 
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -49.4544341591
Correct output: 48.0303159228  | Program output: 51.0303159228 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -22.8676801757
Correct output: -119.511081127 | Program output: -98.511081127 
Correct output: -137.6953004708 | Program output: -78.6953004708
Correct output: 28.0264601383  | Program output: -19.9735398617
Correct output: 19.014261193   | Program output: -32.985738807 
Correct output: -76.5652234606 | Program output: -56.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -61.7264396507
Correct output: -74.5951028043 | Program output: 9.4048971957  
Correct output: -111.2224067056 | Program output: -83.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -12.7779180651
Correct output: 23.3238574914  | Program output: 25.3238574914 
Correct output: -81.9975425787 | Program output: -24.9975425787
Correct output: -132.3840059284 | Program output: -62.3840059284
Correct output: -21.0593840301 | Program output: 60.9406159699 
Correct output: -85.8056758937 | Program output: -64.8056758937
Correct output: -149.9116694043 | Program output: -94.9116694043
Correct output: -50.3143322102 | Program output: 38.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_pop} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction 78} {:instruction float_div} {:instruction tagged_66} {:instruction float_sin} {:instruction integer_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_shove} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_div} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction in2} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_div} {:instruction float_shove} {:instruction float_cos} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_min} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_add} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_mult} {:instruction float_pop} {:instruction float_min} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_pop integer_max float_stackdepth float_mod 78 float_div tagged_66 float_sin integer_yank float_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 float_sin float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth in2 integer_add float_shove integer_swap float_dup_times float_yankdup float_div float_frominteger float_inc integer_pop integer_yankdup in2 float_pop integer_dup_times float_shove integer_div float_shove float_cos float_min integer_dup_items float_sub integer_stackdepth integer_mult integer_rot float_min integer_fromfloat in2 float_add integer_yank integer_rot integer_yank float_mult float_pop float_min float_frominteger float_frominteger)
Errors: [84.0 11 5.0 2 21.0 2 3.0 2 27.0 2 28.0 3 79.0 13 21.0 3 59.0 3 48.0 13 52.0 12 20.0 1 6.0 1 52.0 2 84.0 12 28.0 3 18.0 2 87.0 2 2.0 1 57.0 2 70.0 2 82.0 13 21.0 2 55.0 2 89.0 13]
Total: 1222.0
Mean: 24.44
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3760.9568312
Median total errors in population: 1227.0
Error averages by case: (178.04847139999998 11.181 108.06224560000001 3.551 124.98876930000003 3.56 108.751719 3.437 127.62272019999999 3.433 128.6692065 3.486 173.79295329999997 13.364 125.28322270000002 4.367 159.17469640000002 3.681 146.0903185 12.618 149.61424530000002 12.441 124.13665559999998 3.463 109.15413240000001 2.614 149.59803970000002 3.446 181.0193959 13.163 131.4559132 4.535 119.38087589999999 3.278 183.8393572 3.538 107.7633062 2.53 157.0631141 3.542 168.921206 4.405 178.91911020000003 12.533 125.08157949999998 3.517 155.69242749999998 4.389 185.3181496 13.443)
Error minima by case: (6.6176 8 3.0 2 21.0 2 3.0 2 2.8977 2 26.0 2 22.5144 9 21.0 3 59.0 2 27.2587 9 18.2465 9 20.0 1 4.0 1 8.7264 1 74.5951 10 28.0 2 16.0 2 87.0 2 2.0 1 57.0 2 70.0 2 21.0594 11 21.0 2 55.0 2 50.3143 11)
Average genome size in population (length): 42.567
Average program size in population (points): 43.567
Average percent parens in population: 0.030
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.42075
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 90
Genome diversity (% unique Plush genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.045
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5173360
--- Timings ---
Current time: 1529615291773 milliseconds
Total Time:          17.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.4 seconds, 37.7%
Fitness Testing:      7.9 seconds, 46.5%
Report:               2.6 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 55408.0
Test mean error for best: 27.70400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -77.614723858 
Correct output: -58.7779066602 | Program output: -64.7779066602
Correct output: -70.4544341591 | Program output: -50.4544341591
Correct output: 48.0303159228  | Program output: 50.0303159228 
Correct output: 81.5444045338  | Program output: 53.5444045338 
Correct output: 107.605181994  | Program output: 78.605181994  
Correct output: 56.1323198243  | Program output: -23.8676801757
Correct output: -119.511081127 | Program output: -99.511081127 
Correct output: -137.6953004708 | Program output: -79.6953004708
Correct output: 28.0264601383  | Program output: -20.9735398617
Correct output: 19.014261193   | Program output: -33.985738807 
Correct output: -76.5652234606 | Program output: -57.5652234606
Correct output: -92.2496022257 | Program output: -99.2496022257
Correct output: -9.7264396507  | Program output: -62.7264396507
Correct output: -74.5951028043 | Program output: 8.4048971957  
Correct output: -111.2224067056 | Program output: -84.2224067056
Correct output: 25.2029289086  | Program output: 6.2029289086  
Correct output: -99.7779180651 | Program output: -13.7779180651
Correct output: 23.3238574914  | Program output: 24.3238574914 
Correct output: -81.9975425787 | Program output: -25.9975425787
Correct output: -132.3840059284 | Program output: -63.3840059284
Correct output: -21.0593840301 | Program output: 59.9406159699 
Correct output: -85.8056758937 | Program output: -65.8056758937
Correct output: -149.9116694043 | Program output: -95.9116694043
Correct output: -50.3143322102 | Program output: 37.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth integer_dup_times tagged_44 float_sin integer_yank float_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 float_sin float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth)
Errors: [85.0 11 6.0 2 20.0 1 2.0 2 28.0 2 29.0 3 80.0 13 20.0 2 58.0 3 49.0 12 53.0 12 19.0 2 7.0 1 53.0 2 83.0 12 27.0 3 19.0 2 86.0 2 1.0 1 56.0 2 69.0 2 81.0 13 20.0 1 54.0 3 88.0 13]
Total: 1215.0
Mean: 24.3
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3833.6162629000005
Median total errors in population: 1227.0
Error averages by case: (182.52597409999998 11.172 113.84485240000001 3.434 128.09928230000003 3.434 108.96657769999999 3.329 130.32728099999997 3.328 131.5972916 3.639 178.495581 13.297 128.77448800000002 4.243 162.39623379999995 3.838 151.027522 12.73 156.4243188 12.262 127.29981359999998 3.055 115.190396 2.498 154.4781485 3.327 180.4987251 12.871 134.7440201 4.407 121.4211318 3.269 186.4515932 3.425 107.80650500000002 2.414 159.86178990000002 3.418 171.9751754 3.993 178.33973289999997 12.737 128.3147812 3.39 159.0561918 3.986 184.8478557 13.355)
Error minima by case: (6.4086 9 4.0 2 20.0 1 2.0 2 0.7319 2 26.5104 2 22.984 9 20.0 2 58.0 2 11.8788 10 10.1456 7 19.0 1 5.0 1 6.9006 2 61.3644 8 27.0 3 8.0 2 86.0 2 1.0 1 56.0 2 69.0 2 18.2336 9 20.0 1 54.0 2 7.8028 8)
Average genome size in population (length): 49.909
Average program size in population (points): 50.909
Average percent parens in population: 0.028
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.876125
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.04
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6421335
--- Timings ---
Current time: 1529615295214 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         7.8 seconds, 37.5%
Fitness Testing:      9.6 seconds, 46.0%
Report:               3.3 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 55408.0
Test mean error for best: 27.70400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -77.614723858 
Correct output: -58.7779066602 | Program output: -64.7779066602
Correct output: -70.4544341591 | Program output: -50.4544341591
Correct output: 48.0303159228  | Program output: 50.0303159228 
Correct output: 81.5444045338  | Program output: 53.5444045338 
Correct output: 107.605181994  | Program output: 78.605181994  
Correct output: 56.1323198243  | Program output: -23.8676801757
Correct output: -119.511081127 | Program output: -99.511081127 
Correct output: -137.6953004708 | Program output: -79.6953004708
Correct output: 28.0264601383  | Program output: -20.9735398617
Correct output: 19.014261193   | Program output: -33.985738807 
Correct output: -76.5652234606 | Program output: -57.5652234606
Correct output: -92.2496022257 | Program output: -99.2496022257
Correct output: -9.7264396507  | Program output: -62.7264396507
Correct output: -74.5951028043 | Program output: 8.4048971957  
Correct output: -111.2224067056 | Program output: -84.2224067056
Correct output: 25.2029289086  | Program output: 6.2029289086  
Correct output: -99.7779180651 | Program output: -13.7779180651
Correct output: 23.3238574914  | Program output: 24.3238574914 
Correct output: -81.9975425787 | Program output: -25.9975425787
Correct output: -132.3840059284 | Program output: -63.3840059284
Correct output: -21.0593840301 | Program output: 59.9406159699 
Correct output: -85.8056758937 | Program output: -65.8056758937
Correct output: -149.9116694043 | Program output: -95.9116694043
Correct output: -50.3143322102 | Program output: 37.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth integer_dup_times tagged_44 float_sin integer_yank float_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 float_sin float_yankdup float_dec float_inc integer_sub 86)
Errors: [85.0 11 6.0 2 20.0 1 2.0 2 28.0 2 29.0 3 80.0 13 20.0 2 58.0 3 49.0 12 53.0 12 19.0 2 7.0 1 53.0 2 83.0 12 27.0 3 19.0 2 86.0 2 1.0 1 56.0 2 69.0 2 81.0 13 20.0 1 54.0 3 88.0 13]
Total: 1215.0
Mean: 24.3
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2347.158676000001
Median total errors in population: 1222.0
Error averages by case: (126.15584559999999 11.096 52.54483060000001 2.68 68.78008309999998 2.658 47.04957259999999 2.623 68.99738319999999 2.617 70.40479599999999 3.486 121.91456759999997 13.175 69.46998560000002 3.557 105.3689444 3.561 92.4685463 13.09 96.137623 12.168 67.93307939999998 1.763 53.954327799999994 1.689 96.08417339999998 2.62 123.3082045 12.188 75.91882989999999 3.647 59.39503630000001 2.585 131.10343809999998 2.67 45.70172740000001 1.655 102.71585260000003 2.656 115.621293 2.727 121.02082440000002 13.067 68.9958125 2.635 101.788274 2.713 127.8276247 13.172)
Error minima by case: (7.6001 9 4.0 2 20.0 1 2.0 2 2.1384 2 27.0 2 23.2737 8 20.0 2 58.0 2 11.8788 8 10.1456 9 19.0 1 5.0 1 6.9006 2 55.1902 8 27.0 3 8.0 2 86.0 2 1.0 1 56.0 2 69.0 2 18.2336 9 20.0 1 54.0 2 7.8028 8)
Average genome size in population (length): 70.581
Average program size in population (points): 71.581
Average percent parens in population: 0.016
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.237875
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.026
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8185860
--- Timings ---
Current time: 1529615299161 milliseconds
Total Time:          24.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.2 seconds, 37.1%
Fitness Testing:     11.7 seconds, 47.3%
Report:               3.7 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 55408.0
Test mean error for best: 27.70400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -77.614723858 
Correct output: -58.7779066602 | Program output: -64.7779066602
Correct output: -70.4544341591 | Program output: -50.4544341591
Correct output: 48.0303159228  | Program output: 50.0303159228 
Correct output: 81.5444045338  | Program output: 53.5444045338 
Correct output: 107.605181994  | Program output: 78.605181994  
Correct output: 56.1323198243  | Program output: -23.8676801757
Correct output: -119.511081127 | Program output: -99.511081127 
Correct output: -137.6953004708 | Program output: -79.6953004708
Correct output: 28.0264601383  | Program output: -20.9735398617
Correct output: 19.014261193   | Program output: -33.985738807 
Correct output: -76.5652234606 | Program output: -57.5652234606
Correct output: -92.2496022257 | Program output: -99.2496022257
Correct output: -9.7264396507  | Program output: -62.7264396507
Correct output: -74.5951028043 | Program output: 8.4048971957  
Correct output: -111.2224067056 | Program output: -84.2224067056
Correct output: 25.2029289086  | Program output: 6.2029289086  
Correct output: -99.7779180651 | Program output: -13.7779180651
Correct output: 23.3238574914  | Program output: 24.3238574914 
Correct output: -81.9975425787 | Program output: -25.9975425787
Correct output: -132.3840059284 | Program output: -63.3840059284
Correct output: -21.0593840301 | Program output: 59.9406159699 
Correct output: -85.8056758937 | Program output: -65.8056758937
Correct output: -149.9116694043 | Program output: -95.9116694043
Correct output: -50.3143322102 | Program output: 37.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth integer_dup_times tagged_44 float_sin integer_yank float_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 float_sin float_yankdup float_dec float_inc integer_sub 86)
Errors: [85.0 11 6.0 2 20.0 1 2.0 2 28.0 2 29.0 3 80.0 13 20.0 2 58.0 3 49.0 12 53.0 12 19.0 2 7.0 1 53.0 2 83.0 12 27.0 3 19.0 2 86.0 2 1.0 1 56.0 2 69.0 2 81.0 13 20.0 1 54.0 3 88.0 13]
Total: 1215.0
Mean: 24.3
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2878.174062700001
Median total errors in population: 1222.0
Error averages by case: (146.8674473 11.114 75.58043370000001 2.978 89.3134831 2.904 68.45021249999999 2.887 92.5825232 2.893 94.01582689999996 3.782 143.1836664 13.21 90.1982955 3.776 125.2192646 3.875 114.40595499999999 13.138 117.8933046 12.223 88.5156945 2.061 77.09433239999998 2.021 117.65476349999997 2.897 142.8753977 12.184 96.43845209999998 3.928 81.99617080000002 2.856 150.10449929999996 2.955 66.88154660000002 1.944 122.39571760000001 2.937 135.1772749 2.98 140.67455460000005 13.14 89.5886343 2.878 121.7884149 3.005 147.5051967 13.207)
Error minima by case: (7.349 8 2.37 2 14.0466 1 2.0 2 26.0 2 27.0 2 56.007 8 20.0 2 58.0 2 27.8821 8 18.9286 7 19.0 1 5.0 1 5.9006 2 18.1872 8 27.0 3 8.0 2 43.37 2 1.0 1 25.5897 2 69.0 2 17.2336 8 20.0 1 54.0 2 6.0935 8)
Average genome size in population (length): 69.114
Average program size in population (points): 70.114
Average percent parens in population: 0.016
Minimum age in population: 6.0
Maximum age in population: 10.65625
Average age in population: 8.72003125
Median age in population: 8.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.036
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9913735
--- Timings ---
Current time: 1529615302854 milliseconds
Total Time:          28.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.6 seconds, 37.0%
Fitness Testing:     13.7 seconds, 47.8%
Report:               4.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 55408.0
Test mean error for best: 27.70400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -77.614723858 
Correct output: -58.7779066602 | Program output: -64.7779066602
Correct output: -70.4544341591 | Program output: -50.4544341591
Correct output: 48.0303159228  | Program output: 50.0303159228 
Correct output: 81.5444045338  | Program output: 53.5444045338 
Correct output: 107.605181994  | Program output: 78.605181994  
Correct output: 56.1323198243  | Program output: -23.8676801757
Correct output: -119.511081127 | Program output: -99.511081127 
Correct output: -137.6953004708 | Program output: -79.6953004708
Correct output: 28.0264601383  | Program output: -20.9735398617
Correct output: 19.014261193   | Program output: -33.985738807 
Correct output: -76.5652234606 | Program output: -57.5652234606
Correct output: -92.2496022257 | Program output: -99.2496022257
Correct output: -9.7264396507  | Program output: -62.7264396507
Correct output: -74.5951028043 | Program output: 8.4048971957  
Correct output: -111.2224067056 | Program output: -84.2224067056
Correct output: 25.2029289086  | Program output: 6.2029289086  
Correct output: -99.7779180651 | Program output: -13.7779180651
Correct output: 23.3238574914  | Program output: 24.3238574914 
Correct output: -81.9975425787 | Program output: -25.9975425787
Correct output: -132.3840059284 | Program output: -63.3840059284
Correct output: -21.0593840301 | Program output: 59.9406159699 
Correct output: -85.8056758937 | Program output: -65.8056758937
Correct output: -149.9116694043 | Program output: -95.9116694043
Correct output: -50.3143322102 | Program output: 37.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction float_sin} {:instruction float_min} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction integer_dup_items} {:instruction tag_float_973} {:instruction integer_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_shove} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_div} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction in2} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_div})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth tagged_44 float_sin integer_yank float_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec print_float float_sub float_sub integer_dup_times integer_add integer_yank integer_shove in2 float_sin float_min float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 integer_dup_items tag_float_973 integer_stackdepth in2 integer_add float_shove integer_swap float_dup_times float_yankdup float_div float_frominteger float_inc integer_pop integer_yankdup in2 float_pop integer_dup_times float_shove integer_div)
Errors: [85.0 11 6.0 2 20.0 1 2.0 2 28.0 2 29.0 3 80.0 13 20.0 2 58.0 3 49.0 12 53.0 12 19.0 2 7.0 1 53.0 2 83.0 12 27.0 3 19.0 2 86.0 2 1.0 1 56.0 2 69.0 2 81.0 13 20.0 1 54.0 3 88.0 13]
Total: 1215.0
Mean: 24.3
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2755.0639202000007
Median total errors in population: 1222.0
Error averages by case: (141.0740023 11.161 68.5683975 2.894 84.94711540000002 2.616 64.5647517 2.811 86.2571047 2.815 87.47287510000001 3.692 137.03185309999998 13.284 85.532229 3.497 120.8264936 3.819 108.02043240000002 12.973 112.59134739999999 12.277 84.096294 2.198 69.89500579999999 1.916 111.4581796 2.824 140.19350430000003 12.239 91.8623899 3.874 76.42977929999999 2.76 146.2161833 2.885 63.2166486 1.855 118.31301570000001 2.879 130.91655270000004 2.902 137.96946069999998 13.207 85.1324519 2.593 117.28034809999998 3.151 144.7785041 13.297)
Error minima by case: (7.3853 9 4.0 2 20.0 1 2.0 2 26.0 2 27.0 2 56.1323 11 20.0 2 58.0 2 28.0265 10 19.0143 7 19.0 1 5.0 1 5.9006 2 70.7693 8 27.0 3 17.0 2 86.0 2 1.0 1 56.0 2 69.0 2 17.2336 8 20.0 1 54.0 2 46.4885 8)
Average genome size in population (length): 67.022
Average program size in population (points): 68.022
Average percent parens in population: 0.016
Minimum age in population: 7.0
Maximum age in population: 12.03125
Average age in population: 10.237140625
Median age in population: 10.265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.039
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11589310
--- Timings ---
Current time: 1529615306781 milliseconds
Total Time:          32.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        12.1 seconds, 37.4%
Fitness Testing:     15.6 seconds, 48.1%
Report:               4.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 55530.0
Test mean error for best: 27.76500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -79.614723858 
Correct output: -58.7779066602 | Program output: -66.7779066602
Correct output: -70.4544341591 | Program output: -52.4544341591
Correct output: 48.0303159228  | Program output: 48.0303159228 
Correct output: 81.5444045338  | Program output: 51.5444045338 
Correct output: 107.605181994  | Program output: 76.605181994  
Correct output: 56.1323198243  | Program output: -25.8676801757
Correct output: -119.511081127 | Program output: -101.511081127
Correct output: -137.6953004708 | Program output: -81.6953004708
Correct output: 28.0264601383  | Program output: -22.9735398617
Correct output: 19.014261193   | Program output: -35.985738807 
Correct output: -76.5652234606 | Program output: -59.5652234606
Correct output: -92.2496022257 | Program output: -101.2496022257
Correct output: -9.7264396507  | Program output: -64.7264396507
Correct output: -74.5951028043 | Program output: 6.4048971957  
Correct output: -111.2224067056 | Program output: -86.2224067056
Correct output: 25.2029289086  | Program output: 4.2029289086  
Correct output: -99.7779180651 | Program output: -15.7779180651
Correct output: 23.3238574914  | Program output: 22.3238574914 
Correct output: -81.9975425787 | Program output: -27.9975425787
Correct output: -132.3840059284 | Program output: -65.3840059284
Correct output: -21.0593840301 | Program output: 57.9406159699 
Correct output: -85.8056758937 | Program output: -67.8056758937
Correct output: -149.9116694043 | Program output: -97.9116694043
Correct output: -50.3143322102 | Program output: 35.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 float_sin float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth)
Errors: [87.0 11 8.0 2 18.0 2 0.0 0 30.0 1 31.0 3 82.0 13 18.0 2 56.0 3 51.0 12 55.0 12 17.0 2 9.0 3 55.0 2 81.0 12 25.0 3 21.0 2 84.0 2 1.0 1 54.0 2 67.0 3 79.0 13 18.0 2 52.0 3 86.0 12]
Total: 1208.0
Mean: 24.16
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2534.7204668000004
Median total errors in population: 1215.0
Error averages by case: (135.4816921 11.103 62.7346464 2.787 75.9541051 1.931 52.1283667 2.728 76.30706119999998 2.732 77.6184134 3.618 130.9627026 13.198 76.9912649 2.828 112.35644489999999 3.703 101.95933210000001 12.337 106.57401399999995 12.216 75.17562840000001 2.645 64.2254162 1.818 105.55483509999999 2.718 128.1474008 12.166 83.9601565 3.76 67.16118159999999 2.677 137.7257355 2.781 50.9680788 1.767 109.5951484 2.774 122.43817779999999 2.79 125.91742299999999 13.151 76.10278249999999 1.912 108.90087299999999 3.604 132.8255858 13.21)
Error minima by case: (8.1472 9 5.0 2 18.0 1 0.0 0 3.1384 1 10.3415 2 8.9981 8 18.0 2 56.0 3 28.7884 8 19.7762 8 17.0 1 6.0 1 5.7724 2 62.9833 8 25.0 3 9.0 1 84.0 2 0.0 0 54.0 2 67.0 2 17.1053 8 1.0389 1 52.0 2 46.3603 8)
Average genome size in population (length): 64.918
Average program size in population (points): 65.918
Average percent parens in population: 0.017
Minimum age in population: 9.4375
Maximum age in population: 13.515625
Average age in population: 11.7432109375
Median age in population: 11.765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.034
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 13212285
--- Timings ---
Current time: 1529615310912 milliseconds
Total Time:          36.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.6 seconds, 37.3%
Fitness Testing:     17.6 seconds, 48.4%
Report:               5.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 55530.0
Test mean error for best: 27.76500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -79.614723858 
Correct output: -58.7779066602 | Program output: -66.7779066602
Correct output: -70.4544341591 | Program output: -52.4544341591
Correct output: 48.0303159228  | Program output: 48.0303159228 
Correct output: 81.5444045338  | Program output: 51.5444045338 
Correct output: 107.605181994  | Program output: 76.605181994  
Correct output: 56.1323198243  | Program output: -25.8676801757
Correct output: -119.511081127 | Program output: -101.511081127
Correct output: -137.6953004708 | Program output: -81.6953004708
Correct output: 28.0264601383  | Program output: -22.9735398617
Correct output: 19.014261193   | Program output: -35.985738807 
Correct output: -76.5652234606 | Program output: -59.5652234606
Correct output: -92.2496022257 | Program output: -101.2496022257
Correct output: -9.7264396507  | Program output: -64.7264396507
Correct output: -74.5951028043 | Program output: 6.4048971957  
Correct output: -111.2224067056 | Program output: -86.2224067056
Correct output: 25.2029289086  | Program output: 4.2029289086  
Correct output: -99.7779180651 | Program output: -15.7779180651
Correct output: 23.3238574914  | Program output: 22.3238574914 
Correct output: -81.9975425787 | Program output: -27.9975425787
Correct output: -132.3840059284 | Program output: -65.3840059284
Correct output: -21.0593840301 | Program output: 57.9406159699 
Correct output: -85.8056758937 | Program output: -67.8056758937
Correct output: -149.9116694043 | Program output: -97.9116694043
Correct output: -50.3143322102 | Program output: 35.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_div} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_div float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 float_sin float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth)
Errors: [87.0 11 8.0 2 18.0 2 0.0 0 30.0 1 31.0 3 82.0 13 18.0 2 56.0 3 51.0 12 55.0 12 17.0 2 9.0 3 55.0 2 81.0 12 25.0 3 21.0 2 84.0 2 1.0 1 54.0 2 67.0 3 79.0 13 18.0 2 52.0 3 86.0 12]
Total: 1208.0
Mean: 24.16
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2708.223895700001
Median total errors in population: 1215.0
Error averages by case: (140.69418010000004 11.129 68.3638284 2.899 81.41586379999998 1.976 62.531411799999994 2.789 87.05278980000001 2.816 88.29127039999997 3.705 136.75602389999997 13.215 82.1022114 2.855 117.4689297 3.819 107.71850519999997 12.272 111.2884973 12.239 80.5773327 2.849 69.75614999999999 1.987 111.10512959999998 2.822 137.8823307 12.188 88.45427149999999 3.865 77.9712737 2.758 142.81084689999997 2.887 61.32124800000002 1.842 114.84176770000003 2.871 127.5587313 2.933 135.4745264 13.174 81.63060850000002 1.967 113.94383980000002 3.809 142.3213271 13.225)
Error minima by case: (4.2163 9 4.0 2 18.0 1 0.0 0 26.0 1 27.0 2 52.9633 9 18.0 2 56.0 2 24.8575 10 15.8453 9 17.0 1 5.0 1 5.9006 2 70.7693 8 25.0 3 9.0 1 84.0 2 0.0 0 54.0 2 67.0 2 17.2336 9 18.0 1 52.0 2 46.4885 9)
Average genome size in population (length): 63.774
Average program size in population (points): 64.774
Average percent parens in population: 0.017
Minimum age in population: 10.4375
Maximum age in population: 15.140625
Average age in population: 13.270375
Median age in population: 13.32421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.035
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 14806660
--- Timings ---
Current time: 1529615314499 milliseconds
Total Time:          40.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.9 seconds, 37.2%
Fitness Testing:     19.5 seconds, 48.5%
Report:               5.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 55530.0
Test mean error for best: 27.76500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -79.614723858 
Correct output: -58.7779066602 | Program output: -66.7779066602
Correct output: -70.4544341591 | Program output: -52.4544341591
Correct output: 48.0303159228  | Program output: 48.0303159228 
Correct output: 81.5444045338  | Program output: 51.5444045338 
Correct output: 107.605181994  | Program output: 76.605181994  
Correct output: 56.1323198243  | Program output: -25.8676801757
Correct output: -119.511081127 | Program output: -101.511081127
Correct output: -137.6953004708 | Program output: -81.6953004708
Correct output: 28.0264601383  | Program output: -22.9735398617
Correct output: 19.014261193   | Program output: -35.985738807 
Correct output: -76.5652234606 | Program output: -59.5652234606
Correct output: -92.2496022257 | Program output: -101.2496022257
Correct output: -9.7264396507  | Program output: -64.7264396507
Correct output: -74.5951028043 | Program output: 6.4048971957  
Correct output: -111.2224067056 | Program output: -86.2224067056
Correct output: 25.2029289086  | Program output: 4.2029289086  
Correct output: -99.7779180651 | Program output: -15.7779180651
Correct output: 23.3238574914  | Program output: 22.3238574914 
Correct output: -81.9975425787 | Program output: -27.9975425787
Correct output: -132.3840059284 | Program output: -65.3840059284
Correct output: -21.0593840301 | Program output: 57.9406159699 
Correct output: -85.8056758937 | Program output: -67.8056758937
Correct output: -149.9116694043 | Program output: -97.9116694043
Correct output: -50.3143322102 | Program output: 35.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_shove} {:instruction float_shove} {:instruction float_sub} {:instruction integer_dup_items} {:instruction tag_float_973} {:instruction integer_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_shove} {:instruction float_tan} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_div} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_mult} {:instruction float_pop} {:instruction float_min} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop float_mult float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add in2 float_sin float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec integer_dup_items float_flush integer_stackdepth float_min integer_shove float_shove float_sub integer_dup_items tag_float_973 integer_stackdepth in2 integer_add float_shove float_tan float_dup_times float_yankdup float_div float_frominteger float_inc integer_pop integer_yankdup float_dup integer_yank integer_rot integer_yank float_mult float_pop float_min float_frominteger float_frominteger)
Errors: [87.0 11 8.0 2 18.0 2 0.0 0 30.0 1 31.0 3 82.0 13 18.0 2 56.0 3 51.0 12 55.0 12 17.0 2 9.0 3 55.0 2 81.0 12 25.0 3 21.0 2 84.0 2 1.0 1 54.0 2 67.0 3 79.0 13 18.0 2 52.0 3 86.0 12]
Total: 1208.0
Mean: 24.16
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2830.0746164000007
Median total errors in population: 1215.0
Error averages by case: (147.82260319999997 11.126 75.4143186 2.857 88.00893149999999 2.059 63.7574447 2.59 88.47202990000001 2.746 89.75151609999999 3.565 143.4054792 13.216 88.58906700000001 2.807 123.73272920000001 3.781 114.5955884 12.263 118.25346010000001 12.229 87.16202260000001 2.819 76.7349751 2.204 118.3010582 2.794 138.6330612 12.201 94.92526589999999 3.826 79.11449499999999 2.63 149.02120140000002 2.843 62.56703180000001 1.715 121.23570840000001 2.83 133.7808345 3.016 136.76420960000002 13.187 88.1904726 2.052 120.200501 3.771 143.3166112 13.197)
Error minima by case: (3.2163 9 4.0 2 18.0 1 0.0 0 26.0 1 27.0 2 14.3798 9 18.0 2 56.0 2 8.4419 9 11.1056 9 17.0 1 5.0 1 5.7724 2 57.1902 8 25.0 3 9.0 1 84.0 2 0.0 0 54.0 2 67.0 2 17.1053 9 18.0 1 52.0 2 8.7628 8)
Average genome size in population (length): 63.046
Average program size in population (points): 64.046
Average percent parens in population: 0.017
Minimum age in population: 11.4375
Maximum age in population: 16.671875
Average age in population: 14.79845703125
Median age in population: 14.8427734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.033
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 16382835
--- Timings ---
Current time: 1529615318458 milliseconds
Total Time:          43.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.3 seconds, 37.1%
Fitness Testing:     21.4 seconds, 48.8%
Report:               6.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 56015.0
Test mean error for best: 28.00750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -83.614723858 
Correct output: -58.7779066602 | Program output: -70.7779066602
Correct output: -70.4544341591 | Program output: -56.4544341591
Correct output: 48.0303159228  | Program output: 44.0303159228 
Correct output: 81.5444045338  | Program output: 47.5444045338 
Correct output: 107.605181994  | Program output: 72.605181994  
Correct output: 56.1323198243  | Program output: -29.8676801757
Correct output: -119.511081127 | Program output: -105.511081127
Correct output: -137.6953004708 | Program output: -85.6953004708
Correct output: 28.0264601383  | Program output: -26.9735398617
Correct output: 19.014261193   | Program output: -39.985738807 
Correct output: -76.5652234606 | Program output: -63.5652234606
Correct output: -92.2496022257 | Program output: -105.2496022257
Correct output: -9.7264396507  | Program output: -68.7264396507
Correct output: -74.5951028043 | Program output: 2.4048971957  
Correct output: -111.2224067056 | Program output: -90.2224067056
Correct output: 25.2029289086  | Program output: 0.2029289086  
Correct output: -99.7779180651 | Program output: -19.7779180651
Correct output: 23.3238574914  | Program output: 18.3238574914 
Correct output: -81.9975425787 | Program output: -31.9975425787
Correct output: -132.3840059284 | Program output: -69.3840059284
Correct output: -21.0593840301 | Program output: 53.9406159699 
Correct output: -85.8056758937 | Program output: -71.8056758937
Correct output: -149.9116694043 | Program output: -101.9116694043
Correct output: -50.3143322102 | Program output: 31.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth)
Errors: [91.0 11 12.0 2 14.0 2 4.0 1 34.0 2 35.0 3 86.0 13 14.0 2 52.0 3 55.0 12 59.0 11 13.0 2 13.0 3 59.0 2 77.0 12 21.0 3 25.0 2 80.0 1 5.0 2 50.0 1 63.0 3 75.0 13 14.0 2 48.0 2 82.0 13]
Total: 1204.0
Mean: 24.08
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2706.1911985
Median total errors in population: 1211.0
Error averages by case: (144.26299500000002 11.111 72.3074201 2.846 82.66378029999997 2.532 56.64054419999998 1.907 83.76569560000002 2.558 85.17913289999998 3.303 140.2963624 13.188 83.40358959999999 2.825 118.6756013 3.781 111.4112349 12.251 114.97459250000001 12.209 81.8400261 2.819 73.72958229999998 3.147 114.80990519999997 2.786 131.5520184 12.176 89.72578119999999 3.822 73.99079069999998 2.354 143.89472059999994 2.84 55.761591700000004 1.449 115.9991576 2.836 128.7338984 3.494 129.52163580000007 13.141 82.89665930000001 2.516 115.17406990000002 3.773 136.35941250000005 12.957)
Error minima by case: (2.2163 8 5.0 2 14.0 1 0.0 0 2.1384 1 28.0 1 23.2737 8 14.0 2 52.0 2 22.8575 8 13.8453 9 13.0 1 6.0 1 3.9006 2 47.1902 7 21.0 3 9.0 1 80.0 1 0.0 0 50.0 1 63.0 2 15.2336 8 14.0 1 48.0 2 44.4885 8)
Average genome size in population (length): 64.812
Average program size in population (points): 65.812
Average percent parens in population: 0.016
Minimum age in population: 14.171875
Maximum age in population: 18.134765625
Average age in population: 16.3985009765625
Median age in population: 16.46044921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.051
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 18003185
--- Timings ---
Current time: 1529615322302 milliseconds
Total Time:          47.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.7 seconds, 37.0%
Fitness Testing:     23.4 seconds, 48.8%
Report:               6.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 56015.0
Test mean error for best: 28.00750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -83.614723858 
Correct output: -58.7779066602 | Program output: -70.7779066602
Correct output: -70.4544341591 | Program output: -56.4544341591
Correct output: 48.0303159228  | Program output: 44.0303159228 
Correct output: 81.5444045338  | Program output: 47.5444045338 
Correct output: 107.605181994  | Program output: 72.605181994  
Correct output: 56.1323198243  | Program output: -29.8676801757
Correct output: -119.511081127 | Program output: -105.511081127
Correct output: -137.6953004708 | Program output: -85.6953004708
Correct output: 28.0264601383  | Program output: -26.9735398617
Correct output: 19.014261193   | Program output: -39.985738807 
Correct output: -76.5652234606 | Program output: -63.5652234606
Correct output: -92.2496022257 | Program output: -105.2496022257
Correct output: -9.7264396507  | Program output: -68.7264396507
Correct output: -74.5951028043 | Program output: 2.4048971957  
Correct output: -111.2224067056 | Program output: -90.2224067056
Correct output: 25.2029289086  | Program output: 0.2029289086  
Correct output: -99.7779180651 | Program output: -19.7779180651
Correct output: 23.3238574914  | Program output: 18.3238574914 
Correct output: -81.9975425787 | Program output: -31.9975425787
Correct output: -132.3840059284 | Program output: -69.3840059284
Correct output: -21.0593840301 | Program output: 53.9406159699 
Correct output: -85.8056758937 | Program output: -71.8056758937
Correct output: -149.9116694043 | Program output: -101.9116694043
Correct output: -50.3143322102 | Program output: 31.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [91.0 11 12.0 2 14.0 2 4.0 1 34.0 2 35.0 3 86.0 13 14.0 2 52.0 3 55.0 12 59.0 11 13.0 2 13.0 3 59.0 2 77.0 12 21.0 3 25.0 2 80.0 1 5.0 2 50.0 1 63.0 3 75.0 13 14.0 2 48.0 2 82.0 13]
Total: 1204.0
Mean: 24.08
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2455.5607519000005
Median total errors in population: 1208.0
Error averages by case: (135.7383935 11.066 63.3806256 2.712 73.09327669999999 2.688 44.249719000000006 0.942 72.44262189999999 1.889 73.9945729 3.409 131.93586919999998 13.09 74.0309684 2.707 109.56634950000002 3.655 102.75248389999999 12.136 106.30471540000003 12.101 72.2934234 2.7 64.9412738 3.622 106.06634109999999 2.652 119.54496650000002 12.112 80.35395210000001 3.684 62.216240299999996 2.458 134.7751639 2.706 44.2936758 1.548 106.66058360000001 2.692 119.60499689999999 3.668 117.4905052 13.072 73.3871805 2.689 106.09377449999998 3.647 124.36307829999998 12.341)
Error minima by case: (0.2309 5 0.6356 2 11.0409 1 0.0 0 10.4755 1 27.0 2 14.9366 8 14.0 2 52.0 2 20.4103 8 11.3981 9 13.0 2 5.0 1 3.7724 2 15.1816 8 21.0 3 11.0 1 40.3644 1 0.0 0 22.584 1 63.0 2 15.1053 9 14.0 1 48.0 2 9.0992 8)
Average genome size in population (length): 62.562
Average program size in population (points): 63.562
Average percent parens in population: 0.016
Minimum age in population: 15.34765625
Maximum age in population: 19.79296875
Average age in population: 17.865294921875
Median age in population: 17.874755859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.042
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 19567260
--- Timings ---
Current time: 1529615325876 milliseconds
Total Time:          51.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.1 seconds, 37.0%
Fitness Testing:     25.2 seconds, 48.9%
Report:               7.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 56015.0
Test mean error for best: 28.00750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -83.614723858 
Correct output: -58.7779066602 | Program output: -70.7779066602
Correct output: -70.4544341591 | Program output: -56.4544341591
Correct output: 48.0303159228  | Program output: 44.0303159228 
Correct output: 81.5444045338  | Program output: 47.5444045338 
Correct output: 107.605181994  | Program output: 72.605181994  
Correct output: 56.1323198243  | Program output: -29.8676801757
Correct output: -119.511081127 | Program output: -105.511081127
Correct output: -137.6953004708 | Program output: -85.6953004708
Correct output: 28.0264601383  | Program output: -26.9735398617
Correct output: 19.014261193   | Program output: -39.985738807 
Correct output: -76.5652234606 | Program output: -63.5652234606
Correct output: -92.2496022257 | Program output: -105.2496022257
Correct output: -9.7264396507  | Program output: -68.7264396507
Correct output: -74.5951028043 | Program output: 2.4048971957  
Correct output: -111.2224067056 | Program output: -90.2224067056
Correct output: 25.2029289086  | Program output: 0.2029289086  
Correct output: -99.7779180651 | Program output: -19.7779180651
Correct output: 23.3238574914  | Program output: 18.3238574914 
Correct output: -81.9975425787 | Program output: -31.9975425787
Correct output: -132.3840059284 | Program output: -69.3840059284
Correct output: -21.0593840301 | Program output: 53.9406159699 
Correct output: -85.8056758937 | Program output: -71.8056758937
Correct output: -149.9116694043 | Program output: -101.9116694043
Correct output: -50.3143322102 | Program output: 31.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth)
Errors: [91.0 11 12.0 2 14.0 2 4.0 1 34.0 2 35.0 3 86.0 13 14.0 2 52.0 3 55.0 12 59.0 11 13.0 2 13.0 3 59.0 2 77.0 12 21.0 3 25.0 2 80.0 1 5.0 2 50.0 1 63.0 3 75.0 13 14.0 2 48.0 2 82.0 13]
Total: 1204.0
Mean: 24.08
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2509.3468274000006
Median total errors in population: 1208.0
Error averages by case: (133.97948520000006 11.072 62.328362299999995 2.828 73.19909959999997 2.816 52.94266590000002 1.009 79.33067880000002 1.945 80.97992860000001 3.684 130.24023119999998 13.117 74.58051540000001 2.83 109.93359060000002 3.757 101.03354600000003 12.181 104.56387489999999 12.085 72.46148870000002 2.816 64.1922188 3.737 104.42566210000001 2.761 126.7882348 12.124 80.7642212 3.803 68.6976363 2.731 134.5479746 2.766 53.16580720000002 1.89 106.5450151 2.751 119.82660469999999 3.779 124.5786477 13.091 73.63132890000003 2.808 106.61916809999997 3.684 131.6058407 12.32)
Error minima by case: (1.6998 8 4.0 1 14.0 1 0.0 0 5.1384 1 27.0 2 17.2228 10 14.0 2 52.0 2 5.0948 8 8.1456 7 13.0 1 5.0 1 2.9006 2 48.9595 8 21.0 3 11.0 1 80.0 1 0.0 0 50.0 1 63.0 2 14.2336 7 14.0 1 48.0 2 5.8028 8)
Average genome size in population (length): 61.949
Average program size in population (points): 62.949
Average percent parens in population: 0.016
Minimum age in population: 16.935546875
Maximum age in population: 21.16943359375
Average age in population: 19.3129736328125
Median age in population: 19.3572998046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.046
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 21116010
--- Timings ---
Current time: 1529615329616 milliseconds
Total Time:          55.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.5 seconds, 37.2%
Fitness Testing:     27.0 seconds, 49.0%
Report:               7.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 56015.0
Test mean error for best: 28.00750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -83.614723858 
Correct output: -58.7779066602 | Program output: -70.7779066602
Correct output: -70.4544341591 | Program output: -56.4544341591
Correct output: 48.0303159228  | Program output: 44.0303159228 
Correct output: 81.5444045338  | Program output: 47.5444045338 
Correct output: 107.605181994  | Program output: 72.605181994  
Correct output: 56.1323198243  | Program output: -29.8676801757
Correct output: -119.511081127 | Program output: -105.511081127
Correct output: -137.6953004708 | Program output: -85.6953004708
Correct output: 28.0264601383  | Program output: -26.9735398617
Correct output: 19.014261193   | Program output: -39.985738807 
Correct output: -76.5652234606 | Program output: -63.5652234606
Correct output: -92.2496022257 | Program output: -105.2496022257
Correct output: -9.7264396507  | Program output: -68.7264396507
Correct output: -74.5951028043 | Program output: 2.4048971957  
Correct output: -111.2224067056 | Program output: -90.2224067056
Correct output: 25.2029289086  | Program output: 0.2029289086  
Correct output: -99.7779180651 | Program output: -19.7779180651
Correct output: 23.3238574914  | Program output: 18.3238574914 
Correct output: -81.9975425787 | Program output: -31.9975425787
Correct output: -132.3840059284 | Program output: -69.3840059284
Correct output: -21.0593840301 | Program output: 53.9406159699 
Correct output: -85.8056758937 | Program output: -71.8056758937
Correct output: -149.9116694043 | Program output: -101.9116694043
Correct output: -50.3143322102 | Program output: 31.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_yank integer_shove in2 integer_dup float_sub integer_dup_times integer_add integer_yank integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth)
Errors: [91.0 11 12.0 2 14.0 2 4.0 1 34.0 2 35.0 3 86.0 13 14.0 2 52.0 3 55.0 12 59.0 11 13.0 2 13.0 3 59.0 2 77.0 12 21.0 3 25.0 2 80.0 1 5.0 2 50.0 1 63.0 3 75.0 13 14.0 2 48.0 2 82.0 13]
Total: 1204.0
Mean: 24.08
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3185.5806366000006
Median total errors in population: 1208.0
Error averages by case: (162.04873530000003 11.111 93.25684990000002 3.198 100.74881249999999 3.196 78.75664709999998 1.719 105.25179059999998 2.635 107.03729099999997 4.035 158.8273231 13.205 102.31601570000002 3.215 136.48776080000002 4.119 130.5500168 12.291 133.8580086 11.96 100.05952669999999 3.185 95.21683929999998 4.104 133.5163046 3.114 148.1958729 12.22 108.23647499999998 4.177 94.83880169999999 3.105 160.0305424 2.912 78.80379260000001 2.561 132.94205910000002 2.896 146.04625570000002 4.162 145.54467159999996 13.163 101.23473910000001 3.188 133.34454239999997 3.768 152.4819621 12.71)
Error minima by case: (6.7901 8 4.0 1 12.0 1 0.0 0 7.3125 1 27.0 2 18.0996 8 12.0 2 50.0 2 11.989 8 8.5466 9 11.0 1 5.0 1 0.0994 2 43.4344 7 19.0 3 11.0 1 68.6172 1 0.0 0 48.0 1 61.0 2 10.1013 9 12.0 1 46.0 2 7.1318 8)
Average genome size in population (length): 63.099
Average program size in population (points): 64.099
Average percent parens in population: 0.016
Minimum age in population: 17.9609375
Maximum age in population: 22.5709228515625
Average age in population: 20.7135986328125
Median age in population: 20.75579833984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.064
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 22693510
--- Timings ---
Current time: 1529615333371 milliseconds
Total Time:          58.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.9 seconds, 37.2%
Fitness Testing:     28.9 seconds, 49.0%
Report:               8.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 57071.0
Test mean error for best: 28.53550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -90.614723858 
Correct output: -58.7779066602 | Program output: -77.7779066602
Correct output: -70.4544341591 | Program output: -63.4544341591
Correct output: 48.0303159228  | Program output: 37.0303159228 
Correct output: 81.5444045338  | Program output: 40.5444045338 
Correct output: 107.605181994  | Program output: 65.605181994  
Correct output: 56.1323198243  | Program output: -36.8676801757
Correct output: -119.511081127 | Program output: -112.511081127
Correct output: -137.6953004708 | Program output: -92.6953004708
Correct output: 28.0264601383  | Program output: -33.9735398617
Correct output: 19.014261193   | Program output: -46.985738807 
Correct output: -76.5652234606 | Program output: -70.5652234606
Correct output: -92.2496022257 | Program output: -112.2496022257
Correct output: -9.7264396507  | Program output: -75.7264396507
Correct output: -74.5951028043 | Program output: -4.5951028043 
Correct output: -111.2224067056 | Program output: -97.2224067056
Correct output: 25.2029289086  | Program output: -6.7970710914 
Correct output: -99.7779180651 | Program output: -26.7779180651
Correct output: 23.3238574914  | Program output: 11.3238574914 
Correct output: -81.9975425787 | Program output: -38.9975425787
Correct output: -132.3840059284 | Program output: -76.3840059284
Correct output: -21.0593840301 | Program output: 46.9406159699 
Correct output: -85.8056758937 | Program output: -78.8056758937
Correct output: -149.9116694043 | Program output: -108.9116694043
Correct output: -50.3143322102 | Program output: 24.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth)
Errors: [98.0 12 19.0 2 7.0 2 11.0 2 41.0 2 42.0 3 93.0 12 7.0 1 45.0 3 62.0 13 66.0 12 6.0 1 20.0 2 66.0 2 70.0 1 14.0 3 32.0 12 73.0 2 12.0 2 43.0 2 56.0 3 68.0 13 7.0 2 41.0 2 75.0 13]
Total: 1198.0
Mean: 23.96
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2785.764024000001
Median total errors in population: 1204.0
Error averages by case: (147.99273479999997 11.085 78.67894829999997 3.064 83.40524029999999 3.069 64.08300889999997 2.044 90.4811248 2.996 92.57795960000003 3.929 145.02923869999998 13.146 85.26810250000003 3.076 119.92868300000004 3.999 116.29959370000003 12.205 119.6062886 11.391 82.74234619999999 3.06 80.85036339999998 3.975 119.02480750000002 2.985 130.5865947 12.089 91.2077868 4.05 79.61593170000003 3.024 143.52187399999994 2.295 63.93197410000002 2.958 116.02703969999999 2.273 129.56427090000003 4.043 127.12317890000001 13.095 83.98348019999997 3.046 116.81793189999995 3.176 134.2545208 13.088)
Error minima by case: (7.3853 8 6.0 1 7.0 1 0.0 0 2.1384 1 28.1991 2 1.8457 8 7.0 1 45.0 2 7.8788 9 14.1456 9 6.0 1 7.0 1 0.0994 2 58.1902 1 14.0 3 19.0 1 73.0 1 0.0 0 43.0 1 56.0 2 11.2336 9 7.0 1 41.0 2 11.8028 9)
Average genome size in population (length): 65.083
Average program size in population (points): 66.083
Average percent parens in population: 0.015
Minimum age in population: 19.3505859375
Maximum age in population: 24.01959228515625
Average age in population: 22.07870562744141
Median age in population: 22.14260864257812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.069
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 24320635
--- Timings ---
Current time: 1529615337372 milliseconds
Total Time:          62.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.2 seconds, 37.0%
Fitness Testing:     31.0 seconds, 49.3%
Report:               8.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 57071.0
Test mean error for best: 28.53550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -90.614723858 
Correct output: -58.7779066602 | Program output: -77.7779066602
Correct output: -70.4544341591 | Program output: -63.4544341591
Correct output: 48.0303159228  | Program output: 37.0303159228 
Correct output: 81.5444045338  | Program output: 40.5444045338 
Correct output: 107.605181994  | Program output: 65.605181994  
Correct output: 56.1323198243  | Program output: -36.8676801757
Correct output: -119.511081127 | Program output: -112.511081127
Correct output: -137.6953004708 | Program output: -92.6953004708
Correct output: 28.0264601383  | Program output: -33.9735398617
Correct output: 19.014261193   | Program output: -46.985738807 
Correct output: -76.5652234606 | Program output: -70.5652234606
Correct output: -92.2496022257 | Program output: -112.2496022257
Correct output: -9.7264396507  | Program output: -75.7264396507
Correct output: -74.5951028043 | Program output: -4.5951028043 
Correct output: -111.2224067056 | Program output: -97.2224067056
Correct output: 25.2029289086  | Program output: -6.7970710914 
Correct output: -99.7779180651 | Program output: -26.7779180651
Correct output: 23.3238574914  | Program output: 11.3238574914 
Correct output: -81.9975425787 | Program output: -38.9975425787
Correct output: -132.3840059284 | Program output: -76.3840059284
Correct output: -21.0593840301 | Program output: 46.9406159699 
Correct output: -85.8056758937 | Program output: -78.8056758937
Correct output: -149.9116694043 | Program output: -108.9116694043
Correct output: -50.3143322102 | Program output: 24.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth)
Errors: [98.0 12 19.0 2 7.0 2 11.0 2 41.0 2 42.0 3 93.0 12 7.0 1 45.0 3 62.0 13 66.0 12 6.0 1 20.0 2 66.0 2 70.0 1 14.0 3 32.0 12 73.0 2 12.0 2 43.0 2 56.0 3 68.0 13 7.0 2 41.0 2 75.0 13]
Total: 1198.0
Mean: 23.96
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2996.1522517000008
Median total errors in population: 1204.0
Error averages by case: (159.05737 11.133 89.53397570000001 3.072 91.4398176 3.06 71.06528759999998 2.128 98.8595458 3.044 100.8311861 3.92 155.77691419999996 13.175 92.99798820000002 3.071 127.4434887 4.008 127.34759149999998 12.25 130.70749650000002 11.349 90.74209830000001 3.044 91.4925373 3.994 130.20611969999996 2.983 135.7117776 11.855 98.9730063 4.04 87.80365320000001 3.38 151.19330480000002 2.243 70.93634799999998 3.025 123.89118480000003 2.226 137.0769446 4.037 133.33041200000005 13.105 91.9278961 3.058 124.26432100000002 3.128 140.08098610000005 13.133)
Error minima by case: (7.4618 8 4.4542 1 7.0 1 0.0 0 11.6888 1 14.372 2 5.9162 9 7.0 1 45.0 2 17.1552 8 19.0908 8 6.0 1 6.0 1 0.2276 1 20.2714 1 14.0 2 5.0 1 45.4542 1 0.0 0 27.6738 1 56.0 2 8.2336 9 7.0 1 41.0 2 0.5714 8)
Average genome size in population (length): 65.287
Average program size in population (points): 66.287
Average percent parens in population: 0.015
Minimum age in population: 20.3765869140625
Maximum age in population: 25.40811157226562
Average age in population: 23.53692739868164
Median age in population: 23.57630920410156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 56
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.068
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 25952835
--- Timings ---
Current time: 1529615341063 milliseconds
Total Time:          66.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.5 seconds, 36.8%
Fitness Testing:     32.9 seconds, 49.3%
Report:               9.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 57700.0
Test mean error for best: 28.85000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -93.614723858 
Correct output: -58.7779066602 | Program output: -80.7779066602
Correct output: -70.4544341591 | Program output: -66.4544341591
Correct output: 48.0303159228  | Program output: 34.0303159228 
Correct output: 81.5444045338  | Program output: 37.5444045338 
Correct output: 107.605181994  | Program output: 62.605181994  
Correct output: 56.1323198243  | Program output: -39.8676801757
Correct output: -119.511081127 | Program output: -115.511081127
Correct output: -137.6953004708 | Program output: -95.6953004708
Correct output: 28.0264601383  | Program output: -36.9735398617
Correct output: 19.014261193   | Program output: -49.985738807 
Correct output: -76.5652234606 | Program output: -73.5652234606
Correct output: -92.2496022257 | Program output: -115.2496022257
Correct output: -9.7264396507  | Program output: -78.7264396507
Correct output: -74.5951028043 | Program output: -7.5951028043 
Correct output: -111.2224067056 | Program output: -100.2224067056
Correct output: 25.2029289086  | Program output: -9.7970710914 
Correct output: -99.7779180651 | Program output: -29.7779180651
Correct output: 23.3238574914  | Program output: 8.3238574914  
Correct output: -81.9975425787 | Program output: -41.9975425787
Correct output: -132.3840059284 | Program output: -79.3840059284
Correct output: -21.0593840301 | Program output: 43.9406159699 
Correct output: -85.8056758937 | Program output: -81.8056758937
Correct output: -149.9116694043 | Program output: -111.9116694043
Correct output: -50.3143322102 | Program output: 21.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_mod} {:instruction tag_float_517} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop integer_sub float_inc integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_float float_mod tag_float_517 integer_add float_frominteger integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth)
Errors: [101.0 11 22.0 2 4.0 2 14.0 2 44.0 2 45.0 3 96.0 13 4.0 1 42.0 3 65.0 13 69.0 11 3.0 1 23.0 3 69.0 2 67.0 1 11.0 2 35.0 12 70.0 1 15.0 2 40.0 1 53.0 3 65.0 13 4.0 1 38.0 2 72.0 13]
Total: 1191.0
Mean: 23.82
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3077.1828898
Median total errors in population: 1204.0
Error averages by case: (163.36137099999993 11.154 94.70480859999999 3.14 94.8868988 3.106 72.4287575 2.215 100.12228510000001 3.017 101.96888009999999 3.913 160.07211639999994 13.124 96.70184530000003 2.995 130.89008090000004 4.067 131.79969089999997 12.376 135.1523957 11.483 94.23527740000003 3.036 96.83499050000002 4.017 134.73134109999998 3.04 138.67304069999997 10.235 102.56315919999992 4.108 92.4228638 4.902 154.1865365 2.448 72.44210319999998 3.022 127.07051820000004 2.432 140.34200609999996 4.051 133.49099349999997 13.121 95.45116390000001 3.087 127.81004570000002 3.2 140.4667197 13.084)
Error minima by case: (6.3853 7 6.0 1 0.7351 1 0.0 0 1.2749 1 27.3357 2 15.2027 9 0.7351 1 37.2649 2 2.4419 8 18.0143 8 1.7351 1 7.0 1 0.0355 1 51.4233 1 6.2649 1 5.0 1 65.2649 1 1.0 1 35.2649 1 48.2649 2 9.9226 8 0.7351 1 33.2649 1 7.9996 8)
Average genome size in population (length): 66.529
Average program size in population (points): 67.529
Average percent parens in population: 0.015
Minimum age in population: 21.3765869140625
Maximum age in population: 26.84379577636719
Average age in population: 25.04550099182129
Median age in population: 25.09332275390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.068
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 27616060
--- Timings ---
Current time: 1529615344784 milliseconds
Total Time:          70.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.9 seconds, 36.8%
Fitness Testing:     34.7 seconds, 49.4%
Report:               9.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 58543.0
Test mean error for best: 29.27150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -97.614723858 
Correct output: -58.7779066602 | Program output: -84.7779066602
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 30.0303159228 
Correct output: 81.5444045338  | Program output: 33.5444045338 
Correct output: 107.605181994  | Program output: 58.605181994  
Correct output: 56.1323198243  | Program output: -43.8676801757
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -40.9735398617
Correct output: 19.014261193   | Program output: -53.985738807 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -119.2496022257
Correct output: -9.7264396507  | Program output: -82.7264396507
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: -13.7970710914
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 4.3238574914  
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 39.9406159699 
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 17.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973} {:instruction integer_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_swap integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973 integer_stackdepth)
Errors: [105.0 11 26.0 2 0.0 0 18.0 2 48.0 2 49.0 3 100.0 13 0.0 0 38.0 3 69.0 13 73.0 12 1.0 1 27.0 3 73.0 2 63.0 2 7.0 2 39.0 13 66.0 2 19.0 2 36.0 2 49.0 2 61.0 13 0.0 0 34.0 2 68.0 13]
Total: 1189.0
Mean: 23.78
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3364.531314800001
Median total errors in population: 1201.0
Error averages by case: (175.5331063999999 11.348 108.5555217 3.293 102.3417788 3.24 86.7509425 2.55 115.6886009 2.967 117.70420519999999 4.048 172.65667329999994 13.09 104.596336 2.738 138.21603209999998 4.199 144.68538139999998 12.889 147.8241287 12.026 101.75915900000003 3.018 111.12046170000004 4.062 147.44385619999997 3.22 156.9175701000001 5.414 110.23741719999998 4.242 118.67025150000003 9.686 160.6348717 3.073 86.30374049999999 3.147 133.92874980000005 3.073 147.4670759 4.101 141.13312960000007 13.158 103.05555849999999 3.173 135.31986859999998 3.376 147.90089750000004 12.955)
Error minima by case: (3.6147 8 5.0 1 0.0 0 0.0 0 27.0 1 28.0 2 13.7939 9 0.0 0 34.0 2 3.7432 8 0.8544 8 1.0 1 6.0 1 0.0131 1 50.3644 1 3.0 1 14.2029 1 62.0 1 0.0 0 32.0 1 45.0 2 4.8816 9 0.0 0 30.0 1 1.3803 8)
Average genome size in population (length): 72.805
Average program size in population (points): 73.805
Average percent parens in population: 0.014
Minimum age in population: 23.62088012695312
Maximum age in population: 28.44901275634766
Average age in population: 26.64109303283691
Median age in population: 26.70415115356445
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.098
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 29436260
--- Timings ---
Current time: 1529615348725 milliseconds
Total Time:          74.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.3 seconds, 36.8%
Fitness Testing:     36.7 seconds, 49.5%
Report:              10.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 58543.0
Test mean error for best: 29.27150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -97.614723858 
Correct output: -58.7779066602 | Program output: -84.7779066602
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 30.0303159228 
Correct output: 81.5444045338  | Program output: 33.5444045338 
Correct output: 107.605181994  | Program output: 58.605181994  
Correct output: 56.1323198243  | Program output: -43.8676801757
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -40.9735398617
Correct output: 19.014261193   | Program output: -53.985738807 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -119.2496022257
Correct output: -9.7264396507  | Program output: -82.7264396507
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: -13.7970710914
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 4.3238574914  
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 39.9406159699 
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 17.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_div integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [105.0 11 26.0 2 0.0 0 18.0 2 48.0 2 49.0 3 100.0 13 0.0 0 38.0 3 69.0 13 73.0 12 1.0 1 27.0 3 73.0 2 63.0 2 7.0 2 39.0 13 66.0 2 19.0 2 36.0 2 49.0 2 61.0 13 0.0 0 34.0 2 68.0 13]
Total: 1189.0
Mean: 23.78
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3094.5715078
Median total errors in population: 1198.0
Error averages by case: (165.92527119999997 11.459 98.2749656 3.22 88.17695359999996 3.213 82.3077479 2.824 111.05475699999998 2.881 113.32385649999996 4.063 163.40213419999995 12.965 90.710042 2.384 124.63629250000002 4.12 135.0433253 13.102 138.16025090000002 12.101 87.63413340000002 2.78 100.86479010000001 3.943 137.47626970000002 3.139 143.08586540000007 3.147 96.3222792 4.022 108.8432181 11.749 147.01307669999997 3.183 81.2242371 3.202 120.0180249 3.163 133.9295884 4.174 131.17247020000005 13.031 88.95072200000001 3.006 121.79410329999999 3.265 138.35013260000005 12.741)
Error minima by case: (6.7937 8 4.0 1 0.0 0 1.0 1 4.1384 1 27.0 2 21.2737 9 0.0 0 33.0 2 0.2708 7 0.5519 6 0.0 0 5.0 1 0.4901 1 2.8095 1 2.0 1 17.0 1 22.3733 1 1.0 1 4.5929 1 44.0 2 0.67 8 0.0 0 29.0 1 0.4128 8)
Average genome size in population (length): 77.818
Average program size in population (points): 78.818
Average percent parens in population: 0.013
Minimum age in population: 25.72055053710938
Maximum age in population: 29.97332000732422
Average age in population: 28.09393774032593
Median age in population: 28.12068367004395
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.105
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 31381960
--- Timings ---
Current time: 1529615352868 milliseconds
Total Time:          78.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        28.8 seconds, 36.7%
Fitness Testing:     38.9 seconds, 49.6%
Report:              10.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 58543.0
Test mean error for best: 29.27150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -97.614723858 
Correct output: -58.7779066602 | Program output: -84.7779066602
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 30.0303159228 
Correct output: 81.5444045338  | Program output: 33.5444045338 
Correct output: 107.605181994  | Program output: 58.605181994  
Correct output: 56.1323198243  | Program output: -43.8676801757
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -40.9735398617
Correct output: 19.014261193   | Program output: -53.985738807 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -119.2496022257
Correct output: -9.7264396507  | Program output: -82.7264396507
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: -13.7970710914
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 4.3238574914  
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 39.9406159699 
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 17.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_dec})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_dec)
Errors: [105.0 11 26.0 2 0.0 0 18.0 2 48.0 2 49.0 3 100.0 13 0.0 0 38.0 3 69.0 13 73.0 12 1.0 1 27.0 3 73.0 2 63.0 2 7.0 2 39.0 13 66.0 2 19.0 2 36.0 2 49.0 2 61.0 13 0.0 0 34.0 2 68.0 13]
Total: 1189.0
Mean: 23.78
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2919.6908142
Median total errors in population: 1192.0
Error averages by case: (162.6828335 11.411 93.94457039999996 3.101 80.20107209999998 3.06 74.6384917 3.033 103.58564290000002 3.056 105.96509679999994 3.913 159.14071299999992 13.027 82.77117700000002 2.239 116.85398210000004 3.879 131.6200727 12.983 134.7285447 11.855 79.73838419999998 2.298 96.53182819999999 3.977 134.12522590000003 2.984 134.43047770000004 2.858 88.3556448 3.463 105.274061 12.252 139.28837660000002 2.9 73.97685230000003 3.143 112.15750760000003 2.877 126.1890098 4.034 118.88008410000002 12.838 80.89781119999998 2.462 114.01448119999998 3.125 126.04187270000006 12.889)
Error minima by case: (6.3853 8 10.0 1 0.0 0 2.0 1 15.1384 1 33.0 2 6.2737 8 0.0 0 31.0 2 8.5581 8 0.0174 6 0.0 0 2.0726 2 0.0994 1 19.7271 1 0.0 0 23.0 1 5.4558 1 3.0 1 12.3246 1 38.0618 2 0.7664 8 0.0 0 27.0 1 2.3254 8)
Average genome size in population (length): 77.905
Average program size in population (points): 78.905
Average percent parens in population: 0.013
Minimum age in population: 27.38897323608398
Maximum age in population: 31.29976844787598
Average age in population: 29.53519474983215
Median age in population: 29.59595775604248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.098
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 33330060
--- Timings ---
Current time: 1529615356783 milliseconds
Total Time:          82.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.1 seconds, 36.6%
Fitness Testing:     40.9 seconds, 49.7%
Report:              11.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 58543.0
Test mean error for best: 29.27150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -97.614723858 
Correct output: -58.7779066602 | Program output: -84.7779066602
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 30.0303159228 
Correct output: 81.5444045338  | Program output: 33.5444045338 
Correct output: 107.605181994  | Program output: 58.605181994  
Correct output: 56.1323198243  | Program output: -43.8676801757
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -40.9735398617
Correct output: 19.014261193   | Program output: -53.985738807 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -119.2496022257
Correct output: -9.7264396507  | Program output: -82.7264396507
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: -13.7970710914
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 4.3238574914  
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 39.9406159699 
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 17.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_dup_times float_dec float_dup integer_sub 86 integer_div integer_dec float_stackdepth)
Errors: [105.0 11 26.0 2 0.0 0 18.0 2 48.0 2 49.0 3 100.0 13 0.0 0 38.0 3 69.0 13 73.0 12 1.0 1 27.0 3 73.0 2 63.0 2 7.0 2 39.0 13 66.0 2 19.0 2 36.0 2 49.0 2 61.0 13 0.0 0 34.0 2 68.0 13]
Total: 1189.0
Mean: 23.78
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3091.9509198
Median total errors in population: 1191.0
Error averages by case: (169.7586516 11.204 102.50045679999998 3.283 84.87391919999997 2.95 86.42973189999994 3.217 114.2524832 3.234 116.68821799999999 3.792 167.00945350000003 13.05 87.56627789999999 2.298 121.17417409999995 3.838 138.79849080000002 12.703 141.95024550000002 11.838 84.71762170000001 2.388 105.2160632 4.155 141.4400775 3.153 139.35056869999994 3.154 92.9118517 3.386 112.64291350000003 12.542 143.34649819999998 3.073 85.53613260000004 3.348 116.38753930000001 3.039 130.41541619999998 4.053 126.37659470000003 12.645 85.72220159999999 2.276 118.39746800000002 3.332 133.53487040000002 13.002)
Error minima by case: (7.1275 8 5.0 1 0.0 0 0.0 0 18.1384 1 28.0 2 1.2737 8 0.0 0 26.0 1 4.3454 8 0.7904 6 0.0 0 6.0 1 0.0131 1 48.6829 1 0.0 0 1.5218 1 54.0 1 0.0 0 24.0 1 37.0 2 0.2336 8 0.0 0 22.0 1 0.1332 7)
Average genome size in population (length): 80.642
Average program size in population (points): 81.642
Average percent parens in population: 0.012
Minimum age in population: 28.54999160766602
Maximum age in population: 33.09284782409668
Average age in population: 30.96844607925415
Median age in population: 31.01340103149414
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.11
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 35346460
--- Timings ---
Current time: 1529615361141 milliseconds
Total Time:          86.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.6 seconds, 36.5%
Fitness Testing:     43.2 seconds, 50.0%
Report:              11.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 58543.0
Test mean error for best: 29.27150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -97.614723858 
Correct output: -58.7779066602 | Program output: -84.7779066602
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 30.0303159228 
Correct output: 81.5444045338  | Program output: 33.5444045338 
Correct output: 107.605181994  | Program output: 58.605181994  
Correct output: 56.1323198243  | Program output: -43.8676801757
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -40.9735398617
Correct output: 19.014261193   | Program output: -53.985738807 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -119.2496022257
Correct output: -9.7264396507  | Program output: -82.7264396507
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: -13.7970710914
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 4.3238574914  
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 39.9406159699 
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 17.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction 86} {:instruction integer_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop integer_sub float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_dec float_inc integer_sub 86 integer_div integer_dec float_stackdepth float_flush)
Errors: [105.0 11 26.0 2 0.0 0 18.0 2 48.0 2 49.0 3 100.0 13 0.0 0 38.0 3 69.0 13 73.0 12 1.0 1 27.0 3 73.0 2 63.0 2 7.0 2 39.0 13 66.0 2 19.0 2 36.0 2 49.0 2 61.0 13 0.0 0 34.0 2 68.0 13]
Total: 1189.0
Mean: 23.78
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3387.658041700001
Median total errors in population: 1190.0
Error averages by case: (182.23470869999994 11.267 116.16817160000001 3.513 96.24474510000003 2.469 97.73839969999999 3.446 125.26749570000004 3.435 127.60800209999998 4.085 180.3680351 13.088 99.03506209999999 2.167 132.12056840000008 4.17 152.4166897 12.859 156.34155600000005 12.083 96.79065829999998 2.583 118.90489649999999 4.331 154.24289069999998 3.383 149.80769570000007 3.526 104.24487760000001 3.552 126.7261578 12.935 153.79366449999995 3.513 98.74449600000001 3.567 127.25201430000004 3.465 141.12751190000006 3.921 133.82317790000002 12.797 97.1248325 2.135 129.43842599999996 3.558 141.15430780000005 13.091)
Error minima by case: (7.3853 7 7.9146 1 0.0 0 1.0 1 31.0 1 32.0 2 12.9411 8 0.0 0 26.0 1 0.6705 8 9.6827 7 0.0 0 10.0 2 0.8142 1 7.9026 1 0.0 0 3.494 2 33.0854 1 2.0 1 15.305 1 37.0 2 0.0585 8 0.0 0 22.0 1 10.7164 9)
Average genome size in population (length): 84.308
Average program size in population (points): 85.308
Average percent parens in population: 0.012
Minimum age in population: 29.54999160766602
Maximum age in population: 34.40675115585327
Average age in population: 32.46324159574509
Median age in population: 32.48896527290344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.103
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 37454285
--- Timings ---
Current time: 1529615365071 milliseconds
Total Time:          90.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.9 seconds, 36.3%
Fitness Testing:     45.4 seconds, 50.1%
Report:              12.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 58543.0
Test mean error for best: 29.27150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -97.614723858 
Correct output: -58.7779066602 | Program output: -84.7779066602
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 30.0303159228 
Correct output: 81.5444045338  | Program output: 33.5444045338 
Correct output: 107.605181994  | Program output: 58.605181994  
Correct output: 56.1323198243  | Program output: -43.8676801757
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -40.9735398617
Correct output: 19.014261193   | Program output: -53.985738807 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -119.2496022257
Correct output: -9.7264396507  | Program output: -82.7264396507
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: -13.7970710914
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 4.3238574914  
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 39.9406159699 
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 17.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction in2} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_1044} {:instruction integer_stackdepth})
Best program: (integer_div integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup in2 float_inc integer_sub float_yankdup float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_1044 integer_stackdepth)
Errors: [105.0 11 26.0 2 0.0 0 18.0 2 48.0 2 49.0 3 100.0 13 0.0 0 38.0 3 69.0 13 73.0 12 1.0 1 27.0 3 73.0 2 63.0 2 7.0 2 39.0 13 66.0 2 19.0 2 36.0 2 49.0 2 61.0 13 0.0 0 34.0 2 68.0 13]
Total: 1189.0
Mean: 23.78
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2896.4942323
Median total errors in population: 1189.0
Error averages by case: (163.0251714 11.256 95.36290329999999 3.282 76.1582905 1.806 80.0698045 3.252 106.5942758 3.242 109.00711399999997 4.115 161.07461110000003 13.074 79.18694670000002 1.742 112.64026710000005 4.166 132.44290920000003 13.081 135.48219840000002 12.133 77.1543207 2.373 98.2999486 4.133 134.37253500000006 3.219 130.5135895 3.274 84.3257448 3.376 106.13868179999999 12.913 134.6344321 3.302 78.7530536 3.432 107.50395050000002 3.265 121.78049260000002 3.461 116.26754360000001 13.009 77.08315790000002 1.711 109.8995469 3.358 123.71174270000002 13.036)
Error minima by case: (7.3853 7 3.3354 1 0.0 0 0.0 0 3.5444 1 27.0 2 19.1653 7 0.0 0 19.0 1 0.7814 8 4.363 8 0.0 0 5.0 1 0.1652 1 12.4817 1 0.0 0 2.0422 2 37.6646 1 1.0 1 8.0025 1 16.384 1 0.0594 8 0.0 0 15.0 1 6.7059 1)
Average genome size in population (length): 86.002
Average program size in population (points): 87.002
Average percent parens in population: 0.012
Minimum age in population: 31.9442024230957
Maximum age in population: 36.00967669487
Average age in population: 33.90348383617401
Median age in population: 33.90950655937195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.115
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 39604585
--- Timings ---
Current time: 1529615369176 milliseconds
Total Time:          94.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.2 seconds, 36.1%
Fitness Testing:     47.6 seconds, 50.3%
Report:              12.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 58543.0
Test mean error for best: 29.27150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -97.614723858 
Correct output: -58.7779066602 | Program output: -84.7779066602
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 30.0303159228 
Correct output: 81.5444045338  | Program output: 33.5444045338 
Correct output: 107.605181994  | Program output: 58.605181994  
Correct output: 56.1323198243  | Program output: -43.8676801757
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -40.9735398617
Correct output: 19.014261193   | Program output: -53.985738807 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -119.2496022257
Correct output: -9.7264396507  | Program output: -82.7264396507
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: -13.7970710914
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 4.3238574914  
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 39.9406159699 
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 17.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_div integer_flush float_yankdup float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub integer_yankdup float_yank integer_stackdepth float_dec in1 float_dec float_dec integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_dup_times float_yankdup float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973)
Errors: [105.0 11 26.0 2 0.0 0 18.0 2 48.0 2 49.0 3 100.0 13 0.0 0 38.0 3 69.0 13 73.0 12 1.0 1 27.0 3 73.0 2 63.0 2 7.0 2 39.0 13 66.0 2 19.0 2 36.0 2 49.0 2 61.0 13 0.0 0 34.0 2 68.0 13]
Total: 1189.0
Mean: 23.78
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3249.2937678000008
Median total errors in population: 1189.0
Error averages by case: (176.33606010000005 11.318 111.23769580000001 3.505 90.57657219999999 2.042 93.24490260000002 3.444 120.92025990000002 3.447 123.31573400000003 4.276 174.10461129999993 13.133 93.64218100000001 1.957 126.80748660000005 4.364 146.19456890000004 13.107 149.1848113 12.149 91.52170039999997 2.567 113.26825619999998 4.345 148.2891186 3.423 143.93775379999994 3.545 98.81761529999999 3.592 120.4013118 12.899 148.02393719999998 3.49 92.38356320000005 3.561 121.47078809999998 3.483 135.77533929999998 3.657 128.9385949 13.066 91.48441890000002 1.93 124.26393820000001 3.565 136.14954820000003 13.138)
Error minima by case: (1.8067 7 5.0 1 0.0 0 1.0 1 27.0 1 28.0 2 3.1635 7 0.0 0 27.9882 1 0.5611 8 4.0555 8 0.0 0 4.302 1 0.1652 1 13.3525 1 0.0 0 9.8174 1 0.0435 1 0.0 0 5.9501 1 32.6496 2 0.7444 7 0.0 0 24.0 1 6.1386 8)
Average genome size in population (length): 85.908
Average program size in population (points): 86.908
Average percent parens in population: 0.012
Minimum age in population: 32.9442024230957
Maximum age in population: 37.24338400363922
Average age in population: 35.27268901276588
Median age in population: 35.33402281999588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.112
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 41752685
--- Timings ---
Current time: 1529615373525 milliseconds
Total Time:          98.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.6 seconds, 36.0%
Fitness Testing:     49.9 seconds, 50.4%
Report:              13.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 58543.0
Test mean error for best: 29.27150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -97.614723858 
Correct output: -58.7779066602 | Program output: -84.7779066602
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 30.0303159228 
Correct output: 81.5444045338  | Program output: 33.5444045338 
Correct output: 107.605181994  | Program output: 58.605181994  
Correct output: 56.1323198243  | Program output: -43.8676801757
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -40.9735398617
Correct output: 19.014261193   | Program output: -53.985738807 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -119.2496022257
Correct output: -9.7264396507  | Program output: -82.7264396507
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: -13.7970710914
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 4.3238574914  
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 39.9406159699 
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 17.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction float_sin} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_min} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction float_flush} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup})
Best program: (integer_div float_yankdup float_flush float_dec float_sin integer_sub integer_fromfloat integer_flush integer_min float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult integer_pop print_integer float_sub float_sub float_flush float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_frominteger float_dec integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup)
Errors: [105.0 11 26.0 2 0.0 0 18.0 2 48.0 2 49.0 3 100.0 13 0.0 0 38.0 3 69.0 13 73.0 12 1.0 1 27.0 3 73.0 2 63.0 2 7.0 2 39.0 13 66.0 2 19.0 2 36.0 2 49.0 2 61.0 13 0.0 0 34.0 2 68.0 13]
Total: 1189.0
Mean: 23.78
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3441.9234704
Median total errors in population: 1189.0
Error averages by case: (184.06827549999997 11.294 119.91449109999996 3.624 99.49818140000004 2.164 98.51654160000002 3.542 126.02104030000001 3.535 128.72870989999996 4.4 181.90537940000002 13.098 103.1757431 2.096 135.65153340000003 4.489 154.3575318 13.084 157.39550560000004 12.132 100.60877079999999 2.708 123.30368540000005 4.45 156.5810642 3.531 150.7305324 3.65 107.88133049999996 3.72 128.07904299999998 12.9 155.9757382 3.616 97.2050165 3.713 129.731165 3.598 144.27396050000002 3.782 133.0364533 13.051 100.54862329999997 2.072 133.11670409999996 3.68 140.5694501 13.12)
Error minima by case: (4.3662 7 7.0 1 0.0 0 0.0 0 16.8639 1 26.4061 2 2.0 6 0.0 0 24.0 1 1.9651 8 0.3847 7 0.0 0 8.0 2 0.1363 1 25.2053 1 0.0 0 0.4226 1 50.3881 1 0.0 0 22.0 1 35.0 2 0.0991 7 0.0 0 20.0 1 0.9245 8)
Average genome size in population (length): 86.43
Average program size in population (points): 87.43
Average percent parens in population: 0.012
Minimum age in population: 34.01656723022461
Maximum age in population: 38.76109969615936
Average age in population: 36.73647065073252
Median age in population: 36.7630076110363
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.127
Error (vector) diversity:			 0.14
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 43913660
--- Timings ---
Current time: 1529615377564 milliseconds
Total Time:         103.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.9 seconds, 35.8%
Fitness Testing:     52.1 seconds, 50.5%
Report:              14.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 60653.98860000003
Test mean error for best: 30.32699
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -9.9577800452 
Correct output: -58.7779066602 | Program output: -9.9577800452 
Correct output: -70.4544341591 | Program output: -75.4544341591
Correct output: 48.0303159228  | Program output: 25.0303159228 
Correct output: 81.5444045338  | Program output: -9.9577800452 
Correct output: 107.605181994  | Program output: -9.9577800452 
Correct output: 56.1323198243  | Program output: -9.9577800452 
Correct output: -119.511081127 | Program output: -124.511081127
Correct output: -137.6953004708 | Program output: -104.6953004708
Correct output: 28.0264601383  | Program output: -9.9577800452 
Correct output: 19.014261193   | Program output: -9.9577800452 
Correct output: -76.5652234606 | Program output: -82.5652234606
Correct output: -92.2496022257 | Program output: -9.9577800452 
Correct output: -9.7264396507  | Program output: -9.9577800452 
Correct output: -74.5951028043 | Program output: -16.5951028043
Correct output: -111.2224067056 | Program output: -109.2224067056
Correct output: 25.2029289086  | Program output: -9.9577800452 
Correct output: -99.7779180651 | Program output: -38.7779180651
Correct output: 23.3238574914  | Program output: -0.6761425086 
Correct output: -81.9975425787 | Program output: -50.9975425787
Correct output: -132.3840059284 | Program output: -88.3840059284
Correct output: -21.0593840301 | Program output: 34.9406159699 
Correct output: -85.8056758937 | Program output: -90.8056758937
Correct output: -149.9116694043 | Program output: -120.9116694043
Correct output: -50.3143322102 | Program output: 12.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction integer_sub} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush integer_sub 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_shove float_sin integer_stackdepth integer_yank float_sub float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973)
Errors: [17.3431 9 48.8201 9 5.0 1 23.0 2 91.5022 10 117.563 12 66.0901 12 5.0 2 33.0 2 37.9842 11 28.972 11 6.0 2 82.2918 10 0.2313 10 58.0 2 2.0 2 35.1607 11 61.0 2 24.0 12 31.0 2 44.0 3 56.0 13 5.0 2 29.0 2 63.0 13]
Total: 1137.9585
Mean: 22.75917
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3618.3298346000006
Median total errors in population: 1189.0
Error averages by case: (189.65472649999992 11.387 124.92866709999997 3.74 104.50934979999998 2.313 111.43135380000002 3.68 138.74605139999997 3.673 141.4139755 4.538 187.9567086999999 13.174 107.73181359999998 2.207 140.0222387 4.576 160.36443350000002 13.164 163.23199320000003 12.215 105.45315890000002 2.778 127.8953721 4.531 162.13414360000002 3.63 156.7923249000001 3.759 112.63578710000006 3.794 135.09880019999997 12.978 160.84434119999995 3.712 110.40520459999996 3.836 134.68973690000007 3.671 148.67865989999999 3.884 144.95977510000006 13.085 105.54273770000005 2.179 137.57292279999996 3.767 152.22755780000006 13.137)
Error minima by case: (7.5526 8 6.0 1 0.0 0 1.0 1 4.5444 1 28.6052 2 2.5124 7 0.0 0 19.0 1 4.8304 8 0.9826 8 0.0 0 6.3291 1 0.2313 1 10.3503 1 0.0 0 10.0167 1 1.1992 1 0.0 0 2.9479 1 15.384 1 8.0E-4 6 0.0 0 15.0 1 3.3254 1)
Average genome size in population (length): 86.937
Average program size in population (points): 87.937
Average percent parens in population: 0.012
Minimum age in population: 35.40138339996338
Maximum age in population: 40.3315469622612
Average age in population: 38.18571324017644
Median age in population: 38.2489197999239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.13
Error (vector) diversity:			 0.15
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 46087360
--- Timings ---
Current time: 1529615382152 milliseconds
Total Time:         107.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.2 seconds, 35.6%
Fitness Testing:     54.6 seconds, 50.8%
Report:              14.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 60653.98860000003
Test mean error for best: 30.32699
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -9.9577800452 
Correct output: -58.7779066602 | Program output: -9.9577800452 
Correct output: -70.4544341591 | Program output: -75.4544341591
Correct output: 48.0303159228  | Program output: 25.0303159228 
Correct output: 81.5444045338  | Program output: -9.9577800452 
Correct output: 107.605181994  | Program output: -9.9577800452 
Correct output: 56.1323198243  | Program output: -9.9577800452 
Correct output: -119.511081127 | Program output: -124.511081127
Correct output: -137.6953004708 | Program output: -104.6953004708
Correct output: 28.0264601383  | Program output: -9.9577800452 
Correct output: 19.014261193   | Program output: -9.9577800452 
Correct output: -76.5652234606 | Program output: -82.5652234606
Correct output: -92.2496022257 | Program output: -9.9577800452 
Correct output: -9.7264396507  | Program output: -9.9577800452 
Correct output: -74.5951028043 | Program output: -16.5951028043
Correct output: -111.2224067056 | Program output: -109.2224067056
Correct output: 25.2029289086  | Program output: -9.9577800452 
Correct output: -99.7779180651 | Program output: -38.7779180651
Correct output: 23.3238574914  | Program output: -0.6761425086 
Correct output: -81.9975425787 | Program output: -50.9975425787
Correct output: -132.3840059284 | Program output: -88.3840059284
Correct output: -21.0593840301 | Program output: 34.9406159699 
Correct output: -85.8056758937 | Program output: -90.8056758937
Correct output: -149.9116694043 | Program output: -120.9116694043
Correct output: -50.3143322102 | Program output: 12.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction integer_sub} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup integer_yank 79.40605270974905 float_div integer_flush integer_sub 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_shove float_sin integer_stackdepth integer_yank float_sub float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973)
Errors: [17.3431 9 48.8201 9 5.0 1 23.0 2 91.5022 10 117.563 12 66.0901 12 5.0 2 33.0 2 37.9842 11 28.972 11 6.0 2 82.2918 10 0.2313 10 58.0 2 2.0 2 35.1607 11 61.0 2 24.0 12 31.0 2 44.0 3 56.0 13 5.0 2 29.0 2 63.0 13]
Total: 1137.9585
Mean: 22.75917
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3581.7955471
Median total errors in population: 1189.0
Error averages by case: (189.07625289999993 11.371 123.6612559 3.629 103.7963769 2.143 108.8998308 3.541 135.3578399 3.584 137.69418669999993 4.438 186.8244908 13.201 106.4347398 2.09 138.97480089999996 4.496 159.01675859999997 13.176 162.39209569999994 12.223 104.77964099999998 2.699 126.4510476 4.468 161.25106470000003 3.555 155.82235630000008 3.655 111.43014710000001 3.693 133.1372877 12.959 159.93946970000002 3.598 107.59761280000001 3.856 134.12829840000003 3.584 147.99729850000003 3.761 143.63559189999998 13.122 104.63617959999999 2.039 136.25759139999997 3.682 150.8273315 13.213)
Error minima by case: (11.0897 8 5.0 1 0.0 0 1.0 1 16.277 1 28.0 2 9.3004 7 0.0 0 22.0 1 6.4783 8 2.5339 8 0.0 0 6.0 1 0.2313 1 46.201 1 0.0 0 3.6547 1 50.0 1 1.7757 1 20.0 1 33.0 2 8.0E-4 6 0.0 0 18.0 1 0.8028 8)
Average genome size in population (length): 87.394
Average program size in population (points): 88.394
Average percent parens in population: 0.012
Minimum age in population: 36.86014127731323
Maximum age in population: 41.82778607308865
Average age in population: 39.603582055673
Median age in population: 39.60391969233751
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.123
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 48272385
--- Timings ---
Current time: 1529615386245 milliseconds
Total Time:         111.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.5 seconds, 35.4%
Fitness Testing:     56.8 seconds, 50.9%
Report:              15.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 59463.71629999999
Test mean error for best: 29.73186
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -9.6772767637 
Correct output: -58.7779066602 | Program output: -9.6772767637 
Correct output: -70.4544341591 | Program output: -80.4544341591
Correct output: 48.0303159228  | Program output: 20.0303159228 
Correct output: 81.5444045338  | Program output: -9.6772767637 
Correct output: 107.605181994  | Program output: -9.6772767637 
Correct output: 56.1323198243  | Program output: -9.6772767637 
Correct output: -119.511081127 | Program output: -129.511081127
Correct output: -137.6953004708 | Program output: -109.6953004708
Correct output: 28.0264601383  | Program output: -9.6772767637 
Correct output: 19.014261193   | Program output: -9.6772767637 
Correct output: -76.5652234606 | Program output: -87.5652234606
Correct output: -92.2496022257 | Program output: -9.6772767637 
Correct output: -9.7264396507  | Program output: -9.6772767637 
Correct output: -74.5951028043 | Program output: -21.5951028043
Correct output: -111.2224067056 | Program output: -114.2224067056
Correct output: 25.2029289086  | Program output: -9.6772767637 
Correct output: -99.7779180651 | Program output: -43.7779180651
Correct output: 23.3238574914  | Program output: -5.6761425086 
Correct output: -81.9975425787 | Program output: -55.9975425787
Correct output: -132.3840059284 | Program output: -93.3840059284
Correct output: -21.0593840301 | Program output: 29.9406159699 
Correct output: -85.8056758937 | Program output: -95.8056758937
Correct output: -149.9116694043 | Program output: -125.9116694043
Correct output: -50.3143322102 | Program output: 7.6856677898  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction integer_sub} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction in2} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup integer_yank 79.40605270974905 float_div integer_flush integer_sub 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_shove float_sin integer_stackdepth integer_yank float_sub float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove in2 float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec integer_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973)
Errors: [17.0626 9 49.1006 8 10.0 1 28.0 2 91.2217 11 117.2825 12 65.8096 12 10.0 1 28.0 2 37.7037 11 28.6915 9 11.0 2 82.5723 10 0.0492 8 53.0 2 3.0 1 34.8802 12 56.0 2 29.0 12 26.0 2 39.0 2 51.0 12 10.0 1 24.0 2 58.0 13]
Total: 1119.3739
Mean: 22.387478
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3815.1060491000003
Median total errors in population: 1189.0
Error averages by case: (198.4319582 11.275 135.3548548 3.716 116.38575450000003 2.157 109.76818559999998 3.537 137.29467689999993 3.681 140.1813963 4.51 197.0339228 13.117 119.356129 2.107 151.2785232 4.467 169.6199094000001 13.082 172.84074710000002 12.13 117.38982680000001 2.715 138.9213122 4.56 171.3394058999999 3.633 169.00527709999997 3.708 124.12719170000003 3.692 146.38051280000005 12.868 172.08332690000003 3.611 109.22257390000006 3.911 146.20574430000002 3.581 160.05067070000007 3.777 143.90817649999997 13.068 117.34202450000002 2.067 148.6786918 3.692 151.1102562 13.133)
Error minima by case: (6.152 9 4.0 1 0.0 0 0.0 0 15.568 1 27.0 2 3.2737 8 0.0 0 16.0 1 0.2236 8 3.3459 8 0.0 0 5.0 1 0.0492 1 41.0 1 0.0 0 11.432 1 44.0 1 1.0 1 14.0 1 27.0 2 0.6169 8 0.0 0 12.0 1 15.7452 2)
Average genome size in population (length): 87.245
Average program size in population (points): 88.245
Average percent parens in population: 0.012
Minimum age in population: 37.86014127731323
Maximum age in population: 42.91338815540075
Average age in population: 41.06910526355356
Median age in population: 41.15620440989733
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.126
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 50453685
--- Timings ---
Current time: 1529615390428 milliseconds
Total Time:         115.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.9 seconds, 35.3%
Fitness Testing:     59.0 seconds, 50.9%
Report:              15.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 64296.26330000005
Test mean error for best: 32.14813
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -6.5474778268 
Correct output: -58.7779066602 | Program output: -31.177066354 
Correct output: -70.4544341591 | Program output: -75.4544341591
Correct output: 48.0303159228  | Program output: 25.0303159228 
Correct output: 81.5444045338  | Program output: -10.370110853 
Correct output: 107.605181994  | Program output: -10.4664273653
Correct output: 56.1323198243  | Program output: -19.3606295843
Correct output: -119.511081127 | Program output: -124.511081127
Correct output: -137.6953004708 | Program output: -104.6953004708
Correct output: 28.0264601383  | Program output: -3.2552737873 
Correct output: 19.014261193   | Program output: -9.4543189261 
Correct output: -76.5652234606 | Program output: -82.5652234606
Correct output: -92.2496022257 | Program output: -18.3433926043
Correct output: -9.7264396507  | Program output: -10.4138258756
Correct output: -74.5951028043 | Program output: -16.5951028043
Correct output: -111.2224067056 | Program output: -109.2224067056
Correct output: 25.2029289086  | Program output: -10.6411675929
Correct output: -99.7779180651 | Program output: -38.7779180651
Correct output: 23.3238574914  | Program output: -0.6761425086 
Correct output: -81.9975425787 | Program output: -50.9975425787
Correct output: -132.3840059284 | Program output: -88.3840059284
Correct output: -21.0593840301 | Program output: 34.9406159699 
Correct output: -85.8056758937 | Program output: -90.8056758937
Correct output: -149.9116694043 | Program output: -120.9116694043
Correct output: -50.3143322102 | Program output: 12.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove)
Errors: [13.9328 11 27.6008 7 5.0 1 23.0 2 91.9145 10 118.0716 11 75.4929 10 5.0 2 33.0 2 31.2817 10 28.4686 9 6.0 2 73.9062 10 0.6874 11 58.0 2 2.0 2 35.8441 13 61.0 2 24.0 12 31.0 2 44.0 3 56.0 13 5.0 2 29.0 2 63.0 13]
Total: 1106.2006000000001
Mean: 22.124012
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3653.2313868000015
Median total errors in population: 1189.0
Error averages by case: (186.3254545 11.315 130.20343829999993 4.279 109.0666467 2.332 106.95108230000001 3.629 137.7341891000001 4.283 142.25408270000003 5.132 188.35272909999998 13.027 112.36061280000004 2.352 143.4740323000001 4.435 161.09893850000014 13.027 163.08746399999995 12.095 110.11257539999997 2.877 135.8393431 5.04 160.03986059999994 4.226 158.6237249 3.703 116.23048639999995 3.751 137.03444099999996 12.814 164.18405309999997 3.681 105.38643760000004 4.553 138.28205480000005 3.644 152.20440170000003 3.941 140.51558520000003 13.061 110.0542998 2.307 140.9928895 3.753 146.4185634 13.147)
Error minima by case: (7.6052 8 9.0 1 0.0 0 1.0 1 4.6875 1 21.3733 2 14.962 7 0.0 0 13.0 1 1.0349 8 6.2812 7 0.0 0 10.0 2 0.0492 1 10.4049 1 0.0 0 8.2029 1 11.7779 1 1.0 1 11.0 1 13.384 2 0.5099 8 0.0 0 9.0 1 3.9384 2)
Average genome size in population (length): 89.322
Average program size in population (points): 90.322
Average percent parens in population: 0.011
Minimum age in population: 40.06734634935856
Maximum age in population: 44.5079962387681
Average age in population: 42.49362558408082
Median age in population: 42.55106550455093
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.174
Error (vector) diversity:			 0.192
Behavioral diversity:				 0.193
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 52687110
--- Timings ---
Current time: 1529615394660 milliseconds
Total Time:         120.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.2 seconds, 35.1%
Fitness Testing:     61.5 seconds, 51.1%
Report:              16.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 56575.8515
Test mean error for best: 28.28793
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: 4.5068525711  
Correct output: -58.7779066602 | Program output: 4.5068525711  
Correct output: -70.4544341591 | Program output: -76.4544341591
Correct output: 48.0303159228  | Program output: 24.0303159228 
Correct output: 81.5444045338  | Program output: 4.5068525711  
Correct output: 107.605181994  | Program output: 4.5068525711  
Correct output: 56.1323198243  | Program output: 4.5068525711  
Correct output: -119.511081127 | Program output: -125.511081127
Correct output: -137.6953004708 | Program output: -105.6953004708
Correct output: 28.0264601383  | Program output: 4.5068525711  
Correct output: 19.014261193   | Program output: 4.5068525711  
Correct output: -76.5652234606 | Program output: -83.5652234606
Correct output: -92.2496022257 | Program output: 4.5068525711  
Correct output: -9.7264396507  | Program output: 4.5068525711  
Correct output: -74.5951028043 | Program output: -17.5951028043
Correct output: -111.2224067056 | Program output: -110.2224067056
Correct output: 25.2029289086  | Program output: 4.5068525711  
Correct output: -99.7779180651 | Program output: -39.7779180651
Correct output: 23.3238574914  | Program output: -1.6761425086 
Correct output: -81.9975425787 | Program output: -51.9975425787
Correct output: -132.3840059284 | Program output: -89.3840059284
Correct output: -21.0593840301 | Program output: 33.9406159699 
Correct output: -85.8056758937 | Program output: -91.8056758937
Correct output: -149.9116694043 | Program output: -121.9116694043
Correct output: -50.3143322102 | Program output: 11.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction integer_sub} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup integer_yank 79.40605270974905 float_div integer_flush integer_sub 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_shove float_sin integer_stackdepth integer_yank float_sub float_stackdepth float_stackdepth tagged_44 float_sin float_inc integer_mult float_shove float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec in2 integer_dup float_dec float_rot integer_shove in2 integer_dup float_yankdup float_dec float_dec float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973)
Errors: [2.8784 8 63.2848 13 6.0 1 24.0 2 77.0376 10 103.0983 11 51.6255 12 6.0 2 32.0 2 23.5196 11 14.5074 10 7.0 2 96.7565 11 14.2333 11 57.0 2 1.0 1 20.6961 11 60.0 1 25.0 12 30.0 1 43.0 3 55.0 13 6.0 2 28.0 2 62.0 13]
Total: 1076.6374999999998
Mean: 21.53275
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3866.2658913000005
Median total errors in population: 1189.0
Error averages by case: (173.3778783999999 11.221 142.3240141999999 6.222 118.03431150000002 2.673 118.35066460000004 3.774 161.7650134999998 6.37 171.95944579999974 7.225 187.76533409999996 12.761 122.1513334 2.949 150.47451790000005 4.384 161.36672910000024 12.707 160.3539381000001 11.755 119.18172090000002 3.274 155.73355740000036 6.803 150.88921860000005 6.198 166.2270118000001 3.823 123.58030369999999 3.762 144.6947514 12.52 170.65637660000002 3.818 123.04970819999998 6.256 144.08766240000006 3.796 158.90012279999996 4.307 148.8280215000001 13.081 119.3109452 2.809 148.3080775 3.874 155.33923270000003 13.194)
Error minima by case: (2.0027 7 10.2428 1 0.0 0 3.0 1 17.299 1 34.0 2 11.4749 7 0.0 0 17.0 1 0.1243 8 0.078 7 0.0 0 12.0 2 0.0253 1 10.9792 1 0.0 0 20.6961 2 36.162 1 4.0 1 15.0 1 28.0 2 0.6801 8 0.0 0 13.0 1 0.3577 2)
Average genome size in population (length): 94.228
Average program size in population (points): 95.228
Average percent parens in population: 0.011
Minimum age in population: 41.29799558967352
Maximum age in population: 45.93085064552724
Average age in population: 43.95990909936652
Median age in population: 44.01539122220129
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.292
Error (vector) diversity:			 0.319
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 55042910
--- Timings ---
Current time: 1529615398942 milliseconds
Total Time:         124.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.5 seconds, 35.0%
Fitness Testing:     63.8 seconds, 51.3%
Report:              16.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 51371.0
Test mean error for best: 25.68550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -86.614723858 
Correct output: -58.7779066602 | Program output: -73.7779066602
Correct output: -70.4544341591 | Program output: -74.4544341591
Correct output: 48.0303159228  | Program output: 26.0303159228 
Correct output: 81.5444045338  | Program output: 44.5444045338 
Correct output: 107.605181994  | Program output: 69.605181994  
Correct output: 56.1323198243  | Program output: -32.8676801757
Correct output: -119.511081127 | Program output: -123.511081127
Correct output: -137.6953004708 | Program output: -103.6953004708
Correct output: 28.0264601383  | Program output: -29.9735398617
Correct output: 19.014261193   | Program output: -42.985738807 
Correct output: -76.5652234606 | Program output: -81.5652234606
Correct output: -92.2496022257 | Program output: -108.2496022257
Correct output: -9.7264396507  | Program output: -71.7264396507
Correct output: -74.5951028043 | Program output: -15.5951028043
Correct output: -111.2224067056 | Program output: -108.2224067056
Correct output: 25.2029289086  | Program output: -2.7970710914 
Correct output: -99.7779180651 | Program output: -37.7779180651
Correct output: 23.3238574914  | Program output: 0.3238574914  
Correct output: -81.9975425787 | Program output: -49.9975425787
Correct output: -132.3840059284 | Program output: -87.3840059284
Correct output: -21.0593840301 | Program output: 35.9406159699 
Correct output: -85.8056758937 | Program output: -89.8056758937
Correct output: -149.9116694043 | Program output: -119.9116694043
Correct output: -50.3143322102 | Program output: 13.6856677898 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times -92 float_stackdepth tagged_44 float_sin integer_yank integer_mult float_shove float_sin float_stackdepth tagged_44 float_sin integer_yank float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_sub float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_dup float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973)
Errors: [94.0 11 15.0 2 4.0 1 22.0 2 37.0 2 38.0 3 89.0 13 4.0 2 34.0 2 58.0 12 62.0 12 5.0 2 16.0 3 62.0 2 59.0 2 3.0 2 28.0 12 62.0 2 23.0 2 32.0 2 45.0 3 57.0 13 4.0 1 30.0 1 64.0 13]
Total: 1069.0
Mean: 21.38
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3168.4697345000013
Median total errors in population: 1140.5799
Error averages by case: (116.04032419999987 10.754 121.26027879999951 8.551 93.36425670000003 2.855 92.10859359999999 3.61 153.8540761999999 9.052 172.4278650999996 9.825 149.12334979999994 11.943 98.36123309999998 3.414 123.16882650000007 3.849 122.36309240000037 11.759 117.10767869999977 10.972 94.68876689999996 3.453 145.31909530000038 8.997 98.25999900000005 8.481 136.30817210000004 3.555 95.9634238 3.343 113.29311129999967 11.777 141.80814910000004 3.536 98.15167070000005 8.627 115.86496939999999 3.534 131.54303000000004 4.433 117.66815119999998 12.754 94.92517879999991 3.156 121.13656159999992 3.666 125.55488020000003 12.909)
Error minima by case: (2.8784 7 4.838 1 0.0 0 3.0 1 12.3125 1 28.0 2 9.282 7 0.0 0 14.0 1 13.2896 7 0.0137 7 0.0 0 6.0 1 0.0047 1 32.5951 1 0.0 0 18.0 2 28.2221 1 2.0 1 12.0 1 25.0 1 0.0118 8 0.0 0 10.0 1 2.3291 1)
Average genome size in population (length): 102.315
Average program size in population (points): 103.315
Average percent parens in population: 0.010
Minimum age in population: 42.81937280669808
Maximum age in population: 47.26309338863939
Average age in population: 45.46441590571497
Median age in population: 45.49674174655229
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.469
Error (vector) diversity:			 0.5
Behavioral diversity:				 0.5
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 57600935
--- Timings ---
Current time: 1529615403529 milliseconds
Total Time:         129.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.0 seconds, 34.9%
Fitness Testing:     66.4 seconds, 51.4%
Report:              17.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 47016.06270000016
Test mean error for best: 23.50803
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.6772767637 
Correct output: -58.7779066602 | Program output: -1.6772767637 
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 2.0           
Correct output: 81.5444045338  | Program output: 53.8671277701 
Correct output: 107.605181994  | Program output: 78.9279052303 
Correct output: 56.1323198243  | Program output: -1.6772767637 
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -1.6772767637 
Correct output: 19.014261193   | Program output: -1.6772767637 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -1.6772767637 
Correct output: -9.7264396507  | Program output: -1.6772767637 
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: 6.5256521449  
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 2.0           
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 2.0           
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction integer_sub} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_sin} {:instruction float_min} {:instruction integer_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in1} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_flush} {:instruction float_add} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush integer_sub 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_shove float_sin float_min integer_yank float_sub float_stackdepth float_stackdepth tagged_44 float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dec float_dec float_dec float_dec integer_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_dec in1 float_yank integer_sub float_dec float_dec float_dec float_dec float_dup_times float_mod print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_sub float_yankdup float_stackdepth float_flush float_add integer_swap integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973)
Errors: [9.0626 9 57.1006 8 0.0 0 46.0303 11 27.6773 12 28.6773 13 57.8096 12 0.0 0 38.0 3 29.7037 11 20.6915 10 1.0 1 90.5723 11 8.0492 9 63.0 2 7.0 2 18.6773 11 66.0 2 21.3239 11 36.0 2 49.0 2 23.0594 11 0.0 0 34.0 2 52.3143 12]
Total: 951.7493
Mean: 19.034986
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3344.330341
Median total errors in population: 1124.9998
Error averages by case: (117.41419020000009 10.586 129.70326709999978 8.726 102.18947079999995 3.007 100.46508779999998 3.705 159.79443419999959 9.434 179.52649929999978 10.216 156.2255954999999 11.421 106.56716959999997 3.558 129.34782139999993 3.86 126.70750760000016 11.296 122.06370959999987 10.743 103.40621779999998 3.492 155.40182929999992 9.421 103.2791699 8.504 143.54473180000002 3.687 103.44327380000001 3.219 120.98885539999995 11.475 148.95814080000005 3.587 107.33368709999995 8.976 122.80885040000004 3.581 137.79865849999996 4.472 125.13431510000005 12.655 103.55018309999997 3.25 127.14213280000003 3.726 132.19154210000005 12.747)
Error minima by case: (2.8784 7 0.162 1 0.0 0 1.0 1 26.0 1 27.0 2 1.1201 7 0.0 0 7.0 1 15.0436 7 4.1474 7 0.0 0 5.0 1 0.0085 1 11.4049 1 0.0 0 8.7088 1 10.7779 1 0.0 0 5.0 1 10.384 1 0.0172 8 0.0 0 3.0 1 11.2291 1)
Average genome size in population (length): 103.462
Average program size in population (points): 104.462
Average percent parens in population: 0.010
Minimum age in population: 44.34075002372265
Maximum age in population: 48.78568485192955
Average age in population: 47.00114619048871
Median age in population: 47.05141519778408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.525
Error (vector) diversity:			 0.574
Behavioral diversity:				 0.575
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 60187610
--- Timings ---
Current time: 1529615408212 milliseconds
Total Time:         133.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.3 seconds, 34.7%
Fitness Testing:     69.1 seconds, 51.7%
Report:              18.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 47016.06270000016
Test mean error for best: 23.50803
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.6772767637 
Correct output: -58.7779066602 | Program output: -1.6772767637 
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 2.0           
Correct output: 81.5444045338  | Program output: 53.8671277701 
Correct output: 107.605181994  | Program output: 78.9279052303 
Correct output: 56.1323198243  | Program output: -1.6772767637 
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -1.6772767637 
Correct output: 19.014261193   | Program output: -1.6772767637 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -1.6772767637 
Correct output: -9.7264396507  | Program output: -1.6772767637 
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: 6.5256521449  
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 2.0           
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 2.0           
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_swap} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction integer_sub} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_sin} {:instruction float_min} {:instruction integer_yank} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in1} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_flush float_swap integer_yank 79.40605270974905 float_div integer_flush integer_sub 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_shove float_sin float_min integer_yank integer_inc float_stackdepth float_stackdepth tagged_44 float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dec float_dec float_dec float_dec integer_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_dec in1 float_yank integer_sub float_dec float_dec float_dec float_dec float_dup_times float_mod print_float float_sub integer_dup_times integer_add integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_inc integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_dup_items float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat float_flush integer_shove float_shove -83 float_dup_times tag_float_973)
Errors: [9.0626 9 57.1006 8 0.0 0 46.0303 11 27.6773 12 28.6773 13 57.8096 12 0.0 0 38.0 3 29.7037 11 20.6915 10 1.0 1 90.5723 11 8.0492 9 63.0 2 7.0 2 18.6773 11 66.0 2 21.3239 11 36.0 2 49.0 2 23.0594 11 0.0 0 34.0 2 52.3143 12]
Total: 951.7493
Mean: 19.034986
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3611.3865824999984
Median total errors in population: 1118.0
Error averages by case: (138.46000869999975 10.825 136.82576339999963 7.958 111.65874019999994 3.255 115.58993109999987 3.916 163.96591010000043 8.498 181.65062359999988 9.275 168.15004100000013 11.645 116.98956579999997 3.667 140.18829790000004 4.144 139.44997320000024 11.512 136.51880759999958 11.051 112.80885549999998 3.597 159.46197289999958 8.675 122.25354159999982 7.874 152.25741570000005 3.982 114.65771209999997 3.67 130.11427970000017 11.407 158.78518560000003 3.824 115.70085250000007 8.112 133.0178731000001 3.838 148.24570499999993 4.619 138.4447483 12.727 112.28596940000001 3.431 138.3681731 3.97 147.3886354 12.676)
Error minima by case: (2.8784 7 4.0 1 0.0 0 1.0 1 8.0754 1 27.0 2 3.9646 7 0.0 0 7.0 1 6.877 8 1.0174 7 0.0 0 5.0 1 0.0054 1 12.4049 1 0.0 0 2.7971 1 9.7779 1 0.0 0 5.0 1 13.384 1 0.4342 8 0.0 0 3.0 1 12.8576 1)
Average genome size in population (length): 100.597
Average program size in population (points): 101.597
Average percent parens in population: 0.010
Minimum age in population: 45.79638831224293
Maximum age in population: 50.21970152319409
Average age in population: 48.3421228491927
Median age in population: 48.38441260159016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.52
Error (vector) diversity:			 0.565
Behavioral diversity:				 0.566
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 62702735
--- Timings ---
Current time: 1529615412787 milliseconds
Total Time:         138.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.6 seconds, 34.5%
Fitness Testing:     71.6 seconds, 51.9%
Report:              18.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 47016.06270000016
Test mean error for best: 23.50803
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.6772767637 
Correct output: -58.7779066602 | Program output: -1.6772767637 
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 2.0           
Correct output: 81.5444045338  | Program output: 53.8671277701 
Correct output: 107.605181994  | Program output: 78.9279052303 
Correct output: 56.1323198243  | Program output: -1.6772767637 
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -1.6772767637 
Correct output: 19.014261193   | Program output: -1.6772767637 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -1.6772767637 
Correct output: -9.7264396507  | Program output: -1.6772767637 
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: 6.5256521449  
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 2.0           
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 2.0           
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction integer_sub} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_sin} {:instruction float_min} {:instruction integer_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in1} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add})
Best program: (float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush integer_sub 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_shove float_sin float_min integer_yank float_sub float_stackdepth float_stackdepth tagged_44 float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dec float_dec float_dec float_dec integer_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_dec in1 float_yank integer_sub float_dec float_dec float_dec float_dec float_dup_times float_mod print_float float_sub integer_dup_times integer_add integer_add)
Errors: [9.0626 9 57.1006 8 0.0 0 46.0303 11 27.6773 12 28.6773 13 57.8096 12 0.0 0 38.0 3 29.7037 11 20.6915 10 1.0 1 90.5723 11 8.0492 9 63.0 2 7.0 2 18.6773 11 66.0 2 21.3239 11 36.0 2 49.0 2 23.0594 11 0.0 0 34.0 2 52.3143 12]
Total: 951.7493
Mean: 19.034986
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3978.2864860999975
Median total errors in population: 1105.08085
Error averages by case: (172.4625017999999 10.926 144.38575809999978 5.915 129.81819699999997 3.204 124.86454869999994 3.762 155.92205710000022 6.275 167.67810699999959 7.037 190.04505370000012 12.22 133.57404910000002 3.508 158.45121210000013 4.156 159.19634050000028 11.879 163.4209971999993 11.436 130.53426499999995 3.466 159.76471639999977 6.783 153.23401149999995 6.171 170.37388670000007 3.988 133.42624969999991 3.836 139.82687190000016 11.045 175.7567532 3.782 127.75643630000006 6.44 152.3197961 3.764 167.4574759 4.531 153.1153404 12.837 130.88200279999995 3.238 156.27719919999998 3.844 160.99665869999998 12.703)
Error minima by case: (0.3853 7 2.2182 1 0.0 0 0.0 0 3.4556 1 17.6052 2 12.8677 3 0.0 0 8.0 1 2.6807 3 1.9715 7 0.0 0 6.0 1 6.0E-4 1 3.1639 1 0.0 0 5.5042 1 2.7779 1 0.0 0 1.0025 1 17.384 1 0.6607 9 0.0 0 4.0 1 4.5973 1)
Average genome size in population (length): 99.201
Average program size in population (points): 100.201
Average percent parens in population: 0.010
Minimum age in population: 46.79638831224293
Maximum age in population: 51.50779308460187
Average age in population: 49.72607033012353
Median age in population: 49.76600833388511
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.428
Error (vector) diversity:			 0.496
Behavioral diversity:				 0.497
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 65182760
--- Timings ---
Current time: 1529615417129 milliseconds
Total Time:         142.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.0 seconds, 34.3%
Fitness Testing:     74.1 seconds, 51.9%
Report:              19.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 47016.06270000016
Test mean error for best: 23.50803
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.6772767637 
Correct output: -58.7779066602 | Program output: -1.6772767637 
Correct output: -70.4544341591 | Program output: -70.4544341591
Correct output: 48.0303159228  | Program output: 2.0           
Correct output: 81.5444045338  | Program output: 53.8671277701 
Correct output: 107.605181994  | Program output: 78.9279052303 
Correct output: 56.1323198243  | Program output: -1.6772767637 
Correct output: -119.511081127 | Program output: -119.511081127
Correct output: -137.6953004708 | Program output: -99.6953004708
Correct output: 28.0264601383  | Program output: -1.6772767637 
Correct output: 19.014261193   | Program output: -1.6772767637 
Correct output: -76.5652234606 | Program output: -77.5652234606
Correct output: -92.2496022257 | Program output: -1.6772767637 
Correct output: -9.7264396507  | Program output: -1.6772767637 
Correct output: -74.5951028043 | Program output: -11.5951028043
Correct output: -111.2224067056 | Program output: -104.2224067056
Correct output: 25.2029289086  | Program output: 6.5256521449  
Correct output: -99.7779180651 | Program output: -33.7779180651
Correct output: 23.3238574914  | Program output: 2.0           
Correct output: -81.9975425787 | Program output: -45.9975425787
Correct output: -132.3840059284 | Program output: -83.3840059284
Correct output: -21.0593840301 | Program output: 2.0           
Correct output: -85.8056758937 | Program output: -85.8056758937
Correct output: -149.9116694043 | Program output: -115.9116694043
Correct output: -50.3143322102 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction integer_sub} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_sin} {:instruction float_min} {:instruction integer_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in1} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add})
Best program: (float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush integer_sub 79.40605270974905 float_div integer_flush float_yankdup float_stackdepth float_shove float_sin float_min integer_yank float_sub float_stackdepth float_stackdepth tagged_44 float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dec float_dec float_dec float_dec integer_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup float_dec float_dec in1 float_yank integer_sub float_dec float_dec float_dec float_dec float_dup_times float_mod print_float float_sub integer_dup_times integer_add integer_add)
Errors: [9.0626 9 57.1006 8 0.0 0 46.0303 11 27.6773 12 28.6773 13 57.8096 12 0.0 0 38.0 3 29.7037 11 20.6915 10 1.0 1 90.5723 11 8.0492 9 63.0 2 7.0 2 18.6773 11 66.0 2 21.3239 11 36.0 2 49.0 2 23.0594 11 0.0 0 34.0 2 52.3143 12]
Total: 951.7493
Mean: 19.034986
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3751.940225899999
Median total errors in population: 1071.6374999999998
Error averages by case: (182.93249429999995 10.996 128.68693710000002 4.214 122.05835470000004 2.889 119.51950139999992 3.614 135.29151039999988 4.368 139.69503399999996 5.02 185.2491052999999 12.93 124.87968070000004 3.287 149.9417876 3.776 157.14995260000018 12.234 160.83952939999978 11.992 122.9035505 3.17 135.65547629999998 5.05 156.7283649 4.226 162.76606420000007 3.651 124.45519729999997 3.459 127.43818090000006 9.938 168.54650039999999 3.526 117.48062280000005 6.493 144.5363865 3.502 158.76331369999988 4.243 146.77513399999992 12.809 122.82513680000001 2.945 147.3767047 3.515 154.77270539999995 12.826)
Error minima by case: (1.1216 7 0.5468 1 0.0 0 0.0 1 1.5444 1 25.6052 2 40.8209 2 0.0 0 16.0 1 12.715 2 3.7028 8 0.0 0 4.052 1 0.0355 1 39.7875 1 0.0 0 3.5237 1 40.2221 1 0.0 0 1.9975 1 1.616 1 0.0594 9 0.0 0 12.0 1 15.5067 1)
Average genome size in population (length): 99.547
Average program size in population (points): 100.547
Average percent parens in population: 0.010
Minimum age in population: 47.79638831224293
Maximum age in population: 53.22238579462282
Average age in population: 51.21434174645663
Median age in population: 51.27998014746117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.335
Error (vector) diversity:			 0.434
Behavioral diversity:				 0.435
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 67671435
--- Timings ---
Current time: 1529615421425 milliseconds
Total Time:         146.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.3 seconds, 34.2%
Fitness Testing:     76.5 seconds, 52.1%
Report:              20.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 46224.649700000045
Test mean error for best: 23.11232
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -5.0          
Correct output: -58.7779066602 | Program output: -70.7779066602
Correct output: -70.4544341591 | Program output: -75.4544341591
Correct output: 48.0303159228  | Program output: -1.0          
Correct output: 81.5444045338  | Program output: 47.5444045338 
Correct output: 107.605181994  | Program output: 72.605181994  
Correct output: 56.1323198243  | Program output: -5.0          
Correct output: -119.511081127 | Program output: -124.511081127
Correct output: -137.6953004708 | Program output: -104.6953004708
Correct output: 28.0264601383  | Program output: -5.0          
Correct output: 19.014261193   | Program output: -5.0          
Correct output: -76.5652234606 | Program output: -82.5652234606
Correct output: -92.2496022257 | Program output: -105.2496022257
Correct output: -9.7264396507  | Program output: -5.0          
Correct output: -74.5951028043 | Program output: -16.5951028043
Correct output: -111.2224067056 | Program output: -109.2224067056
Correct output: 25.2029289086  | Program output: 0.2029289086  
Correct output: -99.7779180651 | Program output: -38.7779180651
Correct output: 23.3238574914  | Program output: -1.9715724743 
Correct output: -81.9975425787 | Program output: -50.9975425787
Correct output: -132.3840059284 | Program output: -88.3840059284
Correct output: -21.0593840301 | Program output: -1.0          
Correct output: -85.8056758937 | Program output: -90.8056758937
Correct output: -149.9116694043 | Program output: -120.9116694043
Correct output: -50.3143322102 | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction float_inc} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_min} {:instruction float_shove} {:instruction float_sin} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_div float_yankdup float_flush float_dec integer_yank float_inc float_div integer_flush float_yankdup integer_fromfloat float_stackdepth float_stackdepth tagged_44 tagged_44 float_sin integer_yank float_min float_shove float_sin float_stackdepth tagged_44 float_sin integer_yank float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_dec integer_sub float_dec float_yankdup float_dec float_mod float_dec float_dec print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [12.3853 10 12.0 2 5.0 1 49.0303 11 34.0 2 35.0 3 61.1323 12 5.0 2 33.0 2 33.0265 11 24.0143 10 6.0 2 13.0 3 4.7264 10 58.0 2 2.0 2 25.0 2 61.0 2 25.2954 10 31.0 2 44.0 3 20.0594 10 5.0 2 29.0 2 49.3143 11]
Total: 805.9842
Mean: 16.119684
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3700.8007304999996
Median total errors in population: 1055.0
Error averages by case: (179.61732780000008 10.85 127.05867430000012 4.312 122.29370170000001 3.143 117.16561889999984 4.284 125.0701571999999 4.29 128.24296609999996 4.962 182.99860619999993 12.685 126.17227260000011 3.504 151.37434840000006 4.078 155.5525899000002 12.069 159.47378149999977 11.902 123.35070009999993 3.368 132.92059939999996 5.057 156.03026740000013 4.275 164.21623989999998 4.246 126.09697899999995 3.741 117.3063014999999 7.299 169.76718439999996 3.76 113.85629630000024 6.975 145.56334380000007 3.723 159.69729199999995 4.507 140.34048589999992 12.594 123.50243439999997 3.211 149.17123509999993 3.895 148.62832669999986 12.603)
Error minima by case: (1.1216 6 4.0 1 0.0 0 0.0 0 2.4556 1 21.6052 1 43.6255 2 0.0 0 16.0 1 15.5196 2 0.0285 8 0.0 0 0.2496 1 0.0131 1 16.3786 1 0.0 0 8.6773 1 4.3204 1 0.0 0 2.0025 1 13.384 1 0.0249 8 0.0 0 12.0 1 2.3713 1)
Average genome size in population (length): 100.462
Average program size in population (points): 101.462
Average percent parens in population: 0.010
Minimum age in population: 49.7347999769263
Maximum age in population: 54.6675797982316
Average age in population: 52.63373648162241
Median age in population: 52.69873850296426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.357
Error (vector) diversity:			 0.451
Behavioral diversity:				 0.452
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 70183035
--- Timings ---
Current time: 1529615425912 milliseconds
Total Time:         151.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.6 seconds, 34.1%
Fitness Testing:     79.1 seconds, 52.3%
Report:              20.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 45085.216700000026
Test mean error for best: 22.54261
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -5.0          
Correct output: -58.7779066602 | Program output: -70.7779066602
Correct output: -70.4544341591 | Program output: -83.4544341591
Correct output: 48.0303159228  | Program output: -1.0          
Correct output: 81.5444045338  | Program output: 47.5444045338 
Correct output: 107.605181994  | Program output: 72.605181994  
Correct output: 56.1323198243  | Program output: -5.0          
Correct output: -119.511081127 | Program output: -132.511081127
Correct output: -137.6953004708 | Program output: -112.6953004708
Correct output: 28.0264601383  | Program output: -5.0          
Correct output: 19.014261193   | Program output: -5.0          
Correct output: -76.5652234606 | Program output: -90.5652234606
Correct output: -92.2496022257 | Program output: -105.2496022257
Correct output: -9.7264396507  | Program output: -5.0          
Correct output: -74.5951028043 | Program output: -24.5951028043
Correct output: -111.2224067056 | Program output: -117.2224067056
Correct output: 25.2029289086  | Program output: 0.2029289086  
Correct output: -99.7779180651 | Program output: -46.7779180651
Correct output: 23.3238574914  | Program output: -8.6761425086 
Correct output: -81.9975425787 | Program output: -58.9975425787
Correct output: -132.3840059284 | Program output: -96.3840059284
Correct output: -21.0593840301 | Program output: -1.0          
Correct output: -85.8056758937 | Program output: -98.8056758937
Correct output: -149.9116694043 | Program output: -128.9116694043
Correct output: -50.3143322102 | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec integer_stackdepth float_dec in1 float_dec integer_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_dec integer_sub float_dec float_yankdup float_dec float_mod float_dec float_dec print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [12.3853 10 12.0 2 13.0 2 49.0303 11 34.0 2 35.0 3 61.1323 12 13.0 2 25.0 2 33.0265 11 24.0143 10 14.0 2 13.0 3 4.7264 10 50.0 1 6.0 1 25.0 2 53.0 2 32.0 12 23.0 2 36.0 3 20.0594 10 13.0 2 21.0 2 49.3143 11]
Total: 801.6888
Mean: 16.033775
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4093.3759443999993
Median total errors in population: 1005.0
Error averages by case: (179.2066148 10.638 156.94407950000004 6.345 142.01801799999998 3.626 125.47581229999959 6.408 139.01811739999988 6.084 142.72888189999995 6.822 194.90539299999983 11.983 147.38196360000012 3.798 172.9520232 4.751 168.99463770000065 11.473 168.53323699999973 11.377 143.24493630000003 3.811 171.13165120000005 6.978 162.43892290000002 6.128 178.64893240000023 4.815 148.52254379999997 4.338 124.46065529999991 7.363 188.02926259999987 4.306 121.50350320000058 8.518 164.23207399999995 4.283 180.35080379999997 4.891 135.55075649999958 12.155 143.9263506999999 3.585 170.76578649999985 4.517 151.11498679999957 12.303)
Error minima by case: (0.5588 8 4.0 1 0.0 0 0.0 0 4.5444 1 5.5671 2 30.7859 2 0.0 0 13.0 1 18.0265 2 9.0143 8 0.0 0 5.0 1 0.6421 1 6.5688 1 0.0 0 7.9396 1 41.0 1 0.0 0 5.0025 1 9.616 1 0.3859 8 0.0 0 9.0 1 12.7818 1)
Average genome size in population (length): 101.858
Average program size in population (points): 102.858
Average percent parens in population: 0.010
Minimum age in population: 51.27981750410981
Maximum age in population: 56.12244095843926
Average age in population: 53.91693623709967
Median age in population: 54.00104658683995
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.426
Error (vector) diversity:			 0.466
Behavioral diversity:				 0.467
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 72729510
--- Timings ---
Current time: 1529615430537 milliseconds
Total Time:         155.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.0 seconds, 34.0%
Fitness Testing:     81.6 seconds, 52.4%
Report:              21.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 45085.216700000026
Test mean error for best: 22.54261
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -5.0          
Correct output: -58.7779066602 | Program output: -70.7779066602
Correct output: -70.4544341591 | Program output: -83.4544341591
Correct output: 48.0303159228  | Program output: -1.0          
Correct output: 81.5444045338  | Program output: 47.5444045338 
Correct output: 107.605181994  | Program output: 72.605181994  
Correct output: 56.1323198243  | Program output: -5.0          
Correct output: -119.511081127 | Program output: -132.511081127
Correct output: -137.6953004708 | Program output: -112.6953004708
Correct output: 28.0264601383  | Program output: -5.0          
Correct output: 19.014261193   | Program output: -5.0          
Correct output: -76.5652234606 | Program output: -90.5652234606
Correct output: -92.2496022257 | Program output: -105.2496022257
Correct output: -9.7264396507  | Program output: -5.0          
Correct output: -74.5951028043 | Program output: -24.5951028043
Correct output: -111.2224067056 | Program output: -117.2224067056
Correct output: 25.2029289086  | Program output: 0.2029289086  
Correct output: -99.7779180651 | Program output: -46.7779180651
Correct output: 23.3238574914  | Program output: -8.6761425086 
Correct output: -81.9975425787 | Program output: -58.9975425787
Correct output: -132.3840059284 | Program output: -96.3840059284
Correct output: -21.0593840301 | Program output: -1.0          
Correct output: -85.8056758937 | Program output: -98.8056758937
Correct output: -149.9116694043 | Program output: -128.9116694043
Correct output: -50.3143322102 | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec integer_stackdepth float_dec in1 float_dec integer_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_dec integer_sub float_dec float_yankdup float_dec float_mod float_dec float_dec print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [12.3853 10 12.0 2 13.0 2 49.0303 11 34.0 2 35.0 3 61.1323 12 13.0 2 25.0 2 33.0265 11 24.0143 10 14.0 2 13.0 3 4.7264 10 50.0 1 6.0 1 25.0 2 53.0 2 32.0 12 23.0 2 36.0 3 20.0594 10 13.0 2 21.0 2 49.3143 11]
Total: 801.6888
Mean: 16.033775
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3657.474294499999
Median total errors in population: 986.2447500000001
Error averages by case: (137.93833890000013 10.306 153.00929430000016 8.849 124.7143889000001 3.77 116.0665229999992 9.28 119.57648409999948 8.192 124.79138009999974 8.848 169.70408109999943 11.458 133.21577620000016 3.911 160.6333058000001 5.227 144.24713590000064 10.879 140.16423029999976 10.793 126.2134361999999 4.017 176.2829439000006 9.517 129.43820919999942 8.512 162.94794820000018 4.996 135.02430479999995 4.704 100.03162329999981 9.108 173.17002539999984 4.643 101.38103820000075 10.102 148.95923269999997 4.598 166.74569689999998 5.083 107.6305630999992 11.56 128.2706451999999 3.737 159.85453509999982 4.848 128.63815369999915 11.887)
Error minima by case: (2.0854 7 1.3097 1 0.0 0 0.0 0 0.4556 1 23.6052 1 4.524 1 0.0 0 15.0 1 18.0265 1 9.0143 2 0.0 0 0.3097 1 0.7264 1 16.4049 1 0.0 0 1.8952 1 8.7779 1 0.0 0 8.0025 1 16.384 1 0.01 2 0.0 0 11.0 1 19.1558 1)
Average genome size in population (length): 101.548
Average program size in population (points): 102.548
Average percent parens in population: 0.010
Minimum age in population: 52.30642671103124
Maximum age in population: 57.64001406925672
Average age in population: 55.26216114249228
Median age in population: 55.25961439012099
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.492
Error (vector) diversity:			 0.518
Behavioral diversity:				 0.518
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 75268210
--- Timings ---
Current time: 1529615434944 milliseconds
Total Time:         160.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 33.9%
Fitness Testing:     84.1 seconds, 52.4%
Report:              21.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 44451.71080000004
Test mean error for best: 22.22586
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -5.0          
Correct output: -58.7779066602 | Program output: -70.7779066602
Correct output: -70.4544341591 | Program output: -90.4544341591
Correct output: 48.0303159228  | Program output: -1.0          
Correct output: 81.5444045338  | Program output: 47.5444045338 
Correct output: 107.605181994  | Program output: 72.605181994  
Correct output: 56.1323198243  | Program output: -5.0          
Correct output: -119.511081127 | Program output: -139.511081127
Correct output: -137.6953004708 | Program output: -119.6953004708
Correct output: 28.0264601383  | Program output: -5.0          
Correct output: 19.014261193   | Program output: -5.0          
Correct output: -76.5652234606 | Program output: -97.5652234606
Correct output: -92.2496022257 | Program output: -105.2496022257
Correct output: -9.7264396507  | Program output: -5.0          
Correct output: -74.5951028043 | Program output: -31.5951028043
Correct output: -111.2224067056 | Program output: -124.2224067056
Correct output: 25.2029289086  | Program output: 0.2029289086  
Correct output: -99.7779180651 | Program output: -53.7779180651
Correct output: 23.3238574914  | Program output: -15.6761425086
Correct output: -81.9975425787 | Program output: -65.9975425787
Correct output: -132.3840059284 | Program output: -103.3840059284
Correct output: -21.0593840301 | Program output: -1.0          
Correct output: -85.8056758937 | Program output: -105.8056758937
Correct output: -149.9116694043 | Program output: -135.9116694043
Correct output: -50.3143322102 | Program output: -2.3143322102 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_flush float_dup_times -92 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove float_sin float_stackdepth tagged_44 float_sin integer_yank integer_shove float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_dec integer_sub float_dec float_yankdup float_dec float_mod float_dec float_dec print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [12.3853 10 12.0 2 20.0 1 49.0303 11 34.0 2 35.0 3 61.1323 12 20.0 1 18.0 2 33.0265 11 24.0143 10 21.0 2 13.0 3 4.7264 10 43.0 2 13.0 2 25.0 2 46.0 2 39.0 13 16.0 2 29.0 2 20.0594 10 20.0 2 14.0 2 48.0 2]
Total: 791.3745
Mean: 15.82749
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3691.630220500001
Median total errors in population: 955.9982
Error averages by case: (122.7254457999998 10.286 150.63717560000012 9.646 128.3825182000001 4.108 126.60352489999904 10.329 125.9581213999996 7.631 129.84636529999992 8.331 161.92086489999915 11.595 138.50713900000025 4.384 163.29919910000004 5.414 135.79558380000125 10.839 129.64669529999938 10.481 129.9969757999998 4.423 175.73189200000067 10.134 116.92224079999957 9.508 165.33496120000032 5.196 137.7373138 4.956 106.74708909999987 8.41 175.4842300999998 4.862 117.29473730000083 10.628 151.27661789999993 4.856 169.88600419999986 5.449 109.770038299999 11.276 131.40948119999985 4.167 163.18057419999974 5.087 133.80943129999892 11.73)
Error minima by case: (1.9706 5 2.9166 1 0.0 0 0.0 0 18.4556 1 7.6052 2 4.2737 1 0.0 0 7.0 1 3.7974 2 6.439 2 0.0 0 1.522 1 0.2736 1 20.4556 1 0.0 0 4.5941 1 35.0 1 0.3239 1 0.0025 1 18.0 2 0.0646 1 0.0 0 3.0 1 1.7843 1)
Average genome size in population (length): 100.649
Average program size in population (points): 101.649
Average percent parens in population: 0.010
Minimum age in population: 53.76788845780538
Maximum age in population: 58.69525817263275
Average age in population: 56.64347586914777
Median age in population: 56.71280238398504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.499
Error (vector) diversity:			 0.507
Behavioral diversity:				 0.508
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 77784485
--- Timings ---
Current time: 1529615439195 milliseconds
Total Time:         164.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.6 seconds, 33.8%
Fitness Testing:     86.5 seconds, 52.6%
Report:              22.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 44259.13470000003
Test mean error for best: 22.12957
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -5.0          
Correct output: -58.7779066602 | Program output: -70.7779066602
Correct output: -70.4544341591 | Program output: -96.4544341591
Correct output: 48.0303159228  | Program output: -1.0          
Correct output: 81.5444045338  | Program output: 47.5444045338 
Correct output: 107.605181994  | Program output: 72.605181994  
Correct output: 56.1323198243  | Program output: -5.0          
Correct output: -119.511081127 | Program output: -145.511081127
Correct output: -137.6953004708 | Program output: -125.6953004708
Correct output: 28.0264601383  | Program output: -5.0          
Correct output: 19.014261193   | Program output: -5.0          
Correct output: -76.5652234606 | Program output: -103.5652234606
Correct output: -92.2496022257 | Program output: -105.2496022257
Correct output: -9.7264396507  | Program output: -5.0          
Correct output: -74.5951028043 | Program output: -37.5951028043
Correct output: -111.2224067056 | Program output: -130.2224067056
Correct output: 25.2029289086  | Program output: 0.2029289086  
Correct output: -99.7779180651 | Program output: -59.7779180651
Correct output: 23.3238574914  | Program output: -21.6761425086
Correct output: -81.9975425787 | Program output: -71.9975425787
Correct output: -132.3840059284 | Program output: -109.3840059284
Correct output: -21.0593840301 | Program output: -1.0          
Correct output: -85.8056758937 | Program output: -111.8056758937
Correct output: -149.9116694043 | Program output: -141.9116694043
Correct output: -50.3143322102 | Program output: -8.3143322102 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction tagged_44} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_min} {:instruction float_shove} {:instruction float_sin} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_div float_yankdup float_stackdepth float_stackdepth tagged_44 tagged_44 float_dup_items integer_yank float_min float_shove float_sin float_stackdepth tagged_44 float_sin integer_yank float_stackdepth float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_dec integer_sub float_dec float_yankdup float_dec float_mod float_dec float_dec print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [12.3853 10 12.0 2 26.0 2 49.0303 11 34.0 2 35.0 3 61.1323 12 26.0 2 12.0 2 33.0265 11 24.0143 10 27.0 3 13.0 3 4.7264 10 37.0 2 19.0 2 25.0 2 40.0 1 45.0 12 10.0 1 23.0 2 20.0594 10 26.0 3 8.0 1 42.0 2]
Total: 785.3745
Mean: 15.70749
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3404.3376757999986
Median total errors in population: 946.73945
Error averages by case: (116.66728869999922 10.38 134.59509710000034 8.68 114.63181400000012 3.914 121.65076709999907 10.326 117.30360939999976 5.643 122.38766480000001 6.543 155.92050219999888 11.625 123.03742150000015 4.219 146.20390720000012 4.787 129.95348750000161 10.799 123.61264919999888 10.335 116.19927239999981 4.214 154.42157220000024 9.013 109.45035969999961 9.518 151.1102570000002 4.88 120.93462749999989 4.415 97.75668170000014 6.527 161.14142609999985 4.449 114.56213170000059 10.997 135.7028793 4.446 153.5492906999999 5.133 107.24449779999897 11.032 117.37213449999989 4.115 145.26905079999977 4.639 131.61228569999884 11.418)
Error minima by case: (1.6147 7 1.831 1 0.0 0 0.0 0 14.4556 1 11.6052 2 3.3574 2 0.0 0 12.0 1 15.0265 1 1.2628 2 0.0 0 1.0 1 0.2736 1 37.0 1 0.0 0 7.2767 1 28.2221 1 0.6761 1 4.0025 1 20.384 1 0.1103 1 0.0 0 8.0 1 8.6746 1)
Average genome size in population (length): 100.827
Average program size in population (points): 101.827
Average percent parens in population: 0.010
Minimum age in population: 54.76788845780538
Maximum age in population: 60.16043958770751
Average age in population: 58.12738782830035
Median age in population: 58.19182910959989
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.497
Error (vector) diversity:			 0.513
Behavioral diversity:				 0.514
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 80305160
--- Timings ---
Current time: 1529615443607 milliseconds
Total Time:         169.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.0 seconds, 33.7%
Fitness Testing:     89.0 seconds, 52.6%
Report:              23.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 44259.13470000003
Test mean error for best: 22.12957
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -5.0          
Correct output: -58.7779066602 | Program output: -70.7779066602
Correct output: -70.4544341591 | Program output: -96.4544341591
Correct output: 48.0303159228  | Program output: -1.0          
Correct output: 81.5444045338  | Program output: 47.5444045338 
Correct output: 107.605181994  | Program output: 72.605181994  
Correct output: 56.1323198243  | Program output: -5.0          
Correct output: -119.511081127 | Program output: -145.511081127
Correct output: -137.6953004708 | Program output: -125.6953004708
Correct output: 28.0264601383  | Program output: -5.0          
Correct output: 19.014261193   | Program output: -5.0          
Correct output: -76.5652234606 | Program output: -103.5652234606
Correct output: -92.2496022257 | Program output: -105.2496022257
Correct output: -9.7264396507  | Program output: -5.0          
Correct output: -74.5951028043 | Program output: -37.5951028043
Correct output: -111.2224067056 | Program output: -130.2224067056
Correct output: 25.2029289086  | Program output: 0.2029289086  
Correct output: -99.7779180651 | Program output: -59.7779180651
Correct output: 23.3238574914  | Program output: -21.6761425086
Correct output: -81.9975425787 | Program output: -71.9975425787
Correct output: -132.3840059284 | Program output: -109.3840059284
Correct output: -21.0593840301 | Program output: -1.0          
Correct output: -85.8056758937 | Program output: -111.8056758937
Correct output: -149.9116694043 | Program output: -141.9116694043
Correct output: -50.3143322102 | Program output: -8.3143322102 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sin} {:instruction float_tan} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub tagged_44 float_sin integer_yank integer_mult float_sin float_tan integer_yank float_sub integer_dec integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_dec integer_sub float_dec float_yankdup float_dec float_mod float_dec float_dec print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [12.3853 10 12.0 2 26.0 2 49.0303 11 34.0 2 35.0 3 61.1323 12 26.0 2 12.0 2 33.0265 11 24.0143 10 27.0 3 13.0 3 4.7264 10 37.0 2 19.0 2 25.0 2 40.0 1 45.0 12 10.0 1 23.0 2 20.0594 10 26.0 3 8.0 1 42.0 2]
Total: 785.3745
Mean: 15.70749
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4125.8920290999995
Median total errors in population: 927.58765
Error averages by case: (151.16579899999803 10.355 158.89363809999944 6.618 143.9472002 3.822 162.85861130000075 10.688 149.29783129999996 4.923 154.05822609999993 5.735 187.81611849999868 11.956 150.09157890000023 4.121 169.0770407000001 4.531 161.6390806000031 11.136 157.96110149999944 10.401 145.28665399999994 4.125 171.14317950000014 7.221 143.4393182000004 9.658 176.29936390000032 4.563 147.07616439999987 4.188 128.74050550000024 5.798 184.79181039999978 4.295 148.53998720000058 11.385 160.9151608999999 4.289 176.73424849999992 5.024 141.23290899999884 10.787 145.82869979999987 4.086 167.69927259999972 4.377 166.1795289999988 11.097)
Error minima by case: (2.6147 8 4.0 1 0.0 0 0.0 0 1.5444 1 6.6052 2 17.2737 1 0.0 0 11.6953 1 7.0265 1 1.9857 2 0.0 0 1.522 1 0.316 1 5.241 1 0.0 0 4.2029 1 10.2411 1 1.0 1 1.0025 1 15.616 1 0.0594 1 0.0 0 8.0 1 8.4803 1)
Average genome size in population (length): 103.538
Average program size in population (points): 104.538
Average percent parens in population: 0.010
Minimum age in population: 55.76788845780538
Maximum age in population: 61.63585190025697
Average age in population: 59.56963245304356
Median age in population: 59.66249326788648
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.449
Error (vector) diversity:			 0.482
Behavioral diversity:				 0.484
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 82893760
--- Timings ---
Current time: 1529615448003 milliseconds
Total Time:         173.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.3 seconds, 33.6%
Fitness Testing:     91.4 seconds, 52.7%
Report:              23.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 43848.76540000005
Test mean error for best: 21.92438
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -3.0          
Correct output: -58.7779066602 | Program output: -68.7779066602
Correct output: -70.4544341591 | Program output: -91.4544341591
Correct output: 48.0303159228  | Program output: -1.0          
Correct output: 81.5444045338  | Program output: 49.5444045338 
Correct output: 107.605181994  | Program output: 74.605181994  
Correct output: 56.1323198243  | Program output: -3.0          
Correct output: -119.511081127 | Program output: -140.511081127
Correct output: -137.6953004708 | Program output: -120.6953004708
Correct output: 28.0264601383  | Program output: -3.0          
Correct output: 19.014261193   | Program output: -3.0          
Correct output: -76.5652234606 | Program output: -98.5652234606
Correct output: -92.2496022257 | Program output: -103.2496022257
Correct output: -9.7264396507  | Program output: -3.0          
Correct output: -74.5951028043 | Program output: -32.5951028043
Correct output: -111.2224067056 | Program output: -125.2224067056
Correct output: 25.2029289086  | Program output: 2.2029289086  
Correct output: -99.7779180651 | Program output: -54.7779180651
Correct output: 23.3238574914  | Program output: -16.6761425086
Correct output: -81.9975425787 | Program output: -66.9975425787
Correct output: -132.3840059284 | Program output: -104.3840059284
Correct output: -21.0593840301 | Program output: -1.0          
Correct output: -85.8056758937 | Program output: -106.8056758937
Correct output: -149.9116694043 | Program output: -136.9116694043
Correct output: -50.3143322102 | Program output: -3.3143322102 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_swap} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction float_div} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_dup_times})
Best program: (integer_div float_yankdup float_flush float_swap integer_yank 79.40605270974905 float_div float_div integer_flush integer_flush float_yankdup integer_fromfloat integer_yank 79.40605270974905 float_div integer_flush float_yankdup integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod float_dec float_dec print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth integer_dup_times)
Errors: [10.3853 10 10.0 1 21.0 2 49.0303 11 32.0 2 33.0 3 59.1323 12 21.0 2 17.0 2 31.0265 11 22.0143 10 22.0 2 11.0 3 6.7264 10 42.0 2 14.0 2 23.0 1 45.0 2 40.0 13 15.0 2 28.0 2 20.0594 10 21.0 3 13.0 2 47.0 2]
Total: 775.3745
Mean: 15.50749
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3700.793307100002
Median total errors in population: 808.0127
Error averages by case: (137.4374297999983 10.258 134.41937740000012 4.551 129.39106870000012 3.802 149.38681160000073 10.48 130.2496659999999 3.95 133.64115340000018 4.748 174.04822949999854 12.041 135.61215040000025 3.98 150.0926837000002 4.201 148.44956040000298 11.124 143.76245059999977 10.34 130.78769819999985 4.017 141.06711919999987 5.36 128.93194449999967 9.483 160.57599740000026 4.471 131.4809811999999 3.961 113.57012300000011 4.842 167.31977379999987 4.048 136.01363710000047 11.514 141.9349387999999 3.973 157.5426162 4.706 127.62638289999889 10.596 131.3172114999999 4.11 148.70393639999983 4.163 152.5903653999991 10.121)
Error minima by case: (5.3853 9 4.0 1 0.0 0 0.0 0 1.5444 1 10.6052 2 24.9922 1 0.0 0 6.0 1 3.1137 2 0.9857 2 0.0 0 3.2504 1 2.5194 1 12.9737 1 0.0 0 4.0 1 10.7787 1 1.0 1 1.9975 1 17.0 1 0.0434 1 0.0 0 2.0 1 15.3143 1)
Average genome size in population (length): 107.186
Average program size in population (points): 108.186
Average percent parens in population: 0.009
Minimum age in population: 56.76788845780538
Maximum age in population: 63.18052522733888
Average age in population: 61.05368340162329
Median age in population: 61.13898201060624
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.413
Error (vector) diversity:			 0.447
Behavioral diversity:				 0.449
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 85573435
--- Timings ---
Current time: 1529615452455 milliseconds
Total Time:         177.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.6 seconds, 33.5%
Fitness Testing:     93.9 seconds, 52.8%
Report:              24.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 43135.48580000004
Test mean error for best: 21.56774
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -3.0          
Correct output: -58.7779066602 | Program output: -68.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 49.5444045338 
Correct output: 107.605181994  | Program output: 74.605181994  
Correct output: 56.1323198243  | Program output: -3.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -3.0          
Correct output: 19.014261193   | Program output: -3.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -103.2496022257
Correct output: -9.7264396507  | Program output: -3.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 2.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (in1 float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush integer_flush float_yankdup integer_fromfloat integer_yank 79.40605270974905 float_div integer_flush float_yankdup integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_dec integer_sub float_dec float_yankdup float_dec float_mod integer_sub integer_yankdup print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [10.3853 10 10.0 1 30.0 2 48.9697 10 32.0 2 33.0 3 59.1323 12 30.0 1 8.0 2 31.0265 11 22.0143 10 31.0 3 11.0 3 6.7264 10 33.0 2 23.0 2 23.0 1 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 765.3139
Mean: 15.306278
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3818.7176003000027
Median total errors in population: 802.6888
Error averages by case: (138.8636191999982 10.351 137.75931399999985 4.217 137.8614711 4.071 150.1397569000009 10.491 139.81076689999998 4.029 143.6783640000002 4.784 176.5109667999985 12.085 143.9161808000002 4.109 152.38720710000018 4.363 151.55814840000306 11.224 144.9655970000001 10.35 139.22810579999998 4.233 143.20469680000008 5.079 130.39641199999966 9.489 161.90294410000016 4.682 139.1165760999999 4.189 130.5107400000001 4.969 169.7488254999997 4.126 143.54612790000004 11.968 144.68863149999993 4.106 159.78228910000004 4.667 128.7614942999989 10.814 139.77030849999983 4.428 150.8645278999998 4.275 154.21152859999933 8.434)
Error minima by case: (5.6147 2 3.7779 1 0.0 0 2.0 1 2.5444 1 7.6052 2 15.8677 1 0.0 0 1.0 1 6.0265 2 2.9857 2 0.0 0 7.0 1 0.2736 1 13.0 1 0.0 0 3.2029 1 5.7779 1 1.0 1 0.0025 1 4.0 1 0.9406 2 0.0 0 0.0 0 1.5748 1)
Average genome size in population (length): 110.721
Average program size in population (points): 111.721
Average percent parens in population: 0.009
Minimum age in population: 60.50706367204657
Maximum age in population: 64.73323179255476
Average age in population: 62.66109445776591
Median age in population: 62.65759031079028
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.412
Error (vector) diversity:			 0.464
Behavioral diversity:				 0.464
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 88341560
--- Timings ---
Current time: 1529615457052 milliseconds
Total Time:         182.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.0 seconds, 33.4%
Fitness Testing:     96.5 seconds, 52.9%
Report:              24.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 43135.48580000004
Test mean error for best: 21.56774
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -3.0          
Correct output: -58.7779066602 | Program output: -68.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 49.5444045338 
Correct output: 107.605181994  | Program output: 74.605181994  
Correct output: 56.1323198243  | Program output: -3.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -3.0          
Correct output: 19.014261193   | Program output: -3.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -103.2496022257
Correct output: -9.7264396507  | Program output: -3.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 2.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth})
Best program: (integer_div float_yankdup integer_mod float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_yankdup integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin tagged_44 float_sin integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec float_yank integer_stackdepth float_dec in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_dec integer_sub float_dec float_yankdup float_dec float_mod integer_sub integer_yankdup print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth)
Errors: [10.3853 10 10.0 1 30.0 2 48.9697 10 32.0 2 33.0 3 59.1323 12 30.0 1 8.0 2 31.0265 11 22.0143 10 31.0 3 11.0 3 6.7264 10 33.0 2 23.0 2 23.0 1 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 765.3139
Mean: 15.306278
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3995.6138602999995
Median total errors in population: 798.6888
Error averages by case: (148.2012014999981 10.457 144.25205650000004 4.246 146.78318960000007 4.025 163.53315580000097 10.68 148.01481030000002 4.075 152.74788580000012 4.823 183.65685279999857 12.04 151.86547260000012 4.032 154.0464400000002 4.207 158.256121000003 11.205 153.90497319999966 10.364 148.0488809999999 4.337 150.87041539999984 5.244 138.88701600000013 9.542 166.9100126000002 4.575 146.65540849999994 4.152 133.18740910000017 4.897 172.41321719999993 4.03 155.63416100000006 12.052 147.4353423 3.97 161.68565180000004 4.426 140.17667529999886 10.947 148.31011109999992 4.562 152.4137398999999 4.045 163.90665999999968 6.884)
Error minima by case: (6.3853 8 0.8493 1 0.0 0 2.0 1 2.5444 1 2.3948 2 18.2737 2 0.0 0 0.0 0 11.0265 1 2.0143 2 0.0 0 1.4837 1 0.5822 1 11.3786 1 0.0 0 7.0 1 6.0446 1 1.0 1 0.0 0 1.0 1 0.4516 1 0.0 0 0.0 0 2.5736 1)
Average genome size in population (length): 114.408
Average program size in population (points): 115.408
Average percent parens in population: 0.009
Minimum age in population: 61.68402870942145
Maximum age in population: 65.89426356379693
Average age in population: 64.13342998258065
Median age in population: 64.17486781131606
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.429
Error (vector) diversity:			 0.507
Behavioral diversity:				 0.507
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 91201835
--- Timings ---
Current time: 1529615461529 milliseconds
Total Time:         187.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.2 seconds, 33.3%
Fitness Testing:     99.1 seconds, 53.0%
Report:              25.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 42984.73560000004
Test mean error for best: 21.49237
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -3.0          
Correct output: -58.7779066602 | Program output: -66.7779066602
Correct output: -70.4544341591 | Program output: -96.4544341591
Correct output: 48.0303159228  | Program output: 0.0           
Correct output: 81.5444045338  | Program output: 51.5444045338 
Correct output: 107.605181994  | Program output: 76.605181994  
Correct output: 56.1323198243  | Program output: -3.0          
Correct output: -119.511081127 | Program output: -145.511081127
Correct output: -137.6953004708 | Program output: -125.6953004708
Correct output: 28.0264601383  | Program output: -3.0          
Correct output: 19.014261193   | Program output: -3.0          
Correct output: -76.5652234606 | Program output: -103.5652234606
Correct output: -92.2496022257 | Program output: -101.2496022257
Correct output: -9.7264396507  | Program output: -3.0          
Correct output: -74.5951028043 | Program output: -37.5951028043
Correct output: -111.2224067056 | Program output: -130.2224067056
Correct output: 25.2029289086  | Program output: 4.2029289086  
Correct output: -99.7779180651 | Program output: -59.7779180651
Correct output: 23.3238574914  | Program output: -21.6761425086
Correct output: -81.9975425787 | Program output: -71.9975425787
Correct output: -132.3840059284 | Program output: -109.3840059284
Correct output: -21.0593840301 | Program output: 0.0           
Correct output: -85.8056758937 | Program output: -111.8056758937
Correct output: -149.9116694043 | Program output: -141.9116694043
Correct output: -50.3143322102 | Program output: -8.3143322102 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction tagged_39} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction integer_pop} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_flush float_dup_times -92 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove float_sin float_stackdepth tagged_44 float_sin integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec integer_stackdepth float_inc in1 float_dec integer_dec float_dec float_dec float_dec float_dec float_dec integer_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap tagged_39 float_dec float_dec integer_sub float_dec float_yankdup float_dec float_mod float_dec integer_yankdup print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec integer_pop float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [10.3853 10 8.0 2 26.0 2 48.0303 11 30.0 1 31.0 3 59.1323 12 26.0 2 12.0 2 31.0265 11 22.0143 10 27.0 3 9.0 3 6.7264 10 37.0 2 19.0 2 21.0 2 40.0 1 45.0 12 10.0 1 23.0 2 21.0594 12 26.0 3 8.0 1 42.0 2]
Total: 760.3745
Mean: 15.20749
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4120.340792899999
Median total errors in population: 790.3745
Error averages by case: (150.46481819999804 10.495 150.71962089999977 4.307 157.12383719999985 4.149 165.34420590000133 10.829 149.30463300000017 4.177 153.79029129999998 4.88 187.70537919999848 12.106 162.39360730000018 4.078 159.15938480000005 4.17 163.18618230000325 11.234 157.00730630000012 10.364 158.30864370000006 4.524 156.68958410000005 5.202 143.05072030000085 9.707 168.20694500000027 4.736 157.12723099999997 4.286 131.71900530000022 4.857 176.6792994999998 4.076 164.8673204999999 12.09 152.16567129999996 4.036 166.79443319999996 4.335 140.89200929999888 10.904 158.6697489999999 4.686 157.74410429999983 3.935 167.27080999999984 5.793)
Error minima by case: (1.6147 9 5.0 1 0.0 0 0.0 0 2.5444 1 0.3948 2 17.2737 1 0.0 0 0.0 0 2.9735 2 8.0143 2 0.0 0 6.0 1 0.2736 1 4.2963 1 1.0 1 5.7971 1 16.8782 1 0.8379 1 0.0 0 2.0 1 0.0594 1 0.0 0 0.0 0 4.6991 1)
Average genome size in population (length): 118.094
Average program size in population (points): 119.094
Average percent parens in population: 0.008
Minimum age in population: 63.4196848864965
Maximum age in population: 67.43114786258917
Average age in population: 65.59459396821318
Median age in population: 65.65034928834132
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.431
Error (vector) diversity:			 0.514
Behavioral diversity:				 0.515
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 94154210
--- Timings ---
Current time: 1529615466122 milliseconds
Total Time:         191.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.5 seconds, 33.2%
Fitness Testing:    101.8 seconds, 53.2%
Report:              26.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 43020.29380000003
Test mean error for best: 21.51015
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -3.0          
Correct output: -58.7779066602 | Program output: -66.7779066602
Correct output: -70.4544341591 | Program output: -106.4544341591
Correct output: 48.0303159228  | Program output: -5.9696840772 
Correct output: 81.5444045338  | Program output: 51.5444045338 
Correct output: 107.605181994  | Program output: 76.605181994  
Correct output: 56.1323198243  | Program output: -3.0          
Correct output: -119.511081127 | Program output: -155.511081127
Correct output: -137.6953004708 | Program output: -135.6953004708
Correct output: 28.0264601383  | Program output: -3.0          
Correct output: 19.014261193   | Program output: -3.0          
Correct output: -76.5652234606 | Program output: -113.5652234606
Correct output: -92.2496022257 | Program output: -101.2496022257
Correct output: -9.7264396507  | Program output: -3.0          
Correct output: -74.5951028043 | Program output: -47.5951028043
Correct output: -111.2224067056 | Program output: -140.2224067056
Correct output: 25.2029289086  | Program output: 4.2029289086  
Correct output: -99.7779180651 | Program output: -69.7779180651
Correct output: 23.3238574914  | Program output: -31.6761425086
Correct output: -81.9975425787 | Program output: -81.9975425787
Correct output: -132.3840059284 | Program output: -119.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -121.8056758937
Correct output: -149.9116694043 | Program output: -151.9116694043
Correct output: -50.3143322102 | Program output: -18.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.44974934329358} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_9909} {:instruction float_sin} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.44974934329358 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_9909 float_sin integer_mult integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_dec integer_stackdepth float_inc in1 float_dec integer_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec in2 float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_dup float_dec float_dec float_dec in2 integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_dec integer_sub float_dec float_yankdup float_dec float_mod integer_sub integer_yankdup print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove integer_dec float_stackdepth float_flush integer_stackdepth float_min integer_fromfloat)
Errors: [10.3853 10 8.0 2 36.0 2 54.0 12 30.0 1 31.0 3 59.1323 12 36.0 2 2.0 1 31.0265 11 22.0143 10 37.0 3 9.0 3 6.7264 10 27.0 2 29.0 2 21.0 2 30.0 1 55.0 12 0.0 0 13.0 2 22.0594 11 36.0 3 2.0 2 32.0 2]
Total: 760.3442
Mean: 15.206884
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3643.864126899999
Median total errors in population: 785.35935
Error averages by case: (137.17688649999806 10.617 128.7768982000001 4.062 136.5490836000001 4.089 145.65247860000022 10.579 140.90179389999997 3.937 144.01217770000014 4.644 173.51353729999855 12.008 141.8537043000002 3.954 136.13699600000024 4.03 147.60511350000309 11.223 143.47481699999935 10.268 137.80033139999998 4.496 134.61484899999985 4.924 129.7225941999997 9.6 144.1677261000002 4.551 136.40401209999987 4.22 116.23427170000006 4.767 152.40690509999988 4.007 143.71564310000005 12.046 128.8193422999999 3.959 143.83213540000003 4.203 121.67807699999885 11.101 138.12800239999981 4.616 133.8331371999998 3.752 146.02461329999983 5.176)
Error minima by case: (0.6147 6 1.0 1 0.0 0 0.4021 1 2.4556 1 0.6052 2 45.1581 2 0.0 0 0.0 0 17.0522 2 8.04 1 0.0 0 2.0 1 1.7264 1 7.0594 1 0.0 0 4.0 1 6.7779 1 0.0 0 0.0 0 0.384 1 0.8681 1 0.0 0 0.0 0 1.2639 1)
Average genome size in population (length): 118.596
Average program size in population (points): 119.596
Average percent parens in population: 0.008
Minimum age in population: 64.8367980944563
Maximum age in population: 68.93809696535655
Average age in population: 66.97704918067456
Median age in population: 67.02656691154064
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.454
Error (vector) diversity:			 0.547
Behavioral diversity:				 0.548
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 97119310
--- Timings ---
Current time: 1529615470975 milliseconds
Total Time:         196.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.9 seconds, 33.0%
Fitness Testing:    104.7 seconds, 53.3%
Report:              26.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 42057.59920000001
Test mean error for best: 21.02880
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -101.4544341591
Correct output: 48.0303159228  | Program output: -0.9696840772 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -150.511081127
Correct output: -137.6953004708 | Program output: -130.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -108.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -42.5951028043
Correct output: -111.2224067056 | Program output: -135.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -64.7779180651
Correct output: 23.3238574914  | Program output: -26.6761425086
Correct output: -81.9975425787 | Program output: -76.9975425787
Correct output: -132.3840059284 | Program output: -114.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -116.8056758937
Correct output: -149.9116694043 | Program output: -146.9116694043
Correct output: -50.3143322102 | Program output: -13.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times -92 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove float_sin tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 5.0 2 31.0 2 49.0 12 27.0 2 28.0 3 57.1323 12 31.0 2 7.0 1 29.0265 11 20.0143 10 32.0 3 6.0 1 8.7264 10 32.0 2 24.0 2 18.0 2 35.0 2 50.0 12 5.0 2 18.0 2 22.0594 11 31.0 3 3.0 1 37.0 2]
Total: 736.3442
Mean: 14.726884
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4214.2764085
Median total errors in population: 792.0165
Error averages by case: (156.39955859999807 10.648 152.13470729999986 4.382 159.45114039999993 4.335 171.13960420000103 10.699 161.13231940000006 4.23 164.90960929999994 4.979 192.43276859999855 12.079 164.43116390000017 4.193 158.06807610000007 4.258 167.8710045000031 11.249 162.19924660000066 10.356 160.61079529999998 4.83 159.35935610000007 5.221 149.5224154000011 9.572 170.93768200000008 4.86 159.3728971999999 4.459 146.1243616000002 5.057 175.94981959999996 4.285 168.16809299999983 12.047 151.39212519999992 4.214 165.50859599999987 4.479 145.4671040999989 11.158 160.91519769999982 4.847 156.67822829999986 3.976 168.31753809999987 5.37)
Error minima by case: (1.6147 8 0.6281 1 0.0 0 0.0 0 3.4556 1 0.6052 1 15.2737 2 0.0 0 0.0 0 0.9735 2 5.9857 1 0.0 0 5.0 1 0.7724 1 6.4202 1 0.0 0 0.2029 1 18.0 1 0.3523 1 0.0 0 1.0 1 1.0853 1 0.0 0 0.0 0 0.0896 1)
Average genome size in population (length): 117.501
Average program size in population (points): 118.501
Average percent parens in population: 0.008
Minimum age in population: 66.09762955177825
Maximum age in population: 70.09900689354654
Average age in population: 68.25807615290555
Median age in population: 68.25553709786011
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.475
Error (vector) diversity:			 0.578
Behavioral diversity:				 0.579
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 100056885
--- Timings ---
Current time: 1529615475617 milliseconds
Total Time:         201.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 32.9%
Fitness Testing:    107.4 seconds, 53.4%
Report:              27.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 42057.59920000001
Test mean error for best: 21.02880
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -101.4544341591
Correct output: 48.0303159228  | Program output: -0.9696840772 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -150.511081127
Correct output: -137.6953004708 | Program output: -130.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -108.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -42.5951028043
Correct output: -111.2224067056 | Program output: -135.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -64.7779180651
Correct output: 23.3238574914  | Program output: -26.6761425086
Correct output: -81.9975425787 | Program output: -76.9975425787
Correct output: -132.3840059284 | Program output: -114.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -116.8056758937
Correct output: -149.9116694043 | Program output: -146.9116694043
Correct output: -50.3143322102 | Program output: -13.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times -92 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove float_sin tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 5.0 2 31.0 2 49.0 12 27.0 2 28.0 3 57.1323 12 31.0 2 7.0 1 29.0265 11 20.0143 10 32.0 3 6.0 1 8.7264 10 32.0 2 24.0 2 18.0 2 35.0 2 50.0 12 5.0 2 18.0 2 22.0594 11 31.0 3 3.0 1 37.0 2]
Total: 736.3442
Mean: 14.726884
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3818.6776056999984
Median total errors in population: 782.403
Error averages by case: (138.77801909999783 10.532 136.56434109999998 4.381 147.10776989999994 4.258 151.62000700000038 10.59 141.73403070000003 4.039 145.68012160000018 4.845 175.6150779999985 12.086 152.41769130000023 4.09 144.1164199000002 4.124 150.4397003000035 11.268 145.7070719999999 10.279 147.9953261 4.765 143.88990489999992 5.156 132.34680920000005 9.574 155.12047040000022 4.667 146.81320569999988 4.341 125.12099030000012 4.989 161.41466699999987 4.153 154.75537529999983 11.918 137.1773399999999 4.064 151.4910484000001 4.362 124.07221289999887 11.206 148.41836079999982 4.775 142.94855719999984 3.834 153.9620865999999 5.075)
Error minima by case: (0.6147 9 0.0 0 0.0 0 0.0 0 7.1384 1 0.6052 1 17.2737 3 0.0 0 0.0 0 4.4455 2 4.5667 1 0.0 0 1.0 1 1.239 1 10.4049 1 0.0 0 1.6219 1 11.7779 1 0.1701 1 0.0 0 0.0 0 0.0594 1 0.0 0 0.0 0 0.3143 1)
Average genome size in population (length): 117.083
Average program size in population (points): 118.083
Average percent parens in population: 0.009
Minimum age in population: 67.09762955177825
Maximum age in population: 71.75115340885048
Average age in population: 69.66966439186466
Median age in population: 69.68875577772756
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.479
Error (vector) diversity:			 0.579
Behavioral diversity:				 0.58
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 102984010
--- Timings ---
Current time: 1529615480367 milliseconds
Total Time:         205.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.5 seconds, 32.8%
Fitness Testing:    110.2 seconds, 53.5%
Report:              28.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 41872.43920000004
Test mean error for best: 20.93622
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -99.4544341591
Correct output: 48.0303159228  | Program output: 0.0298904691  
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -148.511081127
Correct output: -137.6953004708 | Program output: -128.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -106.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -40.5951028043
Correct output: -111.2224067056 | Program output: -133.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -62.7779180651
Correct output: 23.3238574914  | Program output: -24.6761425086
Correct output: -81.9975425787 | Program output: -74.9975425787
Correct output: -132.3840059284 | Program output: -112.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -114.8056758937
Correct output: -149.9116694043 | Program output: -144.9116694043
Correct output: -50.3143322102 | Program output: -11.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times -93 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove float_sin tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup integer_rot integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 5.0 2 29.0 2 48.0004 11 27.0 2 28.0 3 57.1323 12 29.0 2 9.0 2 29.0265 11 20.0143 10 30.0 2 6.0 1 8.7264 10 34.0 2 22.0 2 18.0 2 37.0 2 48.0 12 7.0 2 20.0 1 22.0594 11 29.0 3 5.0 1 39.0 2]
Total: 735.3446
Mean: 14.706892
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3453.0763149999993
Median total errors in population: 772.53165
Error averages by case: (125.04897569999872 10.344 121.8956961000001 4.062 131.93203060000005 3.806 138.85179479999982 10.797 129.8424244999999 3.605 135.9065864000002 4.609 161.57649359999857 12.025 135.8597046000001 3.637 126.00510030000014 3.599 137.22139080000258 11.208 131.44095499999887 10.264 133.7745685999999 4.37 127.90953789999978 4.871 118.68216449999967 9.581 139.83277400000014 4.245 131.22180969999994 3.864 110.71427380000004 4.706 146.47213599999995 3.696 143.2814526000001 11.973 120.56509079999996 3.622 133.96549430000005 3.902 114.84750659999892 10.98 133.67708429999993 4.362 125.12568939999987 3.33 141.20458009999982 4.763)
Error minima by case: (3.3853 8 4.0 1 0.0 0 0.0303 1 2.1384 1 0.6052 2 4.5939 2 0.0 0 0.0 0 12.9735 1 7.0143 1 0.0 0 5.0 1 2.9673 1 8.0 1 0.0 0 3.0 1 9.2221 1 0.0 0 0.0 0 0.0 0 1.4037 1 0.0 0 0.0 0 1.3143 1)
Average genome size in population (length): 117.382
Average program size in population (points): 118.382
Average percent parens in population: 0.009
Minimum age in population: 68.11897310528786
Maximum age in population: 73.27004909562535
Average age in population: 71.09347585885594
Median age in population: 71.10534197272779
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.483
Error (vector) diversity:			 0.581
Behavioral diversity:				 0.582
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 105918910
--- Timings ---
Current time: 1529615485132 milliseconds
Total Time:         210.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.9 seconds, 32.7%
Fitness Testing:    113.0 seconds, 53.7%
Report:              28.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 41915.24440000001
Test mean error for best: 20.95762
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_min float_dup_times -92 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove float_sin tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 5.0 2 30.0 2 48.9697 10 27.0 2 28.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 6.0 1 8.7264 10 33.0 2 23.0 2 18.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 734.3139
Mean: 14.686278
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3428.355300499999
Median total errors in population: 785.1345
Error averages by case: (122.97256229999809 10.26 120.35918540000006 4.656 131.45376320000003 4.139 136.23354389999997 11.036 132.62314589999988 4.037 137.33305010000032 4.852 159.65028409999846 12.066 136.24624010000016 4.048 125.98114100000025 3.867 133.69617070000317 11.263 128.59315189999828 10.289 132.06874809999982 4.671 129.13075869999966 5.286 117.67357089999973 9.428 136.66894220000017 4.531 130.57815329999994 4.255 112.13861750000025 5.239 144.0014580999998 4.061 139.46065859999993 11.941 119.50430869999992 3.938 133.44741290000016 4.231 112.48968439999888 11.077 132.2800946999999 4.735 124.84851469999977 3.679 136.38313909999994 4.954)
Error minima by case: (6.3853 7 2.2221 1 0.0 0 0.0 0 2.1384 1 0.6052 1 13.1323 2 0.0 0 0.0 0 14.9735 2 18.0143 1 1.0 1 4.0 1 2.4407 1 8.0 1 1.0 1 4.2029 1 4.2221 1 0.0 0 0.0 0 0.0 0 0.6415 1 0.0 0 0.0 0 0.6857 1)
Average genome size in population (length): 118.589
Average program size in population (points): 119.589
Average percent parens in population: 0.008
Minimum age in population: 70.41407994622271
Maximum age in population: 74.70859985174936
Average age in population: 72.5647875151367
Median age in population: 72.57545910827339
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.503
Error (vector) diversity:			 0.594
Behavioral diversity:				 0.594
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 108883835
--- Timings ---
Current time: 1529615489730 milliseconds
Total Time:         215.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.1 seconds, 32.6%
Fitness Testing:    115.7 seconds, 53.8%
Report:              29.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 41915.24440000001
Test mean error for best: 20.95762
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_mod} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_min float_dup_times -92 float_stackdepth integer_dup_times float_sin float_mod integer_mult float_shove float_sin tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 5.0 2 30.0 2 48.9697 10 27.0 2 28.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 6.0 1 8.7264 10 33.0 2 23.0 2 18.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 734.3139
Mean: 14.686278
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3537.7741655
Median total errors in population: 764.53165
Error averages by case: (123.84630689999867 10.28 121.31688190000008 4.329 136.3790881 4.066 146.5387360000001 11.045 137.52570619999992 3.917 142.42122430000018 4.6 162.94666959999864 12.187 140.18570210000016 4.002 130.2594048000002 3.767 137.7227027000028 11.377 129.98398479999878 10.359 136.27354389999994 4.614 127.91498929999985 4.613 119.8770002999997 9.51 143.51866200000018 4.705 134.8740655999999 4.194 120.87297160000004 4.871 148.56309209999986 4.021 146.85466609999997 11.904 123.78323249999991 3.883 136.2087145000001 4.143 120.49202059999894 11.091 136.55724439999986 4.663 128.32661629999987 3.654 143.64093889999987 5.095)
Error minima by case: (0.3853 9 1.9901 1 1.0 1 0.0 0 2.5444 1 0.6052 1 22.8677 3 1.0 1 0.0 0 3.9735 2 4.6146 2 0.0 0 1.0 1 4.7264 1 8.7645 1 0.0 0 6.7971 1 12.3913 1 0.0 0 0.0 0 0.0 0 0.4399 1 1.0 1 0.0 0 1.6857 1)
Average genome size in population (length): 120.288
Average program size in population (points): 121.288
Average percent parens in population: 0.008
Minimum age in population: 71.5572814127406
Maximum age in population: 75.72864117461152
Average age in population: 73.96327418469633
Median age in population: 73.97609752223626
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.471
Error (vector) diversity:			 0.567
Behavioral diversity:				 0.568
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 111891410
--- Timings ---
Current time: 1529615494576 milliseconds
Total Time:         220.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.4 seconds, 32.5%
Fitness Testing:    118.7 seconds, 53.9%
Report:              29.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 42365.441000000006
Test mean error for best: 21.18272
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sin} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_sin float_stackdepth tagged_44 float_sin integer_yank float_stackdepth float_stackdepth -93 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove float_sin tagged_44 float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup integer_rot integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc in1 float_dec float_dec float_dec 9 float_dec integer_dup_times float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 5.0 2 30.0 2 48.9697 10 27.0 2 28.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 6.0 1 8.7264 10 33.0 2 23.0 2 18.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 734.3139
Mean: 14.686278
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3345.930150299999
Median total errors in population: 755.35935
Error averages by case: (118.46685319999894 10.189 114.1788036000001 4.268 129.74992850000007 3.974 135.16552659999996 11.027 126.9553180999999 3.814 132.36502380000024 4.435 157.7930764999984 12.096 133.1935477000002 3.841 121.94313140000021 3.707 131.27504560000241 11.247 125.08651749999913 10.189 130.21638369999985 4.513 121.23177899999979 4.056 115.59230089999967 9.578 132.94270420000024 4.561 128.49320289999991 4.1 109.48217990000006 4.677 141.6496965999999 3.968 137.82241600000017 11.99 116.72493049999989 3.787 131.2939943000001 4.001 110.79074989999887 10.91 130.27021339999985 4.55 120.8807526999998 3.512 134.55907379999988 4.817)
Error minima by case: (6.3853 2 0.2221 1 3.0 1 0.9697 1 6.4556 1 0.6052 1 9.1323 2 3.0 1 0.0 0 18.9735 2 18.0143 2 2.0 1 3.9897 1 2.9093 1 15.0 1 1.0 1 15.2029 1 18.0 1 0.0 0 0.0 0 1.0 1 0.6757 1 3.0 1 0.0 0 0.6857 1)
Average genome size in population (length): 122.023
Average program size in population (points): 123.023
Average percent parens in population: 0.008
Minimum age in population: 73.37429960714805
Maximum age in population: 77.21381334257913
Average age in population: 75.48831000738696
Median age in population: 75.52859884377075
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.448
Error (vector) diversity:			 0.509
Behavioral diversity:				 0.509
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 114942185
--- Timings ---
Current time: 1529615499600 milliseconds
Total Time:         224.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.8 seconds, 32.4%
Fitness Testing:    121.5 seconds, 54.0%
Report:              30.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 42061.90730000001
Test mean error for best: 21.03095
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction tagged_44} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction float_min} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction float_mod} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove})
Best program: (integer_div float_yankdup float_stackdepth float_stackdepth tagged_44 tagged_44 integer_fromfloat float_tan 79.40605270974905 float_div integer_flush float_yankdup integer_fromfloat float_stackdepth integer_yank float_min float_shove integer_dup_times float_sin integer_yank integer_mult float_shove float_sin tagged_44 float_sin float_div float_mod float_yankdup integer_rot float_stackdepth tagged_44 float_sin integer_yank integer_mult float_sub float_min integer_pop print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_shove)
Errors: [8.3853 10 5.0 2 30.0 2 48.9697 10 27.0 2 28.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 6.0 1 8.7264 10 33.0 2 23.0 2 18.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 734.3139
Mean: 14.686278
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3288.2032887
Median total errors in population: 746.85935
Error averages by case: (120.34817119999826 10.217 112.88929570000008 4.196 125.55820060000008 3.826 131.75561329999994 10.964 124.85189629999994 4.047 129.6223274000002 4.639 157.40898019999852 12.111 129.71951770000015 3.709 119.68436990000023 3.585 131.41347940000315 11.307 127.52102329999839 10.22 126.17223299999989 4.307 121.59656819999972 3.939 117.71483609999969 9.428 132.72900610000028 4.38 124.27607719999995 3.906 104.52491440000011 4.937 139.02562039999998 3.765 132.5502509000002 11.868 113.69837679999988 3.671 127.54308440000015 3.782 106.07946629999887 10.93 126.28587549999986 4.388 118.18313539999988 3.291 130.85096899999982 4.787)
Error minima by case: (2.6648 8 0.7585 1 0.0 0 1.0 1 7.1384 1 1.3948 2 7.9987 3 0.0 0 0.0 0 27.0265 9 18.0143 1 0.0 0 0.2415 1 2.7264 1 8.0 1 0.0 0 8.0 1 7.2221 1 0.0 0 0.0 0 0.0 1 2.6018 1 0.0 0 0.0 0 0.1734 1)
Average genome size in population (length): 122.758
Average program size in population (points): 123.758
Average percent parens in population: 0.008
Minimum age in population: 74.824323880596
Maximum age in population: 79.12564018674065
Average age in population: 76.84155786204491
Median age in population: 76.8633417474008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.407
Error (vector) diversity:			 0.444
Behavioral diversity:				 0.444
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 118011185
--- Timings ---
Current time: 1529615504441 milliseconds
Total Time:         229.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        74.2 seconds, 32.3%
Fitness Testing:    124.3 seconds, 54.1%
Report:              31.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 41915.24440000001
Test mean error for best: 20.95762
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -63.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 54.5444045338 
Correct output: 107.605181994  | Program output: 79.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -98.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 7.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction tagged_995} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush tagged_995 integer_fromfloat integer_shove float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot integer_yank integer_mult float_sub float_min integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec integer_dup_items float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 5.0 2 30.0 2 48.9697 10 27.0 2 28.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 6.0 1 8.7264 10 33.0 2 23.0 2 18.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 734.3139
Mean: 14.686278
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3394.2576998999975
Median total errors in population: 743.3442
Error averages by case: (122.27394379999771 10.189 117.43594990000013 4.334 132.93277010000006 4.051 129.28955159999987 10.775 121.88526429999992 3.935 126.83163110000027 4.619 161.38098269999838 12.1 137.50355440000018 3.894 128.0042405000003 3.892 135.9146145000036 11.274 129.12683619999802 10.182 133.4362751999999 4.514 126.30236669999972 3.905 120.10370829999967 9.685 137.05791160000027 4.633 132.14965789999997 4.176 102.28027070000003 4.87 146.34857129999995 4.02 138.03450150000015 11.898 121.29134269999984 3.921 135.5422207000002 4.034 104.82087479999878 11.02 133.71552349999982 4.573 126.73998359999983 3.54 135.00615229999997 4.815)
Error minima by case: (0.3853 1 0.7779 1 1.0 1 0.0303 1 3.1384 1 0.3948 2 22.2737 1 1.0 1 0.0 0 21.0265 2 12.0143 1 1.0 1 1.4992 1 0.5471 1 14.0 1 0.0 0 2.0 1 17.0 1 0.3523 1 0.0 0 0.0 0 0.4791 1 1.0 1 0.0 0 0.5313 1)
Average genome size in population (length): 123.646
Average program size in population (points): 124.646
Average percent parens in population: 0.008
Minimum age in population: 76.07065243524661
Maximum age in population: 80.51543190505376
Average age in population: 78.15555030034125
Median age in population: 78.18738924204808
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.378
Error (vector) diversity:			 0.393
Behavioral diversity:				 0.394
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 121102360
--- Timings ---
Current time: 1529615509286 milliseconds
Total Time:         234.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        75.5 seconds, 32.2%
Fitness Testing:    127.1 seconds, 54.2%
Report:              31.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 41613.68410000001
Test mean error for best: 20.80684
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -62.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 55.5444045338 
Correct output: 107.605181994  | Program output: 80.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -97.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 8.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot integer_yank integer_mult float_sub float_min integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 4.0 2 30.0 2 48.9697 10 26.0 2 27.0 2 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 5.0 1 8.7264 10 33.0 2 23.0 2 17.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 728.3139
Mean: 14.566278
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3753.5044557999995
Median total errors in population: 745.3745
Error averages by case: (136.70506259999829 10.251 129.48818430000009 4.607 144.03959490000003 4.333 153.0866276999998 10.759 145.67555520000013 4.172 148.72660370000006 4.848 172.1947162999984 12.156 148.79636610000014 4.058 139.1088230000001 4.237 147.31385780000303 11.355 143.00960099999978 10.279 144.55903639999988 4.821 139.34742069999984 4.244 135.48120750000012 9.664 150.02169400000022 4.811 143.4429758 4.469 122.70947280000009 5.007 157.13857879999986 4.281 151.15617390000017 11.94 132.43236249999993 4.202 146.43973140000008 4.356 128.6968604999989 11.008 144.76626049999985 4.726 136.2600532999998 3.824 149.44663509999984 5.053)
Error minima by case: (0.3853 1 1.2221 1 1.0 1 0.0303 1 17.4556 1 2.6052 1 3.8677 2 1.0 1 0.0 0 8.0265 2 0.9857 1 0.0 0 4.0 1 0.0 0 9.5951 1 1.0 1 5.2029 1 17.0 1 0.3523 1 0.0 0 0.0 0 0.2093 1 1.0 1 0.0 0 1.366 1)
Average genome size in population (length): 124.134
Average program size in population (points): 125.134
Average percent parens in population: 0.008
Minimum age in population: 77.07065243524661
Maximum age in population: 81.79224243830093
Average age in population: 79.49327948964579
Median age in population: 79.5466867706507
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.364
Error (vector) diversity:			 0.382
Behavioral diversity:				 0.383
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 124205735
--- Timings ---
Current time: 1529615514168 milliseconds
Total Time:         239.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        77.0 seconds, 32.1%
Fitness Testing:    130.0 seconds, 54.2%
Report:              32.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 41613.68410000001
Test mean error for best: 20.80684
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -62.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 55.5444045338 
Correct output: 107.605181994  | Program output: 80.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -97.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 8.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth float_sin float_div integer_flush float_yankdup integer_rot integer_yank integer_mult float_sub float_min integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 4.0 2 30.0 2 48.9697 10 26.0 2 27.0 2 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 5.0 1 8.7264 10 33.0 2 23.0 2 17.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 728.3139
Mean: 14.566278
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3376.5334208999993
Median total errors in population: 745.3745
Error averages by case: (119.37345109999887 10.206 116.9156839000001 4.338 130.86400840000002 4.0 132.43284710000017 10.545 126.82158589999992 3.982 131.69018710000026 4.642 156.74207809999857 12.089 135.33382140000015 3.703 126.61946390000028 3.967 131.12521440000245 11.298 125.75797689999895 10.199 131.16706359999986 4.487 123.97027139999983 3.863 116.84396399999967 9.582 137.87843880000017 4.764 129.96590669999998 4.148 109.33608720000001 4.973 145.24433719999993 3.996 137.9145383000001 11.936 120.1776502999999 3.878 134.44709830000014 4.053 106.4041560999989 10.981 131.4024809999999 4.379 124.64304849999986 3.528 134.89106129999985 5.034)
Error minima by case: (6.3853 8 0.7779 1 1.0 1 0.0 0 0.5444 1 2.6052 2 13.1323 3 0.8801 1 0.0 0 3.9735 8 4.9857 1 0.0 0 0.7504 1 0.204 1 9.5951 1 1.0 1 1.2029 1 6.7779 1 0.6477 1 0.0 0 3.0 1 4.4413 1 1.0 1 0.0 0 0.158 1)
Average genome size in population (length): 124.38
Average program size in population (points): 125.38
Average percent parens in population: 0.008
Minimum age in population: 78.11674538966248
Maximum age in population: 82.92093329907898
Average age in population: 80.7843673879959
Median age in population: 80.77475283147665
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.364
Error (vector) diversity:			 0.382
Behavioral diversity:				 0.383
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 127315235
--- Timings ---
Current time: 1529615518925 milliseconds
Total Time:         244.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        78.3 seconds, 32.0%
Fitness Testing:    132.8 seconds, 54.3%
Report:              33.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 41613.68410000001
Test mean error for best: 20.80684
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -62.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 55.5444045338 
Correct output: 107.605181994  | Program output: 80.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -97.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 8.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot integer_yank integer_mult float_sub float_min integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_stackdepth integer_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 4.0 2 30.0 2 48.9697 10 26.0 2 27.0 2 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 5.0 1 8.7264 10 33.0 2 23.0 2 17.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 728.3139
Mean: 14.566278
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3694.2149439999994
Median total errors in population: 762.2848
Error averages by case: (133.46433009999848 10.207 131.6223621000001 4.448 142.38852460000007 4.129 148.35447889999992 10.523 131.53243519999995 4.032 136.31768650000015 4.662 172.21214019999852 12.114 147.60356100000013 3.807 139.81799920000017 4.13 147.09946420000279 11.305 140.82733749999935 10.251 143.0330714999999 4.539 138.3193283999999 3.944 132.06200339999972 9.526 152.01140130000027 4.844 142.46742529999995 4.259 114.64322530000013 5.052 157.36705119999996 4.094 151.7059134000001 11.896 132.67689369999988 4.019 145.44871920000006 4.145 120.46584209999894 11.006 143.39805869999984 4.45 138.68239569999986 3.663 150.39129529999985 5.257)
Error minima by case: (4.0399 8 0.2221 1 0.0 0 0.0 0 2.5444 1 3.6052 2 2.6539 2 0.0 0 0.0 0 20.9735 3 16.0143 1 1.0 1 3.0 1 3.3459 1 6.0E-4 1 0.0 0 1.0 1 4.0 1 0.6477 1 0.0 0 1.0 1 0.9138 1 0.0 0 0.0 0 1.6857 1)
Average genome size in population (length): 123.903
Average program size in population (points): 124.903
Average percent parens in population: 0.008
Minimum age in population: 79.63863955642601
Maximum age in population: 84.34077553291993
Average age in population: 82.1502617904442
Median age in population: 82.19056953842619
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.394
Error (vector) diversity:			 0.414
Behavioral diversity:				 0.414
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 130412835
--- Timings ---
Current time: 1529615523790 milliseconds
Total Time:         249.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        79.7 seconds, 32.0%
Fitness Testing:    135.7 seconds, 54.4%
Report:              33.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 41306.1765
Test mean error for best: 20.65309
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction integer_rot} {:instruction integer_rot} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times -92 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove float_sin tagged_44 float_sin float_div integer_flush integer_rot integer_rot print_integer float_sub float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc integer_swap integer_stackdepth float_inc integer_swap integer_stackdepth float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_stackdepth integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 30.0 2 48.9697 10 25.0 2 26.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 4.0 1 8.7264 10 33.0 2 23.0 2 16.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 724.3139
Mean: 14.486278
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3692.016581
Median total errors in population: 750.6213500000001
Error averages by case: (134.0471087999981 10.206 130.03197470000012 4.437 143.3304176999999 4.186 149.37993820000003 10.539 136.35033449999997 3.948 139.55058820000013 4.463 170.30491729999844 12.137 147.97855240000015 3.801 139.4066535000001 4.12 144.95055490000314 11.304 140.7919914999993 10.254 144.00462249999993 4.65 137.26112859999978 4.012 131.79746539999977 9.591 148.41791540000028 4.929 142.89375879999992 4.313 118.04455290000007 5.054 156.87786209999987 4.155 147.32023450000005 11.98 133.03738009999992 4.045 146.49044350000003 4.201 120.55490189999888 10.9 144.2751201999999 4.432 138.1753175999998 3.717 145.97684579999984 5.392)
Error minima by case: (5.3853 5 0.7779 1 0.0 0 0.0459 1 8.0449 1 2.3948 2 24.1323 2 0.0 0 0.0 0 3.9735 3 0.0143 1 1.0 1 4.0 1 4.4529 1 13.0 1 1.0 1 0.8687 1 5.7779 1 0.0 0 0.0 0 1.0 1 1.1118 1 0.0 0 0.0 0 2.6857 1)
Average genome size in population (length): 123.322
Average program size in population (points): 124.322
Average percent parens in population: 0.008
Minimum age in population: 80.63863955642601
Maximum age in population: 85.30059174517025
Average age in population: 83.39327817250815
Median age in population: 83.44466495334574
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.396
Error (vector) diversity:			 0.42
Behavioral diversity:				 0.42
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 133495910
--- Timings ---
Current time: 1529615528593 milliseconds
Total Time:         254.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        81.0 seconds, 31.9%
Fitness Testing:    138.5 seconds, 54.5%
Report:              34.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 41307.0003
Test mean error for best: 20.65350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -101.4544341591
Correct output: 48.0303159228  | Program output: -0.9696840772 
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -150.511081127
Correct output: -137.6953004708 | Program output: -130.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -108.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -42.5951028043
Correct output: -111.2224067056 | Program output: -135.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -64.7779180651
Correct output: 23.3238574914  | Program output: -26.6761425086
Correct output: -81.9975425787 | Program output: -76.9975425787
Correct output: -132.3840059284 | Program output: -114.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -116.8056758937
Correct output: -149.9116694043 | Program output: -146.9116694043
Correct output: -50.3143322102 | Program output: -13.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_swap} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_sub} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times -92 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove float_sin integer_rot integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sin float_swap integer_mult float_sub float_min integer_pop print_integer float_sub float_swap integer_yankdup float_tan integer_stackdepth float_dec in1 integer_swap integer_stackdepth float_inc integer_swap integer_stackdepth integer_swap integer_stackdepth float_inc integer_swap integer_stackdepth float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_times integer_add float_yankdup float_stackdepth float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 31.0 2 49.0 12 25.0 2 26.0 3 57.1323 12 31.0 2 7.0 1 29.0265 11 20.0143 10 32.0 3 4.0 1 8.7264 10 32.0 2 24.0 2 16.0 2 35.0 2 50.0 12 5.0 2 18.0 2 22.0594 11 31.0 3 3.0 1 37.0 2]
Total: 726.3442
Mean: 14.526884
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3754.6596483999997
Median total errors in population: 750.9868
Error averages by case: (135.6067925999979 10.241 133.89494520000005 4.806 145.34887400000005 4.256 148.67314670000016 10.753 141.19358120000004 4.092 145.16305710000012 4.491 173.5633009999984 12.196 150.0265903000002 3.948 141.46954530000014 4.205 148.44866300000334 11.374 142.16655459999953 10.291 145.98273329999995 4.725 141.33366389999992 4.296 133.3803157999999 9.686 148.9196717000002 4.944 144.83134899999993 4.382 122.66577380000021 5.232 159.46873999999985 4.216 149.17869279999996 12.06 134.8394302999999 4.132 148.93764090000008 4.32 124.37968519999885 11.018 146.14968449999984 4.6 139.3827636999998 3.804 146.21045249999978 5.376)
Error minima by case: (5.3853 8 1.7779 1 0.0 0 0.1018 1 2.5444 1 1.3948 2 17.2737 3 0.0 0 0.0 0 4.0265 9 4.9857 1 0.0 0 2.8254 1 5.2716 1 6.0 1 0.0 0 1.2029 1 9.0 1 0.6477 1 0.0 0 1.0 1 0.5164 1 0.0 0 0.0 0 2.3647 1)
Average genome size in population (length): 121.708
Average program size in population (points): 122.708
Average percent parens in population: 0.008
Minimum age in population: 82.55557640748822
Maximum age in population: 86.77721036312667
Average age in population: 84.75367259281175
Median age in population: 84.79922279928842
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.408
Error (vector) diversity:			 0.437
Behavioral diversity:				 0.439
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 136538710
--- Timings ---
Current time: 1529615533485 milliseconds
Total Time:         258.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        82.5 seconds, 31.9%
Fitness Testing:    141.3 seconds, 54.6%
Report:              35.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 41306.1765
Test mean error for best: 20.65309
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot integer_yank integer_mult float_sub float_min integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_inc integer_stackdepth float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_stackdepth integer_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 30.0 2 48.9697 10 25.0 2 26.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 4.0 1 8.7264 10 33.0 2 23.0 2 16.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 724.3139
Mean: 14.486278
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3500.1056696999985
Median total errors in population: 750.6888
Error averages by case: (127.4486351999984 10.214 122.78917580000008 4.791 132.8409404 4.092 143.8997101000002 10.739 136.01765759999995 4.124 141.14327490000014 4.194 162.66986339999846 12.139 137.1559449000002 3.827 127.8611680000002 3.923 136.63716600000288 11.296 133.99921189999853 10.221 132.9945787999999 4.599 130.93726099999975 4.29 125.33901129999965 9.612 140.37499490000022 4.728 131.76249539999992 4.205 112.70569560000008 5.132 146.39706029999996 4.071 141.59399080000009 11.934 121.21835329999992 3.93 134.7680723000001 4.134 118.13406389999889 10.983 133.28552519999985 4.492 126.68587919999977 3.634 141.09693949999985 5.045)
Error minima by case: (1.6147 8 2.0 1 0.0 0 1.0303 1 0.5444 1 0.6052 1 7.1323 3 0.0 0 0.0 0 3.0265 6 2.9516 1 0.0 0 3.0 1 3.4879 1 3.1669 1 0.0 0 0.2029 1 19.0 1 1.6477 1 0.0 0 2.0 1 0.0594 1 0.0 0 0.0 0 0.0628 1)
Average genome size in population (length): 120.756
Average program size in population (points): 121.756
Average percent parens in population: 0.008
Minimum age in population: 84.18713717248681
Maximum age in population: 88.35966284337783
Average age in population: 86.11857922834702
Median age in population: 86.14394070578722
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.407
Error (vector) diversity:			 0.435
Behavioral diversity:				 0.436
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 139557860
--- Timings ---
Current time: 1529615538262 milliseconds
Total Time:         263.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        83.8 seconds, 31.8%
Fitness Testing:    144.1 seconds, 54.7%
Report:              35.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 41306.1765
Test mean error for best: 20.65309
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot integer_yank integer_mult float_sub float_min integer_pop print_integer float_dup float_sub float_min integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_inc integer_stackdepth float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_stackdepth integer_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 30.0 2 48.9697 10 25.0 2 26.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 4.0 1 8.7264 10 33.0 2 23.0 2 16.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 724.3139
Mean: 14.486278
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3326.391411399997
Median total errors in population: 748.4315
Error averages by case: (120.93122639999855 10.182 118.07768510000012 4.713 126.62878490000003 3.915 134.8526879 10.709 123.70725369999992 4.078 129.41396360000022 4.154 157.43300759999846 12.148 131.67647830000018 3.59 121.3155126000002 3.799 132.02102600000288 11.326 127.32080619999849 10.231 127.33187189999985 4.443 125.5919198999998 4.164 118.69977999999968 9.568 133.51158190000027 4.654 125.31098039999989 4.042 106.13682740000003 5.088 140.59759770000005 3.884 134.53362270000017 11.941 115.25149129999993 3.791 129.24550480000013 3.985 108.59562109999891 10.988 127.17470399999988 4.246 119.76744609999984 3.418 133.1760298999999 5.031)
Error minima by case: (0.3853 2 1.7779 1 0.0 0 1.0303 1 0.5444 1 1.3948 2 8.1323 9 0.0 0 0.0 0 3.0265 8 5.9857 1 0.0 0 3.0 1 6.7264 1 5.5951 1 0.0 0 0.2029 1 9.0 1 1.3523 1 0.0 0 1.0 1 0.0594 1 0.0 0 0.0 0 1.442 1)
Average genome size in population (length): 120.071
Average program size in population (points): 121.071
Average percent parens in population: 0.008
Minimum age in population: 85.47281234367918
Maximum age in population: 89.44134811540358
Average age in population: 87.41351050090485
Median age in population: 87.45104999988492
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.357
Error (vector) diversity:			 0.379
Behavioral diversity:				 0.38
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 142559860
--- Timings ---
Current time: 1529615543180 milliseconds
Total Time:         268.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.1 seconds, 31.7%
Fitness Testing:    146.9 seconds, 54.7%
Report:              36.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 41306.1765
Test mean error for best: 20.65309
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_dup_items} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup integer_div float_yankdup float_flush float_dec integer_dup_items 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup integer_rot integer_yank integer_mult float_sub float_min integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_inc integer_stackdepth float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_stackdepth integer_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 30.0 2 48.9697 10 25.0 2 26.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 4.0 1 8.7264 10 33.0 2 23.0 2 16.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 724.3139
Mean: 14.486278
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3365.1025294999977
Median total errors in population: 756.6345
Error averages by case: (119.17449809999827 10.212 118.63879320000014 4.824 130.9766062 3.959 134.01347270000025 10.384 125.5260301999999 3.913 129.21175890000023 4.01 156.60703979999852 12.121 134.92539000000014 3.632 125.58975870000026 3.915 131.17263160000292 11.282 125.02643369999839 10.193 131.1145744999998 4.482 126.6412247999996 4.313 116.30765099999968 9.527 137.77717020000026 4.661 129.69480429999993 4.11 104.83571370000013 4.956 143.83895409999982 3.931 137.4068327000001 11.901 119.14576089999994 3.845 133.3696904000002 4.022 107.45281439999887 10.989 130.57722939999988 4.28 124.07111419999984 3.491 134.08558179999986 4.968)
Error minima by case: (6.4086 8 2.0 1 0.0 0 1.0 1 15.4556 1 4.6052 1 30.1323 3 0.0 0 0.0 0 2.0265 2 0.9857 1 0.0 0 3.0 1 5.4529 1 5.5951 1 0.0 0 0.7971 1 15.0 1 1.0 1 0.0 0 1.0 1 0.9231 1 0.0 0 0.0 0 1.447 1)
Average genome size in population (length): 120.015
Average program size in population (points): 121.015
Average percent parens in population: 0.008
Minimum age in population: 86.60984896951558
Maximum age in population: 90.8965663727876
Average age in population: 88.71371631878046
Median age in population: 88.7546568235126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.362
Error (vector) diversity:			 0.385
Behavioral diversity:				 0.386
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 145560510
--- Timings ---
Current time: 1529615547903 milliseconds
Total Time:         273.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        86.4 seconds, 31.6%
Fitness Testing:    149.6 seconds, 54.8%
Report:              37.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 41306.1765
Test mean error for best: 20.65309
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: -0.9393681543 
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: -25.6761425086
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_pop} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times -92 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove float_sin tagged_44 float_sin float_div integer_flush float_yankdup float_min integer_pop integer_mult float_sub float_min integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_inc integer_stackdepth float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_stackdepth integer_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 30.0 2 48.9697 10 25.0 2 26.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 4.0 1 8.7264 10 33.0 2 23.0 2 16.0 2 36.0 2 49.0 12 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 724.3139
Mean: 14.486278
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3421.329304899999
Median total errors in population: 752.35935
Error averages by case: (120.3069531999986 10.227 120.05777850000014 4.712 132.1750612 4.058 136.68125430000012 10.538 129.0387200999999 4.026 133.90009750000024 4.207 158.08654379999845 12.207 136.37231550000016 3.744 127.5399849000002 3.996 132.67221770000276 11.359 126.41401589999879 10.267 132.6866293999999 4.598 127.47441599999975 4.2 117.67392589999969 9.556 137.94902350000035 4.866 131.2382759999999 4.218 109.47375440000009 5.181 146.13534909999996 4.011 139.14908480000022 11.961 121.07804279999993 3.928 136.00042420000017 4.108 112.19450259999877 11.0 132.70740979999988 4.396 126.23636869999986 3.629 138.0331550999998 5.061)
Error minima by case: (5.6147 1 1.0 1 1.0 1 0.0303 1 0.5444 1 4.6052 1 5.1323 2 1.0 1 0.0 0 1.9735 2 1.0143 2 2.0 1 2.0 1 5.0376 1 7.1423 1 3.0 1 4.7971 1 9.4732 1 0.1866 1 0.0 0 1.0 1 0.0594 1 1.0 1 0.0 0 1.4205 1)
Average genome size in population (length): 119.624
Average program size in population (points): 120.624
Average percent parens in population: 0.008
Minimum age in population: 87.71223815141862
Maximum age in population: 92.1906411477007
Average age in population: 90.01555140031392
Median age in population: 90.01918909154602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.38
Error (vector) diversity:			 0.401
Behavioral diversity:				 0.402
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 148551310
--- Timings ---
Current time: 1529615552590 milliseconds
Total Time:         278.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.8 seconds, 31.6%
Fitness Testing:    152.3 seconds, 54.8%
Report:              37.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 41150.03970000001
Test mean error for best: 20.57502
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -60.7779066602
Correct output: -70.4544341591 | Program output: -105.4544341591
Correct output: 48.0303159228  | Program output: -4.9696840772 
Correct output: 81.5444045338  | Program output: 57.5444045338 
Correct output: 107.605181994  | Program output: 82.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -154.511081127
Correct output: -137.6953004708 | Program output: -134.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -112.5652234606
Correct output: -92.2496022257 | Program output: -95.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -46.5951028043
Correct output: -111.2224067056 | Program output: -139.2224067056
Correct output: 25.2029289086  | Program output: 10.2029289086 
Correct output: -99.7779180651 | Program output: -68.7779180651
Correct output: 23.3238574914  | Program output: -30.6761425086
Correct output: -81.9975425787 | Program output: -80.9975425787
Correct output: -132.3840059284 | Program output: -118.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -120.8056758937
Correct output: -149.9116694043 | Program output: -150.9116694043
Correct output: -50.3143322102 | Program output: -17.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction integer_dup_items} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_yankdup integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_frominteger integer_yank integer_mult float_sub float_min integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float integer_dup_items tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 2.0 2 35.0 2 53.0 12 24.0 2 25.0 3 57.1323 12 35.0 2 3.0 1 29.0265 11 20.0143 10 36.0 3 3.0 1 8.7264 10 28.0 2 28.0 2 15.0 2 31.0 2 54.0 12 1.0 1 14.0 2 22.0594 11 35.0 3 1.0 2 33.0 2]
Total: 723.3442
Mean: 14.466884
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3262.7174333000007
Median total errors in population: 825.1089499999999
Error averages by case: (115.78592139999854 10.22 112.57372640000013 4.74 126.24026510000007 4.189 128.17176440000023 10.658 120.02535639999994 4.023 123.97546270000028 4.326 153.18098079999848 12.157 131.67779260000017 3.918 123.45050350000018 4.138 127.31153060000291 11.315 122.16297709999871 10.232 126.84832579999984 4.677 120.66603529999969 4.263 113.13460559999967 9.504 129.25980690000029 4.905 126.31814189999993 4.34 99.80453520000012 5.209 140.78531599999997 4.131 129.75641640000012 11.931 116.06818099999992 4.061 131.10802130000008 4.208 104.59188349999886 10.935 127.29498229999986 4.532 122.55602059999984 3.792 128.38688049999985 5.178)
Error minima by case: (0.6147 9 1.0 1 0.0 0 0.0303 1 0.5444 1 4.7187 2 7.1323 8 0.0 0 0.0 0 17.9735 9 10.0143 1 1.0 1 2.0 1 0.0 0 0.4717 1 1.0 1 15.0 1 6.0 1 0.3523 1 0.0 0 1.0 1 0.9406 1 0.0 0 0.0 0 0.1341 1)
Average genome size in population (length): 119.385
Average program size in population (points): 120.385
Average percent parens in population: 0.008
Minimum age in population: 89.24900748860034
Maximum age in population: 93.3115641906223
Average age in population: 91.33993452928345
Median age in population: 91.38040219793997
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.429
Error (vector) diversity:			 0.45
Behavioral diversity:				 0.45
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 151536160
--- Timings ---
Current time: 1529615557556 milliseconds
Total Time:         283.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.2 seconds, 31.5%
Fitness Testing:    155.3 seconds, 54.9%
Report:              38.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 41150.03970000001
Test mean error for best: 20.57502
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -60.7779066602
Correct output: -70.4544341591 | Program output: -105.4544341591
Correct output: 48.0303159228  | Program output: -4.9696840772 
Correct output: 81.5444045338  | Program output: 57.5444045338 
Correct output: 107.605181994  | Program output: 82.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -154.511081127
Correct output: -137.6953004708 | Program output: -134.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -112.5652234606
Correct output: -92.2496022257 | Program output: -95.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -46.5951028043
Correct output: -111.2224067056 | Program output: -139.2224067056
Correct output: 25.2029289086  | Program output: 10.2029289086 
Correct output: -99.7779180651 | Program output: -68.7779180651
Correct output: 23.3238574914  | Program output: -30.6761425086
Correct output: -81.9975425787 | Program output: -80.9975425787
Correct output: -132.3840059284 | Program output: -118.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -120.8056758937
Correct output: -149.9116694043 | Program output: -150.9116694043
Correct output: -50.3143322102 | Program output: -17.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction integer_dup_items} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_yankdup integer_div float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_frominteger integer_yank integer_mult float_sub float_min integer_pop print_integer float_dup float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth tagged_44 float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float integer_dup_items tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 2.0 2 35.0 2 53.0 12 24.0 2 25.0 3 57.1323 12 35.0 2 3.0 1 29.0265 11 20.0143 10 36.0 3 3.0 1 8.7264 10 28.0 2 28.0 2 15.0 2 31.0 2 54.0 12 1.0 1 14.0 2 22.0594 11 35.0 3 1.0 2 33.0 2]
Total: 723.3442
Mean: 14.466884
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3298.914965899999
Median total errors in population: 746.5165
Error averages by case: (115.73245379999842 10.212 114.01104830000011 4.585 126.87360860000004 3.896 136.76525660000007 10.8 124.35391079999991 3.847 127.88995060000022 4.346 153.9829218999985 12.156 131.06346390000016 3.639 122.19729680000017 3.816 127.91747470000291 11.314 122.17768169999857 10.253 127.50352709999986 4.397 122.2755308999997 4.163 113.12179179999966 9.513 133.3035923000003 4.671 125.88974589999994 3.995 105.05083120000008 5.012 141.24465169999993 3.809 133.92089910000018 12.028 115.97775569999989 3.75 130.0125630000001 3.932 108.58583899999878 10.931 127.54534629999989 4.285 120.70118029999988 3.441 133.0206438999998 5.005)
Error minima by case: (4.7461 1 0.2221 1 0.0 0 1.9697 1 0.5444 1 3.3948 1 36.1323 2 0.0 0 0.0 0 8.0265 2 0.9857 2 1.0 1 2.0 1 0.6888 1 6.8098 1 0.0 0 4.0 1 14.0 1 0.0 0 0.0 0 0.0 0 2.7563 1 0.0 0 0.0 0 1.6857 1)
Average genome size in population (length): 119.314
Average program size in population (points): 120.314
Average percent parens in population: 0.008
Minimum age in population: 90.73823042271874
Maximum age in population: 95.00177025127994
Average age in population: 92.68151548705788
Median age in population: 92.7234226180344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.413
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 154519310
--- Timings ---
Current time: 1529615562413 milliseconds
Total Time:         287.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.6 seconds, 31.5%
Fitness Testing:    158.1 seconds, 54.9%
Report:              39.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 39679.962600000006
Test mean error for best: 19.83998
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: 0.0303159228  
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -41.5951028043
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: 2.6477149829  
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: 1.0           
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -12.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth float_dec float_sin integer_yank integer_mult float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 30.0 2 48.0 2 25.0 2 26.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 4.0 1 8.7264 10 33.0 2 23.0 2 16.0 2 36.0 2 20.6761 10 6.0 2 19.0 2 22.0594 11 30.0 2 4.0 1 38.0 2]
Total: 685.0203
Mean: 13.700406
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3401.1364992999993
Median total errors in population: 885.402
Error averages by case: (123.29121149999861 10.186 121.24513520000016 5.165 129.0594299 4.105 135.4087962 10.681 130.0265513999999 4.091 135.31787770000022 4.687 159.34138719999842 12.12 133.98445350000023 3.838 125.54528330000029 4.031 133.0854470000027 11.289 128.76764919999866 10.24 129.85682219999978 4.606 130.31499529999965 4.657 120.20990579999967 9.535 136.3779882000003 4.813 128.66659019999992 4.192 108.11760660000009 5.245 143.46237029999992 4.071 134.77023700000024 11.949 118.52731459999987 3.952 133.1546102000002 4.147 111.71870309999879 10.841 129.8942031999998 4.495 124.54336059999983 3.712 134.7405698999998 5.06)
Error minima by case: (5.2745 1 0.7779 1 0.0 0 1.0303 1 2.4556 1 5.6052 2 8.0 2 0.0 0 0.0 0 5.9735 1 8.0 1 0.0 0 2.0 1 0.5471 1 8.5953 1 1.0 1 7.0 1 12.0 1 0.1935 1 0.0 0 0.0 0 0.7536 1 0.0 0 0.0 0 4.3143 1)
Average genome size in population (length): 120.069
Average program size in population (points): 121.069
Average percent parens in population: 0.008
Minimum age in population: 91.77029376805939
Maximum age in population: 95.76519311679316
Average age in population: 93.9525349567416
Median age in population: 93.98590091567156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.421
Error (vector) diversity:			 0.445
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 157521485
--- Timings ---
Current time: 1529615567309 milliseconds
Total Time:         292.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.9 seconds, 31.4%
Fitness Testing:    160.9 seconds, 55.0%
Report:              39.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 39646.77720000002
Test mean error for best: 19.82339
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -110.4544341591
Correct output: 48.0303159228  | Program output: 44.0606318457 
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -159.511081127
Correct output: -137.6953004708 | Program output: -139.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -117.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -51.5951028043
Correct output: -111.2224067056 | Program output: -144.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -73.7779180651
Correct output: 23.3238574914  | Program output: 20.9715724743 
Correct output: -81.9975425787 | Program output: -85.9975425787
Correct output: -132.3840059284 | Program output: -123.3840059284
Correct output: -21.0593840301 | Program output: -0.0593840301 
Correct output: -85.8056758937 | Program output: -125.8056758937
Correct output: -149.9116694043 | Program output: -155.9116694043
Correct output: -50.3143322102 | Program output: -22.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth float_dec float_sin integer_yank integer_mult float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 40.0 2 3.9697 8 25.0 2 26.0 3 57.1323 12 40.0 1 2.0 1 29.0265 11 20.0143 10 41.0 3 4.0 1 8.7264 10 23.0 2 33.0 2 16.0 2 26.0 2 2.3523 9 4.0 1 9.0 2 21.0 2 40.0 2 6.0 2 28.0 2]
Total: 620.6068
Mean: 12.412136
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3496.930279999998
Median total errors in population: 813.04015
Error averages by case: (124.01801429999844 10.192 125.15777650000017 4.99 136.86912270000005 4.052 137.21458310000025 10.601 126.9537172999999 3.888 131.26087400000026 4.564 162.52234389999833 12.141 141.26549030000024 3.772 132.00254060000017 4.01 136.95549050000307 11.305 131.05353509999853 10.22 137.87071869999986 4.586 134.74888649999968 4.528 121.96803339999965 9.627 138.82956570000027 4.804 136.07158999999993 4.138 105.69041240000004 4.787 150.54822359999994 4.02 139.70092100000022 11.95 125.69975589999989 3.964 140.64482130000013 4.115 113.09993859999882 10.971 137.63494469999983 4.406 130.63664869999985 3.597 138.35533119999985 4.929)
Error minima by case: (4.3853 8 0.0 0 1.0 1 0.0303 1 18.4556 1 5.6052 2 7.1278 7 1.0 1 0.0 0 15.9735 6 0.0551 1 1.0 1 1.0 1 6.4529 1 15.2129 1 1.0 1 4.2029 1 19.0 1 0.4187 1 0.0 0 2.0 1 0.4553 1 1.0 1 0.0 0 4.2197 1)
Average genome size in population (length): 120.275
Average program size in population (points): 121.275
Average percent parens in population: 0.008
Minimum age in population: 92.77029376805939
Maximum age in population: 97.1630363410229
Average age in population: 95.19032440542814
Median age in population: 95.24085945694961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.365
Error (vector) diversity:			 0.388
Behavioral diversity:				 0.388
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 160528785
--- Timings ---
Current time: 1529615572307 milliseconds
Total Time:         297.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.3 seconds, 31.3%
Fitness Testing:    163.9 seconds, 55.1%
Report:              40.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 39646.77720000002
Test mean error for best: 19.82339
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -110.4544341591
Correct output: 48.0303159228  | Program output: 44.0606318457 
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -159.511081127
Correct output: -137.6953004708 | Program output: -139.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -117.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -51.5951028043
Correct output: -111.2224067056 | Program output: -144.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -73.7779180651
Correct output: 23.3238574914  | Program output: 20.9715724743 
Correct output: -81.9975425787 | Program output: -85.9975425787
Correct output: -132.3840059284 | Program output: -123.3840059284
Correct output: -21.0593840301 | Program output: -0.0593840301 
Correct output: -85.8056758937 | Program output: -125.8056758937
Correct output: -149.9116694043 | Program output: -155.9116694043
Correct output: -50.3143322102 | Program output: -22.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth float_dec float_sin integer_yank integer_mult float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 40.0 2 3.9697 8 25.0 2 26.0 3 57.1323 12 40.0 1 2.0 1 29.0265 11 20.0143 10 41.0 3 4.0 1 8.7264 10 23.0 2 33.0 2 16.0 2 26.0 2 2.3523 9 4.0 1 9.0 2 21.0 2 40.0 2 6.0 2 28.0 2]
Total: 620.6068
Mean: 12.412136
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3690.8085688000006
Median total errors in population: 840.55935
Error averages by case: (130.46035969999815 10.246 131.18339750000013 5.044 143.06508520000008 4.171 150.67237100000017 10.645 137.38641009999998 4.176 142.05663600000017 4.798 166.19082339999838 12.198 147.55224890000017 3.873 138.27671540000023 4.097 143.03678600000327 11.377 136.9715288999986 10.291 144.0652565999999 4.694 138.8785834999997 4.586 128.2636294999997 9.602 148.07283950000033 4.861 142.3820412999999 4.252 121.01638130000008 5.215 156.40864059999993 4.111 148.9655418 11.938 131.7592502999999 4.024 145.8644727000001 4.188 125.93983719999882 10.855 143.94244759999987 4.498 137.24595879999987 3.747 148.6053259999998 5.059)
Error minima by case: (0.6147 8 0.0 0 0.0 0 1.0 1 4.1384 1 1.3948 1 5.1323 3 0.0 0 0.0 0 4.0265 7 4.9857 2 0.0 0 0.4417 1 1.3426 1 5.5951 1 0.0 0 1.2029 1 5.2221 1 0.0 0 0.0 0 0.0 0 0.2822 1 0.0 0 0.0 0 1.8266 1)
Average genome size in population (length): 121.039
Average program size in population (points): 122.039
Average percent parens in population: 0.008
Minimum age in population: 94.5629532660882
Maximum age in population: 98.68894582785641
Average age in population: 96.56057289737508
Median age in population: 96.62595771132823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.401
Error (vector) diversity:			 0.439
Behavioral diversity:				 0.439
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 163555135
--- Timings ---
Current time: 1529615577070 milliseconds
Total Time:         302.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.6 seconds, 31.3%
Fitness Testing:    166.8 seconds, 55.1%
Report:              41.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 39516.71380000002
Test mean error for best: 19.75836
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 46.0606318457 
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 22.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth float_dec float_sin integer_yank integer_mult float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec integer_max float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 38.0 2 1.9697 8 25.0 2 26.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 4.0 1 8.7264 10 25.0 2 31.0 2 16.0 2 28.0 2 0.3523 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 609.7256
Mean: 12.194512
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3605.1897832000004
Median total errors in population: 885.3414
Error averages by case: (127.40311019999821 10.203 128.37607680000016 5.128 139.45306179999994 4.037 144.91956979999998 10.481 135.99519179999996 4.255 141.2815214000002 4.936 164.5227751999986 12.157 143.45673750000014 3.764 134.74492530000023 3.997 139.338298500003 11.357 133.23949659999855 10.273 140.47771289999991 4.561 136.87690589999988 4.673 124.84537799999971 9.472 144.89545630000032 4.872 138.435207 4.152 118.99385590000017 5.285 153.64152239999984 3.99 144.06300280000002 11.892 128.65824779999988 3.902 142.43380840000003 4.14 119.95582889999899 10.846 140.17568449999982 4.388 133.2524290999998 3.671 144.12597839999987 5.196)
Error minima by case: (0.6147 8 0.0 0 1.0 1 1.0303 1 0.5444 1 4.3948 1 8.35 3 1.0 1 0.0 0 11.0529 2 6.0143 1 0.0 0 1.0 1 1.9673 1 9.0 1 1.0 1 4.0 1 9.7779 1 0.3523 1 0.0 0 2.0 1 0.0594 1 1.0 1 0.0 0 0.6857 1)
Average genome size in population (length): 121.533
Average program size in population (points): 122.533
Average percent parens in population: 0.008
Minimum age in population: 95.5629532660882
Maximum age in population: 99.76776930255286
Average age in population: 97.95674536067186
Median age in population: 97.94771927629468
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.429
Error (vector) diversity:			 0.468
Behavioral diversity:				 0.469
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 166593860
--- Timings ---
Current time: 1529615581871 milliseconds
Total Time:         307.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.1 seconds, 31.3%
Fitness Testing:    169.5 seconds, 55.2%
Report:              41.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 39516.71380000002
Test mean error for best: 19.75836
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -61.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 46.0606318457 
Correct output: 81.5444045338  | Program output: 56.5444045338 
Correct output: 107.605181994  | Program output: 81.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -96.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 9.2029289086  
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 22.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction float_sin} {:instruction integer_yank} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (float_div float_dup_times -92 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove integer_yank integer_mult float_shove float_sin integer_yank float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth float_dec float_sin integer_yank integer_mult float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 3.0 2 38.0 2 1.9697 8 25.0 2 26.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 4.0 1 8.7264 10 25.0 2 31.0 2 16.0 2 28.0 2 0.3523 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 609.7256
Mean: 12.194512
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3895.7903721999983
Median total errors in population: 847.5478
Error averages by case: (142.3723150999982 10.229 137.77071429999992 5.086 151.8182654999999 4.283 148.76572680000024 10.026 144.35238309999994 4.301 149.69810000000018 4.834 177.8708944999985 12.175 156.45800890000018 4.026 147.84624220000015 4.171 152.49513600000296 11.384 148.14103199999997 10.279 153.00527219999992 4.779 146.97173790000016 4.764 139.65313840000027 9.558 157.58151230000033 4.97 151.3622783999999 4.373 126.94266980000006 5.335 164.56485019999985 4.122 155.59929809999988 11.781 141.11134369999988 4.038 155.05523210000004 4.294 127.48945529999894 10.567 152.62837049999985 4.652 147.04452879999982 3.923 155.91486609999984 5.327)
Error minima by case: (0.6147 8 0.0 0 0.0 0 0.0303 1 15.4556 1 5.6052 1 21.1323 3 0.0 0 0.0 0 6.9735 3 6.9715 1 0.0 0 0.0 0 0.5471 1 10.0 1 2.0 1 5.1883 1 9.7779 1 0.3523 1 0.0 0 0.0 0 2.8321 1 0.0 0 0.0 0 0.4615 1)
Average genome size in population (length): 122.221
Average program size in population (points): 123.221
Average percent parens in population: 0.008
Minimum age in population: 97.0383279478849
Maximum age in population: 101.3279486963704
Average age in population: 99.33513900756616
Median age in population: 99.40253518368515
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.479
Error (vector) diversity:			 0.523
Behavioral diversity:				 0.523
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 169649960
--- Timings ---
Current time: 1529615586725 milliseconds
Total Time:         312.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.5 seconds, 31.3%
Fitness Testing:    172.3 seconds, 55.2%
Report:              42.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 39308.088500000005
Test mean error for best: 19.65404
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -60.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 47.0606318457 
Correct output: 81.5444045338  | Program output: 57.5444045338 
Correct output: 107.605181994  | Program output: 82.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -95.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 10.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 24.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction tagged_71} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction float_flush} {:instruction integer_shove} {:instruction -84} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_yankdup integer_div -93 float_stackdepth integer_dup_times float_sin float_stackdepth float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth float_dec float_sin integer_yank integer_mult float_sub in1 integer_swap integer_stackdepth float_inc float_inc integer_stackdepth float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop tagged_71 float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_yankdup float_stackdepth float_shove integer_stackdepth float_min integer_mult float_flush integer_shove -84 float_dup_times tag_float_973)
Errors: [8.3853 10 2.0 2 38.0 2 0.9697 8 24.0 2 25.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 3.0 1 8.7264 10 25.0 2 31.0 2 15.0 2 28.0 2 1.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 605.021
Mean: 12.10042
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3140.8000404000018
Median total errors in population: 784.9845
Error averages by case: (112.80183129999907 10.232 110.6623238000001 4.6 120.35800770000003 4.006 117.51566959999995 8.992 123.39783499999986 4.085 127.74803270000027 4.606 148.88173809999847 12.179 125.35740060000023 3.816 115.81622880000022 3.819 122.47088750000258 11.379 117.89045689999885 10.293 121.44218959999982 4.486 119.08754649999973 4.252 109.74835559999968 9.381 124.98020130000025 4.76 120.0555460999999 4.094 103.33717120000009 5.114 133.42641619999998 3.896 114.63674679999983 11.101 109.07108119999991 3.714 123.0795498000001 4.019 101.71771769999891 10.139 121.44325749999983 4.468 115.42913949999982 3.727 124.24870939999977 5.038)
Error minima by case: (0.7583 9 0.0 0 1.0 1 0.0 0 14.4556 1 0.6052 1 9.8677 8 1.0 1 0.0 0 4.3791 9 8.3791 2 0.0 0 0.0 0 3.5471 1 5.0 1 1.0 1 10.9149 1 8.0 1 0.0 0 0.0 0 0.0 0 0.0594 1 1.0 1 0.0 0 0.5811 1)
Average genome size in population (length): 123.328
Average program size in population (points): 124.328
Average percent parens in population: 0.008
Minimum age in population: 98.34237145928465
Maximum age in population: 102.7009096136757
Average age in population: 100.6479502388801
Median age in population: 100.6578605343413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.513
Error (vector) diversity:			 0.552
Behavioral diversity:				 0.552
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 172733885
--- Timings ---
Current time: 1529615591999 milliseconds
Total Time:         317.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.1 seconds, 31.2%
Fitness Testing:    175.1 seconds, 55.2%
Report:              42.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 39008.624500000005
Test mean error for best: 19.50431
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -59.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 48.0606318457 
Correct output: 81.5444045338  | Program output: 58.5444045338 
Correct output: 107.605181994  | Program output: 83.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -94.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 11.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 26.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_add} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction print_float} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_970} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_add float_frominteger integer_yank integer_mult float_sub print_float integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_inc integer_stackdepth float_inc float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec tagged_970 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 1.0 1 38.0 2 0.0303 7 23.0 2 24.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 2.0 1 8.7264 10 25.0 2 31.0 2 14.0 2 28.0 2 3.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 599.0816
Mean: 11.981632
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3272.806998999999
Median total errors in population: 779.0496999999999
Error averages by case: (119.41939709999883 10.194 115.01621770000014 4.974 126.34103190000005 4.042 124.45311249999995 8.065 131.7373714999999 4.339 137.36213430000024 4.778 155.98951719999855 12.119 130.52009840000017 3.839 117.43209430000017 3.671 130.00780780000252 11.321 125.46450509999882 10.286 127.56099799999987 4.507 123.05039649999975 4.484 116.65581139999969 9.537 130.7407342000002 4.577 125.04634379999993 4.087 109.33841740000008 5.266 135.36573420000005 3.893 113.20399739999975 10.577 111.95288949999993 3.618 124.58733230000006 4.038 111.98266269999905 9.486 127.47231019999987 4.519 117.63952649999986 3.791 129.57655709999983 4.882)
Error minima by case: (0.3853 1 0.0 0 2.0 1 0.0303 1 0.5444 1 0.3948 1 3.8677 2 2.0 1 0.0 0 11.0529 2 10.5192 2 1.0 1 0.0 0 1.5471 1 5.2129 1 0.0 0 12.0 1 9.2221 1 0.3523 1 0.0 0 0.0 0 1.8812 1 2.0 1 0.0 0 1.1485 1)
Average genome size in population (length): 123.508
Average program size in population (points): 124.508
Average percent parens in population: 0.008
Minimum age in population: 99.34237145928465
Maximum age in population: 103.9164160367367
Average age in population: 102.0340565424943
Median age in population: 102.097487994183
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.51
Error (vector) diversity:			 0.544
Behavioral diversity:				 0.545
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 175822110
--- Timings ---
Current time: 1529615596859 milliseconds
Total Time:         322.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.5 seconds, 31.2%
Fitness Testing:    177.9 seconds, 55.2%
Report:              43.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 39008.624500000005
Test mean error for best: 19.50431
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -59.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 48.0606318457 
Correct output: 81.5444045338  | Program output: 58.5444045338 
Correct output: 107.605181994  | Program output: 83.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -94.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 11.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 26.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_add} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction print_float} {:instruction integer_pop} {:instruction print_integer} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_970} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min})
Best program: (integer_div float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat integer_fromfloat float_stackdepth float_stackdepth tagged_44 float_sin float_div integer_flush float_add float_frominteger integer_yank integer_mult float_sub print_float integer_pop print_integer float_dup float_sub integer_yankdup float_tan integer_stackdepth float_dec in1 float_inc integer_stackdepth float_inc float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec tagged_970 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min)
Errors: [8.3853 10 1.0 1 38.0 2 0.0303 7 23.0 2 24.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 2.0 1 8.7264 10 25.0 2 31.0 2 14.0 2 28.0 2 3.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 599.0816
Mean: 11.981632
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3155.1277744999984
Median total errors in population: 727.8739
Error averages by case: (113.70571719999906 10.204 111.79421180000014 4.79 127.49659520000007 4.032 106.63948079999999 8.512 121.3738747999999 4.38 127.45270610000021 4.714 151.17873339999858 12.154 131.94053860000014 3.867 114.50576210000011 3.493 125.44564260000227 11.335 119.80535239999905 10.345 129.04407089999992 4.596 118.95586519999986 4.252 110.81649359999969 9.429 124.5488031000001 4.469 126.30430609999993 4.068 104.59395910000003 5.16 131.51651750000002 3.836 99.18252459999988 10.059 109.17596049999992 3.415 122.62922760000005 4.026 104.42453939999905 8.81 128.93717439999995 4.583 115.88204199999988 3.871 124.7006754999999 4.677)
Error minima by case: (0.1879 2 0.0 0 3.0 1 0.0303 1 5.8723 1 2.3948 1 2.5536 3 3.0 1 0.0 0 10.7091 4 1.6969 2 1.1251 1 0.0 0 2.4529 1 1.0 1 0.0 0 6.0 1 1.0 1 0.3523 1 0.0 0 0.0 0 0.6164 1 3.0 1 0.0 0 1.273 1)
Average genome size in population (length): 125.062
Average program size in population (points): 126.062
Average percent parens in population: 0.008
Minimum age in population: 101.0075325145459
Maximum age in population: 105.3962110415426
Average age in population: 103.3601998919808
Median age in population: 103.3938246118935
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.475
Error (vector) diversity:			 0.502
Behavioral diversity:				 0.503
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 178949260
--- Timings ---
Current time: 1529615602266 milliseconds
Total Time:         327.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.2 seconds, 31.2%
Fitness Testing:    180.8 seconds, 55.2%
Report:              44.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_dup_times} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_yank} {:instruction float_div} {:instruction float_shove} {:instruction float_sin} {:instruction integer_yank} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (float_div float_dup_times -92 float_stackdepth integer_dup_times float_sin integer_yank integer_mult float_shove integer_yank float_div float_shove float_sin integer_yank float_sin float_div integer_flush float_yankdup integer_rot float_stackdepth float_dec float_sin integer_yank integer_mult float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 138
Size: 139
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3283.3886921
Median total errors in population: 769.7497000000001
Error averages by case: (119.63846149999843 10.237 116.33888070000013 4.83 133.32075460000004 4.239 110.51630400000003 8.524 121.0270133999999 4.448 128.64021860000025 4.685 157.43573839999848 12.145 138.7089905000002 4.093 121.85795290000026 3.578 131.78182990000278 11.354 125.20971679999857 10.349 134.88895829999987 4.771 123.9100428999997 4.333 116.27570709999969 9.444 131.3161838000002 4.762 133.1777070999999 4.203 101.08838880000013 5.323 138.1081782 4.002 105.6646344 9.945 115.66332249999988 3.508 128.59065820000012 4.217 105.13166129999887 8.683 134.94766319999985 4.741 123.80471979999982 4.118 130.98400519999984 4.829)
Error minima by case: (6.3853 3 0.0 0 1.0 1 0.0303 1 0.5444 1 1.3948 1 13.1323 2 1.0 1 0.0 0 1.9735 2 1.9857 2 2.0 1 0.0 0 1.5471 1 1.5951 1 1.0 1 4.0 1 4.0 1 0.3523 1 0.0 0 0.0 0 2.9406 1 1.0 1 0.0 0 1.1341 1)
Average genome size in population (length): 126.886
Average program size in population (points): 127.886
Average percent parens in population: 0.008
Minimum age in population: 102.0075325145459
Maximum age in population: 106.8040084366121
Average age in population: 104.5976200007772
Median age in population: 104.6365708878789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.487
Error (vector) diversity:			 0.515
Behavioral diversity:				 0.516
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 182122035
--- Timings ---
Current time: 1529615607393 milliseconds
Total Time:         332.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.6 seconds, 31.1%
Fitness Testing:    183.9 seconds, 55.3%
Report:              45.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction 79.40605270974905} {:instruction float_div} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (float_dup_times float_yankdup float_yankdup float_flush float_dec integer_yank 79.40605270974905 float_div float_dec float_dup_times integer_fromfloat float_stackdepth float_stackdepth float_sin float_div integer_flush float_yankdup integer_rot integer_yank integer_mult float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3442.528160100002
Median total errors in population: 723.6671
Error averages by case: (122.86089199999853 10.216 122.51651280000017 4.912 140.88302829999998 4.292 115.9245257000002 8.735 132.97314489999997 4.551 137.21050420000014 4.779 160.4648713999984 12.159 145.2037798000002 4.154 127.06812550000024 3.55 135.18645280000285 11.362 128.79456599999864 10.351 142.41762319999987 4.849 129.96849989999973 4.402 119.94015009999967 9.58 134.88496920000026 4.795 139.86222439999992 4.26 117.05416530000008 5.271 143.7585835999999 4.101 110.3806487 9.954 122.18775339999995 3.585 134.6408196000001 4.333 116.56121509999872 8.293 142.5672311999998 4.84 129.1950676999998 4.212 133.61180529999984 4.875)
Error minima by case: (0.6147 8 0.0 0 0.0 0 0.0303 1 5.5444 1 0.6052 1 8.1323 7 0.0 0 0.0 0 9.0265 8 0.0143 1 0.339 1 0.0 0 1.4529 1 0.0 0 0.0 0 6.2029 1 3.0 1 0.0 0 0.0 0 0.0 0 2.0 1 0.0 0 0.0 0 0.8373 1)
Average genome size in population (length): 127.544
Average program size in population (points): 128.544
Average percent parens in population: 0.008
Minimum age in population: 103.0075325145459
Maximum age in population: 108.1086114033425
Average age in population: 105.8443450385528
Median age in population: 105.9001494786992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.44
Error (vector) diversity:			 0.466
Behavioral diversity:				 0.468
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 185311160
--- Timings ---
Current time: 1529615612355 milliseconds
Total Time:         337.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.0 seconds, 31.1%
Fitness Testing:    186.8 seconds, 55.3%
Report:              45.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4039.098798300002
Median total errors in population: 813.241
Error averages by case: (152.120074399998 10.259 148.12364979999987 5.148 160.99477319999988 4.343 143.39802179999998 8.77 160.6153528000002 4.817 165.44306709999984 4.925 186.0320622999985 12.192 165.42418990000021 4.259 149.37419100000005 3.643 161.33738500000325 11.452 157.06396960000055 10.394 162.36371870000002 4.873 154.94878560000018 4.682 148.95568430000114 9.613 160.52357460000033 5.152 160.5362882999999 4.368 135.51262720000014 5.698 166.1194866999999 4.154 136.1563557000001 9.972 144.44435669999993 3.671 156.56860459999996 4.427 133.0238604999988 8.134 162.4677536999999 4.891 151.3290439999998 4.334 156.97392079999983 5.077)
Error minima by case: (1.6147 7 0.0 0 1.6925 1 0.0 0 1.1384 1 0.6052 1 1.1876 3 2.0 1 0.0 0 0.1775 8 8.2127 2 1.0 1 0.0 0 0.9598 1 2.0 1 0.0 0 5.7971 1 1.0 1 0.0 0 0.0 0 0.0 0 0.9485 1 2.0 1 0.0 0 0.1627 1)
Average genome size in population (length): 128.357
Average program size in population (points): 129.357
Average percent parens in population: 0.008
Minimum age in population: 104.0075325145459
Maximum age in population: 109.3387862412303
Average age in population: 107.1174084554804
Median age in population: 107.1618476904142
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.48
Error (vector) diversity:			 0.505
Behavioral diversity:				 0.506
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 188520510
--- Timings ---
Current time: 1529615617470 milliseconds
Total Time:         342.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.4 seconds, 31.1%
Fitness Testing:    189.7 seconds, 55.4%
Report:              46.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3972.4400649000004
Median total errors in population: 777.4594
Error averages by case: (148.85452029999772 10.265 145.5902902999999 5.222 158.42516000000003 4.305 138.72649299999995 8.78 156.43622550000018 4.877 163.3901799 5.061 183.16789029999845 12.175 162.07453650000016 4.206 145.50013160000006 3.578 158.3447319000034 11.423 153.7615986999997 10.392 159.79099629999982 4.868 152.63789099999994 4.78 145.38278830000107 9.576 155.93071780000034 5.071 157.23149439999997 4.34 137.72452190000024 5.597 162.91155619999995 4.127 133.03186070000007 9.941 141.61041499999993 3.607 154.1400302 4.415 137.30633439999866 8.106 159.65349829999988 4.873 147.58846649999987 4.311 154.17473589999983 5.157)
Error minima by case: (0.6147 8 0.0 0 0.0 0 0.0 0 1.1384 1 1.3948 1 21.2737 8 0.0 0 0.0 0 5.9735 8 2.0143 2 1.0 1 0.0 0 1.4529 1 0.0 0 0.0 0 2.5237 1 2.0 1 0.3523 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.9145 1)
Average genome size in population (length): 129.244
Average program size in population (points): 130.244
Average percent parens in population: 0.008
Minimum age in population: 106.1716642222443
Maximum age in population: 110.4956208684083
Average age in population: 108.4510190340564
Median age in population: 108.5016564517109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.469
Error (vector) diversity:			 0.484
Behavioral diversity:				 0.485
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 191752110
--- Timings ---
Current time: 1529615622486 milliseconds
Total Time:         347.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.0 seconds, 31.0%
Fitness Testing:    192.6 seconds, 55.4%
Report:              47.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div float_dup float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3428.843867399999
Median total errors in population: 775.0496999999999
Error averages by case: (124.38885219999808 10.179 122.56290960000011 4.801 138.10281550000002 4.067 116.48605729999998 8.589 134.57016959999996 4.553 140.04005920000014 4.821 159.54264589999855 12.142 142.1792956000002 3.964 125.67451900000022 3.321 134.05778220000306 11.323 130.19895559999816 10.331 139.45263119999987 4.65 129.91899729999955 4.429 121.84498849999969 9.624 136.5563511000003 4.904 137.12309299999993 4.058 115.08979150000026 5.386 143.25524349999998 3.884 111.65559270000033 9.905 121.24092069999993 3.387 133.15754430000004 4.144 115.03879859999884 7.847 139.79409109999986 4.622 127.78153139999979 4.034 135.24123079999984 4.924)
Error minima by case: (0.788 8 0.0 0 1.0 1 0.0 0 3.0 1 1.6052 1 1.9004 8 1.0 1 0.0 0 0.2653 2 0.7016 2 0.0 0 0.0 0 1.5471 1 0.0 0 0.0 0 0.2029 1 3.0 1 0.2268 1 0.0 0 0.0 0 0.0594 1 1.0 1 0.0 0 0.3143 1)
Average genome size in population (length): 129.502
Average program size in population (points): 130.502
Average percent parens in population: 0.008
Minimum age in population: 107.7225569335683
Maximum age in population: 111.708797794858
Average age in population: 109.7319094678162
Median age in population: 109.7567431797848
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.481
Error (vector) diversity:			 0.498
Behavioral diversity:				 0.499
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 194990085
--- Timings ---
Current time: 1529615627466 milliseconds
Total Time:         352.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.3 seconds, 31.0%
Fitness Testing:    195.7 seconds, 55.5%
Report:              47.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div float_dup float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3732.649521699999
Median total errors in population: 775.0496999999999
Error averages by case: (137.54361339999787 10.242 137.60302869999998 4.835 154.12839640000004 4.258 121.23370319999985 8.496 136.81231369999995 4.53 141.30416470000023 4.815 173.7301110999984 12.18 158.4435487000002 4.119 140.61040970000022 3.47 148.7932612000033 11.367 143.23377959999917 10.385 155.41756029999985 4.811 144.8938519999998 4.512 134.37707739999988 9.573 145.3268655000003 4.882 153.3502689999999 4.271 123.89010140000019 5.384 156.45381550000002 4.017 119.49615890000042 9.845 135.48255109999994 3.54 147.89539390000004 4.305 123.20934459999869 7.737 155.80559349999984 4.796 142.89090419999982 4.201 145.32770399999987 4.825)
Error minima by case: (6.3853 8 0.0 0 1.0 1 0.0 0 0.5444 1 0.3948 1 10.1323 8 1.0 1 0.0 0 10.9735 8 18.0143 3 0.0 0 0.0 0 1.4529 1 0.0 0 0.0 0 6.509 1 3.0 1 0.0 0 0.0 0 0.0 0 1.0 1 1.0 1 0.0 0 1.3143 1)
Average genome size in population (length): 130.022
Average program size in population (points): 131.022
Average percent parens in population: 0.008
Minimum age in population: 108.8892140187128
Maximum age in population: 113.1888990724083
Average age in population: 110.9628637487078
Median age in population: 110.9965560056248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.465
Error (vector) diversity:			 0.498
Behavioral diversity:				 0.499
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 198241035
--- Timings ---
Current time: 1529615632744 milliseconds
Total Time:         358.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.8 seconds, 30.9%
Fitness Testing:    198.7 seconds, 55.5%
Report:              48.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div float_dup float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec in2 float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush integer_shove -83 float_dup_times tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3615.037528500001
Median total errors in population: 795.1464000000001
Error averages by case: (133.08998359999796 10.247 131.79191930000013 4.777 145.51825060000002 4.2 125.10868709999978 8.685 140.27253989999997 4.63 145.69934580000015 4.838 168.86936359999856 12.188 149.2794758000002 4.11 132.26906380000025 3.434 143.3867943000032 11.397 138.18983479999906 10.418 146.96094099999982 4.765 139.06566109999983 4.596 129.21327189999968 9.499 142.61468820000036 5.004 144.9691220999999 4.266 123.05059910000021 5.517 150.0188013 3.987 118.34666460000038 10.033 128.52296339999995 3.509 140.25597400000004 4.26 120.24273929999876 7.715 147.3420039999998 4.754 134.72411699999986 4.181 140.2207228999998 5.004)
Error minima by case: (4.3891 2 0.0 0 2.0 1 0.0 0 5.4721 1 0.3948 1 6.1323 2 2.0 1 0.0 0 19.9735 2 16.5554 2 1.0 1 0.0 0 1.5471 1 2.0 1 0.0 0 10.5237 1 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0 2.0 1 0.0 0 3.0 1)
Average genome size in population (length): 129.387
Average program size in population (points): 130.387
Average percent parens in population: 0.008
Minimum age in population: 110.2330773944353
Maximum age in population: 114.3817333986469
Average age in population: 112.280084504883
Median age in population: 112.3324429685743
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.48
Error (vector) diversity:			 0.507
Behavioral diversity:				 0.508
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 201476160
--- Timings ---
Current time: 1529615637755 milliseconds
Total Time:         363.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.1 seconds, 30.9%
Fitness Testing:    201.6 seconds, 55.5%
Report:              49.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mult} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_mult float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4028.0493898000013
Median total errors in population: 785.5045
Error averages by case: (151.87984149999804 10.262 148.5310545999998 4.752 161.3326028999999 4.317 139.57335039999995 8.542 157.1229009000001 4.705 162.53134020000002 4.929 185.15847479999837 12.169 165.68119150000018 4.241 149.44977640000005 3.584 160.14939770000322 11.401 158.28254070000105 10.41 162.7396087999999 4.845 155.3882336000003 4.713 149.02990810000136 9.776 159.17035190000033 5.164 160.89291819999988 4.368 139.18444680000013 5.516 166.21057430000005 4.135 134.47592090000026 9.955 145.16369249999988 3.625 156.8173845 4.391 131.55258129999868 7.772 163.1604878999999 4.854 151.67794149999983 4.292 155.02386789999977 5.151)
Error minima by case: (1.6147 1 0.0 0 0.0 0 0.0303 1 6.9606 1 0.3948 1 2.1323 2 0.0 0 0.0 0 0.9735 1 9.9857 2 0.0 0 0.0 0 0.5471 1 1.0 1 0.0 0 3.7971 1 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 1.0 1)
Average genome size in population (length): 129.368
Average program size in population (points): 130.368
Average percent parens in population: 0.008
Minimum age in population: 111.2330773944353
Maximum age in population: 115.6693631930853
Average age in population: 113.6227281816919
Median age in population: 113.6371532346649
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.494
Error (vector) diversity:			 0.52
Behavioral diversity:				 0.521
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 204710885
--- Timings ---
Current time: 1529615642888 milliseconds
Total Time:         368.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.6 seconds, 30.8%
Fitness Testing:    204.7 seconds, 55.6%
Report:              50.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3919.6272698000007
Median total errors in population: 776.0496999999999
Error averages by case: (145.87675369999826 10.261 142.80941270000005 4.905 157.08647969999993 4.4 135.31096759999974 8.793 151.2208712 4.755 157.1678785000001 4.98 180.20877729999845 12.158 161.19234990000018 4.281 144.8539501000002 3.649 154.87415090000306 11.415 150.78362039999928 10.423 159.39881899999995 4.964 151.0981006 4.919 142.3005251000002 9.636 155.40431940000033 5.077 156.1539156999999 4.407 135.75363940000022 5.549 161.51844049999988 4.171 132.7616237000004 10.176 140.54406769999989 3.71 151.9040156 4.473 132.8568198999987 7.686 158.83891499999984 4.923 147.10857569999985 4.369 153.41328049999984 5.107)
Error minima by case: (5.2513 9 0.0 0 0.0 0 0.0011 1 0.5444 1 0.3948 1 21.1323 8 0.0 0 0.0 0 6.9735 9 6.9715 2 0.0 0 0.0 0 0.5471 1 0.0 0 0.0 0 6.0 1 3.0 1 0.049 1 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 0.7318 1)
Average genome size in population (length): 128.772
Average program size in population (points): 129.772
Average percent parens in population: 0.008
Minimum age in population: 112.6242527467178
Maximum age in population: 117.1798817357484
Average age in population: 114.8423425088719
Median age in population: 114.8749072633745
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.474
Error (vector) diversity:			 0.5
Behavioral diversity:				 0.5
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 207930585
--- Timings ---
Current time: 1529615647736 milliseconds
Total Time:         373.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.9 seconds, 30.8%
Fitness Testing:    207.5 seconds, 55.6%
Report:              50.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3706.959418800001
Median total errors in population: 786.6655499999999
Error averages by case: (139.22965049999812 10.23 136.08420619999998 4.603 148.31451140000001 4.371 124.00460449999942 8.665 139.2568847 4.796 148.3136102 4.875 173.2678210999984 12.115 153.03847270000023 4.264 136.81511860000026 3.62 147.80277700000303 11.362 143.97088449999944 10.392 149.8181829999999 4.924 143.3766827 4.723 135.34099340000006 9.573 149.6063978000003 5.064 148.03780849999984 4.389 120.38344340000019 5.74 152.82181829999996 4.205 124.80639630000047 9.997 131.87786009999994 3.697 144.1414578 4.442 121.06652679999877 7.985 150.25186369999986 4.904 139.18532379999982 4.355 147.74012179999986 5.115)
Error minima by case: (0.6147 2 0.0 0 1.0 1 0.0 0 0.5444 1 0.3948 1 0.5177 3 1.0 1 0.0 0 4.9735 2 10.0143 1 1.0 1 0.0 0 0.4529 1 2.0 1 0.0 0 1.7971 1 5.0 1 0.1025 1 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 1.2874 1)
Average genome size in population (length): 129.178
Average program size in population (points): 130.178
Average percent parens in population: 0.008
Minimum age in population: 113.6334571961951
Maximum age in population: 118.2042552763567
Average age in population: 116.1621144440415
Median age in population: 116.1864263810341
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.467
Error (vector) diversity:			 0.489
Behavioral diversity:				 0.49
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 211160260
--- Timings ---
Current time: 1529615652894 milliseconds
Total Time:         378.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.3 seconds, 30.7%
Fitness Testing:    210.6 seconds, 55.7%
Report:              51.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_times float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_dup_times float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3829.158944500001
Median total errors in population: 764.0
Error averages by case: (142.4981716999982 10.245 140.4119459000001 4.399 155.46028110000003 4.244 132.28736809999953 8.787 144.97671769999997 4.77 150.86365930000022 4.939 178.92201029999856 12.18 159.15368010000014 4.11 140.22190110000017 3.426 153.4016926000031 11.413 147.25789899999927 10.454 156.79079759999985 4.815 147.10857979999977 4.577 138.53880850000016 9.619 151.2480136000002 4.723 153.91505509999988 4.213 129.79711340000023 5.517 156.60184309999997 4.033 128.42467790000035 10.206 136.3644184999999 3.553 146.81336 4.241 132.88855409999871 7.77 157.06406209999983 4.792 142.30522169999992 4.165 149.91911219999983 4.733)
Error minima by case: (0.6147 1 0.0 0 0.0 0 0.0303 1 0.1384 1 0.3948 1 8.1323 9 0.0 0 0.0 0 2.0265 8 1.8668 8 1.0 1 0.0 0 0.2563 1 2.0 1 0.0 0 0.7971 1 0.0 0 0.0284 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 128.206
Average program size in population (points): 129.206
Average percent parens in population: 0.008
Minimum age in population: 114.6426616456723
Maximum age in population: 119.7825954874504
Average age in population: 117.525766413668
Median age in population: 117.5513906189379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.463
Error (vector) diversity:			 0.493
Behavioral diversity:				 0.494
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 214365735
--- Timings ---
Current time: 1529615657856 milliseconds
Total Time:         383.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.7 seconds, 30.7%
Fitness Testing:    213.5 seconds, 55.7%
Report:              52.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_yank float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3446.4540977000006
Median total errors in population: 753.82925
Error averages by case: (126.26019489999838 10.238 122.58034370000013 3.938 137.546357 4.097 120.7150025999994 8.528 136.68807700000005 4.498 141.47877340000008 4.779 162.0087460999984 12.146 141.2851776000002 4.002 124.03337210000018 3.35 136.28577920000296 11.348 132.3572301999987 10.369 138.96134749999982 4.659 128.5543331999997 4.24 123.8969137999997 9.61 135.81228300000035 4.776 136.52838499999993 4.104 119.12151270000011 5.444 141.65777340000002 3.926 116.18802120000048 10.008 119.83852579999996 3.419 131.5955292 4.171 119.94262739999863 7.995 139.4286188999999 4.656 126.12438289999983 4.043 134.3457898999998 4.875)
Error minima by case: (0.5196 8 0.0 0 0.0 0 0.0 0 4.1384 1 0.6052 2 3.8677 2 0.0 0 0.0 0 10.7708 3 7.0143 2 0.0 0 0.0 0 0.4529 1 0.0 0 1.0 1 1.5939 1 0.0 0 0.0065 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.4092 1)
Average genome size in population (length): 126.813
Average program size in population (points): 127.813
Average percent parens in population: 0.008
Minimum age in population: 116.5837868638191
Maximum age in population: 121.0496825339356
Average age in population: 118.9071443748927
Median age in population: 118.9540834132018
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.461
Error (vector) diversity:			 0.485
Behavioral diversity:				 0.486
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 217536410
--- Timings ---
Current time: 1529615662648 milliseconds
Total Time:         388.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.0 seconds, 30.7%
Fitness Testing:    216.3 seconds, 55.7%
Report:              52.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 38852.494399999996
Test mean error for best: 19.42625
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -16} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction -83} {:instruction float_dup_times} {:instruction float_rot})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -16 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush integer_shove -83 float_dup_times float_rot)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3325.977068000002
Median total errors in population: 637.3145
Error averages by case: (121.33950889999853 10.146 115.14437900000009 3.265 135.28688830000002 3.961 116.19173599999947 8.814 127.72395139999992 4.33 133.09504410000017 4.628 158.07640589999843 12.063 139.1679512000001 3.88 120.58471150000014 3.093 132.0880845000027 11.274 127.13884319999862 10.304 136.6463823999999 4.583 118.97335119999983 3.709 118.06787899999968 9.611 133.4034462000002 4.565 133.92447569999993 3.939 111.42403710000016 5.118 139.0138903 3.811 110.53407230000043 9.973 116.67764819999992 3.253 128.46727070000006 4.04 111.80361409999875 7.638 136.91887729999982 4.56 122.68383119999987 3.889 132.58178829999986 4.572)
Error minima by case: (2.3853 2 0.0 0 0.0 0 0.0303 1 0.4556 1 0.3948 1 15.7361 3 0.0 0 0.0 0 18.9735 3 14.0143 2 0.0 0 0.0 0 0.4529 1 0.0 0 0.0 0 7.0 1 3.0 1 0.0065 1 0.0 0 0.0 0 0.1351 1 0.0 0 0.0 0 1.7506 1)
Average genome size in population (length): 125.606
Average program size in population (points): 126.606
Average percent parens in population: 0.008
Minimum age in population: 117.8751070404655
Maximum age in population: 122.6984808305318
Average age in population: 120.2563646467702
Median age in population: 120.2635684947648
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.42
Error (vector) diversity:			 0.436
Behavioral diversity:				 0.437
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 220676835
--- Timings ---
Current time: 1529615667325 milliseconds
Total Time:         392.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.3 seconds, 30.6%
Fitness Testing:    219.1 seconds, 55.8%
Report:              53.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_rot} {:instruction float_div} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth})
Best program: (integer_flush float_dup_times integer_stackdepth integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_rot float_div float_sin integer_fromfloat integer_flush float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3371.2717473000007
Median total errors in population: 689.50535
Error averages by case: (124.30506779999862 10.228 115.07058750000009 3.386 134.97010540000005 4.093 118.20829169999939 8.891 136.08666230000003 4.581 141.65470610000003 4.865 159.6836151999984 12.144 138.4066389000002 4.006 121.1741611000002 3.228 133.3401513000027 11.372 129.57195479999862 10.416 136.3797131999999 4.68 119.99368909999984 3.847 120.85409239999969 9.481 134.55405120000026 4.803 133.93012739999998 4.091 116.41598250000008 5.346 138.64433959999997 3.898 114.33215940000056 10.049 116.83634789999996 3.342 128.89937530000003 4.148 114.14912679999873 7.982 136.7279440999999 4.664 123.32531739999985 4.018 131.36753889999983 4.831)
Error minima by case: (0.6147 1 0.0 0 1.0 1 0.0303 1 15.0 1 0.6052 2 4.1323 8 1.0 1 0.0 0 2.9735 9 11.0143 3 0.0 0 0.0 0 0.4529 1 0.0 0 0.0 0 5.7971 1 1.0 1 0.1139 1 0.0 0 0.0 0 0.116 1 1.0 1 0.0 0 1.3143 1)
Average genome size in population (length): 124.191
Average program size in population (points): 125.191
Average percent parens in population: 0.008
Minimum age in population: 119.2976218049168
Maximum age in population: 123.9106005551792
Average age in population: 121.507757375081
Median age in population: 121.5174042651718
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.422
Error (vector) diversity:			 0.443
Behavioral diversity:				 0.443
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 223782110
--- Timings ---
Current time: 1529615672236 milliseconds
Total Time:         397.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.7 seconds, 30.6%
Fitness Testing:    222.0 seconds, 55.8%
Report:              53.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2978.8339746000024
Median total errors in population: 636.1662
Error averages by case: (107.77545439999885 10.212 101.03473520000011 3.169 120.40147049999995 3.929 103.17689019999936 8.844 117.79208219999992 4.156 121.12666080000025 4.431 144.82516329999837 12.15 124.0886736000002 3.845 104.85073520000017 3.027 118.26105750000274 11.323 113.08685249999887 10.374 121.86357889999975 4.529 105.82759819999977 3.712 103.57483379999971 9.582 119.2144932000003 4.589 118.82981359999992 3.957 99.75632079999997 5.001 123.62861920000012 3.751 100.25075910000052 10.012 101.16618189999993 3.187 113.19569229999998 3.962 98.98892549999864 7.482 122.32454169999981 4.54 107.18331709999981 3.843 118.53452389999983 4.468)
Error minima by case: (0.6147 2 0.0 0 0.0 0 0.0303 1 2.1384 1 0.6052 1 0.8677 9 0.0 0 0.0 0 2.0265 8 6.9857 1 0.0 0 0.0 0 0.4529 1 1.0286 1 0.0 0 0.7971 1 1.0 1 0.2113 1 0.0 0 0.0 0 1.8854 1 0.0 0 0.0 0 0.4283 1)
Average genome size in population (length): 124.296
Average program size in population (points): 125.296
Average percent parens in population: 0.008
Minimum age in population: 120.8385935449372
Maximum age in population: 124.6807445354025
Average age in population: 122.8619142387844
Median age in population: 122.879554492616
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.424
Error (vector) diversity:			 0.437
Behavioral diversity:				 0.437
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 226889885
--- Timings ---
Current time: 1529615677085 milliseconds
Total Time:         402.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.1 seconds, 30.6%
Fitness Testing:    225.0 seconds, 55.9%
Report:              54.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_swap} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_div float_yankdup float_yankdup float_flush float_swap 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_dup_times float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3379.007016800002
Median total errors in population: 640.8287
Error averages by case: (122.73053469999844 10.278 117.1928896000001 3.364 137.17079029999996 4.127 116.14502059999933 8.983 131.2567748999999 4.501 136.90117230000024 4.703 158.18593889999858 12.182 141.80548380000016 4.011 121.2995924000002 3.211 132.24429020000278 11.371 127.90823039999849 10.427 139.57589739999992 4.745 121.68471699999974 3.855 118.97192709999968 9.529 134.45614150000026 4.544 136.41520559999992 4.104 115.6487522000001 5.262 139.10808120000002 3.937 115.28714990000053 10.182 117.47694159999999 3.322 128.9983843 4.145 118.87470699999871 7.493 139.85983609999988 4.729 123.49651809999986 4.038 134.85503969999988 4.414)
Error minima by case: (4.3853 2 0.0 0 0.0 0 0.0303 1 6.8616 1 0.3948 2 22.1323 2 0.0 0 0.0 0 5.9735 1 14.9857 8 0.0 0 0.0 0 0.2736 1 4.0 1 0.0 0 7.0 1 7.0 1 0.3523 1 0.0 0 0.0 0 0.3139 1 0.0 0 0.0 0 0.6857 1)
Average genome size in population (length): 124.146
Average program size in population (points): 125.146
Average percent parens in population: 0.008
Minimum age in population: 121.9411285267225
Maximum age in population: 126.2138945917069
Average age in population: 124.1382510656512
Median age in population: 124.1798358562836
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.388
Error (vector) diversity:			 0.404
Behavioral diversity:				 0.405
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 229994260
--- Timings ---
Current time: 1529615681896 milliseconds
Total Time:         407.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.3 seconds, 30.5%
Fitness Testing:    227.9 seconds, 55.9%
Report:              55.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sin} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_sin integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_sub integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min float_yankdup float_stackdepth float_shove integer_stackdepth integer_mult float_dec integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2636.4739132000013
Median total errors in population: 666.0203
Error averages by case: (93.99381199999944 10.213 84.7717869000001 2.939 106.5690308 3.815 89.27592319999944 8.659 104.66649019999991 4.23 111.4698989000002 4.546 130.54724749999855 12.138 110.63008840000016 3.732 91.73940630000017 2.974 103.67891500000184 11.287 99.5534662999994 10.343 108.19955969999981 4.42 90.34444969999997 3.54 90.56373309999967 9.454 105.1625018000002 4.493 105.01836729999994 3.838 84.39985939999998 4.97 110.94239330000006 3.636 85.11901760000038 9.893 87.76294339999997 3.062 101.29817629999995 3.877 87.61059709999887 7.676 108.75132339999988 4.423 94.00684459999987 3.708 104.03608099999983 4.496)
Error minima by case: (0.6147 8 0.0 0 0.0 0 0.0 0 2.0075 1 0.6052 1 5.8677 2 0.0 0 0.0 0 15.6407 2 4.9715 8 1.0 1 0.0 0 0.3384 1 2.0 1 0.0 0 6.8968 1 5.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.2782 1)
Average genome size in population (length): 123.319
Average program size in population (points): 124.319
Average percent parens in population: 0.008
Minimum age in population: 122.9917609357093
Maximum age in population: 127.3843121153658
Average age in population: 125.4690856193583
Median age in population: 125.5313083541914
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.416
Error (vector) diversity:			 0.436
Behavioral diversity:				 0.437
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 233077835
--- Timings ---
Current time: 1529615686599 milliseconds
Total Time:         412.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.7 seconds, 30.5%
Fitness Testing:    230.7 seconds, 56.0%
Report:              55.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction integer_inc} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction 60} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_inc} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth float_dup_times integer_fromfloat float_stackdepth float_stackdepth float_stackdepth tagged_9882 float_sin integer_inc float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 60 integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_yankdup float_shove integer_inc float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2847.4492113000024
Median total errors in population: 666.0203
Error averages by case: (104.3441505999991 10.22 95.66212670000013 3.507 113.34433999999999 4.087 96.96476779999942 8.878 115.3294937999999 4.531 121.02702740000026 4.775 140.22665069999852 12.146 117.8940530000002 3.941 98.24669980000014 3.178 113.76271290000241 11.35 109.31208349999926 10.395 114.92433339999984 4.67 101.62154629999982 4.006 100.11285809999964 9.403 112.43599220000014 4.652 112.22092989999992 4.076 97.41144320000001 5.368 116.81646260000008 3.867 92.53549050000044 10.109 94.06975669999994 3.288 106.58601489999998 4.112 93.3994380999987 7.603 115.52137829999981 4.653 100.93449889999985 3.937 111.42596199999984 4.567)
Error minima by case: (0.8878 2 0.0 0 1.4719 1 0.0303 1 0.8616 1 0.3948 1 0.8677 2 1.4719 1 0.0 0 15.0265 2 6.0143 3 1.0 1 0.0 0 0.4529 1 1.0 1 0.0 0 1.7971 1 4.0 1 0.3239 1 0.0 0 0.0 0 0.0 0 1.4719 1 0.0 0 0.327 1)
Average genome size in population (length): 123.179
Average program size in population (points): 124.179
Average percent parens in population: 0.008
Minimum age in population: 124.3066285284419
Maximum age in population: 128.7694620782713
Average age in population: 126.8072414198573
Median age in population: 126.8365783138522
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.422
Error (vector) diversity:			 0.436
Behavioral diversity:				 0.437
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 236157860
--- Timings ---
Current time: 1529615691505 milliseconds
Total Time:         417.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.9 seconds, 30.4%
Fitness Testing:    233.7 seconds, 56.0%
Report:              56.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction integer_add} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup})
Best program: (integer_flush float_dup_times integer_pop integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float integer_add tagged_518 integer_add float_yankdup)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2948.4761778000006
Median total errors in population: 703.4755
Error averages by case: (104.18046299999843 10.211 100.42980210000012 3.426 118.1866634 3.946 103.52488589999929 8.855 119.1567979999999 4.434 124.06261100000033 4.648 141.44896719999852 12.091 122.3732024000002 3.893 103.90531460000018 3.093 115.2335599000027 11.265 109.7774137999986 10.32 119.56254299999986 4.545 106.14599889999973 3.953 100.73814119999969 9.534 117.49867140000023 4.671 116.9433289999999 3.99 99.5821541000002 5.321 122.36972790000003 3.783 100.03893600000056 10.066 99.58389409999998 3.232 111.84424230000005 4.028 99.54532579999866 7.662 119.99517179999988 4.557 106.11091169999983 3.858 116.20044929999985 4.655)
Error minima by case: (0.6147 2 0.0 0 0.0 0 0.0303 1 0.5444 1 0.6052 2 4.0 2 0.0 0 0.0 0 4.0 2 3.2308 2 1.0 1 0.0 0 0.388 1 5.0 1 0.0 0 2.9578 1 8.0 1 0.0919 1 0.0 0 0.0 0 0.1316 1 0.0 0 0.0 0 2.535 1)
Average genome size in population (length): 123.282
Average program size in population (points): 124.282
Average percent parens in population: 0.008
Minimum age in population: 125.8575111563846
Maximum age in population: 129.9980637466619
Average age in population: 128.1104698138315
Median age in population: 128.1548349292303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.422
Error (vector) diversity:			 0.438
Behavioral diversity:				 0.438
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 239240335
--- Timings ---
Current time: 1529615696501 milliseconds
Total Time:         421.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.3 seconds, 30.4%
Fitness Testing:    236.5 seconds, 56.1%
Report:              56.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_rot} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_970} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 10} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub})
Best program: (integer_stackdepth float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth float_stackdepth tagged_9882 float_sin float_rot float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec tagged_970 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 10 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3035.9320071000016
Median total errors in population: 668.0203
Error averages by case: (108.16450269999874 10.222 103.58660210000009 3.338 122.80265880000002 3.909 107.74082809999939 8.611 120.7338964999999 4.237 125.35265240000022 4.53 145.39184249999852 12.161 126.82760180000008 3.793 107.74118650000008 3.002 119.81698430000264 11.331 114.60237859999894 10.372 124.00226649999989 4.485 109.6505580999999 3.922 105.49399919999965 9.613 119.69592790000023 4.545 121.46920399999995 3.905 102.45763500000004 5.242 126.27203980000003 3.748 101.66774770000048 10.052 103.67114829999994 3.193 115.35400890000003 3.917 103.26405339999863 7.623 124.20755379999989 4.509 110.05835779999994 3.785 117.40437239999977 4.457)
Error minima by case: (0.6147 2 0.0 0 0.0 0 0.0303 1 0.5444 1 0.3948 1 4.8677 8 0.0 0 0.0 0 0.0265 8 6.1229 3 0.0 0 0.0 0 0.4529 1 5.0 1 0.0 0 2.7971 1 2.5743 1 0.3523 1 0.0 0 0.0 0 0.9417 1 0.0 0 0.0 0 0.3527 1)
Average genome size in population (length): 123.086
Average program size in population (points): 124.086
Average percent parens in population: 0.008
Minimum age in population: 126.8575111563846
Maximum age in population: 131.4386611261649
Average age in population: 129.5066854754927
Median age in population: 129.5467467976819
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.415
Error (vector) diversity:			 0.431
Behavioral diversity:				 0.431
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 242318210
--- Timings ---
Current time: 1529615701268 milliseconds
Total Time:         426.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.7 seconds, 30.4%
Fitness Testing:    239.3 seconds, 56.1%
Report:              57.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 38916.97089999999
Test mean error for best: 19.45849
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction integer_min} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min})
Best program: (integer_div float_yankdup float_yankdup float_yankdup integer_div -93 float_stackdepth integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add integer_min float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_pop float_stackdepth float_shove integer_stackdepth float_min)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2902.7068416000006
Median total errors in population: 666.6068
Error averages by case: (105.55596319999921 10.222 97.46409850000009 3.136 115.73834970000003 3.981 99.12861179999939 8.77 116.9888556999999 4.49 123.01426370000024 4.778 141.69329939999855 12.097 121.18444220000019 3.843 102.63135040000016 3.082 114.90805400000228 11.273 111.49130079999914 10.324 117.16232159999984 4.525 102.79247839999991 3.737 102.32609819999966 9.583 115.16079530000023 4.808 115.34923609999994 3.956 95.42788729999994 5.274 119.48452270000006 3.801 93.48973890000049 9.922 97.48613619999993 3.235 109.9812322 3.981 97.56515309999877 7.524 117.65352059999988 4.512 104.92675879999986 3.84 114.70337279999983 4.705)
Error minima by case: (0.3853 1 0.0 0 0.0 0 0.0 0 0.1021 1 0.6052 1 25.3099 1 0.0 0 0.0 0 3.0265 2 2.0143 2 0.0 0 0.0 0 0.4529 1 1.0 1 1.0 1 0.2029 1 2.0 1 0.0 0 0.0 0 0.0 0 0.4291 1 0.0 0 0.0 0 1.3143 1)
Average genome size in population (length): 122.927
Average program size in population (points): 123.927
Average percent parens in population: 0.008
Minimum age in population: 127.8575111563846
Maximum age in population: 132.717242829787
Average age in population: 130.7543155509397
Median age in population: 130.7956360338439
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.427
Error (vector) diversity:			 0.442
Behavioral diversity:				 0.443
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 245392035
--- Timings ---
Current time: 1529615705963 milliseconds
Total Time:         431.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.0 seconds, 30.4%
Fitness Testing:    242.0 seconds, 56.1%
Report:              58.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub})
Best program: (integer_div integer_flush float_dup_times float_div float_stackdepth float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup integer_div integer_fromfloat float_flush float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3216.0800666000014
Median total errors in population: 658.6068
Error averages by case: (118.16755269999865 10.197 108.4236000000001 3.179 128.20526460000002 4.074 113.05925109999934 8.773 128.9173043999999 4.374 134.88654260000015 4.689 154.93743159999838 12.141 132.52924270000017 3.967 114.43585920000014 3.203 128.94331340000278 11.32 123.88125699999874 10.381 129.68869079999988 4.656 113.73666069999986 3.783 115.02478179999969 9.562 127.53123430000018 4.758 127.61243239999995 4.092 110.3289306000001 5.154 132.26316000000006 3.889 107.74392860000052 9.95 109.84771659999991 3.33 122.97089230000003 4.094 108.88685959999863 7.582 130.17686509999987 4.638 116.83758199999983 3.983 126.62071249999991 4.654)
Error minima by case: (0.3853 2 0.0 0 3.0 1 0.0 0 0.5444 1 1.6052 2 6.8677 8 3.0 1 0.0 0 11.9735 8 11.0143 3 0.8497 1 0.0 0 0.2736 1 1.0 1 0.0 0 8.7971 1 2.0 1 0.3239 1 0.0 0 0.0 0 0.041 1 3.0 1 0.0 0 0.4192 1)
Average genome size in population (length): 122.848
Average program size in population (points): 123.848
Average percent parens in population: 0.008
Minimum age in population: 130.1421036842779
Maximum age in population: 134.2468136019149
Average age in population: 132.0954020202176
Median age in population: 132.1396816364829
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.403
Error (vector) diversity:			 0.419
Behavioral diversity:				 0.42
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 248463885
--- Timings ---
Current time: 1529615710625 milliseconds
Total Time:         436.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.4 seconds, 30.4%
Fitness Testing:    244.8 seconds, 56.1%
Report:              58.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction integer_inc} {:instruction float_sin} {:instruction float_div} {:instruction float_div} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_div integer_flush float_sub float_stackdepth tagged_9882 integer_inc float_sin float_div float_div integer_flush float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3086.1434677000016
Median total errors in population: 665.5203
Error averages by case: (116.02757739999836 10.212 105.1853436000001 3.173 123.42750160000006 3.91 109.14508989999943 8.867 126.34683849999989 4.523 132.74868410000022 4.65 151.91550579999853 12.127 127.22134110000017 3.771 107.73559060000017 3.0 124.9186481000028 11.319 121.6415223999985 10.359 124.76330629999987 4.509 110.04745069999987 3.697 112.61211789999972 9.454 120.68842780000016 4.508 121.84595909999996 3.894 102.24794840000004 5.298 126.51659360000008 3.72 98.05969290000046 10.025 103.88401849999997 3.161 115.78988610000005 3.964 101.86328489999882 7.699 125.02139169999988 4.504 109.82074229999986 3.755 118.12900439999986 4.441)
Error minima by case: (3.715 2 0.0 0 0.0 0 0.0 0 0.0 0 0.3948 1 1.285 8 0.0 0 0.0 0 12.0265 8 3.0143 1 1.0 1 0.0 0 0.191 1 2.0 1 3.0 1 5.0851 1 5.0 1 0.1866 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.1555 1)
Average genome size in population (length): 123.047
Average program size in population (points): 124.047
Average percent parens in population: 0.008
Minimum age in population: 131.2377307291176
Maximum age in population: 135.5048690945051
Average age in population: 133.3697494773391
Median age in population: 133.4014901612465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.405
Error (vector) diversity:			 0.425
Behavioral diversity:				 0.425
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 251540835
--- Timings ---
Current time: 1529615715548 milliseconds
Total Time:         441.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.8 seconds, 30.3%
Fitness Testing:    247.7 seconds, 56.2%
Report:              59.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction float_dup} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_yank} {:instruction float_dup_times} {:instruction 79.40605270974905} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth})
Best program: (integer_flush float_dup_times float_yankdup float_yankdup integer_div -93 float_stackdepth float_dup float_sin float_stackdepth float_div float_yank float_dup_times 79.40605270974905 float_div integer_flush float_dup_times integer_fromfloat integer_fromfloat float_stackdepth float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3481.6734157000005
Median total errors in population: 708.3444
Error averages by case: (126.48415149999853 10.262 121.91644180000009 3.33 139.78640950000005 4.236 120.40290469999941 8.887 137.1495976999999 4.577 141.19413630000022 4.778 163.28824499999848 12.191 144.20351200000025 4.142 127.05618790000018 3.47 137.50287560000288 11.394 132.4009471999987 10.408 141.28603169999985 4.802 127.18287709999984 3.859 123.44886649999968 9.505 137.7069880000004 5.016 139.0485975999999 4.259 120.90469950000009 5.393 144.44857840000003 4.067 117.63692130000035 10.031 122.38643579999993 3.531 134.79950860000002 4.303 120.93334819999879 8.01 141.67584909999985 4.786 129.19397379999984 4.15 135.3603308999998 4.888)
Error minima by case: (3.6001 8 0.0 0 0.6578 1 0.0303 1 17.0 1 0.6052 2 5.8677 9 1.0 1 0.0 0 24.1501 8 15.5537 8 0.0 0 0.0 0 0.2445 1 6.0 1 1.0 1 8.0 1 9.0 1 0.1139 1 0.0 0 0.0 0 0.7327 1 1.0 1 0.0 0 0.216 1)
Average genome size in population (length): 123.568
Average program size in population (points): 124.568
Average percent parens in population: 0.008
Minimum age in population: 132.2377307291176
Maximum age in population: 136.623070235057
Average age in population: 134.7362507332705
Median age in population: 134.7839359248262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.429
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.447
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 254630785
--- Timings ---
Current time: 1529615720389 milliseconds
Total Time:         445.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.1 seconds, 30.3%
Fitness Testing:    250.6 seconds, 56.2%
Report:              60.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_mod} {:instruction float_div} {:instruction integer_flush} {:instruction float_frominteger} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_463} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_stackdepth float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth float_stackdepth tagged_9882 float_sin float_mod float_div integer_flush float_frominteger in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_463 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3091.4975036000005
Median total errors in population: 674.00135
Error averages by case: (112.62554949999878 10.252 104.94410140000008 3.219 125.19600120000005 4.016 103.58564219999946 8.768 116.2917890999999 4.336 122.65071170000023 4.602 149.78689359999865 12.171 131.0783305000002 3.927 111.72455240000016 3.131 123.5096976000023 11.371 118.33159359999878 10.413 127.0558969999999 4.609 110.86457429999987 3.872 109.1920311999997 9.517 125.54017620000022 4.671 124.71444739999993 4.045 100.5140187 5.164 129.3851142000001 3.815 100.18934150000042 10.062 106.99381459999994 3.25 119.91999080000001 4.033 102.19513359999883 7.714 127.47745089999991 4.599 113.99604119999987 3.929 123.67760919999984 4.571)
Error minima by case: (2.3853 3 0.0 0 0.0 0 0.0303 1 0.5444 1 0.6052 1 21.2737 3 0.0 0 0.0 0 0.0265 3 8.9857 2 0.0 0 0.0 0 0.4529 1 8.0 1 0.9835 1 2.7971 1 11.0 1 0.3523 1 0.0 0 0.0 0 2.1188 1 0.0 0 0.0 0 2.1467 1)
Average genome size in population (length): 122.774
Average program size in population (points): 123.774
Average percent parens in population: 0.008
Minimum age in population: 133.2377307291176
Maximum age in population: 137.9452450522278
Average age in population: 136.0838020162772
Median age in population: 136.1292910213041
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.421
Error (vector) diversity:			 0.44
Behavioral diversity:				 0.441
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 257700635
--- Timings ---
Current time: 1529615725053 milliseconds
Total Time:         450.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.4 seconds, 30.3%
Fitness Testing:    253.4 seconds, 56.2%
Report:              60.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction integer_div} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_min float_dup_times float_max float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 integer_div float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_stackdepth float_shove float_dec float_stackdepth float_shove integer_stackdepth float_shove tag_float_1045)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2842.3693122000004
Median total errors in population: 675.9707000000001
Error averages by case: (100.07796459999881 10.201 97.6415533000001 3.318 114.59947440000003 3.941 94.54732579999944 8.853 111.7215012999999 4.396 118.04990420000021 4.589 139.38823059999845 12.141 118.93859010000018 3.817 101.22061580000016 3.098 113.27348710000254 11.31 106.91762209999895 10.336 116.30060739999983 4.499 103.18977259999984 3.848 97.40874259999963 9.603 112.41334390000019 4.764 113.47922549999993 3.932 96.68039109999998 5.128 117.92003670000005 3.755 89.8444636000005 9.907 95.64763399999997 3.189 108.12959029999999 3.957 94.20055279999872 7.613 116.20375329999985 4.471 102.58616989999986 3.828 112.75075919999979 4.744)
Error minima by case: (0.3853 2 0.0 0 1.0 1 0.0 0 2.2479 1 0.3948 1 5.1323 8 1.0 1 0.0 0 3.0265 7 5.9857 8 0.0 0 0.0 0 0.4529 1 0.0 0 0.0 0 0.2029 1 3.0 1 0.0 0 0.0 0 0.0 0 0.6785 1 1.0 1 0.0 0 0.2879 1)
Average genome size in population (length): 122.516
Average program size in population (points): 123.516
Average percent parens in population: 0.008
Minimum age in population: 134.7601030028249
Maximum age in population: 139.5977083645822
Average age in population: 137.4191829261035
Median age in population: 137.4800293289668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.421
Error (vector) diversity:			 0.437
Behavioral diversity:				 0.437
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 260764185
--- Timings ---
Current time: 1529615729807 milliseconds
Total Time:         455.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.7 seconds, 30.3%
Fitness Testing:    256.2 seconds, 56.3%
Report:              61.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_yankdup})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_times float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_dup_times float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth integer_add float_yankdup)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2701.1944772000015
Median total errors in population: 690.63265
Error averages by case: (95.74027179999959 10.153 90.16619940000011 3.203 109.53031440000001 3.787 91.34834799999938 8.84 107.2017888999999 4.458 112.17761550000014 4.618 132.52939879999846 12.062 113.71859170000019 3.705 95.26879910000012 2.913 105.80415870000228 11.25 101.46574199999918 10.309 110.94071269999988 4.395 95.65985069999995 3.777 92.47413959999966 9.473 108.3012715000002 4.53 108.5060379999999 3.831 85.21521199999992 5.223 113.49826920000008 3.617 86.86107710000056 9.999 90.86396119999995 3.048 102.85109899999999 3.841 88.17569079999873 7.51 111.32957119999989 4.375 97.49141179999984 3.706 106.94194409999979 4.51)
Error minima by case: (0.6147 1 0.0 0 0.5465 1 0.0 0 0.5444 1 0.3948 1 7.1323 2 1.0 1 0.0 0 15.9735 2 11.0143 3 1.0 1 0.0 0 0.4529 1 1.0 1 1.0 1 10.0 1 4.0 1 0.3239 1 0.0 0 0.0 0 0.454 1 0.002 1 0.0 0 0.2879 1)
Average genome size in population (length): 121.875
Average program size in population (points): 122.875
Average percent parens in population: 0.008
Minimum age in population: 135.9359790136296
Maximum age in population: 140.5504951021841
Average age in population: 138.7378404632531
Median age in population: 138.8293178061119
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.439
Error (vector) diversity:			 0.453
Behavioral diversity:				 0.453
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 263811660
--- Timings ---
Current time: 1529615734589 milliseconds
Total Time:         460.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.1 seconds, 30.2%
Fitness Testing:    259.1 seconds, 56.3%
Report:              61.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_add} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot})
Best program: (integer_flush integer_dup_times float_div integer_flush float_dup_times integer_fromfloat float_sin integer_dup_times float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_add tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_dec integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min float_yankdup integer_swap float_dec float_dec float_inc float_dup_times float_rot)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2786.339516000002
Median total errors in population: 646.1068
Error averages by case: (99.55087899999894 10.193 94.40293250000008 3.04 113.5222754 3.715 94.11985759999936 8.632 110.14113109999991 4.155 115.95288820000022 4.433 138.4389490999985 12.119 117.22206530000011 3.632 97.63735250000006 2.794 111.68391680000273 11.294 106.64975529999887 10.329 114.90141159999989 4.311 99.98788889999982 3.661 97.11814229999965 9.731 109.88709230000023 4.452 111.89208099999996 3.718 90.41834840000013 5.155 115.93227430000006 3.56 88.09585640000053 9.911 93.58744569999995 2.963 106.618898 3.757 88.72218659999878 7.331 115.26956679999994 4.319 99.88721839999992 3.614 109.53410249999985 4.346)
Error minima by case: (0.3853 2 0.0 0 1.0 1 0.0303 1 8.2951 1 1.6052 1 5.8677 8 1.0 1 0.0 0 18.0265 8 9.0143 8 0.0 0 0.0 0 0.2395 2 0.3817 1 0.0 0 3.491 1 5.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.5788 1 0.0 0 0.0246 1)
Average genome size in population (length): 121.248
Average program size in population (points): 122.248
Average percent parens in population: 0.008
Minimum age in population: 137.8150953635632
Maximum age in population: 142.0918169155166
Average age in population: 140.0362769931643
Median age in population: 140.0453007889422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.405
Error (vector) diversity:			 0.418
Behavioral diversity:				 0.419
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 266843710
--- Timings ---
Current time: 1529615739351 milliseconds
Total Time:         464.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.4 seconds, 30.2%
Fitness Testing:    261.8 seconds, 56.3%
Report:              62.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_mult} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_dup} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_flush} {:instruction float_dec} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_517} {:instruction integer_add} {:instruction integer_mult} {:instruction float_min} {:instruction float_dec} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_998})
Best program: (integer_flush integer_mult -92 float_stackdepth integer_dup_times float_sin integer_flush float_dup_times float_dup float_yankdup print_integer float_flush float_dec float_inc float_stackdepth float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_517 integer_add integer_mult float_min float_dec float_flush float_yankdup float_stackdepth float_shove integer_stackdepth integer_mod float_shove integer_stackdepth float_min tag_float_998)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3193.5429666
Median total errors in population: 715.85935
Error averages by case: (114.13728009999807 10.239 112.00316330000012 3.608 129.71731490000005 4.0 108.33404289999935 8.932 123.28681469999991 4.495 128.16551950000027 4.659 151.8419445999985 12.144 133.6497478000002 3.94 115.14298800000022 3.197 125.96138510000327 11.353 119.93051309999822 10.404 131.16814399999984 4.621 117.95644849999971 4.12 110.4612121999997 9.552 126.84542670000035 4.663 128.39131669999998 4.072 105.70497500000027 5.307 133.28330030000006 3.825 105.73179280000048 10.074 111.16290749999996 3.29 123.50199820000007 4.058 109.41181429999868 7.704 131.67917109999982 4.631 117.43473059999987 3.96 127.26201469999984 4.529)
Error minima by case: (2.6147 2 0.0 0 1.0 1 0.0303 1 15.5444 1 0.6052 1 3.1323 1 1.0 1 0.0 0 12.0 1 8.0 1 0.0 0 0.0 0 0.4529 1 8.0 1 0.0 0 7.0 1 9.7779 1 0.3523 1 0.0 0 0.0 0 0.0314 1 1.0 1 0.0 0 0.1734 1)
Average genome size in population (length): 120.625
Average program size in population (points): 121.625
Average percent parens in population: 0.008
Minimum age in population: 139.3209509059711
Maximum age in population: 143.0980845486996
Average age in population: 141.365483601105
Median age in population: 141.3881742447343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.424
Error (vector) diversity:			 0.439
Behavioral diversity:				 0.439
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 269860435
--- Timings ---
Current time: 1529615744103 milliseconds
Total Time:         469.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.8 seconds, 30.2%
Fitness Testing:    264.5 seconds, 56.3%
Report:              63.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_div} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float})
Best program: (integer_flush float_dup_times float_div float_div float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_dup_times 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2890.6292036999994
Median total errors in population: 699.6822500000001
Error averages by case: (105.3461380999986 10.177 98.41474770000012 3.309 116.24378830000002 3.824 96.75025869999956 8.875 114.13611049999992 4.497 119.4179259000003 4.672 141.43601699999857 12.106 120.47477070000018 3.738 102.43486640000022 3.006 115.25883470000262 11.299 110.54877629999869 10.316 117.67309349999982 4.434 105.17546739999976 3.914 101.37594369999967 9.385 114.53453920000028 4.688 115.10667379999994 3.851 95.75736660000004 5.356 121.59882120000006 3.653 92.97301790000037 9.975 98.62269349999995 3.094 110.81086050000008 3.909 91.43227679999879 7.73 118.17601649999983 4.44 104.39807329999981 3.723 113.94012549999984 4.621)
Error minima by case: (2.0 1 0.0 0 1.0 1 0.0 0 0.5051 1 0.6052 1 1.1323 2 1.0 1 0.0 0 9.0265 2 0.0143 2 0.0 0 0.0 0 0.4529 2 8.0 1 1.0 1 6.2029 1 11.0 1 0.0 0 0.0 0 0.0 0 1.1316 1 1.0 1 0.0 0 0.3685 1)
Average genome size in population (length): 120.344
Average program size in population (points): 121.344
Average percent parens in population: 0.008
Minimum age in population: 140.4726811893548
Maximum age in population: 144.703535095606
Average age in population: 142.6625852670705
Median age in population: 142.6990573291123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.429
Error (vector) diversity:			 0.444
Behavioral diversity:				 0.445
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 272870035
--- Timings ---
Current time: 1529615748660 milliseconds
Total Time:         474.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.1 seconds, 30.2%
Fitness Testing:    267.2 seconds, 56.4%
Report:              63.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction integer_add} {:instruction tagged_9882} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dec} {:instruction integer_flush} {:instruction float_pop} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_9882} {:instruction float_div} {:instruction float_sin} {:instruction float_div} {:instruction float_max} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_min} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_shove})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth integer_add tagged_9882 integer_rot float_sin float_dec integer_flush float_pop float_div integer_flush float_dup_times integer_fromfloat float_stackdepth integer_max tagged_9882 float_div float_sin float_div float_max float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_min float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_stackdepth float_shove)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3108.297007300001
Median total errors in population: 666.0203
Error averages by case: (115.62503819999858 10.173 106.62702780000009 3.248 124.70278120000003 3.905 109.5646314999993 8.753 126.89061729999992 4.397 131.9385772000002 4.677 150.5321804999985 12.104 129.07007850000016 3.814 109.84143360000017 3.007 123.5057806000028 11.299 121.11088059999837 10.339 126.04020889999981 4.505 111.29216959999978 3.879 112.53073109999967 9.534 121.68584400000016 4.636 123.82157829999993 3.89 103.97500940000005 5.234 128.18808820000007 3.753 100.6350429000005 10.022 105.93985249999993 3.167 117.95632760000005 3.95 100.46810229999878 7.668 126.52212769999988 4.503 111.93931589999988 3.8 119.12258189999982 4.514)
Error minima by case: (0.6147 2 0.0 0 1.0 1 0.0 0 2.1384 1 0.3948 1 6.8677 9 1.0 1 0.0 0 0.0265 8 1.0143 2 0.0 0 0.0 0 1.4529 1 3.0 1 0.0 0 2.7971 1 0.0 0 0.0 0 0.0 0 0.0 0 1.2496 1 1.0 1 0.0 0 0.2782 1)
Average genome size in population (length): 119.709
Average program size in population (points): 120.709
Average percent parens in population: 0.008
Minimum age in population: 141.6513972659821
Maximum age in population: 145.8247383504061
Average age in population: 143.945771066732
Median age in population: 143.9847645131174
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.412
Error (vector) diversity:			 0.429
Behavioral diversity:				 0.43
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 275864060
--- Timings ---
Current time: 1529615753276 milliseconds
Total Time:         478.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.5 seconds, 30.2%
Fitness Testing:    269.9 seconds, 56.4%
Report:              64.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_div} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 7} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_sub})
Best program: (integer_add float_yankdup float_yankdup float_tan integer_div integer_pop float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_frominteger integer_yank integer_yank integer_flush float_dup_times integer_fromfloat float_yank float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 7 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup integer_yankdup integer_fromfloat float_min integer_fromfloat integer_yankdup float_yankdup integer_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3161.355231100001
Median total errors in population: 666.0203
Error averages by case: (114.3713579999985 10.242 107.03430060000008 3.172 127.65449000000004 3.999 109.5684591999995 8.743 126.13578119999988 4.381 131.19980350000023 4.718 152.09668939999852 12.16 132.04357930000015 3.898 112.98381520000014 3.177 125.47685140000281 11.363 120.29432069999874 10.405 128.96997909999988 4.59 112.29949549999981 3.748 111.01388979999966 9.579 125.73269350000024 4.712 126.27514699999992 4.021 106.46482120000023 5.263 131.86230280000004 3.815 105.07254220000034 9.991 109.28713789999995 3.269 120.95819540000004 4.04 105.37026209999875 7.648 129.40358149999986 4.577 115.17057609999988 3.904 124.5221584999998 4.678)
Error minima by case: (2.4086 7 0.0 0 0.0 0 0.0 0 9.4556 1 8.6052 1 38.1323 3 0.0 0 0.0 0 10.0265 8 1.0143 2 0.0 0 0.0 0 1.4529 1 2.0 1 0.0 0 7.2029 1 5.0 1 0.3523 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.327 1)
Average genome size in population (length): 119.928
Average program size in population (points): 120.928
Average percent parens in population: 0.008
Minimum age in population: 142.6513972659821
Maximum age in population: 147.1448978711871
Average age in population: 145.2231378691276
Median age in population: 145.2389254448643
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.398
Error (vector) diversity:			 0.418
Behavioral diversity:				 0.418
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 278863735
--- Timings ---
Current time: 1529615758071 milliseconds
Total Time:         483.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.9 seconds, 30.2%
Fitness Testing:    272.7 seconds, 56.4%
Report:              64.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 38916.97089999999
Test mean error for best: 19.45849
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_div} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub})
Best program: (integer_flush float_dup_times float_div float_div float_dup_times integer_fromfloat float_stackdepth float_stackdepth float_dup_times float_dec float_div integer_flush float_dup_times integer_fromfloat integer_fromfloat tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3148.0323687
Median total errors in population: 709.3741
Error averages by case: (113.0029481999986 10.238 108.00240000000012 3.446 127.11778729999995 4.131 107.98228699999939 8.989 122.5538531999999 4.504 128.04633530000024 4.702 149.06205459999853 12.153 131.15493590000017 4.026 114.07280180000014 3.298 122.89988310000271 11.361 117.94458769999872 10.427 128.52403859999984 4.69 113.3372053999998 3.935 108.88916979999972 9.397 124.55007120000022 5.023 125.95424219999995 4.143 105.72767290000002 5.374 131.1395169000001 3.935 104.6918420000006 10.05 109.35459079999991 3.376 122.04989429999998 4.201 109.4487490999987 7.678 128.92110329999988 4.666 116.12225329999988 4.03 124.81914479999979 4.89)
Error minima by case: (4.3719 2 0.0 0 1.0 1 0.0 0 0.5444 1 0.3948 1 5.8677 9 1.0 1 0.0 0 13.0265 3 4.0143 8 0.0 0 0.0 0 0.4529 1 0.9714 1 0.0 0 8.0 1 1.0 1 0.0492 1 0.0 0 0.0 0 0.041 1 1.0 1 0.0 0 0.4054 1)
Average genome size in population (length): 120.415
Average program size in population (points): 121.415
Average percent parens in population: 0.008
Minimum age in population: 144.5845196009862
Maximum age in population: 148.3968539024846
Average age in population: 146.6059341197076
Median age in population: 146.6629023201183
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.436
Error (vector) diversity:			 0.455
Behavioral diversity:				 0.456
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 281875010
--- Timings ---
Current time: 1529615762921 milliseconds
Total Time:         488.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.3 seconds, 30.2%
Fitness Testing:    275.6 seconds, 56.4%
Report:              65.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_flush} {:instruction tagged_9882} {:instruction float_sub} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 7} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_flush tagged_9882 float_sub float_sin float_div integer_flush float_sub in1 integer_mod integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 7 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3284.622784
Median total errors in population: 668.0203
Error averages by case: (121.30614309999874 10.262 116.44641420000012 3.512 131.138186 4.064 113.21877349999941 9.087 131.30228159999987 4.607 135.13867880000024 4.732 157.2545023999985 12.195 135.60114190000013 3.964 116.6365636000002 3.197 131.2683421000026 11.373 127.31441689999872 10.401 132.47424459999982 4.672 121.95462289999982 4.06 118.28195069999967 9.606 129.24129490000027 4.81 129.98160159999992 4.09 111.0487569000001 5.323 134.73114690000006 3.858 111.0148416000005 10.141 112.72862899999997 3.293 124.32606480000001 4.098 108.96515179999875 7.539 132.93435799999983 4.638 118.82713039999987 3.958 129.3185457999998 4.689)
Error minima by case: (0.6147 2 0.0 0 0.0 0 0.0 0 0.5444 1 0.6052 1 9.5073 9 0.0 0 0.0 0 18.0991 8 3.9616 1 1.0 1 0.0 0 0.5471 1 1.5395 1 0.0 0 5.509 1 6.0 1 0.0 0 0.0 0 0.0 0 0.0038 1 0.0 0 0.0 0 0.1193 1)
Average genome size in population (length): 119.932
Average program size in population (points): 120.932
Average percent parens in population: 0.008
Minimum age in population: 145.6950967739398
Maximum age in population: 149.9482259996326
Average age in population: 147.9509848159996
Median age in population: 147.9923815099606
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.416
Error (vector) diversity:			 0.434
Behavioral diversity:				 0.435
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 284874185
--- Timings ---
Current time: 1529615767528 milliseconds
Total Time:         493.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.5 seconds, 30.1%
Fitness Testing:    278.4 seconds, 56.5%
Report:              65.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction tagged_833} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_stackdepth float_dup_times float_div integer_flush float_frominteger integer_flush float_dup_times float_frominteger integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_sin float_sin float_div integer_flush tagged_833 in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 in2 float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min integer_stackdepth float_stackdepth float_shove integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3516.8150885000005
Median total errors in population: 675.3107
Error averages by case: (129.56392559999804 10.218 123.90705350000012 3.507 142.04861299999996 4.102 118.91312899999943 8.866 138.04099519999986 4.497 144.19199080000013 4.809 165.45276169999838 12.132 145.37203780000021 3.998 126.6812935000002 3.276 139.8109351000031 11.337 135.17780189999866 10.344 143.5041378999999 4.719 129.1409071999998 4.032 126.16314829999965 9.627 141.64256560000035 4.862 140.23662769999993 4.101 119.36046100000019 5.362 145.83826980000003 3.941 117.84185660000058 10.008 123.52887599999994 3.38 135.09645919999988 4.203 119.25310059999863 7.959 143.9065643999999 4.688 128.8491652999999 4.008 140.55341179999982 4.763)
Error minima by case: (4.6001 2 0.0 0 0.0 0 0.0303 1 1.0 1 0.6052 1 32.1323 8 0.0 0 0.0 0 4.0265 2 4.9857 2 1.0 1 0.0 0 0.4529 1 2.0 1 0.0 0 1.2029 1 5.0 1 0.3239 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.9201 1)
Average genome size in population (length): 120.096
Average program size in population (points): 121.096
Average percent parens in population: 0.008
Minimum age in population: 146.6950967739398
Maximum age in population: 151.5043455329358
Average age in population: 149.2373343775012
Median age in population: 149.2554453679867
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.403
Error (vector) diversity:			 0.423
Behavioral diversity:				 0.424
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 287877260
--- Timings ---
Current time: 1529615772548 milliseconds
Total Time:         497.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.9 seconds, 30.1%
Fitness Testing:    281.2 seconds, 56.5%
Report:              66.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction integer_mod} {:instruction float_sin} {:instruction float_yank} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tag_float_973})
Best program: (integer_div float_yankdup integer_mod float_yankdup integer_div float_dup_times float_flush float_stackdepth float_stackdepth tagged_9882 integer_mod float_sin float_yank integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth integer_stackdepth float_min tag_float_973)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2827.3224336000003
Median total errors in population: 667.0203
Error averages by case: (101.82829069999879 10.188 94.07111520000014 3.408 112.10856840000005 3.845 98.36391559999939 8.775 115.6931010999999 4.514 120.7404593000002 4.656 139.00934359999854 12.085 116.10148120000018 3.773 98.49557650000014 3.018 112.05719790000256 11.301 107.51284199999871 10.306 113.47396719999986 4.461 100.34083789999987 3.915 98.5983537999997 9.49 113.7368657000003 4.711 110.93664839999988 3.857 94.23703260000012 5.294 117.81759070000007 3.711 92.87648820000045 10.061 94.39992499999993 3.13 107.01690110000001 3.93 93.01636739999884 7.881 114.01026999999989 4.455 100.52446229999981 3.731 111.22983179999984 4.629)
Error minima by case: (5.3853 1 0.0 0 1.0 1 0.0303 1 4.7783 1 0.3948 1 20.6338 1 1.0 1 0.0 0 12.0 2 8.0 1 0.0 0 0.0 0 1.4529 1 7.0 1 0.0 0 9.0 1 7.2221 1 0.0 0 0.0 0 0.0 0 0.8854 1 1.0 1 0.0 0 0.6473 1)
Average genome size in population (length): 119.517
Average program size in population (points): 120.517
Average percent parens in population: 0.008
Minimum age in population: 148.272334779096
Maximum age in population: 152.6160094583395
Average age in population: 150.5416519024993
Median age in population: 150.5583635959235
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.403
Error (vector) diversity:			 0.42
Behavioral diversity:				 0.421
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 290865560
--- Timings ---
Current time: 1529615777307 milliseconds
Total Time:         502.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.3 seconds, 30.1%
Fitness Testing:    283.9 seconds, 56.5%
Report:              67.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 38916.97089999999
Test mean error for best: 19.45849
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_flush} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction float_dup} {:instruction float_sin} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub})
Best program: (float_dup_times integer_flush integer_div float_yankdup float_yankdup float_yankdup integer_div -93 float_stackdepth float_dup float_sin in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2694.2566573000013
Median total errors in population: 630.0505999999999
Error averages by case: (91.64995429999932 10.2 89.30281840000008 3.024 110.03731580000003 3.919 91.7958050999994 8.754 106.34297149999989 4.09 110.50353300000022 4.432 131.22000309999845 12.126 114.35543830000016 3.839 94.16829670000014 2.986 104.8590836000025 11.271 98.3328082999992 10.309 111.49972399999986 4.518 93.74489989999996 3.592 88.89720249999965 9.655 108.29505500000026 4.524 108.70430659999994 3.917 89.26382289999994 4.871 112.5266653 3.739 90.3046655000004 10.0 89.54024799999993 3.137 101.81096180000003 3.908 93.54232529999877 7.479 112.05158679999988 4.518 96.45888079999989 3.797 108.0462847999999 4.397)
Error minima by case: (3.3853 7 0.0 0 1.0 1 0.0303 1 7.4556 1 0.6052 1 6.8677 3 1.0 1 0.0 0 10.0265 2 1.0143 2 0.0 0 0.0 0 0.4529 1 3.5951 1 1.0 1 7.0 1 9.0 1 0.3523 1 0.0 0 0.0 0 0.041 1 1.0 1 0.0 0 0.7306 1)
Average genome size in population (length): 119.829
Average program size in population (points): 120.829
Average percent parens in population: 0.008
Minimum age in population: 149.272334779096
Maximum age in population: 153.9093721923388
Average age in population: 151.9038324542457
Median age in population: 151.9196633308315
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.41
Error (vector) diversity:			 0.428
Behavioral diversity:				 0.429
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 293861560
--- Timings ---
Current time: 1529615781977 milliseconds
Total Time:         507.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.7 seconds, 30.1%
Fitness Testing:    286.7 seconds, 56.5%
Report:              68.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_add} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_flush float_dup_times float_div float_add -93 float_stackdepth integer_flush float_dup_times float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_stackdepth float_shove integer_stackdepth float_shove tag_float_1045)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2751.662023500001
Median total errors in population: 670.2130500000001
Error averages by case: (102.24048239999904 10.197 90.4754670000001 2.998 110.61206880000002 3.808 88.9053316999994 8.869 105.39631959999988 4.412 113.60116870000027 4.623 138.54243859999852 12.074 114.69869710000016 3.734 96.71020080000012 2.967 111.20100870000215 11.29 107.55062359999907 10.333 111.96605769999985 4.403 95.9006477 3.603 98.60589739999969 9.49 111.3293275000002 4.675 109.64540759999991 3.832 86.40609989999999 5.203 115.84468880000009 3.645 87.61035470000043 10.038 92.62813199999997 3.076 104.72312090000001 3.851 89.41138529999878 7.621 112.35619859999981 4.384 98.55869819999985 3.709 109.38220019999982 4.525)
Error minima by case: (3.6052 1 0.0 0 0.0 0 0.0303 1 0.0 0 3.6052 1 0.5266 2 0.0 0 0.0 0 7.9735 2 15.655 2 0.0 0 0.0 0 0.4529 1 3.0 1 0.0 0 10.0 1 0.0 0 0.0 0 0.0 0 1.0 1 0.4188 1 0.0 0 0.0 0 0.3294 1)
Average genome size in population (length): 120.094
Average program size in population (points): 121.094
Average percent parens in population: 0.008
Minimum age in population: 150.8855157308077
Maximum age in population: 155.4930035720732
Average age in population: 153.1881668329793
Median age in population: 153.2600182233387
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.42
Error (vector) diversity:			 0.437
Behavioral diversity:				 0.438
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 296864460
--- Timings ---
Current time: 1529615786839 milliseconds
Total Time:         512.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.1 seconds, 30.1%
Fitness Testing:    289.6 seconds, 56.5%
Report:              68.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction float_dup} {:instruction float_sin} {:instruction float_shove} {:instruction float_div} {:instruction float_div} {:instruction tagged_438} {:instruction in2} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth integer_div -93 float_stackdepth float_dup float_sin float_shove float_div float_div tagged_438 in2 in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_mult float_yankdup float_min integer_fromfloat)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3263.041615600001
Median total errors in population: 708.308
Error averages by case: (119.33458189999855 10.232 115.50159560000013 3.404 131.906852 3.977 111.34078929999934 9.022 125.61529679999988 4.559 130.11328010000025 4.707 156.04712769999847 12.171 135.34615920000013 3.911 117.13083380000018 3.125 130.2063744000029 11.368 124.95258929999868 10.389 133.3350884999999 4.588 120.56250669999973 3.955 115.9425364999997 9.513 130.13126930000027 4.761 130.11181499999995 4.017 107.79803260000011 5.378 135.81252220000007 3.827 108.73675350000049 10.171 113.56923369999997 3.267 126.19787840000001 4.049 110.36969059999873 7.77 133.81441409999988 4.599 118.99319209999986 3.896 128.95720229999986 4.558)
Error minima by case: (2.3853 2 0.0 0 1.0 1 0.0 0 0.5444 1 1.6052 1 5.8677 8 1.0 1 0.0 0 5.9735 8 14.0143 2 0.0 0 0.0 0 0.4529 1 2.0 1 0.0 0 7.0 1 5.0 1 0.3239 1 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.4192 1)
Average genome size in population (length): 119.685
Average program size in population (points): 120.685
Average percent parens in population: 0.008
Minimum age in population: 152.0342691949488
Maximum age in population: 156.3703436213229
Average age in population: 154.4912325812589
Median age in population: 154.5306842343883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.423
Error (vector) diversity:			 0.447
Behavioral diversity:				 0.447
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 299857235
--- Timings ---
Current time: 1529615791765 milliseconds
Total Time:         517.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.4 seconds, 30.1%
Fitness Testing:    292.4 seconds, 56.6%
Report:              69.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_flush} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dec} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_div float_yankdup float_yankdup float_yankdup integer_div float_yankdup float_stackdepth tagged_44 float_sin integer_flush integer_fromfloat integer_shove float_flush tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dec float_min integer_fromfloat)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2923.9800099000017
Median total errors in population: 666.0203
Error averages by case: (105.51716959999884 10.16 100.19911130000014 3.299 117.38548010000004 3.914 99.09884819999947 8.752 118.03507609999986 4.358 123.67228160000029 4.563 142.05979079999847 12.097 121.33760340000018 3.8 103.05449890000017 3.078 115.2112078000026 11.3 111.29853059999867 10.335 118.77026169999986 4.494 105.17934169999984 3.849 101.97992149999965 9.509 115.7565483000003 4.662 116.29609719999993 3.911 97.1330386000001 5.308 121.66316610000003 3.77 95.90902290000041 9.892 98.95254469999988 3.202 110.80528440000006 3.96 97.32272169999872 7.578 119.06387449999981 4.461 105.13017169999983 3.817 114.4584164999998 4.621)
Error minima by case: (0.6147 1 0.0 0 0.0 0 0.0 0 0.5444 1 0.6052 1 4.5905 2 0.0 0 0.0 0 2.377 2 10.0143 2 0.0 0 0.0 0 0.4529 1 2.0 1 0.0 0 5.2006 1 5.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.4189 1)
Average genome size in population (length): 119.014
Average program size in population (points): 120.014
Average percent parens in population: 0.008
Minimum age in population: 153.0342691949488
Maximum age in population: 157.6654768564092
Average age in population: 155.7681481054505
Median age in population: 155.7873114042385
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.423
Error (vector) diversity:			 0.439
Behavioral diversity:				 0.441
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 302833760
--- Timings ---
Current time: 1529615796602 milliseconds
Total Time:         522.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.8 seconds, 30.0%
Fitness Testing:    295.3 seconds, 56.6%
Report:              69.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 7} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_yankdup})
Best program: (float_dup_times integer_flush float_dup_items float_yankdup float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_frominteger integer_yank integer_yank integer_flush float_max integer_fromfloat float_yank float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 7 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup integer_yankdup integer_fromfloat float_min integer_fromfloat integer_yankdup)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2562.663666500001
Median total errors in population: 636.6068
Error averages by case: (87.12656169999937 10.187 84.82203550000008 2.991 105.73770569999999 3.711 82.53011489999935 8.663 100.05636899999989 4.224 105.38786230000015 4.451 126.22175449999843 12.13 109.04309070000018 3.608 89.42966730000013 2.81 99.6504288000022 11.314 93.86076179999934 10.349 107.06270109999983 4.321 89.59443049999993 3.51 84.41226249999961 9.603 103.64423340000018 4.386 103.62966039999992 3.721 84.58625239999992 5.03 109.35980290000005 3.547 81.26829760000052 9.972 86.18610899999996 2.975 97.99436709999995 3.738 83.76249269999879 7.462 107.35796479999986 4.313 91.80330469999983 3.592 103.24343519999985 4.284)
Error minima by case: (0.3853 2 0.0 0 0.0 0 0.0 0 9.4556 1 1.6052 1 0.1323 9 0.0 0 0.0 0 9.0265 8 0.0143 2 0.0 0 0.0 0 0.4529 1 4.0 1 1.0 1 6.2029 1 5.2974 1 0.0 0 0.0 0 0.0 0 2.0 1 0.0 0 0.0 0 0.2879 1)
Average genome size in population (length): 118.963
Average program size in population (points): 119.963
Average percent parens in population: 0.008
Minimum age in population: 154.8446322115026
Maximum age in population: 158.7979046143137
Average age in population: 157.0860204356919
Median age in population: 157.1281345449098
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.411
Error (vector) diversity:			 0.43
Behavioral diversity:				 0.431
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 305808810
--- Timings ---
Current time: 1529615801307 milliseconds
Total Time:         526.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.1 seconds, 30.0%
Fitness Testing:    298.1 seconds, 56.6%
Report:              70.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub})
Best program: (integer_add float_yankdup float_yankdup float_tan integer_div float_yankdup float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_frominteger integer_yank integer_yank integer_flush float_dup_times integer_fromfloat float_yank float_sin float_yankdup float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2978.2304854000017
Median total errors in population: 666.0203
Error averages by case: (109.54060349999904 10.237 99.74541620000008 3.01 119.61274229999994 3.913 99.92762029999939 8.897 119.63359079999991 4.552 127.28212750000024 4.74 147.31585929999858 12.193 123.63712960000015 3.794 103.44492310000007 2.961 120.5779638000025 11.386 115.90910489999892 10.419 121.07686959999988 4.558 104.9352143 3.548 106.7124437999997 9.508 120.06048590000017 4.486 118.04370039999993 3.891 99.81932959999997 5.298 122.38999510000005 3.742 95.00410920000054 10.078 99.56103839999994 3.156 112.55626019999995 3.953 96.64046299999879 7.479 121.5487086999999 4.532 105.93201569999988 3.788 118.89877019999992 4.305)
Error minima by case: (3.3853 2 0.0 0 1.0 1 0.0 0 0.5444 1 0.6052 1 30.0821 9 1.0 1 0.0 0 24.0265 7 15.0143 6 1.0 1 0.0 0 0.4529 1 0.0 0 0.0 0 7.0 1 3.0 1 0.0998 1 0.0 0 0.0 0 1.9406 1 1.0 1 0.0 0 1.8032 1)
Average genome size in population (length): 117.721
Average program size in population (points): 118.721
Average percent parens in population: 0.008
Minimum age in population: 156.083122839558
Maximum age in population: 160.4476159536948
Average age in population: 158.3691417467637
Median age in population: 158.3995028863565
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.398
Error (vector) diversity:			 0.42
Behavioral diversity:				 0.42
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 308752635
--- Timings ---
Current time: 1529615806051 milliseconds
Total Time:         531.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.5 seconds, 30.0%
Fitness Testing:    300.9 seconds, 56.6%
Report:              71.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_frominteger} {:instruction float_yank} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub})
Best program: (integer_add float_yankdup float_yankdup float_tan integer_div float_yankdup float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_frominteger integer_yank integer_yank integer_flush float_dup_times float_frominteger float_yank float_sin float_yankdup float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3060.221127700001
Median total errors in population: 665.0203
Error averages by case: (113.29096679999844 10.154 103.89010520000008 3.37 122.7923848 3.895 109.38965219999943 8.796 122.99336829999991 4.38 128.51906040000026 4.754 149.1224349999985 12.039 126.79779560000014 3.756 106.79791290000013 2.989 122.5540927000028 11.26 119.4339899999986 10.308 124.14700049999989 4.489 109.76216179999983 3.951 110.35098659999967 9.625 120.7488487000003 4.531 121.28678329999994 3.872 102.3269206 5.037 125.16363610000005 3.719 102.6860921000005 9.978 102.72568219999995 3.137 114.48221360000002 3.906 100.28721869999869 7.347 124.5283355999999 4.469 109.15619959999991 3.805 119.06828439999984 4.352)
Error minima by case: (1.3853 1 0.0 0 0.0 0 0.0 0 0.5444 1 0.6052 1 7.1323 2 0.0 0 0.0 0 9.0265 2 0.0143 2 0.0 0 0.0 0 0.4529 1 2.0 1 0.0 0 6.2029 1 5.0 1 0.3523 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.6857 1)
Average genome size in population (length): 117.281
Average program size in population (points): 118.281
Average percent parens in population: 0.009
Minimum age in population: 157.0896989927016
Maximum age in population: 161.7695043838647
Average age in population: 159.6738883059315
Median age in population: 159.7080887605028
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.396
Error (vector) diversity:			 0.41
Behavioral diversity:				 0.41
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 311685635
--- Timings ---
Current time: 1529615810860 milliseconds
Total Time:         536.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.8 seconds, 30.0%
Fitness Testing:    303.7 seconds, 56.7%
Report:              71.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 7} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (7 float_dup_times float_div integer_div -93 float_stackdepth integer_flush float_dup_times float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_stackdepth float_shove integer_stackdepth float_shove tag_float_1045)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3060.279608900001
Median total errors in population: 661.8135500000001
Error averages by case: (110.95214239999846 10.183 106.25616780000009 3.195 123.83212790000003 4.086 107.19025169999942 8.721 118.51345689999992 4.323 122.0888552000002 4.654 147.34225789999846 12.134 127.89961460000019 4.009 109.07865330000011 3.234 120.84022340000288 11.317 116.80695239999866 10.311 125.20784339999986 4.673 111.57990629999986 3.743 108.19008979999965 9.648 121.27729700000026 4.727 122.43639829999991 4.131 101.37214930000003 5.118 127.00692900000006 3.894 100.32521820000039 9.979 104.67078260000001 3.334 116.65681899999996 4.109 102.2301206999988 7.533 125.71334229999984 4.685 111.3309798999998 3.991 121.14802959999987 4.601)
Error minima by case: (0.3853 1 0.0 0 0.0 0 0.0303 1 0.5444 1 0.3948 1 5.1323 2 0.0 0 0.0 0 8.9735 1 7.8557 1 0.0 0 0.0 0 0.4529 1 4.0 1 1.0 1 7.0 1 7.0 1 0.0 0 0.0 0 0.0 0 1.3338 1 0.0 0 0.0 0 0.3143 1)
Average genome size in population (length): 117.193
Average program size in population (points): 118.193
Average percent parens in population: 0.009
Minimum age in population: 158.6449683399001
Maximum age in population: 163.2284031368081
Average age in population: 160.9936146919979
Median age in population: 161.0268465993569
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.387
Error (vector) diversity:			 0.406
Behavioral diversity:				 0.406
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 314616910
--- Timings ---
Current time: 1529615815461 milliseconds
Total Time:         541.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.2 seconds, 30.0%
Fitness Testing:    306.4 seconds, 56.6%
Report:              72.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_sin} {:instruction float_rot} {:instruction float_div} {:instruction float_yank} {:instruction tag_integer_647} {:instruction float_dec} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction float_inc} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup})
Best program: (float_dec float_sin float_rot float_div float_yank tag_integer_647 float_dec float_div integer_flush float_dup_times integer_fromfloat integer_fromfloat tagged_9882 float_sin float_sin float_div float_inc in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3428.4075188000006
Median total errors in population: 666.0203
Error averages by case: (122.86302389999874 10.231 119.16550250000009 3.129 139.58800829999998 3.948 119.0338707999994 8.799 136.3161955999999 4.397 139.90753620000012 4.693 160.35340199999843 12.204 143.4117570000002 3.829 124.55092130000016 3.065 135.0090772000026 11.368 129.24735449999892 10.407 140.87001239999995 4.521 124.08017649999987 3.683 120.38572589999967 9.629 134.1768413000002 4.636 138.18963089999997 3.934 117.81378100000008 5.284 141.38440419999998 3.807 114.91366000000052 10.028 120.37319819999995 3.25 132.12984280000006 3.972 121.60117399999861 7.726 140.98626409999991 4.528 126.64695249999988 3.844 135.84820569999982 4.649)
Error minima by case: (0.3752 1 0.0 0 0.0 0 0.0303 1 0.5444 1 0.6052 2 3.0 1 0.0 0 0.0 0 3.0 1 1.9857 1 0.0 0 0.0 0 0.4529 1 4.0 1 1.0 1 1.2029 1 7.0 1 0.0 0 0.0 0 0.0 0 0.0314 1 0.0 0 0.0 0 3.8032 1)
Average genome size in population (length): 116.475
Average program size in population (points): 117.475
Average percent parens in population: 0.009
Minimum age in population: 159.7402898208859
Maximum age in population: 164.2386100873819
Average age in population: 162.3095595763794
Median age in population: 162.3260231376292
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.4
Error (vector) diversity:			 0.415
Behavioral diversity:				 0.416
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 317529685
--- Timings ---
Current time: 1529615820270 milliseconds
Total Time:         545.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.6 seconds, 30.0%
Fitness Testing:    309.2 seconds, 56.7%
Report:              72.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 38832.2219
Test mean error for best: 19.41611
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_sin} {:instruction float_rot} {:instruction float_div} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction in1} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -18} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction integer_rot} {:instruction tagged_518} {:instruction integer_add} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction tag_integer_867} {:instruction print_float} {:instruction float_yankdup} {:instruction tagged_557} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_shove})
Best program: (float_dec float_sin float_rot float_div float_yank float_dup_times float_dec float_div integer_flush float_dup_times integer_fromfloat integer_fromfloat float_sub in1 integer_sub integer_mult float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -18 float_dec float_dec float_dec in2 float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float integer_rot tagged_518 integer_add integer_flush float_dup_times integer_fromfloat float_flush float_yankdup integer_inc float_dec float_dec float_min float_dec tag_integer_867 print_float float_yankdup tagged_557 integer_add float_yankdup float_min float_stackdepth float_flush float_yankdup float_stackdepth float_stackdepth float_shove)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3539.3234092000007
Median total errors in population: 666.5203
Error averages by case: (131.1315689999991 10.22 122.6903523000001 3.33 143.36999390000003 4.122 121.93860289999952 8.85 137.23043909999996 4.488 143.86328570000018 4.743 167.46019349999852 12.154 147.15993550000016 4.017 128.10895130000011 3.256 142.10911440000217 11.37 137.10309939999942 10.416 144.8390662999999 4.741 128.17562339999984 3.907 128.31571119999973 9.618 140.84830300000016 4.744 141.94922169999992 4.15 117.98296870000009 5.317 146.53012189999993 3.957 118.20901560000043 10.155 124.33633819999991 3.39 135.8101402 4.161 121.4196552999989 7.687 144.95126539999993 4.733 130.37180219999982 4.028 141.23563909999984 4.629)
Error minima by case: (0.6147 2 0.0 0 1.0 1 0.0 0 0.5444 1 17.0 1 7.8677 2 1.0 1 0.0 0 8.9735 2 11.0143 3 0.0 0 0.0 0 1.4529 1 0.7628 1 0.0 0 7.0 1 9.0 1 0.3523 1 0.0 0 0.0 0 0.4881 1 1.0 1 0.0 0 0.3143 1)
Average genome size in population (length): 116.46
Average program size in population (points): 117.46
Average percent parens in population: 0.009
Minimum age in population: 161.4778326535913
Maximum age in population: 165.8227281505486
Average age in population: 163.6374728266837
Median age in population: 163.6636917930604
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.4
Error (vector) diversity:			 0.416
Behavioral diversity:				 0.417
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 320441960
--- Timings ---
Current time: 1529615825269 milliseconds
Total Time:         550.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.0 seconds, 30.0%
Fitness Testing:    312.0 seconds, 56.7%
Report:              73.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 38672.3697
Test mean error for best: 19.33618
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_sin} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod})
Best program: (float_dec float_sin integer_flush float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth tagged_9882 float_stackdepth float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush integer_add integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3180.3008771000013
Median total errors in population: 666.3135500000001
Error averages by case: (112.64671929999847 10.201 110.28204580000012 3.234 129.75244040000004 4.012 107.42222399999937 8.709 124.7806917999999 4.341 128.4358234000003 4.616 151.45581599999838 12.14 133.67615470000024 3.901 115.26595530000021 3.186 125.583261200003 11.318 119.18019459999854 10.376 131.08057229999983 4.611 115.08744619999976 3.813 109.84103409999967 9.689 125.7456810000003 4.707 128.4831577999999 4.061 108.42181160000013 5.18 132.8922454000001 3.83 104.91614090000047 9.934 111.08221199999993 3.284 123.02302880000013 4.098 106.51000259999863 7.675 131.4777854999998 4.577 117.3456083999998 3.944 125.84582399999982 4.63)
Error minima by case: (0.6147 2 0.0 0 0.0 0 0.0 0 6.4556 1 0.6052 1 5.1323 4 0.0 0 0.0 0 0.9735 3 9.9857 3 0.0 0 0.0 0 0.2736 1 2.0 1 0.0 0 3.7971 1 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.3143 1)
Average genome size in population (length): 117.229
Average program size in population (points): 118.229
Average percent parens in population: 0.009
Minimum age in population: 162.4808424532
Maximum age in population: 167.3075180750712
Average age in population: 164.8834083436276
Median age in population: 164.9124897001855
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.394
Error (vector) diversity:			 0.404
Behavioral diversity:				 0.405
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 323373235
--- Timings ---
Current time: 1529615830063 milliseconds
Total Time:         555.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.4 seconds, 30.0%
Fitness Testing:    314.8 seconds, 56.7%
Report:              74.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_tan} {:instruction integer_flush} {:instruction float_sin} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_sub} {:instruction in1} {:instruction tagged_693} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_shove} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_sub})
Best program: (float_stackdepth float_yankdup float_yankdup float_yankdup integer_div float_yankdup float_stackdepth tagged_44 float_sin float_tan integer_flush float_sin float_yank float_dup_times integer_max float_stackdepth float_stackdepth float_sub in1 tagged_693 integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_min integer_fromfloat float_flush float_yankdup integer_add float_shove float_flush float_yankdup integer_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2976.6683018000003
Median total errors in population: 704.49065
Error averages by case: (104.74512959999866 10.181 102.2662838000001 3.323 121.07437070000002 3.961 101.26209539999934 8.817 116.49191119999992 4.208 121.45539910000026 4.577 143.7745633999985 12.118 125.70716960000019 3.881 106.99179920000017 3.12 117.65853010000275 11.293 111.57639759999874 10.337 122.52751819999982 4.556 108.10924439999982 3.851 102.17172029999966 9.615 117.22141330000028 4.67 120.13728259999999 3.975 97.4524241000001 4.932 124.0696169000001 3.792 96.73962200000042 9.921 102.8213363 3.248 114.7587088 3.999 100.31681599999871 7.688 123.02680029999983 4.552 108.98650269999986 3.847 116.17964619999985 4.684)
Error minima by case: (2.4086 2 0.0 0 1.0 1 0.0303 1 10.4364 1 0.3948 1 3.0 1 1.0 1 0.0 0 3.0 2 2.0143 2 0.0 0 0.0 0 0.4529 1 0.0 0 0.0 0 7.0 1 2.0 1 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 117.306
Average program size in population (points): 118.306
Average percent parens in population: 0.009
Minimum age in population: 163.5328116059759
Maximum age in population: 168.3658930211834
Average age in population: 166.1472229069649
Median age in population: 166.1615757959498
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.429
Error (vector) diversity:			 0.45
Behavioral diversity:				 0.451
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 326306335
--- Timings ---
Current time: 1529615834703 milliseconds
Total Time:         560.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.7 seconds, 29.9%
Fitness Testing:    317.5 seconds, 56.7%
Report:              74.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_div} {:instruction -93} {:instruction integer_div} {:instruction in1} {:instruction integer_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 10} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_cos} {:instruction integer_min} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_min} {:instruction float_shove} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth})
Best program: (integer_stackdepth float_dup_times float_yankdup integer_div -93 integer_div in1 integer_div integer_flush float_yankdup float_frominteger integer_yank integer_yank integer_flush float_dup_times integer_fromfloat integer_fromfloat float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc float_sub float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 10 float_dec float_dec float_dec float_dec float_dec integer_dup_times float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_cos integer_min float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove float_min float_shove integer_pop float_stackdepth float_shove integer_stackdepth)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3185.372501200001
Median total errors in population: 670.2130500000001
Error averages by case: (113.59151339999875 10.21 109.81321700000011 3.326 128.08017330000004 3.937 112.53566629999942 8.95 127.80251199999992 4.503 131.38102810000024 4.65 151.25649619999845 12.162 131.92740440000017 3.849 114.5994010000001 3.086 125.33136280000255 11.342 119.80259899999892 10.394 129.4335138999999 4.535 114.62270439999988 3.858 110.71162859999967 9.499 126.66968430000027 4.757 127.02146529999995 3.965 107.80406119999998 5.411 132.93822860000006 3.793 105.42012400000037 10.095 110.54906479999994 3.276 122.33674469999997 3.997 109.50826739999869 7.698 129.76705409999988 4.53 116.60126699999986 3.822 125.47331939999981 4.749)
Error minima by case: (0.6147 2 0.0 0 0.0 0 0.0303 1 7.2951 1 0.3948 1 6.8677 8 0.0 0 0.0 0 5.9735 8 1.0143 3 1.0 1 0.0 0 0.4529 1 5.0 1 0.0 0 7.0 1 8.0 1 0.2155 1 0.0 0 0.0 0 0.0793 1 0.0 0 0.0 0 0.9201 1)
Average genome size in population (length): 117.665
Average program size in population (points): 118.665
Average percent parens in population: 0.008
Minimum age in population: 165.2335302293398
Maximum age in population: 169.4652200072552
Average age in population: 167.4926086451804
Median age in population: 167.5404854655951
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.421
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.447
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 329248710
--- Timings ---
Current time: 1529615839779 milliseconds
Total Time:         565.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.1 seconds, 29.9%
Fitness Testing:    320.4 seconds, 56.7%
Report:              75.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_sub} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction -16.096844060179833} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction in2} {:instruction tagged_518} {:instruction integer_add} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_min})
Best program: (integer_flush float_sub integer_div float_yankdup float_yankdup float_yankdup integer_div float_yankdup float_stackdepth tagged_44 float_sin float_div integer_flush float_yankdup float_max integer_yank integer_inc integer_flush float_dup_times integer_fromfloat integer_fromfloat float_stackdepth float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth -16.096844060179833 integer_stackdepth integer_shove in2 tagged_518 integer_add float_shove integer_stackdepth in1 float_shove integer_stackdepth float_min)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3079.459650000001
Median total errors in population: 690.8135500000001
Error averages by case: (110.05964739999887 10.229 105.8845237000001 3.295 123.88583620000001 4.043 108.77418169999937 8.859 123.20673889999989 4.468 127.4218273000003 4.783 147.54668109999847 12.146 127.7667412000002 3.924 110.04366940000018 3.219 121.57323400000247 11.351 116.05409549999895 10.387 125.40308019999985 4.624 111.30542629999981 3.85 107.14739419999968 9.582 122.0938443000003 4.787 122.86605589999998 4.061 104.02898490000005 5.226 128.19673550000005 3.853 102.12324730000043 10.012 105.83483539999993 3.302 117.82780330000006 4.073 100.85607199999882 7.813 125.72978829999983 4.605 112.12161969999983 3.901 120.59858629999978 4.716)
Error minima by case: (1.6147 3 0.0 0 1.0 1 0.0 0 0.5444 1 0.3948 1 5.8677 2 1.0 1 0.0 0 1.0207 7 1.0143 2 0.0 0 0.0 0 0.4529 2 4.0 1 0.0 0 1.8029 1 1.6362 1 0.0 0 0.0 0 0.0 0 0.8288 1 0.9427 1 0.0 0 0.0 1)
Average genome size in population (length): 117.082
Average program size in population (points): 118.082
Average percent parens in population: 0.009
Minimum age in population: 166.643954286832
Maximum age in population: 170.7927633223946
Average age in population: 168.7647854697636
Median age in population: 168.8121819145222
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.431
Error (vector) diversity:			 0.449
Behavioral diversity:				 0.45
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 332176310
--- Timings ---
Current time: 1529615844521 milliseconds
Total Time:         569.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.5 seconds, 29.9%
Fitness Testing:    323.1 seconds, 56.7%
Report:              76.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction float_dup} {:instruction float_sin} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub})
Best program: (integer_flush float_dup_times float_div integer_flush integer_flush float_dup_times float_div integer_div -93 float_stackdepth float_dup float_sin in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3125.770706700001
Median total errors in population: 708.3442
Error averages by case: (112.8029449999987 10.186 108.2762681000001 3.262 125.59183909999999 3.925 109.12106129999948 8.772 125.75834079999986 4.379 131.7180954000002 4.652 149.39236539999854 12.121 129.77901640000016 3.868 111.24626850000011 3.09 123.10330710000262 11.301 118.79123949999882 10.336 126.91742149999985 4.526 113.60754649999987 3.844 109.54671499999971 9.584 124.21727390000018 4.625 124.10188539999993 3.984 103.84673979999994 5.274 128.7879851000001 3.774 102.62949420000037 9.971 107.52048730000001 3.223 119.37703510000003 4.002 105.33410699999865 7.703 127.27000049999991 4.528 113.38721729999988 3.871 124.10805149999983 4.737)
Error minima by case: (0.6147 7 0.0 0 1.0 1 0.0 0 16.0 1 0.3948 2 11.1323 9 1.0 1 0.0 0 14.7788 8 8.0143 3 0.0 0 0.0 0 0.4529 1 0.0286 1 0.0 0 7.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.041 1 1.0 1 0.0 0 2.0 1)
Average genome size in population (length): 116.717
Average program size in population (points): 117.717
Average percent parens in population: 0.009
Minimum age in population: 167.7273352310518
Maximum age in population: 172.0203322825924
Average age in population: 170.0452621481029
Median age in population: 170.0629964912851
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.425
Error (vector) diversity:			 0.445
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 335094785
--- Timings ---
Current time: 1529615849211 milliseconds
Total Time:         574.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.9 seconds, 29.9%
Fitness Testing:    325.8 seconds, 56.7%
Report:              76.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_div} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction tagged_9882} {:instruction float_sin} {:instruction tagged_9882} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub})
Best program: (integer_flush float_dup_times float_div float_div integer_fromfloat float_stackdepth integer_yank tagged_9882 float_sin tagged_9882 float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_mult float_yankdup integer_min integer_fromfloat integer_sub integer_shove float_dec float_inc integer_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3287.5658965000007
Median total errors in population: 707.7928499999999
Error averages by case: (117.88417529999806 10.208 113.92086940000014 3.531 132.42113580000012 4.207 116.88176199999933 8.939 128.13340569999988 4.451 133.52598710000024 4.702 155.03914869999838 12.123 138.05704560000018 4.11 119.03971330000023 3.375 129.09677350000322 11.329 124.47300009999823 10.372 133.89323619999982 4.8 120.24799139999972 4.111 115.49400279999966 9.671 130.68805140000032 4.861 131.8259962999999 4.238 108.12998560000017 5.331 136.25316790000002 4.019 110.54374070000053 10.09 114.04053759999994 3.504 126.74840840000009 4.299 111.39988679999857 7.911 134.2502191999999 4.766 121.41808859999982 4.13 130.29356709999982 4.788)
Error minima by case: (0.6147 7 0.0 0 0.0 0 0.0 0 0.5444 1 0.3948 1 18.512 2 0.0 0 0.0 0 14.7981 3 7.0116 3 0.0 0 0.0 0 0.4529 1 1.0 1 0.0 0 4.2029 1 1.0 1 0.0 0 0.0 0 0.0 0 0.3057 1 0.0 0 0.0 0 0.2782 1)
Average genome size in population (length): 115.997
Average program size in population (points): 116.997
Average percent parens in population: 0.009
Minimum age in population: 168.7648812606662
Maximum age in population: 173.3621553997995
Average age in population: 171.348010897686
Median age in population: 171.381262359343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.411
Error (vector) diversity:			 0.428
Behavioral diversity:				 0.428
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 337995335
--- Timings ---
Current time: 1529615854124 milliseconds
Total Time:         579.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.2 seconds, 29.9%
Fitness Testing:    328.7 seconds, 56.7%
Report:              77.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_shove} {:instruction float_mod} {:instruction float_shove} {:instruction integer_div} {:instruction integer_flush} {:instruction -92} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction in2} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518})
Best program: (integer_div float_mult float_yankdup integer_div float_shove float_mod float_shove integer_div integer_flush -92 float_stackdepth integer_dup_times integer_inc float_div integer_flush float_dup_times integer_fromfloat in1 integer_swap integer_stackdepth float_sin float_div integer_flush in2 integer_yank integer_flush integer_flush float_dup_items integer_fromfloat integer_fromfloat float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3094.9830369000006
Median total errors in population: 666.0203
Error averages by case: (110.30277019999875 10.182 106.19621650000012 3.2 125.51478320000007 3.863 108.3570128999994 8.813 123.5513537999999 4.351 127.40762610000026 4.632 148.0716043999985 12.143 129.22612500000014 3.756 109.9778872000001 2.968 122.32444530000262 11.332 116.57234859999893 10.358 126.93361319999983 4.46 111.47165439999986 3.78 107.33895699999968 9.588 121.98837230000022 4.467 124.04485139999994 3.856 106.4893017000001 5.124 128.67994350000004 3.703 103.92760260000057 10.053 105.83993879999993 3.107 117.43874850000003 3.907 104.83005969999866 7.604 127.01481529999988 4.461 111.76725739999986 3.748 121.78974789999982 4.47)
Error minima by case: (3.3853 2 0.0 0 0.0 0 0.0 0 18.0 1 0.6052 1 5.8677 8 0.0 0 0.0 0 1.0265 8 7.9857 2 1.0 1 0.0 0 0.5471 1 0.9714 1 0.0 0 1.7971 1 4.0 1 0.3523 1 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 0.3713 1)
Average genome size in population (length): 115.683
Average program size in population (points): 116.683
Average percent parens in population: 0.009
Minimum age in population: 169.7648812606662
Maximum age in population: 175.0077086071005
Average age in population: 172.6839675009168
Median age in population: 172.7239748763153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.388
Error (vector) diversity:			 0.406
Behavioral diversity:				 0.406
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 340888410
--- Timings ---
Current time: 1529615858927 milliseconds
Total Time:         584.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.5 seconds, 29.9%
Fitness Testing:    331.4 seconds, 56.7%
Report:              78.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_flush} {:instruction -92} {:instruction float_swap} {:instruction tagged_44} {:instruction float_sin} {:instruction float_tan} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction tagged_9918} {:instruction print_integer} {:instruction float_sin} {:instruction float_div} {:instruction float_inc} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518})
Best program: (integer_flush integer_flush -92 float_swap tagged_44 float_sin float_tan integer_flush float_yankdup float_frominteger integer_flush float_min integer_fromfloat integer_flush float_dup_times integer_fromfloat integer_fromfloat tagged_9918 print_integer float_sin float_div float_inc in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2998.3440949
Median total errors in population: 708.3081999999999
Error averages by case: (109.01395579999931 10.154 102.0466352000001 3.344 120.49905120000004 4.005 104.3104749999995 8.725 118.1162133999999 4.335 122.80593630000025 4.536 144.70481359999852 12.066 124.8338306000002 3.901 107.44711190000015 3.173 117.99799870000194 11.265 114.92548629999933 10.318 122.17033829999984 4.606 107.6305742999999 3.913 105.69410629999966 9.612 119.4055522000002 4.857 119.67949399999989 4.021 97.82736349999995 5.275 124.68380260000008 3.801 97.12780110000045 9.943 102.86855409999994 3.297 115.24137320000004 4.068 99.10334689999887 7.822 122.44969359999988 4.595 109.56404099999983 3.909 117.89154579999983 4.764)
Error minima by case: (0.6147 1 0.0 0 0.0 0 0.0303 1 0.4556 1 0.6052 1 18.1323 8 0.0 0 0.0 0 1.2059 8 0.0143 4 0.0 0 0.0 0 0.4529 1 1.0 1 0.0 0 4.0295 1 4.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.1555 1)
Average genome size in population (length): 115.212
Average program size in population (points): 116.212
Average percent parens in population: 0.009
Minimum age in population: 170.7648812606662
Maximum age in population: 176.3356095997198
Average age in population: 174.0233871288991
Median age in population: 174.0646453433561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.428
Error (vector) diversity:			 0.448
Behavioral diversity:				 0.449
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 343770135
--- Timings ---
Current time: 1529615863576 milliseconds
Total Time:         589.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.0 seconds, 29.9%
Fitness Testing:    334.1 seconds, 56.7%
Report:              78.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction print_integer} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction integer_min} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_flush} {:instruction tagged_9882} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction float_min} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth})
Best program: (integer_flush float_dup_times float_div print_integer print_integer float_yankdup float_stackdepth tagged_44 integer_min integer_flush integer_fromfloat integer_shove float_flush tagged_9882 float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub float_min integer_add float_yankdup float_min integer_fromfloat float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_pop integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_stackdepth float_stackdepth)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3205.5465255000013
Median total errors in population: 666.0203
Error averages by case: (120.25667609999888 10.231 110.89729280000012 3.237 130.34350620000004 4.009 104.06079729999945 8.716 120.67955019999992 4.305 129.13337430000027 4.589 156.50467389999852 12.15 133.9619501000002 3.86 114.70093580000014 3.141 130.65031180000258 11.343 125.64596359999884 10.362 131.7124520999998 4.61 116.19724269999983 3.84 116.78215089999969 9.587 129.58617310000022 4.591 128.33620739999995 3.959 105.72244710000002 5.2 133.28064810000006 3.831 103.3076918000004 10.006 111.06191449999997 3.282 123.02157499999998 4.049 103.0939228999988 7.672 131.85746689999988 4.611 117.17981739999983 3.888 127.95678349999987 4.546)
Error minima by case: (2.3853 2 0.0 0 0.0 0 0.0 0 0.5444 1 0.3948 1 0.8677 9 0.0 0 0.0 0 4.0265 8 4.9857 2 0.0 0 0.0 0 0.4529 1 2.0 1 0.0 0 1.2029 1 5.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0593 1)
Average genome size in population (length): 114.548
Average program size in population (points): 115.548
Average percent parens in population: 0.009
Minimum age in population: 171.7648812606662
Maximum age in population: 177.4646737005249
Average age in population: 175.2865514676924
Median age in population: 175.3311781613387
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.407
Error (vector) diversity:			 0.427
Behavioral diversity:				 0.427
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 346635285
--- Timings ---
Current time: 1529615868183 milliseconds
Total Time:         593.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.3 seconds, 29.9%
Fitness Testing:    336.7 seconds, 56.7%
Report:              79.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_flush} {:instruction -92} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sin} {:instruction float_tan} {:instruction integer_flush} {:instruction float_min} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_sin} {:instruction float_tan} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup})
Best program: (integer_flush integer_flush -92 float_stackdepth tagged_44 float_sin float_tan integer_flush float_min float_frominteger integer_flush float_sin float_tan integer_flush float_yankdup float_frominteger integer_yank in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec integer_sub float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3080.0009538000004
Median total errors in population: 667.0203
Error averages by case: (111.78200899999841 10.203 104.58912670000011 3.275 123.73189990000004 3.953 106.45078989999944 8.673 122.79911579999991 4.396 130.3896235000003 4.651 148.88832399999845 12.135 127.39174420000022 3.849 109.21987950000016 3.142 122.59658460000335 11.348 118.8492150999981 10.374 125.16252619999983 4.535 110.06113829999981 3.835 108.9538901999997 9.566 122.49642970000036 4.619 122.22456359999993 3.949 103.44387730000007 5.289 127.8263320000001 3.815 100.48376360000042 10.005 105.42506949999995 3.283 117.11044090000004 3.996 103.40233439999868 7.637 125.38003589999985 4.513 111.14101239999984 3.857 120.6972275999998 4.606)
Error minima by case: (0.3853 1 0.0 0 0.0 0 0.0 0 0.4556 1 0.6052 1 6.6069 2 0.0 0 0.0 0 17.1921 2 11.0143 2 0.0 0 0.0 0 0.4529 1 3.0 1 1.0 1 10.0 1 1.7494 1 0.144 1 0.0 0 0.0 0 0.0594 1 0.0 0 0.0 0 3.5568 1)
Average genome size in population (length): 115.543
Average program size in population (points): 116.543
Average percent parens in population: 0.009
Minimum age in population: 172.7648812606662
Maximum age in population: 178.4648245434915
Average age in population: 176.5458911038731
Median age in population: 176.5761088617014
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.425
Error (vector) diversity:			 0.442
Behavioral diversity:				 0.443
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 349524760
--- Timings ---
Current time: 1529615872758 milliseconds
Total Time:         598.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.7 seconds, 29.9%
Fitness Testing:    339.3 seconds, 56.7%
Report:              80.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_frominteger} {:instruction float_div} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_flush} {:instruction float_div} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_flush} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_sub})
Best program: (float_dup_times float_frominteger float_div float_frominteger print_integer integer_flush float_div integer_fromfloat float_stackdepth tagged_9882 float_sin float_sin float_sub in1 integer_swap integer_shove float_flush tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add integer_flush integer_mod integer_fromfloat float_flush float_yankdup integer_inc float_dec float_dec float_min integer_fromfloat float_flush float_yankdup integer_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2580.440464700003
Median total errors in population: 666.0203
Error averages by case: (90.17435049999918 10.118 85.7721870000001 3.068 104.81174990000008 3.756 83.63149719999947 8.626 100.64900079999991 4.081 108.02244940000016 4.353 129.16407409999843 12.044 108.88042990000015 3.643 88.98268950000009 2.875 102.7486750000022 11.225 96.76026519999917 10.26 106.32661689999988 4.367 91.38650319999995 3.665 87.12198259999965 9.61 103.97044320000019 4.389 103.3367488999999 3.722 84.95985429999988 5.022 107.81508880000005 3.561 83.16021750000044 9.98 84.80388649999993 2.989 97.0397834 3.764 85.60238849999872 7.452 106.58068719999987 4.352 91.22785399999987 3.619 102.77204119999983 4.198)
Error minima by case: (5.0 1 0.0 0 0.0 0 0.0 0 8.5051 1 0.6052 1 1.8677 1 0.0 0 0.0 0 1.1766 1 1.9857 1 1.0 1 0.0 0 0.1588 2 3.0 1 0.0 0 4.2029 1 6.0 1 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 0.4192 1)
Average genome size in population (length): 115.794
Average program size in population (points): 116.794
Average percent parens in population: 0.009
Minimum age in population: 175.0923998940027
Maximum age in population: 179.8499806134867
Average age in population: 177.850061485931
Median age in population: 177.8799709641095
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.417
Error (vector) diversity:			 0.432
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 352420485
--- Timings ---
Current time: 1529615877313 milliseconds
Total Time:         602.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.0 seconds, 29.9%
Fitness Testing:    342.0 seconds, 56.7%
Report:              80.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_sin} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth})
Best program: (integer_flush float_dup_times float_dup_items integer_flush float_dup_times float_tan float_stackdepth float_sin tagged_9882 float_sin float_sin float_yankdup integer_flush float_sub in1 integer_sub integer_mult float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec integer_sub float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_mult integer_yankdup float_min float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3486.5281804
Median total errors in population: 708.3446
Error averages by case: (129.66882809999808 10.251 120.6129431000001 3.363 139.84123859999997 4.023 120.65641299999947 8.565 136.3281927999999 4.423 144.97249730000016 4.772 165.37781469999842 12.174 143.25880140000012 3.908 126.68978890000012 3.232 139.51112430000308 11.386 134.81641569999871 10.404 141.05183729999987 4.592 125.33949589999979 3.886 126.01308459999969 9.45 138.40054280000032 4.857 138.34968289999995 4.049 120.2845292000002 5.402 143.7929706 3.824 116.96429360000039 10.002 122.80798269999994 3.351 134.408994 4.084 118.18383069999874 7.812 141.24927009999993 4.568 128.40904309999988 3.908 138.40956499999982 4.843)
Error minima by case: (0.6147 2 0.0 0 1.0 1 0.0 0 1.4556 1 0.6052 2 19.1583 8 1.0 1 0.0 0 5.9735 8 8.0143 2 0.0 0 0.0 0 0.4529 1 2.0 1 0.0 0 7.0 1 3.0 1 0.3523 1 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 1.0 1)
Average genome size in population (length): 114.902
Average program size in population (points): 115.902
Average percent parens in population: 0.009
Minimum age in population: 176.422251798885
Maximum age in population: 181.5064115030724
Average age in population: 179.1710812960399
Median age in population: 179.2349860843964
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.435
Error (vector) diversity:			 0.452
Behavioral diversity:				 0.453
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 355294210
--- Timings ---
Current time: 1529615882143 milliseconds
Total Time:         607.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.3 seconds, 29.8%
Fitness Testing:    344.7 seconds, 56.8%
Report:              81.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 7} {:instruction float_dup_times} {:instruction float_tan} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_flush} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction integer_flush} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_sub})
Best program: (7 float_dup_times float_tan integer_div -93 float_stackdepth integer_flush float_dup_times float_sub in1 integer_swap integer_shove float_flush tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap float_min float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 integer_add integer_flush float_sin integer_fromfloat float_flush float_yankdup integer_inc float_dec float_dec float_min integer_fromfloat float_flush float_yankdup integer_sub)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3378.900968000001
Median total errors in population: 698.9689999999999
Error averages by case: (123.64209999999844 10.202 117.54615870000009 3.455 137.79000039999994 4.072 112.72575579999943 9.057 129.1124425999999 4.567 136.24289960000021 4.765 160.00044219999853 12.141 142.02143720000015 3.995 122.98775790000022 3.25 134.06138880000285 11.358 128.8471652999984 10.381 139.16249809999994 4.692 123.18725529999975 4.038 119.84246619999966 9.575 134.47824610000038 4.825 136.32814079999991 4.092 115.3218251000002 5.306 140.06638199999995 3.89 111.99798150000055 10.105 118.79625379999995 3.362 130.9097728000001 4.146 113.6562097999988 7.767 139.6664540999999 4.675 125.11251279999985 4.0 133.02842109999983 4.653)
Error minima by case: (3.1014 2 0.0 0 1.0 1 0.0 0 0.5444 1 3.6052 1 1.7702 8 1.0 1 0.0 0 6.0265 8 2.9857 9 2.0 1 0.0 0 0.2736 1 2.0 1 0.0 0 3.2029 1 1.0 1 0.2866 1 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.3527 1)
Average genome size in population (length): 114.838
Average program size in population (points): 115.838
Average percent parens in population: 0.009
Minimum age in population: 178.2990394350196
Maximum age in population: 182.7150768416247
Average age in population: 180.5030874962989
Median age in population: 180.5462914844767
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.416
Error (vector) diversity:			 0.431
Behavioral diversity:				 0.432
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 358165835
--- Timings ---
Current time: 1529615886836 milliseconds
Total Time:         612.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.7 seconds, 29.8%
Fitness Testing:    347.5 seconds, 56.8%
Report:              82.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 7} {:instruction float_dup_times} {:instruction float_tan} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_flush} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sub} {:instruction tagged_518} {:instruction float_cos} {:instruction integer_min} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_pop} {:instruction print_float} {:instruction float_stackdepth})
Best program: (7 float_dup_times float_tan integer_div -93 float_stackdepth integer_flush float_dup_times float_sub in1 integer_swap integer_shove float_flush tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_mult float_yankdup float_sub tagged_518 float_cos integer_min float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_pop print_float float_stackdepth)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2994.0592518000008
Median total errors in population: 673.0488
Error averages by case: (107.53156709999901 10.226 102.44156000000008 3.294 120.72757390000008 3.887 101.3312787999994 8.778 116.76192099999989 4.358 122.24224070000022 4.621 145.8332760999985 12.154 124.68918220000015 3.8 107.28134520000016 3.03 119.54709670000253 11.351 114.05363889999879 10.384 121.97228499999987 4.454 108.01684889999981 3.856 104.83223929999964 9.558 119.72359100000033 4.744 119.74205769999992 3.888 98.47824810000006 5.303 125.99603570000002 3.727 97.85461540000041 10.067 103.1897054 3.196 115.04171110000001 3.95 98.71311459999875 7.703 122.47047359999988 4.468 109.29178649999989 3.775 117.00385889999978 4.72)
Error minima by case: (0.6147 8 0.0 0 1.0 1 0.0303 1 0.5444 1 0.6052 1 37.9367 8 1.0 1 0.0 0 20.0265 8 11.0143 3 2.0 1 0.0 0 0.4529 1 0.0 0 0.0 0 2.7971 1 3.0 1 0.3523 1 0.0 0 0.0 0 2.0 1 1.0 1 0.0 0 0.2879 1)
Average genome size in population (length): 114.819
Average program size in population (points): 115.819
Average percent parens in population: 0.009
Minimum age in population: 179.2990394350196
Maximum age in population: 184.2871333193299
Average age in population: 181.7824439943003
Median age in population: 181.7882991366394
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.418
Error (vector) diversity:			 0.434
Behavioral diversity:				 0.435
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 361037135
--- Timings ---
Current time: 1529615891452 milliseconds
Total Time:         616.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.1 seconds, 29.8%
Fitness Testing:    350.1 seconds, 56.8%
Report:              82.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_mult} {:instruction tagged_536} {:instruction float_mod})
Best program: (float_stackdepth float_yankdup float_yankdup in1 float_stackdepth integer_stackdepth float_inc float_inc float_inc float_shove float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_mult tagged_536 float_mod)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2888.5897915999994
Median total errors in population: 707.82905
Error averages by case: (104.01577809999863 10.211 96.5121190000001 3.203 116.00914250000008 3.989 96.60279899999948 8.665 114.0332019999999 4.419 118.97020240000023 4.696 141.12413569999853 12.118 120.50810640000019 3.875 102.70636190000013 3.152 114.33643310000274 11.351 109.7370054999987 10.377 117.43688109999985 4.524 102.10793239999983 3.792 100.58968159999966 9.503 116.5549184000002 4.703 115.31946809999994 3.986 95.40503690000006 5.267 120.46967510000003 3.779 93.5136278000004 9.991 97.87563639999992 3.222 110.02313210000003 3.95 96.87585359999878 7.581 117.90475099999986 4.533 104.86660789999989 3.848 115.64530359999983 4.711)
Error minima by case: (1.3853 2 0.0 0 0.0 0 0.0303 1 0.5444 1 0.3948 1 21.8677 3 0.0 0 0.0 0 3.0426 9 12.0548 2 0.0 0 0.0 0 0.4529 1 2.0 1 0.0 0 5.8661 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.3527 1)
Average genome size in population (length): 115.208
Average program size in population (points): 116.208
Average percent parens in population: 0.009
Minimum age in population: 180.6741758468379
Maximum age in population: 185.4188395317742
Average age in population: 183.1140654904044
Median age in population: 183.1528878467655
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.424
Error (vector) diversity:			 0.443
Behavioral diversity:				 0.444
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 363917760
--- Timings ---
Current time: 1529615896445 milliseconds
Total Time:         621.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.3 seconds, 29.8%
Fitness Testing:    353.2 seconds, 56.8%
Report:              83.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_div} {:instruction float_dup} {:instruction tagged_438} {:instruction in2} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction float_inc} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 7} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_235} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction float_mod})
Best program: (integer_swap float_dup_times float_stackdepth tagged_44 integer_flush float_stackdepth float_yankdup float_yankdup integer_rot integer_div float_div float_dup tagged_438 in2 in1 integer_swap integer_stackdepth integer_fromfloat integer_fromfloat tagged_9882 float_sin float_sin float_div float_inc in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 7 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_235 integer_add float_yankdup float_min float_mod)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3276.8648917
Median total errors in population: 673.0203
Error averages by case: (119.04316399999811 10.217 111.40380970000012 3.567 130.73473650000003 4.089 117.7771111999994 8.719 131.7505822999999 4.371 137.00556120000022 4.686 155.4232262999983 12.152 134.6719005000002 3.955 117.40659090000021 3.247 128.88331950000315 11.334 124.4256277999984 10.394 132.18160779999988 4.646 117.43670729999967 4.141 115.3076915999997 9.637 131.28216510000027 4.806 129.61854959999997 4.106 111.47195730000024 5.184 135.39041180000007 3.852 110.7857881000005 10.018 113.15123239999997 3.342 125.27149760000006 4.113 113.48516429999863 7.594 132.4770254999999 4.633 119.18499299999984 3.998 129.73347039999976 4.76)
Error minima by case: (3.6147 2 0.0 0 0.0 0 0.0303 1 11.4556 1 0.6052 1 4.1323 8 0.0 0 0.0 0 10.0606 8 8.0143 8 0.0 0 0.0 0 0.4529 1 2.0 1 0.8242 1 9.0 1 1.0 1 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 0.6857 1)
Average genome size in population (length): 115.393
Average program size in population (points): 116.393
Average percent parens in population: 0.009
Minimum age in population: 182.0905750521902
Maximum age in population: 186.6188719369477
Average age in population: 184.3929571897848
Median age in population: 184.3852262286291
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.414
Error (vector) diversity:			 0.433
Behavioral diversity:				 0.434
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 366803035
--- Timings ---
Current time: 1529615901127 milliseconds
Total Time:         626.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.7 seconds, 29.8%
Fitness Testing:    355.9 seconds, 56.8%
Report:              83.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_flush} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sub} {:instruction tagged_518} {:instruction float_cos} {:instruction integer_min} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_pop} {:instruction print_float} {:instruction float_stackdepth})
Best program: (integer_flush float_dup_times float_div integer_flush integer_div -93 float_stackdepth integer_flush float_dup_times float_sub in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth integer_swap integer_shove float_flush tagged_9882 float_sin float_sin float_div integer_flush float_sub in1 integer_swap integer_rot float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_mult float_yankdup float_sub tagged_518 float_cos integer_min float_min integer_fromfloat float_flush float_yankdup float_stackdepth float_shove integer_pop print_float float_stackdepth)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3510.6840812
Median total errors in population: 721.144
Error averages by case: (127.50406869999873 10.253 123.84503140000012 3.602 141.32145810000003 4.171 123.90655129999939 8.746 137.1955368999999 4.602 142.85645520000003 4.859 162.94985499999848 12.153 145.21254960000013 4.062 128.21689270000016 3.395 137.44750820000263 11.376 132.88236859999887 10.418 142.6781615999999 4.694 129.2845620999998 4.176 124.0981315999997 9.652 139.83700370000017 4.999 140.22995499999996 4.206 121.38072490000008 5.413 145.24344430000005 3.978 119.21185780000049 10.025 124.2760178999999 3.471 135.51251230000003 4.226 120.12359069999874 7.76 143.01954119999988 4.696 130.38751259999984 4.085 138.00878979999976 5.036)
Error minima by case: (5.3853 3 0.0 0 1.0 1 0.0 0 0.4556 1 0.6052 2 5.8677 8 1.0 1 0.0 0 17.0705 8 5.3749 3 0.0 0 0.0 0 0.4529 1 4.0 1 1.0 1 8.0 1 2.0 1 0.3239 1 0.0 0 0.0 0 0.0088 1 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 115.378
Average program size in population (points): 116.378
Average percent parens in population: 0.009
Minimum age in population: 183.0905750521902
Maximum age in population: 187.6650732193511
Average age in population: 185.724687325048
Median age in population: 185.7856436475231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.422
Error (vector) diversity:			 0.436
Behavioral diversity:				 0.437
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 369687635
--- Timings ---
Current time: 1529615905837 milliseconds
Total Time:         631.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.0 seconds, 29.8%
Fitness Testing:    358.6 seconds, 56.8%
Report:              84.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 38659.9269
Test mean error for best: 19.32996
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 7} {:instruction integer_yank} {:instruction float_div} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_swap} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 7} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup})
Best program: (7 integer_yank float_div integer_div -93 float_stackdepth integer_flush float_rot float_sub in1 integer_swap float_rot float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 7 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3657.7133794
Median total errors in population: 708.3442
Error averages by case: (136.64142499999812 10.211 128.81288930000008 3.687 146.4377604 4.173 129.86672409999943 8.966 145.64800430000005 4.569 150.85386710000003 4.908 172.00176719999848 12.119 150.1814438000002 4.054 132.32739050000018 3.418 146.05263120000293 11.366 142.35616209999955 10.365 147.70316709999994 4.752 135.0373723999998 4.241 133.8393713 9.682 145.38144730000033 4.857 145.21651169999993 4.199 124.90647760000007 5.477 150.19300639999997 4.002 123.49650380000044 10.072 128.41913489999993 3.477 139.93011830000003 4.254 122.04748309999873 8.051 148.03894649999984 4.717 134.38330519999985 4.11 143.40246879999987 4.811)
Error minima by case: (3.3853 2 0.0 0 0.0 0 0.0303 1 16.0 1 0.6052 2 7.1323 2 0.0 0 0.0 0 1.0265 9 0.0143 2 0.0 0 0.0 0 0.4529 1 2.0 1 1.0 1 1.7971 1 2.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 115.581
Average program size in population (points): 116.581
Average percent parens in population: 0.009
Minimum age in population: 184.8027526167949
Maximum age in population: 188.9609263971124
Average age in population: 187.0524157280223
Median age in population: 187.0654828916356
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.421
Error (vector) diversity:			 0.434
Behavioral diversity:				 0.435
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 372577360
--- Timings ---
Current time: 1529615910850 milliseconds
Total Time:         636.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       189.5 seconds, 29.8%
Fitness Testing:    361.4 seconds, 56.8%
Report:              85.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_flush} {:instruction float_cos} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 7} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_mult} {:instruction tagged_536} {:instruction float_mod})
Best program: (integer_flush float_dup_times float_stackdepth tagged_44 float_yankdup float_div integer_flush float_yankdup float_frominteger integer_yank integer_yank float_flush float_cos float_stackdepth tagged_9882 in1 integer_swap integer_stackdepth float_inc float_inc float_inc float_sub float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dec float_dec float_dec 7 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add integer_dec integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_mult tagged_536 float_mod)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3317.5296966000005
Median total errors in population: 766.1090999999999
Error averages by case: (118.34492969999889 10.192 115.74110490000014 3.696 133.24884640000002 4.126 118.56676859999946 8.87 133.51600799999989 4.865 136.54751300000024 4.912 154.84309179999872 12.084 137.2323632000002 4.047 120.11552320000014 3.331 129.14258580000225 11.3 124.20707089999885 10.329 134.6685718999999 4.727 121.35763799999981 4.213 114.82375549999966 9.64 131.6873875000003 4.845 132.22903309999995 4.162 114.17204150000018 5.72 138.1732621000001 3.946 113.46639830000042 10.001 115.94401539999996 3.411 127.8010485 4.212 110.57083749999887 7.778 135.15578659999989 4.704 122.2119884999999 4.071 129.7141266999998 4.866)
Error minima by case: (0.6147 2 0.0 0 0.0 0 0.0303 1 9.4556 1 0.6052 1 4.1323 3 0.0 0 0.0 0 20.0265 2 11.0143 2 1.0 1 0.0 0 0.2445 1 3.0 1 0.0 0 5.0 1 0.0 0 0.3239 1 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 0.6857 1)
Average genome size in population (length): 116.221
Average program size in population (points): 117.221
Average percent parens in population: 0.009
Minimum age in population: 185.9247983739393
Maximum age in population: 190.2913788392497
Average age in population: 188.3445678867236
Median age in population: 188.3329048775939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.438
Error (vector) diversity:			 0.453
Behavioral diversity:				 0.454
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 375483060
--- Timings ---
Current time: 1529615915463 milliseconds
Total Time:         640.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.8 seconds, 29.8%
Fitness Testing:    364.1 seconds, 56.8%
Report:              85.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction print_integer} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction integer_min} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_flush} {:instruction tagged_9882} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518})
Best program: (integer_flush float_dup_times float_div print_integer print_integer float_yankdup float_stackdepth tagged_44 integer_min integer_flush integer_fromfloat integer_shove float_flush tagged_9882 float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec integer_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3222.4877413000004
Median total errors in population: 775.5098999999999
Error averages by case: (114.11098379999876 10.221 112.47298710000015 3.846 129.4220136 4.177 110.14788489999935 8.822 126.9723792999999 4.628 133.84030930000023 4.882 151.40518239999838 12.146 134.78549140000015 4.096 117.51639230000015 3.414 125.60777720000277 11.351 120.02500299999875 10.4 130.84286559999984 4.713 119.10831099999979 4.37 111.06585709999965 9.647 127.62317380000023 4.913 128.82029639999993 4.225 108.55675809999995 5.506 134.74430290000004 3.963 106.67644840000044 10.089 112.85269159999991 3.49 124.83357440000005 4.241 109.36266559999872 7.899 131.33151259999988 4.724 119.67044539999985 4.112 125.85043409999987 4.967)
Error minima by case: (0.3853 2 0.0 0 1.0 1 0.0 0 3.7059 1 0.6052 1 18.1323 9 1.0 1 0.0 0 3.0265 7 5.9857 2 0.0 0 0.0 0 0.4529 1 1.0 1 0.0 0 0.2029 1 2.0 1 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.4755 1)
Average genome size in population (length): 116.913
Average program size in population (points): 117.913
Average percent parens in population: 0.009
Minimum age in population: 186.9334537533054
Maximum age in population: 191.8033080416816
Average age in population: 189.6208893205536
Median age in population: 189.6612510376489
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.439
Error (vector) diversity:			 0.458
Behavioral diversity:				 0.459
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 378406310
--- Timings ---
Current time: 1529615920305 milliseconds
Total Time:         645.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.2 seconds, 29.8%
Fitness Testing:    367.0 seconds, 56.8%
Report:              86.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction in1} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_min} {:instruction float_div} {:instruction integer_flush} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction float_inc} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 7} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_235} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction float_mod})
Best program: (float_sin float_dup_times float_div integer_flush float_dup_times integer_fromfloat float_stackdepth float_stackdepth integer_pop float_stackdepth in1 float_yank float_dup_times integer_min float_div integer_flush integer_dup integer_dup integer_fromfloat tagged_9882 float_sin float_sin float_div float_inc in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 7 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_235 integer_add float_yankdup float_min float_mod)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2862.308807199999
Median total errors in population: 707.3745
Error averages by case: (103.10285189999883 10.179 99.6569929000001 3.332 115.39302220000006 3.809 97.75138329999956 8.67 111.5161772999999 4.46 117.68153380000027 4.651 138.72039009999855 12.102 119.26549560000011 3.685 100.81673970000013 2.979 112.41756430000254 11.301 107.92406729999888 10.322 116.76119229999986 4.38 106.38816909999974 3.92 99.63192559999963 9.545 113.69966380000021 4.587 114.15848849999999 3.816 93.27065930000003 5.23 119.15266180000008 3.651 95.01754940000042 9.889 96.67942169999996 3.09 108.18402599999997 3.855 95.3549544999989 7.6 117.08152569999986 4.37 102.79405649999984 3.703 112.14129459999977 4.621)
Error minima by case: (0.3853 1 0.0 0 0.0 0 0.0 0 9.4556 1 0.3948 1 6.1323 1 0.0 0 0.0 0 12.0179 1 10.214 2 0.0 0 0.0 0 0.4529 1 0.1332 1 0.0 0 8.2029 1 0.8427 1 0.0 0 0.0 0 0.0 0 0.8812 1 0.0 0 0.0 0 0.4192 1)
Average genome size in population (length): 116.042
Average program size in population (points): 117.042
Average percent parens in population: 0.009
Minimum age in population: 188.3719813715674
Maximum age in population: 193.2955819945005
Average age in population: 190.8676224252635
Median age in population: 190.9011569101247
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.419
Error (vector) diversity:			 0.439
Behavioral diversity:				 0.44
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 381307710
--- Timings ---
Current time: 1529615925084 milliseconds
Total Time:         650.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       193.7 seconds, 29.8%
Fitness Testing:    369.7 seconds, 56.8%
Report:              87.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_div} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_yank} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_sin} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth})
Best program: (integer_flush float_dup_times float_div float_frominteger print_integer float_yankdup float_stackdepth tagged_44 float_div integer_dup float_dup_times float_dec integer_yank in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec integer_sub float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_mult integer_yankdup float_min float_sin tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2929.0349037
Median total errors in population: 667.0203
Error averages by case: (103.1037477999989 10.19 98.2288616000001 3.397 116.9077172 3.89 105.3136854999995 8.799 120.49065789999992 4.376 124.89590660000017 4.722 141.02321589999846 12.096 120.51145270000012 3.795 102.31512150000007 3.078 114.61123840000242 11.298 110.93838699999897 10.319 118.2111593999999 4.489 105.10361739999983 3.924 100.44446379999965 9.659 116.4432610000001 4.575 115.37935169999997 3.949 99.81765680000008 5.167 121.17894870000005 3.696 98.4891545000004 10.051 98.38632949999993 3.201 110.0074339 3.925 99.64904009999873 7.565 118.32045479999992 4.46 104.3315606999999 3.788 115.97147929999981 4.552)
Error minima by case: (3.6052 8 0.0 0 0.0 0 0.0303 1 2.9031 1 0.6052 1 23.7506 8 0.0 0 0.0 0 0.9735 8 9.9857 2 1.0 1 0.0 0 0.4529 1 1.4276 1 1.0 1 1.8594 1 9.0 1 0.0 0 0.0 0 0.0 0 1.9406 1 0.0 0 0.0 0 0.727 1)
Average genome size in population (length): 115.065
Average program size in population (points): 116.065
Average percent parens in population: 0.009
Minimum age in population: 189.5159583731846
Maximum age in population: 194.0634359363113
Average age in population: 192.1910651795719
Median age in population: 192.2203969531849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.409
Error (vector) diversity:			 0.426
Behavioral diversity:				 0.427
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 384184585
--- Timings ---
Current time: 1529615929889 milliseconds
Total Time:         655.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.0 seconds, 29.8%
Fitness Testing:    372.5 seconds, 56.8%
Report:              87.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction tagged_518} {:instruction float_cos} {:instruction integer_min} {:instruction float_min} {:instruction integer_fromfloat})
Best program: (integer_flush float_dup_times float_div integer_div -93 float_stackdepth integer_flush float_yankdup float_max integer_yank float_sin integer_flush float_swap integer_fromfloat integer_fromfloat float_stackdepth float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_min float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 float_mult float_yankdup float_dup_items tagged_518 float_cos integer_min float_min integer_fromfloat)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3004.1618493
Median total errors in population: 766.1090999999999
Error averages by case: (109.04658939999914 10.199 104.25660090000012 3.801 118.3194270000001 4.133 104.91675849999939 8.726 120.05915489999987 4.559 124.9329790000003 4.818 145.1956747999984 12.135 123.08535130000024 4.057 106.79983540000018 3.352 118.4028426000023 11.335 114.70356369999902 10.363 119.86921889999982 4.702 112.08523619999984 4.315 105.93792899999968 9.556 119.61585630000022 4.958 117.87137189999987 4.213 99.40418459999997 5.346 123.87623220000006 3.964 100.08658610000046 9.978 101.72359689999995 3.436 115.47890360000001 4.223 97.51259609999877 7.919 120.35029779999986 4.703 109.04710439999987 4.03 117.77395779999979 4.989)
Error minima by case: (0.3853 2 0.0 0 0.0 0 0.0 0 4.4556 1 0.6052 1 5.1323 9 0.0 0 0.0 0 3.0265 2 5.9857 2 1.0 1 0.0 0 0.4529 1 3.4276 1 0.0 0 0.2029 1 3.0 1 0.1762 1 0.0 0 0.0 0 0.0594 1 0.0 0 0.0 0 0.5811 1)
Average genome size in population (length): 114.667
Average program size in population (points): 115.667
Average percent parens in population: 0.009
Minimum age in population: 191.1769146486218
Maximum age in population: 195.3104058128447
Average age in population: 193.5391746847904
Median age in population: 193.5694404644425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.441
Error (vector) diversity:			 0.458
Behavioral diversity:				 0.459
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 387051735
--- Timings ---
Current time: 1529615934508 milliseconds
Total Time:         660.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.4 seconds, 29.8%
Fitness Testing:    375.1 seconds, 56.8%
Report:              88.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction integer_dup} {:instruction in1} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_tan} {:instruction tagged_518} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mod})
Best program: (float_dup_times float_dup_times float_stackdepth tagged_44 float_yankdup float_div integer_stackdepth float_stackdepth tagged_9882 float_sin float_div integer_flush integer_dup in1 integer_mod integer_dec float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_tan tagged_518 float_mult integer_mult float_mod)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2877.2875983
Median total errors in population: 714.35935
Error averages by case: (102.65150009999842 10.188 100.11758600000016 3.627 115.97695350000001 3.905 99.28356469999943 8.714 114.31135789999989 4.394 119.22599770000032 4.635 140.36051029999848 12.124 119.76923880000018 3.782 101.48324880000017 3.03 113.67031230000276 11.308 108.72012439999857 10.318 117.32896169999985 4.471 107.02285809999972 4.155 99.30613679999969 9.583 113.84586600000027 4.61 114.55315439999991 3.874 93.75158970000014 5.191 119.42327990000008 3.67 92.22415300000043 9.945 97.51451039999995 3.142 109.1693973 3.914 94.37010099999867 7.598 117.53322619999985 4.446 103.5057889999999 3.782 113.12718029999978 4.635)
Error minima by case: (3.3186 2 0.0 0 1.0 1 0.0 0 4.4556 1 0.6052 1 11.5152 9 1.0 1 0.0 0 9.9315 8 1.0143 1 0.0 0 0.0 0 0.4529 1 2.0 1 0.0 0 7.2029 1 5.0 1 0.3239 1 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.2291 1)
Average genome size in population (length): 114.185
Average program size in population (points): 115.185
Average percent parens in population: 0.009
Minimum age in population: 192.5570075087209
Maximum age in population: 196.801679530457
Average age in population: 194.7838023726935
Median age in population: 194.8542473403989
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.432
Error (vector) diversity:			 0.448
Behavioral diversity:				 0.449
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 389907185
--- Timings ---
Current time: 1529615939072 milliseconds
Total Time:         664.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.7 seconds, 29.8%
Fitness Testing:    377.8 seconds, 56.8%
Report:              89.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 7} {:instruction float_dup_times} {:instruction float_tan} {:instruction integer_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction float_sub} {:instruction float_tan} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sin} {:instruction float_sin} {:instruction float_div} {:instruction tagged_44} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_flush} {:instruction tagged_9882} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518} {:instruction tagged_639} {:instruction float_yankdup})
Best program: (7 float_dup_times float_tan integer_div integer_flush float_dup_times float_stackdepth tagged_44 float_sub float_tan integer_dup float_dup_times float_dec float_div integer_flush float_dup_times integer_fromfloat integer_fromfloat float_max float_sin float_sin float_div tagged_44 float_sin in1 integer_fromfloat integer_shove float_flush tagged_9882 float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc float_mod float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518 tagged_639 float_yankdup)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3230.0787948000007
Median total errors in population: 674.00135
Error averages by case: (117.04017419999849 10.206 112.82069970000016 3.59 129.55364160000008 4.011 110.45527889999934 8.823 128.1924336999999 4.582 134.76477620000023 4.761 154.51839049999833 12.126 134.28286200000014 3.94 113.9456007000002 3.175 128.35474080000296 11.332 122.98925109999855 10.393 130.96329419999986 4.636 119.13951509999974 4.17 114.36561199999967 9.639 128.80983050000017 4.641 128.30421669999996 4.051 109.64312840000008 5.374 131.84381700000003 3.865 111.29366050000048 10.093 109.78445959999989 3.287 121.45530190000005 4.059 110.71077069999858 7.665 131.30697939999988 4.628 116.34462999999984 3.958 127.60672939999982 4.584)
Error minima by case: (0.6147 1 0.0 0 2.0 1 0.0303 1 3.3214 1 0.3948 1 5.0 1 2.0 1 0.0 0 0.0265 1 4.9857 1 3.0 1 0.0 0 0.5471 1 0.0 0 0.0 0 0.2029 1 2.0 1 0.156 1 0.0 0 0.0 0 0.0 0 2.0 1 0.0 0 0.6857 1)
Average genome size in population (length): 114.165
Average program size in population (points): 115.165
Average percent parens in population: 0.009
Minimum age in population: 193.8896179086678
Maximum age in population: 197.9167323363222
Average age in population: 196.0960359804407
Median age in population: 196.1265241798772
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.407
Error (vector) diversity:			 0.427
Behavioral diversity:				 0.427
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 392762660
--- Timings ---
Current time: 1529615944242 milliseconds
Total Time:         669.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.2 seconds, 29.8%
Fitness Testing:    380.7 seconds, 56.9%
Report:              89.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_max} {:instruction integer_flush} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_flush} {:instruction print_float} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction float_stackdepth})
Best program: (integer_flush float_dup_times integer_max integer_flush float_dup_times integer_flush float_dup_times print_integer integer_flush float_dup_times integer_max integer_flush tagged_9882 float_sin float_sin float_tan integer_flush float_yankdup float_frominteger integer_yank integer_flush print_float float_mult integer_fromfloat integer_fromfloat float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub float_stackdepth)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3449.8054632000003
Median total errors in population: 709.3741
Error averages by case: (125.87188639999863 10.191 120.8084706000001 3.589 140.8216822 3.984 118.65246609999942 8.758 132.0726401999999 4.447 136.48675040000018 4.785 163.20421349999842 12.12 143.9097747000001 3.925 125.9278688000001 3.177 137.30728330000287 11.338 132.21598849999882 10.357 142.01494419999995 4.567 126.84013169999984 4.122 123.38565459999967 9.654 136.72518770000016 4.762 138.8733098999999 4.0 115.36313170000003 5.155 144.3220589999999 3.826 114.7727487000005 9.928 122.64731709999995 3.313 133.4496656 4.05 116.14142039999857 7.891 142.06196789999996 4.586 127.9058505999999 3.922 136.7860493999998 4.79)
Error minima by case: (3.0419 2 0.0 0 2.0 1 0.0303 1 0.5444 1 0.6052 1 0.8677 3 2.0 1 0.0 0 7.0433 3 11.0433 2 1.3976 1 0.0 0 0.4529 1 1.0 1 0.0 0 7.0 1 0.1314 1 0.1116 1 0.0 0 0.0 0 1.1054 1 2.0 1 0.0 0 1.9315 1)
Average genome size in population (length): 113.763
Average program size in population (points): 114.763
Average percent parens in population: 0.009
Minimum age in population: 194.8938502407913
Maximum age in population: 199.3013345829484
Average age in population: 197.4120860358859
Median age in population: 197.4099997268939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.401
Error (vector) diversity:			 0.424
Behavioral diversity:				 0.424
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 395608010
--- Timings ---
Current time: 1529615948815 milliseconds
Total Time:         674.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.6 seconds, 29.7%
Fitness Testing:    383.3 seconds, 56.8%
Report:              90.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_flush} {:instruction integer_div} {:instruction -93} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_dup_times} {:instruction 79} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_pop} {:instruction tagged_518} {:instruction float_inc} {:instruction tagged_567} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_sin} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush})
Best program: (integer_flush float_dup_times float_div integer_flush integer_div -93 float_stackdepth integer_flush float_dup_times 79 in1 float_stackdepth integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_pop tagged_518 float_inc tagged_567 integer_yankdup float_min float_sin tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3163.4509734
Median total errors in population: 666.5203
Error averages by case: (115.37671619999895 10.187 110.8085848000001 3.367 126.0492405 4.042 112.72913699999945 8.742 125.99728379999989 4.392 132.26463960000024 4.646 152.57535509999863 12.104 130.0136983000002 3.959 111.75406330000018 3.268 126.39651850000229 11.314 121.03562119999904 10.325 127.52778859999985 4.641 115.21747829999985 3.975 111.90476819999967 9.634 124.73616880000023 4.769 124.70772659999992 4.078 107.44998980000021 5.31 129.99531690000006 3.867 106.36928180000038 10.105 107.47260549999994 3.353 119.56406010000005 4.117 106.89204309999884 7.85 127.48187839999986 4.637 113.78562919999985 3.986 124.02037979999982 4.657)
Error minima by case: (0.6147 1 0.0 0 0.0 0 0.0303 1 18.0 1 0.3948 1 5.0 1 0.0 0 0.0 0 3.0265 1 5.0 1 1.0 1 0.0 0 0.5471 1 3.0 1 1.0 1 0.2029 1 6.0 1 0.1866 1 0.0 0 0.0 0 0.1351 1 0.0 0 0.0 0 0.3142 1)
Average genome size in population (length): 113.722
Average program size in population (points): 114.722
Average percent parens in population: 0.009
Minimum age in population: 195.8938502407913
Maximum age in population: 200.91729014865
Average age in population: 198.8281232267425
Median age in population: 198.8572480343219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.396
Error (vector) diversity:			 0.413
Behavioral diversity:				 0.414
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 398452260
--- Timings ---
Current time: 1529615953590 milliseconds
Total Time:         679.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.0 seconds, 29.8%
Fitness Testing:    386.0 seconds, 56.8%
Report:              90.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_div} {:instruction tagged_9870} {:instruction float_sin} {:instruction float_max} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction in1} {:instruction integer_swap} {:instruction 26} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_518} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction tagged_518} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_stackdepth})
Best program: (integer_div float_mult float_frominteger integer_div tagged_9870 float_sin float_max integer_flush float_yankdup integer_dup_items integer_yank in1 integer_swap 26 float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec integer_sub float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float integer_dup tagged_518 float_mult integer_yankdup integer_stackdepth float_sub tagged_518 integer_add float_yankdup float_min integer_fromfloat float_flush float_yankdup float_stackdepth)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3130.7471943999994
Median total errors in population: 711.3442
Error averages by case: (115.5307506999987 10.205 109.4922713000001 3.4 125.75423889999999 3.988 108.2953475999995 8.507 123.42462129999994 4.31 128.59337000000022 4.652 152.27931899999854 12.138 130.01028880000013 3.884 111.71502350000011 3.125 125.76162400000266 11.304 122.0850804999987 10.36 127.10431829999989 4.534 115.76741539999976 3.953 113.05694769999964 9.65 123.36953460000024 4.639 124.62877099999996 3.979 100.69550870000009 5.152 129.70327640000002 3.836 101.69035370000036 9.903 107.31928839999998 3.288 119.04853189999997 4.015 101.93393299999885 7.788 127.28106929999988 4.558 113.9188235999999 3.864 122.55448679999981 4.701)
Error minima by case: (3.4086 8 0.0 0 1.0 1 0.0 0 0.5444 1 0.6052 1 38.1323 7 1.0 1 0.0 0 10.0265 2 1.0143 3 0.0 0 0.0 0 1.4529 1 1.0 1 0.0 0 4.712 1 2.0 1 0.3523 1 0.0 0 0.0 0 2.0 1 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 113.468
Average program size in population (points): 114.468
Average percent parens in population: 0.009
Minimum age in population: 196.9070459192115
Maximum age in population: 202.1359146139234
Average age in population: 200.0797216891379
Median age in population: 200.093599543953
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.42
Error (vector) diversity:			 0.438
Behavioral diversity:				 0.438
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 401289835
--- Timings ---
Current time: 1529615958538 milliseconds
Total Time:         683.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.5 seconds, 29.8%
Fitness Testing:    388.7 seconds, 56.8%
Report:              91.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction tagged_9882} {:instruction float_sin} {:instruction float_div} {:instruction integer_flush} {:instruction integer_dup} {:instruction in1} {:instruction integer_mod} {:instruction integer_dec} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_max} {:instruction float_cos} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_max integer_flush integer_dup float_dup_times float_yankdup integer_stackdepth integer_max tagged_9882 float_sin float_div integer_flush integer_dup in1 integer_mod integer_dec integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_max float_cos float_stackdepth integer_stackdepth integer_stackdepth float_shove tag_float_1045)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2876.434786700001
Median total errors in population: 678.20345
Error averages by case: (101.48953949999849 10.197 97.1415199000001 3.416 115.75032540000005 3.815 99.10294209999941 8.733 113.4760040999999 4.33 119.54628760000031 4.712 139.96912779999838 12.157 119.16312430000015 3.719 100.78849000000014 2.972 113.63539720000284 11.369 107.98000699999874 10.397 117.03160159999987 4.4 102.90809019999976 3.911 98.62236829999965 9.481 116.94288190000023 4.551 114.06957689999993 3.811 96.30947970000007 5.233 120.11941900000008 3.669 94.5910061000004 9.989 97.38376959999995 3.132 108.89172760000002 3.879 97.00549959999864 7.644 117.22413689999988 4.4 102.70573519999989 3.711 116.3907291999998 4.568)
Error minima by case: (0.6147 2 0.0 0 0.0 0 0.0 0 17.0 1 0.6052 1 7.1323 8 0.0 0 0.0 0 9.9735 9 10.9493 9 0.0 0 0.0 0 0.2441 1 3.0 1 1.0 1 8.0 1 6.0 1 0.0284 1 0.0 0 0.0 0 0.0594 1 0.0 0 0.0 0 0.6857 1)
Average genome size in population (length): 114.213
Average program size in population (points): 115.213
Average percent parens in population: 0.009
Minimum age in population: 197.9070459192115
Maximum age in population: 203.3824742275546
Average age in population: 201.3709864626156
Median age in population: 201.3913927987482
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.428
Error (vector) diversity:			 0.447
Behavioral diversity:				 0.447
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 404145835
--- Timings ---
Current time: 1529615963869 milliseconds
Total Time:         689.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.0 seconds, 29.7%
Fitness Testing:    391.8 seconds, 56.9%
Report:              92.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 39160.1387
Test mean error for best: 19.58007
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction print_integer} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction integer_min} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_mod} {:instruction tagged_9882} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518})
Best program: (integer_flush float_dup_times float_div print_integer print_integer float_yankdup float_stackdepth tagged_44 integer_min integer_flush integer_fromfloat integer_shove float_mod tagged_9882 float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec integer_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518)
Errors: [8.3853 10 0.0 0 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 592.4036000000001
Mean: 11.848072
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2854.334552700001
Median total errors in population: 666.0203
Error averages by case: (103.00005039999921 10.187 97.6483030000001 3.262 115.04975170000002 3.954 94.4087935999994 8.543 112.63345119999991 4.266 118.00783800000025 4.648 139.63247309999855 12.123 119.3410019000002 3.809 100.98430910000015 3.12 113.09456860000218 11.307 108.45837099999909 10.325 116.62573959999986 4.532 103.76487629999987 3.886 100.30095679999964 9.574 112.07963110000017 4.539 113.99577939999992 3.929 94.54875810000003 5.137 119.36958850000009 3.758 92.25053060000046 9.922 96.61785099999994 3.22 108.81086180000001 3.995 93.35766459999873 7.688 116.92158849999986 4.5 103.1720454999999 3.832 111.59776929999985 4.606)
Error minima by case: (3.397 2 0.0 0 0.0 0 0.0 0 0.5444 1 0.6052 1 0.1323 8 0.0 0 0.0 0 1.9735 8 1.0143 2 0.0 0 0.0 0 1.2736 1 1.0 1 0.0 0 2.2133 1 1.0 1 0.3239 1 0.0 0 0.0 0 0.8812 1 0.0 0 0.0 0 1.4377 1)
Average genome size in population (length): 114.133
Average program size in population (points): 115.133
Average percent parens in population: 0.009
Minimum age in population: 200.1279562971784
Maximum age in population: 204.6060299648283
Average age in population: 202.6817135260242
Median age in population: 202.7113408136408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.408
Error (vector) diversity:			 0.432
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 407000160
--- Timings ---
Current time: 1529615968595 milliseconds
Total Time:         694.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.4 seconds, 29.7%
Fitness Testing:    394.5 seconds, 56.8%
Report:              93.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 39160.1387
Test mean error for best: 19.58007
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction print_integer} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction tagged_44} {:instruction integer_min} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_mod} {:instruction tagged_9882} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction tagged_518})
Best program: (integer_flush float_dup_times float_div print_integer print_integer float_yankdup float_stackdepth tagged_44 integer_min integer_flush integer_fromfloat integer_shove float_mod tagged_9882 float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec integer_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub tagged_518)
Errors: [8.3853 10 0.0 0 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 592.4036000000001
Mean: 11.848072
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3656.9415845999997
Median total errors in population: 706.85875
Error averages by case: (133.18583519999808 10.267 129.07309460000016 3.798 147.1732218 4.265 127.76578589999939 8.847 145.1511471 4.592 149.30742970000009 4.782 169.0362739999984 12.197 151.47732000000016 4.16 133.40247940000017 3.505 143.36991940000323 11.376 138.96410749999913 10.425 148.5812762999999 4.819 135.76557839999975 4.345 129.9994765999997 9.759 144.6516259000003 4.984 146.05333349999995 4.309 127.71330920000014 5.279 149.98232690000003 4.079 124.75190580000046 10.081 129.17985649999994 3.555 141.1096381 4.322 125.9247857999987 7.934 149.0603264999999 4.813 135.75835219999985 4.208 144.80617829999989 4.996)
Error minima by case: (0.6147 8 0.0 0 1.0 1 0.0 0 14.4556 1 0.6052 1 19.8677 8 1.0 1 0.0 0 3.2977 8 0.0143 2 0.0 0 0.0 0 0.4529 1 1.5951 1 0.0 0 0.2029 1 2.7741 1 0.1025 1 0.0 0 0.0 0 0.1544 1 1.0 1 0.0 0 0.327 1)
Average genome size in population (length): 113.755
Average program size in population (points): 114.755
Average percent parens in population: 0.009
Minimum age in population: 201.1279562971784
Maximum age in population: 206.1206495574616
Average age in population: 203.9687848810786
Median age in population: 204.0004615404026
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.416
Error (vector) diversity:			 0.437
Behavioral diversity:				 0.438
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 409845585
--- Timings ---
Current time: 1529615973492 milliseconds
Total Time:         698.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.1 seconds, 29.8%
Fitness Testing:    397.1 seconds, 56.8%
Report:              93.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 38805.821599999996
Test mean error for best: 19.40291
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_max} {:instruction float_sin} {:instruction float_shove} {:instruction integer_flush} {:instruction integer_dup} {:instruction in1} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 7} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_44} {:instruction float_swap} {:instruction in1} {:instruction float_tan} {:instruction integer_shove} {:instruction float_flush} {:instruction tagged_9882} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_sub} {:instruction integer_dup_items} {:instruction tagged_639} {:instruction float_yankdup})
Best program: (integer_sub integer_flush float_dup_times float_dup_times float_yankdup integer_stackdepth integer_div float_max float_sin float_shove integer_flush integer_dup in1 integer_mod integer_dec float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_flush float_dec float_dec float_dec 7 float_dec float_dec float_dec tagged_44 float_swap in1 float_tan integer_shove float_flush tagged_9882 float_stackdepth in1 integer_swap integer_flush float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_sub integer_dup_items tagged_639 float_yankdup)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 155
Size: 156
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 2910.8720044
Median total errors in population: 710.8739
Error averages by case: (104.87738299999872 10.213 98.40971440000008 3.468 114.63307260000006 4.021 96.8100886999995 8.589 115.9951130999999 4.448 122.81745460000029 4.733 141.99894999999842 12.116 119.03375970000016 3.964 103.33866520000016 3.318 115.7286979000026 11.32 110.59921629999884 10.348 116.0583484999998 4.623 103.86043689999988 3.97 101.4958084999997 9.522 118.38631600000032 4.812 114.23677219999993 4.126 98.01247810000011 5.493 121.26114640000009 3.889 95.93242000000038 9.921 98.52205719999999 3.397 111.26074410000001 4.162 96.75874189999881 7.925 116.73418439999983 4.592 105.39493489999987 3.986 116.80649979999981 4.953)
Error minima by case: (3.6001 3 0.0 0 0.0 0 0.0303 1 0.0 0 0.3948 1 9.1323 8 0.0 0 0.0 0 13.0265 2 4.0143 3 0.0 0 0.0 0 1.4529 1 4.0 1 0.0 0 9.0 1 1.0 1 0.1705 1 0.0 0 0.0 0 1.4562 1 0.0 0 0.0 0 0.3143 1)
Average genome size in population (length): 113.335
Average program size in population (points): 114.335
Average percent parens in population: 0.009
Minimum age in population: 202.7074798097188
Maximum age in population: 207.9294526108024
Average age in population: 205.3265607217905
Median age in population: 205.3630103303606
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.442
Error (vector) diversity:			 0.459
Behavioral diversity:				 0.46
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 412680385
--- Timings ---
Current time: 1529615978308 milliseconds
Total Time:         703.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       209.6 seconds, 29.8%
Fitness Testing:    399.7 seconds, 56.8%
Report:              94.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 38659.9269
Test mean error for best: 19.32996
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 49.0606318457 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 28.9715724743 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction tagged_44} {:instruction float_sin} {:instruction float_tan} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 9} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float})
Best program: (integer_flush integer_div float_mult float_yankdup integer_div tagged_44 float_sin float_tan integer_flush float_yankdup integer_dup_items integer_yank in1 integer_swap integer_stackdepth float_inc float_inc float_stackdepth integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec integer_fromfloat integer_fromfloat float_stackdepth in1 integer_swap integer_stackdepth float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 9 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_max integer_pop float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float)
Errors: [8.3853 10 0.0 0 38.0 2 1.0303 8 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 5.6477 9 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 597.0816
Mean: 11.941632
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3096.8453071000026
Median total errors in population: 667.0203
Error averages by case: (111.99229159999867 10.193 105.04318780000011 3.192 125.93813450000003 3.762 105.62125279999941 8.634 122.45143099999993 4.264 125.38361040000021 4.578 149.58506089999847 12.134 128.96298990000014 3.662 110.86853540000011 2.933 123.25728840000276 11.324 118.71724349999876 10.359 127.19531029999987 4.376 110.30914569999989 3.754 109.40334929999965 9.631 124.62270400000021 4.499 123.98394639999997 3.769 103.8827670000001 5.035 129.97477610000004 3.589 101.49966630000048 9.918 107.75725429999997 3.038 119.19135049999998 3.833 101.60605999999868 7.655 127.33286799999993 4.367 112.66145599999993 3.655 122.87662699999977 4.573)
Error minima by case: (1.6147 2 0.0 0 0.0 0 0.0303 1 1.5444 1 0.6052 1 2.8677 3 0.0 0 0.0 0 19.0265 8 10.0143 2 0.0 0 0.0 0 0.4529 1 2.0 1 1.0 1 8.0 1 4.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.4092 1)
Average genome size in population (length): 112.979
Average program size in population (points): 113.979
Average percent parens in population: 0.009
Minimum age in population: 204.0900900716352
Maximum age in population: 208.8147560573778
Average age in population: 206.6531128542024
Median age in population: 206.657016739725
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.396
Error (vector) diversity:			 0.414
Behavioral diversity:				 0.415
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 415505985
--- Timings ---
Current time: 1529615983303 milliseconds
Total Time:         708.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.2 seconds, 29.8%
Fitness Testing:    402.3 seconds, 56.8%
Report:              95.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 39177.0507
Test mean error for best: 19.58853
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -59.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -94.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 2.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 595.4036
Mean: 11.908072
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3487.3846366000007
Median total errors in population: 739.27165
Error averages by case: (132.29079299999796 10.19 124.75524840000011 3.823 139.03683870000003 4.268 121.63229089999938 8.888 135.55522259999998 4.584 142.0766142000002 4.82 166.02371989999833 12.104 142.7714137000002 4.187 126.95790320000019 3.551 140.36432220000316 11.319 138.33538359999892 10.338 140.43534139999986 4.817 129.99164449999972 4.334 129.1983714999997 9.716 137.0319320000003 5.141 138.7462065999999 4.332 113.12541030000021 5.379 144.01426940000007 4.096 112.63211510000046 9.989 122.95118769999998 3.537 135.67851299999998 4.379 111.12026179999876 8.235 140.07688859999985 4.801 130.06144769999983 4.196 136.2652965999998 5.232)
Error minima by case: (2.3853 2 0.0 0 0.0 0 0.0303 1 15.4556 1 0.3948 1 35.1323 9 0.0 0 0.0 0 7.0265 8 0.9857 2 0.0 0 0.0 0 0.4529 1 0.9714 1 0.0 0 0.2029 1 6.0 1 0.0 0 0.0 0 0.0 0 1.3243 1 0.0 0 0.0 0 0.727 1)
Average genome size in population (length): 113.099
Average program size in population (points): 114.099
Average percent parens in population: 0.009
Minimum age in population: 205.4971032138379
Maximum age in population: 210.0756681677835
Average age in population: 208.0095179821092
Median age in population: 208.0151675280996
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.42
Error (vector) diversity:			 0.435
Behavioral diversity:				 0.436
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 418333985
--- Timings ---
Current time: 1529615987910 milliseconds
Total Time:         713.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.6 seconds, 29.8%
Fitness Testing:    404.9 seconds, 56.8%
Report:              95.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 39177.0507
Test mean error for best: 19.58853
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -59.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -94.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 2.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 595.4036
Mean: 11.908072
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2925.3584866000006
Median total errors in population: 712.3741
Error averages by case: (107.38743019999914 10.237 97.79361480000011 3.581 115.98479180000004 4.162 101.1906109999995 8.759 117.00267539999987 4.53 122.2498071000003 4.8 141.6895551999986 12.157 122.33790320000017 4.071 102.35595050000018 3.383 115.19242240000216 11.385 111.83221859999911 10.411 117.57575299999989 4.74 104.96872889999987 4.075 103.56555459999964 9.43 115.95310530000025 4.791 115.41886529999995 4.153 96.17092839999991 5.404 120.14868120000007 3.957 94.55157000000042 10.026 97.74198449999996 3.44 110.81441010000002 4.232 100.08196549999882 7.758 118.14145649999989 4.716 105.14414479999985 4.083 116.95435829999988 4.829)
Error minima by case: (0.6147 9 0.0 0 0.0 0 0.0 0 9.4556 1 0.6052 1 2.1323 9 0.0 0 0.0 0 10.9735 8 8.0143 3 0.0 0 0.0 0 0.4529 1 2.0 1 0.0 0 9.0 1 5.0 1 0.3523 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.2879 1)
Average genome size in population (length): 112.378
Average program size in population (points): 113.378
Average percent parens in population: 0.009
Minimum age in population: 206.8381219617414
Maximum age in population: 211.2683021559223
Average age in population: 209.3046428225508
Median age in population: 209.3371271919908
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.429
Error (vector) diversity:			 0.441
Behavioral diversity:				 0.443
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 421143760
--- Timings ---
Current time: 1529615992661 milliseconds
Total Time:         718.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.2 seconds, 29.8%
Fitness Testing:    407.6 seconds, 56.7%
Report:              96.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 39177.0507
Test mean error for best: 19.58853
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -59.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -94.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 2.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 595.4036
Mean: 11.908072
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2950.064114100002
Median total errors in population: 666.8135500000001
Error averages by case: (109.73551339999852 10.184 97.7260854000001 3.243 115.37043900000006 4.049 105.0675547999994 8.623 123.2851071999999 4.308 128.09572070000027 4.668 144.51047709999847 12.084 120.29990910000018 3.949 103.56590160000023 3.214 117.44292710000272 11.268 116.06214439999866 10.314 116.88412579999985 4.591 103.30838259999982 3.74 107.02748489999966 9.687 117.00497950000022 4.783 115.26130619999994 4.068 97.31350650000023 5.255 121.11221690000008 3.884 96.44307960000047 9.867 98.22846859999993 3.367 110.87426890000002 4.114 97.2050873999987 7.671 117.22588069999983 4.591 105.68812459999984 3.961 115.03642209999975 4.806)
Error minima by case: (5.3853 9 0.0 0 1.0 1 0.0303 1 17.0 1 1.6052 1 11.1323 2 1.0 1 0.0 0 8.9735 2 17.0143 2 1.0 1 0.0 0 1.4042 1 1.4276 1 0.0 0 8.0 1 6.0 1 0.0065 1 0.0 0 0.0 0 0.0594 1 1.0 1 0.0 0 2.6858 1)
Average genome size in population (length): 111.711
Average program size in population (points): 112.711
Average percent parens in population: 0.009
Minimum age in population: 207.8381219617414
Maximum age in population: 212.6242675069727
Average age in population: 210.6441547979391
Median age in population: 210.7146488471115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.434
Error (vector) diversity:			 0.451
Behavioral diversity:				 0.452
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 423936685
--- Timings ---
Current time: 1529615997201 milliseconds
Total Time:         722.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.6 seconds, 29.8%
Fitness Testing:    410.1 seconds, 56.8%
Report:              96.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 39177.0507
Test mean error for best: 19.58853
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -59.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -94.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 2.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 595.4036
Mean: 11.908072
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3175.140290599999
Median total errors in population: 735.82475
Error averages by case: (116.36807559999885 10.206 107.68215830000015 3.779 126.24756570000004 4.203 111.16407109999943 8.707 126.99303899999987 4.574 134.44039640000022 4.769 152.15018009999847 12.14 131.07974090000022 4.069 113.04038680000022 3.359 125.48015770000258 11.329 121.63474459999884 10.378 127.71330219999987 4.764 114.31485699999983 4.308 112.61875149999966 9.596 127.20751000000028 4.959 125.3934728999999 4.226 105.4772905000001 5.448 130.77813490000005 4.009 106.3236897000004 9.937 108.53818909999993 3.467 120.59954930000006 4.222 107.21190769999869 7.785 128.25628919999986 4.745 115.16776689999982 4.071 125.3590634999998 4.85)
Error minima by case: (0.3123 1 0.0 0 0.0 0 0.0 0 12.7371 1 0.3948 1 5.0 1 0.0 0 0.0 0 3.0265 1 5.0 1 1.0 1 0.0 0 0.4529 1 1.4276 1 2.0 1 0.2029 1 6.0 1 0.0 0 0.0 0 0.0 0 1.1507 1 0.0 0 0.0 0 0.4192 1)
Average genome size in population (length): 111.57
Average program size in population (points): 112.57
Average percent parens in population: 0.009
Minimum age in population: 209.8242405513875
Maximum age in population: 214.1107530626516
Average age in population: 211.9940854219889
Median age in population: 212.046464163854
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.422
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 426726235
--- Timings ---
Current time: 1529616001916 milliseconds
Total Time:         727.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       217.2 seconds, 29.9%
Fitness Testing:    412.7 seconds, 56.7%
Report:              97.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 39177.0507
Test mean error for best: 19.58853
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -59.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -94.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 2.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 595.4036
Mean: 11.908072
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3153.751587800001
Median total errors in population: 666.8135500000001
Error averages by case: (114.51164359999908 10.202 109.69454290000013 3.42 128.11878720000004 3.966 107.54314589999939 8.711 124.17451789999991 4.371 128.48991970000017 4.642 152.12720189999848 12.137 133.01269740000012 3.835 112.62583710000015 3.092 125.66765510000228 11.297 121.08544949999892 10.35 129.55146439999987 4.567 115.32477869999985 3.942 111.7125950999997 9.661 125.85053780000025 4.596 126.72862029999993 3.947 103.35020799999997 5.212 130.40190860000004 3.778 100.8674990000005 9.872 108.67800129999995 3.213 120.43980460000004 3.971 104.5216548999989 7.738 129.90018569999987 4.521 114.92944669999986 3.851 125.04348449999986 4.508)
Error minima by case: (3.3824 2 0.0 0 0.0 0 0.0 0 18.0 1 0.3948 1 3.8677 6 0.0 0 0.0 0 20.9735 5 14.9974 3 1.0 1 0.0 0 1.4529 1 1.5951 1 1.0 1 9.0 1 5.0 1 0.17 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.8533 1)
Average genome size in population (length): 111.296
Average program size in population (points): 112.296
Average percent parens in population: 0.009
Minimum age in population: 210.9192970813582
Maximum age in population: 215.0186260147365
Average age in population: 213.2254971302597
Median age in population: 213.2716839192317
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.415
Error (vector) diversity:			 0.431
Behavioral diversity:				 0.431
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 429508935
--- Timings ---
Current time: 1529616006614 milliseconds
Total Time:         731.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.5 seconds, 29.9%
Fitness Testing:    415.4 seconds, 56.8%
Report:              97.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 39561.91
Test mean error for best: 19.78096
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 0.0 0 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 592.4036000000001
Mean: 11.848072
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2764.2832543
Median total errors in population: 666.8135500000001
Error averages by case: (95.28560409999888 10.19 93.76693510000015 3.517 113.47106150000002 3.832 90.30258939999945 8.611 108.45898509999992 4.201 113.76756460000026 4.561 133.63223769999843 12.163 117.44009850000018 3.722 97.9421637000002 2.968 107.68971580000263 11.354 101.16729669999891 10.358 114.79422199999983 4.41 100.38424219999982 4.036 92.14082639999968 9.544 108.32804790000021 4.519 112.04821129999992 3.786 93.7088107 5.118 116.12959900000006 3.647 91.28107600000037 9.885 94.04838599999994 3.095 105.47797370000008 3.842 92.27614249999866 7.787 114.9375437999999 4.408 100.04245269999987 3.685 108.00146789999985 4.521)
Error minima by case: (4.3853 2 0.0 0 0.0 0 0.0 0 1.4556 1 0.6052 1 0.1323 9 0.0 0 0.0 0 25.0265 8 15.5653 3 1.0 1 0.0 0 3.4529 1 7.5951 1 0.0 0 10.0 1 9.0 1 0.0 0 0.0 0 0.0 0 0.4773 1 0.0 0 0.0 0 0.327 1)
Average genome size in population (length): 110.628
Average program size in population (points): 111.628
Average percent parens in population: 0.009
Minimum age in population: 212.0030522648325
Maximum age in population: 216.559375619038
Average age in population: 214.5013241617946
Median age in population: 214.5614152126985
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.423
Error (vector) diversity:			 0.447
Behavioral diversity:				 0.447
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 432275035
--- Timings ---
Current time: 1529616011385 milliseconds
Total Time:         736.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.1 seconds, 29.9%
Fitness Testing:    418.0 seconds, 56.7%
Report:              98.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 39561.91
Test mean error for best: 19.78096
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 0.0 0 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 592.4036000000001
Mean: 11.848072
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2519.9640103000006
Median total errors in population: 666.0203
Error averages by case: (86.36173389999965 10.187 84.20805010000011 3.376 101.1092663 3.919 84.19208859999944 8.584 101.19030549999987 4.331 106.12565040000023 4.567 125.02102279999855 12.108 105.91538810000011 3.81 87.84000160000011 3.096 98.40523290000188 11.308 92.79864949999927 10.334 102.62920819999985 4.5 90.36026079999985 3.894 83.40011569999965 9.529 99.2873336000002 4.668 100.60212269999994 3.955 82.56904809999995 5.162 105.96165580000007 3.721 78.30007280000054 9.745 82.8334076 3.157 95.9498844 3.992 84.4105340999989 7.699 103.17272589999993 4.493 90.35315729999988 3.861 98.39309359999984 4.578)
Error minima by case: (0.6147 1 0.0 0 0.0 0 0.0 0 6.8498 1 0.6052 1 3.1323 1 0.0 0 0.0 0 1.0265 1 1.9857 1 0.0 0 0.0 0 0.4529 1 0.0 0 1.0 1 1.7971 1 3.0 1 0.0 0 0.0 0 0.0 0 0.3057 1 0.0 0 0.0 0 0.6857 1)
Average genome size in population (length): 110.357
Average program size in population (points): 111.357
Average percent parens in population: 0.009
Minimum age in population: 213.0030522648325
Maximum age in population: 217.7606515385398
Average age in population: 215.8154956619193
Median age in population: 215.8819053443851
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.432
Error (vector) diversity:			 0.452
Behavioral diversity:				 0.452
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 435034185
--- Timings ---
Current time: 1529616016093 milliseconds
Total Time:         741.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.6 seconds, 29.9%
Fitness Testing:    420.6 seconds, 56.7%
Report:              99.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 39561.91
Test mean error for best: 19.78096
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 0.0 0 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 592.4036000000001
Mean: 11.848072
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3000.8290631000004
Median total errors in population: 668.0203
Error averages by case: (107.41705439999879 10.204 104.66852680000014 3.551 121.95528260000002 4.161 99.40387259999946 8.589 116.3138490999999 4.397 120.76557670000022 4.69 143.76359109999856 12.108 126.70576860000018 4.057 108.18428760000018 3.321 117.38736150000256 11.32 113.42654759999868 10.369 123.45444099999985 4.717 110.50798869999979 4.017 104.17768449999967 9.606 118.81214140000026 4.857 121.31585339999992 4.179 97.40104590000007 5.186 125.75960690000007 3.97 97.22550680000043 9.711 103.43085229999994 3.406 115.81770809999999 4.196 98.40574639999882 7.552 124.09532539999987 4.712 110.74463769999983 4.078 118.04380599999983 4.691)
Error minima by case: (0.6147 2 0.0 0 1.0 1 0.0 0 6.0109 1 0.6052 1 19.4012 8 1.0 1 0.0 0 4.9735 8 6.0143 3 1.0 1 0.0 0 0.4529 1 0.6496 1 0.0 0 7.0 1 7.0 1 0.0 0 0.0 0 0.0 0 0.0594 1 1.0 1 0.0 0 1.6857 1)
Average genome size in population (length): 110.377
Average program size in population (points): 111.377
Average percent parens in population: 0.009
Minimum age in population: 214.9656702865989
Maximum age in population: 219.0599314092791
Average age in population: 217.1837175315868
Median age in population: 217.2182279651313
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.44
Error (vector) diversity:			 0.462
Behavioral diversity:				 0.463
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 437793810
--- Timings ---
Current time: 1529616020810 milliseconds
Total Time:         746.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.0 seconds, 29.9%
Fitness Testing:    423.3 seconds, 56.7%
Report:              99.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 39561.91
Test mean error for best: 19.78096
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 56.0303159228 
Correct output: 81.5444045338  | Program output: 59.5444045338 
Correct output: 107.605181994  | Program output: 84.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 12.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 30.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_frominteger integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 0.0 0 38.0 2 8.0 2 22.0 2 23.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 13.0 2 28.0 2 7.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 592.4036000000001
Mean: 11.848072
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2976.410848500001
Median total errors in population: 668.0203
Error averages by case: (107.22592909999895 10.181 101.58932510000012 3.555 120.60361040000008 3.996 101.10226449999946 8.446 116.5365682999999 4.28 120.88553330000015 4.587 145.62475369999856 12.129 124.97020080000019 3.867 105.45110070000015 3.092 118.69301470000246 11.318 113.11835199999905 10.331 122.05821139999985 4.579 108.66744379999989 4.115 103.85331049999967 9.664 119.56172700000016 4.587 119.40675639999992 3.983 98.42979279999997 5.206 123.61777730000006 3.84 94.91672640000046 9.675 101.02811439999994 3.28 113.1303652 3.996 98.69476829999876 7.677 122.45821799999989 4.577 107.85915529999986 3.871 117.62382909999985 4.472)
Error minima by case: (0.6147 2 0.0 0 1.0 1 0.0303 1 3.9966 1 0.3948 2 11.1323 8 1.0 1 0.0 0 0.9735 9 5.2275 2 2.0 1 0.0 0 0.4529 1 7.0 1 1.0 1 0.9611 1 10.0 1 0.3523 1 0.0 0 0.0 0 0.3151 1 1.0 1 0.0 0 0.5811 1)
Average genome size in population (length): 109.169
Average program size in population (points): 110.169
Average percent parens in population: 0.009
Minimum age in population: 216.1280094655174
Maximum age in population: 220.5432977004994
Average age in population: 218.4880902084628
Median age in population: 218.5337925503427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.413
Error (vector) diversity:			 0.438
Behavioral diversity:				 0.438
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 440523110
--- Timings ---
Current time: 1529616025180 milliseconds
Total Time:         750.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.2 seconds, 29.9%
Fitness Testing:    425.9 seconds, 56.7%
Report:             100.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 39064.67140000001
Test mean error for best: 19.53234
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -56.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -91.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 2.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 591.4036000000001
Mean: 11.828072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2533.4170934
Median total errors in population: 736.57695
Error averages by case: (89.92013419999986 10.197 85.26639330000012 3.758 102.52789400000006 3.999 80.32333559999961 7.92 97.97576049999992 4.263 103.96342530000024 4.653 126.53243619999868 12.121 107.74749260000021 3.915 90.1078212000001 3.193 99.40262140000172 11.343 95.21109999999955 10.361 104.33652309999982 4.579 92.66449949999996 4.186 86.39995879999964 9.486 101.39660650000017 4.696 102.4426746999999 4.024 77.41102149999985 5.288 107.43999330000008 3.848 76.8739988000004 9.025 84.44642559999993 3.265 98.24905500000001 4.085 75.94923699999899 7.905 104.93946999999984 4.6 92.76818729999985 3.94 99.77702799999989 4.694)
Error minima by case: (2.4078 1 0.0 0 1.0 1 0.0 0 0.4556 1 0.3948 1 2.1323 2 1.0 1 0.0 0 12.9735 2 14.0241 2 0.0 0 0.0 0 0.4529 1 1.0 1 0.0 0 0.2029 1 4.0 1 0.0 0 0.0 0 0.0 0 0.0594 1 1.0 1 0.0 0 0.2141 1)
Average genome size in population (length): 107.824
Average program size in population (points): 108.824
Average percent parens in population: 0.009
Minimum age in population: 217.2373123956644
Maximum age in population: 221.7654998896283
Average age in population: 219.8137575967964
Median age in population: 219.8646352821689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.486
Error (vector) diversity:			 0.503
Behavioral diversity:				 0.504
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 443218760
--- Timings ---
Current time: 1529616029893 milliseconds
Total Time:         755.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.6 seconds, 29.9%
Fitness Testing:    428.5 seconds, 56.7%
Report:             101.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 38898.6819
Test mean error for best: 19.44934
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 57.0303159228 
Correct output: 81.5444045338  | Program output: 60.5444045338 
Correct output: 107.605181994  | Program output: 85.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 13.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 31.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 0.0 0 38.0 2 9.0 2 21.0 2 22.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 12.0 2 28.0 2 8.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 591.4036000000001
Mean: 11.828072
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2735.079881000001
Median total errors in population: 710.4036
Error averages by case: (100.82866079999962 10.216 91.6312209000001 3.678 109.1856622 4.042 92.31558899999956 7.81 110.46398999999991 4.418 117.47030740000025 4.698 135.06454599999867 12.112 113.59406840000021 3.972 95.41630400000011 3.203 108.08200650000174 11.326 106.09970539999944 10.378 110.83956689999978 4.622 98.35499599999999 4.127 97.25746099999967 9.426 104.75328020000019 4.762 108.35029139999992 4.061 86.33125949999987 5.389 112.9315072000001 3.854 88.45760570000037 8.726 90.73126329999995 3.317 104.55976419999996 4.114 88.17780619999887 7.691 111.17592639999982 4.62 98.15370689999982 4.003 105.56438549999984 4.724)
Error minima by case: (0.9652 9 0.0 0 0.0 0 0.0 0 0.5444 1 0.6052 1 2.1323 2 0.0 0 0.0 0 4.9735 2 10.3614 9 0.0 0 0.0 0 0.4529 1 4.0 1 0.0 0 3.6555 1 7.0 1 0.3375 1 0.0 0 0.0 0 2.0 1 0.0 0 0.0 0 0.535 1)
Average genome size in population (length): 107.146
Average program size in population (points): 108.146
Average percent parens in population: 0.009
Minimum age in population: 218.754251558828
Maximum age in population: 222.9363249674448
Average age in population: 221.0709019865022
Median age in population: 221.1176716593709
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.476
Error (vector) diversity:			 0.492
Behavioral diversity:				 0.493
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 445897585
--- Timings ---
Current time: 1529616034531 milliseconds
Total Time:         760.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.0 seconds, 29.9%
Fitness Testing:    431.1 seconds, 56.7%
Report:             101.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 39302.735400000005
Test mean error for best: 19.65137
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 57.0303159228 
Correct output: 81.5444045338  | Program output: 60.5444045338 
Correct output: 107.605181994  | Program output: 85.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 13.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 31.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth integer_swap float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 9.0 2 21.0 2 22.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 12.0 2 28.0 2 8.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 591.4036000000001
Mean: 11.828072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2983.9582815000003
Median total errors in population: 761.4310999999999
Error averages by case: (105.81574979999903 10.225 101.09718580000013 3.96 120.7997379 4.156 101.9642476999996 7.345 118.89006809999988 4.54 123.89278660000029 4.83 142.50690309999842 12.136 125.3060591000002 4.076 107.03789120000022 3.32 115.9133042000023 11.334 111.36440799999902 10.38 122.40235889999981 4.767 108.05973349999975 4.374 102.41220369999967 9.569 118.14240140000018 4.817 119.99406079999993 4.184 99.37375060000012 5.488 124.25554450000014 3.973 95.75661660000036 8.266 102.07675429999996 3.427 115.22027889999998 4.227 101.3721015999988 7.821 123.09316989999985 4.766 109.50316839999985 4.101 116.91079689999982 4.715)
Error minima by case: (0.6147 1 0.0 0 1.0 1 0.0 0 0.5444 1 0.6052 1 3.7389 2 1.0 1 0.0 0 2.9735 2 4.9715 2 0.0 0 0.0 0 1.4529 1 5.0 1 0.0 0 5.7971 1 8.0 1 0.0 0 0.0 0 0.0 0 0.4291 1 1.0 1 0.0 0 6.5322 1)
Average genome size in population (length): 106.511
Average program size in population (points): 107.511
Average percent parens in population: 0.009
Minimum age in population: 219.9189773364233
Maximum age in population: 224.4372920279569
Average age in population: 222.3204001845012
Median age in population: 222.3694366670093
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.493
Error (vector) diversity:			 0.519
Behavioral diversity:				 0.519
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 448560410
--- Timings ---
Current time: 1529616039322 milliseconds
Total Time:         764.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.5 seconds, 29.9%
Fitness Testing:    433.8 seconds, 56.7%
Report:             102.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 39064.67140000001
Test mean error for best: 19.53234
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -56.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -91.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 2.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 591.4036000000001
Mean: 11.828072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2697.095511300001
Median total errors in population: 697.4755
Error averages by case: (97.58916049999932 10.219 92.26564440000016 3.85 108.55566540000002 4.052 88.41429839999972 6.075 105.28597409999989 4.308 112.34922520000023 4.713 135.66745639999857 12.168 112.85802130000026 3.963 93.40422230000013 3.141 108.32500950000201 11.379 103.33968469999932 10.39 110.1162525999998 4.672 99.65124719999984 4.207 94.18407259999964 9.489 107.42389870000008 4.662 107.44856539999991 4.091 87.91359579999994 5.209 112.19751460000008 3.84 83.63469240000026 6.703 89.02732679999994 3.255 102.12750769999994 4.09 87.30890019999882 7.599 111.0673782999998 4.675 96.12546229999982 3.967 105.5277344999999 4.57)
Error minima by case: (2.4086 8 0.0 0 1.0 1 0.0303 1 0.5444 1 0.6052 1 8.1323 8 1.0 1 0.0 0 0.0265 9 4.0143 9 0.0 0 0.0 0 0.4529 1 6.0 1 0.0 0 1.7971 1 7.2221 1 0.0 0 0.0 0 0.0 0 0.4773 1 1.0 1 0.0 0 0.3143 1)
Average genome size in population (length): 106.002
Average program size in population (points): 107.002
Average percent parens in population: 0.009
Minimum age in population: 221.0445603975756
Maximum age in population: 225.6881986515942
Average age in population: 223.5947533260139
Median age in population: 223.6601643200363
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.484
Error (vector) diversity:			 0.515
Behavioral diversity:				 0.515
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 451210510
--- Timings ---
Current time: 1529616043918 milliseconds
Total Time:         769.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.0 seconds, 29.9%
Fitness Testing:    436.3 seconds, 56.7%
Report:             103.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 38559.92720000001
Test mean error for best: 19.27996
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2552.6083256
Median total errors in population: 762.8420000000001
Error averages by case: (87.60234779999999 10.217 87.2954639000001 4.076 103.38648380000008 4.119 84.75259739999981 5.524 101.03114459999988 4.224 106.74198480000015 4.722 124.7041672999987 12.148 108.8444053000002 3.978 89.91872500000005 3.189 97.95579340000128 11.361 93.57990809999994 10.391 105.08167679999987 4.698 95.7155271 4.356 84.48329649999968 9.389 100.85106360000003 4.81 102.6105357999999 4.139 80.36843379999982 5.331 107.24714560000001 3.837 79.25258170000025 6.173 84.36210799999994 3.272 98.06446489999999 4.077 84.847532699999 7.864 105.91926219999989 4.679 92.53141029999983 3.944 100.17926519999988 4.763)
Error minima by case: (2.3853 1 0.0 0 0.0 0 0.0 0 8.4585 1 1.6052 2 0.2157 1 0.0 0 0.0 0 7.9735 2 14.0143 2 1.0 1 0.0 0 0.4529 1 3.4843 1 0.013 1 6.0 1 8.7779 1 0.0 0 0.0 0 1.0 1 0.1782 1 0.0 0 0.0 0 0.3143 1)
Average genome size in population (length): 105.601
Average program size in population (points): 106.601
Average percent parens in population: 0.009
Minimum age in population: 222.1625930346686
Maximum age in population: 226.7907053298279
Average age in population: 224.809752766203
Median age in population: 224.8791721665586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.515
Error (vector) diversity:			 0.564
Behavioral diversity:				 0.565
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 453850610
--- Timings ---
Current time: 1529616048527 milliseconds
Total Time:         774.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.4 seconds, 29.9%
Fitness Testing:    438.9 seconds, 56.7%
Report:             103.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 39064.67140000001
Test mean error for best: 19.53234
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -56.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -91.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tagged_995})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tagged_995)
Errors: [8.3853 10 2.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 591.4036000000001
Mean: 11.828072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2365.5571345000008
Median total errors in population: 761.4310999999999
Error averages by case: (80.4485078999998 10.207 80.94703710000017 4.264 95.49203320000007 4.106 75.29740519999982 4.978 92.99167879999989 4.091 98.13371650000022 4.684 117.67304109999868 12.11 101.2987919000002 3.982 83.37743060000012 3.271 90.73777040000162 11.342 85.76344109999957 10.354 97.34864319999986 4.693 90.57910269999982 4.495 76.86295779999966 9.354 92.63414180000015 4.719 95.95723849999989 4.151 74.79299479999986 5.096 99.57536340000006 3.869 72.71453130000022 5.599 76.90048319999988 3.323 92.019378 4.136 74.06927669999902 7.685 98.12255519999991 4.661 86.10277859999985 4.054 91.81183549999986 4.681)
Error minima by case: (0.6147 8 0.0 0 0.0 0 0.0 0 13.0 1 1.6052 1 0.5251 8 0.0 0 0.0 0 0.0265 9 8.9857 3 0.0 0 0.0 0 0.5471 1 2.0 1 1.0 1 2.7971 1 5.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.2268 1)
Average genome size in population (length): 106.103
Average program size in population (points): 107.103
Average percent parens in population: 0.009
Minimum age in population: 223.440300336935
Maximum age in population: 228.4210538775601
Average age in population: 226.1804003397793
Median age in population: 226.2459542789429
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.504
Error (vector) diversity:			 0.554
Behavioral diversity:				 0.554
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 456503185
--- Timings ---
Current time: 1529616053067 milliseconds
Total Time:         778.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.8 seconds, 29.9%
Fitness Testing:    441.4 seconds, 56.7%
Report:             104.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 39302.735400000005
Test mean error for best: 19.65137
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 57.0303159228 
Correct output: 81.5444045338  | Program output: 60.5444045338 
Correct output: 107.605181994  | Program output: 85.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 13.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 31.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth integer_swap float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 9.0 2 21.0 2 22.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 12.0 2 28.0 2 8.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 591.4036000000001
Mean: 11.828072
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2702.1378768999994
Median total errors in population: 760.4310999999999
Error averages by case: (95.26301639999919 10.248 94.45200790000014 4.283 109.50697799999998 4.212 88.37423289999987 5.055 103.91838919999991 4.298 108.67198870000027 4.743 132.22399229999877 12.176 114.8978696000002 4.13 96.36328790000019 3.359 105.50606310000204 11.409 100.40053759999921 10.424 111.34068169999978 4.832 101.5707005999998 4.41 91.45354229999965 9.287 108.42851290000014 4.867 109.3602474999999 4.249 85.00755399999993 5.194 114.05568010000006 3.997 83.08683400000022 5.652 91.00163149999992 3.417 105.17404959999999 4.215 87.61193709999893 7.916 112.20825949999983 4.824 99.18952889999983 4.117 107.0303535999999 4.726)
Error minima by case: (0.3604 2 0.0 0 0.3802 1 0.0 0 13.0 1 0.3948 2 28.1323 9 1.0 1 0.0 0 0.0265 8 5.5894 8 1.0 1 0.0 0 0.4529 1 7.0 1 0.0981 1 2.7971 1 10.0 1 0.0 0 0.0 0 0.0 0 0.5227 1 1.0 1 0.0 0 0.2694 1)
Average genome size in population (length): 106.209
Average program size in population (points): 107.209
Average percent parens in population: 0.009
Minimum age in population: 225.3458263111957
Maximum age in population: 229.4592711641037
Average age in population: 227.4746239677542
Median age in population: 227.4971177717319
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.499
Error (vector) diversity:			 0.562
Behavioral diversity:				 0.563
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 459158410
--- Timings ---
Current time: 1529616057592 milliseconds
Total Time:         783.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.2 seconds, 29.9%
Fitness Testing:    444.0 seconds, 56.7%
Report:             104.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 39064.67140000001
Test mean error for best: 19.53234
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -56.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -91.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 2.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 1.0 1 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 591.4036000000001
Mean: 11.828072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2728.081541799999
Median total errors in population: 761.4310999999999
Error averages by case: (96.27543949999912 10.252 93.16991120000013 4.492 110.50315210000007 4.375 89.31632169999986 4.771 105.73620339999988 4.126 112.1515961000003 4.818 132.32561819999867 12.196 116.2349016000003 4.225 97.66575000000022 3.535 105.58202210000228 11.429 101.29306489999911 10.424 112.44472649999976 4.985 101.67299479999988 4.52 92.50729129999968 9.258 106.12740360000012 4.835 110.74011129999987 4.396 86.16724229999983 5.216 114.33372070000004 4.184 84.09636800000024 5.429 91.66033989999987 3.605 106.38208110000001 4.422 92.72106419999874 7.965 113.49999779999979 4.97 100.49702449999975 4.293 107.49719499999988 4.759)
Error minima by case: (0.6147 2 0.0 0 0.0 0 0.0 0 0.5444 1 1.6052 2 39.1323 9 0.0 0 0.0 0 11.0265 9 2.0143 3 1.0 1 0.0 0 0.5471 1 10.0 1 0.0 0 1.509 1 13.0 1 0.0 0 0.0 0 0.0 0 0.8741 1 0.0 0 0.0 0 1.2694 1)
Average genome size in population (length): 106.473
Average program size in population (points): 107.473
Average percent parens in population: 0.009
Minimum age in population: 226.3458263111957
Maximum age in population: 231.0530371979994
Average age in population: 228.8772202650047
Median age in population: 228.8788705804501
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 91
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.481
Error (vector) diversity:			 0.537
Behavioral diversity:				 0.538
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 461820235
--- Timings ---
Current time: 1529616062585 milliseconds
Total Time:         787.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.6 seconds, 29.9%
Fitness Testing:    446.8 seconds, 56.7%
Report:             105.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 38652.29160000001
Test mean error for best: 19.32615
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (in1 integer_mod integer_dup_times float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2378.308695699998
Median total errors in population: 760.9014
Error averages by case: (86.89820919999988 10.231 78.87551380000014 4.312 93.84912250000005 3.976 81.61183909999984 4.678 96.10612639999987 3.953 100.59519340000028 4.694 119.14332709999864 12.102 99.3012986000002 3.898 83.6218303000001 3.276 91.45216310000157 11.354 91.18803439999954 10.344 95.38919529999986 4.582 86.92690270000004 4.257 82.82277259999967 9.178 94.04234580000009 4.902 94.22450409999993 4.068 70.26149309999974 5.27 100.40150910000006 3.883 71.5162918000002 5.506 76.92907159999993 3.342 92.15408110000001 4.144 72.19034939999894 8.186 96.32241519999987 4.593 85.9498739999998 4.041 92.8782319999999 4.887)
Error minima by case: (4.3853 2 0.0 0 0.0 0 0.0 0 0.5444 1 1.6052 1 1.1323 8 0.0 0 0.0 0 19.6837 8 8.9493 3 0.0 0 0.0 0 0.4529 1 6.0 1 0.0 0 4.0998 1 2.7779 1 0.9508 1 0.0 0 0.0 0 0.0594 1 0.0 0 0.0 0 3.1341 1)
Average genome size in population (length): 106.847
Average program size in population (points): 107.847
Average percent parens in population: 0.009
Minimum age in population: 227.3458263111957
Maximum age in population: 232.3191187899969
Average age in population: 230.3066328612551
Median age in population: 230.3597057675872
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.512
Error (vector) diversity:			 0.57
Behavioral diversity:				 0.571
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 464491410
--- Timings ---
Current time: 1529616067127 milliseconds
Total Time:         792.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.0 seconds, 29.9%
Fitness Testing:    449.4 seconds, 56.7%
Report:             106.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 38803.78370000001
Test mean error for best: 19.40189
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2598.754221299999
Median total errors in population: 759.4173499999999
Error averages by case: (92.04904129999966 10.216 91.99824870000016 4.57 105.20065080000003 4.137 81.22862269999983 4.449 94.52120399999988 3.849 102.2715056000003 4.705 129.40834889999874 12.141 110.81892170000023 4.008 93.94341420000016 3.312 102.64565480000181 11.356 97.18802699999938 10.395 107.01217349999979 4.72 100.2038487999998 4.5 87.90411659999965 9.287 105.57451260000013 4.821 105.68098129999986 4.191 80.44054869999997 5.225 110.9151446000001 3.871 78.61782030000012 5.349 87.73215479999993 3.344 102.1887592 4.162 78.40548849999894 8.116 108.09380309999985 4.724 96.35938339999983 4.061 104.01984619999988 4.823)
Error minima by case: (0.6147 2 0.0 0 0.0 0 0.0 0 0.5444 1 0.6052 2 4.8677 8 0.0 0 0.0 0 13.9735 8 11.0143 9 1.0 1 0.0 0 0.4529 1 5.0 1 0.0 0 5.6424 1 3.0 1 0.0 0 0.0 0 0.0 0 0.0594 1 0.0 0 0.0 0 0.3143 1)
Average genome size in population (length): 106.809
Average program size in population (points): 107.809
Average percent parens in population: 0.009
Minimum age in population: 229.2651900747701
Maximum age in population: 233.6995416912752
Average age in population: 231.5687840085111
Median age in population: 231.5805754962786
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 91
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.512
Error (vector) diversity:			 0.576
Behavioral diversity:				 0.577
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 467161685
--- Timings ---
Current time: 1529616071744 milliseconds
Total Time:         797.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.4 seconds, 29.9%
Fitness Testing:    452.1 seconds, 56.7%
Report:             106.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 38652.29160000001
Test mean error for best: 19.32615
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (in1 integer_mod integer_dup_times float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2479.308843299999
Median total errors in population: 715.8394499999999
Error averages by case: (83.88853379999935 10.254 83.44212520000013 4.304 100.71298720000001 4.114 81.13724499999984 4.55 96.80853009999987 3.953 102.06643840000038 4.852 120.55427669999862 12.166 106.18211710000026 3.981 89.41098240000022 3.363 93.77043330000217 11.385 88.68638229999917 10.412 102.42967919999978 4.68 91.0638301999998 4.163 79.94411799999965 9.244 98.10786740000007 4.808 101.17098939999987 4.183 79.11082070000006 5.25 104.96169970000001 3.904 76.25576070000025 5.528 82.2843482999999 3.368 97.51508190000001 4.158 82.28818289999889 8.16 103.3754785999998 4.694 91.86542559999978 4.071 97.9735091999999 4.757)
Error minima by case: (1.9528 8 0.0 0 0.0 0 0.0303 1 16.0 1 2.6052 2 0.8677 10 0.0 0 0.0 0 11.9735 8 9.6762 9 1.0 1 0.0 0 0.12 1 9.0 1 1.0 1 1.2029 1 2.3309 1 0.0 0 0.0 0 1.0 1 0.6484 1 0.0 0 0.0 0 2.3494 1)
Average genome size in population (length): 106.495
Average program size in population (points): 107.495
Average percent parens in population: 0.009
Minimum age in population: 230.3739780709434
Maximum age in population: 235.0105557465346
Average age in population: 232.8241690805681
Median age in population: 232.8609733604451
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.486
Error (vector) diversity:			 0.546
Behavioral diversity:				 0.548
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 469824110
--- Timings ---
Current time: 1529616076645 milliseconds
Total Time:         801.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.8 seconds, 29.9%
Fitness Testing:    454.8 seconds, 56.7%
Report:             107.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 38614.129300000015
Test mean error for best: 19.30706
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 float_rot integer_shove in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2473.7039576999987
Median total errors in population: 717.3546
Error averages by case: (85.19820979999955 10.219 84.95578560000014 4.398 100.7355266000001 4.207 83.5584012999999 4.442 94.76232319999988 3.794 98.75871100000022 4.665 122.2777434999987 12.126 106.60553720000024 4.028 87.49438850000013 3.303 95.50952950000169 11.336 90.62910099999945 10.372 102.55818539999984 4.764 92.47636569999979 4.278 81.49149929999967 9.304 96.89271340000008 4.681 101.22729569999989 4.247 75.7777166999999 5.016 104.3734792 3.921 76.7266522000002 5.257 81.1580047999999 3.342 95.36202230000005 4.128 80.80481999999901 7.898 103.50545809999986 4.785 90.31273379999983 4.066 97.38375389999989 4.591)
Error minima by case: (0.3853 2 0.0 0 0.0 0 0.0303 1 15.0 1 2.6052 2 5.8677 2 0.0 0 0.0 0 8.9735 2 12.0143 9 1.0 1 0.0 0 0.2736 1 1.0764 1 0.0 0 6.0 1 3.9603 1 0.0 0 0.0 0 0.0 0 2.0088 1 0.0 0 0.0 0 0.2782 1)
Average genome size in population (length): 107.01
Average program size in population (points): 108.01
Average percent parens in population: 0.009
Minimum age in population: 231.3739780709434
Maximum age in population: 236.365335474348
Average age in population: 234.1157914942404
Median age in population: 234.1470100882169
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.47
Error (vector) diversity:			 0.529
Behavioral diversity:				 0.529
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 472499360
--- Timings ---
Current time: 1529616081152 milliseconds
Total Time:         806.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.1 seconds, 29.9%
Fitness Testing:    457.3 seconds, 56.7%
Report:             108.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 38803.78370000001
Test mean error for best: 19.40189
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2590.711609600001
Median total errors in population: 762.3717
Error averages by case: (93.89198749999908 10.235 88.00343160000017 4.326 104.53012110000003 4.071 88.02411519999987 4.527 100.89331159999982 3.929 104.61725430000028 4.755 126.94718479999855 12.149 110.09455260000026 3.968 92.7719913000002 3.26 99.73341530000228 11.391 97.90439299999902 10.395 106.30001849999975 4.668 95.4371081999998 4.084 90.80896739999967 9.228 102.68222010000014 4.756 105.22164429999987 4.135 77.90929069999991 5.349 109.57575900000008 3.851 80.45121820000024 5.559 86.86625729999989 3.277 100.93627560000002 4.1 78.80648329999892 7.947 108.17801929999975 4.675 95.43732519999978 3.979 101.37726419999987 4.698)
Error minima by case: (2.6052 1 0.0 0 0.0 0 0.0 0 9.4556 1 6.6052 2 11.1323 2 0.0 0 0.0 0 4.9735 2 8.0143 2 0.0 0 0.0 0 1.4529 1 10.0 1 0.0 1 3.0 1 13.0 1 0.0 0 0.0 0 0.0 0 0.1285 1 0.0 0 0.0 0 0.7732 1)
Average genome size in population (length): 106.798
Average program size in population (points): 107.798
Average percent parens in population: 0.009
Minimum age in population: 233.1903444969067
Maximum age in population: 237.565712112756
Average age in population: 235.4079682878049
Median age in population: 235.4343371654609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.517
Error (vector) diversity:			 0.573
Behavioral diversity:				 0.574
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 475169385
--- Timings ---
Current time: 1529616086326 milliseconds
Total Time:         811.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       242.5 seconds, 29.9%
Fitness Testing:    460.4 seconds, 56.7%
Report:             108.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 38652.29160000001
Test mean error for best: 19.32615
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (in1 integer_mod integer_dup_times float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2581.2141654999987
Median total errors in population: 707.3442
Error averages by case: (91.94428629999965 10.241 87.19049070000017 4.337 103.21532420000001 4.202 89.81062019999985 4.602 104.5174210999999 3.921 107.85175390000022 4.755 127.12450689999866 12.154 108.77311550000024 4.058 91.46100120000015 3.42 99.28838080000183 11.371 97.38422599999936 10.379 104.9332343999998 4.807 94.4737708999999 4.087 88.17976929999966 9.361 101.29255560000007 4.842 103.73019349999987 4.248 82.40034029999985 5.485 106.39812730000004 3.983 78.01308460000021 5.546 85.07217399999993 3.431 99.78823069999996 4.273 83.65996289999899 8.033 106.01406719999983 4.795 94.15162029999979 4.177 99.25190769999983 4.786)
Error minima by case: (6.3853 1 0.0 0 0.0 0 0.0 0 12.0 1 1.3948 1 55.0161 2 0.0 0 0.0 0 27.0265 2 18.0143 2 0.9177 1 0.0 0 0.5471 1 4.0 1 0.0 0 3.0 1 7.0 1 0.0 0 0.0 0 0.0 0 1.1782 1 0.0 0 0.0 0 0.2268 1)
Average genome size in population (length): 106.559
Average program size in population (points): 107.559
Average percent parens in population: 0.009
Minimum age in population: 234.4207186292761
Maximum age in population: 238.7485506112751
Average age in population: 236.6964492708512
Median age in population: 236.7636654421184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.485
Error (vector) diversity:			 0.548
Behavioral diversity:				 0.549
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 477833410
--- Timings ---
Current time: 1529616090919 milliseconds
Total Time:         816.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.8 seconds, 29.9%
Fitness Testing:    463.0 seconds, 56.7%
Report:             109.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 38652.29160000001
Test mean error for best: 19.32615
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (in1 integer_mod integer_dup_times float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2605.5623434999984
Median total errors in population: 714.32965
Error averages by case: (94.47203039999958 10.215 86.9442841000001 4.235 104.30626110000004 4.259 89.33479849999982 4.548 103.10004919999986 4.059 107.71202640000016 4.897 128.02326149999868 12.153 109.99216810000028 4.131 92.4270274000001 3.475 100.85960360000176 11.398 99.37995289999945 10.411 106.11972789999979 4.826 93.94882329999994 3.948 90.78339369999966 9.278 102.09407810000003 4.952 104.91420029999988 4.308 80.13964399999972 5.562 108.8296693 4.034 79.9694548000002 5.464 86.38002259999992 3.497 100.63231719999992 4.29 85.10506389999887 7.933 107.2870801999998 4.827 95.06371589999978 4.235 101.98968909999984 4.819)
Error minima by case: (5.3853 2 0.0 0 1.0 1 0.0 0 0.5444 1 0.3948 1 0.1323 8 1.0 1 0.0 0 1.9735 7 10.9857 2 1.0 1 0.0 0 1.5471 1 2.8557 1 0.0 0 4.0 1 11.1158 1 0.0 0 0.0 0 0.0 0 2.0594 1 1.0 1 0.0 0 1.3494 1)
Average genome size in population (length): 106.859
Average program size in population (points): 107.859
Average percent parens in population: 0.009
Minimum age in population: 236.1352933624606
Maximum age in population: 239.8793642985132
Average age in population: 238.0213946631994
Median age in population: 238.0494180813281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.482
Error (vector) diversity:			 0.534
Behavioral diversity:				 0.534
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 480505010
--- Timings ---
Current time: 1529616095538 milliseconds
Total Time:         821.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.2 seconds, 29.9%
Fitness Testing:    465.7 seconds, 56.7%
Report:             110.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 38803.78370000001
Test mean error for best: 19.40189
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2608.3690846999993
Median total errors in population: 709.35935
Error averages by case: (91.37053579999976 10.247 83.59151520000015 4.069 105.58125170000002 4.35 85.8093804999998 4.432 103.13483959999989 3.967 109.25453960000029 4.826 126.99495009999859 12.138 112.05889600000027 4.205 94.91696740000016 3.453 99.93199290000177 11.38 96.47396089999977 10.405 107.30935939999978 4.897 90.99408070000004 3.815 87.41635519999969 9.264 102.40184140000007 5.057 106.80937339999987 4.356 81.64465749999988 5.589 110.10004110000004 4.074 79.6736549000002 5.448 88.0584029999999 3.508 102.92561460000003 4.307 88.31984389999883 8.082 108.49852809999982 4.886 97.69413429999983 4.208 101.43036749999987 5.011)
Error minima by case: (0.6147 2 0.0 0 1.0 1 0.0 0 9.4556 1 3.6052 1 6.8677 8 1.0 1 0.0 0 0.9735 8 7.0143 8 2.0 1 0.0 0 0.4529 1 14.0 1 1.0 1 3.7971 1 17.0 1 0.0 0 0.0 0 0.0 0 0.0144 1 1.0 1 0.0 0 0.3143 1)
Average genome size in population (length): 106.412
Average program size in population (points): 107.412
Average percent parens in population: 0.009
Minimum age in population: 237.2355977377162
Maximum age in population: 241.4579818033208
Average age in population: 239.3063050987697
Median age in population: 239.3427624262234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.49
Error (vector) diversity:			 0.534
Behavioral diversity:				 0.534
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 483165485
--- Timings ---
Current time: 1529616100434 milliseconds
Total Time:         825.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       246.7 seconds, 29.9%
Fitness Testing:    468.3 seconds, 56.7%
Report:             110.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 38803.78370000001
Test mean error for best: 19.40189
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2470.193475399999
Median total errors in population: 704.4692
Error averages by case: (84.94119239999964 10.239 81.95735020000012 3.96 100.29992640000005 4.264 78.74625259999983 4.433 93.09345509999986 3.862 99.09257950000027 4.799 121.88333809999871 12.147 106.24061450000026 4.146 91.17931420000022 3.532 94.44480860000166 11.382 89.7464738999996 10.382 102.2655712999998 4.875 88.86877419999988 3.692 80.73944949999967 9.199 96.95538670000005 4.955 102.38794559999987 4.368 75.30807699999977 5.722 105.4020314 4.069 71.34588270000022 5.412 84.39768539999992 3.586 99.90155629999997 4.362 81.39814309999902 8.025 103.61417269999984 4.847 93.71741549999977 4.251 96.9090784999999 4.848)
Error minima by case: (1.6147 8 0.0 0 0.0 0 0.0 0 10.5444 1 1.6052 1 11.8677 9 0.0 0 0.0 0 6.0265 8 2.9857 9 1.0 1 0.0 0 1.4069 1 1.4049 1 0.0 0 3.2029 1 8.0 1 0.0 0 0.0 0 0.0 0 0.3445 1 0.0 0 0.0 0 0.3517 1)
Average genome size in population (length): 106.636
Average program size in population (points): 107.636
Average percent parens in population: 0.009
Minimum age in population: 238.3291658154558
Maximum age in population: 242.7155202158878
Average age in population: 240.546395802499
Median age in population: 240.5794528694597
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.494
Error (vector) diversity:			 0.539
Behavioral diversity:				 0.54
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 485831785
--- Timings ---
Current time: 1529616105006 milliseconds
Total Time:         830.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.1 seconds, 29.9%
Fitness Testing:    470.9 seconds, 56.7%
Report:             111.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 38803.78370000001
Test mean error for best: 19.40189
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2573.2092805999987
Median total errors in population: 727.3145
Error averages by case: (89.30270459999957 10.23 84.76415680000011 3.965 104.25759010000002 4.214 83.37916869999984 4.369 97.92983889999985 3.829 105.27826230000024 4.718 125.77383359999857 12.158 110.14421560000027 4.078 93.85101650000016 3.429 98.87622710000196 11.387 94.35714569999938 10.407 106.06985679999981 4.781 91.10583439999995 3.636 85.42590969999966 9.33 104.42995160000008 4.944 105.18737649999987 4.285 81.62410999999993 5.719 109.80147040000003 3.962 78.31456160000016 5.316 87.00847709999991 3.452 102.21166049999994 4.242 82.68032559999878 8.07 107.33992269999985 4.796 96.39885679999975 4.15 103.31580699999986 4.914)
Error minima by case: (2.6147 2 0.0 0 1.0 1 0.0 0 13.0 1 1.3948 2 2.1323 2 1.0 1 0.0 0 9.9735 2 9.0143 2 0.0 0 0.0 0 0.4529 1 0.9481 1 0.0 0 5.0 1 13.0 1 0.0 0 0.0 0 0.0 0 0.0552 1 1.0 1 0.0 0 0.6857 1)
Average genome size in population (length): 106.534
Average program size in population (points): 107.534
Average percent parens in population: 0.009
Minimum age in population: 239.6019174044792
Maximum age in population: 244.0044589240726
Average age in population: 241.8392343957499
Median age in population: 241.8943915104172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.518
Error (vector) diversity:			 0.552
Behavioral diversity:				 0.552
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 488495285
--- Timings ---
Current time: 1529616109735 milliseconds
Total Time:         835.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       249.5 seconds, 29.9%
Fitness Testing:    473.8 seconds, 56.7%
Report:             111.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 38803.78370000001
Test mean error for best: 19.40189
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_mod} {:instruction tag_float_1045})
Best program: (integer_div integer_yankdup float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_mod tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2518.350330299999
Median total errors in population: 698.5938
Error averages by case: (87.73304739999979 10.261 80.90617650000009 3.963 100.51790120000004 4.342 85.04473239999982 4.407 101.39205489999989 3.865 107.08160190000028 4.865 123.6138872999987 12.165 106.85934470000028 4.242 91.37452020000016 3.531 96.02606930000155 11.391 93.1141823999994 10.408 102.44854169999977 4.913 87.38018929999993 3.538 84.20759629999968 9.237 101.24118010000008 5.053 101.89441209999983 4.448 77.9578017999998 5.846 106.75050720000004 4.096 77.19566450000023 5.504 83.41078199999994 3.58 99.69665309999995 4.362 79.44337999999898 8.041 103.8983797999998 4.921 93.69171919999981 4.285 99.32300499999984 4.883)
Error minima by case: (4.7595 8 0.0 0 0.0 0 0.0 1 11.4556 1 2.6052 1 12.1323 9 0.0 0 0.0 0 1.9735 7 10.9857 8 0.0 0 0.0 0 0.4529 1 9.0 1 1.0 1 4.0 1 12.0 1 0.0 0 0.0 0 0.0 0 0.0515 1 0.0 0 0.0 0 0.4489 1)
Average genome size in population (length): 106.495
Average program size in population (points): 107.495
Average percent parens in population: 0.009
Minimum age in population: 240.6019174044792
Maximum age in population: 244.8544064466975
Average age in population: 243.0711438753396
Median age in population: 243.1182286442717
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.505
Error (vector) diversity:			 0.548
Behavioral diversity:				 0.549
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 491157785
--- Timings ---
Current time: 1529616114166 milliseconds
Total Time:         839.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       250.7 seconds, 29.9%
Fitness Testing:    476.4 seconds, 56.7%
Report:             112.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 46080.3255
Test mean error for best: 23.04016
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -100.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -149.511081127
Correct output: -137.6953004708 | Program output: -129.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -107.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -60.3354654099
Correct output: -111.2224067056 | Program output: -134.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -63.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -75.9975425787
Correct output: -132.3840059284 | Program output: -113.3840059284
Correct output: -21.0593840301 | Program output: -60.3354654099
Correct output: -85.8056758937 | Program output: -115.8056758937
Correct output: -149.9116694043 | Program output: -145.9116694043
Correct output: -50.3143322102 | Program output: -60.3354654099
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -14.335465409853427} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -14.335465409853427 8 float_dec float_dec float_dec float_dec float_dec float_dec float_min float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 30.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 30.0 1 8.0 2 29.0265 11 20.0143 10 31.0 3 0.0 0 8.7264 10 14.2596 10 23.0 2 11.0 2 36.0 2 9.0 2 6.0 2 19.0 2 39.2761 10 30.0 2 4.0 1 10.0211 10]
Total: 587.8416000000001
Mean: 11.756832
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2838.8649078999993
Median total errors in population: 702.3442
Error averages by case: (103.58966959999894 10.265 95.81024590000014 3.983 114.4621758 4.162 95.47359039999986 4.583 110.59476529999982 3.946 116.62837060000031 4.859 138.68951799999869 12.203 119.45967610000024 4.058 101.87850820000023 3.335 112.00749120000232 11.438 108.59839659999872 10.475 116.14788779999984 4.754 101.56997899999976 3.705 99.94387169999968 9.276 112.42249180000019 4.828 114.30097699999986 4.238 90.46458400000006 5.881 118.80370260000002 3.925 91.29393180000022 5.656 96.17115009999992 3.371 110.25010040000005 4.187 91.70281499999882 7.995 117.23121299999984 4.782 103.94531749999979 4.106 112.74647849999985 4.667)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0303 1 13.0 1 3.6052 2 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.5471 1 1.0 1 1.0 1 4.0 1 4.0 1 0.0 0 0.0 0 0.0 0 0.1054 1 0.0 0 0.0 0 0.327 1)
Average genome size in population (length): 106.43
Average program size in population (points): 107.43
Average percent parens in population: 0.009
Minimum age in population: 242.2448091305861
Maximum age in population: 246.1897881290877
Average age in population: 244.3494763327887
Median age in population: 244.3937192411549
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.501
Error (vector) diversity:			 0.544
Behavioral diversity:				 0.544
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 493818560
--- Timings ---
Current time: 1529616118840 milliseconds
Total Time:         844.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.0 seconds, 29.9%
Fitness Testing:    479.0 seconds, 56.7%
Report:             113.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 38652.29160000001
Test mean error for best: 19.32615
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (in1 integer_mod integer_dup_times float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2368.5480093
Median total errors in population: 634.0174
Error averages by case: (81.31969280000023 10.284 75.3943972000001 3.624 95.84739809999999 4.006 77.84228049999984 4.319 93.69798859999982 3.932 99.2849341000003 4.815 118.44068239999876 12.187 100.57319590000021 3.892 82.64763950000011 3.157 91.10558000000152 11.436 85.80236069999977 10.462 97.64705619999984 4.635 80.67175229999997 3.184 77.0277600999997 9.1 95.99946040000009 4.779 95.63534089999987 4.086 74.84291869999987 5.784 101.46169770000002 3.794 73.1258878000002 5.4 77.78823189999997 3.255 91.78092359999994 4.055 80.43888919999914 7.907 98.55282709999987 4.628 85.17896219999984 3.908 95.12715139999993 4.684)
Error minima by case: (1.6052 9 0.0 0 1.0 1 0.0 0 12.5939 1 3.6052 2 0.1323 8 1.0 1 0.0 0 18.0265 9 9.0143 8 0.0 0 0.0 0 0.5471 1 2.8304 1 1.0 1 3.7971 1 7.1344 1 0.0 0 0.0 0 1.0 1 0.0314 1 1.0 1 0.0 0 0.546 1)
Average genome size in population (length): 106.8
Average program size in population (points): 107.8
Average percent parens in population: 0.009
Minimum age in population: 243.2448091305861
Maximum age in population: 247.5410519518928
Average age in population: 245.7005434944964
Median age in population: 245.7297396510689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.491
Error (vector) diversity:			 0.524
Behavioral diversity:				 0.525
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 496488610
--- Timings ---
Current time: 1529616123589 milliseconds
Total Time:         849.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.6 seconds, 29.9%
Fitness Testing:    481.7 seconds, 56.7%
Report:             113.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 38652.29160000001
Test mean error for best: 19.32615
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -108.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -157.511081127
Correct output: -137.6953004708 | Program output: -137.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -115.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -49.5951028043
Correct output: -111.2224067056 | Program output: -142.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -71.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -83.9975425787
Correct output: -132.3840059284 | Program output: -121.3840059284
Correct output: -21.0593840301 | Program output: 0.0593840301  
Correct output: -85.8056758937 | Program output: -123.8056758937
Correct output: -149.9116694043 | Program output: -153.9116694043
Correct output: -50.3143322102 | Program output: -20.3143322102
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (in1 integer_mod integer_dup_times float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 8 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 38.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 38.0 2 0.0 0 29.0265 11 20.0143 10 39.0 3 0.0 0 8.7264 10 25.0 2 31.0 2 11.0 2 28.0 2 9.0 2 2.0 1 11.0 2 21.1188 3 38.0 3 4.0 2 30.0 1]
Total: 588.4036000000001
Mean: 11.768072
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2676.6013016999987
Median total errors in population: 707.3739
Error averages by case: (93.93217419999962 10.296 91.69576330000012 4.035 108.62979520000006 4.197 89.64828579999988 4.387 102.10151559999989 3.889 107.08175630000024 4.842 129.40133729999874 12.191 113.9922156000003 4.077 96.67695880000012 3.345 102.87698150000173 11.445 98.49577539999981 10.447 110.43913829999981 4.769 97.79357389999994 3.66 90.13221909999967 9.156 107.25958340000015 4.988 109.45645299999987 4.275 85.4314488999999 5.823 113.72849350000004 3.99 84.66276760000022 5.336 90.52276209999985 3.429 104.52384360000003 4.22 87.32666199999886 8.051 111.43984979999983 4.783 98.70402159999979 4.125 105.96592589999987 4.926)
Error minima by case: (1.3853 2 0.0 0 0.0 0 0.0 0 0.5444 1 0.6052 2 14.5763 2 0.0 0 0.0 0 0.9735 2 5.9145 2 0.0 0 0.0 0 0.7264 1 9.0 1 0.0 0 3.0 1 11.7779 1 0.0 0 0.0 0 0.0 0 1.1188 1 0.0 0 0.0 0 6.1013 1)
Average genome size in population (length): 106.978
Average program size in population (points): 107.978
Average percent parens in population: 0.009
Minimum age in population: 244.598064103355
Maximum age in population: 248.7810906424926
Average age in population: 247.0696507920759
Median age in population: 247.1247921320636
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.499
Error (vector) diversity:			 0.535
Behavioral diversity:				 0.535
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 499163160
--- Timings ---
Current time: 1529616128444 milliseconds
Total Time:         853.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       254.9 seconds, 29.9%
Fitness Testing:    484.5 seconds, 56.8%
Report:             114.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 45660.881199999945
Test mean error for best: 22.83044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -98.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -147.511081127
Correct output: -137.6953004708 | Program output: -127.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -105.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -57.7940976894
Correct output: -111.2224067056 | Program output: -132.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -61.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -73.9975425787
Correct output: -132.3840059284 | Program output: -111.3840059284
Correct output: -21.0593840301 | Program output: -57.7940976894
Correct output: -85.8056758937 | Program output: -113.8056758937
Correct output: -149.9116694043 | Program output: -143.9116694043
Correct output: -50.3143322102 | Program output: -57.7940976894
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -14.794097689444747} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -14.794097689444747 8 float_dec float_dec float_dec float_dec float_dec integer_dup float_min float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec integer_dup_times -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove)
Errors: [8.3853 10 1.0 1 28.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 28.0 2 10.0 1 29.0265 11 20.0143 10 29.0 3 0.0 0 8.7264 10 16.801 10 21.0 2 11.0 2 38.0 2 9.0 2 8.0 2 21.0 2 36.7347 12 28.0 3 6.0 1 7.4798 10]
Total: 588.3003
Mean: 11.766006
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2693.949585199999
Median total errors in population: 703.4036
Error averages by case: (96.91029089999917 10.263 88.24228610000013 4.019 108.17548830000007 4.463 88.09049519999982 4.486 103.12086209999984 3.997 111.26993750000032 4.935 132.55125439999853 12.171 115.0569909000003 4.253 99.24497860000024 3.665 105.22000640000228 11.414 101.90545809999935 10.441 109.02522109999974 4.979 94.81915879999985 3.656 93.33818989999966 9.144 108.07863240000012 5.113 110.33617989999983 4.497 82.71286029999976 5.783 113.42806290000001 4.249 81.89493620000023 5.559 90.36909779999989 3.724 106.79202020000011 4.507 85.00715399999879 7.966 111.26815219999979 4.99 101.94760039999973 4.397 107.48027059999983 4.993)
Error minima by case: (0.4086 2 0.0 0 1.0 1 0.0303 1 12.0 1 1.6052 2 1.8677 9 1.0 1 0.0 0 1.9735 8 10.9857 9 2.0 1 0.0 0 2.0 1 0.4049 1 3.0 1 3.0 1 14.0 1 0.0 0 0.0 0 0.0 0 0.1826 1 1.0 1 0.0 0 0.5811 1)
Average genome size in population (length): 106.799
Average program size in population (points): 107.799
Average percent parens in population: 0.009
Minimum age in population: 245.8582045172671
Maximum age in population: 250.2458330717125
Average age in population: 248.3903925219745
Median age in population: 248.4500885171179
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.501
Error (vector) diversity:			 0.537
Behavioral diversity:				 0.538
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 501833260
--- Timings ---
Current time: 1529616133052 milliseconds
Total Time:         858.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.2 seconds, 29.8%
Fitness Testing:    487.2 seconds, 56.7%
Report:             115.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 45660.881199999945
Test mean error for best: 22.83044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -98.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -147.511081127
Correct output: -137.6953004708 | Program output: -127.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -105.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -57.7940976894
Correct output: -111.2224067056 | Program output: -132.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -61.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -73.9975425787
Correct output: -132.3840059284 | Program output: -111.3840059284
Correct output: -21.0593840301 | Program output: -57.7940976894
Correct output: -85.8056758937 | Program output: -113.8056758937
Correct output: -149.9116694043 | Program output: -143.9116694043
Correct output: -50.3143322102 | Program output: -57.7940976894
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -14.794097689444747} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -14.794097689444747 8 float_dec float_dec float_dec float_dec float_dec integer_dup float_min float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec integer_dup_times -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove)
Errors: [8.3853 10 1.0 1 28.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 28.0 2 10.0 1 29.0265 11 20.0143 10 29.0 3 0.0 0 8.7264 10 16.801 10 21.0 2 11.0 2 38.0 2 9.0 2 8.0 2 21.0 2 36.7347 12 28.0 3 6.0 1 7.4798 10]
Total: 588.3003
Mean: 11.766006
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2674.068969599999
Median total errors in population: 745.2688
Error averages by case: (93.02511169999953 10.238 90.15506960000016 4.171 106.7023928 4.405 90.1947846999998 4.532 102.6471812999998 4.103 109.41331120000038 5.001 129.5681919999987 12.136 113.0615154000003 4.272 97.72729030000023 3.615 102.82787080000182 11.407 98.20962059999925 10.426 108.68465399999981 4.978 96.9427737999999 3.792 89.19747839999967 9.159 106.88028260000013 4.928 108.02688389999989 4.479 81.53633959999992 6.058 113.4477296 4.085 85.21872130000025 5.586 90.38807419999993 3.619 105.72538010000002 4.41 89.01559759999897 8.144 110.16097109999978 4.97 100.08645469999975 4.328 107.41328829999985 4.97)
Error minima by case: (1.3853 2 0.0 0 1.0 1 0.0 0 0.5444 1 2.6052 1 12.7198 7 1.0 1 0.0 0 0.0963 8 3.2032 4 0.0 0 0.0 0 0.1073 1 0.0 0 1.0 1 7.0 1 3.0 1 0.0 0 0.0 0 0.0 0 0.041 1 1.0 1 0.0 0 0.3527 1)
Average genome size in population (length): 106.454
Average program size in population (points): 107.454
Average percent parens in population: 0.009
Minimum age in population: 246.8582045172671
Maximum age in population: 251.7430597107298
Average age in population: 249.7063645449396
Median age in population: 249.7595035250118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.525
Error (vector) diversity:			 0.562
Behavioral diversity:				 0.562
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 504494660
--- Timings ---
Current time: 1529616137513 milliseconds
Total Time:         863.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.6 seconds, 29.8%
Fitness Testing:    489.8 seconds, 56.7%
Report:             115.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 45188.91509999994
Test mean error for best: 22.59446
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -93.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -142.511081127
Correct output: -137.6953004708 | Program output: -122.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -100.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -53.7940976894
Correct output: -111.2224067056 | Program output: -127.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -56.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -68.9975425787
Correct output: -132.3840059284 | Program output: -106.3840059284
Correct output: -21.0593840301 | Program output: -53.7940976894
Correct output: -85.8056758937 | Program output: -108.8056758937
Correct output: -149.9116694043 | Program output: -138.9116694043
Correct output: -50.3143322102 | Program output: -53.7940976894
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -14.794097689444747} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction integer_dup_items})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -14.794097689444747 8 float_dec float_dec float_dec float_dec float_dec float_dec float_min float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove integer_dup_items)
Errors: [8.3853 10 1.0 1 23.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 23.0 2 15.0 2 29.0265 11 20.0143 10 24.0 3 0.0 0 8.7264 10 20.801 10 16.0 2 11.0 2 43.0 2 9.0 2 13.0 2 26.0 2 32.7347 12 23.0 3 11.0 2 3.4798 10]
Total: 586.3003
Mean: 11.726006
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2714.5430497999982
Median total errors in population: 711.5165
Error averages by case: (97.89765369999911 10.299 88.70159260000013 3.794 108.57412610000003 4.295 93.09181439999985 4.651 107.83349409999985 4.109 112.94548490000027 5.011 131.6536906999986 12.197 113.90025340000032 4.171 98.23324950000023 3.594 104.5945129000021 11.479 101.46280599999923 10.507 110.39438019999982 4.875 94.00066589999987 3.437 93.13623579999971 8.978 107.8519901000001 5.063 109.22606589999987 4.405 87.77508320000001 5.974 115.14668570000002 4.132 85.36316220000027 5.598 91.94217939999987 3.614 107.31730020000003 4.396 89.46105069999888 8.073 111.43435739999981 4.862 100.40441769999974 4.265 105.38579709999986 5.036)
Error minima by case: (0.6147 3 0.0 0 0.0 0 0.0 0 14.0 1 0.6052 2 48.1323 1 0.0 0 0.0 0 20.0265 2 11.0143 7 0.0 0 0.0 0 0.5471 1 3.801 1 1.0 1 4.5123 1 8.7779 1 0.6477 1 0.0 0 0.0 0 0.5174 1 0.0 0 0.0 0 0.327 1)
Average genome size in population (length): 106.706
Average program size in population (points): 107.706
Average percent parens in population: 0.009
Minimum age in population: 248.2892184399705
Maximum age in population: 252.8431432180284
Average age in population: 251.0204703953516
Median age in population: 251.0800790230659
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.511
Error (vector) diversity:			 0.547
Behavioral diversity:				 0.548
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 507162510
--- Timings ---
Current time: 1529616142434 milliseconds
Total Time:         867.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       258.9 seconds, 29.8%
Fitness Testing:    492.7 seconds, 56.8%
Report:             116.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 45393.06279999995
Test mean error for best: 22.69653
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -96.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -145.511081127
Correct output: -137.6953004708 | Program output: -125.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -103.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -55.7940976894
Correct output: -111.2224067056 | Program output: -130.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -59.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -71.9975425787
Correct output: -132.3840059284 | Program output: -109.3840059284
Correct output: -21.0593840301 | Program output: -55.7940976894
Correct output: -85.8056758937 | Program output: -111.8056758937
Correct output: -149.9116694043 | Program output: -141.9116694043
Correct output: -50.3143322102 | Program output: -55.7940976894
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -14.794097689444747} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -14.794097689444747 8 float_dec float_dec float_dec float_dec float_dec integer_dup float_min float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec integer_dup_times float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 26.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 26.0 2 12.0 2 29.0265 11 20.0143 10 27.0 3 0.0 0 8.7264 10 18.801 10 19.0 2 11.0 2 40.0 1 9.0 2 10.0 1 23.0 2 34.7347 12 26.0 3 8.0 1 5.4798 10]
Total: 585.3003
Mean: 11.706006
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2625.8771053
Median total errors in population: 753.99315
Error averages by case: (91.04064819999931 10.295 88.11914860000016 4.213 105.60358899999997 4.403 86.25965259999981 4.478 100.98359659999983 3.995 106.58743220000036 4.898 127.23795719999853 12.195 111.73957480000037 4.284 96.96847640000026 3.64 100.24789280000206 11.447 96.02425689999906 10.466 107.03276299999973 4.993 95.34446089999975 3.867 86.93873669999965 9.281 103.53705720000005 5.244 106.68760899999988 4.472 82.01889349999988 5.812 111.63225920000006 4.123 80.38485080000028 5.596 90.1896138999999 3.668 104.7455768 4.416 86.94062299999896 8.362 108.3594694999997 4.993 99.20403739999976 4.317 103.33492909999988 5.256)
Error minima by case: (1.3853 8 0.0 0 0.5348 1 0.0 0 13.0 1 2.6052 2 8.1323 9 1.0 1 0.0 0 3.9735 8 1.9715 8 0.0 0 0.0 0 0.4529 1 3.6059 1 1.0 1 4.0 1 12.0 1 0.0 0 0.0 0 0.0 0 2.1351 1 1.0 1 0.0 0 0.4798 1)
Average genome size in population (length): 106.489
Average program size in population (points): 107.489
Average percent parens in population: 0.009
Minimum age in population: 250.2967652205159
Maximum age in population: 254.2344177663678
Average age in population: 252.3024590794278
Median age in population: 252.3200052369875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.524
Error (vector) diversity:			 0.561
Behavioral diversity:				 0.562
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 509824985
--- Timings ---
Current time: 1529616147002 milliseconds
Total Time:         872.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       260.3 seconds, 29.8%
Fitness Testing:    495.3 seconds, 56.8%
Report:             116.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 45393.06279999995
Test mean error for best: 22.69653
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -96.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -145.511081127
Correct output: -137.6953004708 | Program output: -125.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -103.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -55.7940976894
Correct output: -111.2224067056 | Program output: -130.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -59.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -71.9975425787
Correct output: -132.3840059284 | Program output: -109.3840059284
Correct output: -21.0593840301 | Program output: -55.7940976894
Correct output: -85.8056758937 | Program output: -111.8056758937
Correct output: -149.9116694043 | Program output: -141.9116694043
Correct output: -50.3143322102 | Program output: -55.7940976894
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -14.794097689444747} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -14.794097689444747 8 float_dec float_dec float_dec float_dec float_dec integer_dup float_min float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec integer_dup_times float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 26.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 26.0 2 12.0 2 29.0265 11 20.0143 10 27.0 3 0.0 0 8.7264 10 18.801 10 19.0 2 11.0 2 40.0 1 9.0 2 10.0 1 23.0 2 34.7347 12 26.0 3 8.0 1 5.4798 10]
Total: 585.3003
Mean: 11.706006
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2660.490330199999
Median total errors in population: 757.2155499999999
Error averages by case: (93.88340509999969 10.312 90.84473180000012 4.053 106.54859879999995 4.379 83.39903879999986 4.511 98.81504609999986 4.016 106.60811230000029 4.981 130.11471909999875 12.215 112.54504450000026 4.259 98.38209860000013 3.614 103.43233320000174 11.483 98.29474529999959 10.487 108.45884739999977 4.947 97.2209419999999 3.623 89.64128199999968 9.126 107.84060670000028 5.654 107.52789449999986 4.456 80.99816849999985 5.95 114.34714760000004 4.152 79.02445610000015 5.516 91.1499949999999 3.65 106.83513309999994 4.381 88.83803859999908 8.609 109.85834119999977 4.955 100.28046839999978 4.258 106.44113549999994 5.573)
Error minima by case: (2.3891 9 0.0 0 0.0 0 0.0 0 0.5444 1 4.6052 1 0.1323 9 0.0 0 0.0 0 16.0265 9 7.0143 3 0.0 0 0.0 0 2.5471 1 0.7626 1 0.0 0 6.0 1 14.0 1 0.0 0 0.0 0 0.0 0 0.0594 1 0.0 0 0.0 0 0.4092 1)
Average genome size in population (length): 106.366
Average program size in population (points): 107.366
Average percent parens in population: 0.009
Minimum age in population: 251.7896232128516
Maximum age in population: 255.8253411524539
Average age in population: 253.607649719386
Median age in population: 253.6311752108177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.539
Error (vector) diversity:			 0.581
Behavioral diversity:				 0.581
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 512484410
--- Timings ---
Current time: 1529616151480 milliseconds
Total Time:         877.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.6 seconds, 29.8%
Fitness Testing:    497.8 seconds, 56.8%
Report:             117.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 45143.15989999994
Test mean error for best: 22.57158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -91.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -140.511081127
Correct output: -137.6953004708 | Program output: -120.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -98.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -52.7940976894
Correct output: -111.2224067056 | Program output: -125.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -54.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -66.9975425787
Correct output: -132.3840059284 | Program output: -104.3840059284
Correct output: -21.0593840301 | Program output: -52.7940976894
Correct output: -85.8056758937 | Program output: -106.8056758937
Correct output: -149.9116694043 | Program output: -136.9116694043
Correct output: -50.3143322102 | Program output: -52.7940976894
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -14.794097689444747} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction integer_dup_items})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec integer_mod float_dec float_dec float_dec float_dec float_dec float_dec float_dec -14.794097689444747 8 float_dec float_dec float_dec float_dec float_dec float_dec float_min float_dec float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove integer_dup_items)
Errors: [8.3853 10 1.0 1 21.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 21.0 2 17.0 2 29.0265 11 20.0143 10 22.0 2 0.0 0 8.7264 10 21.801 10 14.0 2 11.0 2 45.0 2 9.0 2 15.0 2 28.0 2 31.7347 12 21.0 3 13.0 2 2.4798 10]
Total: 584.3003
Mean: 11.686006
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2943.600088799998
Median total errors in population: 757.4310999999999
Error averages by case: (102.80141619999911 10.257 102.29169710000014 4.411 118.08897470000007 4.416 100.10531119999982 4.617 111.53306489999987 3.943 116.77838440000029 4.955 140.0364573999985 12.144 123.66987660000034 4.331 110.07313060000025 3.745 113.5602504000022 11.378 108.35741709999924 10.399 119.90046789999973 4.993 109.3242539999998 4.103 99.36755499999965 9.368 115.5996692000004 5.929 119.00754499999985 4.554 95.66354980000004 5.656 126.3070457 4.128 93.58320000000023 5.515 103.68896609999986 3.761 118.82619770000004 4.465 99.01775919999899 8.932 120.95041199999976 4.983 111.91992789999973 4.282 111.91255869999993 5.97)
Error minima by case: (1.6001 8 0.0 0 0.0 0 0.0 0 15.0 1 1.3948 2 7.1323 9 0.0 0 0.0 0 11.905 9 8.5341 3 1.0 1 0.0 0 1.4529 1 1.3322 1 0.0 0 6.0 1 8.0 1 0.0 0 0.0 0 0.0 0 0.3516 1 0.0 0 0.0 0 0.2268 1)
Average genome size in population (length): 106.052
Average program size in population (points): 107.052
Average percent parens in population: 0.009
Minimum age in population: 252.7896232128516
Maximum age in population: 256.824040468251
Average age in population: 254.909404026822
Median age in population: 254.9637736056326
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.532
Error (vector) diversity:			 0.573
Behavioral diversity:				 0.574
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 515136310
--- Timings ---
Current time: 1529616156082 milliseconds
Total Time:         881.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.0 seconds, 29.8%
Fitness Testing:    500.5 seconds, 56.8%
Report:             117.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 45067.91509999994
Test mean error for best: 22.53396
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -92.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -141.511081127
Correct output: -137.6953004708 | Program output: -121.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -99.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -52.7940976894
Correct output: -111.2224067056 | Program output: -126.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -55.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -67.9975425787
Correct output: -132.3840059284 | Program output: -105.3840059284
Correct output: -21.0593840301 | Program output: -52.7940976894
Correct output: -85.8056758937 | Program output: -107.8056758937
Correct output: -149.9116694043 | Program output: -137.9116694043
Correct output: -50.3143322102 | Program output: -52.7940976894
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -14.794097689444747} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction integer_dup_items})
Best program: (integer_div integer_dup_items float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -14.794097689444747 8 float_dec float_dec float_dec float_dec float_dec float_dec float_min float_dec float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove integer_dup_items)
Errors: [8.3853 10 1.0 1 22.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 22.0 2 16.0 2 29.0265 11 20.0143 10 23.0 2 0.0 0 8.7264 10 21.801 10 15.0 2 11.0 2 44.0 2 9.0 2 14.0 2 27.0 2 31.7347 12 22.0 3 12.0 2 2.4798 10]
Total: 584.3003
Mean: 11.686006
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2792.2281678
Median total errors in population: 771.4993999999999
Error averages by case: (96.00632619999932 10.281 94.86729830000017 4.587 109.54050030000006 4.524 93.31162319999976 4.951 106.13475029999984 4.2 111.87564710000038 5.152 132.00396629999864 12.159 116.16227090000038 4.426 106.3096589000003 4.048 105.39470160000202 11.395 100.8126379999992 10.446 111.47987629999973 5.09 102.37804959999984 4.181 92.20480939999965 9.273 111.26890240000068 6.975 112.06147329999985 4.654 87.04747669999995 6.107 121.27855540000004 4.456 87.19303310000026 5.784 98.1386304999999 4.023 114.70376840000003 4.619 97.52064109999934 9.632 112.58986599999973 5.087 107.7936767999997 4.412 106.6790277 7.009)
Error minima by case: (0.6147 1 0.0 0 0.0 0 0.0501 1 0.5444 1 3.6052 2 3.0 1 0.0 0 0.0 0 3.0 1 1.9857 1 0.0 0 0.0 0 0.2059 1 2.4049 1 1.0 1 4.2029 1 10.0 1 0.0 0 0.0 0 0.0 0 1.1188 1 0.0 0 0.0 0 0.4798 1)
Average genome size in population (length): 105.714
Average program size in population (points): 106.714
Average percent parens in population: 0.009
Minimum age in population: 254.032259493971
Maximum age in population: 258.1517579546313
Average age in population: 256.2678313561759
Median age in population: 256.25388658336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.559
Error (vector) diversity:			 0.62
Behavioral diversity:				 0.621
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 517779485
--- Timings ---
Current time: 1529616160697 milliseconds
Total Time:         886.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.3 seconds, 29.8%
Fitness Testing:    503.2 seconds, 56.8%
Report:             118.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 44655.11290000001
Test mean error for best: 22.32756
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -99.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -148.511081127
Correct output: -137.6953004708 | Program output: -128.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -106.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -52.512590889 
Correct output: -111.2224067056 | Program output: -133.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -62.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -74.9975425787
Correct output: -132.3840059284 | Program output: -112.3840059284
Correct output: -21.0593840301 | Program output: -52.512590889 
Correct output: -85.8056758937 | Program output: -114.8056758937
Correct output: -149.9116694043 | Program output: -144.9116694043
Correct output: -50.3143322102 | Program output: -52.512590889 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -12.51259088899364} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction -17} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_812} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -12.51259088899364 8 float_dec float_dec float_dec float_dec float_dec integer_dup float_min float_dec float_dec float_dec float_inc float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec integer_dup_times -17 float_inc float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec tagged_812 integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove)
Errors: [8.3853 10 0.0 0 29.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 29.0 2 9.0 2 29.0265 11 20.0143 10 30.0 2 1.0 1 8.7264 10 22.0825 9 22.0 2 11.0 2 37.0 2 9.0 2 7.0 2 20.0 1 31.4532 10 29.0 3 5.0 1 2.1983 10]
Total: 579.0188
Mean: 11.580376
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2635.7686025999997
Median total errors in population: 763.3717
Error averages by case: (90.85214479999956 10.238 90.50963930000019 4.431 101.43941000000005 4.26 86.34962699999976 4.841 100.35931959999982 4.164 107.27737060000032 5.188 129.49250169999857 12.156 107.65827540000032 4.21 98.5701351000002 3.875 102.7111310000021 11.393 96.83175979999933 10.416 103.2094842999998 4.818 98.14327199999987 4.106 87.69756069999968 9.262 103.82815710000081 7.698 102.51409219999987 4.371 81.89915229999983 5.957 115.58712100000005 4.13 80.90256000000034 5.532 91.11977809999989 3.795 107.2185627 4.364 94.93603559999963 10.208 103.77524009999982 4.829 99.13236799999972 4.09 97.5129042000001 7.909)
Error minima by case: (0.4086 1 0.0 0 0.0 0 0.0303 1 0.5444 1 2.6052 1 0.8677 8 0.0 0 0.0 0 0.0265 8 8.9857 3 0.0 0 0.0 0 0.1037 1 1.801 1 1.0 1 2.0 1 10.0 1 0.0 0 0.0 0 1.0 1 0.2653 1 0.0 0 0.0 0 0.4798 1)
Average genome size in population (length): 104.948
Average program size in population (points): 105.948
Average percent parens in population: 0.009
Minimum age in population: 255.4581783501887
Maximum age in population: 259.7988636939986
Average age in population: 257.6237598779707
Median age in population: 257.6520278084962
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.578
Error (vector) diversity:			 0.653
Behavioral diversity:				 0.653
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 520403860
--- Timings ---
Current time: 1529616165141 milliseconds
Total Time:         890.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       265.7 seconds, 29.8%
Fitness Testing:    505.7 seconds, 56.8%
Report:             119.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 44655.11290000001
Test mean error for best: 22.32756
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -99.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -148.511081127
Correct output: -137.6953004708 | Program output: -128.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -106.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -52.512590889 
Correct output: -111.2224067056 | Program output: -133.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -62.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -74.9975425787
Correct output: -132.3840059284 | Program output: -112.3840059284
Correct output: -21.0593840301 | Program output: -52.512590889 
Correct output: -85.8056758937 | Program output: -114.8056758937
Correct output: -149.9116694043 | Program output: -144.9116694043
Correct output: -50.3143322102 | Program output: -52.512590889 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -12.51259088899364} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction -17} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_812} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -12.51259088899364 8 float_dec float_dec float_dec float_dec float_dec integer_dup float_min float_dec float_dec float_dec float_inc float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec integer_dup_times -17 float_inc float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec tagged_812 integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove)
Errors: [8.3853 10 0.0 0 29.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 29.0 2 9.0 2 29.0265 11 20.0143 10 30.0 2 1.0 1 8.7264 10 22.0825 9 22.0 2 11.0 2 37.0 2 9.0 2 7.0 2 20.0 1 31.4532 10 29.0 3 5.0 1 2.1983 10]
Total: 579.0188
Mean: 11.580376
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2430.275630700001
Median total errors in population: 764.9014
Error averages by case: (78.63060910000016 10.244 82.09766020000019 4.629 92.00176750000004 4.265 79.73339459999973 4.867 91.82714679999977 4.195 98.70972660000035 5.299 117.17476639999872 12.148 98.66598560000025 4.243 95.01019820000018 4.231 91.35664060000158 11.378 84.79705649999967 10.403 93.7120518999998 4.8 90.78510779999984 4.28 75.60847809999964 9.196 95.13237530000109 9.049 93.71595409999985 4.453 72.43746059999978 5.851 111.23564410000019 4.427 71.77300880000028 5.441 86.24486419999991 4.115 103.54434130000004 4.53 89.41353700000003 11.214 93.8577424999998 4.883 94.93280409999973 4.174 86.27430880000023 9.288)
Error minima by case: (0.847 7 0.0 0 0.0 0 0.0 0 0.5444 1 5.6052 2 7.1323 9 0.0 0 0.0 0 5.0265 9 3.9857 6 1.0 1 0.0 0 0.5471 1 0.801 1 0.0 0 0.7941 1 16.2059 1 0.0 0 0.0 0 0.7941 1 0.2653 1 0.0 0 0.0 0 0.4118 1)
Average genome size in population (length): 103.264
Average program size in population (points): 104.264
Average percent parens in population: 0.010
Minimum age in population: 256.4581783501887
Maximum age in population: 261.2109032910869
Average age in population: 259.0378492897614
Median age in population: 259.0416899825069
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.573
Error (vector) diversity:			 0.678
Behavioral diversity:				 0.678
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 522985910
--- Timings ---
Current time: 1529616169536 milliseconds
Total Time:         895.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       267.0 seconds, 29.8%
Fitness Testing:    508.2 seconds, 56.8%
Report:             119.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 44655.11290000001
Test mean error for best: 22.32756
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -99.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -148.511081127
Correct output: -137.6953004708 | Program output: -128.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -106.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -52.512590889 
Correct output: -111.2224067056 | Program output: -133.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -62.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -74.9975425787
Correct output: -132.3840059284 | Program output: -112.3840059284
Correct output: -21.0593840301 | Program output: -52.512590889 
Correct output: -85.8056758937 | Program output: -114.8056758937
Correct output: -149.9116694043 | Program output: -144.9116694043
Correct output: -50.3143322102 | Program output: -52.512590889 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -12.51259088899364} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction -17} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_812} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -12.51259088899364 8 float_dec float_dec float_dec float_dec float_dec integer_dup float_min float_dec float_dec float_dec float_inc float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec integer_dup_times -17 float_inc float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec tagged_812 integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove)
Errors: [8.3853 10 0.0 0 29.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 29.0 2 9.0 2 29.0265 11 20.0143 10 30.0 2 1.0 1 8.7264 10 22.0825 9 22.0 2 11.0 2 37.0 2 9.0 2 7.0 2 20.0 1 31.4532 10 29.0 3 5.0 1 2.1983 10]
Total: 579.0188
Mean: 11.580376
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2454.842752200003
Median total errors in population: 761.8278
Error averages by case: (86.2864231000002 10.262 84.62384730000018 4.678 89.31934200000009 4.174 83.50233679999977 4.833 92.53928829999982 4.262 99.20606130000023 5.434 122.23485239999867 12.106 95.46278710000023 4.131 94.15704200000017 4.136 94.0007384000012 11.362 91.62489929999998 10.37 90.92477059999987 4.608 93.69036419999992 4.406 82.40483419999971 9.186 94.69737920000085 9.972 90.36384949999987 4.347 71.3457834999998 5.64 108.99486230000012 4.375 75.99847340000022 5.319 85.5896867999999 3.999 102.78417340000006 4.275 93.91591310000028 11.593 90.74481149999983 4.786 93.34447409999977 3.96 84.70275840000026 10.169)
Error minima by case: (6.3853 1 0.0 0 1.0 1 0.296 1 0.4556 1 14.0 2 8.1323 2 1.0 1 0.0 0 19.9735 2 18.0143 1 0.0 0 0.0 0 1.5695 1 3.801 1 0.0 0 4.0 1 17.7779 1 0.0 0 0.0 0 6.0 1 0.7347 1 1.0 1 0.0 0 0.4118 1)
Average genome size in population (length): 101.513
Average program size in population (points): 102.513
Average percent parens in population: 0.010
Minimum age in population: 257.869650265847
Maximum age in population: 262.452361070246
Average age in population: 260.4248344661986
Median age in population: 260.4721544684736
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.556
Error (vector) diversity:			 0.687
Behavioral diversity:				 0.687
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 525524010
--- Timings ---
Current time: 1529616174062 milliseconds
Total Time:         899.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       268.3 seconds, 29.8%
Fitness Testing:    510.7 seconds, 56.8%
Report:             120.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 46493.08619999994
Test mean error for best: 23.24654
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -77.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -126.511081127
Correct output: -137.6953004708 | Program output: -106.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -84.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -52.7940976894
Correct output: -111.2224067056 | Program output: -111.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -52.7940976894
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -52.9975425787
Correct output: -132.3840059284 | Program output: -90.3840059284
Correct output: -21.0593840301 | Program output: -52.7940976894
Correct output: -85.8056758937 | Program output: -92.8056758937
Correct output: -149.9116694043 | Program output: -122.9116694043
Correct output: -50.3143322102 | Program output: -52.7940976894
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -14.794097689444747} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth integer_mult float_inc integer_mult float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -14.794097689444747 8 float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_min float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 7.0 1 10.0 1 20.0 1 21.0 3 57.1323 12 7.0 2 31.0 2 29.0265 11 20.0143 10 8.0 2 0.0 0 8.7264 10 21.801 10 0.0 0 11.0 2 46.9838 11 9.0 2 29.0 2 42.0 3 31.7347 12 7.0 2 27.0 2 2.4798 10]
Total: 578.2841
Mean: 11.565682
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2490.2262734000024
Median total errors in population: 760.3278
Error averages by case: (86.0322037 10.248 84.20635610000018 4.682 90.13768780000008 4.045 80.12246909999969 4.941 97.42767439999976 4.303 104.44716390000028 5.453 122.28336599999857 12.122 96.10388450000022 4.033 98.09125610000015 4.202 95.19235490000165 11.382 91.10080059999997 10.37 91.53975789999984 4.369 93.41705719999993 4.47 82.28855199999967 9.186 96.92192360000121 10.185 91.75044949999989 4.266 76.54726049999981 5.584 115.10789050000018 4.436 71.64486040000038 5.516 89.35684329999988 4.022 106.46582660000011 4.291 94.77510260000031 11.741 91.53099399999984 4.636 97.12728069999974 4.003 83.64825750000016 10.473)
Error minima by case: (1.4086 7 0.0 0 0.0 0 0.0 0 0.5444 1 2.6052 2 13.1323 8 0.0 0 0.0 0 14.9735 8 13.1723 2 0.0 0 0.0 0 2.111 1 1.3098 1 0.0 0 4.0 1 23.873 1 0.0 0 0.0 0 7.0 1 0.2508 1 0.0 0 0.0 0 0.1983 1)
Average genome size in population (length): 101.048
Average program size in population (points): 102.048
Average percent parens in population: 0.010
Minimum age in population: 259.6336290431562
Maximum age in population: 263.9231874935068
Average age in population: 261.8360141457264
Median age in population: 261.868116538395
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.542
Error (vector) diversity:			 0.688
Behavioral diversity:				 0.689
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 528050560
--- Timings ---
Current time: 1529616178730 milliseconds
Total Time:         904.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       269.7 seconds, 29.8%
Fitness Testing:    513.2 seconds, 56.8%
Report:             120.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 46326.291099999944
Test mean error for best: 23.16315
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -77.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -126.511081127
Correct output: -137.6953004708 | Program output: -106.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -84.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -51.7940976894
Correct output: -111.2224067056 | Program output: -111.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -51.7940976894
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -52.9975425787
Correct output: -132.3840059284 | Program output: -90.3840059284
Correct output: -21.0593840301 | Program output: -51.7940976894
Correct output: -85.8056758937 | Program output: -92.8056758937
Correct output: -149.9116694043 | Program output: -122.9116694043
Correct output: -50.3143322102 | Program output: -51.7940976894
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -14.794097689444747} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_759} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -17} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction tag_float_1045})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth integer_mult float_inc integer_mult float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -14.794097689444747 8 float_dec float_dec float_dec float_dec float_dec float_dec integer_inc float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_rot float_dec float_dec tagged_759 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_min float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec float_dec -17 float_dec float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove tag_float_1045)
Errors: [8.3853 10 1.0 1 7.0 1 10.0 1 20.0 1 21.0 3 57.1323 12 7.0 2 31.0 2 29.0265 11 20.0143 10 8.0 2 0.0 0 8.7264 10 22.801 10 0.0 0 11.0 2 47.9838 11 9.0 2 29.0 2 42.0 3 30.7347 11 7.0 2 27.0 2 1.4798 10]
Total: 577.2841
Mean: 11.545682
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2809.978585300001
Median total errors in population: 753.3277999999999
Error averages by case: (95.79053119999901 10.244 94.75793930000017 4.542 102.87429220000006 4.172 101.87266629999974 4.765 110.15890089999981 4.174 116.83154280000034 5.357 133.84233429999853 12.128 108.5367631000003 4.148 110.05738750000025 4.304 107.32605480000221 11.367 101.98095189999921 10.329 104.4029065999998 4.463 103.71998689999974 4.369 92.76134999999968 9.367 111.3678025000019 10.375 103.53780379999988 4.4 89.47367510000012 5.386 126.64643810000018 4.666 93.74739960000036 5.339 101.91923039999989 4.134 118.58642930000008 4.341 107.84847880000041 11.844 103.81812379999981 4.778 108.86206379999975 4.135 95.60653230000024 10.524)
Error minima by case: (2.3853 8 0.0 0 1.0 1 0.0 0 0.5444 1 12.2059 2 20.1323 3 1.0 1 1.0 1 7.9735 9 9.0143 2 0.0 0 0.0 0 1.5372 1 2.801 1 0.0 0 2.2059 1 24.0 1 0.0 0 0.0025 1 7.0 1 2.6339 8 1.0 1 0.0 0 0.1983 2)
Average genome size in population (length): 100.661
Average program size in population (points): 101.661
Average percent parens in population: 0.010
Minimum age in population: 261.1742411981337
Maximum age in population: 265.4198114216927
Average age in population: 263.2505581450292
Median age in population: 263.2519194538698
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.508
Error (vector) diversity:			 0.646
Behavioral diversity:				 0.647
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 530567385
--- Timings ---
Current time: 1529616183120 milliseconds
Total Time:         908.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       271.1 seconds, 29.8%
Fitness Testing:    515.6 seconds, 56.8%
Report:             121.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 44225.69380000002
Test mean error for best: 22.11285
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -99.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -148.511081127
Correct output: -137.6953004708 | Program output: -128.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -106.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -51.512590889 
Correct output: -111.2224067056 | Program output: -133.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -62.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -74.9975425787
Correct output: -132.3840059284 | Program output: -112.3840059284
Correct output: -21.0593840301 | Program output: -51.512590889 
Correct output: -85.8056758937 | Program output: -114.8056758937
Correct output: -149.9116694043 | Program output: -144.9116694043
Correct output: -50.3143322102 | Program output: -51.512590889 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -12.51259088899364} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction -17} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_812} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove})
Best program: (integer_dup float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -12.51259088899364 8 float_dec float_dec integer_dec float_dec float_dec integer_dup float_min float_dec float_dec float_dec float_inc float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec integer_dup_times -17 float_inc float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec tagged_812 integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove)
Errors: [8.3853 10 0.0 0 29.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 29.0 2 9.0 2 29.0265 11 20.0143 10 30.0 2 1.0 1 8.7264 10 23.0825 9 22.0 2 11.0 2 37.0 2 9.0 2 7.0 2 20.0 1 30.4532 9 29.0 3 5.0 1 1.1983 10]
Total: 577.0188
Mean: 11.540376
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2650.225719900003
Median total errors in population: 763.3693499999999
Error averages by case: (92.36855729999954 10.27 89.54672660000017 4.598 95.69193840000004 3.986 88.91260729999975 4.897 101.26401429999981 4.284 107.96637230000029 5.409 128.52197009999864 12.134 101.00349110000023 4.041 105.29603500000017 4.218 101.60661820000175 11.391 97.93465399999945 10.37 96.53974539999982 4.254 97.84153599999979 4.41 88.59699759999968 9.289 105.90719720000114 10.253 96.67869669999988 4.295 81.3637602 5.569 121.68449640000014 4.558 82.1762898000003 5.43 97.1604267999999 4.132 113.47601270000013 4.268 103.56447570000044 11.598 96.52649479999982 4.583 104.15034259999979 4.092 91.56426340000009 10.553)
Error minima by case: (2.6052 7 0.0 0 0.0 0 0.0 0 1.7941 1 0.7941 2 21.3163 8 0.0 0 0.0 0 2.0265 9 6.9857 2 1.0 1 0.0 0 6.7264 1 0.199 1 0.0 0 2.672 1 2.8103 1 0.0 0 0.0 0 3.4874 1 0.8086 8 0.0 0 0.0 0 0.1983 1)
Average genome size in population (length): 100.953
Average program size in population (points): 101.953
Average percent parens in population: 0.010
Minimum age in population: 262.3567490409824
Maximum age in population: 266.9654860306785
Average age in population: 264.6742971307895
Median age in population: 264.7273731696369
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.556
Error (vector) diversity:			 0.683
Behavioral diversity:				 0.684
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 533091685
--- Timings ---
Current time: 1529616187567 milliseconds
Total Time:         913.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       272.4 seconds, 29.8%
Fitness Testing:    518.2 seconds, 56.8%
Report:             122.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 44319.0075
Test mean error for best: 22.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -99.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -148.511081127
Correct output: -137.6953004708 | Program output: -128.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -106.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -50.512590889 
Correct output: -111.2224067056 | Program output: -133.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -62.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -74.9975425787
Correct output: -132.3840059284 | Program output: -112.3840059284
Correct output: -21.0593840301 | Program output: -50.512590889 
Correct output: -85.8056758937 | Program output: -114.8056758937
Correct output: -149.9116694043 | Program output: -144.9116694043
Correct output: -50.3143322102 | Program output: -50.512590889 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -12.51259088899364} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction -17} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_812} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -12.51259088899364 8 float_dec float_dec float_dec float_inc float_dec integer_dup float_min float_dec float_dec float_dec float_inc float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec integer_dup_times -17 float_inc float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec tagged_812 integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove)
Errors: [8.3853 10 0.0 0 29.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 29.0 2 9.0 2 29.0265 11 20.0143 10 30.0 2 1.0 1 8.7264 10 24.0825 9 22.0 2 11.0 2 37.0 2 9.0 2 7.0 2 20.0 1 29.4532 10 29.0 3 5.0 1 0.1983 9]
Total: 576.0188
Mean: 11.520376
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2832.7697727000004
Median total errors in population: 757.2437500000001
Error averages by case: (97.58889649999911 10.293 97.08970300000018 4.57 102.85342090000007 4.103 102.06899599999971 5.157 110.61654669999982 4.41 117.20827600000044 5.538 133.96434989999852 12.192 108.28617550000024 4.17 113.09979120000024 4.285 107.48492540000223 11.424 102.53749289999904 10.438 104.03654269999976 4.358 105.49954989999969 4.468 93.95676789999968 9.234 111.13685640000163 10.313 103.62414949999985 4.41 90.19730360000003 5.715 129.44911120000026 4.721 93.79189870000033 5.719 105.18550139999985 4.255 121.50354330000013 4.346 105.70866000000058 11.486 103.52708579999978 4.69 111.85763649999978 4.204 95.46259180000007 10.535)
Error minima by case: (2.6001 8 0.0 0 0.0 0 0.0 1 1.2059 1 2.2059 2 17.1323 9 0.0 0 0.0 0 3.0265 9 4.0143 2 0.0 0 0.0 0 4.7264 1 6.5904 1 0.0 0 4.0 1 3.7779 1 0.0 0 0.0 0 9.0 1 0.4532 3 0.0 0 0.0 0 0.1983 1)
Average genome size in population (length): 100.957
Average program size in population (points): 101.957
Average percent parens in population: 0.010
Minimum age in population: 263.3567490409824
Maximum age in population: 268.4896375765769
Average age in population: 266.0333974168339
Median age in population: 266.0502121878433
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.551
Error (vector) diversity:			 0.67
Behavioral diversity:				 0.671
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 535615860
--- Timings ---
Current time: 1529616192490 milliseconds
Total Time:         917.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       274.0 seconds, 29.9%
Fitness Testing:    520.7 seconds, 56.7%
Report:             122.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 44786.72780000002
Test mean error for best: 22.39336
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -96.4544341591
Correct output: 48.0303159228  | Program output: 59.0303159228 
Correct output: 81.5444045338  | Program output: 62.5444045338 
Correct output: 107.605181994  | Program output: 87.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -145.511081127
Correct output: -137.6953004708 | Program output: -125.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -103.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -53.3011493022
Correct output: -111.2224067056 | Program output: -130.2224067056
Correct output: 25.2029289086  | Program output: 15.2029289086 
Correct output: -99.7779180651 | Program output: -59.7779180651
Correct output: 23.3238574914  | Program output: 33.3238574914 
Correct output: -81.9975425787 | Program output: -71.9975425787
Correct output: -132.3840059284 | Program output: -109.3840059284
Correct output: -21.0593840301 | Program output: -53.3011493022
Correct output: -85.8056758937 | Program output: -111.8056758937
Correct output: -149.9116694043 | Program output: -141.9116694043
Correct output: -50.3143322102 | Program output: -53.3011493022
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction in1} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -13.301149302244779} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction -17} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_812} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove})
Best program: (integer_div float_mult float_yankdup float_swap in1 integer_dup_times float_inc integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -13.301149302244779 8 float_dec float_dec float_dec float_dec float_dec integer_dup float_min float_dec float_dec float_dec float_inc float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec integer_dup_times -17 float_inc float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec tagged_812 integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove)
Errors: [8.3853 10 1.0 1 26.0 2 11.0 2 19.0 2 20.0 2 57.1323 12 26.0 2 12.0 2 29.0265 11 20.0143 10 27.0 3 0.0 0 8.7264 10 21.294 10 19.0 2 10.0 1 40.0 1 10.0 1 10.0 1 23.0 2 32.2418 10 26.0 3 8.0 1 2.9868 7]
Total: 575.8074
Mean: 11.516148
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3013.4585631
Median total errors in population: 870.79465
Error averages by case: (105.1362731999991 10.335 104.6785438000002 5.14 110.3452689000001 4.515 102.2466118999997 5.193 117.0417470999998 4.664 124.47519420000042 5.78 140.58017709999862 12.181 117.93643810000037 4.512 121.84548580000039 4.711 114.02690930000216 11.476 109.24430519999912 10.49 111.90250729999977 4.762 115.58930169999967 5.077 100.5843720999997 9.024 118.47068260000154 10.177 113.27772729999982 4.876 96.63281780000007 5.882 136.1593198000001 5.004 93.96068150000025 5.84 111.60257339999984 4.638 128.89277410000028 4.712 111.27807040000064 11.425 111.84245509999974 5.067 121.48000069999964 4.586 103.65232470000008 10.509)
Error minima by case: (1.6147 1 0.0 0 0.0 0 0.0 0 8.2059 1 9.2059 2 47.1323 2 0.0 0 2.0 1 19.0265 2 10.0143 2 0.0 0 0.0 0 3.3018 1 6.801 1 0.0 0 0.7941 1 30.0 1 1.0 1 0.0 0 5.616 1 0.4532 8 0.0 0 0.0 0 0.1983 1)
Average genome size in population (length): 101.815
Average program size in population (points): 102.815
Average percent parens in population: 0.010
Minimum age in population: 264.7205936966223
Maximum age in population: 269.5648224457481
Average age in population: 267.3745773153059
Median age in population: 267.4040033874557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.598
Error (vector) diversity:			 0.694
Behavioral diversity:				 0.695
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 538161735
--- Timings ---
Current time: 1529616196993 milliseconds
Total Time:         922.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       275.3 seconds, 29.9%
Fitness Testing:    523.2 seconds, 56.7%
Report:             123.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 44077.954900000004
Test mean error for best: 22.03898
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -57.7779066602
Correct output: -70.4544341591 | Program output: -99.4544341591
Correct output: 48.0303159228  | Program output: 59.0303159228 
Correct output: 81.5444045338  | Program output: 62.5444045338 
Correct output: 107.605181994  | Program output: 87.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -148.511081127
Correct output: -137.6953004708 | Program output: -128.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -106.5652234606
Correct output: -92.2496022257 | Program output: -92.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -50.512590889 
Correct output: -111.2224067056 | Program output: -133.2224067056
Correct output: 25.2029289086  | Program output: 15.2029289086 
Correct output: -99.7779180651 | Program output: -62.7779180651
Correct output: 23.3238574914  | Program output: 33.3238574914 
Correct output: -81.9975425787 | Program output: -74.9975425787
Correct output: -132.3840059284 | Program output: -112.3840059284
Correct output: -21.0593840301 | Program output: -50.512590889 
Correct output: -85.8056758937 | Program output: -114.8056758937
Correct output: -149.9116694043 | Program output: -144.9116694043
Correct output: -50.3143322102 | Program output: -50.512590889 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -12.51259088899364} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction -17} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_812} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -12.51259088899364 8 float_dec float_dec float_dec float_inc float_dec integer_dup float_min float_dec float_dec float_dec float_inc float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec integer_dup_times -17 float_inc float_dec float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec tagged_812 integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove)
Errors: [8.3853 10 1.0 1 29.0 2 11.0 2 19.0 2 20.0 2 57.1323 12 29.0 2 9.0 2 29.0265 11 20.0143 10 30.0 2 0.0 0 8.7264 10 24.0825 9 22.0 2 10.0 1 37.0 2 10.0 1 7.0 2 20.0 1 29.4532 10 29.0 3 5.0 1 0.1983 9]
Total: 574.0188
Mean: 11.480376
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2899.4025856000017
Median total errors in population: 777.6918499999999
Error averages by case: (100.69345849999897 10.3 101.3171662000002 4.887 104.35116070000005 3.98 102.86973579999972 5.02 113.6008709999998 4.489 121.28742800000053 5.643 138.7703092999985 12.187 109.24164670000027 4.009 113.25377760000025 4.229 111.94154700000261 11.433 106.47770159999877 10.432 105.46917289999979 4.249 110.8484044999996 4.804 97.18690009999965 9.407 115.55045110000172 10.206 105.33056149999985 4.335 94.00709990000004 5.796 130.66729880000014 4.587 94.74553460000041 5.66 105.64686639999988 4.125 121.67330680000019 4.277 111.87004810000074 11.435 105.22810749999984 4.563 111.93463399999976 4.066 100.73539699999996 10.585)
Error minima by case: (2.6001 8 0.0 0 0.0 0 0.0 0 2.2059 1 3.2059 2 42.1323 9 0.0 0 0.0 0 14.0265 9 5.0143 1 0.0 0 0.0 0 3.2736 1 5.801 1 0.0 0 6.1067 1 8.7779 1 0.0 0 0.0 0 8.0 1 0.2653 8 0.0 0 0.0 0 0.1983 1)
Average genome size in population (length): 102.543
Average program size in population (points): 103.543
Average percent parens in population: 0.010
Minimum age in population: 265.9659960916477
Maximum age in population: 270.9056860360589
Average age in population: 268.6171675304877
Median age in population: 268.649521806876
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.579
Error (vector) diversity:			 0.665
Behavioral diversity:				 0.666
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 540725835
--- Timings ---
Current time: 1529616201829 milliseconds
Total Time:         927.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       276.8 seconds, 29.9%
Fitness Testing:    525.8 seconds, 56.7%
Report:             124.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 44607.17290000003
Test mean error for best: 22.30359
;;------------------------------
Outputs of best individual on training cases:
Correct output: 7.385276142    | Program output: -1.0          
Correct output: -58.7779066602 | Program output: -58.7779066602
Correct output: -70.4544341591 | Program output: -97.4544341591
Correct output: 48.0303159228  | Program output: 58.0303159228 
Correct output: 81.5444045338  | Program output: 61.5444045338 
Correct output: 107.605181994  | Program output: 86.605181994  
Correct output: 56.1323198243  | Program output: -1.0          
Correct output: -119.511081127 | Program output: -146.511081127
Correct output: -137.6953004708 | Program output: -126.6953004708
Correct output: 28.0264601383  | Program output: -1.0          
Correct output: 19.014261193   | Program output: -1.0          
Correct output: -76.5652234606 | Program output: -104.5652234606
Correct output: -92.2496022257 | Program output: -93.2496022257
Correct output: -9.7264396507  | Program output: -1.0          
Correct output: -74.5951028043 | Program output: -51.3011493022
Correct output: -111.2224067056 | Program output: -131.2224067056
Correct output: 25.2029289086  | Program output: 14.2029289086 
Correct output: -99.7779180651 | Program output: -60.7779180651
Correct output: 23.3238574914  | Program output: 32.3238574914 
Correct output: -81.9975425787 | Program output: -72.9975425787
Correct output: -132.3840059284 | Program output: -110.3840059284
Correct output: -21.0593840301 | Program output: -51.3011493022
Correct output: -85.8056758937 | Program output: -112.8056758937
Correct output: -149.9116694043 | Program output: -142.9116694043
Correct output: -50.3143322102 | Program output: -51.3011493022
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -13.301149302244779} {:instruction 8} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_802} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -87} {:instruction float_dec} {:instruction float_dec} {:instruction 6} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_447} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction -17} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction float_rot} {:instruction integer_shove} {:instruction in2} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_812} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction print_float} {:instruction float_shove})
Best program: (integer_div float_mult float_yankdup integer_div in1 integer_mod integer_dup_times float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec -13.301149302244779 8 float_dec float_dec float_dec float_dec float_dec integer_dup float_min float_dec float_dec float_dec float_inc float_dec float_dec float_dec float_dec float_dec tagged_802 float_dec float_dec float_dec float_dec float_dec float_dec float_dec -87 float_dec float_dec 6 float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec tagged_447 float_dec float_dec float_dec float_dec integer_dup_times -17 float_inc float_inc float_dec in2 integer_dup integer_add float_rot integer_shove in2 integer_dup float_yankdup integer_swap float_dec float_dec tagged_812 integer_sub integer_dup float_yankdup integer_swap float_dec float_dec float_inc integer_sub float_dec float_yankdup float_dec float_mod print_float float_shove)
Errors: [8.3853 10 0.0 0 27.0 2 10.0 1 20.0 1 21.0 3 57.1323 12 27.0 2 11.0 2 29.0265 11 20.0143 10 28.0 3 1.0 1 8.7264 10 23.294 10 20.0 1 11.0 2 39.0 2 9.0 2 9.0 2 22.0 2 30.2418 9 27.0 3 7.0 1 0.9868 7]
Total: 575.8074
Mean: 11.516148
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2940.763494
Median total errors in population: 797.5104
Error averages by case: (99.10046829999935 10.261 102.05212290000019 4.904 108.73375470000006 4.255 103.12535159999973 4.86 114.39732999999983 4.4 120.81202550000043 5.564 137.4240726999985 12.171 115.00474230000027 4.255 117.59635890000027 4.474 111.26915500000209 11.375 104.96911239999935 10.392 110.2675935999998 4.608 111.44680889999971 4.84 95.98297189999964 9.368 116.19843900000158 10.181 110.46042489999986 4.622 93.8812534 5.747 133.8270637000001 4.702 95.33458610000028 5.553 108.69726229999992 4.368 125.78106880000018 4.55 110.97277840000062 11.373 110.07639909999979 4.821 116.61875439999976 4.345 100.31059520000004 10.434)
Error minima by case: (1.6001 8 0.0 0 0.0 0 0.0 0 7.4412 1 14.6052 2 15.1323 8 0.0 0 0.0 0 12.9735 8 13.5537 2 1.0 1 0.0 0 6.7264 1 1.3919 1 0.0 0 5.0 1 7.9845 1 0.0 0 0.0 0 7.0 1 0.5468 7 0.0 0 0.0 0 0.0132 1)
Average genome size in population (length): 102.615
Average program size in population (points): 103.615
Average percent parens in population: 0.010
Minimum age in population: 267.0708803395401
Maximum age in population: 271.9447879333286
Average age in population: 269.9369017613732
Median age in population: 269.9965838039038
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.577
Error (vector) diversity:			 0.662
Behavioral diversity:				 0.662
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 543291760
--- Timings ---
Current time: 1529616206278 milliseconds
Total Time:         931.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       278.1 seconds, 29.9%
Fitness Testing:    528.3 seconds, 56.7%
Report:             125.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
