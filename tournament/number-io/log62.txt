Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-47.50295883265117 69] 21.497041167348833]
Train Case:   1 | Input/Output: [[98.22951389707418 -21] 77.22951389707418]
Train Case:   2 | Input/Output: [[-83.29131301753428 87] 3.7086869824657214]
Train Case:   3 | Input/Output: [[97.0311162764512 9] 106.0311162764512]
Train Case:   4 | Input/Output: [[11.36321254460401 33] 44.36321254460401]
Train Case:   5 | Input/Output: [[41.46935870527534 -60] -18.53064129472466]
Train Case:   6 | Input/Output: [[13.570697341155508 82] 95.57069734115551]
Train Case:   7 | Input/Output: [[20.514424604564894 98] 118.5144246045649]
Train Case:   8 | Input/Output: [[-88.07909374945754 34] -54.07909374945754]
Train Case:   9 | Input/Output: [[-62.07968807359112 49] -13.079688073591122]
Train Case:  10 | Input/Output: [[50.184187112930374 -56] -5.815812887069626]
Train Case:  11 | Input/Output: [[19.06259573080682 74] 93.06259573080682]
Train Case:  12 | Input/Output: [[-39.132601418213866 -22] -61.132601418213866]
Train Case:  13 | Input/Output: [[16.75904641529293 5] 21.75904641529293]
Train Case:  14 | Input/Output: [[66.5562972994725 16] 82.5562972994725]
Train Case:  15 | Input/Output: [[-82.28241168493258 -8] -90.28241168493258]
Train Case:  16 | Input/Output: [[15.352289012994902 -16] -0.6477109870050981]
Train Case:  17 | Input/Output: [[-63.09118803156806 -5] -68.09118803156807]
Train Case:  18 | Input/Output: [[-4.254665368180909 76] 71.74533463181909]
Train Case:  19 | Input/Output: [[24.745663604147154 86] 110.74566360414715]
Train Case:  20 | Input/Output: [[-50.417803762187965 67] 16.582196237812035]
Train Case:  21 | Input/Output: [[-15.288715746180841 -19] -34.28871574618084]
Train Case:  22 | Input/Output: [[42.771533833184805 63] 105.7715338331848]
Train Case:  23 | Input/Output: [[-59.53268025963114 96] 36.46731974036886]
Train Case:  24 | Input/Output: [[36.48248053057662 -75] -38.51751946942338]
Test Case:   0 | Input/Output: [[44.264585043166875 35] 79.26458504316687]
Test Case:   1 | Input/Output: [[51.27573417583719 -43] 8.275734175837187]
Test Case:   2 | Input/Output: [[63.59133952693844 -8] 55.59133952693844]
Test Case:   3 | Input/Output: [[-99.47321205831847 41] -58.47321205831847]
Test Case:   4 | Input/Output: [[-53.42818303303032 -54] -107.42818303303032]
Test Case:   5 | Input/Output: [[51.93499935587457 91] 142.93499935587457]
Test Case:   6 | Input/Output: [[11.382498207205856 94] 105.38249820720586]
Test Case:   7 | Input/Output: [[-40.97986135556746 -9] -49.97986135556746]
Test Case:   8 | Input/Output: [[86.7984394313265 -18] 68.7984394313265]
Test Case:   9 | Input/Output: [[-34.24580175739207 -35] -69.24580175739207]
Test Case:  10 | Input/Output: [[-53.16486278659027 -83] -136.16486278659028]
Test Case:  11 | Input/Output: [[66.64767082685447 66] 132.64767082685447]
Test Case:  12 | Input/Output: [[81.5188038149791 73] 154.5188038149791]
Test Case:  13 | Input/Output: [[-75.71864518509071 -96] -171.7186451850907]
Test Case:  14 | Input/Output: [[-18.618712039569658 66] 47.38128796043034]
Test Case:  15 | Input/Output: [[3.694711311494416 -51] -47.305288688505584]
Test Case:  16 | Input/Output: [[66.21816158910414 81] 147.21816158910414]
Test Case:  17 | Input/Output: [[36.48972126293117 -26] 10.48972126293117]
Test Case:  18 | Input/Output: [[-43.36369193951191 -57] -100.36369193951191]
Test Case:  19 | Input/Output: [[-0.9288763022403828 -47] -47.92887630224038]
Test Case:  20 | Input/Output: [[77.28951893503233 47] 124.28951893503233]
Test Case:  21 | Input/Output: [[43.6039242431938 36] 79.6039242431938]
Test Case:  22 | Input/Output: [[-47.65701000350258 88] 40.34298999649742]
Test Case:  23 | Input/Output: [[49.08506088765964 -87] -37.91493911234036]
Test Case:  24 | Input/Output: [[-66.52051178252091 26] -40.52051178252091]
Test Case:  25 | Input/Output: [[41.60951099805311 22] 63.60951099805311]
Test Case:  26 | Input/Output: [[-56.17975872911294 -24] -80.17975872911293]
Test Case:  27 | Input/Output: [[-77.34919958995441 -6] -83.34919958995441]
Test Case:  28 | Input/Output: [[-87.09791729121376 85] -2.0979172912137614]
Test Case:  29 | Input/Output: [[13.824159050213481 69] 82.82415905021348]
Test Case:  30 | Input/Output: [[3.181950534390836 -23] -19.818049465609164]
Test Case:  31 | Input/Output: [[53.28467908985928 68] 121.28467908985928]
Test Case:  32 | Input/Output: [[-44.21107475973882 -32] -76.21107475973882]
Test Case:  33 | Input/Output: [[32.53175283977572 -86] -53.46824716022428]
Test Case:  34 | Input/Output: [[45.176166846843216 57] 102.17616684684322]
Test Case:  35 | Input/Output: [[79.38936447208533 -52] 27.389364472085333]
Test Case:  36 | Input/Output: [[-42.397567572255966 -63] -105.39756757225597]
Test Case:  37 | Input/Output: [[-33.368124100975734 -20] -53.368124100975734]
Test Case:  38 | Input/Output: [[-55.76922777889395 -55] -110.76922777889395]
Test Case:  39 | Input/Output: [[-84.51703400866268 -14] -98.51703400866268]
Test Case:  40 | Input/Output: [[83.23766411142668 12] 95.23766411142668]
Test Case:  41 | Input/Output: [[71.35806645913979 77] 148.3580664591398]
Test Case:  42 | Input/Output: [[29.139852533053244 -2] 27.139852533053244]
Test Case:  43 | Input/Output: [[-9.460085432085165 -39] -48.460085432085165]
Test Case:  44 | Input/Output: [[-34.46396959183291 -77] -111.4639695918329]
Test Case:  45 | Input/Output: [[-97.877961204556 -76] -173.87796120455602]
Test Case:  46 | Input/Output: [[34.37024071792462 72] 106.37024071792462]
Test Case:  47 | Input/Output: [[0.5837859042898401 82] 82.58378590428984]
Test Case:  48 | Input/Output: [[-26.26022467004549 -77] -103.26022467004549]
Test Case:  49 | Input/Output: [[62.83022374065797 47] 109.83022374065797]
Test Case:  50 | Input/Output: [[-42.896733351813296 -84] -126.8967333518133]
Test Case:  51 | Input/Output: [[37.2525948816602 -84] -46.7474051183398]
Test Case:  52 | Input/Output: [[12.466512094113654 45] 57.466512094113654]
Test Case:  53 | Input/Output: [[9.014870533546642 69] 78.01487053354664]
Test Case:  54 | Input/Output: [[44.034449661392216 -64] -19.965550338607784]
Test Case:  55 | Input/Output: [[92.62556167329902 74] 166.62556167329902]
Test Case:  56 | Input/Output: [[24.945368564630073 8] 32.94536856463007]
Test Case:  57 | Input/Output: [[57.46564106092313 34] 91.46564106092313]
Test Case:  58 | Input/Output: [[-28.49590461938827 36] 7.50409538061173]
Test Case:  59 | Input/Output: [[89.86433201486042 -43] 46.86433201486042]
Test Case:  60 | Input/Output: [[-95.64670226583445 -64] -159.64670226583445]
Test Case:  61 | Input/Output: [[-20.55355640475689 -53] -73.55355640475689]
Test Case:  62 | Input/Output: [[57.66930421401156 -74] -16.33069578598844]
Test Case:  63 | Input/Output: [[-57.12245927114017 30] -27.122459271140173]
Test Case:  64 | Input/Output: [[-90.01563620257986 63] -27.015636202579856]
Test Case:  65 | Input/Output: [[-3.5800485305025376 56] 52.41995146949746]
Test Case:  66 | Input/Output: [[78.60415919849333 -76] 2.6041591984933348]
Test Case:  67 | Input/Output: [[-88.45124611539228 -79] -167.45124611539228]
Test Case:  68 | Input/Output: [[3.645913872429361 34] 37.64591387242936]
Test Case:  69 | Input/Output: [[-99.16798085494985 75] -24.167980854949846]
Test Case:  70 | Input/Output: [[-78.41864115068051 -39] -117.41864115068051]
Test Case:  71 | Input/Output: [[34.10064739547337 -49] -14.899352604526626]
Test Case:  72 | Input/Output: [[-58.75418841338185 -59] -117.75418841338185]
Test Case:  73 | Input/Output: [[4.561285005015137 52] 56.56128500501514]
Test Case:  74 | Input/Output: [[85.18280670434896 0] 85.18280670434896]
Test Case:  75 | Input/Output: [[80.00248498005044 80] 160.00248498005044]
Test Case:  76 | Input/Output: [[-57.19341321493565 -36] -93.19341321493565]
Test Case:  77 | Input/Output: [[71.46394120456725 -42] 29.46394120456725]
Test Case:  78 | Input/Output: [[39.554386150982936 -49] -9.445613849017064]
Test Case:  79 | Input/Output: [[-89.13679288178969 16] -73.13679288178969]
Test Case:  80 | Input/Output: [[16.108220621001152 -7] 9.108220621001152]
Test Case:  81 | Input/Output: [[86.36324879686788 36] 122.36324879686788]
Test Case:  82 | Input/Output: [[93.64847411886436 98] 191.64847411886436]
Test Case:  83 | Input/Output: [[-1.5511634064483246 97] 95.44883659355168]
Test Case:  84 | Input/Output: [[41.14361196711462 -86] -44.85638803288538]
Test Case:  85 | Input/Output: [[34.809047469836514 34] 68.80904746983651]
Test Case:  86 | Input/Output: [[24.880798792595186 10] 34.880798792595186]
Test Case:  87 | Input/Output: [[-45.56556864983472 -56] -101.56556864983472]
Test Case:  88 | Input/Output: [[-35.6158399001264 -22] -57.6158399001264]
Test Case:  89 | Input/Output: [[37.55649959475332 -57] -19.44350040524668]
Test Case:  90 | Input/Output: [[-62.68758716456575 -9] -71.68758716456574]
Test Case:  91 | Input/Output: [[41.81968374286771 -98] -56.18031625713229]
Test Case:  92 | Input/Output: [[8.312302607291784 95] 103.31230260729178]
Test Case:  93 | Input/Output: [[74.0813314572961 57] 131.0813314572961]
Test Case:  94 | Input/Output: [[64.58034803567395 56] 120.58034803567395]
Test Case:  95 | Input/Output: [[-5.176709595338707 46] 40.82329040466129]
Test Case:  96 | Input/Output: [[-63.33789765602322 -87] -150.33789765602322]
Test Case:  97 | Input/Output: [[52.85899698359057 -48] 4.858996983590572]
Test Case:  98 | Input/Output: [[-43.2241401003489 93] 49.7758598996511]
Test Case:  99 | Input/Output: [[59.824692845577374 -92] -32.175307154422626]
Test Case: 100 | Input/Output: [[11.708288118513295 -53] -41.291711881486705]
Test Case: 101 | Input/Output: [[-71.69685737510125 86] 14.303142624898754]
Test Case: 102 | Input/Output: [[93.56704476328528 15] 108.56704476328528]
Test Case: 103 | Input/Output: [[-96.7261951157485 -15] -111.7261951157485]
Test Case: 104 | Input/Output: [[-36.40856505838339 -4] -40.40856505838339]
Test Case: 105 | Input/Output: [[41.674493528793164 84] 125.67449352879316]
Test Case: 106 | Input/Output: [[87.27805926227953 -38] 49.27805926227953]
Test Case: 107 | Input/Output: [[-33.304880365936256 -26] -59.304880365936256]
Test Case: 108 | Input/Output: [[54.41905854780927 -46] 8.419058547809271]
Test Case: 109 | Input/Output: [[14.207647407536925 -13] 1.2076474075369248]
Test Case: 110 | Input/Output: [[-39.03965003455889 60] 20.96034996544111]
Test Case: 111 | Input/Output: [[96.28622219357666 58] 154.28622219357666]
Test Case: 112 | Input/Output: [[-31.733690768593533 -7] -38.73369076859353]
Test Case: 113 | Input/Output: [[20.80888765759579 12] 32.80888765759579]
Test Case: 114 | Input/Output: [[97.8825008042017 26] 123.8825008042017]
Test Case: 115 | Input/Output: [[-66.54735919953671 -68] -134.54735919953671]
Test Case: 116 | Input/Output: [[-16.419951165556924 75] 58.580048834443076]
Test Case: 117 | Input/Output: [[59.20161316605203 -68] -8.798386833947973]
Test Case: 118 | Input/Output: [[46.1368491099127 96] 142.1368491099127]
Test Case: 119 | Input/Output: [[-55.61315438490648 48] -7.61315438490648]
Test Case: 120 | Input/Output: [[-73.01781707874989 -18] -91.01781707874989]
Test Case: 121 | Input/Output: [[-98.00077628934571 -52] -150.0007762893457]
Test Case: 122 | Input/Output: [[99.06290738976966 31] 130.06290738976966]
Test Case: 123 | Input/Output: [[-32.33019030948296 -28] -60.33019030948296]
Test Case: 124 | Input/Output: [[0.6088127589192709 23] 23.60881275891927]
Test Case: 125 | Input/Output: [[-32.333938496241714 -33] -65.33393849624171]
Test Case: 126 | Input/Output: [[-73.33997066131934 21] -52.33997066131934]
Test Case: 127 | Input/Output: [[-24.31076840364743 -63] -87.31076840364743]
Test Case: 128 | Input/Output: [[12.928259587889698 55] 67.9282595878897]
Test Case: 129 | Input/Output: [[29.911400750882876 27] 56.911400750882876]
Test Case: 130 | Input/Output: [[-41.05860271242523 -95] -136.05860271242523]
Test Case: 131 | Input/Output: [[7.087323686878435 64] 71.08732368687843]
Test Case: 132 | Input/Output: [[-2.987910976119636 -35] -37.987910976119636]
Test Case: 133 | Input/Output: [[-23.364437879286058 87] 63.63556212071394]
Test Case: 134 | Input/Output: [[-64.0869261166813 -73] -137.0869261166813]
Test Case: 135 | Input/Output: [[-56.38689416311378 94] 37.61310583688622]
Test Case: 136 | Input/Output: [[16.87860676682608 -4] 12.878606766826081]
Test Case: 137 | Input/Output: [[-81.78365144026276 97] 15.216348559737241]
Test Case: 138 | Input/Output: [[29.871569962353334 -13] 16.871569962353334]
Test Case: 139 | Input/Output: [[31.49173400158415 -95] -63.50826599841585]
Test Case: 140 | Input/Output: [[-69.3922367660359 40] -29.392236766035893]
Test Case: 141 | Input/Output: [[-66.6355745451155 12] -54.6355745451155]
Test Case: 142 | Input/Output: [[30.83449998120969 55] 85.83449998120969]
Test Case: 143 | Input/Output: [[54.12158286923639 -17] 37.12158286923639]
Test Case: 144 | Input/Output: [[-6.812485385067816 -56] -62.812485385067816]
Test Case: 145 | Input/Output: [[-91.05753014212405 -68] -159.05753014212405]
Test Case: 146 | Input/Output: [[-96.98038939868692 58] -38.980389398686924]
Test Case: 147 | Input/Output: [[-23.33992904305795 88] 64.66007095694205]
Test Case: 148 | Input/Output: [[71.45926390366566 -45] 26.459263903665658]
Test Case: 149 | Input/Output: [[-98.09777935026813 96] -2.0977793502681266]
Test Case: 150 | Input/Output: [[30.900504678430252 -78] -47.09949532156975]
Test Case: 151 | Input/Output: [[-49.23469254363943 18] -31.234692543639433]
Test Case: 152 | Input/Output: [[-4.36290764033123 -10] -14.36290764033123]
Test Case: 153 | Input/Output: [[57.79119015712527 90] 147.79119015712527]
Test Case: 154 | Input/Output: [[69.43348631236393 -39] 30.433486312363925]
Test Case: 155 | Input/Output: [[85.99109328497241 -14] 71.99109328497241]
Test Case: 156 | Input/Output: [[-0.9843956060355765 -50] -50.98439560603558]
Test Case: 157 | Input/Output: [[-25.59765041092048 67] 41.40234958907952]
Test Case: 158 | Input/Output: [[-89.50566854943358 -86] -175.50566854943358]
Test Case: 159 | Input/Output: [[-42.08001482711401 3] -39.08001482711401]
Test Case: 160 | Input/Output: [[61.10457311521634 91] 152.10457311521634]
Test Case: 161 | Input/Output: [[26.034718163355393 -67] -40.96528183664461]
Test Case: 162 | Input/Output: [[-29.129790237815854 -69] -98.12979023781585]
Test Case: 163 | Input/Output: [[-27.446778061981348 -59] -86.44677806198135]
Test Case: 164 | Input/Output: [[-45.728846890682775 -52] -97.72884689068277]
Test Case: 165 | Input/Output: [[-87.7682676252179 -58] -145.7682676252179]
Test Case: 166 | Input/Output: [[-20.12602876934693 -41] -61.12602876934693]
Test Case: 167 | Input/Output: [[34.24712338333015 84] 118.24712338333015]
Test Case: 168 | Input/Output: [[49.53923782868344 -32] 17.53923782868344]
Test Case: 169 | Input/Output: [[-59.56264449087754 -22] -81.56264449087755]
Test Case: 170 | Input/Output: [[-6.761504179345707 28] 21.238495820654293]
Test Case: 171 | Input/Output: [[-41.59159680946769 84] 42.40840319053231]
Test Case: 172 | Input/Output: [[-30.196270406237275 -24] -54.196270406237275]
Test Case: 173 | Input/Output: [[0.7805554768934826 -45] -44.21944452310652]
Test Case: 174 | Input/Output: [[-31.79295938417654 22] -9.792959384176541]
Test Case: 175 | Input/Output: [[30.928575437861753 88] 118.92857543786175]
Test Case: 176 | Input/Output: [[-45.32271563037102 64] 18.67728436962898]
Test Case: 177 | Input/Output: [[49.358033508409136 -74] -24.641966491590864]
Test Case: 178 | Input/Output: [[64.74122338773645 -50] 14.741223387736454]
Test Case: 179 | Input/Output: [[11.222674332785317 22] 33.22267433278532]
Test Case: 180 | Input/Output: [[21.804784592886392 90] 111.80478459288639]
Test Case: 181 | Input/Output: [[94.99419310587277 -49] 45.99419310587277]
Test Case: 182 | Input/Output: [[-62.32590039511096 -5] -67.32590039511096]
Test Case: 183 | Input/Output: [[69.3496392634089 88] 157.3496392634089]
Test Case: 184 | Input/Output: [[-98.09268614032017 -87] -185.09268614032015]
Test Case: 185 | Input/Output: [[98.90104193574356 -38] 60.901041935743564]
Test Case: 186 | Input/Output: [[67.40927545493867 -34] 33.409275454938665]
Test Case: 187 | Input/Output: [[-4.965195628939554 24] 19.034804371060446]
Test Case: 188 | Input/Output: [[70.57590103674892 -67] 3.575901036748917]
Test Case: 189 | Input/Output: [[69.03276238827334 61] 130.03276238827334]
Test Case: 190 | Input/Output: [[-64.03982907405792 -91] -155.03982907405793]
Test Case: 191 | Input/Output: [[-77.62457381292441 74] -3.6245738129244103]
Test Case: 192 | Input/Output: [[-21.03875918412234 -78] -99.03875918412234]
Test Case: 193 | Input/Output: [[92.48456598480882 -76] 16.484565984808825]
Test Case: 194 | Input/Output: [[47.23495337303419 -67] -19.765046626965812]
Test Case: 195 | Input/Output: [[-12.571559383190007 -90] -102.57155938319]
Test Case: 196 | Input/Output: [[12.99886055765191 35] 47.99886055765191]
Test Case: 197 | Input/Output: [[-16.761136761341007 39] 22.238863238658993]
Test Case: 198 | Input/Output: [[99.20802418113607 -7] 92.20802418113607]
Test Case: 199 | Input/Output: [[26.757637993966583 -35] -8.242362006033417]
Test Case: 200 | Input/Output: [[-82.63776484197865 -19] -101.63776484197865]
Test Case: 201 | Input/Output: [[-51.64536723992694 -3] -54.64536723992694]
Test Case: 202 | Input/Output: [[-44.981510705592484 78] 33.018489294407516]
Test Case: 203 | Input/Output: [[32.119234378621115 13] 45.119234378621115]
Test Case: 204 | Input/Output: [[45.737545492301535 100] 145.73754549230154]
Test Case: 205 | Input/Output: [[-22.220607985789243 11] -11.220607985789243]
Test Case: 206 | Input/Output: [[-90.21631188569374 69] -21.21631188569374]
Test Case: 207 | Input/Output: [[61.57875484517109 9] 70.57875484517109]
Test Case: 208 | Input/Output: [[-99.4248246753358 57] -42.4248246753358]
Test Case: 209 | Input/Output: [[-71.67006367583922 89] 17.329936324160784]
Test Case: 210 | Input/Output: [[91.12096189668307 -42] 49.12096189668307]
Test Case: 211 | Input/Output: [[-65.00971502965271 -68] -133.0097150296527]
Test Case: 212 | Input/Output: [[-14.757533478201836 -31] -45.757533478201836]
Test Case: 213 | Input/Output: [[78.54296599507506 42] 120.54296599507506]
Test Case: 214 | Input/Output: [[64.27553471440476 40] 104.27553471440476]
Test Case: 215 | Input/Output: [[10.890110831588771 -9] 1.8901108315887711]
Test Case: 216 | Input/Output: [[58.00111919443006 -62] -3.9988808055699394]
Test Case: 217 | Input/Output: [[-24.185414550044186 -7] -31.185414550044186]
Test Case: 218 | Input/Output: [[21.675016512209396 -7] 14.675016512209396]
Test Case: 219 | Input/Output: [[-85.27099508237477 -7] -92.27099508237477]
Test Case: 220 | Input/Output: [[-82.82762857966286 34] -48.82762857966286]
Test Case: 221 | Input/Output: [[-31.81350980777195 96] 64.18649019222805]
Test Case: 222 | Input/Output: [[-30.59801842246948 13] -17.59801842246948]
Test Case: 223 | Input/Output: [[-67.74063837589182 -95] -162.74063837589182]
Test Case: 224 | Input/Output: [[-73.23385922426607 -84] -157.23385922426607]
Test Case: 225 | Input/Output: [[-14.893928130741656 83] 68.10607186925834]
Test Case: 226 | Input/Output: [[-3.458808359110293 26] 22.541191640889707]
Test Case: 227 | Input/Output: [[44.8775816156502 36] 80.8775816156502]
Test Case: 228 | Input/Output: [[41.16198099577866 21] 62.16198099577866]
Test Case: 229 | Input/Output: [[51.064337572436074 34] 85.06433757243607]
Test Case: 230 | Input/Output: [[80.4236009463242 -13] 67.4236009463242]
Test Case: 231 | Input/Output: [[65.03372610531628 -23] 42.033726105316276]
Test Case: 232 | Input/Output: [[-50.446652388545 86] 35.553347611455]
Test Case: 233 | Input/Output: [[-52.71914351128486 13] -39.71914351128486]
Test Case: 234 | Input/Output: [[-7.505597788459966 71] 63.494402211540034]
Test Case: 235 | Input/Output: [[-7.312653341831293 83] 75.6873466581687]
Test Case: 236 | Input/Output: [[30.05252739053674 31] 61.05252739053674]
Test Case: 237 | Input/Output: [[-12.663003364758424 46] 33.336996635241576]
Test Case: 238 | Input/Output: [[-23.984034981929796 36] 12.015965018070204]
Test Case: 239 | Input/Output: [[-10.588579834544333 81] 70.41142016545567]
Test Case: 240 | Input/Output: [[59.414147565006346 95] 154.41414756500635]
Test Case: 241 | Input/Output: [[13.426352886574477 -75] -61.57364711342552]
Test Case: 242 | Input/Output: [[-80.55149377245192 -89] -169.55149377245192]
Test Case: 243 | Input/Output: [[-21.869025661935225 -71] -92.86902566193523]
Test Case: 244 | Input/Output: [[-79.89763274890211 -62] -141.8976327489021]
Test Case: 245 | Input/Output: [[67.87083995175092 -54] 13.870839951750924]
Test Case: 246 | Input/Output: [[74.62965528658171 -8] 66.62965528658171]
Test Case: 247 | Input/Output: [[-0.5758328748607369 -79] -79.57583287486074]
Test Case: 248 | Input/Output: [[25.00760955853805 81] 106.00760955853805]
Test Case: 249 | Input/Output: [[42.199012402136646 44] 86.19901240213665]
Test Case: 250 | Input/Output: [[-35.99745513203585 -54] -89.99745513203585]
Test Case: 251 | Input/Output: [[-87.63970720548345 -19] -106.63970720548345]
Test Case: 252 | Input/Output: [[79.23127187519123 -29] 50.231271875191226]
Test Case: 253 | Input/Output: [[-62.39605755491393 29] -33.39605755491393]
Test Case: 254 | Input/Output: [[-15.204516868324873 -79] -94.20451686832487]
Test Case: 255 | Input/Output: [[11.249701394528785 -26] -14.750298605471215]
Test Case: 256 | Input/Output: [[-74.4684335540751 51] -23.468433554075105]
Test Case: 257 | Input/Output: [[16.369424382575602 84] 100.3694243825756]
Test Case: 258 | Input/Output: [[-19.30652343418471 50] 30.69347656581529]
Test Case: 259 | Input/Output: [[83.36656346113395 71] 154.36656346113395]
Test Case: 260 | Input/Output: [[-10.214951028324464 75] 64.78504897167554]
Test Case: 261 | Input/Output: [[-35.445065567594696 -68] -103.4450655675947]
Test Case: 262 | Input/Output: [[63.77168415749955 -19] 44.77168415749955]
Test Case: 263 | Input/Output: [[-38.041188828505625 -63] -101.04118882850562]
Test Case: 264 | Input/Output: [[-3.75527158899871 -8] -11.75527158899871]
Test Case: 265 | Input/Output: [[73.88643513141955 59] 132.88643513141955]
Test Case: 266 | Input/Output: [[-41.33985362287147 31] -10.339853622871473]
Test Case: 267 | Input/Output: [[-72.81124438525568 99] 26.188755614744323]
Test Case: 268 | Input/Output: [[59.69136624875688 61] 120.69136624875688]
Test Case: 269 | Input/Output: [[89.26999925270138 83] 172.26999925270138]
Test Case: 270 | Input/Output: [[-23.226398500020082 26] 2.773601499979918]
Test Case: 271 | Input/Output: [[-72.70649697723428 57] -15.70649697723428]
Test Case: 272 | Input/Output: [[57.98857715994879 -4] 53.98857715994879]
Test Case: 273 | Input/Output: [[-61.69804706811619 44] -17.69804706811619]
Test Case: 274 | Input/Output: [[74.25761781722892 17] 91.25761781722892]
Test Case: 275 | Input/Output: [[84.2011728075907 23] 107.2011728075907]
Test Case: 276 | Input/Output: [[36.63201729449409 41] 77.63201729449409]
Test Case: 277 | Input/Output: [[82.22167716631915 99] 181.22167716631915]
Test Case: 278 | Input/Output: [[65.31926596875246 -89] -23.68073403124754]
Test Case: 279 | Input/Output: [[17.740922170771967 74] 91.74092217077197]
Test Case: 280 | Input/Output: [[-74.29749104276249 46] -28.297491042762488]
Test Case: 281 | Input/Output: [[26.035302751771326 -99] -72.96469724822867]
Test Case: 282 | Input/Output: [[11.010883327688077 30] 41.01088332768808]
Test Case: 283 | Input/Output: [[53.826470331085574 76] 129.82647033108557]
Test Case: 284 | Input/Output: [[96.06530312753387 -30] 66.06530312753387]
Test Case: 285 | Input/Output: [[-63.32899500832616 97] 33.67100499167384]
Test Case: 286 | Input/Output: [[42.97753576558432 -71] -28.02246423441568]
Test Case: 287 | Input/Output: [[88.692159872009 -89] -0.3078401279909997]
Test Case: 288 | Input/Output: [[-47.6334564297485 -34] -81.63345642974849]
Test Case: 289 | Input/Output: [[-98.20394408123731 -65] -163.2039440812373]
Test Case: 290 | Input/Output: [[39.43581855425657 -62] -22.56418144574343]
Test Case: 291 | Input/Output: [[40.12433163744919 16] 56.12433163744919]
Test Case: 292 | Input/Output: [[-38.89030061467971 -64] -102.89030061467972]
Test Case: 293 | Input/Output: [[-53.49652758968606 48] -5.49652758968606]
Test Case: 294 | Input/Output: [[81.55241493239384 -76] 5.5524149323938445]
Test Case: 295 | Input/Output: [[26.09334236130934 36] 62.09334236130934]
Test Case: 296 | Input/Output: [[46.4487302468813 82] 128.4487302468813]
Test Case: 297 | Input/Output: [[51.607639657749246 61] 112.60763965774925]
Test Case: 298 | Input/Output: [[-50.59650435610781 9] -41.59650435610781]
Test Case: 299 | Input/Output: [[-45.45489976993362 -57] -102.45489976993362]
Test Case: 300 | Input/Output: [[-17.965128447126105 46] 28.034871552873895]
Test Case: 301 | Input/Output: [[-26.681573838556403 99] 72.3184261614436]
Test Case: 302 | Input/Output: [[-84.83383622279281 -73] -157.8338362227928]
Test Case: 303 | Input/Output: [[75.75914598845648 -36] 39.75914598845648]
Test Case: 304 | Input/Output: [[43.37627423687701 95] 138.376274236877]
Test Case: 305 | Input/Output: [[50.04721637229227 -97] -46.95278362770773]
Test Case: 306 | Input/Output: [[-62.66268256398633 -80] -142.66268256398632]
Test Case: 307 | Input/Output: [[-9.917363377656315 -92] -101.91736337765632]
Test Case: 308 | Input/Output: [[93.2788071995719 18] 111.2788071995719]
Test Case: 309 | Input/Output: [[-43.85084415408633 -32] -75.85084415408633]
Test Case: 310 | Input/Output: [[-21.5510791484203 -15] -36.5510791484203]
Test Case: 311 | Input/Output: [[-66.05178721154286 86] 19.94821278845714]
Test Case: 312 | Input/Output: [[-84.31915227786419 95] 10.680847722135809]
Test Case: 313 | Input/Output: [[10.898382791460378 92] 102.89838279146038]
Test Case: 314 | Input/Output: [[24.315920978526833 91] 115.31592097852683]
Test Case: 315 | Input/Output: [[94.10717214404377 3] 97.10717214404377]
Test Case: 316 | Input/Output: [[-30.28656944269889 -45] -75.28656944269889]
Test Case: 317 | Input/Output: [[76.68583239851213 12] 88.68583239851213]
Test Case: 318 | Input/Output: [[70.71118848127335 12] 82.71118848127335]
Test Case: 319 | Input/Output: [[-80.10630031476786 91] 10.893699685232136]
Test Case: 320 | Input/Output: [[-18.660895969809218 57] 38.33910403019078]
Test Case: 321 | Input/Output: [[43.31063733032806 29] 72.31063733032806]
Test Case: 322 | Input/Output: [[34.373646095541574 -59] -24.626353904458426]
Test Case: 323 | Input/Output: [[-31.61315084812557 -53] -84.61315084812557]
Test Case: 324 | Input/Output: [[2.1924541578369485 -10] -7.8075458421630515]
Test Case: 325 | Input/Output: [[-87.98341200133584 18] -69.98341200133584]
Test Case: 326 | Input/Output: [[81.81867711416274 35] 116.81867711416274]
Test Case: 327 | Input/Output: [[-56.9984378028697 -40] -96.9984378028697]
Test Case: 328 | Input/Output: [[-56.00648031106219 42] -14.006480311062191]
Test Case: 329 | Input/Output: [[1.736791042350788 93] 94.73679104235079]
Test Case: 330 | Input/Output: [[92.38199478642088 -84] 8.381994786420876]
Test Case: 331 | Input/Output: [[57.651696237388336 58] 115.65169623738834]
Test Case: 332 | Input/Output: [[-26.588359043005298 -75] -101.5883590430053]
Test Case: 333 | Input/Output: [[54.53104821077255 17] 71.53104821077255]
Test Case: 334 | Input/Output: [[-17.110544645659772 78] 60.88945535434023]
Test Case: 335 | Input/Output: [[-98.92944956253507 -28] -126.92944956253507]
Test Case: 336 | Input/Output: [[-1.215870055355083 33] 31.784129944644917]
Test Case: 337 | Input/Output: [[54.79062394307715 38] 92.79062394307715]
Test Case: 338 | Input/Output: [[35.422282387824 71] 106.422282387824]
Test Case: 339 | Input/Output: [[-32.607623746606905 -32] -64.6076237466069]
Test Case: 340 | Input/Output: [[-50.778283213522776 -94] -144.77828321352277]
Test Case: 341 | Input/Output: [[-10.04092436414328 -26] -36.04092436414328]
Test Case: 342 | Input/Output: [[-13.680027319994508 70] 56.31997268000549]
Test Case: 343 | Input/Output: [[-50.880411091758646 58] 7.119588908241354]
Test Case: 344 | Input/Output: [[-36.81517816886362 -82] -118.81517816886361]
Test Case: 345 | Input/Output: [[-52.36374069796723 61] 8.63625930203277]
Test Case: 346 | Input/Output: [[3.46617225831001 93] 96.46617225831001]
Test Case: 347 | Input/Output: [[2.125381208581814 -14] -11.874618791418186]
Test Case: 348 | Input/Output: [[74.56512614841066 -21] 53.565126148410656]
Test Case: 349 | Input/Output: [[-50.5750925315434 17] -33.5750925315434]
Test Case: 350 | Input/Output: [[99.16466267937707 -100] -0.8353373206229264]
Test Case: 351 | Input/Output: [[76.56450409061304 57] 133.56450409061304]
Test Case: 352 | Input/Output: [[18.850611886233565 -8] 10.850611886233565]
Test Case: 353 | Input/Output: [[19.355573512009784 87] 106.35557351200978]
Test Case: 354 | Input/Output: [[-0.6609890689623654 -92] -92.66098906896237]
Test Case: 355 | Input/Output: [[36.903915482758634 -80] -43.096084517241366]
Test Case: 356 | Input/Output: [[83.8157384981067 -8] 75.8157384981067]
Test Case: 357 | Input/Output: [[87.56196782101097 -66] 21.561967821010967]
Test Case: 358 | Input/Output: [[-1.0518686777690789 -26] -27.05186867776908]
Test Case: 359 | Input/Output: [[-22.133928390462728 68] 45.86607160953727]
Test Case: 360 | Input/Output: [[41.607223692362936 -84] -42.392776307637064]
Test Case: 361 | Input/Output: [[-71.89906753389741 16] -55.89906753389741]
Test Case: 362 | Input/Output: [[-7.167807633330824 -13] -20.167807633330824]
Test Case: 363 | Input/Output: [[-71.60650527159143 -84] -155.60650527159143]
Test Case: 364 | Input/Output: [[50.80865627367382 -94] -43.19134372632618]
Test Case: 365 | Input/Output: [[-84.41340687579782 92] 7.586593124202182]
Test Case: 366 | Input/Output: [[-17.218284133614034 -66] -83.21828413361403]
Test Case: 367 | Input/Output: [[65.0249639640976 -16] 49.024963964097594]
Test Case: 368 | Input/Output: [[-52.04001459657397 20] -32.04001459657397]
Test Case: 369 | Input/Output: [[-42.13218263357199 -29] -71.132182633572]
Test Case: 370 | Input/Output: [[-55.86923657086311 94] 38.13076342913689]
Test Case: 371 | Input/Output: [[28.923509904006494 72] 100.9235099040065]
Test Case: 372 | Input/Output: [[50.432213318820885 60] 110.43221331882089]
Test Case: 373 | Input/Output: [[10.76979821634228 -50] -39.23020178365772]
Test Case: 374 | Input/Output: [[-54.58521243689272 -20] -74.58521243689272]
Test Case: 375 | Input/Output: [[56.771280875985696 -87] -30.228719124014304]
Test Case: 376 | Input/Output: [[-22.74044994523865 40] 17.25955005476135]
Test Case: 377 | Input/Output: [[39.9595298013017 99] 138.9595298013017]
Test Case: 378 | Input/Output: [[-3.6812489888969964 -58] -61.681248988896996]
Test Case: 379 | Input/Output: [[68.85762176240999 70] 138.85762176241]
Test Case: 380 | Input/Output: [[-76.09000307479572 -13] -89.09000307479572]
Test Case: 381 | Input/Output: [[-15.389172063122984 -91] -106.38917206312298]
Test Case: 382 | Input/Output: [[-80.69057120746362 29] -51.69057120746362]
Test Case: 383 | Input/Output: [[49.824163173835075 -59] -9.175836826164925]
Test Case: 384 | Input/Output: [[29.717023505389818 1] 30.717023505389818]
Test Case: 385 | Input/Output: [[-80.74182436435737 -14] -94.74182436435737]
Test Case: 386 | Input/Output: [[-62.68494842947858 29] -33.68494842947858]
Test Case: 387 | Input/Output: [[31.201751183023475 -87] -55.798248816976525]
Test Case: 388 | Input/Output: [[-63.372801741230724 2] -61.372801741230724]
Test Case: 389 | Input/Output: [[10.233399565749224 12] 22.233399565749224]
Test Case: 390 | Input/Output: [[-92.43259354299988 54] -38.43259354299988]
Test Case: 391 | Input/Output: [[-30.537368099127576 41] 10.462631900872424]
Test Case: 392 | Input/Output: [[-15.299651553444065 -66] -81.29965155344406]
Test Case: 393 | Input/Output: [[17.710428578777893 15] 32.71042857877789]
Test Case: 394 | Input/Output: [[94.1138695969893 38] 132.1138695969893]
Test Case: 395 | Input/Output: [[-27.483694765259713 61] 33.51630523474029]
Test Case: 396 | Input/Output: [[34.971352647915495 -41] -6.028647352084505]
Test Case: 397 | Input/Output: [[41.16264631496949 77] 118.16264631496949]
Test Case: 398 | Input/Output: [[25.00725361929426 -28] -2.9927463807057393]
Test Case: 399 | Input/Output: [[-1.5976892333383859 67] 65.40231076666161]
Test Case: 400 | Input/Output: [[19.972821107847196 26] 45.972821107847196]
Test Case: 401 | Input/Output: [[-72.453742151502 -39] -111.453742151502]
Test Case: 402 | Input/Output: [[-84.64721931837917 30] -54.64721931837917]
Test Case: 403 | Input/Output: [[-15.537675756735752 -40] -55.53767575673575]
Test Case: 404 | Input/Output: [[-98.79058078093061 -89] -187.7905807809306]
Test Case: 405 | Input/Output: [[-44.51334334130641 -56] -100.51334334130641]
Test Case: 406 | Input/Output: [[-96.32016553162082 -7] -103.32016553162082]
Test Case: 407 | Input/Output: [[-17.18936050650433 -33] -50.18936050650433]
Test Case: 408 | Input/Output: [[73.50579848229921 68] 141.5057984822992]
Test Case: 409 | Input/Output: [[-73.70430177470418 92] 18.295698225295823]
Test Case: 410 | Input/Output: [[86.11721000654987 51] 137.11721000654987]
Test Case: 411 | Input/Output: [[48.95488348673152 -46] 2.954883486731518]
Test Case: 412 | Input/Output: [[-37.26281167972325 -94] -131.26281167972326]
Test Case: 413 | Input/Output: [[68.97954605299012 -23] 45.979546052990116]
Test Case: 414 | Input/Output: [[41.906153470559474 60] 101.90615347055947]
Test Case: 415 | Input/Output: [[58.94042770547662 -97] -38.05957229452338]
Test Case: 416 | Input/Output: [[78.6760780954138 -31] 47.6760780954138]
Test Case: 417 | Input/Output: [[51.06411808088902 82] 133.06411808088902]
Test Case: 418 | Input/Output: [[-83.10219493134923 89] 5.897805068650769]
Test Case: 419 | Input/Output: [[20.998786425030417 93] 113.99878642503042]
Test Case: 420 | Input/Output: [[21.162804546185527 -35] -13.837195453814473]
Test Case: 421 | Input/Output: [[26.612237663531246 73] 99.61223766353125]
Test Case: 422 | Input/Output: [[-90.16154785382363 -62] -152.16154785382363]
Test Case: 423 | Input/Output: [[-0.5723961161178295 1] 0.4276038838821705]
Test Case: 424 | Input/Output: [[3.840125121895383 -91] -87.15987487810462]
Test Case: 425 | Input/Output: [[-57.714267175258136 -84] -141.71426717525813]
Test Case: 426 | Input/Output: [[77.49712096700082 15] 92.49712096700082]
Test Case: 427 | Input/Output: [[-88.24619487770138 40] -48.246194877701384]
Test Case: 428 | Input/Output: [[-10.332141772422787 -62] -72.33214177242279]
Test Case: 429 | Input/Output: [[-24.635385264915286 94] 69.36461473508471]
Test Case: 430 | Input/Output: [[-64.90182157721776 41] -23.90182157721776]
Test Case: 431 | Input/Output: [[-1.683778770301771 86] 84.31622122969823]
Test Case: 432 | Input/Output: [[95.88512618555305 36] 131.88512618555305]
Test Case: 433 | Input/Output: [[-81.52221738272998 -7] -88.52221738272998]
Test Case: 434 | Input/Output: [[-78.40816886690219 -6] -84.40816886690219]
Test Case: 435 | Input/Output: [[72.11299164072148 -79] -6.887008359278525]
Test Case: 436 | Input/Output: [[-93.06706377512755 58] -35.06706377512755]
Test Case: 437 | Input/Output: [[73.17300556806583 84] 157.17300556806583]
Test Case: 438 | Input/Output: [[26.436646865499696 24] 50.436646865499696]
Test Case: 439 | Input/Output: [[-45.36040949123981 -26] -71.3604094912398]
Test Case: 440 | Input/Output: [[28.175488658926184 95] 123.17548865892618]
Test Case: 441 | Input/Output: [[80.42545726342289 -95] -14.574542736577115]
Test Case: 442 | Input/Output: [[47.453878560180215 -72] -24.546121439819785]
Test Case: 443 | Input/Output: [[-71.71861524481017 -25] -96.71861524481017]
Test Case: 444 | Input/Output: [[-34.43258611800364 62] 27.56741388199636]
Test Case: 445 | Input/Output: [[-40.70399185726809 -47] -87.7039918572681]
Test Case: 446 | Input/Output: [[77.16988230805694 74] 151.16988230805694]
Test Case: 447 | Input/Output: [[-25.228015514659077 -45] -70.22801551465908]
Test Case: 448 | Input/Output: [[79.006766621581 90] 169.006766621581]
Test Case: 449 | Input/Output: [[-16.539689045231555 36] 19.460310954768445]
Test Case: 450 | Input/Output: [[93.94354549795099 -45] 48.94354549795099]
Test Case: 451 | Input/Output: [[9.20005712135179 74] 83.20005712135179]
Test Case: 452 | Input/Output: [[57.80735026576349 -31] 26.80735026576349]
Test Case: 453 | Input/Output: [[-0.6118859953460571 -38] -38.61188599534606]
Test Case: 454 | Input/Output: [[-20.411686528472444 35] 14.588313471527556]
Test Case: 455 | Input/Output: [[-26.450635553297516 -14] -40.450635553297516]
Test Case: 456 | Input/Output: [[18.192300933782306 36] 54.192300933782306]
Test Case: 457 | Input/Output: [[75.95345552299358 -12] 63.95345552299358]
Test Case: 458 | Input/Output: [[-93.18744120817834 3] -90.18744120817834]
Test Case: 459 | Input/Output: [[-30.07851673511675 -44] -74.07851673511675]
Test Case: 460 | Input/Output: [[8.476472219905688 -89] -80.52352778009431]
Test Case: 461 | Input/Output: [[99.83183579262067 34] 133.83183579262067]
Test Case: 462 | Input/Output: [[86.51806598447953 -90] -3.4819340155204657]
Test Case: 463 | Input/Output: [[84.07194721284446 -58] 26.071947212844464]
Test Case: 464 | Input/Output: [[-2.1870587139024167 18] 15.812941286097583]
Test Case: 465 | Input/Output: [[-85.41476742920462 -78] -163.41476742920463]
Test Case: 466 | Input/Output: [[-52.93678033142315 36] -16.93678033142315]
Test Case: 467 | Input/Output: [[38.5920053990109 44] 82.5920053990109]
Test Case: 468 | Input/Output: [[49.81505364662377 82] 131.81505364662377]
Test Case: 469 | Input/Output: [[-6.329176435327156 -38] -44.329176435327156]
Test Case: 470 | Input/Output: [[16.051795174828868 -55] -38.94820482517113]
Test Case: 471 | Input/Output: [[-12.303059234400209 -69] -81.30305923440021]
Test Case: 472 | Input/Output: [[22.658129346769385 -34] -11.341870653230615]
Test Case: 473 | Input/Output: [[4.651159351768612 -82] -77.34884064823139]
Test Case: 474 | Input/Output: [[72.71843999862327 -67] 5.718439998623268]
Test Case: 475 | Input/Output: [[-57.027261843438005 -18] -75.027261843438]
Test Case: 476 | Input/Output: [[-44.40277376481803 -85] -129.40277376481802]
Test Case: 477 | Input/Output: [[14.855556154926688 41] 55.85555615492669]
Test Case: 478 | Input/Output: [[-53.30183719295014 -64] -117.30183719295013]
Test Case: 479 | Input/Output: [[92.55496696353936 -100] -7.445033036460643]
Test Case: 480 | Input/Output: [[38.942163187216295 -50] -11.057836812783705]
Test Case: 481 | Input/Output: [[-83.02116433042383 -47] -130.02116433042383]
Test Case: 482 | Input/Output: [[-80.79110554925187 -97] -177.79110554925188]
Test Case: 483 | Input/Output: [[-3.2527632699596722 -6] -9.252763269959672]
Test Case: 484 | Input/Output: [[79.9771621855977 56] 135.9771621855977]
Test Case: 485 | Input/Output: [[34.015717304518546 -91] -56.984282695481454]
Test Case: 486 | Input/Output: [[-83.43310741282136 26] -57.43310741282136]
Test Case: 487 | Input/Output: [[94.32742805500595 -43] 51.32742805500595]
Test Case: 488 | Input/Output: [[48.57757419225027 -33] 15.577574192250268]
Test Case: 489 | Input/Output: [[73.81104137317965 -42] 31.81104137317965]
Test Case: 490 | Input/Output: [[53.562870737095324 -6] 47.562870737095324]
Test Case: 491 | Input/Output: [[-28.947015649016535 -87] -115.94701564901654]
Test Case: 492 | Input/Output: [[39.38342777625178 -34] 5.383427776251779]
Test Case: 493 | Input/Output: [[35.773112629201535 64] 99.77311262920153]
Test Case: 494 | Input/Output: [[83.3517395661718 -6] 77.3517395661718]
Test Case: 495 | Input/Output: [[-32.453617536724295 3] -29.453617536724295]
Test Case: 496 | Input/Output: [[-68.37620884302473 -35] -103.37620884302473]
Test Case: 497 | Input/Output: [[44.623054497655545 66] 110.62305449765554]
Test Case: 498 | Input/Output: [[66.9259130614189 6] 72.9259130614189]
Test Case: 499 | Input/Output: [[-18.227827994035977 -77] -95.22782799403598]
Test Case: 500 | Input/Output: [[-22.812470499941 53] 30.187529500059]
Test Case: 501 | Input/Output: [[-32.198313160021016 83] 50.801686839978984]
Test Case: 502 | Input/Output: [[56.17344462681345 77] 133.17344462681345]
Test Case: 503 | Input/Output: [[-92.44824274382542 -66] -158.4482427438254]
Test Case: 504 | Input/Output: [[-49.33857687394616 -40] -89.33857687394615]
Test Case: 505 | Input/Output: [[89.91843021367131 -58] 31.918430213671314]
Test Case: 506 | Input/Output: [[-35.336781198397844 68] 32.663218801602156]
Test Case: 507 | Input/Output: [[61.08896469275723 94] 155.08896469275723]
Test Case: 508 | Input/Output: [[-29.239730418843052 6] -23.239730418843052]
Test Case: 509 | Input/Output: [[10.577757702813443 11] 21.577757702813443]
Test Case: 510 | Input/Output: [[-51.869706528464675 -51] -102.86970652846468]
Test Case: 511 | Input/Output: [[-74.37330444867186 -42] -116.37330444867186]
Test Case: 512 | Input/Output: [[-70.73517962471905 -10] -80.73517962471905]
Test Case: 513 | Input/Output: [[-45.70960874930239 -86] -131.7096087493024]
Test Case: 514 | Input/Output: [[58.706608340484706 45] 103.7066083404847]
Test Case: 515 | Input/Output: [[81.14248602017742 91] 172.14248602017742]
Test Case: 516 | Input/Output: [[-59.80596597601841 32] -27.805965976018413]
Test Case: 517 | Input/Output: [[-93.03377353475912 -88] -181.03377353475912]
Test Case: 518 | Input/Output: [[33.62685785630842 19] 52.62685785630842]
Test Case: 519 | Input/Output: [[89.02680779739322 -81] 8.026807797393218]
Test Case: 520 | Input/Output: [[85.53676100467646 -93] -7.463238995323536]
Test Case: 521 | Input/Output: [[80.21796485402425 -60] 20.217964854024245]
Test Case: 522 | Input/Output: [[-16.11796324320845 56] 39.88203675679155]
Test Case: 523 | Input/Output: [[-4.436947783808137 -85] -89.43694778380814]
Test Case: 524 | Input/Output: [[45.41804278756209 68] 113.41804278756209]
Test Case: 525 | Input/Output: [[14.79419105435052 77] 91.79419105435052]
Test Case: 526 | Input/Output: [[-64.83965068890538 -28] -92.83965068890538]
Test Case: 527 | Input/Output: [[85.62658425306125 -40] 45.62658425306125]
Test Case: 528 | Input/Output: [[62.204107178948874 -74] -11.795892821051126]
Test Case: 529 | Input/Output: [[-60.78408308701715 -72] -132.78408308701717]
Test Case: 530 | Input/Output: [[-76.09098557741274 94] 17.909014422587262]
Test Case: 531 | Input/Output: [[-64.94425703689691 54] -10.944257036896914]
Test Case: 532 | Input/Output: [[9.912662148577382 -5] 4.9126621485773825]
Test Case: 533 | Input/Output: [[-35.85791313635629 -70] -105.85791313635629]
Test Case: 534 | Input/Output: [[20.507657133193476 19] 39.507657133193476]
Test Case: 535 | Input/Output: [[-93.43501210884418 -92] -185.43501210884418]
Test Case: 536 | Input/Output: [[-78.54030112399599 70] -8.540301123995988]
Test Case: 537 | Input/Output: [[58.26986741085477 71] 129.26986741085477]
Test Case: 538 | Input/Output: [[29.505728042263343 84] 113.50572804226334]
Test Case: 539 | Input/Output: [[87.17662731142391 51] 138.1766273114239]
Test Case: 540 | Input/Output: [[96.00099753080474 92] 188.00099753080474]
Test Case: 541 | Input/Output: [[47.03167514387698 -55] -7.968324856123019]
Test Case: 542 | Input/Output: [[77.07717755726944 32] 109.07717755726944]
Test Case: 543 | Input/Output: [[-24.30565292512057 -86] -110.30565292512057]
Test Case: 544 | Input/Output: [[-6.386729908900747 -26] -32.38672990890075]
Test Case: 545 | Input/Output: [[40.98149103340583 27] 67.98149103340583]
Test Case: 546 | Input/Output: [[-38.01871834139246 87] 48.98128165860754]
Test Case: 547 | Input/Output: [[73.669935966987 3] 76.669935966987]
Test Case: 548 | Input/Output: [[-50.43691061224542 36] -14.43691061224542]
Test Case: 549 | Input/Output: [[-33.32113657557957 11] -22.321136575579573]
Test Case: 550 | Input/Output: [[-76.24264610172213 11] -65.24264610172213]
Test Case: 551 | Input/Output: [[41.38544963930411 35] 76.38544963930411]
Test Case: 552 | Input/Output: [[-50.83077120045698 -34] -84.83077120045698]
Test Case: 553 | Input/Output: [[-40.46177948837546 1] -39.46177948837546]
Test Case: 554 | Input/Output: [[-44.559944187393484 -100] -144.55994418739348]
Test Case: 555 | Input/Output: [[-61.99081516543128 81] 19.00918483456872]
Test Case: 556 | Input/Output: [[-94.61307506874424 -47] -141.61307506874425]
Test Case: 557 | Input/Output: [[86.21762544216932 77] 163.21762544216932]
Test Case: 558 | Input/Output: [[-0.5504295039165896 46] 45.44957049608341]
Test Case: 559 | Input/Output: [[85.0228244082187 77] 162.0228244082187]
Test Case: 560 | Input/Output: [[-30.937461710186483 -58] -88.93746171018648]
Test Case: 561 | Input/Output: [[-12.35469719276125 -2] -14.35469719276125]
Test Case: 562 | Input/Output: [[-20.628636578244496 61] 40.371363421755504]
Test Case: 563 | Input/Output: [[-11.486285710289195 21] 9.513714289710805]
Test Case: 564 | Input/Output: [[-78.52962980688358 36] -42.52962980688358]
Test Case: 565 | Input/Output: [[-73.8236131375358 -92] -165.8236131375358]
Test Case: 566 | Input/Output: [[-24.067289049507295 77] 52.932710950492705]
Test Case: 567 | Input/Output: [[-26.743170388583977 35] 8.256829611416023]
Test Case: 568 | Input/Output: [[-16.61188326539964 52] 35.38811673460036]
Test Case: 569 | Input/Output: [[61.06810344450636 -42] 19.068103444506363]
Test Case: 570 | Input/Output: [[93.60998039937829 91] 184.6099803993783]
Test Case: 571 | Input/Output: [[79.30166506646685 -4] 75.30166506646685]
Test Case: 572 | Input/Output: [[-69.4276541542741 -95] -164.42765415427408]
Test Case: 573 | Input/Output: [[-48.687741069638555 -29] -77.68774106963855]
Test Case: 574 | Input/Output: [[89.83727942941618 65] 154.83727942941618]
Test Case: 575 | Input/Output: [[-0.8809258884486866 100] 99.11907411155131]
Test Case: 576 | Input/Output: [[61.789160728828875 -12] 49.789160728828875]
Test Case: 577 | Input/Output: [[-39.37625139088197 18] -21.37625139088197]
Test Case: 578 | Input/Output: [[63.60250409066015 -21] 42.60250409066015]
Test Case: 579 | Input/Output: [[70.05180019184832 51] 121.05180019184832]
Test Case: 580 | Input/Output: [[-43.028228234543484 50] 6.971771765456516]
Test Case: 581 | Input/Output: [[-3.4512056708500864 -3] -6.4512056708500864]
Test Case: 582 | Input/Output: [[-66.49656646682524 21] -45.49656646682524]
Test Case: 583 | Input/Output: [[-33.967363392111 -45] -78.967363392111]
Test Case: 584 | Input/Output: [[5.2428091447524565 -77] -71.75719085524754]
Test Case: 585 | Input/Output: [[-66.18175038253074 40] -26.181750382530737]
Test Case: 586 | Input/Output: [[13.785208426362175 14] 27.785208426362175]
Test Case: 587 | Input/Output: [[43.3224186889673 10] 53.3224186889673]
Test Case: 588 | Input/Output: [[77.31545406083217 -4] 73.31545406083217]
Test Case: 589 | Input/Output: [[-96.82317096826986 24] -72.82317096826986]
Test Case: 590 | Input/Output: [[-68.24598794472897 -54] -122.24598794472897]
Test Case: 591 | Input/Output: [[32.398495841451904 51] 83.3984958414519]
Test Case: 592 | Input/Output: [[-75.82493799770225 69] -6.82493799770225]
Test Case: 593 | Input/Output: [[-64.94292857063061 88] 23.057071429369387]
Test Case: 594 | Input/Output: [[69.51620330098615 -98] -28.48379669901385]
Test Case: 595 | Input/Output: [[-41.545260227718 42] 0.4547397722819966]
Test Case: 596 | Input/Output: [[-13.795528418550845 -66] -79.79552841855084]
Test Case: 597 | Input/Output: [[-64.6921067775159 95] 30.307893222484097]
Test Case: 598 | Input/Output: [[2.895440847951619 -97] -94.10455915204838]
Test Case: 599 | Input/Output: [[95.18516407137571 -39] 56.18516407137571]
Test Case: 600 | Input/Output: [[-38.04061495731999 61] 22.95938504268001]
Test Case: 601 | Input/Output: [[-95.81658858361143 -89] -184.81658858361143]
Test Case: 602 | Input/Output: [[-72.8205779661282 24] -48.8205779661282]
Test Case: 603 | Input/Output: [[66.05388334829735 -47] 19.053883348297347]
Test Case: 604 | Input/Output: [[-79.42861380060154 44] -35.42861380060154]
Test Case: 605 | Input/Output: [[-64.39753384946988 81] 16.60246615053012]
Test Case: 606 | Input/Output: [[-91.84142057888542 90] -1.841420578885419]
Test Case: 607 | Input/Output: [[58.84013268225738 -95] -36.15986731774262]
Test Case: 608 | Input/Output: [[-8.67582875060009 -35] -43.67582875060009]
Test Case: 609 | Input/Output: [[-41.51427786102666 -61] -102.51427786102667]
Test Case: 610 | Input/Output: [[54.80438435991272 -11] 43.80438435991272]
Test Case: 611 | Input/Output: [[66.37530016640031 -75] -8.624699833599692]
Test Case: 612 | Input/Output: [[-44.021923275066484 -100] -144.02192327506648]
Test Case: 613 | Input/Output: [[-9.834470740197105 -24] -33.834470740197105]
Test Case: 614 | Input/Output: [[72.70686653456386 73] 145.70686653456386]
Test Case: 615 | Input/Output: [[57.308309947903865 5] 62.308309947903865]
Test Case: 616 | Input/Output: [[-95.23983128522941 -3] -98.23983128522941]
Test Case: 617 | Input/Output: [[20.8874477470862 -56] -35.1125522529138]
Test Case: 618 | Input/Output: [[-22.174066238652387 -38] -60.17406623865239]
Test Case: 619 | Input/Output: [[-15.69964443229621 16] 0.30035556770378946]
Test Case: 620 | Input/Output: [[17.293847765217535 25] 42.293847765217535]
Test Case: 621 | Input/Output: [[-83.13480641997266 -6] -89.13480641997266]
Test Case: 622 | Input/Output: [[-22.891104951685122 54] 31.108895048314878]
Test Case: 623 | Input/Output: [[-39.693246339458945 93] 53.306753660541055]
Test Case: 624 | Input/Output: [[49.568428163621206 -30] 19.568428163621206]
Test Case: 625 | Input/Output: [[-40.02437236252121 -75] -115.0243723625212]
Test Case: 626 | Input/Output: [[-39.23002062951173 -3] -42.23002062951173]
Test Case: 627 | Input/Output: [[-35.93555936511903 100] 64.06444063488097]
Test Case: 628 | Input/Output: [[-9.191181105357444 83] 73.80881889464256]
Test Case: 629 | Input/Output: [[-33.48276108776777 -97] -130.48276108776776]
Test Case: 630 | Input/Output: [[-88.26518782159447 77] -11.265187821594466]
Test Case: 631 | Input/Output: [[53.14219388590638 -39] 14.14219388590638]
Test Case: 632 | Input/Output: [[-59.2332422279833 81] 21.766757772016703]
Test Case: 633 | Input/Output: [[-46.481134062975784 41] -5.481134062975784]
Test Case: 634 | Input/Output: [[56.063259181676926 -78] -21.936740818323074]
Test Case: 635 | Input/Output: [[-24.429646073459992 -95] -119.42964607345999]
Test Case: 636 | Input/Output: [[-18.9384314675263 -93] -111.9384314675263]
Test Case: 637 | Input/Output: [[12.117056287242306 80] 92.1170562872423]
Test Case: 638 | Input/Output: [[29.752837053132993 22] 51.75283705313299]
Test Case: 639 | Input/Output: [[91.25663394008649 -80] 11.256633940086488]
Test Case: 640 | Input/Output: [[92.83871303561006 -88] 4.838713035610056]
Test Case: 641 | Input/Output: [[74.67421877312648 -33] 41.67421877312648]
Test Case: 642 | Input/Output: [[73.07320572327751 36] 109.07320572327751]
Test Case: 643 | Input/Output: [[65.01237261018747 -12] 53.01237261018747]
Test Case: 644 | Input/Output: [[21.48114305034659 61] 82.48114305034659]
Test Case: 645 | Input/Output: [[86.47554173565567 -14] 72.47554173565567]
Test Case: 646 | Input/Output: [[-97.19678892955952 -100] -197.19678892955952]
Test Case: 647 | Input/Output: [[91.9414638592319 53] 144.9414638592319]
Test Case: 648 | Input/Output: [[-43.802816038705686 23] -20.802816038705686]
Test Case: 649 | Input/Output: [[27.0246222098464 29] 56.0246222098464]
Test Case: 650 | Input/Output: [[-68.44194298037733 -85] -153.44194298037735]
Test Case: 651 | Input/Output: [[-57.60406290972462 94] 36.39593709027538]
Test Case: 652 | Input/Output: [[-25.01848444444323 18] -7.0184844444432315]
Test Case: 653 | Input/Output: [[-86.49411750463345 73] -13.49411750463345]
Test Case: 654 | Input/Output: [[16.326282292429212 75] 91.32628229242921]
Test Case: 655 | Input/Output: [[71.35914545433303 -2] 69.35914545433303]
Test Case: 656 | Input/Output: [[-37.706650129618865 19] -18.706650129618865]
Test Case: 657 | Input/Output: [[94.34820761316101 11] 105.34820761316101]
Test Case: 658 | Input/Output: [[30.998693483697764 42] 72.99869348369776]
Test Case: 659 | Input/Output: [[-66.18298443815019 -94] -160.18298443815019]
Test Case: 660 | Input/Output: [[-34.77151646712369 12] -22.77151646712369]
Test Case: 661 | Input/Output: [[24.264754025336828 -26] -1.7352459746631723]
Test Case: 662 | Input/Output: [[-28.735160564333697 -17] -45.7351605643337]
Test Case: 663 | Input/Output: [[-73.96490376446228 71] -2.964903764462278]
Test Case: 664 | Input/Output: [[-27.94800689994817 0] -27.94800689994817]
Test Case: 665 | Input/Output: [[71.0503259701344 41] 112.0503259701344]
Test Case: 666 | Input/Output: [[-23.109531199328288 12] -11.109531199328288]
Test Case: 667 | Input/Output: [[-84.78772888824047 -39] -123.78772888824047]
Test Case: 668 | Input/Output: [[55.4347535417528 89] 144.4347535417528]
Test Case: 669 | Input/Output: [[-55.764387805571445 52] -3.7643878055714453]
Test Case: 670 | Input/Output: [[-97.89750709153996 30] -67.89750709153996]
Test Case: 671 | Input/Output: [[-27.320510576412318 6] -21.320510576412318]
Test Case: 672 | Input/Output: [[59.156382204471214 -19] 40.156382204471214]
Test Case: 673 | Input/Output: [[-59.34154867152985 -22] -81.34154867152985]
Test Case: 674 | Input/Output: [[74.46756158875368 88] 162.46756158875368]
Test Case: 675 | Input/Output: [[-71.60807811616081 50] -21.60807811616081]
Test Case: 676 | Input/Output: [[-85.6155447131681 4] -81.6155447131681]
Test Case: 677 | Input/Output: [[0.7673656529906481 25] 25.767365652990648]
Test Case: 678 | Input/Output: [[89.65115613050628 24] 113.65115613050628]
Test Case: 679 | Input/Output: [[-59.807880317821514 -8] -67.80788031782151]
Test Case: 680 | Input/Output: [[46.70569630134693 -44] 2.705696301346933]
Test Case: 681 | Input/Output: [[67.78603219878408 -97] -29.213967801215915]
Test Case: 682 | Input/Output: [[-17.413794802574216 -37] -54.413794802574216]
Test Case: 683 | Input/Output: [[-81.01551526889799 31] -50.015515268897985]
Test Case: 684 | Input/Output: [[-52.37339547386188 72] 19.626604526138117]
Test Case: 685 | Input/Output: [[-29.336669635707963 35] 5.663330364292037]
Test Case: 686 | Input/Output: [[-73.45373421676722 44] -29.453734216767216]
Test Case: 687 | Input/Output: [[-53.87369234862809 -24] -77.87369234862808]
Test Case: 688 | Input/Output: [[76.88703646724869 79] 155.8870364672487]
Test Case: 689 | Input/Output: [[-35.34243924759113 -20] -55.34243924759113]
Test Case: 690 | Input/Output: [[-77.71371156989414 -81] -158.71371156989414]
Test Case: 691 | Input/Output: [[-56.54284321688004 27] -29.542843216880037]
Test Case: 692 | Input/Output: [[-61.05958154019247 1] -60.05958154019247]
Test Case: 693 | Input/Output: [[-35.55967928936981 100] 64.44032071063019]
Test Case: 694 | Input/Output: [[-44.61205394906615 -44] -88.61205394906615]
Test Case: 695 | Input/Output: [[-93.13976342690597 17] -76.13976342690597]
Test Case: 696 | Input/Output: [[59.116928619745806 -76] -16.883071380254194]
Test Case: 697 | Input/Output: [[80.5742544507678 7] 87.5742544507678]
Test Case: 698 | Input/Output: [[-52.44084058168292 16] -36.44084058168292]
Test Case: 699 | Input/Output: [[-90.16216949540971 -72] -162.16216949540973]
Test Case: 700 | Input/Output: [[43.70157881016772 -57] -13.298421189832283]
Test Case: 701 | Input/Output: [[19.002357733960267 66] 85.00235773396027]
Test Case: 702 | Input/Output: [[-78.96547560384855 -37] -115.96547560384855]
Test Case: 703 | Input/Output: [[-61.96639806121289 -57] -118.96639806121289]
Test Case: 704 | Input/Output: [[79.31844210371469 -15] 64.31844210371469]
Test Case: 705 | Input/Output: [[69.20930199249207 70] 139.20930199249207]
Test Case: 706 | Input/Output: [[-50.01274752885199 -56] -106.01274752885199]
Test Case: 707 | Input/Output: [[-60.30105570181799 50] -10.301055701817987]
Test Case: 708 | Input/Output: [[-74.73015682586686 19] -55.73015682586686]
Test Case: 709 | Input/Output: [[32.63523891044662 -86] -53.36476108955338]
Test Case: 710 | Input/Output: [[94.57748218082119 -3] 91.57748218082119]
Test Case: 711 | Input/Output: [[71.77107026720117 3] 74.77107026720117]
Test Case: 712 | Input/Output: [[-92.91208775822324 49] -43.91208775822324]
Test Case: 713 | Input/Output: [[77.38719652976559 13] 90.38719652976559]
Test Case: 714 | Input/Output: [[65.29568765088999 -76] -10.704312349110012]
Test Case: 715 | Input/Output: [[89.7583697265598 32] 121.7583697265598]
Test Case: 716 | Input/Output: [[-15.693840719932254 -72] -87.69384071993225]
Test Case: 717 | Input/Output: [[-67.18981695255923 71] 3.8101830474407734]
Test Case: 718 | Input/Output: [[72.54975752271989 57] 129.5497575227199]
Test Case: 719 | Input/Output: [[56.51896940356605 99] 155.51896940356605]
Test Case: 720 | Input/Output: [[64.75083067585811 -57] 7.750830675858111]
Test Case: 721 | Input/Output: [[61.33089393049727 -89] -27.66910606950273]
Test Case: 722 | Input/Output: [[-65.77561264414018 -76] -141.77561264414018]
Test Case: 723 | Input/Output: [[7.277007637612101 -40] -32.7229923623879]
Test Case: 724 | Input/Output: [[-99.18215025815951 -96] -195.1821502581595]
Test Case: 725 | Input/Output: [[-86.65499825773408 -93] -179.65499825773406]
Test Case: 726 | Input/Output: [[-88.11328425408007 77] -11.113284254080071]
Test Case: 727 | Input/Output: [[-84.35006456561118 66] -18.350064565611177]
Test Case: 728 | Input/Output: [[83.12580352114244 49] 132.12580352114244]
Test Case: 729 | Input/Output: [[51.90682549637643 -82] -30.093174503623572]
Test Case: 730 | Input/Output: [[12.49917620046108 -89] -76.50082379953892]
Test Case: 731 | Input/Output: [[1.272219522804079 -11] -9.727780477195921]
Test Case: 732 | Input/Output: [[47.24558936873339 -52] -4.754410631266609]
Test Case: 733 | Input/Output: [[-54.646647184097304 -15] -69.6466471840973]
Test Case: 734 | Input/Output: [[26.49996738884235 -83] -56.50003261115765]
Test Case: 735 | Input/Output: [[-51.977209965751435 -55] -106.97720996575143]
Test Case: 736 | Input/Output: [[-94.3279193317035 -52] -146.3279193317035]
Test Case: 737 | Input/Output: [[87.53853182098234 -16] 71.53853182098234]
Test Case: 738 | Input/Output: [[-39.528937172361836 45] 5.471062827638164]
Test Case: 739 | Input/Output: [[43.461699315019814 52] 95.46169931501981]
Test Case: 740 | Input/Output: [[-42.18785323399483 -58] -100.18785323399483]
Test Case: 741 | Input/Output: [[-16.541293642317314 -38] -54.541293642317314]
Test Case: 742 | Input/Output: [[61.897713208776054 -35] 26.897713208776054]
Test Case: 743 | Input/Output: [[-93.85451955013966 -58] -151.85451955013966]
Test Case: 744 | Input/Output: [[43.012968249834444 -68] -24.987031750165556]
Test Case: 745 | Input/Output: [[-18.96419481809015 65] 46.03580518190985]
Test Case: 746 | Input/Output: [[-18.616248566951768 -2] -20.616248566951768]
Test Case: 747 | Input/Output: [[99.90671216198578 21] 120.90671216198578]
Test Case: 748 | Input/Output: [[14.010105692663828 53] 67.01010569266383]
Test Case: 749 | Input/Output: [[24.722421201759687 15] 39.72242120175969]
Test Case: 750 | Input/Output: [[30.07025801697901 -46] -15.929741983020989]
Test Case: 751 | Input/Output: [[-86.0075938611682 50] -36.0075938611682]
Test Case: 752 | Input/Output: [[41.99058252850861 -84] -42.00941747149139]
Test Case: 753 | Input/Output: [[73.43583452925071 36] 109.43583452925071]
Test Case: 754 | Input/Output: [[-83.34801805259283 -16] -99.34801805259283]
Test Case: 755 | Input/Output: [[-18.97334811945754 -7] -25.97334811945754]
Test Case: 756 | Input/Output: [[38.721133302751014 65] 103.72113330275101]
Test Case: 757 | Input/Output: [[29.35742657479338 -45] -15.64257342520662]
Test Case: 758 | Input/Output: [[15.016579427212434 -49] -33.983420572787566]
Test Case: 759 | Input/Output: [[-71.68610793362666 -47] -118.68610793362666]
Test Case: 760 | Input/Output: [[-49.802226637110735 -88] -137.80222663711072]
Test Case: 761 | Input/Output: [[-23.498668414568158 -76] -99.49866841456816]
Test Case: 762 | Input/Output: [[-47.961794805826585 -34] -81.96179480582659]
Test Case: 763 | Input/Output: [[-27.704588542524462 25] -2.704588542524462]
Test Case: 764 | Input/Output: [[-72.41073585651252 61] -11.410735856512517]
Test Case: 765 | Input/Output: [[-17.226092022572885 -31] -48.226092022572885]
Test Case: 766 | Input/Output: [[63.77902277528159 34] 97.77902277528159]
Test Case: 767 | Input/Output: [[-11.757210735470295 -27] -38.757210735470295]
Test Case: 768 | Input/Output: [[57.44939347478851 -75] -17.550606525211492]
Test Case: 769 | Input/Output: [[80.9966369924746 -85] -4.003363007525394]
Test Case: 770 | Input/Output: [[65.98459261198144 62] 127.98459261198144]
Test Case: 771 | Input/Output: [[-73.82529044069513 0] -73.82529044069513]
Test Case: 772 | Input/Output: [[20.183969847991605 89] 109.1839698479916]
Test Case: 773 | Input/Output: [[73.95904706655833 -28] 45.95904706655833]
Test Case: 774 | Input/Output: [[-32.965903537421454 90] 57.034096462578546]
Test Case: 775 | Input/Output: [[26.407420040669876 88] 114.40742004066988]
Test Case: 776 | Input/Output: [[82.0530749489017 42] 124.0530749489017]
Test Case: 777 | Input/Output: [[76.76541501275426 11] 87.76541501275426]
Test Case: 778 | Input/Output: [[15.540014487393464 -71] -55.459985512606536]
Test Case: 779 | Input/Output: [[-94.8864638153924 -80] -174.8864638153924]
Test Case: 780 | Input/Output: [[-99.57209828632412 -65] -164.57209828632412]
Test Case: 781 | Input/Output: [[15.544179415028808 9] 24.544179415028808]
Test Case: 782 | Input/Output: [[52.723825530249115 70] 122.72382553024912]
Test Case: 783 | Input/Output: [[-43.784506175247074 -70] -113.78450617524707]
Test Case: 784 | Input/Output: [[15.388428460981245 -6] 9.388428460981245]
Test Case: 785 | Input/Output: [[-6.655706413078406 39] 32.344293586921594]
Test Case: 786 | Input/Output: [[-76.7930821923073 -94] -170.79308219230728]
Test Case: 787 | Input/Output: [[-83.11381669701284 -79] -162.11381669701285]
Test Case: 788 | Input/Output: [[96.91625677564812 65] 161.91625677564812]
Test Case: 789 | Input/Output: [[-22.740405383104203 22] -0.7404053831042035]
Test Case: 790 | Input/Output: [[99.77532882116401 -92] 7.77532882116401]
Test Case: 791 | Input/Output: [[-27.275466824992108 71] 43.72453317500789]
Test Case: 792 | Input/Output: [[-66.37093444994537 -54] -120.37093444994537]
Test Case: 793 | Input/Output: [[84.28891018955679 47] 131.2889101895568]
Test Case: 794 | Input/Output: [[-58.90793903241482 72] 13.092060967585176]
Test Case: 795 | Input/Output: [[11.513292850643523 -87] -75.48670714935648]
Test Case: 796 | Input/Output: [[56.86973332824732 18] 74.86973332824732]
Test Case: 797 | Input/Output: [[-82.57701704427967 -48] -130.57701704427967]
Test Case: 798 | Input/Output: [[-83.91022227077812 -26] -109.91022227077812]
Test Case: 799 | Input/Output: [[22.056391705311327 -2] 20.056391705311327]
Test Case: 800 | Input/Output: [[42.95859203181283 25] 67.95859203181283]
Test Case: 801 | Input/Output: [[-82.6200326103632 -68] -150.62003261036318]
Test Case: 802 | Input/Output: [[-48.9152992750242 31] -17.915299275024203]
Test Case: 803 | Input/Output: [[-67.61871704394424 52] -15.618717043944244]
Test Case: 804 | Input/Output: [[18.332466153431668 -78] -59.66753384656833]
Test Case: 805 | Input/Output: [[-73.8731012896269 -15] -88.8731012896269]
Test Case: 806 | Input/Output: [[78.27534070458336 -100] -21.724659295416643]
Test Case: 807 | Input/Output: [[26.29004538874615 53] 79.29004538874615]
Test Case: 808 | Input/Output: [[-96.39881267113384 -9] -105.39881267113384]
Test Case: 809 | Input/Output: [[60.132781221869436 -11] 49.132781221869436]
Test Case: 810 | Input/Output: [[-34.85727829883383 -23] -57.85727829883383]
Test Case: 811 | Input/Output: [[-52.01486099921666 50] -2.0148609992166584]
Test Case: 812 | Input/Output: [[-90.89036923841907 81] -9.89036923841907]
Test Case: 813 | Input/Output: [[-40.58649859005163 -99] -139.58649859005163]
Test Case: 814 | Input/Output: [[82.83122575156355 43] 125.83122575156355]
Test Case: 815 | Input/Output: [[55.76198065435699 -64] -8.23801934564301]
Test Case: 816 | Input/Output: [[71.21722680863289 98] 169.2172268086329]
Test Case: 817 | Input/Output: [[-57.51010518734145 43] -14.510105187341452]
Test Case: 818 | Input/Output: [[-35.528875208009254 75] 39.471124791990746]
Test Case: 819 | Input/Output: [[98.69609037197137 -99] -0.3039096280286344]
Test Case: 820 | Input/Output: [[37.538541479210465 -35] 2.5385414792104655]
Test Case: 821 | Input/Output: [[-8.603572504806905 -52] -60.603572504806905]
Test Case: 822 | Input/Output: [[-35.73675235884524 -27] -62.73675235884524]
Test Case: 823 | Input/Output: [[56.27769434150301 77] 133.277694341503]
Test Case: 824 | Input/Output: [[-59.67501263076833 37] -22.67501263076833]
Test Case: 825 | Input/Output: [[64.71935400446557 53] 117.71935400446557]
Test Case: 826 | Input/Output: [[-25.688090620901207 -77] -102.6880906209012]
Test Case: 827 | Input/Output: [[57.9344371689229 85] 142.9344371689229]
Test Case: 828 | Input/Output: [[-8.632963864439418 94] 85.36703613556058]
Test Case: 829 | Input/Output: [[-53.12988873727971 1] -52.12988873727971]
Test Case: 830 | Input/Output: [[-87.22313874840918 -93] -180.22313874840918]
Test Case: 831 | Input/Output: [[65.52949053651028 9] 74.52949053651028]
Test Case: 832 | Input/Output: [[92.21886085588469 66] 158.21886085588469]
Test Case: 833 | Input/Output: [[-3.9710134837635565 -45] -48.97101348376356]
Test Case: 834 | Input/Output: [[-35.75820025615843 71] 35.24179974384157]
Test Case: 835 | Input/Output: [[38.523258154040434 65] 103.52325815404043]
Test Case: 836 | Input/Output: [[-77.80387918943941 38] -39.803879189439414]
Test Case: 837 | Input/Output: [[29.21686364812706 63] 92.21686364812706]
Test Case: 838 | Input/Output: [[-84.8255892849516 90] 5.174410715048396]
Test Case: 839 | Input/Output: [[79.23866665846785 -40] 39.23866665846785]
Test Case: 840 | Input/Output: [[-2.8478632702630478 61] 58.15213672973695]
Test Case: 841 | Input/Output: [[-11.974293088104048 -19] -30.974293088104048]
Test Case: 842 | Input/Output: [[-12.865322452715347 62] 49.13467754728465]
Test Case: 843 | Input/Output: [[-13.52798395232196 -22] -35.52798395232196]
Test Case: 844 | Input/Output: [[-67.74323582172457 60] -7.743235821724568]
Test Case: 845 | Input/Output: [[-6.985149087369152 1] -5.985149087369152]
Test Case: 846 | Input/Output: [[64.25027615011768 -65] -0.7497238498823151]
Test Case: 847 | Input/Output: [[-38.99277841771549 -90] -128.9927784177155]
Test Case: 848 | Input/Output: [[43.50166299385256 -86] -42.49833700614744]
Test Case: 849 | Input/Output: [[-62.633430550709 -93] -155.633430550709]
Test Case: 850 | Input/Output: [[-90.31388397070015 3] -87.31388397070015]
Test Case: 851 | Input/Output: [[-27.43725003865596 51] 23.56274996134404]
Test Case: 852 | Input/Output: [[8.216777908150036 79] 87.21677790815004]
Test Case: 853 | Input/Output: [[-56.248568555661095 -31] -87.2485685556611]
Test Case: 854 | Input/Output: [[-29.094041204783252 2] -27.094041204783252]
Test Case: 855 | Input/Output: [[-12.337624278968164 -50] -62.337624278968164]
Test Case: 856 | Input/Output: [[56.427127228073914 -19] 37.427127228073914]
Test Case: 857 | Input/Output: [[-52.78800496642617 -78] -130.78800496642617]
Test Case: 858 | Input/Output: [[71.38067669371804 92] 163.38067669371804]
Test Case: 859 | Input/Output: [[99.30258971248028 -63] 36.302589712480284]
Test Case: 860 | Input/Output: [[86.69900642731244 -42] 44.69900642731244]
Test Case: 861 | Input/Output: [[-82.10164343115736 -84] -166.10164343115736]
Test Case: 862 | Input/Output: [[-99.3504530029037 -9] -108.3504530029037]
Test Case: 863 | Input/Output: [[13.57891287311601 -53] -39.42108712688399]
Test Case: 864 | Input/Output: [[-13.158241164162703 45] 31.841758835837297]
Test Case: 865 | Input/Output: [[66.5027870304545 -59] 7.502787030454499]
Test Case: 866 | Input/Output: [[91.89415097218026 15] 106.89415097218026]
Test Case: 867 | Input/Output: [[-53.53870196483494 37] -16.538701964834942]
Test Case: 868 | Input/Output: [[-69.29191210915883 -35] -104.29191210915883]
Test Case: 869 | Input/Output: [[24.018096456007058 33] 57.01809645600706]
Test Case: 870 | Input/Output: [[67.31766441483919 63] 130.3176644148392]
Test Case: 871 | Input/Output: [[-16.688642520247328 33] 16.311357479752672]
Test Case: 872 | Input/Output: [[-61.42170637031676 88] 26.578293629683237]
Test Case: 873 | Input/Output: [[10.214176883683962 24] 34.21417688368396]
Test Case: 874 | Input/Output: [[78.1669239258583 -92] -13.833076074141701]
Test Case: 875 | Input/Output: [[14.297578468680115 90] 104.29757846868011]
Test Case: 876 | Input/Output: [[71.53778014317041 39] 110.53778014317041]
Test Case: 877 | Input/Output: [[64.80013786176954 -6] 58.80013786176954]
Test Case: 878 | Input/Output: [[-25.340170787194978 -31] -56.34017078719498]
Test Case: 879 | Input/Output: [[-4.390459481315318 -37] -41.39045948131532]
Test Case: 880 | Input/Output: [[-28.493637555765616 66] 37.506362444234384]
Test Case: 881 | Input/Output: [[70.81763605992205 7] 77.81763605992205]
Test Case: 882 | Input/Output: [[-71.4702072130975 -42] -113.4702072130975]
Test Case: 883 | Input/Output: [[-53.27828885738748 75] 21.72171114261252]
Test Case: 884 | Input/Output: [[30.139091149137073 54] 84.13909114913707]
Test Case: 885 | Input/Output: [[19.32216194584842 49] 68.32216194584842]
Test Case: 886 | Input/Output: [[45.45394084159818 92] 137.45394084159818]
Test Case: 887 | Input/Output: [[-75.21097317606764 11] -64.21097317606764]
Test Case: 888 | Input/Output: [[-40.19150203940964 -83] -123.19150203940964]
Test Case: 889 | Input/Output: [[-89.68318893257872 44] -45.683188932578716]
Test Case: 890 | Input/Output: [[62.70625828339206 88] 150.70625828339206]
Test Case: 891 | Input/Output: [[-69.58646090081552 39] -30.586460900815524]
Test Case: 892 | Input/Output: [[-50.27680220473532 2] -48.27680220473532]
Test Case: 893 | Input/Output: [[75.9110280404397 51] 126.9110280404397]
Test Case: 894 | Input/Output: [[-68.35576771117749 48] -20.355767711177492]
Test Case: 895 | Input/Output: [[-94.17294778856167 35] -59.17294778856167]
Test Case: 896 | Input/Output: [[-17.114095866329393 58] 40.88590413367061]
Test Case: 897 | Input/Output: [[-27.61883383188868 84] 56.38116616811132]
Test Case: 898 | Input/Output: [[21.261352945545738 31] 52.26135294554574]
Test Case: 899 | Input/Output: [[31.28324595060485 -96] -64.71675404939515]
Test Case: 900 | Input/Output: [[-53.39063301572076 71] 17.60936698427924]
Test Case: 901 | Input/Output: [[-67.28150628729239 63] -4.2815062872923875]
Test Case: 902 | Input/Output: [[-95.34052949567322 -21] -116.34052949567322]
Test Case: 903 | Input/Output: [[3.653698572661952 -27] -23.346301427338048]
Test Case: 904 | Input/Output: [[-35.020237533433246 17] -18.020237533433246]
Test Case: 905 | Input/Output: [[-47.23022232620671 0] -47.23022232620671]
Test Case: 906 | Input/Output: [[1.0430551000886652 6] 7.043055100088665]
Test Case: 907 | Input/Output: [[59.97244953608603 -73] -13.027550463913968]
Test Case: 908 | Input/Output: [[-61.984269354538625 85] 23.015730645461375]
Test Case: 909 | Input/Output: [[99.11228584079615 -43] 56.11228584079615]
Test Case: 910 | Input/Output: [[34.56705842280735 14] 48.56705842280735]
Test Case: 911 | Input/Output: [[20.452445459815323 40] 60.45244545981532]
Test Case: 912 | Input/Output: [[-76.29786844319767 -93] -169.29786844319767]
Test Case: 913 | Input/Output: [[0.7104971913425544 -52] -51.289502808657446]
Test Case: 914 | Input/Output: [[47.29776824821394 -4] 43.29776824821394]
Test Case: 915 | Input/Output: [[13.932897693116715 99] 112.93289769311671]
Test Case: 916 | Input/Output: [[69.07470190848088 81] 150.07470190848088]
Test Case: 917 | Input/Output: [[16.74065980029178 83] 99.74065980029178]
Test Case: 918 | Input/Output: [[6.023646107348952 17] 23.023646107348952]
Test Case: 919 | Input/Output: [[-75.0845265766823 -26] -101.0845265766823]
Test Case: 920 | Input/Output: [[-61.726629329959806 71] 9.273370670040194]
Test Case: 921 | Input/Output: [[-56.48527415455364 -23] -79.48527415455365]
Test Case: 922 | Input/Output: [[8.349283425874063 -5] 3.349283425874063]
Test Case: 923 | Input/Output: [[-32.11860735764229 52] 19.88139264235771]
Test Case: 924 | Input/Output: [[5.3044931974058045 76] 81.3044931974058]
Test Case: 925 | Input/Output: [[-98.86156995905375 43] -55.86156995905375]
Test Case: 926 | Input/Output: [[42.67312808731012 0] 42.67312808731012]
Test Case: 927 | Input/Output: [[57.2350693292947 83] 140.2350693292947]
Test Case: 928 | Input/Output: [[-31.999398744128 10] -21.999398744128]
Test Case: 929 | Input/Output: [[-31.38408423181565 47] 15.615915768184351]
Test Case: 930 | Input/Output: [[-9.732345568339042 74] 64.26765443166096]
Test Case: 931 | Input/Output: [[-45.72174223124825 92] 46.27825776875175]
Test Case: 932 | Input/Output: [[-1.4708904310839728 0] -1.4708904310839728]
Test Case: 933 | Input/Output: [[-50.554776933793 80] 29.445223066207]
Test Case: 934 | Input/Output: [[2.1087196005544087 79] 81.10871960055441]
Test Case: 935 | Input/Output: [[69.85729293227584 25] 94.85729293227584]
Test Case: 936 | Input/Output: [[61.94603033213966 81] 142.94603033213966]
Test Case: 937 | Input/Output: [[80.76486711117786 15] 95.76486711117786]
Test Case: 938 | Input/Output: [[99.88239687290289 43] 142.8823968729029]
Test Case: 939 | Input/Output: [[51.14717136783068 -71] -19.85282863216932]
Test Case: 940 | Input/Output: [[40.73928992185472 -14] 26.73928992185472]
Test Case: 941 | Input/Output: [[49.10329908348345 29] 78.10329908348345]
Test Case: 942 | Input/Output: [[-68.49551205751403 -25] -93.49551205751403]
Test Case: 943 | Input/Output: [[-23.492734189366132 84] 60.50726581063387]
Test Case: 944 | Input/Output: [[-43.79814619164535 -46] -89.79814619164534]
Test Case: 945 | Input/Output: [[10.802249565368953 70] 80.80224956536895]
Test Case: 946 | Input/Output: [[94.62100668506682 94] 188.62100668506682]
Test Case: 947 | Input/Output: [[-15.869877373731029 69] 53.13012262626897]
Test Case: 948 | Input/Output: [[86.84357016202671 21] 107.84357016202671]
Test Case: 949 | Input/Output: [[-72.5191123132348 -55] -127.5191123132348]
Test Case: 950 | Input/Output: [[-53.09800625288219 39] -14.098006252882193]
Test Case: 951 | Input/Output: [[0.8134740450641118 6] 6.813474045064112]
Test Case: 952 | Input/Output: [[60.161794645246204 -96] -35.838205354753796]
Test Case: 953 | Input/Output: [[-73.07556013916572 -51] -124.07556013916572]
Test Case: 954 | Input/Output: [[-84.0732030068288 9] -75.0732030068288]
Test Case: 955 | Input/Output: [[-57.903013083690304 -82] -139.9030130836903]
Test Case: 956 | Input/Output: [[-89.09328555289122 53] -36.09328555289122]
Test Case: 957 | Input/Output: [[-75.11945311189261 89] 13.88054688810739]
Test Case: 958 | Input/Output: [[-43.60349947955986 -100] -143.60349947955984]
Test Case: 959 | Input/Output: [[97.70012944061867 83] 180.70012944061867]
Test Case: 960 | Input/Output: [[91.17674947871632 -72] 19.176749478716317]
Test Case: 961 | Input/Output: [[-22.15579344698699 53] 30.84420655301301]
Test Case: 962 | Input/Output: [[77.80620644121879 47] 124.80620644121879]
Test Case: 963 | Input/Output: [[75.26000152098251 33] 108.26000152098251]
Test Case: 964 | Input/Output: [[93.65772526850822 -50] 43.657725268508216]
Test Case: 965 | Input/Output: [[30.214064227655058 20] 50.21406422765506]
Test Case: 966 | Input/Output: [[-77.37630438884777 80] 2.623695611152229]
Test Case: 967 | Input/Output: [[91.49371456528544 -7] 84.49371456528544]
Test Case: 968 | Input/Output: [[-55.558042718128185 -92] -147.55804271812818]
Test Case: 969 | Input/Output: [[20.61895774295806 10] 30.61895774295806]
Test Case: 970 | Input/Output: [[13.814267333560522 -89] -75.18573266643948]
Test Case: 971 | Input/Output: [[-72.90118242901566 12] -60.90118242901566]
Test Case: 972 | Input/Output: [[84.68944809289397 -40] 44.68944809289397]
Test Case: 973 | Input/Output: [[44.64504906146939 -74] -29.354950938530607]
Test Case: 974 | Input/Output: [[26.184065796854355 26] 52.184065796854355]
Test Case: 975 | Input/Output: [[-2.4122243710712468 -73] -75.41222437107125]
Test Case: 976 | Input/Output: [[-90.8452124841079 -41] -131.8452124841079]
Test Case: 977 | Input/Output: [[-64.58015837385346 -56] -120.58015837385346]
Test Case: 978 | Input/Output: [[-30.52030146209208 -50] -80.52030146209208]
Test Case: 979 | Input/Output: [[-19.424867307784794 -38] -57.424867307784794]
Test Case: 980 | Input/Output: [[-21.46016983475228 -13] -34.46016983475228]
Test Case: 981 | Input/Output: [[9.187407919417169 6] 15.187407919417169]
Test Case: 982 | Input/Output: [[58.121478586894284 57] 115.12147858689428]
Test Case: 983 | Input/Output: [[-9.895670376392872 -47] -56.89567037639287]
Test Case: 984 | Input/Output: [[59.43007812874052 13] 72.43007812874052]
Test Case: 985 | Input/Output: [[-45.435403929396536 56] 10.564596070603464]
Test Case: 986 | Input/Output: [[32.33289682044398 -100] -67.66710317955602]
Test Case: 987 | Input/Output: [[-43.85287009194086 67] 23.147129908059142]
Test Case: 988 | Input/Output: [[-11.017174587571077 40] 28.982825412428923]
Test Case: 989 | Input/Output: [[-33.46823146744104 28] -5.4682314674410435]
Test Case: 990 | Input/Output: [[-61.26339831967114 -93] -154.26339831967113]
Test Case: 991 | Input/Output: [[-65.00809435104338 65] -0.00809435104338263]
Test Case: 992 | Input/Output: [[8.351131744368928 -65] -56.64886825563107]
Test Case: 993 | Input/Output: [[93.82980317248618 15] 108.82980317248618]
Test Case: 994 | Input/Output: [[85.70108065547262 -89] -3.298919344527377]
Test Case: 995 | Input/Output: [[53.25840456288614 54] 107.25840456288614]
Test Case: 996 | Input/Output: [[-24.480272635152673 -15] -39.48027263515267]
Test Case: 997 | Input/Output: [[-57.75414282317182 87] 29.24585717682818]
Test Case: 998 | Input/Output: [[0.3439340708022911 64] 64.34393407080229]
Test Case: 999 | Input/Output: [[59.904402123897796 29] 88.9044021238978]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 82 74 -39 -41 -7 27 117 -28 -24 -81 -97 26 33 27 -1 40
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 62508.60749999988
Test mean error for best: 31.25430
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 69            
Correct output: 77.2295138971  | Program output: 98            
Correct output: 3.7086869825   | Program output: 87            
Correct output: 106.0311162765 | Program output: 97            
Correct output: 44.3632125446  | Program output: 33            
Correct output: -18.5306412947 | Program output: 41            
Correct output: 95.5706973412  | Program output: 82            
Correct output: 118.5144246046 | Program output: 98            
Correct output: -54.0790937495 | Program output: 34            
Correct output: -13.0796880736 | Program output: 49            
Correct output: -5.8158128871  | Program output: 50            
Correct output: 93.0625957308  | Program output: 74            
Correct output: -61.1326014182 | Program output: -22           
Correct output: 21.7590464153  | Program output: 16            
Correct output: 82.5562972995  | Program output: 66            
Correct output: -90.2824116849 | Program output: -8            
Correct output: -0.647710987   | Program output: 15            
Correct output: -68.0911880316 | Program output: -5            
Correct output: 71.7453346318  | Program output: 76            
Correct output: 110.7456636041 | Program output: 86            
Correct output: 16.5821962378  | Program output: 67            
Correct output: -34.2887157462 | Program output: -15           
Correct output: 105.7715338332 | Program output: 63            
Correct output: 36.4673197404  | Program output: 96            
Correct output: -38.5175194694 | Program output: 36            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_dup float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult integer_dup_items in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_max integer_fromfloat float_dup_times print_integer integer_rot float_pop integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth integer_add integer_inc integer_add)
Errors: [47.503 12 20.7705 11 83.2913 11 9.0311 13 11.3632 11 59.5306 12 13.5707 12 20.5144 13 88.0791 12 62.0797 13 55.8158 12 19.0626 12 39.1326 11 5.759 11 16.5563 12 82.2824 12 15.6477 11 63.0912 13 4.2547 11 24.7457 13 50.4178 11 19.2887 11 42.7715 13 59.5327 12 74.5175 12]
Total: 1285.6098
Mean: 25.712196
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 18108.2185955
Median total errors in population: 25335.0
Error averages by case: (709.0281075999992 13.218 714.6296636000013 12.443 712.3844797000002 12.457 715.8221219000025 13.215 703.4570230000016 12.438 707.7025196000009 13.765 715.5608381000011 12.411 723.8209255999981 13.251 714.9643745999974 13.162 707.3334639 13.163 703.5066301999992 12.898 715.6441667999976 12.407 713.3276902000014 13.076 694.6801870999999 12.278 712.3498339000026 12.538 717.6239947000034 13.095 697.0603083999991 12.118 709.9556744000031 13.08 713.8637523999994 13.022 721.4521057999999 13.21 708.9421267999999 13.134 707.1504750000004 13.223 719.0838243999999 13.28 714.8187067000007 13.244 710.0636010999993 13.866)
Error minima by case: (0.503 8 0.2295 1 0.2913 8 6.0311 2 0.2044 2 1.4694 8 1.4293 2 2.0 2 1.0493 2 2.9203 1 0.8158 8 2.0626 2 0.7325 2 0.241 2 0.5563 2 0.236 2 0.0041 7 3.0912 1 0.6455 8 11.7457 2 1.0414 6 1.4776 1 6.7715 2 0.1291 8 0.6694 8)
Average genome size in population (length): 48.513
Average program size in population (points): 49.513
Average percent parens in population: 0.045
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.33
Error (vector) diversity:			 0.353
Behavioral diversity:				 0.368
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1216891
--- Timings ---
Current time: 1529615583980 milliseconds
Total Time:           3.3 seconds
Initialization:       0.1 seconds,  3.3%
Reproduction:         0.6 seconds, 16.7%
Fitness Testing:      2.7 seconds, 80.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 62508.60749999988
Test mean error for best: 31.25430
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 69            
Correct output: 77.2295138971  | Program output: 98            
Correct output: 3.7086869825   | Program output: 87            
Correct output: 106.0311162765 | Program output: 97            
Correct output: 44.3632125446  | Program output: 33            
Correct output: -18.5306412947 | Program output: 41            
Correct output: 95.5706973412  | Program output: 82            
Correct output: 118.5144246046 | Program output: 98            
Correct output: -54.0790937495 | Program output: 34            
Correct output: -13.0796880736 | Program output: 49            
Correct output: -5.8158128871  | Program output: 50            
Correct output: 93.0625957308  | Program output: 74            
Correct output: -61.1326014182 | Program output: -22           
Correct output: 21.7590464153  | Program output: 16            
Correct output: 82.5562972995  | Program output: 66            
Correct output: -90.2824116849 | Program output: -8            
Correct output: -0.647710987   | Program output: 15            
Correct output: -68.0911880316 | Program output: -5            
Correct output: 71.7453346318  | Program output: 76            
Correct output: 110.7456636041 | Program output: 86            
Correct output: 16.5821962378  | Program output: 67            
Correct output: -34.2887157462 | Program output: -15           
Correct output: 105.7715338332 | Program output: 63            
Correct output: 36.4673197404  | Program output: 96            
Correct output: -38.5175194694 | Program output: 36            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_dup float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult integer_dup_items in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_max integer_fromfloat float_dup_times print_integer integer_rot float_pop integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth integer_add integer_inc integer_add)
Errors: [47.503 12 20.7705 11 83.2913 11 9.0311 13 11.3632 11 59.5306 12 13.5707 12 20.5144 13 88.0791 12 62.0797 13 55.8158 12 19.0626 12 39.1326 11 5.759 11 16.5563 12 82.2824 12 15.6477 11 63.0912 13 4.2547 11 24.7457 13 50.4178 11 19.2887 11 42.7715 13 59.5327 12 74.5175 12]
Total: 1285.6098
Mean: 25.712196
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 6352.431126100005
Median total errors in population: 1669.0698000000002
Error averages by case: (232.94661789999984 12.536 257.34203709999815 9.99 240.40773380000002 11.754 253.77664519999774 10.967 222.40633499999973 10.136 239.37417849999972 12.686 253.31869290000168 10.176 268.84788069999695 10.957 244.378537300001 10.596 229.27556010000055 10.687 235.12673800000042 11.669 252.23190270000146 10.176 246.64343780000178 10.305 206.2759683999992 9.885 242.4527825999987 10.374 260.21980289999857 10.421 216.5801849999999 11.156 247.16863729999872 10.424 243.12768320000032 11.891 264.29193439999995 10.819 232.12088999999997 12.206 232.34694850000113 10.614 259.3823783000009 10.936 246.46203439999982 12.7 249.21058409999944 12.654)
Error minima by case: (0.503 8 1.2951 1 0.2913 8 8.0 2 0.2044 2 1.4694 8 1.4293 2 2.0 2 1.0493 2 0.511 1 0.8158 8 3.0626 2 0.7325 2 0.241 2 0.5563 2 1.0273 2 0.0041 7 4.0 1 1.2547 8 12.7457 2 1.0414 8 1.4776 1 7.7715 2 0.1291 9 0.6694 8)
Average genome size in population (length): 56.616
Average program size in population (points): 57.616
Average percent parens in population: 0.025
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.48
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.285
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2637751
--- Timings ---
Current time: 1529615589411 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.9 seconds, 43.5%
Fitness Testing:      4.3 seconds, 47.8%
Report:               0.7 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 62508.60749999988
Test mean error for best: 31.25430
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 69            
Correct output: 77.2295138971  | Program output: 98            
Correct output: 3.7086869825   | Program output: 87            
Correct output: 106.0311162765 | Program output: 97            
Correct output: 44.3632125446  | Program output: 33            
Correct output: -18.5306412947 | Program output: 41            
Correct output: 95.5706973412  | Program output: 82            
Correct output: 118.5144246046 | Program output: 98            
Correct output: -54.0790937495 | Program output: 34            
Correct output: -13.0796880736 | Program output: 49            
Correct output: -5.8158128871  | Program output: 50            
Correct output: 93.0625957308  | Program output: 74            
Correct output: -61.1326014182 | Program output: -22           
Correct output: 21.7590464153  | Program output: 16            
Correct output: 82.5562972995  | Program output: 66            
Correct output: -90.2824116849 | Program output: -8            
Correct output: -0.647710987   | Program output: 15            
Correct output: -68.0911880316 | Program output: -5            
Correct output: 71.7453346318  | Program output: 76            
Correct output: 110.7456636041 | Program output: 86            
Correct output: 16.5821962378  | Program output: 67            
Correct output: -34.2887157462 | Program output: -15           
Correct output: 105.7715338332 | Program output: 63            
Correct output: 36.4673197404  | Program output: 96            
Correct output: -38.5175194694 | Program output: 36            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_dup float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult integer_dup_items in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_max integer_fromfloat float_dup_times print_integer integer_rot float_pop integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc integer_swap integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth integer_add integer_inc integer_add)
Errors: [47.503 12 20.7705 11 83.2913 11 9.0311 13 11.3632 11 59.5306 12 13.5707 12 20.5144 13 88.0791 12 62.0797 13 55.8158 12 19.0626 12 39.1326 11 5.759 11 16.5563 12 82.2824 12 15.6477 11 63.0912 13 4.2547 11 24.7457 13 50.4178 11 19.2887 11 42.7715 13 59.5327 12 74.5175 12]
Total: 1285.6098
Mean: 25.712196
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 4693.2725342999975
Median total errors in population: 1381.0
Error averages by case: (188.99417699999958 13.105 172.18540219999971 6.158 206.14376310000077 11.899 159.29771699999898 7.187 157.37054590000022 6.173 187.06517140000008 12.849 191.37474250000062 6.39 203.71267099999866 7.072 176.86174120000044 6.527 179.9187351000003 6.67 185.1160815 11.056 186.50553610000063 6.337 171.46989440000036 6.396 136.58269780000043 6.108 157.76073169999935 6.414 172.8274956999993 6.564 154.25969979999988 11.502 166.1482632999994 6.074 186.1107990999997 11.221 195.90039099999993 7.126 187.26244089999955 12.311 164.80372680000056 6.484 185.07846360000048 7.191 208.5897028000006 13.274 197.26194340000026 12.582)
Error minima by case: (0.503 8 19.0 1 0.2913 8 8.0 2 9.446 2 1.2662 8 12.5707 2 19.5144 2 18.9209 2 7.6266 1 0.8158 8 18.0626 2 17.1326 2 0.241 2 15.0 2 6.0 2 0.2762 7 3.0 1 3.2547 8 23.7457 3 1.0414 9 3.7113 1 18.2285 3 1.5502 8 26.5175 9)
Average genome size in population (length): 47.367
Average program size in population (points): 48.367
Average percent parens in population: 0.033
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9655
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.119
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3825924
--- Timings ---
Current time: 1529615592681 milliseconds
Total Time:          12.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.4 seconds, 44.0%
Fitness Testing:      5.7 seconds, 46.5%
Report:               1.1 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 62508.60749999988
Test mean error for best: 31.25430
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 69            
Correct output: 77.2295138971  | Program output: 98            
Correct output: 3.7086869825   | Program output: 87            
Correct output: 106.0311162765 | Program output: 97            
Correct output: 44.3632125446  | Program output: 33            
Correct output: -18.5306412947 | Program output: 41            
Correct output: 95.5706973412  | Program output: 82            
Correct output: 118.5144246046 | Program output: 98            
Correct output: -54.0790937495 | Program output: 34            
Correct output: -13.0796880736 | Program output: 49            
Correct output: -5.8158128871  | Program output: 50            
Correct output: 93.0625957308  | Program output: 74            
Correct output: -61.1326014182 | Program output: -22           
Correct output: 21.7590464153  | Program output: 16            
Correct output: 82.5562972995  | Program output: 66            
Correct output: -90.2824116849 | Program output: -8            
Correct output: -0.647710987   | Program output: 15            
Correct output: -68.0911880316 | Program output: -5            
Correct output: 71.7453346318  | Program output: 76            
Correct output: 110.7456636041 | Program output: 86            
Correct output: 16.5821962378  | Program output: 67            
Correct output: -34.2887157462 | Program output: -15           
Correct output: 105.7715338332 | Program output: 63            
Correct output: 36.4673197404  | Program output: 96            
Correct output: -38.5175194694 | Program output: 36            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_swap} {:instruction float_sub} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction integer_pop} {:instruction float_mult} {:instruction float_tan} {:instruction in1} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction tag_float_995} {:instruction float_rot} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_cos float_swap float_sub integer_add integer_dup_items float_shove integer_fromfloat float_yank integer_pop float_mult float_tan in1 integer_sub integer_shove integer_mult float_pop float_dup_items integer_dup integer_add integer_div integer_inc in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_max integer_fromfloat tag_float_995 float_rot integer_rot float_pop integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth integer_add integer_inc integer_add)
Errors: [47.503 12 20.7705 11 83.2913 11 9.0311 13 11.3632 11 59.5306 12 13.5707 12 20.5144 13 88.0791 12 62.0797 13 55.8158 12 19.0626 12 39.1326 11 5.759 11 16.5563 12 82.2824 12 15.6477 11 63.0912 13 4.2547 11 24.7457 13 50.4178 11 19.2887 11 42.7715 13 59.5327 12 74.5175 12]
Total: 1285.6098
Mean: 25.712196
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3688.219533400001
Median total errors in population: 1365.0
Error averages by case: (152.34106339999954 12.887 117.2459310999998 5.127 172.06264330000025 11.404 103.60462069999944 6.303 119.37853280000068 5.145 150.8156059999997 12.403 154.3824737999999 5.372 166.3281541999993 6.182 137.44148600000045 5.447 141.7190983000003 5.656 147.2613166999999 10.779 149.41543310000048 5.342 133.62317929999966 5.244 97.27884670000022 5.119 109.76539299999952 5.37 132.3052455999994 5.431 111.52432540000022 11.206 126.14355329999967 4.962 147.95198000000008 10.619 158.9745113999999 6.308 151.54847979999963 11.992 127.27821910000031 5.109 147.0821974000004 6.314 173.46458840000048 12.935 164.32865459999962 12.298)
Error minima by case: (20.497 10 20.0 1 2.7087 10 8.0 2 11.3632 2 1.5306 10 13.5707 2 1.4856 2 28.2083 2 8.0797 1 4.8158 9 19.0626 2 18.1326 2 4.0 2 15.0 2 2.2824 2 0.2582 7 4.0 1 4.2547 9 13.2543 3 15.5822 9 2.7113 1 21.2285 3 34.4673 10 26.5175 9)
Average genome size in population (length): 46.006
Average program size in population (points): 47.006
Average percent parens in population: 0.040
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.49275
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.048
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4977649
--- Timings ---
Current time: 1529615596223 milliseconds
Total Time:          15.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.1 seconds, 44.9%
Fitness Testing:      7.2 seconds, 45.3%
Report:               1.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 67984.33109999995
Test mean error for best: 33.99217
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 069           
Correct output: 77.2295138971  | Program output: 00            
Correct output: 3.7086869825   | Program output: 087           
Correct output: 106.0311162765 | Program output: 097           
Correct output: 44.3632125446  | Program output: 033           
Correct output: -18.5306412947 | Program output: 00            
Correct output: 95.5706973412  | Program output: 082           
Correct output: 118.5144246046 | Program output: 098           
Correct output: -54.0790937495 | Program output: 034           
Correct output: -13.0796880736 | Program output: 049           
Correct output: -5.8158128871  | Program output: 00            
Correct output: 93.0625957308  | Program output: 074           
Correct output: -61.1326014182 | Program output: 00            
Correct output: 21.7590464153  | Program output: 016           
Correct output: 82.5562972995  | Program output: 066           
Correct output: -90.2824116849 | Program output: 00            
Correct output: -0.647710987   | Program output: 00            
Correct output: -68.0911880316 | Program output: 00            
Correct output: 71.7453346318  | Program output: 076           
Correct output: 110.7456636041 | Program output: 086           
Correct output: 16.5821962378  | Program output: 067           
Correct output: -34.2887157462 | Program output: 00            
Correct output: 105.7715338332 | Program output: 063           
Correct output: 36.4673197404  | Program output: 096           
Correct output: -38.5175194694 | Program output: 00            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_dup float_add integer_mod integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult integer_dup_items in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_max integer_fromfloat float_dup_times print_integer integer_rot float_pop integer_swap integer_dup print_integer integer_sub float_pop integer_swap integer_dup)
Errors: [47.503 11 77.2295 13 83.2913 10 9.0311 12 11.3632 11 18.5306 13 13.5707 11 20.5144 13 88.0791 11 62.0797 12 5.8158 13 19.0626 11 61.1326 13 5.759 11 16.5563 12 90.2824 13 0.6477 10 68.0912 12 4.2547 11 24.7457 12 50.4178 11 34.2887 14 42.7715 12 59.5327 12 38.5175 14]
Total: 1251.0688
Mean: 25.021376
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 2830.855570299992
Median total errors in population: 1285.6098
Error averages by case: (107.61416049999869 12.152 84.58341769999933 9.312 137.206127899999 11.135 69.18803999999986 11.036 70.20701790000014 9.338 114.73025009999895 12.142 84.71335889999855 10.058 94.94705850000001 10.899 128.31536620000136 10.051 112.3693012000009 10.78 111.59889499999842 11.596 87.4962954000002 10.009 127.57897779999855 9.441 50.22807869999911 9.283 76.27861799999866 10.071 154.69150429999797 10.078 71.08591470000073 10.974 140.36461299999866 10.623 70.77632419999982 10.905 95.29585189999969 10.988 109.10154119999935 11.266 110.2023983000007 9.3 104.08267040000113 11.0 123.13040839999934 12.192 128.3763801000011 12.064)
Error minima by case: (20.7422 9 20.7705 2 2.9431 8 7.0311 3 11.3632 2 1.2662 8 13.5707 2 20.5144 2 20.0791 2 7.6266 2 4.1842 9 19.0626 2 19.7717 2 4.0 2 15.0 2 8.0 2 0.3523 8 5.0 1 4.2547 10 24.7457 3 15.4492 9 15.2887 1 42.7715 3 22.2239 7 1.1936 9)
Average genome size in population (length): 55.968
Average program size in population (points): 56.968
Average percent parens in population: 0.020
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.0505
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.066
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6376899
--- Timings ---
Current time: 1529615599866 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.7 seconds, 44.6%
Fitness Testing:      8.8 seconds, 45.3%
Report:               1.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 67984.33109999995
Test mean error for best: 33.99217
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 069           
Correct output: 77.2295138971  | Program output: 00            
Correct output: 3.7086869825   | Program output: 087           
Correct output: 106.0311162765 | Program output: 097           
Correct output: 44.3632125446  | Program output: 033           
Correct output: -18.5306412947 | Program output: 00            
Correct output: 95.5706973412  | Program output: 082           
Correct output: 118.5144246046 | Program output: 098           
Correct output: -54.0790937495 | Program output: 034           
Correct output: -13.0796880736 | Program output: 049           
Correct output: -5.8158128871  | Program output: 00            
Correct output: 93.0625957308  | Program output: 074           
Correct output: -61.1326014182 | Program output: 00            
Correct output: 21.7590464153  | Program output: 016           
Correct output: 82.5562972995  | Program output: 066           
Correct output: -90.2824116849 | Program output: 00            
Correct output: -0.647710987   | Program output: 00            
Correct output: -68.0911880316 | Program output: 00            
Correct output: 71.7453346318  | Program output: 076           
Correct output: 110.7456636041 | Program output: 086           
Correct output: 16.5821962378  | Program output: 067           
Correct output: -34.2887157462 | Program output: 00            
Correct output: 105.7715338332 | Program output: 063           
Correct output: 36.4673197404  | Program output: 096           
Correct output: -38.5175194694 | Program output: 00            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_dup float_add integer_mod integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult integer_dup_items in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_max integer_fromfloat float_dup_times print_integer integer_rot float_pop integer_swap integer_dup print_integer integer_sub float_pop integer_swap integer_dup)
Errors: [47.503 11 77.2295 13 83.2913 10 9.0311 12 11.3632 11 18.5306 13 13.5707 11 20.5144 13 88.0791 11 62.0797 12 5.8158 13 19.0626 11 61.1326 13 5.759 11 16.5563 12 90.2824 13 0.6477 10 68.0912 12 4.2547 11 24.7457 12 50.4178 11 34.2887 14 42.7715 12 59.5327 12 38.5175 14]
Total: 1251.0688
Mean: 25.021376
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 3051.8886908999866
Median total errors in population: 1285.6098
Error averages by case: (115.97653379999811 11.895 94.40967579999916 11.033 149.8297568999995 10.941 81.19024879999897 12.951 75.81663900000049 11.05 121.04181439999869 11.991 81.65970899999793 11.917 89.66713820000001 12.928 151.13476760000182 11.952 127.9278808000013 12.87 118.28221999999785 11.96 86.40528929999994 11.922 137.67835099999854 11.142 62.208878799998736 11.0 85.96963119999788 11.99 173.03246559999744 11.969 78.99068510000093 10.951 155.45253279999767 12.885 67.21598979999895 11.07 93.0020087999996 12.89 118.43809139999858 11.048 118.60478820000144 11.169 108.84618480000164 12.914 128.38513519999887 11.975 134.2622746000011 12.047)
Error minima by case: (20.497 9 0.2295 2 2.7087 9 8.0 3 11.3632 2 17.5306 10 13.5707 2 1.4856 2 0.0791 2 0.0797 2 4.8158 9 19.0626 2 21.1326 2 4.0 2 15.0 2 2.2824 2 0.3523 9 4.0912 1 4.2547 10 13.2543 3 15.5822 8 15.2887 1 36.2285 3 21.5327 9 1.9635 10)
Average genome size in population (length): 55.151
Average program size in population (points): 56.151
Average percent parens in population: 0.018
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.50475
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.065
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7755724
--- Timings ---
Current time: 1529615602926 milliseconds
Total Time:          22.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.1 seconds, 44.7%
Fitness Testing:     10.1 seconds, 44.9%
Report:               2.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth integer_add integer_inc integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3078.463475699987
Median total errors in population: 1285.6098
Error averages by case: (116.60634979999813 11.877 96.15774399999921 11.161 149.9048985000002 10.915 80.03426329999833 12.937 79.26757800000149 11.068 118.88451969999859 12.05 86.56809959999781 11.912 95.12700720000002 12.949 150.75481480000187 11.97 127.93636550000133 12.877 115.41100679999774 12.037 91.26330500000074 11.899 136.82588139999896 11.294 62.49857759999872 11.006 88.69314019999776 11.993 170.42600719999726 12.051 78.19764960000099 10.913 153.25735359999746 12.888 74.2337624999999 11.083 97.87835699999955 12.877 118.98716359999865 11.055 117.64094300000168 11.366 112.24681120000172 12.885 129.8079155999989 11.962 132.6629610000013 12.166)
Error minima by case: (0.503 9 0.2295 4 0.2913 8 0.0311 5 0.3632 4 0.4694 9 0.5707 4 0.5144 5 0.0791 4 0.0797 4 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.7457 5 0.4178 9 0.2887 5 0.7715 5 0.5327 8 0.4825 10)
Average genome size in population (length): 53.119
Average program size in population (points): 54.119
Average percent parens in population: 0.019
Minimum age in population: 6.0
Maximum age in population: 10.875
Average age in population: 8.990875
Median age in population: 9.046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.064
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9083749
--- Timings ---
Current time: 1529615606359 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.8 seconds, 45.5%
Fitness Testing:     11.5 seconds, 44.2%
Report:               2.6 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult integer_sub in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth integer_add integer_inc integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2977.63724329999
Median total errors in population: 1285.6098
Error averages by case: (109.23295009999836 11.796 107.98466409999975 11.676 143.28014849999965 10.839 80.6581389999985 12.824 70.13929650000067 11.137 105.97823819999864 12.325 81.78382249999818 11.82 91.51142410000001 12.95 142.5674307000018 11.893 119.10697400000114 12.753 100.23106709999803 12.304 85.4805089000007 11.787 144.37142280000018 11.806 57.4587713999988 11.068 83.12475989999815 12.029 177.42833599999736 12.306 70.40180680000095 10.812 159.04716799999778 12.753 68.53629939999924 11.17 93.3170180999996 12.77 111.32517139999855 11.145 122.91776730000194 12.133 106.04413820000147 12.813 124.80027159999878 11.992 121.3216487000014 12.687)
Error minima by case: (0.503 9 0.2295 3 0.2913 8 0.0311 4 0.3632 3 0.4694 9 0.5707 3 0.5144 4 0.0791 3 0.0797 3 0.1842 10 0.0626 3 0.1326 3 0.759 3 0.5563 3 0.2824 3 0.3523 9 0.0912 2 0.2547 10 0.7457 4 0.4178 9 0.2887 3 0.7715 4 0.5327 9 0.4825 10)
Average genome size in population (length): 47.693
Average program size in population (points): 48.693
Average percent parens in population: 0.022
Minimum age in population: 7.5
Maximum age in population: 12.53125
Average age in population: 10.45275
Median age in population: 10.515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.076
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 10276099
--- Timings ---
Current time: 1529615609584 milliseconds
Total Time:          29.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.4 seconds, 46.0%
Fitness Testing:     12.6 seconds, 43.4%
Report:               3.0 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction float_pop} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_min float_dup float_pop float_dec integer_sub float_frominteger in1 float_dup_times float_pop integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod integer_dup_items float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth integer_add float_rot integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3286.501143600011
Median total errors in population: 1262.0688
Error averages by case: (118.97180099999831 11.465 135.94961900000027 12.331 152.84542709999997 10.534 105.85290149999739 12.453 79.45838950000125 11.19 89.47200999999876 12.559 98.44717449999783 11.492 111.41447040000001 12.866 151.5642183000019 11.573 128.09276610000128 12.382 82.58179839999848 12.625 102.10302380000115 11.416 179.18086460000157 12.525 65.7261859999988 11.086 100.91641799999782 12.047 210.0054983999974 12.605 57.377954200000815 10.452 189.03169919999803 12.371 78.88626090000015 11.248 111.79353909999959 12.369 120.54045259999883 11.192 152.02217750000165 13.197 121.72803300000166 12.467 137.5995154999996 11.942 105.22994500000128 13.322)
Error minima by case: (0.503 10 0.2295 4 0.2913 9 0.0311 5 0.3632 4 0.4694 10 0.5707 4 0.5144 5 0.0791 4 0.0797 4 0.1842 10 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 5 0.4178 9 0.2887 5 0.7715 5 0.5327 10 0.4825 10)
Average genome size in population (length): 41.363
Average program size in population (points): 42.363
Average percent parens in population: 0.024
Minimum age in population: 9.625
Maximum age in population: 13.90625
Average age in population: 11.9648125
Median age in population: 12.0390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 168
Genome diversity (% unique Plush genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.102
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 11310174
--- Timings ---
Current time: 1529615612473 milliseconds
Total Time:          32.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.9 seconds, 46.3%
Fitness Testing:     13.7 seconds, 42.7%
Report:               3.4 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_rot integer_div integer_stackdepth integer_add integer_inc integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3267.5001831000095
Median total errors in population: 1251.0688
Error averages by case: (112.90684899999837 11.349 133.56993000000043 12.142 141.51954439999935 10.528 106.60246609999751 12.117 77.62299360000098 11.168 99.4897271999991 12.329 99.15995359999803 11.267 112.54732640000002 12.643 146.79147810000174 11.338 125.46101270000113 12.035 93.2552695999986 12.527 102.04314740000095 11.189 180.01647780000198 12.366 59.74228299999887 11.078 100.45818609999802 11.923 201.38636879999743 12.347 68.06598320000062 10.219 184.36133439999767 11.957 78.81290190000033 11.328 112.22509929999961 12.035 113.97913739999899 11.159 157.29440350000203 12.914 119.40046050000147 12.143 131.941104099999 11.793 113.95774500000093 12.995)
Error minima by case: (0.503 9 0.2295 9 0.2913 9 0.0311 10 0.3632 9 0.4694 10 0.5707 10 0.5144 10 0.0791 9 0.0797 10 0.1842 10 0.0626 9 0.1326 9 0.759 9 0.5563 10 0.2824 9 0.3523 9 0.0912 10 0.2547 10 0.7457 10 0.4178 10 0.2887 10 0.7715 10 0.5327 8 0.4825 10)
Average genome size in population (length): 42.079
Average program size in population (points): 43.079
Average percent parens in population: 0.024
Minimum age in population: 11.0
Maximum age in population: 15.22265625
Average age in population: 13.4766328125
Median age in population: 13.5546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 176
Genome diversity (% unique Plush genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.095
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 12362149
--- Timings ---
Current time: 1529615615497 milliseconds
Total Time:          35.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.4 seconds, 46.7%
Fitness Testing:     14.8 seconds, 42.2%
Report:               3.8 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction float_pop} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_min float_dup float_pop float_dec integer_sub float_frominteger in1 float_dup_times float_pop integer_mod integer_pop float_dup integer_pop float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth integer_add integer_inc integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2940.9582412000022
Median total errors in population: 287.0456
Error averages by case: (107.7904599999983 11.771 97.10945450000061 11.346 114.31694419999837 11.352 99.25683929999806 11.68 79.06111140000104 11.065 105.91949200000029 11.61 91.37782439999806 11.238 101.64585510000002 11.845 141.73876040000175 11.295 131.6331871000012 11.615 102.8841560000004 12.158 93.89934380000072 11.159 128.82257739999835 11.582 63.107220499998874 11.031 96.20642469999802 11.471 136.24127599999764 11.493 83.70159559999976 10.234 128.78288799999842 11.384 84.24471430000045 11.673 101.84114139999961 11.639 108.50901379999908 11.093 116.96626110000119 11.667 108.40943350000141 11.7 117.49834669999917 11.379 113.68891999999973 11.825)
Error minima by case: (0.503 8 0.2295 4 0.2913 8 0.0311 4 0.3632 4 0.4694 9 0.5707 4 0.5144 5 0.0791 3 0.0797 3 0.1842 10 0.0626 4 0.1326 3 0.759 3 0.5563 4 0.2824 3 0.3523 9 0.0912 2 0.2547 10 0.7457 5 0.4178 9 0.2887 3 0.7715 5 0.5327 8 0.4825 10)
Average genome size in population (length): 47.525
Average program size in population (points): 48.525
Average percent parens in population: 0.021
Minimum age in population: 12.7734375
Maximum age in population: 16.849609375
Average age in population: 15.06034375
Median age in population: 15.1318359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.108
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 13550274
--- Timings ---
Current time: 1529615618639 milliseconds
Total Time:          38.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.9 seconds, 46.7%
Fitness Testing:     16.1 seconds, 41.9%
Report:               4.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times float_div integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth integer_add integer_inc integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2792.5764709000055
Median total errors in population: 287.0456
Error averages by case: (93.47158399999861 11.935 88.7052995000008 11.018 83.91492749999877 11.828 91.54512979999849 11.221 89.35483920000144 11.034 115.5434998000012 11.145 93.51859379999819 11.078 95.19682780000002 11.235 121.39965300000146 11.141 118.277991600001 11.156 114.05185980000181 12.0 93.19243140000047 11.016 116.90390339999851 11.11 68.5330379999991 11.018 94.10940749999823 11.131 120.19514639999787 11.157 106.22482909999916 10.085 117.87434079999937 11.171 79.47156699999998 11.947 95.4292097999996 11.193 93.72940039999972 11.03 112.95357070000054 11.171 95.86278800000132 11.235 95.8334301000001 11.067 117.01020249999883 11.151)
Error minima by case: (0.497 9 0.2295 6 0.2913 10 0.0311 6 0.3632 6 0.4694 8 0.5707 6 0.5144 7 0.0791 3 0.0797 3 0.1842 10 0.0626 6 0.1326 8 0.759 5 0.5563 6 0.2824 7 0.3523 9 0.0912 6 0.2547 10 0.7457 7 0.4178 8 0.2887 8 0.7715 7 0.4673 8 0.4825 10)
Average genome size in population (length): 52.78
Average program size in population (points): 53.78
Average percent parens in population: 0.019
Minimum age in population: 13.9453125
Maximum age in population: 18.31640625
Average age in population: 16.5604814453125
Median age in population: 16.60546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.066
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 14869774
--- Timings ---
Current time: 1529615622176 milliseconds
Total Time:          41.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.5 seconds, 46.6%
Fitness Testing:     17.6 seconds, 42.1%
Report:               4.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_dup_items})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger integer_add float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_mod integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_dup_items)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2368.4937462000053
Median total errors in population: 287.0456
Error averages by case: (77.86110479999861 11.921 74.73041120000083 10.994 67.79504829999895 11.85 76.41098899999916 11.15 70.5388142000003 11.002 96.16845940000118 11.118 75.25120839999825 11.037 77.14051630000002 11.155 104.11391860000137 11.086 100.26034650000089 11.088 94.56012260000172 11.996 75.03915139999977 10.975 99.6376161999986 11.072 57.6934093999989 10.984 76.18922469999822 11.071 102.77748879999797 11.109 87.23980729999913 10.067 100.5718943999991 11.12 69.42742329999953 11.957 77.3271881999996 11.131 77.37164870000005 11.033 95.80794300000086 11.12 77.78160700000123 11.161 78.89931450000037 11.053 98.52408999999884 11.125)
Error minima by case: (0.497 8 0.2295 1 0.2913 9 0.0311 2 0.3632 2 0.4694 9 0.5707 2 0.5144 2 0.0791 2 0.0797 1 0.1842 10 0.0626 2 0.1326 2 0.759 2 0.5563 2 0.2824 2 0.3523 8 0.0912 1 0.2547 10 0.7457 2 0.4178 9 0.2887 2 0.7715 2 0.4673 8 0.4825 9)
Average genome size in population (length): 52.713
Average program size in population (points): 53.713
Average percent parens in population: 0.019
Minimum age in population: 14.9453125
Maximum age in population: 19.85986328125
Average age in population: 18.00336083984375
Median age in population: 18.035888671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.071
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 16187599
--- Timings ---
Current time: 1529615625248 milliseconds
Total Time:          44.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.9 seconds, 46.4%
Fitness Testing:     18.9 seconds, 42.2%
Report:               5.0 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_rot float_pop integer_swap integer_dup print_integer integer_sub float_pop integer_swap integer_dup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2441.0817014000054
Median total errors in population: 287.0456
Error averages by case: (80.22861599999861 11.956 80.57064850000083 11.004 68.37038309999903 11.871 88.23371009999833 11.168 74.38470080000106 11.007 96.75417360000124 11.134 80.63134719999837 11.042 84.39996000000002 11.183 104.05226330000147 11.124 100.01986080000097 11.121 94.70583320000172 11.996 81.29696440000036 10.995 97.64048359999862 11.081 64.7151969999988 11.007 85.94078259999812 11.081 101.75748879999792 11.126 85.03498889999912 10.08 98.85289439999889 11.138 68.1257872999997 11.969 85.53191009999958 11.155 80.2163215999997 11.045 89.89094300000035 11.135 88.48057850000134 11.182 82.84504710000013 11.049 98.60481749999879 11.147)
Error minima by case: (0.497 9 0.2295 4 0.2913 8 0.0311 6 0.3632 4 0.4694 9 0.5707 4 0.5144 6 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 8 0.0912 4 0.2547 10 0.7457 6 0.4178 8 0.2887 5 0.7715 6 0.4673 8 0.4825 9)
Average genome size in population (length): 52.256
Average program size in population (points): 53.256
Average percent parens in population: 0.019
Minimum age in population: 16.9658203125
Maximum age in population: 21.47509765625
Average age in population: 19.45864379882812
Median age in population: 19.4990234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.073
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 17493999
--- Timings ---
Current time: 1529615628675 milliseconds
Total Time:          48.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.3 seconds, 46.2%
Fitness Testing:     20.5 seconds, 42.4%
Report:               5.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction float_pop} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction tagged_946} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc})
Best program: (float_stackdepth integer_add integer_min float_dup float_pop float_dec integer_sub float_frominteger in1 float_dup_times float_pop integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult tagged_946 in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer float_dup float_swap float_mod float_inc)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 2414.6403929000044
Median total errors in population: 287.0456
Error averages by case: (79.94914299999849 11.939 78.65771400000087 10.98 71.16329609999863 11.853 83.372585699999 11.151 75.67464870000046 10.994 94.6070922000013 11.116 81.47386619999813 11.026 85.60204640000002 11.146 99.28897520000149 11.086 95.57233900000104 11.097 92.28870140000187 11.983 82.84321479999973 10.996 95.87227919999846 11.051 61.52255119999884 10.997 85.09711369999806 11.075 98.92646559999783 11.097 83.82844409999912 10.063 95.85135039999933 11.126 70.85603499999947 11.955 86.08989289999957 11.128 80.10549960000041 11.031 91.37338650000017 11.104 87.15257850000143 11.161 82.18777600000078 11.054 95.95939749999872 11.115)
Error minima by case: (0.503 9 0.2295 3 0.2913 9 0.0311 2 0.3632 2 0.4694 9 0.5707 2 0.5144 2 0.0791 3 0.0797 3 0.1842 10 0.0626 2 0.1326 3 0.759 2 0.5563 2 0.2824 3 0.3523 9 0.0912 3 0.2547 10 0.7457 2 0.4178 9 0.2887 3 0.7715 2 0.5327 8 0.4825 9)
Average genome size in population (length): 52.214
Average program size in population (points): 53.214
Average percent parens in population: 0.019
Minimum age in population: 17.9658203125
Maximum age in population: 23.009521484375
Average age in population: 20.91918090820312
Median age in population: 20.9697265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.07
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 18799374
--- Timings ---
Current time: 1529615631930 milliseconds
Total Time:          51.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.8 seconds, 46.1%
Fitness Testing:     22.0 seconds, 42.5%
Report:               5.7 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction float_pop} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc})
Best program: (float_stackdepth integer_add integer_add integer_min float_dup float_pop float_dec integer_sub float_frominteger in1 float_dup_times float_pop integer_mod integer_pop float_dup integer_inc float_dec float_dup_items float_dec float_dup_items integer_dup_items integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2385.9040802000054
Median total errors in population: 287.0456
Error averages by case: (77.67004899999863 11.945 78.3368175000009 11.014 64.899303999999 11.864 81.6709171999991 11.163 70.95447280000019 11.013 93.88482660000125 11.132 78.80396429999828 11.048 84.14860660000001 11.166 100.53631410000129 11.14 95.89782470000085 11.13 90.93364900000174 12.002 79.86249739999991 11.006 97.19801399999855 11.083 60.24376599999894 11.013 80.28403839999824 11.089 101.48533599999796 11.136 84.47969349999904 10.084 97.92898559999914 11.145 72.9529323999997 11.969 84.18635609999963 11.156 77.16487320000029 11.06 92.2960769000006 11.137 84.2854255000013 11.187 80.10448690000072 11.05 95.81085249999877 11.152)
Error minima by case: (0.503 8 0.2295 2 0.2913 8 0.0311 2 0.3632 2 0.4694 9 0.5707 2 0.5144 2 0.0791 3 0.0797 3 0.1842 9 0.0626 2 0.1326 3 0.759 2 0.5563 2 0.2824 3 0.3523 9 0.0912 3 0.2547 10 0.7457 2 0.4178 9 0.2887 3 0.7715 2 0.5327 8 0.4825 10)
Average genome size in population (length): 52.221
Average program size in population (points): 53.221
Average percent parens in population: 0.019
Minimum age in population: 18.9658203125
Maximum age in population: 24.112548828125
Average age in population: 22.34641290283203
Median age in population: 22.37655639648438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.069
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 20104899
--- Timings ---
Current time: 1529615635105 milliseconds
Total Time:          54.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.3 seconds, 46.2%
Fitness Testing:     23.3 seconds, 42.5%
Report:               6.1 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction print_integer} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_dup float_frominteger integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap float_dup print_integer print_integer integer_sub integer_yank float_mod integer_dup_items float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth integer_add float_rot integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2555.528211900005
Median total errors in population: 287.0456
Error averages by case: (86.06155199999858 11.937 78.85311250000088 11.041 79.6166822999989 11.841 92.30435739999822 11.226 74.88075120000079 11.057 99.05341840000125 11.158 80.02068659999834 11.093 88.45531860000001 11.221 114.29623500000147 11.194 109.734824700001 11.187 96.97291220000179 12.0 80.5555584000001 11.042 106.53795319999843 11.143 63.9261039999988 11.045 85.56925019999821 11.137 109.9220767999978 11.169 89.2482273999991 10.096 106.98543839999873 11.19 73.70264010000008 11.973 89.5296791999996 11.215 85.74145539999984 11.069 101.64621080000106 11.189 92.66016750000131 11.236 87.8140196000002 11.079 100.7255799999988 11.176)
Error minima by case: (0.497 9 0.2295 6 0.2913 9 0.0311 7 0.3632 5 0.4694 9 0.5707 5 0.5144 6 0.0791 6 0.0797 6 0.1842 9 0.0626 5 0.1326 6 0.759 5 0.5563 6 0.2824 6 0.3523 9 0.0912 5 0.2547 10 0.7457 6 0.4178 9 0.2887 5 0.7715 7 0.4673 8 0.4825 10)
Average genome size in population (length): 51.598
Average program size in population (points): 52.598
Average percent parens in population: 0.020
Minimum age in population: 21.0872802734375
Maximum age in population: 25.67483520507812
Average age in population: 23.76437719726562
Median age in population: 23.77238464355469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.073
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 21394849
--- Timings ---
Current time: 1529615638452 milliseconds
Total Time:          58.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.7 seconds, 46.1%
Fitness Testing:     24.8 seconds, 42.7%
Report:               6.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_49} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_add} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_sub} {:instruction -38} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_min} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_stackdepth float_yank integer_sub float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger float_mult float_dup_times float_add integer_mod integer_pop float_dup integer_inc tagged_49 float_dup_items integer_yank integer_max integer_add in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max float_stackdepth integer_dup integer_min integer_sub -38 float_mod float_dup float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove float_min integer_stackdepth integer_add integer_inc integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2521.586464700005
Median total errors in population: 287.0456
Error averages by case: (84.21310699999856 11.984 83.68556800000091 11.027 75.34450919999884 11.879 87.31567899999895 11.203 79.65751680000058 11.021 97.81263740000125 11.167 84.3699178999981 11.075 88.54696000000003 11.204 104.02994690000146 11.169 101.46646230000097 11.178 96.46124170000176 11.998 84.23727739999977 11.036 101.37432809999848 11.114 67.61564309999882 11.031 87.20966999999803 11.106 104.85385249999788 11.153 90.03621879999909 10.108 102.58197889999933 11.165 72.49351379999932 11.974 88.18363849999959 11.185 85.0006504000004 11.067 97.54215060000028 11.16 90.81035010000144 11.208 87.32885090000065 11.113 98.91579539999877 11.174)
Error minima by case: (0.503 9 0.2295 2 0.2913 9 0.0311 2 0.3632 2 0.4694 9 0.5707 2 0.5144 2 0.0791 3 0.0797 3 0.1842 9 0.0626 2 0.1326 3 0.759 2 0.5563 2 0.2824 3 0.3523 9 0.0912 3 0.2547 10 0.7457 2 0.4178 8 0.2887 3 0.7715 2 0.5327 8 0.4825 9)
Average genome size in population (length): 51.393
Average program size in population (points): 52.393
Average percent parens in population: 0.020
Minimum age in population: 22.0872802734375
Maximum age in population: 27.42543029785156
Average age in population: 25.22371153259277
Median age in population: 25.28675842285156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.066
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 22679699
--- Timings ---
Current time: 1529615641651 milliseconds
Total Time:          61.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.2 seconds, 46.1%
Fitness Testing:     26.1 seconds, 42.5%
Report:               6.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_div} {:instruction float_dup} {:instruction float_pop} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_div} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction tag_integer_656} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_add})
Best program: (float_stackdepth integer_add integer_div float_dup float_pop float_dec integer_sub float_frominteger in1 float_dup_times float_pop integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_div in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc tag_integer_656 integer_dup integer_dec float_dup_times integer_stackdepth integer_stackdepth integer_add integer_inc integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3149.242797700004
Median total errors in population: 287.0456
Error averages by case: (108.42999899999839 11.955 111.13186200000087 11.043 93.22106149999873 11.854 116.88634169999769 11.221 106.57880960000197 11.049 119.58166320000124 11.194 114.5443777999981 11.096 119.02395600000003 11.23 127.52109930000151 11.191 123.45859310000107 11.186 116.71725440000192 12.002 114.11646040000106 11.063 124.99990339999839 11.126 92.68556000000049 11.049 113.95819279999807 11.126 128.5185815999978 11.171 106.36405669999907 10.124 125.86434079999876 11.183 103.12459930000087 11.975 119.16182779999961 11.214 109.45102739999909 11.088 119.91043680000125 11.182 119.17340400000148 11.243 112.08073909999949 11.105 121.88164999999879 11.187)
Error minima by case: (0.503 9 0.2295 4 0.2913 8 0.0311 5 0.3632 4 0.4694 9 0.4293 4 0.4856 5 0.0791 3 0.0797 3 0.1842 10 0.0626 4 0.1326 3 0.241 4 0.4437 4 0.2824 3 0.3523 9 0.0912 2 0.2547 9 0.2543 5 0.4178 8 0.2887 3 0.2285 5 0.5327 8 0.4825 9)
Average genome size in population (length): 51.116
Average program size in population (points): 52.116
Average percent parens in population: 0.020
Minimum age in population: 23.0872802734375
Maximum age in population: 28.78597259521484
Average age in population: 26.67524289703369
Median age in population: 26.70519638061523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.073
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 23957674
--- Timings ---
Current time: 1529615644880 milliseconds
Total Time:          64.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.8 seconds, 46.2%
Fitness Testing:     27.3 seconds, 42.4%
Report:               7.3 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_yank} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_shove} {:instruction tagged_506} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_dup} {:instruction in2} {:instruction integer_pop} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_pop} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_yank float_add integer_mod integer_pop integer_shove tagged_506 float_dec float_dup_items integer_yank integer_dup_times float_swap integer_dup in2 integer_pop float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_sub float_pop float_mod float_dup float_swap float_mod integer_dup_items float_swap float_mod float_inc float_min integer_dup integer_dec float_dup_times integer_shove integer_div integer_stackdepth)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2673.4053449000044
Median total errors in population: 287.0456
Error averages by case: (86.18355979999858 11.954 90.73550980000088 11.012 70.92659219999878 11.873 93.30755359999839 11.18 79.59933320000106 11.019 109.70047960000123 11.133 85.96105489999832 11.067 93.15844440000002 11.19 114.17468130000138 11.154 110.69818710000088 11.14 107.86817540000177 11.995 87.83808030000036 11.017 113.86768799999852 11.096 70.36347189999921 11.017 89.89343659999827 11.101 116.5225119999979 11.142 97.8605227999991 10.09 114.11125599999914 11.147 75.96843140000023 11.967 93.3569089999996 11.178 87.37738169999973 11.058 108.31149950000076 11.14 94.91372000000122 11.214 89.69238940000002 11.069 110.9114749999988 11.15)
Error minima by case: (0.497 9 0.2295 4 0.2913 9 0.0311 2 0.3632 2 0.4694 9 0.5707 2 0.5144 2 0.0791 3 0.0797 3 0.1842 10 0.0626 2 0.1326 5 0.759 2 0.5563 2 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 2 0.4178 9 0.2887 5 0.7715 2 0.4673 9 0.4825 9)
Average genome size in population (length): 50.362
Average program size in population (points): 51.362
Average percent parens in population: 0.020
Minimum age in population: 24.0872802734375
Maximum age in population: 30.34926986694336
Average age in population: 28.21082381439209
Median age in population: 28.24393463134766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.068
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 25216799
--- Timings ---
Current time: 1529615648156 milliseconds
Total Time:          67.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.4 seconds, 46.3%
Fitness Testing:     28.6 seconds, 42.3%
Report:               7.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_sin} {:instruction float_cos} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction integer_yank} {:instruction float_min})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_mod integer_pop integer_dup_items integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_add integer_dup in2 float_mult integer_pop float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times float_sin float_cos integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod integer_dup_items float_swap integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_swap integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod float_dup float_swap float_mod integer_yank float_min)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2731.486601900004
Median total errors in population: 287.0456
Error averages by case: (92.46357189999885 11.98 94.4256896000009 11.058 80.37143189999911 11.886 99.03878289999807 11.232 88.60583440000113 11.066 104.96359280000125 11.179 93.87701289999848 11.102 97.93945740000002 11.215 110.28378870000137 11.2 108.27830290000088 11.197 101.98341160000163 11.999 94.0441826000005 11.065 108.32613819999857 11.143 83.73484409999995 11.076 95.86908309999836 11.136 110.99897649999792 11.185 94.33898439999905 10.124 108.95976449999874 11.199 86.64998250000048 11.992 98.33066669999958 11.226 92.72372919999967 11.111 103.94655190000115 11.193 99.22196010000117 11.249 94.7452992999998 11.111 106.24956179999877 11.192)
Error minima by case: (0.503 8 0.2295 4 0.2913 9 0.0311 5 0.3632 4 0.4694 8 0.5707 4 0.5144 5 0.0791 3 0.0797 3 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 5 0.4178 9 0.2887 5 0.7715 5 0.5327 8 0.4825 10)
Average genome size in population (length): 49.94
Average program size in population (points): 50.94
Average percent parens in population: 0.020
Minimum age in population: 26.66282081604004
Maximum age in population: 31.81970977783203
Average age in population: 29.6831252822876
Median age in population: 29.70440769195557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.066
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 26465465
--- Timings ---
Current time: 1529615651311 milliseconds
Total Time:          70.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.8 seconds, 46.3%
Fitness Testing:     29.9 seconds, 42.2%
Report:               8.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_rot float_pop integer_swap integer_dup print_integer integer_sub float_pop integer_swap integer_dup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2355.2203334000046
Median total errors in population: 287.0456
Error averages by case: (77.44256199999906 11.968 82.01835350000081 11.052 66.66784839999926 11.876 81.4987373999988 11.217 72.73350539999993 11.067 91.54401020000117 11.188 78.83504529999855 11.08 81.46948310000003 11.212 92.295817000001 11.174 89.33133900000055 11.172 90.50162280000148 12.007 77.63832009999992 11.067 94.37494219999884 11.132 61.98577079999902 11.051 78.82694099999854 11.128 97.13331279999821 11.153 82.85181819999926 10.117 95.03880639999932 11.179 76.34945740000002 11.984 82.14861449999961 11.203 77.12463680000006 11.1 91.48138650000054 11.179 82.25953640000102 11.228 79.13999120000048 11.104 93.67947499999885 11.211)
Error minima by case: (0.503 9 0.2295 2 0.2913 9 0.0311 3 0.3632 3 0.4694 8 0.4293 3 0.4856 3 0.0791 3 0.0797 2 0.1842 9 0.0626 3 0.1326 3 0.241 3 0.4437 3 0.2824 3 0.3523 9 0.0912 2 0.2547 10 0.2543 4 0.4178 9 0.2887 3 0.2285 4 0.5327 8 0.4825 10)
Average genome size in population (length): 49.502
Average program size in population (points): 50.502
Average percent parens in population: 0.021
Minimum age in population: 27.66282081604004
Maximum age in population: 33.44542026519775
Average age in population: 31.13192901325226
Median age in population: 31.18613576889038
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.064
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 27703240
--- Timings ---
Current time: 1529615654345 milliseconds
Total Time:          74.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.3 seconds, 46.3%
Fitness Testing:     31.1 seconds, 42.0%
Report:               8.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_min} {:instruction float_dup_items} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction float_max} {:instruction integer_dup} {:instruction print_integer} {:instruction float_rot} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction float_dup_times})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_yankdup float_dup_items float_min float_dup_items in2 float_mult float_swap in1 float_yank in1 in2 float_pop in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max float_max integer_dup print_integer float_rot float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer float_dup_times)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2747.0584418000044
Median total errors in population: 287.0456
Error averages by case: (91.1385799999985 11.987 98.70068150000084 11.037 74.45759619999912 11.896 98.11236799999858 11.186 86.90052640000098 11.051 106.9266430000012 11.171 95.3477866999983 11.076 98.84887360000002 11.181 109.37431410000153 11.162 104.47990440000109 11.149 103.88538580000191 12.012 95.03221320000034 11.045 112.57349459999843 11.112 78.39012499999988 11.038 95.09076919999826 11.111 116.62209999999779 11.148 93.6776934999991 10.113 113.72279999999961 11.155 89.0332403000004 11.99 99.95270739999961 11.179 91.752308 11.087 107.33359160000033 11.151 100.13392000000128 11.21 95.25858930000031 11.097 109.7842299999988 11.184)
Error minima by case: (0.503 9 0.2295 3 0.2913 9 0.0311 4 0.3632 3 0.4694 9 0.5707 3 0.5144 4 0.0791 3 0.0797 3 0.1842 9 0.0626 3 0.1326 5 0.759 3 0.5563 3 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.7457 4 0.4178 10 0.2887 5 0.7715 4 0.5327 9 0.4825 10)
Average genome size in population (length): 49.901
Average program size in population (points): 50.901
Average percent parens in population: 0.020
Minimum age in population: 29.72332191467285
Maximum age in population: 34.44542026519775
Average age in population: 32.60066571378708
Median age in population: 32.66899442672729
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.069
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 28950815
--- Timings ---
Current time: 1529615657606 milliseconds
Total Time:          77.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.8 seconds, 46.3%
Fitness Testing:     32.5 seconds, 42.1%
Report:               8.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction float_min} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yank} {:instruction float_add} {:instruction integer_mod} {:instruction in2} {:instruction integer_shove} {:instruction tagged_506} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_dup} {:instruction in2} {:instruction integer_pop} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction float_add})
Best program: (float_stackdepth integer_add float_min float_dup integer_sub integer_stackdepth integer_sub float_frominteger float_add integer_mod integer_pop float_dup integer_inc float_dec float_yank float_add integer_mod in2 integer_shove tagged_506 float_dec float_dup_items integer_yank integer_dup_times float_swap integer_dup in2 integer_pop float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max float_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2662.7600123000043
Median total errors in population: 287.0456
Error averages by case: (91.97463179999862 11.952 93.50826730000075 11.018 76.7581913999989 11.856 94.03750939999829 11.193 86.96169380000161 11.042 98.4072348000011 11.164 95.39595489999827 11.065 98.69546830000002 11.187 107.13163050000148 11.146 101.73398410000101 11.152 96.58746480000167 11.985 95.73030460000062 11.046 103.66989239999862 11.09 73.08291279999997 11.029 95.24825269999826 11.112 108.03609999999799 11.116 91.44469349999919 10.092 105.01179999999935 11.135 87.01746960000061 11.968 98.70656289999961 11.184 91.54072799999948 11.067 98.56890120000047 11.135 98.52334490000129 11.21 93.84168359999984 11.079 100.9643349999989 11.158)
Error minima by case: (0.497 9 0.2295 3 0.2913 8 0.0311 5 0.3632 4 0.4694 10 0.4293 4 0.4856 5 0.0791 4 0.0797 3 0.1842 9 0.0626 4 0.1326 4 0.241 4 0.4437 4 0.2824 4 0.3523 8 0.0912 3 0.2547 10 0.2543 6 0.4178 8 0.2887 4 0.2285 6 0.4673 9 0.4825 10)
Average genome size in population (length): 49.696
Average program size in population (points): 50.696
Average percent parens in population: 0.020
Minimum age in population: 31.48434829711914
Maximum age in population: 35.92344188690186
Average age in population: 34.09147772145271
Median age in population: 34.10939574241638
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.072
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 30193240
--- Timings ---
Current time: 1529615660637 milliseconds
Total Time:          80.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.3 seconds, 46.4%
Fitness Testing:     33.7 seconds, 42.0%
Report:               9.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_yank} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_rot} {:instruction float_pop} {:instruction float_mod} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup})
Best program: (float_stackdepth integer_add integer_min float_dup float_dup float_dec integer_sub float_frominteger in1 float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_fromfloat integer_dup float_yank float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_rot float_pop float_mod integer_dup print_integer integer_sub float_pop integer_swap integer_dup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2734.798806300004
Median total errors in population: 287.0456
Error averages by case: (92.85394299999872 11.969 96.80529800000079 11.033 78.56977719999897 11.859 95.39553339999827 11.222 88.27424960000093 11.041 107.30949980000112 11.183 93.17715719999832 11.092 96.65242200000002 11.226 110.71928580000144 11.177 107.55170890000097 11.184 106.17167560000175 12.003 94.21677840000065 11.046 110.08915759999852 11.131 77.11163699999963 11.04 96.21849929999833 11.122 112.84081759999793 11.16 98.34218139999918 10.113 110.70989119999874 11.178 81.65243649999991 11.978 97.0506337999996 11.214 93.12606879999957 11.082 106.52447860000092 11.185 98.11747150000122 11.24 95.82200159999981 11.097 108.73220249999889 11.189)
Error minima by case: (0.497 9 0.2295 4 0.2913 9 0.0311 6 0.3632 4 0.4694 9 0.5707 4 0.5144 6 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 6 0.4178 9 0.2887 5 0.7715 6 0.4673 9 0.4825 10)
Average genome size in population (length): 49.201
Average program size in population (points): 50.201
Average percent parens in population: 0.021
Minimum age in population: 33.23220634460449
Maximum age in population: 37.61723172664642
Average age in population: 35.58631257092953
Median age in population: 35.65443074703217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.08
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 31423290
--- Timings ---
Current time: 1529615663635 milliseconds
Total Time:          83.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.7 seconds, 46.5%
Fitness Testing:     34.9 seconds, 41.9%
Report:               9.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_add} {:instruction tagged_402} {:instruction float_dup} {:instruction float_pop} {:instruction float_dec} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_inc} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction integer_pop} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction integer_div} {:instruction in1} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup})
Best program: (float_stackdepth float_stackdepth integer_add tagged_402 float_dup float_pop float_dec float_flush float_frominteger float_stackdepth float_dup_times float_pop integer_mod integer_pop integer_shove integer_inc in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec integer_max integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 integer_pop in1 float_yank in1 in2 float_sub in1 in1 float_yank in1 in2 integer_div in1 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup integer_div integer_sub integer_yank float_mod float_dup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2331.6722669000046
Median total errors in population: 287.0456
Error averages by case: (80.64454799999866 11.949 81.67205350000083 11.038 70.14568409999899 11.857 82.20365849999884 11.221 76.30792400000082 11.058 84.37547960000114 11.172 80.28972499999824 11.091 82.30405820000001 11.196 90.56294690000124 11.171 86.71546230000072 11.181 82.41335960000151 12.003 80.28449560000004 11.064 88.92841179999876 11.108 62.20197699999881 11.053 81.77642089999823 11.132 92.98118319999811 11.144 78.99757969999916 10.106 89.95044159999941 11.154 77.22000120000004 11.968 82.74737809999957 11.195 80.32522240000009 11.08 85.57080910000025 11.154 83.44090350000124 11.222 82.66510310000041 11.089 86.37443999999887 11.167)
Error minima by case: (0.497 7 0.2295 4 0.2913 9 0.0311 6 0.3632 4 0.4694 8 0.5707 4 0.5144 6 0.0791 5 0.0797 5 0.1842 10 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 6 0.4178 8 0.2887 5 0.7715 6 0.4673 8 0.4825 8)
Average genome size in population (length): 49.137
Average program size in population (points): 50.137
Average percent parens in population: 0.021
Minimum age in population: 34.58732557296753
Maximum age in population: 38.86824822425842
Average age in population: 37.03728806728125
Median age in population: 37.07579529285431
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.057
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 32651740
--- Timings ---
Current time: 1529615666940 milliseconds
Total Time:          86.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.3 seconds, 46.6%
Fitness Testing:     36.1 seconds, 41.8%
Report:               9.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_frominteger} {:instruction in1} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction float_flush} {:instruction integer_div} {:instruction float_min} {:instruction integer_dup} {:instruction integer_shove} {:instruction tag_float_448} {:instruction float_tan} {:instruction float_frominteger} {:instruction in2})
Best program: (float_stackdepth float_frominteger in1 float_frominteger in1 float_dup_times float_mod in2 float_sub in1 in1 float_yank in1 in2 float_sub in1 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap float_flush integer_div float_min integer_dup integer_shove tag_float_448 float_tan float_frominteger in2)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 2781.3849238000043
Median total errors in population: 287.0456
Error averages by case: (96.33403499999858 11.982 99.48014050000087 11.062 85.10339189999883 11.879 102.16711919999796 11.243 94.05761600000163 11.072 102.15435720000117 11.197 100.32178669999816 11.12 103.91281600000002 11.227 109.07991860000142 11.198 104.44834650000101 11.212 100.68909640000167 12.021 100.68127580000093 11.079 105.88996419999853 11.137 81.13253499999992 11.071 100.68410029999819 11.149 110.09125279999793 11.178 95.0929888999991 10.118 107.07852639999902 11.195 93.45020270000066 11.986 103.8057073999996 11.227 95.98787659999961 11.097 101.31845770000078 11.196 103.50846300000133 11.262 99.11613149999972 11.108 104.58881749999883 11.194)
Error minima by case: (0.497 8 0.2295 4 0.2913 10 0.0311 5 0.3632 4 0.4694 9 0.5707 4 0.5144 5 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 5 0.4178 10 0.2887 5 0.7715 5 0.4673 9 0.4825 10)
Average genome size in population (length): 49.306
Average program size in population (points): 50.306
Average percent parens in population: 0.021
Minimum age in population: 35.58732557296753
Maximum age in population: 40.38089638948441
Average age in population: 38.51444437691569
Median age in population: 38.55522003769875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.069
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 33884415
--- Timings ---
Current time: 1529615670084 milliseconds
Total Time:          89.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.9 seconds, 46.7%
Fitness Testing:     37.4 seconds, 41.6%
Report:              10.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_add} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_div} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_inc} {:instruction float_flush} {:instruction float_shove} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_stackdepth})
Best program: (integer_dup integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger integer_fromfloat float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dec float_add float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add in2 float_sin in1 integer_fromfloat integer_add float_div float_dup_times print_integer integer_mod integer_pop integer_swap integer_dup print_integer integer_sub float_dup_times float_mod integer_swap integer_add integer_inc float_flush float_shove float_swap float_mod float_inc float_min integer_dup_items integer_dec float_dup_times integer_shove integer_div integer_stackdepth)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2954.9200127000036
Median total errors in population: 287.0456
Error averages by case: (104.29999299999835 11.964 111.65348500000088 11.052 88.64918759999856 11.874 110.74159049999733 11.202 99.00256420000231 11.074 110.7896222000012 11.203 106.51738999999797 11.087 110.60699920000002 11.203 113.49412760000149 11.182 107.99454950000103 11.179 106.74449140000182 12.016 107.44071940000138 11.058 114.13943379999841 11.131 85.26049760000046 11.054 108.85842469999797 11.13 118.46499359999783 11.162 97.77216959999912 10.136 114.67179679999843 11.168 100.51512750000126 11.995 111.01161549999964 11.208 104.20660959999913 11.111 108.52716900000128 11.168 111.90297650000144 11.231 107.41620639999931 11.097 113.34427249999881 11.209)
Error minima by case: (0.503 8 0.2295 4 0.2913 8 0.0311 5 0.3632 4 0.4694 9 0.4293 4 0.4856 5 0.0791 5 0.0797 5 0.1842 10 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 8 0.0912 4 0.2547 9 0.2543 6 0.4178 9 0.2887 5 0.2285 6 0.5327 9 0.4825 10)
Average genome size in population (length): 49.217
Average program size in population (points): 50.217
Average percent parens in population: 0.021
Minimum age in population: 37.41331076622009
Maximum age in population: 41.81705987453461
Average age in population: 40.03097723509371
Median age in population: 40.09304310381413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.074
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 35114865
--- Timings ---
Current time: 1529615673024 milliseconds
Total Time:          92.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.3 seconds, 46.7%
Fitness Testing:     38.6 seconds, 41.6%
Report:              10.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction in1} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction integer_yank} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_shove} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction in2})
Best program: (float_stackdepth float_dup_items float_dup integer_sub float_dec integer_dup_items float_frominteger in1 float_frominteger in1 float_dup_times float_min integer_pop float_dup integer_inc float_add integer_min integer_pop integer_yank integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult integer_shove in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap in2)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2477.3034128000045
Median total errors in population: 287.0456
Error averages by case: (85.4475319999985 11.967 86.52474700000089 11.057 73.82451799999905 11.89 89.4579588999984 11.226 80.44887620000114 11.077 93.49954080000127 11.177 86.03602529999806 11.108 88.72350320000002 11.198 95.82183290000152 11.196 93.69107670000102 11.182 89.7020931000018 12.018 86.10119220000031 11.078 94.51307479999838 11.149 73.36102799999956 11.065 89.09912039999791 11.133 95.31877039999773 11.149 83.34357969999908 10.124 93.4589309999996 11.162 79.39665570000032 12.0 89.20456469999958 11.219 84.73902940000006 11.104 91.34225260000035 11.163 91.26443600000148 11.237 87.24859880000027 11.09 94.77047499999875 11.195)
Error minima by case: (0.503 9 0.2295 5 0.2913 9 0.0311 4 0.3632 4 0.4694 9 0.5707 4 0.5144 5 0.0791 4 0.0797 4 0.1842 8 0.0626 4 0.1326 5 0.759 3 0.5563 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.7457 5 0.4178 9 0.2887 5 0.7715 5 0.5327 9 0.4825 9)
Average genome size in population (length): 48.933
Average program size in population (points): 49.933
Average percent parens in population: 0.021
Minimum age in population: 38.97715413570404
Maximum age in population: 43.32130867987871
Average age in population: 41.49247779803723
Median age in population: 41.54379783943295
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.047
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 36338265
--- Timings ---
Current time: 1529615676054 milliseconds
Total Time:          95.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.8 seconds, 46.8%
Fitness Testing:     39.8 seconds, 41.6%
Report:              11.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_min} {:instruction float_dup} {:instruction float_pop} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_dup_items} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction float_sin} {:instruction float_dup} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_mod} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_dup} {:instruction print_integer} {:instruction float_rot} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_stackdepth})
Best program: (float_stackdepth integer_min float_dup float_pop float_dec integer_sub float_frominteger in1 integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_dup_items in1 float_yank in1 float_sin float_dup float_yank in1 in2 float_sub in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times float_mod integer_mod integer_max integer_swap integer_dup integer_yank float_flush integer_fromfloat float_dup_times print_integer integer_dup print_integer float_rot integer_yank float_mod integer_mod integer_max integer_swap integer_dup integer_stackdepth)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2767.698503100004
Median total errors in population: 287.0456
Error averages by case: (96.39181939999861 11.976 96.04710650000084 11.059 78.45613709999874 11.877 101.13407499999778 11.227 90.72138410000169 11.057 101.62736220000117 11.216 97.57478549999809 11.083 102.41776490000002 11.202 111.72807860000144 11.18 107.51013680000096 11.176 97.95664330000163 12.009 96.84057650000094 11.056 108.8538972999985 11.128 80.99550559999997 11.054 96.11374429999812 11.118 113.10967269999782 11.164 91.51686229999919 10.131 110.04475509999892 11.183 99.99493370000118 11.981 102.1297895999996 11.217 95.86504069999914 11.122 105.4431726000009 11.167 101.56664010000144 11.237 99.00120919999947 11.119 103.70640999999884 11.212)
Error minima by case: (0.503 9 0.2295 3 0.2913 9 0.0311 2 0.3632 2 0.4694 9 0.5707 2 0.4856 2 0.0791 3 0.0797 3 0.1842 8 0.0626 2 0.1326 5 0.759 2 0.5563 2 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 2 0.4178 9 0.2887 5 0.2285 2 0.5327 9 0.4825 10)
Average genome size in population (length): 49.522
Average program size in population (points): 50.522
Average percent parens in population: 0.021
Minimum age in population: 40.08472947776318
Maximum age in population: 45.07337019219995
Average age in population: 43.02975571935996
Median age in population: 43.07508730888367
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.059
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 37576440
--- Timings ---
Current time: 1529615679301 milliseconds
Total Time:          98.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.4 seconds, 46.9%
Fitness Testing:     41.1 seconds, 41.6%
Report:              11.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_add} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction float_dup_times})
Best program: (integer_flush integer_add float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_dup_times float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup integer_dup_times integer_add integer_shove in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_dup print_integer integer_sub integer_yank float_mod integer_dup_items float_swap float_dup_items float_inc float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer integer_sub float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer float_dup_times)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2751.942638700005
Median total errors in population: 287.0456
Error averages by case: (94.78347729999854 11.994 95.47440090000083 11.099 84.26638189999868 11.887 96.97742909999853 11.267 87.17434440000088 11.099 103.78321400000117 11.232 94.5080597999982 11.124 96.47920309999999 11.255 112.13489030000143 11.234 108.60339010000094 11.225 101.5747546000017 12.037 93.52489600000018 11.098 110.12849459999849 11.177 79.79678999999955 11.092 95.18109579999819 11.168 113.87581759999782 11.214 96.52241989999911 10.146 111.3697087999991 11.223 94.04800410000041 12.011 97.51206849999959 11.264 94.75370779999966 11.153 106.48390120000073 11.225 98.03812200000134 11.286 97.44420689999988 11.134 105.60985999999883 11.25)
Error minima by case: (0.503 9 0.2295 4 0.2913 10 0.0311 5 0.3632 4 0.4694 8 0.4293 4 0.4856 4 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 4 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.2543 5 0.4178 9 0.2887 5 0.2285 5 0.5327 8 0.4825 9)
Average genome size in population (length): 49.042
Average program size in population (points): 50.042
Average percent parens in population: 0.021
Minimum age in population: 42.04481467604637
Maximum age in population: 46.37782131321728
Average age in population: 44.48344635643996
Median age in population: 44.51323536038399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.068
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 38802715
--- Timings ---
Current time: 1529615682343 milliseconds
Total Time:         102.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.8 seconds, 46.9%
Fitness Testing:     42.4 seconds, 41.5%
Report:              11.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_277} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction print_integer} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction integer_inc} {:instruction float_inc})
Best program: (tag_float_277 integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_rot integer_pop float_dup integer_dup_times float_dec float_dup integer_mod float_dec float_frominteger float_dup_items integer_dup_times in2 float_sin in1 integer_fromfloat integer_add integer_mod integer_max integer_swap print_integer print_integer integer_sub integer_yank float_mod float_dup float_swap integer_inc float_inc)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 2796.7483207000046
Median total errors in population: 287.0456
Error averages by case: (100.64941799999838 11.999 100.44215700000095 11.104 92.13444859999859 11.878 102.98824359999766 11.333 95.246252800002 11.131 102.47480580000125 11.275 99.52478669999793 11.156 102.46521520000002 11.301 107.19420670000144 11.28 105.71770890000099 11.263 101.72283360000183 12.017 99.57221320000085 11.144 102.89427919999837 11.221 85.33284800000028 11.115 102.14343809999788 11.182 104.9549007999977 11.234 97.75401069999904 10.179 103.37935039999915 11.255 93.71699590000064 12.012 102.7119616999996 11.307 100.59074679999954 11.161 100.6626543000007 11.25 104.11700600000148 11.321 102.40535619999984 11.182 103.37648249999876 11.276)
Error minima by case: (0.503 9 0.2295 2 0.2913 9 0.0311 3 0.3632 2 0.4694 9 0.4293 2 0.4856 3 0.0791 2 0.0797 2 0.1842 8 0.0626 2 0.1326 2 0.241 2 0.4437 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.2543 3 0.4178 9 0.2887 2 0.2285 3 0.5327 9 0.4825 10)
Average genome size in population (length): 48.845
Average program size in population (points): 49.845
Average percent parens in population: 0.021
Minimum age in population: 43.2673162445426
Maximum age in population: 48.12466514203697
Average age in population: 45.95691040791851
Median age in population: 46.01531662046909
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.06
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 40024165
--- Timings ---
Current time: 1529615685296 milliseconds
Total Time:         105.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.3 seconds, 46.9%
Fitness Testing:     43.5 seconds, 41.5%
Report:              12.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_min} {:instruction float_dup_items} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction tag_float_836} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction float_stackdepth} {:instruction integer_yank})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_stackdepth integer_mod float_min float_dup_items in2 float_mult float_swap tag_float_836 float_yank in1 in2 float_pop in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max float_stackdepth integer_yank)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2955.933915500004
Median total errors in population: 287.0456
Error averages by case: (105.64196899999855 11.99 111.64363280000084 11.078 85.66502239999882 11.891 109.78092899999756 11.253 103.65142200000224 11.096 109.68786680000112 11.218 107.58048639999815 11.124 110.15928240000002 11.241 110.03560220000128 11.216 107.43610740000085 11.222 107.16491460000168 12.025 108.16738280000129 11.095 112.88415759999856 11.154 90.50203750000044 11.096 109.12970399999811 11.152 115.414382399998 11.196 99.38795799999916 10.152 113.5358911999987 11.213 102.5998164000011 11.993 110.26292129999963 11.242 105.3908493999991 11.118 109.42647860000115 11.204 110.54550780000135 11.257 107.74094479999933 11.112 110.9506486999989 11.21)
Error minima by case: (0.497 9 0.2295 8 0.2913 9 0.0311 9 0.3632 9 0.4694 7 0.5707 8 0.5144 9 0.0791 9 0.0797 9 0.1842 9 0.0626 8 0.1326 8 0.759 9 0.5563 8 0.2824 9 0.3523 9 0.0912 8 0.2547 10 0.7457 8 0.4178 8 0.2887 9 0.7715 9 0.4673 9 0.4825 7)
Average genome size in population (length): 48.531
Average program size in population (points): 49.531
Average percent parens in population: 0.021
Minimum age in population: 44.2673162445426
Maximum age in population: 49.37713839439675
Average age in population: 47.43684384657489
Median age in population: 47.48580872127786
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.055
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 41237890
--- Timings ---
Current time: 1529615688421 milliseconds
Total Time:         108.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.8 seconds, 46.9%
Fitness Testing:     44.9 seconds, 41.5%
Report:              12.4 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_add} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_max} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_add} {:instruction integer_pop} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_cos} {:instruction integer_max} {:instruction integer_swap} {:instruction float_shove} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer})
Best program: (integer_flush integer_add float_frominteger in1 float_dup_times float_add integer_mod integer_pop integer_max integer_add float_stackdepth integer_add integer_min float_dup integer_inc float_dec float_dup_items integer_max float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sin in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_add integer_pop float_dup_times print_integer float_cos integer_max integer_swap float_shove print_integer integer_swap integer_dup print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3015.5988323000042
Median total errors in population: 287.0456
Error averages by case: (106.59057269999842 11.996 110.44079290000091 11.098 91.9559398999986 11.889 111.48373719999772 11.271 103.32206770000198 11.111 113.67439760000126 11.25 108.8572070999979 11.146 112.47560770000003 11.26 116.1838620000015 11.257 113.33951340000101 11.244 111.31701780000175 12.031 108.59031130000092 11.118 114.14636199999838 11.185 94.90535990000039 11.104 109.13793219999786 11.166 116.7492527999977 11.217 102.76865839999905 10.174 114.49652639999913 11.22 104.73766280000096 12.018 112.5477855999996 11.279 106.73250539999943 11.137 111.73532380000086 11.215 112.83449480000148 11.301 109.09401089999967 11.14 115.40992999999875 11.245)
Error minima by case: (0.503 9 0.2295 3 0.2913 8 0.0311 5 0.3632 4 0.4694 9 0.5707 4 0.4856 5 0.0791 5 0.0797 4 0.1842 10 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 6 0.4178 9 0.2887 5 0.2285 6 0.5327 9 0.4825 9)
Average genome size in population (length): 48.165
Average program size in population (points): 49.165
Average percent parens in population: 0.021
Minimum age in population: 45.2673162445426
Maximum age in population: 50.89370481227525
Average age in population: 48.86770384988515
Median age in population: 48.90222825808451
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.066
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 42442340
--- Timings ---
Current time: 1529615691388 milliseconds
Total Time:         111.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.2 seconds, 47.0%
Fitness Testing:     46.1 seconds, 41.5%
Report:              12.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_mult} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_yank} {:instruction float_yank} {:instruction float_dup_times} {:instruction -72.01937136077206} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction 68.28624657778892} {:instruction tag_integer_796} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction integer_shove} {:instruction tag_float_448} {:instruction float_tan} {:instruction float_frominteger})
Best program: (float_stackdepth integer_add float_dup integer_sub float_dec integer_sub integer_add float_frominteger integer_mult integer_sub float_dup integer_sub float_frominteger float_yank float_yank float_dup_times -72.01937136077206 float_add integer_mod integer_pop integer_mod float_pop float_yankdup float_dup_items integer_inc float_add integer_mod integer_pop float_dup in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap 68.28624657778892 tag_integer_796 integer_sub float_dup_times float_flush float_dup float_swap float_mod float_inc float_min integer_dup integer_shove tag_float_448 float_tan float_frominteger)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2073.2294767000053
Median total errors in population: 287.0456
Error averages by case: (65.13060999999885 11.994 74.19596000000084 11.071 54.66421789999907 11.916 71.97545649999942 11.202 65.72741759999982 11.077 80.3566840000012 11.164 70.92676119999847 11.107 73.72627680000002 11.185 74.60413340000126 11.199 71.88165780000074 11.185 77.87814880000161 12.026 70.36334159999964 11.084 78.61873779999874 11.152 61.12496699999881 11.076 69.89712709999844 11.13 81.082571999998 11.167 69.42903489999912 10.117 79.0785359999997 11.169 65.4633154999993 12.015 73.68306119999963 11.205 64.71132160000104 11.104 75.05327349999979 11.175 73.42346550000114 11.217 67.19844900000122 11.101 82.0179499999988 11.179)
Error minima by case: (0.503 10 0.2295 7 0.2913 10 0.0311 7 0.3632 6 0.4694 9 0.4293 6 0.4856 8 0.0791 7 0.0797 7 0.1842 9 0.0626 6 0.1326 8 0.241 5 0.4437 6 0.2824 7 0.3523 9 0.0912 6 0.2547 10 0.2543 8 0.4178 10 0.2887 8 0.2285 8 0.5327 9 0.4825 9)
Average genome size in population (length): 48.338
Average program size in population (points): 49.338
Average percent parens in population: 0.021
Minimum age in population: 47.33825625432655
Maximum age in population: 52.18669822858647
Average age in population: 50.35414422244777
Median age in population: 50.41740004147869
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.045
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 43651115
--- Timings ---
Current time: 1529615694446 milliseconds
Total Time:         114.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.7 seconds, 47.1%
Fitness Testing:     47.3 seconds, 41.4%
Report:              13.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction float_add} {:instruction integer_sub} {:instruction integer_yank} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_min} {:instruction float_dup_items} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_sin} {:instruction float_cos} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction 57.596532213470425} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_pop} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_max} {:instruction float_rot} {:instruction integer_yank} {:instruction float_mod})
Best program: (float_stackdepth integer_min integer_min float_add integer_sub integer_yank integer_sub float_frominteger float_dup_times float_dup_times float_dup_items float_min float_dup_items in2 float_mult float_swap in1 float_yank in1 float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times float_sin float_cos integer_max integer_swap integer_dup print_integer integer_sub 57.596532213470425 float_mod integer_dup_items float_swap integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_pop float_flush integer_fromfloat float_dup_times print_integer float_dup_times float_max float_rot integer_yank float_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2416.811050700005
Median total errors in population: 287.0456
Error averages by case: (82.17766479999857 12.018 88.09232680000096 11.044 73.65163879999878 11.92 83.07107969999852 11.206 80.32572720000114 11.064 90.73792880000133 11.228 84.03846289999804 11.078 85.29016720000003 11.183 88.41602600000131 11.173 86.96654200000083 11.17 88.1082278000018 12.015 83.35564860000034 11.066 92.97567699999848 11.134 73.46346179999928 11.054 82.64657229999803 11.1 95.20774799999774 11.145 83.632625699999 10.157 93.59162399999965 11.144 81.98432350000036 12.01 85.08948779999957 11.197 81.93841520000002 11.134 91.36080910000034 11.15 84.54578530000137 11.207 83.70885040000017 11.144 91.4752299999987 11.218)
Error minima by case: (0.497 9 0.2295 2 0.2913 9 0.0311 2 0.3632 2 0.4694 10 0.5707 2 0.5144 2 0.0791 3 0.0797 3 0.1842 9 0.0626 2 0.1326 3 0.759 2 0.5563 2 0.2824 3 0.3523 8 0.0912 3 0.2547 10 0.7457 2 0.4178 9 0.2887 3 0.7715 2 0.4673 8 0.4825 9)
Average genome size in population (length): 47.809
Average program size in population (points): 48.809
Average percent parens in population: 0.022
Minimum age in population: 48.9995636777021
Maximum age in population: 53.84957676735939
Average age in population: 51.79773428215575
Median age in population: 51.82933461354696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.059
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 44846640
--- Timings ---
Current time: 1529615697546 milliseconds
Total Time:         117.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 47.1%
Fitness Testing:     48.6 seconds, 41.4%
Report:              13.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction tagged_541} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_min} {:instruction float_mod} {:instruction float_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc})
Best program: (float_stackdepth float_stackdepth float_dec integer_sub float_stackdepth float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_dup_times integer_dup_times print_integer float_sub float_dup integer_dup_times float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer tagged_541 integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_mod integer_dup_items float_inc float_add float_inc float_min float_mod float_shove integer_swap float_mod float_dup float_swap float_mod float_inc)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2453.805508700005
Median total errors in population: 287.0456
Error averages by case: (85.45254999999864 11.991 86.97574700000082 11.087 73.12139189999894 11.89 88.93102109999838 11.262 84.18069600000122 11.102 88.13629600000111 11.211 88.10262489999815 11.13 91.10010400000002 11.238 92.15834240000132 11.228 89.7157014000008 11.227 84.81801740000148 12.025 87.4967782000004 11.11 89.8040747999986 11.17 76.19478699999968 11.099 87.27633889999814 11.15 92.50159519999802 11.19 79.44039809999921 10.137 90.4808975999996 11.209 85.2944386000004 12.002 90.99060419999962 11.248 85.18312999999988 11.118 87.70283000000013 11.197 90.69597900000136 11.263 86.92979500000011 11.115 89.51136999999892 11.211)
Error minima by case: (0.0 2 0.0 2 0.0 1 0.0 3 0.0 2 0.4694 3 0.0 2 0.0 3 0.0791 3 0.0797 3 0.1842 2 0.0 2 0.1326 3 0.0 2 0.0 2 0.2824 3 0.3523 2 0.0912 3 0.0 2 0.0 3 0.0 2 0.2887 3 0.0 3 0.0 2 0.4825 3)
Average genome size in population (length): 47.262
Average program size in population (points): 48.262
Average percent parens in population: 0.022
Minimum age in population: 50.69165352918208
Maximum age in population: 55.14029530488187
Average age in population: 53.23713374060829
Median age in population: 53.26205890730489
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.053
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 46028490
--- Timings ---
Current time: 1529615700678 milliseconds
Total Time:         120.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 47.1%
Fitness Testing:     49.8 seconds, 41.4%
Report:              13.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction tag_integer_456} {:instruction in1} {:instruction 74} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction in1} {:instruction integer_pop} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction float_mult} {:instruction integer_inc} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_max} {:instruction integer_swap} {:instruction in2})
Best program: (integer_flush integer_add integer_min float_dup integer_sub integer_fromfloat tag_integer_456 in1 74 float_add integer_mod integer_pop in1 integer_pop float_add in2 float_mult float_swap in1 float_yank float_yankdup in1 in1 in2 float_sub in1 integer_fromfloat integer_add in2 float_mult integer_inc in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_max integer_swap in2)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2729.419840400004
Median total errors in population: 287.0456
Error averages by case: (94.06495299999847 11.977 97.73824400000085 11.057 81.94406939999877 11.882 101.65126409999809 11.24 92.74075600000164 11.079 99.08431620000117 11.218 100.78112609999813 11.111 105.44271780000003 11.217 104.33381120000136 11.221 100.46923070000094 11.198 93.82343860000174 12.01 99.5235568000007 11.088 103.79729019999849 11.153 82.20830900000017 11.063 98.9030182999981 11.138 107.6106647999979 11.179 85.82805669999911 10.148 104.67698239999937 11.178 92.73050850000054 12.004 104.93173079999964 11.236 92.96908579999979 11.124 100.07932380000054 11.18 104.47528050000138 11.264 96.64397319999996 11.118 101.66913249999885 11.216)
Error minima by case: (0.497 8 0.2295 2 0.2913 9 0.0311 2 0.3632 2 0.4694 9 0.4293 2 0.4856 2 0.0791 2 0.0797 2 0.1842 9 0.0626 2 0.1326 2 0.241 2 0.4437 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.2543 2 0.4178 9 0.2887 1 0.2285 2 0.4673 8 0.4825 10)
Average genome size in population (length): 46.348
Average program size in population (points): 47.348
Average percent parens in population: 0.022
Minimum age in population: 51.69165352918208
Maximum age in population: 56.90476748567016
Average age in population: 54.70063452654683
Median age in population: 54.71218379584025
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.065
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 47187465
--- Timings ---
Current time: 1529615703675 milliseconds
Total Time:         123.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 47.2%
Fitness Testing:     50.9 seconds, 41.3%
Report:              14.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_times} {:instruction in1} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_min})
Best program: (float_stackdepth float_yank integer_min float_dup integer_sub float_dec float_swap float_dup_times in1 integer_mod integer_pop float_dec float_dup integer_inc float_dup_times float_frominteger float_dup_items integer_dup_times in2 float_sin in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup integer_mod integer_max integer_swap float_sub integer_min)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 2823.9882008000045
Median total errors in population: 287.0456
Error averages by case: (94.53900499999824 11.998 99.56838650000098 11.101 80.01347889999846 11.877 103.82118139999741 11.277 92.7443188000022 11.109 107.50196920000133 11.242 101.64726089999773 11.129 105.93247040000001 11.264 109.72573210000157 11.251 104.75899160000105 11.252 104.00822820000201 12.037 101.51366530000114 11.104 111.05909679999827 11.187 86.83474820000022 11.107 100.38487509999776 11.175 115.31553519999758 11.24 98.33659059999897 10.151 111.52443519999879 11.237 94.54466850000101 12.003 105.88647029999956 11.269 93.97586299999942 11.13 106.342591600001 11.227 104.95314850000157 11.298 97.28180449999974 11.125 109.73968499999866 11.244)
Error minima by case: (0.497 9 0.2295 4 0.2913 9 0.0311 3 0.3632 4 0.4694 9 0.5707 4 0.5144 4 0.0791 4 0.0797 3 0.1842 10 0.0626 4 0.1326 5 0.759 3 0.5563 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.7457 5 0.4178 9 0.2887 5 0.7715 5 0.4673 9 0.4825 9)
Average genome size in population (length): 46.524
Average program size in population (points): 47.524
Average percent parens in population: 0.022
Minimum age in population: 53.33584907033946
Maximum age in population: 58.05591654291493
Average age in population: 56.16187111246434
Median age in population: 56.20951597272506
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.073
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 48350765
--- Timings ---
Current time: 1529615706682 milliseconds
Total Time:         126.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.8 seconds, 47.3%
Fitness Testing:     52.1 seconds, 41.2%
Report:              14.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mod} {:instruction in1} {:instruction float_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_mult} {:instruction integer_dec} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction float_rot} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc})
Best program: (float_stackdepth float_dec integer_sub float_mod in1 float_yank float_dec integer_sub float_frominteger float_shove float_dup_times float_dup integer_sub float_dec integer_sub float_frominteger in1 integer_yank integer_dup_times float_dup_items integer_yank integer_max integer_add integer_dup integer_shove float_mult integer_dec in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max float_rot integer_dup print_integer integer_sub integer_yank integer_min float_dup float_swap float_mod float_inc)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2777.2051639000047
Median total errors in population: 287.0456
Error averages by case: (97.30001099999838 12.009 97.80246850000091 11.081 83.37906149999863 11.906 101.01702589999785 11.243 94.69534240000176 11.093 102.76878560000125 11.234 99.62535739999807 11.116 103.55730160000002 11.232 106.65476040000149 11.22 105.70626680000105 11.21 100.29751760000178 12.037 100.22927580000103 11.094 105.08908579999839 11.177 85.2125710000002 11.083 99.52643139999802 11.143 107.55335919999779 11.188 95.75535209999909 10.164 104.61962079999901 11.189 95.33891040000093 12.017 103.72245309999961 11.235 96.88969859999959 11.141 101.71136560000097 11.193 103.68369150000136 11.254 99.12086989999968 11.139 104.30957999999877 11.241)
Error minima by case: (0.503 9 0.2295 4 0.2913 9 0.0311 4 0.3632 4 0.4694 9 0.4293 4 0.4856 5 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.241 3 0.4437 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.2543 5 0.4178 10 0.2887 4 0.2285 5 0.5327 9 0.4825 10)
Average genome size in population (length): 46.324
Average program size in population (points): 47.324
Average percent parens in population: 0.022
Minimum age in population: 54.33584907033946
Maximum age in population: 59.59144737518
Average age in population: 57.60441472344918
Median age in population: 57.62999684103306
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.05
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 49509165
--- Timings ---
Current time: 1529615709632 milliseconds
Total Time:         129.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.2 seconds, 47.3%
Fitness Testing:     53.3 seconds, 41.2%
Report:              14.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction float_pop} {:instruction float_dec} {:instruction integer_sub} {:instruction float_flush} {:instruction in1} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_mult} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_mod} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction tag_integer_816} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_min})
Best program: (integer_shove integer_add integer_min float_dup float_pop float_dec integer_sub float_flush in1 in1 float_dup_times float_add integer_mod float_stackdepth float_inc integer_inc integer_dup_times integer_add integer_dup in2 float_mult integer_mult in2 float_mult float_swap in1 float_yank in1 in2 in1 in2 float_sub in1 integer_fromfloat float_dup_items integer_yank integer_dup_times integer_add integer_dup integer_yankdup float_mult float_swap in1 integer_yank float_rot integer_mod float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap tag_integer_816 integer_sub integer_yank float_mod float_dup float_swap float_mod float_inc float_min)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2697.336431800005
Median total errors in population: 287.0456
Error averages by case: (92.7205219999984 12.007 98.82857810000087 11.094 79.29164319999872 11.909 102.23857509999783 11.26 93.7491144000015 11.102 98.81958680000125 11.214 98.43111589999779 11.121 101.36934740000001 11.25 98.51386780000158 11.224 95.52822320000111 11.229 96.835950300002 12.016 98.17343320000035 11.108 99.47574879999833 11.178 87.42393499999986 11.099 99.56469389999775 11.157 102.46433599999773 11.22 92.8215411999991 10.134 100.29598559999961 11.23 91.39572940000026 12.014 101.65442489999961 11.247 92.3472774000001 11.13 96.6104995000002 11.217 102.30585300000165 11.265 94.55169260000037 11.127 100.1537570999988 11.219)
Error minima by case: (0.497 9 0.2295 2 0.2913 9 0.0311 2 0.3632 2 0.4694 9 0.4293 2 0.4856 2 0.0791 3 0.0797 3 0.1842 7 0.0626 2 0.1326 8 0.241 2 0.4437 2 0.2824 9 0.3523 9 0.0912 8 0.2547 10 0.2543 2 0.4178 9 0.2887 9 0.2285 2 0.4673 9 0.4825 10)
Average genome size in population (length): 46.243
Average program size in population (points): 47.243
Average percent parens in population: 0.022
Minimum age in population: 55.33584907033946
Maximum age in population: 60.87672785353789
Average age in population: 59.07459309022142
Median age in population: 59.14307029774318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.057
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 50665340
--- Timings ---
Current time: 1529615712728 milliseconds
Total Time:         132.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.7 seconds, 47.4%
Fitness Testing:     54.4 seconds, 41.1%
Report:              15.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_cos} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction float_tan} {:instruction integer_yank} {:instruction float_mod})
Best program: (float_stackdepth integer_add integer_min float_inc integer_sub integer_mod integer_add integer_min float_dup integer_sub float_frominteger float_dec float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult integer_sub in1 float_yank in1 in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer float_cos integer_max integer_swap integer_dup print_integer float_tan integer_yank float_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2761.0221864000046
Median total errors in population: 287.0456
Error averages by case: (98.75844999999833 12.035 98.4394405000009 11.121 87.61794329999861 11.916 97.69560619999763 11.285 93.31947760000223 11.132 103.05625500000123 11.277 97.02611589999795 11.148 98.75728980000001 11.276 106.04110510000153 11.275 104.85362170000106 11.262 100.95070180000185 12.052 96.68443320000104 11.125 104.8804835999984 11.222 88.28569400000053 11.123 97.1615812999979 11.173 106.89977119999777 11.246 94.10570439999908 10.186 105.36698559999867 11.252 95.60678200000119 12.041 98.84742489999958 11.283 98.56525019999897 11.171 101.90621080000118 11.251 99.19385300000151 11.295 100.11590779999932 11.17 104.28609749999877 11.283)
Error minima by case: (0.503 10 0.2295 4 0.2913 9 0.0311 5 0.3632 4 0.4694 10 0.4293 4 0.4856 5 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.2543 5 0.4178 10 0.2887 5 0.2285 5 0.5327 9 0.4825 10)
Average genome size in population (length): 45.69
Average program size in population (points): 46.69
Average percent parens in population: 0.023
Minimum age in population: 57.09799541442771
Maximum age in population: 62.33779331906953
Average age in population: 60.54134261814297
Median age in population: 60.58431079286765
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.047
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 51807640
--- Timings ---
Current time: 1529615715641 milliseconds
Total Time:         135.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.2 seconds, 47.4%
Fitness Testing:     55.5 seconds, 41.0%
Report:              15.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_277} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_max} {:instruction in1} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_add} {:instruction integer_shove} {:instruction float_cos} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_dup} {:instruction print_integer})
Best program: (tag_float_277 integer_add integer_min float_dup integer_sub float_dec integer_sub integer_max in1 float_dup_times integer_pop float_dup integer_dup_times integer_dup float_dup_items integer_yank integer_dup_times integer_add integer_dup integer_max integer_add integer_shove float_cos integer_div integer_dup_times integer_add integer_dup in2 float_mult integer_sub in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer float_dup_times print_integer integer_yank integer_dup print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2650.842090700004
Median total errors in population: 287.0456
Error averages by case: (90.2724799999986 12.031 92.97306400000085 11.108 86.89436069999874 11.912 89.87362669999861 11.29 88.02443360000122 11.133 100.57407140000117 11.262 92.57416229999819 11.151 94.02382120000001 11.27 102.72383950000142 11.259 100.93334650000094 11.248 99.56454140000169 12.038 91.8374028000004 11.138 103.23535099999854 11.21 80.12891399999948 11.122 90.29205559999819 11.182 105.2384887999979 11.212 94.6628440999991 10.175 103.6208943999997 11.221 89.36332900000052 12.032 93.70590529999963 11.289 90.00442819999982 11.164 100.86063340000022 11.22 92.85607100000125 11.308 92.27423480000013 11.18 101.90779099999885 11.267)
Error minima by case: (0.503 10 0.2295 4 0.2913 9 0.0311 5 0.3632 4 0.4694 8 0.4293 4 0.4856 5 0.0791 4 0.0797 4 0.1842 9 0.0626 4 0.1326 3 0.241 4 0.4437 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.2543 5 0.4178 9 0.2887 4 0.2285 5 0.5327 8 0.4825 10)
Average genome size in population (length): 45.132
Average program size in population (points): 46.132
Average percent parens in population: 0.023
Minimum age in population: 59.71544829573486
Maximum age in population: 63.97969336846154
Average age in population: 62.02852551516852
Median age in population: 62.05018093738568
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.053
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 52935990
--- Timings ---
Current time: 1529615718834 milliseconds
Total Time:         138.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.7 seconds, 47.4%
Fitness Testing:     56.8 seconds, 41.0%
Report:              15.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_mult} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_cos} {:instruction float_yank} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction float_yank} {:instruction in2} {:instruction float_sin} {:instruction integer_add} {:instruction float_mult} {:instruction in2} {:instruction float_mult} {:instruction integer_pop} {:instruction float_yank} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_min} {:instruction integer_sub})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_pop float_dec integer_sub integer_mult in1 float_dup_times float_pop integer_dec integer_dup_times integer_dup_times integer_add integer_dup integer_dup_times integer_add integer_shove float_cos float_yank float_swap in1 float_yank float_yank in2 float_sin integer_add float_mult in2 float_mult integer_pop float_yank float_swap in1 float_yank float_yank float_frominteger float_dup_items integer_dup_times in2 float_sin in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup integer_mod float_rot integer_swap integer_add integer_min integer_sub)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2356.3134235000052
Median total errors in population: 287.0456
Error averages by case: (80.9265439999985 12.019 85.16296000000085 11.09 70.7201005999988 11.924 85.12905219999867 11.235 77.85805920000088 11.097 84.97039820000118 11.232 83.03362489999809 11.114 84.45516160000003 11.223 86.56289610000141 11.205 83.63041870000094 11.203 83.01985940000172 12.031 83.2029033999999 11.1 87.52920739999858 11.16 73.05834099999956 11.094 84.01212039999807 11.141 90.60344239999795 11.185 77.09492109999911 10.14 88.45998879999962 11.197 79.70171209999994 12.024 85.2958412999996 11.23 81.15271220000031 11.14 83.92511869999976 11.191 85.6540650000014 11.242 83.08226230000058 11.134 86.49471249999884 11.226)
Error minima by case: (0.497 10 0.2295 2 0.2913 10 0.0311 3 0.3632 2 0.4694 10 0.5707 2 0.5144 3 0.0791 2 0.0797 2 0.1842 10 0.0626 2 0.1326 2 0.759 2 0.5563 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.7457 3 0.4178 9 0.2887 2 0.7715 3 0.4673 9 0.4825 10)
Average genome size in population (length): 45.542
Average program size in population (points): 46.542
Average percent parens in population: 0.023
Minimum age in population: 61.1585611779924
Maximum age in population: 65.28264185526086
Average age in population: 63.4888402114709
Median age in population: 63.4871953971242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.05
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 54074590
--- Timings ---
Current time: 1529615721742 milliseconds
Total Time:         141.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.1 seconds, 47.4%
Fitness Testing:     57.9 seconds, 41.0%
Report:              16.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_max} {:instruction -1.307214955445673} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_sub} {:instruction tag_float_448} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_add integer_dup integer_dup_times integer_yank float_dup_items integer_yank integer_dup_times integer_add in2 float_sin in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_max -1.307214955445673 integer_dup float_rot integer_sub tag_float_448 float_mod float_dup float_swap float_mod float_inc)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 2397.2132177000044
Median total errors in population: 287.0456
Error averages by case: (76.82256709999875 11.991 82.02664520000074 11.08 67.64353929999898 11.897 84.52907419999873 11.199 76.89936350000062 11.087 91.32312650000111 11.19 81.66227239999833 11.114 86.18712480000002 11.207 93.12448570000136 11.214 90.15199900000087 11.201 88.70176920000165 12.038 81.29097899999982 11.084 95.01635099999868 11.159 72.74683239999948 11.083 81.23596059999831 11.141 98.64720639999797 11.182 83.14822799999921 10.122 95.70589439999964 11.187 77.27402119999986 12.019 86.28783369999958 11.218 76.29080150000036 11.107 92.01794300000024 11.187 86.1099732000013 11.226 78.41687780000066 11.1 92.71334859999891 11.206)
Error minima by case: (0.503 9 0.2295 4 0.2913 9 0.0311 2 0.3632 2 0.4694 10 0.5707 2 0.5144 2 0.0791 3 0.0797 3 0.1842 9 0.0626 2 0.1326 4 0.241 2 0.5563 2 0.2824 5 0.3523 8 0.0912 4 0.2547 10 0.7457 2 0.4178 9 0.2887 5 0.7715 2 0.5327 9 0.4825 10)
Average genome size in population (length): 45.6
Average program size in population (points): 46.6
Average percent parens in population: 0.023
Minimum age in population: 62.293688924874
Maximum age in population: 66.96159837707341
Average age in population: 64.93889706633178
Median age in population: 65.00538146224193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.057
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 55214640
--- Timings ---
Current time: 1529615724548 milliseconds
Total Time:         144.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.5 seconds, 47.5%
Fitness Testing:     59.1 seconds, 40.9%
Report:              16.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_min} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_mult} {:instruction integer_rot} {:instruction float_mult} {:instruction float_cos} {:instruction in1} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction print_integer} {:instruction float_pop} {:instruction integer_yank} {:instruction float_mod})
Best program: (float_stackdepth integer_dup float_inc integer_min float_stackdepth float_stackdepth integer_add integer_min float_dup float_dup integer_inc float_dec float_dup_items integer_yank integer_dup_times integer_add float_mult integer_rot float_mult float_cos in1 float_mult float_swap in1 float_yank in1 in2 float_sub in1 in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_yank float_sin float_dup print_integer float_pop integer_yank float_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2374.922176700005
Median total errors in population: 287.0456
Error averages by case: (83.50447799999893 11.992 83.91081980000067 11.106 73.01652679999908 11.89 84.68117659999865 11.268 83.40714880000122 11.113 82.97766700000098 11.217 87.19133699999848 11.141 88.49564720000002 11.253 85.59999770000107 11.23 83.52150590000068 11.233 81.40925220000123 12.029 86.5099660000005 11.127 84.74914499999902 11.185 74.97161799999998 11.105 85.5662329999985 11.163 86.63600649999843 11.204 78.4084048999993 10.145 84.67327959999955 11.222 82.05634460000051 12.014 88.27258699999962 11.268 83.21410279999971 11.131 82.95773250000033 11.204 87.70706500000111 11.282 85.23901020000004 11.135 84.36812459999905 11.22)
Error minima by case: (0.503 10 0.2295 8 0.2913 9 0.0311 6 0.3632 5 0.4694 10 0.4293 5 0.4856 6 0.0791 4 0.0797 4 0.1842 8 0.0626 5 0.1326 9 0.241 5 0.4437 5 0.2824 9 0.3523 8 0.0912 10 0.2547 10 0.2543 6 0.4178 9 0.2887 9 0.2285 6 0.5327 9 0.4825 10)
Average genome size in population (length): 45.496
Average program size in population (points): 46.496
Average percent parens in population: 0.023
Minimum age in population: 64.12279593167204
Maximum age in population: 68.45895047339519
Average age in population: 66.42609897098517
Median age in population: 66.48892520778514
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.049
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 56352115
--- Timings ---
Current time: 1529615727461 milliseconds
Total Time:         147.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.9 seconds, 47.5%
Fitness Testing:     60.2 seconds, 40.9%
Report:              16.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction float_inc} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction float_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_min} {:instruction float_stackdepth} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_dup} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_mult} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_swap})
Best program: (integer_dup float_inc integer_min integer_stackdepth integer_min integer_min float_dup integer_dup float_inc integer_min float_stackdepth float_swap in1 float_yank float_yankdup in1 in1 in2 float_sub in1 integer_fromfloat integer_add float_sub in1 float_yank in1 in2 float_dup in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer float_mult integer_max integer_swap integer_dup integer_fromfloat integer_yank integer_sub integer_yank float_mod integer_dup_items float_swap)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2438.9645437000045
Median total errors in population: 287.0456
Error averages by case: (83.10615979999865 12.005 85.67071530000078 11.108 74.61001799999895 11.905 88.46787259999815 11.265 80.8559552000011 11.123 88.76301020000112 11.238 86.91427509999824 11.139 89.61763580000002 11.245 91.77278870000141 11.246 87.10130290000085 11.222 85.86217540000158 12.045 86.36636600000055 11.123 91.26435099999867 11.201 74.91241079999955 11.109 85.58220389999822 11.171 94.91133599999795 11.215 81.77569349999916 10.148 91.67116799999926 11.209 82.89184850000024 12.026 89.75126169999959 11.254 82.46208979999982 11.154 87.49649950000055 11.224 89.31393830000128 11.27 85.17102769999991 11.148 90.61143999999891 11.248)
Error minima by case: (0.503 9 0.2295 3 0.2913 9 0.0311 4 0.3632 3 0.4694 9 0.5707 3 0.5144 4 0.0791 3 0.0797 3 0.1842 10 0.0626 3 0.1326 3 0.759 3 0.5563 3 0.2824 3 0.3523 9 0.0912 2 0.2547 9 0.7457 4 0.4178 9 0.2887 3 0.7715 4 0.5327 9 0.4825 10)
Average genome size in population (length): 45.679
Average program size in population (points): 46.679
Average percent parens in population: 0.023
Minimum age in population: 65.45889149520349
Maximum age in population: 69.64722698291257
Average age in population: 67.83457100961344
Median age in population: 67.87188109522222
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.056
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 57494115
--- Timings ---
Current time: 1529615730344 milliseconds
Total Time:         150.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.4 seconds, 47.6%
Fitness Testing:     61.3 seconds, 40.8%
Report:              17.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_min} {:instruction in1} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup} {:instruction tagged_506} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_flush} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_dup})
Best program: (integer_flush integer_sub integer_add float_dec integer_sub integer_min in1 float_frominteger in1 float_dup_times float_add float_stackdepth integer_pop float_dup integer_inc float_dec float_dup float_dup_times float_dup tagged_506 float_inc float_dup_items integer_yank integer_dup_times integer_add integer_dup_times integer_add integer_dup in2 float_mult integer_flush in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times integer_max integer_swap integer_dup float_sub integer_swap integer_dup print_integer integer_dup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2644.5163364000045
Median total errors in population: 287.0456
Error averages by case: (92.60870119999854 12.009 96.1997858000009 11.104 83.88586579999868 11.903 95.56032609999791 11.271 89.73601580000181 11.111 97.30691780000119 11.238 94.67945979999814 11.136 96.28148000000002 11.262 99.87113710000146 11.249 97.114831700001 11.248 95.4154648000017 12.027 93.49432960000081 11.119 97.7703509999985 11.198 85.82139320000061 11.116 94.67832149999815 11.162 101.76520639999788 11.225 88.76298889999912 10.145 98.6098943999992 11.237 90.68610680000089 12.022 96.69884249999963 11.257 92.2650479999994 11.143 93.63737560000074 11.239 96.88885620000133 11.279 94.49667889999968 11.139 98.20995749999882 11.232)
Error minima by case: (0.503 9 0.2295 2 0.2913 9 0.0311 2 0.3632 2 0.4694 10 0.5707 2 0.5144 2 0.0791 3 0.0797 3 0.1842 9 0.0626 2 0.1326 3 0.759 2 0.5563 2 0.2824 3 0.3523 9 0.0912 3 0.2547 10 0.7457 2 0.4178 9 0.2887 3 0.7715 2 0.5327 9 0.4825 10)
Average genome size in population (length): 45.398
Average program size in population (points): 46.398
Average percent parens in population: 0.023
Minimum age in population: 66.75069491951035
Maximum age in population: 71.46553046292475
Average age in population: 69.30906036122124
Median age in population: 69.3286334828884
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.063
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 58629165
--- Timings ---
Current time: 1529615733452 milliseconds
Total Time:         153.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.8 seconds, 47.6%
Fitness Testing:     62.6 seconds, 40.9%
Report:              17.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction float_yank} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_mult} {:instruction integer_max} {:instruction integer_swap} {:instruction float_max} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer})
Best program: (integer_dup_items integer_add integer_min float_dup integer_yank float_dec integer_sub float_frominteger in1 float_dup_times float_min integer_mod float_add integer_mod integer_pop float_dup integer_dup_times integer_dup float_inc integer_yank integer_dup_times integer_add integer_dup float_yank in2 float_sub in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer float_mult integer_max integer_swap float_max print_integer integer_yank integer_sub integer_yank integer_dup_times integer_dup_items float_swap integer_mod integer_max integer_swap integer_flush float_swap integer_div integer_pop integer_max integer_swap integer_dup print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2627.6277852000044
Median total errors in population: 287.0456
Error averages by case: (90.05672259999866 12.004 94.13220980000085 11.087 84.12588429999892 11.885 95.8119210999987 11.289 88.20374950000095 11.108 97.17970420000128 11.243 93.23149369999824 11.138 95.85317300000003 11.263 100.78783950000135 11.227 96.87042620000081 11.243 95.26383320000177 12.025 93.24125840000019 11.12 98.43321839999857 11.182 82.99947269999959 11.115 94.29413379999815 11.158 101.06192399999794 11.198 88.91534119999906 10.156 98.7177119999996 11.234 87.85168659999994 12.014 95.85598169999962 11.27 90.69496340000003 11.137 93.90894300000018 11.198 96.21068920000127 11.285 92.81613370000039 11.147 99.14736999999874 11.236)
Error minima by case: (0.497 9 0.2295 4 0.2913 9 0.0311 6 0.3632 4 0.4694 9 0.4293 4 0.5144 6 0.0791 4 0.0797 4 0.1842 9 0.0626 4 0.1326 4 0.759 4 0.5563 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.7457 6 0.4178 9 0.2887 4 0.7715 6 0.4673 8 0.4825 10)
Average genome size in population (length): 45.079
Average program size in population (points): 46.079
Average percent parens in population: 0.023
Minimum age in population: 67.91583616277796
Maximum age in population: 72.7510891777674
Average age in population: 70.81055842691228
Median age in population: 70.8586414100731
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.064
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 59756165
--- Timings ---
Current time: 1529615736577 milliseconds
Total Time:         156.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.3 seconds, 47.6%
Fitness Testing:     63.8 seconds, 40.8%
Report:              18.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_min} {:instruction float_dup} {:instruction float_dup_items} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction float_min} {:instruction float_dup_items} {:instruction in2} {:instruction float_rot} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_mult} {:instruction integer_sub} {:instruction in1} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction float_swap} {:instruction float_rot} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup} {:instruction float_swap} {:instruction float_mod} {:instruction float_inc})
Best program: (float_stackdepth integer_add integer_sub float_yank integer_min float_dup float_dup_items in2 float_mult float_swap float_min float_dup_items in2 float_rot float_swap in1 float_yank integer_fromfloat integer_add integer_fromfloat float_dup_times float_mult integer_sub in1 float_mult float_swap in1 float_yank in1 in2 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod float_swap float_rot integer_dup print_integer integer_sub integer_yank integer_min float_dup float_swap float_mod float_inc)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2566.6455819000053
Median total errors in population: 287.0456
Error averages by case: (90.90355999999848 12.009 94.50859450000085 11.083 81.74426749999873 11.906 91.8178450999983 11.266 87.22974480000158 11.103 94.55923480000119 11.222 90.63987149999811 11.136 92.28494300000001 11.235 95.18510510000142 11.238 93.16962170000096 11.223 92.74864900000175 12.02 90.38312000000043 11.117 95.45380959999848 11.177 79.17277200000011 11.105 92.03630829999805 11.155 97.84603039999787 11.21 87.07104579999908 10.143 96.07071519999911 11.211 86.73419050000062 12.015 92.51541249999963 11.257 90.66647579999965 11.134 91.05025260000062 11.206 93.26504600000138 11.264 92.38070119999993 11.136 95.41826499999881 11.219)
Error minima by case: (0.503 9 0.2295 2 0.2913 9 0.0311 3 0.3632 3 0.4694 8 0.5707 3 0.5144 3 0.0791 3 0.0797 2 0.1842 9 0.0626 3 0.1326 3 0.759 3 0.5563 3 0.2824 3 0.3523 9 0.0912 2 0.2547 10 0.7457 4 0.4178 9 0.2887 3 0.7715 4 0.5327 8 0.4825 10)
Average genome size in population (length): 44.145
Average program size in population (points): 45.145
Average percent parens in population: 0.024
Minimum age in population: 68.91583616277796
Maximum age in population: 74.33297148816519
Average age in population: 72.30727544761675
Median age in population: 72.37655889628812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.048
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 60859840
--- Timings ---
Current time: 1529615739424 milliseconds
Total Time:         159.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.7 seconds, 47.6%
Fitness Testing:     64.9 seconds, 40.8%
Report:              18.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction tagged_506} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction tag_integer_456} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_min} {:instruction float_dup_items} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction integer_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction float_mod} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer})
Best program: (float_stackdepth integer_add in2 tagged_506 float_dec float_dup_items integer_yank integer_dup_times integer_add float_dup integer_yank float_dec integer_sub float_dec tag_integer_456 integer_yankdup float_dup_items float_min float_dup_items in2 float_mult float_swap in1 integer_inc float_dup float_mult float_dup integer_pop in1 float_dup_times float_add integer_mod integer_stackdepth float_dup integer_inc float_dec float_dup_items in1 float_yank in1 in2 float_sub in1 integer_dup_times integer_add integer_dup float_mod float_mult float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2683.4292991000048
Median total errors in population: 287.0456
Error averages by case: (92.5900112999984 12.001 95.97632090000094 11.084 84.43900599999864 11.888 95.98936079999801 11.279 90.29953180000176 11.107 102.34936320000125 11.254 94.3414752999979 11.125 97.01544560000002 11.253 101.14555510000149 11.249 99.367063300001 11.226 100.99694360000184 12.041 94.29564700000068 11.106 101.48883659999836 11.18 84.19379040000024 11.09 95.81667109999786 11.154 102.95645819999774 11.198 95.13527269999906 10.178 101.3829077999993 11.207 87.84506280000059 12.02 97.41745029999959 11.267 92.25131779999963 11.14 98.23423260000055 11.217 98.31036440000149 11.283 94.21324059999995 11.145 103.4239698999988 11.262)
Error minima by case: (0.503 9 0.2295 3 0.2913 9 0.0311 5 0.3632 4 0.4694 9 0.5707 4 0.5144 5 0.0791 4 0.0797 4 0.1842 7 0.0626 4 0.1326 4 0.759 4 0.5563 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.7457 5 0.4178 9 0.2887 4 0.7715 5 0.5327 9 0.4825 10)
Average genome size in population (length): 43.379
Average program size in population (points): 44.379
Average percent parens in population: 0.024
Minimum age in population: 71.43417694688262
Maximum age in population: 75.77465775237359
Average age in population: 73.7989340568415
Median age in population: 73.8219999799837
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.059
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 61944415
--- Timings ---
Current time: 1529615742381 milliseconds
Total Time:         161.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.1 seconds, 47.6%
Fitness Testing:     66.0 seconds, 40.8%
Report:              18.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction 5} {:instruction float_min} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_swap} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_add} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_pop} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_shove} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup})
Best program: (integer_swap float_stackdepth integer_add 5 float_min float_flush float_frominteger integer_flush float_dup_times float_swap in1 float_dup_times float_add integer_mod integer_add float_dup integer_yank integer_dup_times integer_add integer_dup float_pop integer_dup integer_yank integer_dup_times integer_add float_pop in2 float_mult float_swap in1 float_shove in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer integer_mod integer_max integer_swap integer_dup print_integer integer_sub integer_yank integer_yank float_mod float_dup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3001.8064687000046
Median total errors in population: 287.0456
Error averages by case: (108.23087499999832 12.03 105.97862100000087 11.159 95.47003909999849 11.899 108.75938849999767 11.334 103.66884560000207 11.139 110.00945880000116 11.313 108.31855029999798 11.177 111.25820340000003 11.316 115.41604850000162 11.31 113.27039010000115 11.297 109.11691260000181 12.066 107.52193240000081 11.148 113.19143379999835 11.263 100.12082700000072 11.148 106.08179309999795 11.201 116.33712319999772 11.288 104.70224919999912 10.197 113.90125279999897 11.293 105.81361280000083 12.041 110.86595069999959 11.335 107.8398051999993 11.197 111.52745770000078 11.293 109.77513800000156 11.345 110.0005248999995 11.194 111.32703499999886 11.32)
Error minima by case: (0.503 9 0.2295 4 0.2913 10 0.0311 2 0.3632 2 0.4694 10 0.4293 2 0.5144 2 0.0791 3 0.0797 3 0.1842 9 0.0626 2 0.1326 5 0.241 2 0.5563 2 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 2 0.4178 10 0.2887 5 0.2285 2 0.5327 9 0.4825 10)
Average genome size in population (length): 43.253
Average program size in population (points): 44.253
Average percent parens in population: 0.024
Minimum age in population: 72.47948023622152
Maximum age in population: 77.32430891199824
Average age in population: 75.28331640901123
Median age in population: 75.29777797052112
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.058
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 63025915
--- Timings ---
Current time: 1529615745220 milliseconds
Total Time:         164.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.5 seconds, 47.6%
Fitness Testing:     67.1 seconds, 40.7%
Report:              19.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction float_tan} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_add} {:instruction integer_mod} {:instruction float_mult} {:instruction integer_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max})
Best program: (float_stackdepth integer_add integer_min float_dup float_tan float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_mod integer_pop float_dup integer_inc float_dup_times float_pop integer_mod integer_pop float_dup integer_inc float_add integer_mod float_mult integer_sub in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2699.4545241000046
Median total errors in population: 287.0456
Error averages by case: (96.59699899999855 12.047 94.77251750000084 11.133 88.46035279999865 11.918 94.99373989999856 11.313 93.58706400000133 11.148 99.65713260000123 11.277 95.13338119999815 11.164 96.27602510000001 11.297 103.17586780000154 11.278 101.97590440000106 11.274 99.10288600000172 12.051 94.7441748000003 11.152 99.29688139999857 11.24 88.70102799999968 11.149 95.64800109999813 11.194 100.66261839999787 11.258 95.08711359999909 10.177 99.46007679999963 11.261 94.58374620000039 12.032 97.2628928999996 11.3 95.49303899999985 11.175 97.40052040000015 11.255 97.50680700000136 11.311 96.89772670000012 11.183 100.11202749999879 11.279)
Error minima by case: (0.503 10 0.2295 2 0.2913 9 0.0311 3 0.3632 2 0.4694 8 0.5707 2 0.5144 3 0.0791 2 0.0797 2 0.1842 8 0.0626 2 0.1326 2 0.759 2 0.5563 2 0.2824 2 0.3523 8 0.0912 1 0.2547 10 0.7457 3 0.4178 10 0.2887 2 0.7715 3 0.5327 9 0.4825 10)
Average genome size in population (length): 43.323
Average program size in population (points): 44.323
Average percent parens in population: 0.024
Minimum age in population: 73.97384219174089
Maximum age in population: 78.78184823536449
Average age in population: 76.71760390520504
Median age in population: 76.76498754105724
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.047
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 64109140
--- Timings ---
Current time: 1529615748126 milliseconds
Total Time:         167.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.1 seconds, 47.7%
Fitness Testing:     68.2 seconds, 40.6%
Report:              19.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_max} {:instruction float_cos} {:instruction float_dec})
Best program: (float_stackdepth float_stackdepth float_dec float_dup integer_sub float_dec integer_sub float_frominteger in1 float_dup_times float_add integer_rot integer_pop float_dup integer_dup_times float_dec float_yank integer_dup in2 float_mult float_swap in1 float_yank in1 in2 float_div in1 integer_fromfloat integer_add integer_fromfloat integer_pop print_integer integer_max float_cos float_dec)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 3110.2641606000043
Median total errors in population: 287.0456
Error averages by case: (107.38362549999852 12.017 114.00383460000087 11.107 95.22672779999877 11.902 114.18101289999707 11.302 104.7618043000024 11.132 118.24227070000121 11.273 111.94859829999803 11.166 115.83496010000002 11.287 120.7136502000015 11.276 115.82992600000097 11.28 114.99077750000174 12.051 112.02182370000156 11.139 121.24071679999844 11.22 97.67470160000046 11.14 113.311148099998 11.199 124.77199069999779 11.248 108.44793979999909 10.17 122.06049049999831 11.263 107.62117660000146 12.032 116.20345099999959 11.301 106.77010889999899 11.159 117.00935510000147 11.255 117.01617430000148 11.314 109.86606659999919 11.153 120.47582899999881 11.27)
Error minima by case: (0.503 9 0.2295 2 0.2913 9 0.0311 3 0.3632 2 0.4694 10 0.5707 2 0.5144 3 0.0791 2 0.0797 2 0.1842 10 0.0626 2 0.1326 2 0.759 2 0.5563 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.7457 3 0.4178 9 0.2887 2 0.7715 3 0.5327 9 0.4825 9)
Average genome size in population (length): 43.604
Average program size in population (points): 44.604
Average percent parens in population: 0.024
Minimum age in population: 75.88201617941174
Maximum age in population: 80.13442152272896
Average age in population: 78.20545751906019
Median age in population: 78.2543219753436
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.053
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 65199340
--- Timings ---
Current time: 1529615751148 milliseconds
Total Time:         170.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.7 seconds, 47.8%
Fitness Testing:     69.3 seconds, 40.5%
Report:              19.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction float_mod} {:instruction float_pop} {:instruction float_swap} {:instruction tag_float_836} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction in1} {:instruction float_mult} {:instruction integer_sub} {:instruction in1} {:instruction float_yank} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer})
Best program: (float_stackdepth integer_min integer_min float_dup integer_sub float_dec float_mod float_pop float_swap tag_float_836 float_yank in1 in2 float_pop in1 integer_fromfloat integer_add integer_inc float_dec integer_flush integer_pop integer_dec integer_inc float_dec integer_flush integer_yank in1 float_mult integer_sub in1 float_yank float_mult float_swap in1 float_yank in1 in2 float_sin in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod float_sub integer_fromfloat integer_div integer_pop integer_max integer_swap integer_dup print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2582.046810200005
Median total errors in population: 287.0456
Error averages by case: (93.45161099999842 12.015 89.47851560000086 11.121 87.60081729999857 11.895 89.56676009999791 11.304 85.08070780000148 11.115 91.71705120000115 11.247 88.028768099998 11.152 90.33505970000002 11.278 101.34275350000152 11.285 98.53698610000106 11.265 90.66285700000178 12.016 87.62761040000042 11.129 98.92280959999839 11.206 81.89922910000016 11.12 88.70316109999797 11.181 101.14503039999778 11.227 86.05689009999914 10.158 99.5155327999987 11.237 91.37095700000087 12.023 89.78944899999962 11.292 94.04525449999929 11.154 96.70938650000107 11.228 90.06918750000148 11.304 95.63316709999943 11.158 92.39525769999887 11.252)
Error minima by case: (0.503 10 0.2295 4 0.2913 9 0.0311 3 0.3632 2 0.4694 9 0.5707 2 0.5144 3 0.0791 5 0.0797 5 0.1842 8 0.0626 2 0.1326 2 0.759 2 0.5563 2 0.2824 2 0.3523 8 0.0912 1 0.2547 10 0.7457 3 0.4178 9 0.2887 2 0.7715 3 0.5327 9 0.4825 9)
Average genome size in population (length): 43.5
Average program size in population (points): 44.5
Average percent parens in population: 0.024
Minimum age in population: 77.34010883961756
Maximum age in population: 81.8585225524016
Average age in population: 79.67546616729183
Median age in population: 79.69995671136957
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.067
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 66286965
--- Timings ---
Current time: 1529615754084 milliseconds
Total Time:         173.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.2 seconds, 47.9%
Fitness Testing:     70.3 seconds, 40.5%
Report:              20.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction float_yank} {:instruction integer_min} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction in1} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction integer_add} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_div} {:instruction integer_max} {:instruction float_sin} {:instruction integer_dup})
Best program: (float_stackdepth integer_add float_yank integer_min in1 float_dup_times float_add integer_rot integer_pop float_dup integer_dup_times float_dec in1 float_frominteger float_max in2 integer_pop float_dup integer_inc float_dup float_stackdepth integer_yank integer_add in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer float_div integer_max float_sin integer_dup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 3110.0561754000046
Median total errors in population: 287.0456
Error averages by case: (113.01136099999847 12.043 112.4820095000009 11.166 103.04010939999863 11.912 113.34911919999783 11.351 108.62752640000188 11.182 114.03980570000124 11.318 111.51036249999811 11.2 113.71161440000002 11.332 118.20531980000138 11.345 115.93775790000092 11.329 112.95701780000175 12.065 111.51783760000085 11.181 117.75283159999852 11.286 105.15960710000073 11.173 111.08731879999803 11.216 119.7251231999979 11.312 108.86401069999906 10.205 118.2839791999987 11.317 110.93995750000084 12.049 113.6039959999996 11.348 113.5037687999993 11.202 115.67130290000115 11.315 113.43606260000138 11.36 115.00885829999947 11.198 114.90751749999878 11.317)
Error minima by case: (0.503 10 0.2295 4 0.2913 9 0.0311 5 0.3632 4 0.4694 9 0.5707 4 0.5144 5 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 8 0.0912 4 0.2547 10 0.2543 5 0.4178 9 0.2887 5 0.7715 5 0.5327 9 0.4825 9)
Average genome size in population (length): 42.533
Average program size in population (points): 43.533
Average percent parens in population: 0.025
Minimum age in population: 78.99605917907802
Maximum age in population: 83.237079346713
Average age in population: 81.15156560350152
Median age in population: 81.16969554427317
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.047
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 67350465
--- Timings ---
Current time: 1529615756813 milliseconds
Total Time:         176.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.6 seconds, 47.9%
Fitness Testing:     71.4 seconds, 40.4%
Report:              20.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction float_div} {:instruction in2} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_cos} {:instruction print_integer} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_yankdup} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_add} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_max} {:instruction float_tan} {:instruction in2})
Best program: (integer_stackdepth integer_min integer_min float_div in2 float_dec integer_sub float_frominteger in1 integer_dup_items integer_yank integer_dup_times integer_add integer_dup integer_dup_times integer_add integer_shove float_cos print_integer integer_pop integer_dup_times integer_add integer_dup in2 float_mult integer_yankdup in1 float_inc in1 in2 float_dup_items integer_yank integer_dup_times integer_add integer_add integer_dup in2 float_mult integer_add in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_max float_tan in2)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2952.972647800005
Median total errors in population: 287.0456
Error averages by case: (103.95595699999828 12.047 105.30738650000092 11.161 98.34588109999844 11.919 105.341461299997 11.342 101.92006880000277 11.179 110.71862220000124 11.324 104.09105949999785 11.189 106.95175840000002 11.329 112.59612760000158 11.329 110.05770890000115 11.318 110.521675600002 12.074 103.46440100000147 11.181 113.43315759999825 11.289 97.05742800000145 11.169 102.99832549999782 11.217 115.03222959999765 11.294 105.73218139999904 10.214 113.29698239999817 11.303 104.27983520000159 12.058 106.7931987999996 11.336 103.7401781999988 11.205 110.57147860000151 11.3 106.34900600000162 11.346 104.39674859999913 11.211 112.35878999999878 11.327)
Error minima by case: (0.497 10 0.2295 4 0.2913 9 0.0311 4 0.3632 4 0.4694 10 0.4293 4 0.4856 5 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.241 3 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.2543 5 0.4178 9 0.2887 5 0.2285 5 0.4673 9 0.4825 10)
Average genome size in population (length): 41.996
Average program size in population (points): 42.996
Average percent parens in population: 0.025
Minimum age in population: 80.37496065115312
Maximum age in population: 84.66945678890059
Average age in population: 82.6545402146533
Median age in population: 82.69472989017379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.042
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 68400540
--- Timings ---
Current time: 1529615759828 milliseconds
Total Time:         179.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.2 seconds, 48.0%
Fitness Testing:     72.4 seconds, 40.4%
Report:              20.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction tagged_506} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction float_mod} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup})
Best program: (float_stackdepth integer_add in2 tagged_506 float_dec float_dup_items integer_yank integer_dup_times integer_sub integer_dup in2 float_mult float_swap float_mod float_yank in1 in2 float_sub in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer float_pop float_min integer_dup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 2541.1797556000056
Median total errors in population: 287.0456
Error averages by case: (90.74106539999856 12.019 91.64385610000092 11.077 77.82160759999896 11.919 91.78222659999804 11.232 86.20944420000173 11.086 92.32106540000125 11.233 90.24060509999818 11.116 91.60297830000002 11.212 94.73652380000128 11.222 92.6976155000008 11.211 90.44299240000164 12.027 90.10204380000081 11.105 93.52329179999865 11.18 83.6705129000004 11.092 90.81061079999813 11.132 95.078007699998 11.199 84.85784819999908 10.162 93.35794569999901 11.202 87.13187440000097 12.02 92.4344880999996 11.232 90.3260436999994 11.144 90.51722390000074 11.192 92.46881590000126 11.241 92.11951609999976 11.134 92.92055219999877 11.232)
Error minima by case: (0.503 9 0.2295 3 0.2913 9 0.0311 2 0.3632 2 0.4694 9 0.5707 2 0.5144 2 0.0791 3 0.0797 3 0.1842 9 0.0626 3 0.1326 3 0.759 2 0.5563 2 0.2824 3 0.3523 9 0.0912 2 0.2547 10 0.7457 2 0.4178 9 0.2887 3 0.7715 2 0.5327 9 0.4825 10)
Average genome size in population (length): 41.62
Average program size in population (points): 42.62
Average percent parens in population: 0.025
Minimum age in population: 81.80543704296727
Maximum age in population: 86.09153811799544
Average age in population: 84.12597153681838
Median age in population: 84.19114045507673
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.049
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 69441190
--- Timings ---
Current time: 1529615762800 milliseconds
Total Time:         182.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.6 seconds, 48.0%
Fitness Testing:     73.6 seconds, 40.3%
Report:              21.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_yank} {:instruction float_dup_times} {:instruction -72.01937136077206} {:instruction float_mult} {:instruction integer_min} {:instruction float_dup} {:instruction integer_dup} {:instruction float_mod} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction float_max} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap})
Best program: (float_stackdepth integer_add integer_min float_dup integer_sub float_dec integer_sub float_frominteger in1 float_yank float_dup_times -72.01937136077206 float_mult integer_min float_dup integer_dup float_mod float_mult float_swap in1 float_yank in1 in1 in2 float_sub in1 integer_fromfloat integer_add float_flush float_max print_integer float_dup_items float_mod float_dup float_swap)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 2652.7272731000044
Median total errors in population: 287.0456
Error averages by case: (92.51891499999854 12.013 95.46923900000094 11.154 89.44428339999868 11.896 94.83692779999838 11.351 90.34505920000146 11.169 96.73105060000124 11.284 95.48105419999808 11.191 96.75056080000002 11.313 97.58352310000134 11.31 95.66202770000093 11.293 95.13572840000171 12.052 94.7967156000005 11.172 98.28033999999852 11.275 87.13782300000013 11.147 94.15278259999808 11.204 100.25815999999782 11.276 89.86054459999917 10.19 98.61907999999946 11.294 92.8492506000005 12.048 95.5613498999996 11.336 93.26274679999982 11.192 95.92069610000033 11.29 95.93443600000131 11.349 95.1983562000001 11.187 97.65362249999879 11.297)
Error minima by case: (0.503 10 0.2295 9 0.2913 9 0.0311 2 0.3632 2 0.4694 10 0.4293 2 0.4856 2 0.0791 2 0.0797 1 0.1842 9 0.0626 2 0.1326 9 0.241 2 0.4437 2 0.2824 9 0.3523 9 0.0912 8 0.2547 10 0.2543 3 0.4178 9 0.2887 9 0.2285 3 0.5327 8 0.4825 10)
Average genome size in population (length): 41.124
Average program size in population (points): 42.124
Average percent parens in population: 0.025
Minimum age in population: 83.29415256510694
Maximum age in population: 87.43094072881792
Average age in population: 85.587864061967
Median age in population: 85.623558992126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.048
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 70469440
--- Timings ---
Current time: 1529615765600 milliseconds
Total Time:         185.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.1 seconds, 48.1%
Fitness Testing:     74.6 seconds, 40.3%
Report:              21.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction -93.6939558328883} {:instruction integer_sub} {:instruction float_div} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction integer_div} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction in1} {:instruction float_yank} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer})
Best program: (float_stackdepth integer_add integer_min -93.6939558328883 integer_sub float_div integer_sub float_frominteger in1 integer_div float_dup integer_inc float_dec float_dup_items float_dec in1 float_yankdup integer_yank integer_dup_times integer_add integer_dup in2 float_mult in1 float_yank integer_yank integer_dup_times integer_add integer_dup in2 in1 float_yank in1 in2 integer_yank in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2433.6424467000047
Median total errors in population: 287.0456
Error averages by case: (83.52297639999905 12.021 85.90609440000077 11.088 74.51908969999926 11.92 84.75419599999898 11.269 80.11998900000083 11.114 90.81731620000106 11.262 84.2373614999987 11.132 85.94506580000002 11.244 92.75576040000104 11.254 91.00026680000059 11.221 89.03833340000129 12.037 83.76754720000035 11.114 92.08520739999892 11.187 78.0821553999997 11.098 83.96358349999872 11.153 93.96715999999836 11.192 82.4906474999992 10.18 91.94407999999945 11.196 82.02210930000038 12.035 85.90838639999964 11.268 83.22861539999988 11.166 87.9431187000003 11.194 86.08345540000082 11.278 85.3638334000001 11.162 92.12309749999896 11.268)
Error minima by case: (0.497 10 0.2295 3 0.2913 10 0.0311 5 0.3632 4 0.4694 10 0.5707 4 0.5144 5 0.0791 5 0.0797 4 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 6 0.4178 10 0.2887 5 0.7715 6 0.4673 8 0.4825 10)
Average genome size in population (length): 41.024
Average program size in population (points): 42.024
Average percent parens in population: 0.026
Minimum age in population: 84.91025264894176
Maximum age in population: 88.88407969717194
Average age in population: 87.05646916125218
Median age in population: 87.13627318669695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.043
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 71495165
--- Timings ---
Current time: 1529615768427 milliseconds
Total Time:         188.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.6 seconds, 48.2%
Fitness Testing:     75.7 seconds, 40.2%
Report:              21.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_rot} {:instruction float_max} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction tag_float_551} {:instruction in1} {:instruction integer_pop} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_flush} {:instruction tag_float_551} {:instruction in1} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction integer_mult} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction float_sin} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_add} {:instruction integer_mod} {:instruction float_mult} {:instruction integer_sub} {:instruction in1} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max})
Best program: (float_stackdepth float_rot float_max float_dup integer_sub float_dec integer_sub tag_float_551 in1 integer_pop integer_sub float_dec integer_sub float_flush tag_float_551 in1 integer_pop float_dup integer_dup_times integer_dup integer_mult in1 float_yank in1 float_sin integer_pop float_dup integer_inc float_add integer_mod float_mult integer_sub in1 in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2632.015775600005
Median total errors in population: 287.0456
Error averages by case: (93.57595899999849 12.018 93.5083095000008 11.105 81.23389719999867 11.911 94.68276169999787 11.27 90.1269304000018 11.122 96.1076632000012 11.239 93.94911079999818 11.148 96.47934740000002 11.264 100.3338395000014 11.266 98.64734650000099 11.243 94.93688600000176 12.033 93.62480880000086 11.124 95.70580959999857 11.205 86.07248900000036 11.114 93.69936279999811 11.169 97.82103039999791 11.217 91.51876129999908 10.172 95.90862399999891 11.21 89.47903670000053 12.023 96.57564479999964 11.27 93.38250359999935 11.152 94.19394300000089 11.212 96.05462450000131 11.285 95.20850589999965 11.153 97.02057999999877 11.243)
Error minima by case: (0.503 10 0.2295 3 0.2913 8 0.0311 5 0.3632 4 0.4694 10 0.5707 4 0.5144 5 0.0791 5 0.0797 4 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 9 0.7457 6 0.4178 10 0.2887 5 0.7715 6 0.5327 9 0.4825 10)
Average genome size in population (length): 40.968
Average program size in population (points): 41.968
Average percent parens in population: 0.026
Minimum age in population: 86.19872842346284
Maximum age in population: 90.32274364164124
Average age in population: 88.49216629487954
Median age in population: 88.52510080796667
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.049
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 72519440
--- Timings ---
Current time: 1529615771407 milliseconds
Total Time:         191.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.2 seconds, 48.3%
Fitness Testing:     76.7 seconds, 40.1%
Report:              22.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_cos} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_shove} {:instruction float_mod} {:instruction in1} {:instruction float_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction float_add} {:instruction integer_mod} {:instruction float_mult} {:instruction integer_sub} {:instruction in1} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max})
Best program: (float_stackdepth float_cos integer_sub integer_add float_dec integer_sub integer_dup float_shove float_mod in1 float_yank float_dec integer_sub float_frominteger float_shove float_dup_times float_dup integer_sub integer_pop float_dup integer_inc float_add integer_mod float_mult integer_sub in1 in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2534.414747700004
Median total errors in population: 287.0456
Error averages by case: (87.72309599999872 12.035 89.2217378000008 11.144 81.25806949999891 11.905 90.21645279999845 11.322 83.8712708000012 11.166 91.6044998000011 11.295 89.24850339999831 11.178 91.91147880000003 11.303 96.2793141000013 11.296 91.96082470000084 11.295 89.90685980000148 12.052 88.6358782000005 11.165 95.04501399999872 11.25 80.52510100000006 11.151 88.44976999999832 11.208 99.03733599999806 11.262 86.5795336999992 10.184 96.30416799999928 11.27 87.85770230000065 12.046 91.71552459999963 11.315 87.40958329999955 11.18 91.9985204000004 11.273 91.35619990000119 11.332 89.9220362999999 11.186 93.2692724999989 11.294)
Error minima by case: (0.503 10 0.2295 4 0.2913 9 0.0311 6 0.3632 4 0.4694 10 0.4293 4 0.4856 6 0.0791 5 0.0797 5 0.1842 8 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.2543 6 0.4178 9 0.2887 5 0.2285 6 0.4673 9 0.4825 9)
Average genome size in population (length): 40.522
Average program size in population (points): 41.522
Average percent parens in population: 0.026
Minimum age in population: 87.36357090646648
Maximum age in population: 91.9152035467445
Average age in population: 89.94609822017172
Median age in population: 89.97290408505813
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.053
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 73532540
--- Timings ---
Current time: 1529615774249 milliseconds
Total Time:         194.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.7 seconds, 48.3%
Fitness Testing:     77.7 seconds, 40.1%
Report:              22.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction integer_min} {:instruction float_dup} {:instruction in1} {:instruction float_dup_times} {:instruction in1} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction float_mult} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_shove} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_mod})
Best program: (float_max integer_min float_dup in1 float_dup_times in1 integer_mod integer_pop integer_pop integer_dec integer_fromfloat integer_inc float_mult integer_add integer_dup in2 float_mult float_swap in1 float_shove in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer integer_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 2154.5065816000047
Median total errors in population: 287.0456
Error averages by case: (74.2039841999987 11.999 73.78312400000083 11.082 68.43358729999876 11.903 76.888363199999 11.251 69.8377856000004 11.099 77.85711240000117 11.206 72.14656809999825 11.136 74.96970400000002 11.229 81.69365880000146 11.229 80.94917960000099 11.219 76.65357000000172 12.035 71.8138465999995 11.114 77.75119639999845 11.174 67.3886179999991 11.103 74.7543455999982 11.155 79.48439599999782 11.187 71.14210269999913 10.146 78.32044800000035 11.2 69.85440059999975 12.014 75.3132758999996 11.246 74.12523760000037 11.124 75.50073789999934 11.188 76.37732270000136 11.257 75.3787864000007 11.126 78.25522999999886 11.208)
Error minima by case: (0.497 9 0.2295 4 0.2913 10 0.0311 6 0.3632 4 0.4694 9 0.4293 4 0.4856 6 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.2543 6 0.4178 9 0.2887 5 0.2285 6 0.4673 9 0.4825 9)
Average genome size in population (length): 40.206
Average program size in population (points): 41.206
Average percent parens in population: 0.026
Minimum age in population: 89.13149216982875
Maximum age in population: 93.36210990763145
Average age in population: 91.40683794115239
Median age in population: 91.49387964316269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.056
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 74537740
--- Timings ---
Current time: 1529615776942 milliseconds
Total Time:         196.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.1 seconds, 48.4%
Fitness Testing:     78.8 seconds, 40.0%
Report:              22.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_dup} {:instruction in1} {:instruction integer_pop} {:instruction print_integer} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction integer_yankdup} {:instruction in1} {:instruction float_rot} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction float_max} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap})
Best program: (float_stackdepth float_dup_items float_sin integer_dup in1 integer_pop print_integer in2 float_mult float_swap in1 integer_yankdup in1 float_rot in2 float_mult float_swap in1 float_yank in1 in2 float_sub in1 in1 integer_fromfloat integer_add float_flush float_max print_integer float_dup_items float_mod float_dup float_swap)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2084.9746254000047
Median total errors in population: 287.0456
Error averages by case: (68.47855799999871 12.001 74.43165350000086 11.108 61.77426489999926 11.909 74.22035259999947 11.247 69.40864720000019 11.121 75.3839900000012 11.21 73.11280759999832 11.14 75.01029380000003 11.239 74.51800350000119 11.237 72.4263751000007 11.225 73.82449100000153 12.027 72.48524859999948 11.122 74.56032899999879 11.193 65.39835599999874 11.115 72.50803839999833 11.169 76.24467839999811 11.199 70.6643302999991 10.131 74.66553920000055 11.206 67.11591359999937 12.029 74.83377869999958 11.246 68.25712660000086 11.131 72.60560399999929 11.212 74.48531250000116 11.262 69.89215040000119 11.125 76.84978249999884 11.215)
Error minima by case: (0.503 10 0.2295 9 0.2913 10 0.0311 8 0.3632 9 0.4694 10 0.5707 9 0.5144 9 0.0791 9 0.0797 9 0.1842 10 0.0626 9 0.1326 8 0.759 10 0.5563 10 0.2824 9 0.3523 9 0.0912 9 0.2547 10 0.7457 9 0.4178 9 0.2887 9 0.7715 10 0.5327 9 0.4825 10)
Average genome size in population (length): 40.18
Average program size in population (points): 41.18
Average percent parens in population: 0.027
Minimum age in population: 90.3426290673198
Maximum age in population: 94.82755399243742
Average age in population: 92.92926866083226
Median age in population: 92.98340225746037
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.055
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 75542265
--- Timings ---
Current time: 1529615779801 milliseconds
Total Time:         199.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.7 seconds, 48.4%
Fitness Testing:     79.8 seconds, 40.0%
Report:              23.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_div} {:instruction print_float} {:instruction integer_mod} {:instruction integer_mod} {:instruction in1} {:instruction float_swap} {:instruction float_mod} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction integer_mod} {:instruction float_mult} {:instruction integer_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction print_integer})
Best program: (float_dup float_pop float_dec integer_mod integer_pop integer_div print_float integer_mod integer_mod in1 float_swap float_mod float_yank in1 in2 float_sub in1 float_yank in1 in2 float_sub integer_mod float_mult integer_sub in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times integer_fromfloat integer_shove print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2708.770566100005
Median total errors in population: 287.0456
Error averages by case: (94.22853199999851 12.042 98.03268150000093 11.114 84.81510059999874 11.926 97.13067899999794 11.27 92.83888480000174 11.106 100.53235720000126 11.271 97.36435229999803 11.135 98.70887360000002 11.255 102.11847230000139 11.244 99.99182470000093 11.243 99.16591220000181 12.046 96.76471400000095 11.117 100.80841179999847 11.214 88.63902800000014 11.121 96.29277589999809 11.149 102.39774799999785 11.231 94.81528429999904 10.185 100.5404415999991 11.233 95.24969330000106 12.035 98.5836729999996 11.27 93.92045879999932 11.174 98.06152040000076 11.22 98.06117800000133 11.28 95.88859879999964 11.182 101.48036999999876 11.276)
Error minima by case: (0.503 9 0.2295 1 0.2913 10 0.0311 2 0.3632 2 0.4694 9 0.4293 2 0.4856 2 0.0791 2 0.0797 1 0.1842 9 0.0626 2 0.1326 2 0.241 2 0.4437 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.2543 2 0.4178 10 0.2887 2 0.2285 2 0.5327 9 0.4825 10)
Average genome size in population (length): 40.12
Average program size in population (points): 41.12
Average percent parens in population: 0.027
Minimum age in population: 91.8306098553472
Maximum age in population: 96.32274736897605
Average age in population: 94.39735343878121
Median age in population: 94.43891770760688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.045
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 76545315
--- Timings ---
Current time: 1529615782629 milliseconds
Total Time:         202.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.2 seconds, 48.5%
Fitness Testing:     80.8 seconds, 39.9%
Report:              23.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_add} {:instruction float_shove} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction in1} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_743} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction in1} {:instruction print_integer})
Best program: (integer_flush integer_add float_shove in1 float_dup_times float_pop float_add integer_dup_items float_frominteger in1 float_swap float_pop tag_float_743 integer_dup_times integer_add integer_dup in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat in1 print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2210.475974500005
Median total errors in population: 287.0456
Error averages by case: (75.36700099999875 12.026 77.06512320000081 11.121 70.96598239999894 11.915 76.76172849999853 11.293 73.4755318000012 11.134 78.96057650000112 11.248 76.88696569999829 11.15 78.20342320000002 11.26 81.4830543000012 11.249 79.57057810000074 11.243 77.3967019000014 12.036 76.32765710000035 11.14 80.18279859999883 11.206 69.83862219999962 11.123 76.51487209999831 11.168 82.34526639999821 11.215 73.7791469999992 10.158 80.74308319999945 11.232 75.7518572000005 12.037 78.0761910999996 11.277 75.15235279999975 11.163 78.58100570000036 11.223 77.93992770000122 11.286 76.9009637 11.166 79.88256309999889 11.254)
Error minima by case: (0.503 10 0.2295 2 0.2913 9 0.0311 3 0.3632 2 0.4694 9 0.5707 2 0.5144 3 0.0791 2 0.0797 2 0.1842 9 0.0626 2 0.1326 2 0.241 2 0.5563 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.7457 3 0.4178 10 0.2887 2 0.7715 3 0.5327 9 0.4825 10)
Average genome size in population (length): 39.293
Average program size in population (points): 40.293
Average percent parens in population: 0.027
Minimum age in population: 93.18777322946833
Maximum age in population: 97.77399665252852
Average age in population: 95.87212021432468
Median age in population: 95.93497300528426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.045
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 77527665
--- Timings ---
Current time: 1529615785409 milliseconds
Total Time:         205.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.7 seconds, 48.6%
Fitness Testing:     81.8 seconds, 39.9%
Report:              23.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in2} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction in1} {:instruction float_shove} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_mod})
Best program: (float_stackdepth float_dup integer_sub float_dec integer_sub float_frominteger in2 float_mult float_dup_items integer_yank integer_dup_times integer_add integer_dup in2 float_mult float_swap in1 float_shove in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer integer_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 1878.1859153000048
Median total errors in population: 287.0456
Error averages by case: (63.71419179999868 12.007 63.76608080000081 11.112 62.24951269999885 11.92 62.71713710000014 11.273 59.1247127999998 11.138 65.32599000000113 11.215 63.906725299998364 11.154 65.89311360000002 11.242 66.95968710000123 11.264 65.83105630000075 11.239 64.14693840000143 12.041 64.1097143999989 11.144 65.11484839999886 11.217 58.346508799998794 11.125 63.369261299998335 11.169 65.78804399999821 11.195 61.336159599999185 10.145 64.53127200000112 11.211 61.11034229999916 12.034 65.64909599999962 11.265 63.54701100000121 11.145 63.29135709999879 11.207 65.12024480000119 11.279 65.00964470000156 11.141 66.12426499999891 11.221)
Error minima by case: (0.503 9 0.2295 9 0.2913 8 0.0311 9 0.3632 9 0.4694 10 0.5707 9 0.5144 9 0.0791 10 0.0797 10 0.1842 9 0.0626 9 0.1326 9 0.759 10 0.5563 9 0.2824 9 0.3523 9 0.0912 10 0.2547 10 0.7457 10 0.4178 10 0.2887 9 0.7715 10 0.5327 9 0.4825 10)
Average genome size in population (length): 39.486
Average program size in population (points): 40.486
Average percent parens in population: 0.027
Minimum age in population: 94.71733948992795
Maximum age in population: 99.58008831982517
Average age in population: 97.306253485384
Median age in population: 97.35920498798447
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.037
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 78514890
--- Timings ---
Current time: 1529615788181 milliseconds
Total Time:         208.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.1 seconds, 48.6%
Fitness Testing:     82.9 seconds, 39.9%
Report:              23.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction in1} {:instruction float_tan} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_mod} {:instruction tagged_722} {:instruction -95.12078329992413} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_cos} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_swap} {:instruction float_add} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_yankdup})
Best program: (float_stackdepth in1 float_tan float_add integer_mod integer_pop float_dup integer_add integer_dup integer_sub float_dec integer_swap integer_mod tagged_722 -95.12078329992413 integer_dup_items integer_sub float_dup_times integer_mod integer_pop integer_dup_times integer_add integer_shove float_cos float_yank in1 in2 float_sub in1 float_sub in1 integer_fromfloat integer_add integer_rot float_pop integer_swap float_add print_integer integer_sub float_pop integer_swap integer_yankdup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2732.4367151000047
Median total errors in population: 287.0456
Error averages by case: (97.44604839999826 12.043 100.64547140000093 11.101 89.98049829999839 11.92 100.40669849999777 11.301 94.25607900000199 11.118 99.85343770000127 11.281 97.49338189999794 11.147 99.97417700000003 11.274 101.98757080000155 11.258 99.58508320000105 11.254 99.75974740000198 12.026 97.1987944000008 11.133 100.08081799999837 11.199 87.77221660000053 11.116 99.0688019999979 11.163 102.68001109999769 11.214 93.16658799999905 10.183 100.7613696999992 11.225 95.0110485000009 12.029 99.2055067999996 11.279 96.24964259999938 11.18 96.57027230000074 11.219 100.53462490000152 11.305 99.29595469999977 11.187 101.02687189999877 11.271)
Error minima by case: (0.503 10 0.2295 2 0.2913 9 0.0311 3 0.3632 2 0.4694 10 0.4293 2 0.4856 3 0.0791 2 0.0797 2 0.1842 9 0.0626 2 0.1326 2 0.241 2 0.4437 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.2543 3 0.4178 10 0.2887 2 0.2285 3 0.4673 9 0.4825 10)
Average genome size in population (length): 39.406
Average program size in population (points): 40.406
Average percent parens in population: 0.027
Minimum age in population: 95.71733948992795
Maximum age in population: 100.6504754152438
Average age in population: 98.71890208266215
Median age in population: 98.7395643663941
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.054
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 79500090
--- Timings ---
Current time: 1529615790873 milliseconds
Total Time:         210.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.5 seconds, 48.7%
Fitness Testing:     83.9 seconds, 39.8%
Report:              24.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_max} {:instruction -1.307214955445673} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_sub} {:instruction tag_float_448} {:instruction float_mod} {:instruction float_yank} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max})
Best program: (float_stackdepth integer_mod integer_pop float_dup integer_yank float_dup_items integer_yank integer_dup_times integer_add in2 float_sin in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_max -1.307214955445673 integer_dup float_rot integer_sub tag_float_448 float_mod float_yank float_swap float_mod integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2606.485293700005
Median total errors in population: 287.0456
Error averages by case: (90.64240999999839 12.027 91.51914550000087 11.109 83.77586419999844 11.9 93.00487549999784 11.297 86.76998420000183 11.132 95.4039692000012 11.279 91.35872789999789 11.14 94.18990760000004 11.282 100.39599770000156 11.279 97.79434650000111 11.263 93.64422820000185 12.037 90.84102880000083 11.13 98.47988139999832 11.215 85.03070900000068 11.114 91.45694969999789 11.174 101.40961839999773 11.234 89.24764749999909 10.18 99.29807679999914 11.238 89.0250719000007 12.034 92.9611251999996 11.296 89.41414419999963 11.188 96.34049950000079 11.234 92.5237860000015 11.309 92.6305437999998 11.186 96.76475499999883 11.285)
Error minima by case: (0.503 10 0.2295 2 0.2913 9 0.0311 3 0.3632 2 0.4694 10 0.5707 2 0.5144 3 0.0791 2 0.0797 2 0.1842 9 0.0626 2 0.1326 2 0.759 2 0.5563 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.2543 3 0.4178 10 0.2887 2 0.7715 3 0.4673 9 0.4825 10)
Average genome size in population (length): 39.18
Average program size in population (points): 40.18
Average percent parens in population: 0.028
Minimum age in population: 97.79288108760196
Maximum age in population: 102.0293873171765
Average age in population: 100.1777760196228
Median age in population: 100.2038675759355
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.057
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 80479690
--- Timings ---
Current time: 1529615793667 milliseconds
Total Time:         213.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.0 seconds, 48.7%
Fitness Testing:     84.9 seconds, 39.8%
Report:              24.4 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_max} {:instruction -1.307214955445673} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_sub} {:instruction tag_float_475} {:instruction float_mod} {:instruction float_yank} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_mod} {:instruction integer_max})
Best program: (float_stackdepth integer_mod integer_pop float_dup integer_yank float_dup_items integer_yank integer_dup_times integer_add in2 float_sin in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_max -1.307214955445673 integer_dup float_rot integer_sub tag_float_475 float_mod float_yank float_swap float_mod integer_fromfloat integer_add integer_fromfloat float_dup_times float_yank integer_mod integer_max)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2038.538697400005
Median total errors in population: 287.0456
Error averages by case: (69.70950799999885 12.002 69.86474700000082 11.096 63.08714849999909 11.899 69.72765159999999 11.258 66.42532799999985 11.118 73.13101020000111 11.21 70.21946359999845 11.13 71.84770480000002 11.225 74.85194690000112 11.232 73.24730290000069 11.211 71.48935960000145 12.013 69.52642779999915 11.111 72.3734007999988 11.178 61.62437699999886 11.107 69.23857079999843 11.153 74.20654879999823 11.178 65.99728019999914 10.148 72.61899200000029 11.193 69.31489159999941 12.026 71.63431549999962 11.247 69.40728080000092 11.153 70.13958309999946 11.185 71.09069400000114 11.259 71.83020640000089 11.138 74.24595749999891 11.219)
Error minima by case: (0.497 10 0.2295 4 0.2913 10 0.0311 6 0.3632 4 0.4694 10 0.4293 4 0.4856 6 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.2543 6 0.4178 10 0.2887 5 0.2285 6 0.4673 9 0.4825 10)
Average genome size in population (length): 38.822
Average program size in population (points): 39.822
Average percent parens in population: 0.028
Minimum age in population: 98.84104210056653
Maximum age in population: 103.6976210897579
Average age in population: 101.6621349753791
Median age in population: 101.7010317157915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.047
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 81450265
--- Timings ---
Current time: 1529615796484 milliseconds
Total Time:         216.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.6 seconds, 48.8%
Fitness Testing:     85.9 seconds, 39.7%
Report:              24.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction integer_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_flush} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction in1} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_sub} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_cos} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_integer})
Best program: (float_stackdepth integer_add integer_sub float_stackdepth integer_add integer_min integer_sub float_dec print_float float_flush integer_yank float_sin float_dec integer_sub float_frominteger float_frominteger integer_max float_dup_times integer_yankdup in1 float_add integer_mod integer_pop float_dup integer_mult integer_inc float_yank integer_sub in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer float_cos integer_max integer_swap integer_dup print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2793.8952119000046
Median total errors in population: 287.0456
Error averages by case: (99.47296899999851 12.039 101.1041570000008 11.156 92.44065289999864 11.924 102.2946789999977 11.343 98.23033760000207 11.171 100.66984680000108 11.305 101.72977649999808 11.188 103.09541680000002 11.311 103.11031410000147 11.325 101.30050590000101 11.306 99.4517808000017 12.056 101.16302700000102 11.179 101.97041179999856 11.274 94.69699200000065 11.161 101.23677589999808 11.213 103.98918319999795 11.274 95.6316474999992 10.205 102.41544159999914 11.279 99.32528820000104 12.058 102.8974014999996 11.333 99.30884939999925 11.198 99.72109780000079 11.282 102.65349250000145 11.347 101.01541209999955 11.2 101.53575499999894 11.307)
Error minima by case: (0.503 10 0.2295 2 0.2913 10 0.0311 3 0.3632 2 0.4694 10 0.5707 2 0.5144 3 0.0791 2 0.0797 2 0.1842 9 0.0626 2 0.1326 2 0.759 2 0.4437 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.7457 3 0.4178 9 0.2887 2 0.7715 3 0.5327 9 0.4825 10)
Average genome size in population (length): 38.238
Average program size in population (points): 39.238
Average percent parens in population: 0.028
Minimum age in population: 100.5613239765664
Maximum age in population: 105.3640771051726
Average age in population: 103.0983424651519
Median age in population: 103.1363530064865
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.044
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 82406215
--- Timings ---
Current time: 1529615799201 milliseconds
Total Time:         218.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.0 seconds, 48.9%
Fitness Testing:     86.9 seconds, 39.7%
Report:              24.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction tag_integer_147} {:instruction integer_min} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_dec} {:instruction 36} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction in1} {:instruction print_integer})
Best program: (integer_add tag_integer_147 integer_min integer_swap float_dup_times float_add integer_mod integer_stackdepth integer_flush integer_inc float_dec 36 float_yankdup integer_dup_times integer_add integer_dup in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat in1 print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2442.490119300005
Median total errors in population: 287.0456
Error averages by case: (85.66622779999871 12.021 85.68827350000078 11.148 75.58172199999889 11.923 87.75381179999877 11.296 82.62955130000087 11.155 90.08113260000115 11.253 85.10213689999837 11.166 87.33399320000002 11.272 90.34857970000125 11.279 89.55894050000079 11.265 89.40025440000149 12.037 84.84896300000001 11.16 88.54113559999875 11.236 80.71527919999971 11.139 86.06661529999829 11.187 89.68541919999812 11.242 85.82340899999916 10.165 88.69480959999984 11.248 81.79244360000011 12.047 87.6572698999996 11.296 85.3896443 11.163 86.27171700000004 11.251 87.95261440000127 11.303 86.59007800000032 11.154 90.65009749999885 11.26)
Error minima by case: (0.503 9 0.2295 9 0.2913 9 0.0311 9 0.3632 9 0.4694 10 0.4293 9 0.4856 9 0.0791 9 0.0797 10 0.1842 9 0.0626 9 0.1326 9 0.241 10 0.4437 9 0.2824 9 0.3523 8 0.0912 9 0.2547 10 0.2543 10 0.4178 10 0.2887 9 0.2285 10 0.5327 9 0.4825 9)
Average genome size in population (length): 37.624
Average program size in population (points): 38.624
Average percent parens in population: 0.029
Minimum age in population: 102.0379535293099
Maximum age in population: 106.549824944084
Average age in population: 104.5642034281755
Median age in population: 104.6080348695182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.047
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 83346815
--- Timings ---
Current time: 1529615801819 milliseconds
Total Time:         221.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.5 seconds, 48.9%
Fitness Testing:     87.8 seconds, 39.6%
Report:              25.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_yank} {:instruction in1} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_pop} {:instruction tagged_722} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_div} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_sin} {:instruction float_swap} {:instruction float_div} {:instruction float_dup_times} {:instruction float_pop} {:instruction in1} {:instruction float_dup} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod})
Best program: (integer_sub integer_yank in1 integer_dec float_dec integer_dup float_dup_times integer_pop float_swap integer_pop tagged_722 integer_inc float_dup integer_sub integer_rot integer_sub float_div integer_max float_dup_times float_sin float_swap float_div float_dup_times float_pop in1 float_dup float_tan integer_dec float_dup integer_inc float_dec float_dup_items integer_yank float_dec float_stackdepth integer_dup in2 float_mult float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2530.171543700005
Median total errors in population: 287.0456
Error averages by case: (88.18650199999848 12.04 89.3416650000009 11.135 83.44360499999858 11.925 90.3410832999986 11.316 85.53805920000111 11.155 91.28017360000122 11.276 89.05019559999792 11.175 91.19910400000002 11.289 94.9943424000015 11.304 93.24470140000103 11.287 89.33220160000178 12.042 88.41084079999997 11.163 93.5574725999984 11.253 83.16961799999982 11.155 88.33289519999792 11.191 96.04044239999777 11.258 85.73215959999906 10.17 94.19117119999973 11.27 88.52963690000027 12.044 91.0150955999996 11.312 88.0742808000001 11.185 91.73654130000001 11.257 90.68297900000148 11.321 89.5173372000004 11.184 92.24443999999882 11.278)
Error minima by case: (0.503 9 0.2295 3 0.2913 10 0.0311 5 0.3632 4 0.4694 10 0.5707 4 0.5144 5 0.0791 5 0.0797 4 0.1842 10 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 6 0.4178 10 0.2887 4 0.7715 6 0.5327 9 0.4825 10)
Average genome size in population (length): 37.302
Average program size in population (points): 38.302
Average percent parens in population: 0.029
Minimum age in population: 103.5329281969252
Maximum age in population: 108.2113004022694
Average age in population: 106.0378292035607
Median age in population: 106.0943175487226
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.043
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 84279365
--- Timings ---
Current time: 1529615804646 milliseconds
Total Time:         224.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.0 seconds, 49.0%
Fitness Testing:     88.8 seconds, 39.6%
Report:              25.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_cos} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction in1} {:instruction tagged_793} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_dup} {:instruction float_yank} {:instruction in1} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_pop} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_sub} {:instruction print_integer} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction print_integer} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_swap} {:instruction tag_float_846} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_yankdup})
Best program: (float_stackdepth float_cos float_mult integer_sub integer_stackdepth float_yank in1 tagged_793 integer_inc float_dec float_dup_items integer_yank integer_dup_times float_sin float_dup_items integer_dup float_frominteger integer_add integer_dup float_yank in1 float_dup integer_inc float_dup integer_pop in1 float_dup_times float_add integer_sub print_integer in1 in1 integer_fromfloat integer_add integer_inc float_dec float_dup_items float_dup_times print_integer in2 float_sub in1 integer_fromfloat integer_add integer_rot float_pop integer_swap tag_float_846 print_integer integer_sub float_pop integer_swap integer_yankdup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2547.1625170000048
Median total errors in population: 287.0456
Error averages by case: (89.40799499999885 12.03 94.24315700000079 11.129 81.74956499999895 11.917 92.90085499999883 11.304 87.0823832000008 11.148 90.92247960000113 11.265 91.51325219999843 11.166 92.44597700000003 11.277 93.41923500000112 11.283 90.52974500000063 11.27 88.53417540000133 12.042 90.93999660000023 11.154 91.7588095999989 11.233 83.51176599999971 11.134 92.04191909999842 11.175 95.23431279999818 11.25 85.78322739999919 10.176 93.1158063999998 11.255 90.2673478000004 12.041 93.0171361999996 11.294 89.13251719999985 11.168 90.35323170000015 11.236 92.80125350000108 11.312 91.49289830000022 11.171 92.2774749999989 11.256)
Error minima by case: (0.503 9 0.2295 4 0.2913 10 0.0311 6 0.3632 4 0.4694 10 0.5707 4 0.5144 6 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 6 0.4178 10 0.2887 5 0.7715 6 0.5327 9 0.4825 10)
Average genome size in population (length): 36.647
Average program size in population (points): 37.647
Average percent parens in population: 0.031
Minimum age in population: 104.619038675342
Maximum age in population: 109.5556648419151
Average age in population: 107.5331563570763
Median age in population: 107.574665905175
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.05
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 85195565
--- Timings ---
Current time: 1529615807536 milliseconds
Total Time:         227.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.6 seconds, 49.1%
Fitness Testing:     89.7 seconds, 39.5%
Report:              25.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_dup_times} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_max} {:instruction -1.307214955445673} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_sub} {:instruction tag_float_448} {:instruction float_mod} {:instruction float_yank} {:instruction float_swap} {:instruction float_mod} {:instruction float_max} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap})
Best program: (integer_sub float_frominteger integer_swap float_dup_times in2 float_sin in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_max -1.307214955445673 integer_dup float_rot integer_sub tag_float_448 float_mod float_yank float_swap float_mod float_max print_integer float_dup_items float_mod float_dup float_swap)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 2579.5008480000047
Median total errors in population: 287.0456
Error averages by case: (91.27641699999853 12.035 91.90785050000089 11.119 84.69960409999888 11.911 90.76951619999801 11.308 87.26680780000177 11.134 94.82278560000125 11.27 91.2068873999981 11.158 92.25576380000003 11.272 95.7367436000015 11.267 94.48311280000088 11.262 94.54278080000165 12.039 90.70873480000088 11.144 95.06080959999858 11.222 83.52512600000041 11.133 90.98912159999809 11.181 96.64559519999776 11.233 91.70935209999908 10.176 94.97971519999886 11.243 87.49974360000084 12.032 92.16981309999957 11.282 91.16119679999943 11.17 93.3636752000009 11.236 92.0538760000013 11.306 92.6422041999998 11.182 95.44861499999878 11.26)
Error minima by case: (0.503 10 0.2295 3 0.2913 9 0.0311 4 0.3632 3 0.4694 9 0.4293 3 0.4856 4 0.0791 3 0.0797 3 0.1842 10 0.0626 3 0.1326 3 0.241 3 0.4437 3 0.2824 3 0.3523 9 0.0912 2 0.2547 10 0.2543 4 0.4178 9 0.2887 3 0.2285 4 0.5327 9 0.4825 10)
Average genome size in population (length): 36.471
Average program size in population (points): 37.471
Average percent parens in population: 0.030
Minimum age in population: 106.9374808842681
Maximum age in population: 111.0026420385513
Average age in population: 109.0062667140649
Median age in population: 109.04756747594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.044
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 86107365
--- Timings ---
Current time: 1529615810186 milliseconds
Total Time:         230.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.0 seconds, 49.2%
Fitness Testing:     90.7 seconds, 39.5%
Report:              26.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction in1} {:instruction integer_add} {:instruction 5} {:instruction float_min} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_swap} {:instruction float_min} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_rot} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_add} {:instruction float_shove} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dup_times} {:instruction in1} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_max} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap})
Best program: (integer_add integer_add integer_stackdepth float_yank in1 integer_add 5 float_min float_flush float_yankdup float_mult float_swap float_min float_dup_items float_yank float_rot float_dup_items integer_yank integer_max integer_add float_shove integer_dup float_dec integer_swap float_dup_times in1 integer_mod integer_pop float_yank float_cos in1 float_yank in1 in2 float_div in1 integer_fromfloat integer_add integer_fromfloat integer_pop print_integer integer_max float_mod float_dup float_swap)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2682.886528700005
Median total errors in population: 287.0456
Error averages by case: (95.03899859999851 12.039 98.87289930000094 11.152 86.00397189999863 11.923 97.51182589999793 11.305 92.02587070000186 11.161 98.37017780000129 11.281 95.09205499999807 11.176 96.49285750000003 11.292 97.47004920000131 11.293 95.63589820000084 11.28 97.2911369000017 12.052 94.69798560000092 11.164 99.66002659999857 11.256 89.89728420000063 11.151 95.61315219999804 11.19 101.69531329999793 11.264 93.78730729999903 10.19 100.20885449999903 11.268 93.40299750000088 12.053 96.56836739999957 11.306 94.91762049999947 11.179 97.52522390000077 11.264 96.84615220000133 11.309 96.32461609999982 11.174 98.93388639999873 11.28)
Error minima by case: (0.503 10 0.2295 3 0.2913 9 0.0311 5 0.3632 4 0.4694 9 0.5707 4 0.5144 5 0.0791 5 0.0797 4 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 6 0.4178 10 0.2887 5 0.7715 6 0.4673 9 0.4825 9)
Average genome size in population (length): 36.612
Average program size in population (points): 37.612
Average percent parens in population: 0.030
Minimum age in population: 107.9374808842681
Maximum age in population: 112.4356026127906
Average age in population: 110.4260675451801
Median age in population: 110.4652297066431
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.051
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 87022690
--- Timings ---
Current time: 1529615812781 milliseconds
Total Time:         232.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.4 seconds, 49.2%
Fitness Testing:     91.7 seconds, 39.4%
Report:              26.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_dec} {:instruction float_min} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub})
Best program: (integer_stackdepth print_float integer_add integer_min float_dup integer_stackdepth integer_flush integer_inc float_dec float_min integer_yank integer_dup_times integer_add integer_dup in2 float_sub in1 integer_fromfloat integer_add integer_dup print_integer integer_sub)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2495.6602074000048
Median total errors in population: 287.0456
Error averages by case: (86.45296899999845 12.03 89.25638650000094 11.125 81.49207029999853 11.917 87.96583449999842 11.311 85.7385168000013 11.145 91.96449980000129 11.288 89.64562999999794 11.161 90.98647440000002 11.281 90.26923500000142 11.281 89.25974500000093 11.262 91.1566756000018 12.039 88.96934000000043 11.146 89.00927919999845 11.229 82.46478699999973 11.128 87.49788849999794 11.185 90.97846559999779 11.23 87.83088599999904 10.186 89.54753279999976 11.241 86.55910870000045 12.036 90.64612999999957 11.3 86.27784940000012 11.186 87.61767519999997 11.238 89.91957850000144 11.309 88.37941210000028 11.186 93.05423749999873 11.28)
Error minima by case: (0.497 10 0.2295 3 0.2913 9 0.0311 4 0.3632 4 0.4694 10 0.5707 4 0.5144 5 0.0791 5 0.0797 4 0.1842 9 0.0626 4 0.1326 4 0.759 3 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 9 0.7457 5 0.4178 10 0.2887 4 0.7715 5 0.4673 9 0.4825 10)
Average genome size in population (length): 35.692
Average program size in population (points): 36.692
Average percent parens in population: 0.031
Minimum age in population: 109.3640595866834
Maximum age in population: 113.6133052464545
Average age in population: 111.880493689264
Median age in population: 111.9248417528896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.051
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 87915090
--- Timings ---
Current time: 1529615815372 milliseconds
Total Time:         235.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.8 seconds, 49.2%
Fitness Testing:     92.6 seconds, 39.4%
Report:              26.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_cos} {:instruction float_frominteger} {:instruction in1} {:instruction float_tan} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_cos} {:instruction integer_add} {:instruction in1} {:instruction in1} {:instruction tag_integer_252} {:instruction float_swap} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_add})
Best program: (integer_flush float_cos float_frominteger in1 float_tan float_add integer_mod integer_pop float_dup integer_add integer_dup float_dup_items integer_shove integer_dup_times integer_add integer_flush integer_dup_times integer_add integer_shove float_cos integer_add in1 in1 tag_integer_252 float_swap in1 float_dup_items in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 2854.1721087000046
Median total errors in population: 287.0456
Error averages by case: (101.4620112999982 12.058 105.08635830000097 11.177 95.66678159999839 11.929 104.89979479999718 11.336 101.76305460000259 11.175 103.48125070000131 11.314 104.72006009999774 11.193 105.89425670000003 11.321 103.05697010000164 11.311 101.30913730000111 11.304 102.667845400002 12.062 104.23054740000137 11.177 102.60503759999825 11.279 99.53400720000135 11.171 104.65781439999772 11.211 104.52664209999763 11.302 100.26190899999901 10.199 103.06948649999865 11.295 100.60599760000133 12.061 105.82714739999957 11.33 101.27010549999906 11.193 101.2190273000011 11.297 105.75498020000161 11.347 102.73479669999941 11.194 104.32108889999873 11.31)
Error minima by case: (0.497 10 0.2295 4 0.2913 10 0.0311 3 0.3632 3 0.4694 9 0.5707 3 0.5144 3 0.0791 3 0.0797 3 0.1842 9 0.0626 3 0.1326 5 0.759 2 0.5563 3 0.2824 5 0.3523 8 0.0912 4 0.2547 10 0.7457 3 0.4178 9 0.2887 4 0.7715 3 0.4673 9 0.4825 10)
Average genome size in population (length): 34.922
Average program size in population (points): 35.922
Average percent parens in population: 0.032
Minimum age in population: 110.8267731647449
Maximum age in population: 115.3273589494413
Average age in population: 113.3775145675675
Median age in population: 113.473066878633
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.045
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 88788240
--- Timings ---
Current time: 1529615818288 milliseconds
Total Time:         237.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.3 seconds, 49.3%
Fitness Testing:     93.6 seconds, 39.4%
Report:              26.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_yank} {:instruction tag_integer_488} {:instruction print_float} {:instruction float_tan} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dup_times} {:instruction in1} {:instruction integer_mod} {:instruction float_mult} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_max} {:instruction integer_add} {:instruction float_max} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_min} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction float_yank} {:instruction float_sin} {:instruction float_swap} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction in1} {:instruction float_dec} {:instruction integer_sub} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction float_add} {:instruction float_sin} {:instruction integer_dup} {:instruction float_frominteger})
Best program: (float_stackdepth float_yank tag_integer_488 print_float float_tan float_dec integer_swap float_dup_times in1 integer_mod float_mult float_shove float_dup_times integer_max integer_add float_max integer_pop float_dup integer_dup_times integer_min float_inc integer_shove integer_dup_times integer_add integer_dup float_yank float_sin float_swap in1 float_dup_times float_pop in1 float_dec integer_sub in2 float_sin in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod float_add float_sin integer_dup float_frominteger)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2500.7296455000046
Median total errors in population: 287.0456
Error averages by case: (88.47651399999864 12.022 90.8735995000009 11.119 81.44247889999882 11.912 89.27817659999809 11.296 85.35788000000171 11.141 90.02923480000129 11.251 88.8526299999983 11.16 90.30950320000002 11.27 92.4349469000013 11.273 90.47230290000076 11.261 88.75546480000162 12.034 88.4233400000009 11.15 90.10547259999875 11.217 80.87182300000049 11.129 89.05845149999821 11.178 92.37400719999805 11.227 83.84004579999906 10.167 90.68835359999918 11.236 88.47367450000101 12.042 90.36712999999959 11.282 88.2361163999994 11.171 87.83267520000072 11.232 90.56612150000117 11.298 90.11240259999973 11.161 91.01729999999874 11.251)
Error minima by case: (0.503 9 0.2295 4 0.2913 9 0.0311 6 0.3632 4 0.4694 9 0.5707 4 0.5144 6 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 4 0.759 4 0.5563 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.7457 6 0.4178 10 0.2887 4 0.7715 6 0.4673 9 0.4825 10)
Average genome size in population (length): 33.942
Average program size in population (points): 34.942
Average percent parens in population: 0.033
Minimum age in population: 111.8267731647449
Maximum age in population: 116.8798603613821
Average age in population: 114.8675918347309
Median age in population: 114.9278091779133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.04
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 89636890
--- Timings ---
Current time: 1529615821002 milliseconds
Total Time:         240.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.8 seconds, 49.4%
Fitness Testing:     94.5 seconds, 39.3%
Report:              27.2 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_pop} {:instruction float_tan} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_add} {:instruction integer_pop} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_yank} {:instruction tag_float_426} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_mod})
Best program: (integer_dup_items integer_dup_times float_dec integer_fromfloat integer_add integer_dup in2 float_sub in1 integer_fromfloat integer_add integer_pop float_tan in2 integer_fromfloat integer_pop float_add integer_pop float_add integer_mod integer_pop integer_mult integer_inc float_yank tag_float_426 in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer integer_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 2910.1607456000047
Median total errors in population: 287.0456
Error averages by case: (102.95098569999848 12.053 104.87339930000081 11.136 91.65620289999868 11.934 105.33318779999776 11.298 101.02578190000195 11.15 107.91007140000119 11.295 104.60345759999802 11.17 106.37135010000003 11.291 109.15855140000156 11.291 107.35614350000108 11.283 106.42343860000187 12.054 104.19623440000092 11.157 109.7283509999984 11.243 97.83120570000071 11.147 104.41006949999802 11.183 111.01448879999778 11.265 103.41593199999913 10.195 109.92871199999907 11.264 101.9202891000009 12.057 106.41838729999958 11.304 102.57910439999927 11.187 107.98121080000078 11.256 106.40665580000154 11.311 104.55705959999963 11.183 109.11147499999885 11.292)
Error minima by case: (0.503 10 0.2295 4 0.2913 9 0.0311 6 0.3632 4 0.4694 10 0.5707 4 0.5144 6 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 6 0.4178 10 0.2887 5 0.7715 6 0.5327 9 0.4825 10)
Average genome size in population (length): 34.142
Average program size in population (points): 35.142
Average percent parens in population: 0.033
Minimum age in population: 113.2690245204806
Maximum age in population: 118.2715888795271
Average age in population: 116.3606232723244
Median age in population: 116.4294182731488
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.041
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 90490615
--- Timings ---
Current time: 1529615823639 milliseconds
Total Time:         243.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.3 seconds, 49.4%
Fitness Testing:     95.4 seconds, 39.2%
Report:              27.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_yank} {:instruction tag_integer_488} {:instruction float_dup} {:instruction float_tan} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dup_times} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_pop} {:instruction float_dup} {:instruction float_tan} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_mod})
Best program: (float_mod float_yank tag_integer_488 float_dup float_tan float_dec integer_swap float_dup_times in1 integer_mod integer_add float_dup_items integer_pop float_dup float_tan in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_yankdup integer_dup integer_fromfloat integer_yankdup print_integer integer_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 2334.3833702000043
Median total errors in population: 287.0456
Error averages by case: (79.18167999999872 12.026 83.66423830000095 11.122 77.21542239999883 11.928 81.9697874999986 11.273 77.55270030000098 11.14 84.27055670000126 11.264 82.47984689999834 11.147 84.43208010000002 11.244 86.1187611000012 11.26 83.16261550000067 11.241 82.50500340000161 12.049 82.16782390000043 11.143 85.09255699999869 11.223 72.23952469999945 11.121 81.37735899999832 11.174 88.55744289999804 11.22 78.06161359999905 10.172 86.14721929999953 11.23 78.94672330000031 12.046 84.24725499999958 11.258 78.89326279999983 11.169 82.5625126000003 11.234 83.97634570000109 11.278 81.4807743000001 11.161 85.69226389999875 11.265)
Error minima by case: (0.503 10 0.2295 3 0.2913 9 0.0311 5 0.3632 4 0.4694 10 0.5707 4 0.5144 5 0.0791 5 0.0797 4 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 6 0.4178 10 0.2887 5 0.7715 6 0.5327 9 0.4825 10)
Average genome size in population (length): 33.384
Average program size in population (points): 34.384
Average percent parens in population: 0.033
Minimum age in population: 115.2602731033457
Maximum age in population: 119.8666924018278
Average age in population: 117.8330032012456
Median age in population: 117.879935789479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.045
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 91325365
--- Timings ---
Current time: 1529615826300 milliseconds
Total Time:         246.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.8 seconds, 49.5%
Fitness Testing:     96.3 seconds, 39.1%
Report:              27.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_dup} {:instruction float_div} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction in1} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction in1} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_max})
Best program: (integer_add integer_min float_dup integer_dup float_div integer_sub float_frominteger in1 float_dup_times in1 in2 float_sin in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times in1 in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_max)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2522.2871040000045
Median total errors in population: 287.0456
Error averages by case: (86.06749599999878 12.025 92.57553400000081 11.144 81.98040069999895 11.92 90.18286559999831 11.321 84.14524320000149 11.163 93.06219380000111 11.291 89.62462999999832 11.177 91.24156080000002 11.289 91.12777040000114 11.293 88.98618710000066 11.285 91.41193580000144 12.048 88.98434000000076 11.165 93.83894219999861 11.252 81.19078700000028 11.151 88.66655739999833 11.196 96.343312799998 11.248 87.78051039999919 10.187 94.41280639999945 11.261 86.51812750000077 12.047 91.04112999999958 11.307 85.77560959999954 11.192 91.2236752000006 11.264 90.64735000000114 11.319 88.07007559999984 11.197 94.35306249999891 11.293)
Error minima by case: (0.503 10 0.2295 4 0.2913 9 0.0311 4 0.3632 4 0.4694 10 0.4293 4 0.4856 5 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.2543 5 0.4178 10 0.2887 5 0.2285 5 0.5327 9 0.4825 10)
Average genome size in population (length): 33.201
Average program size in population (points): 34.201
Average percent parens in population: 0.034
Minimum age in population: 116.5154080839675
Maximum age in population: 121.2580300600559
Average age in population: 119.2688597155885
Median age in population: 119.3155995428791
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.043
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 92155490
--- Timings ---
Current time: 1529615828981 milliseconds
Total Time:         248.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.3 seconds, 49.6%
Fitness Testing:     97.1 seconds, 39.1%
Report:              28.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction float_max} {:instruction 17.488584973062032} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction integer_pop} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_add} {:instruction in1} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction in2})
Best program: (float_stackdepth integer_add float_max 17.488584973062032 integer_sub float_frominteger float_frominteger in1 float_dec in1 integer_pop float_swap float_dup_items float_add in1 float_shove integer_yankdup float_stackdepth integer_pop in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer in2)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 2359.900920900005
Median total errors in population: 287.0456
Error averages by case: (83.55654399999855 12.028 84.43412400000092 11.133 75.76610059999868 11.927 84.01930099999863 11.3 81.45551200000125 11.146 83.34164300000128 11.241 85.42390769999815 11.167 86.60364720000003 11.27 84.18181700000129 11.27 82.58941870000076 11.265 81.67701740000167 12.041 84.71302860000038 11.156 83.63932899999864 11.226 76.12889499999957 11.141 83.76590189999811 11.18 85.058395999998 11.232 77.45004579999906 10.157 83.94044799999978 11.247 82.89696680000038 12.04 86.33733269999956 11.289 83.18387659999998 11.16 82.2168718000001 11.237 85.71383650000126 11.298 84.87072960000026 11.162 84.39122999999874 11.232)
Error minima by case: (0.503 10 0.2295 9 0.2913 10 0.0311 9 0.3632 9 0.4694 10 0.4293 10 0.4856 9 0.0791 9 0.0797 10 0.1842 9 0.0626 9 0.1326 9 0.241 10 0.4437 10 0.2824 9 0.3523 9 0.0912 10 0.2547 10 0.2543 10 0.4178 10 0.2887 9 0.2285 10 0.5327 9 0.4825 10)
Average genome size in population (length): 32.14
Average program size in population (points): 33.14
Average percent parens in population: 0.035
Minimum age in population: 118.1770685615863
Maximum age in population: 122.7961519404583
Average age in population: 120.8014029927088
Median age in population: 120.8646836194867
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.035
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 92959140
--- Timings ---
Current time: 1529615831529 milliseconds
Total Time:         251.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.8 seconds, 49.7%
Fitness Testing:     98.0 seconds, 39.0%
Report:              28.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_swap} {:instruction 36} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction in1} {:instruction print_integer})
Best program: (integer_add integer_min float_dup integer_stackdepth integer_dup_items integer_dup_times float_stackdepth integer_fromfloat integer_add integer_pop float_dec integer_sub integer_swap float_dup_times float_add integer_mod integer_stackdepth integer_flush integer_inc integer_swap 36 integer_yank integer_dup_times integer_add integer_dup in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat in1 print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2040.1627675000047
Median total errors in population: 287.0456
Error averages by case: (69.82254399999901 12.036 72.25156650000082 11.121 65.7916440999992 11.933 70.77082969999978 11.296 68.7498704 11.133 70.79792880000107 11.252 71.52832679999858 11.158 72.59582000000002 11.259 71.05784530000089 11.259 69.57005630000047 11.248 70.11712260000118 12.037 70.9468423999995 11.159 70.34499199999914 11.212 65.72403899999898 11.132 70.94113379999867 11.171 72.40837279999846 11.217 67.54821649999926 10.159 70.98690400000062 11.229 69.8762214999996 12.034 72.44702679999965 11.276 69.62529440000068 11.161 69.09744919999928 11.217 72.21386600000098 11.285 71.1037296000007 11.17 71.45012499999892 11.241)
Error minima by case: (0.497 10 0.2295 2 0.2913 10 0.0311 3 0.3632 2 0.4694 10 0.5707 2 0.5144 3 0.0791 2 0.0797 2 0.1842 10 0.0626 2 0.1326 2 0.759 2 0.5563 2 0.2824 2 0.3523 8 0.0912 1 0.2547 9 0.7457 3 0.4178 10 0.2887 2 0.7715 3 0.4673 9 0.4825 10)
Average genome size in population (length): 31.275
Average program size in population (points): 32.275
Average percent parens in population: 0.036
Minimum age in population: 119.603336970982
Maximum age in population: 124.3016890866049
Average age in population: 122.2998316839969
Median age in population: 122.3164479168844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.036
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 93741115
--- Timings ---
Current time: 1529615834231 milliseconds
Total Time:         254.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.4 seconds, 49.8%
Fitness Testing:     98.9 seconds, 38.9%
Report:              28.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_min} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction in2} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_div} {:instruction integer_swap})
Best program: (float_swap integer_yank integer_flush integer_min float_dup integer_add float_dup integer_inc float_dec float_frominteger float_dup_items float_dup_items in2 float_sin in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod integer_div integer_swap)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 1909.6347664000048
Median total errors in population: 287.0456
Error averages by case: (65.334543999999 12.013 66.55173050000074 11.116 60.29935279999911 11.92 68.74758089999968 11.247 63.401507199999806 11.127 64.06145940000098 11.211 67.1821853999986 11.134 69.22030560000002 11.225 66.59129160000094 11.227 64.49365780000055 11.212 62.27430680000116 12.032 66.57971719999911 11.126 64.24772679999906 11.184 61.749761999998896 11.111 66.80679599999858 11.157 66.24824319999846 11.183 57.86792109999927 10.141 64.19772160000089 11.184 64.85794799999938 12.034 69.08053539999966 11.241 65.12829440000091 11.146 61.95902659999903 11.193 68.87278000000094 11.256 66.85372960000117 11.138 65.24664249999901 11.222)
Error minima by case: (0.497 10 0.2295 2 0.2913 10 0.0311 3 0.3632 2 0.4694 10 0.4293 2 0.4856 3 0.0791 2 0.0797 2 0.1842 9 0.0626 2 0.1326 2 0.241 2 0.4437 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.2543 3 0.4178 10 0.2887 2 0.2285 3 0.4673 9 0.4825 10)
Average genome size in population (length): 30.525
Average program size in population (points): 31.525
Average percent parens in population: 0.037
Minimum age in population: 120.9863885714058
Maximum age in population: 125.8874209625817
Average age in population: 123.7441673307888
Median age in population: 123.7900313920921
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.045
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 94504365
--- Timings ---
Current time: 1529615836984 milliseconds
Total Time:         256.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.0 seconds, 49.9%
Fitness Testing:     99.7 seconds, 38.8%
Report:              28.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction in2} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_min} {:instruction integer_min} {:instruction integer_sub} {:instruction float_cos} {:instruction in1} {:instruction tagged_57} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_inc} {:instruction float_dup_times} {:instruction -89.97686213814093} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction float_sub} {:instruction in1} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_mult} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction 18.884173507539728} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction float_dup_times} {:instruction print_integer} {:instruction in1} {:instruction float_mult} {:instruction float_dup} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_min} {:instruction float_inc})
Best program: (integer_dup_items integer_dup_times float_dec in2 integer_add integer_dup in2 float_sub in1 float_cos integer_dup_items integer_dup_items integer_fromfloat integer_min integer_min integer_min integer_sub float_cos in1 tagged_57 integer_mod integer_mod integer_pop integer_dec integer_inc float_dup_times -89.97686213814093 integer_fromfloat integer_min float_sub in1 integer_add integer_dup integer_swap float_mult integer_inc integer_inc float_yank in2 in2 18.884173507539728 in1 integer_fromfloat integer_add float_flush float_dup_times print_integer in1 float_mult float_dup float_swap integer_yankdup float_yankdup float_min float_inc)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2379.7528145000047
Median total errors in population: 287.0456
Error averages by case: (82.14498569999866 12.039 83.66949130000081 11.13 80.06858119999873 11.927 82.73052989999913 11.31 80.71850350000071 11.152 86.5864198000012 11.288 83.85944739999826 11.164 84.96603730000002 11.282 86.43982590000125 11.286 85.31833640000082 11.273 85.76574000000159 12.048 83.16711079999979 11.164 86.03164739999866 11.241 77.64483169999946 11.136 82.39818879999825 11.185 87.04008379999804 11.238 83.28615929999913 10.188 85.6120477 11.243 82.5797984999999 12.049 84.70708139999962 11.302 81.97910440000041 11.192 84.99865139999986 11.242 84.14445680000124 11.312 83.61859230000051 11.198 87.40416179999882 11.284)
Error minima by case: (0.503 10 0.2295 2 0.2913 10 0.0311 3 0.3632 2 0.4694 10 0.4293 2 0.4856 3 0.0791 2 0.0797 2 0.1842 10 0.0626 2 0.1326 2 0.241 2 0.4437 2 0.2824 2 0.3523 8 0.0912 1 0.2547 10 0.2543 3 0.4178 9 0.2887 2 0.2285 3 0.5327 9 0.4825 10)
Average genome size in population (length): 30.57
Average program size in population (points): 31.57
Average percent parens in population: 0.037
Minimum age in population: 122.0559780571213
Maximum age in population: 127.3660411221004
Average age in population: 125.2294118010761
Median age in population: 125.2741180299639
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.042
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 95268690
--- Timings ---
Current time: 1529615839741 milliseconds
Total Time:         259.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.6 seconds, 50.0%
Fitness Testing:    100.6 seconds, 38.8%
Report:              29.1 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_sub} {:instruction float_dec} {:instruction in2} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup_items} {:instruction in1} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_dup} {:instruction in2} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub})
Best program: (integer_min integer_sub float_dec in2 integer_sub float_dec integer_sub float_dup_items in1 float_add integer_mod integer_dup_times float_rot integer_dup in2 float_dup integer_sub float_dec integer_sub float_frominteger float_swap float_dec float_dup_items float_dup_times integer_dup_times in2 float_sub in1 integer_fromfloat integer_add integer_dup print_integer integer_sub)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2402.9136402000045
Median total errors in population: 287.0456
Error averages by case: (83.4357103999985 12.03 82.47872230000091 11.146 81.62521699999863 11.933 82.26699919999885 11.311 81.17042530000109 11.179 88.06172440000122 11.286 84.84192489999802 11.18 86.03331890000001 11.282 87.89407680000137 11.304 87.15358560000094 11.282 87.50714920000175 12.064 83.95857010000034 11.171 86.67500299999853 11.254 79.09510639999982 11.144 82.061849699998 11.196 87.55757199999783 11.232 85.39770439999906 10.191 86.61353599999964 11.242 82.93183800000047 12.062 85.54882489999959 11.313 83.23724989999991 11.195 85.8944283000003 11.233 84.41525130000136 11.324 84.95127220000018 11.194 89.07257999999877 11.286)
Error minima by case: (0.503 10 0.2295 3 0.2913 10 0.0311 5 0.3632 4 0.4694 10 0.5707 4 0.5144 5 0.0791 5 0.0797 4 0.1842 9 0.0626 4 0.1326 2 0.759 4 0.5563 4 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.7457 6 0.4178 10 0.2887 2 0.2285 6 0.5327 9 0.4825 10)
Average genome size in population (length): 29.827
Average program size in population (points): 30.827
Average percent parens in population: 0.038
Minimum age in population: 123.0559780571213
Maximum age in population: 128.6170986495429
Average age in population: 126.7335678278257
Median age in population: 126.7712521920278
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.038
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 96014465
--- Timings ---
Current time: 1529615842659 milliseconds
Total Time:         262.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.4 seconds, 50.1%
Fitness Testing:    101.4 seconds, 38.6%
Report:              29.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_min} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_cos} {:instruction integer_add} {:instruction in1} {:instruction in1} {:instruction tag_integer_252} {:instruction float_swap} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction integer_add} {:instruction tag_integer_456} {:instruction float_sin} {:instruction integer_mod} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction float_dup} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup} {:instruction float_cos} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_cos} {:instruction integer_dup} {:instruction in2} {:instruction float_mult} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod})
Best program: (float_stackdepth integer_dup float_inc integer_min float_stackdepth float_dup_items integer_yank integer_dup_times integer_dup_times integer_add integer_flush integer_dup_times integer_add integer_shove float_cos integer_add in1 in1 tag_integer_252 float_swap in1 in2 float_sub integer_add tag_integer_456 float_sin integer_mod in1 float_dup_times float_pop float_dup float_dup float_tan integer_dec float_dup float_cos float_dec float_dup_items integer_yank float_dec float_cos integer_dup in2 float_mult float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2137.2120135000046
Median total errors in population: 287.0456
Error averages by case: (74.83501099999869 12.02 75.08086700000075 11.12 70.73856589999889 11.911 72.86032839999962 11.281 70.47549620000017 11.137 75.24186760000104 11.242 73.57317239999824 11.147 75.21974240000002 11.253 76.80321250000131 11.259 76.04865780000085 11.243 74.39477800000154 12.039 73.48769819999926 11.135 76.1249311999987 11.206 68.10443299999892 11.13 73.40594849999822 11.171 76.7068311999981 11.21 71.04065159999924 10.154 76.38917440000074 11.213 73.2451462999996 12.039 75.22076569999962 11.268 74.67369860000076 11.168 73.79002659999921 11.226 75.34628100000134 11.279 76.10480450000091 11.169 76.02692349999897 11.253)
Error minima by case: (0.503 9 0.2295 2 0.2913 9 0.0311 3 0.3632 2 0.4694 10 0.4293 2 0.4856 3 0.0791 2 0.0797 2 0.1842 10 0.0626 2 0.1326 2 0.241 2 0.4437 2 0.2824 2 0.3523 8 0.0912 1 0.2547 10 0.2543 3 0.4178 9 0.2887 2 0.2285 3 0.4673 9 0.4825 10)
Average genome size in population (length): 29.501
Average program size in population (points): 30.501
Average percent parens in population: 0.038
Minimum age in population: 125.2279584465572
Maximum age in population: 130.0988927220982
Average age in population: 128.2037704754939
Median age in population: 128.2533985805061
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.045
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 96752090
--- Timings ---
Current time: 1529615845369 milliseconds
Total Time:         265.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.9 seconds, 50.2%
Fitness Testing:    102.2 seconds, 38.6%
Report:              29.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_pop} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer})
Best program: (float_stackdepth integer_add integer_min float_dup float_stackdepth integer_add float_stackdepth integer_inc integer_min integer_mod integer_pop in1 integer_yankdup integer_min float_rot in2 integer_mod float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2596.6465913000043
Median total errors in population: 287.0456
Error averages by case: (91.7579409999986 12.045 91.96191600000076 11.157 89.83569989999869 11.931 92.62807269999806 11.366 88.09492560000136 11.177 93.93278560000111 11.305 91.71781779999813 11.199 93.48549140000003 11.328 95.6589977000014 11.331 94.85902770000092 11.314 93.76878080000162 12.053 91.15149740000068 11.189 94.88007479999864 11.276 85.87332000000029 11.171 91.26292579999811 11.218 96.591595199998 11.283 91.7389997999992 10.206 95.36789759999935 11.291 88.7789803000005 12.058 93.31235609999959 11.345 91.63799679999956 11.203 93.98094300000054 11.283 93.16765400000143 11.362 93.12424429999983 11.217 94.4616499999989 11.307)
Error minima by case: (0.503 9 0.2295 3 0.2913 9 0.0311 5 0.3632 4 0.4694 9 0.4293 4 0.4856 5 0.0791 5 0.0797 4 0.1842 9 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.2543 6 0.4178 9 0.2887 5 0.2285 6 0.5327 9 0.4825 10)
Average genome size in population (length): 29.085
Average program size in population (points): 30.085
Average percent parens in population: 0.039
Minimum age in population: 126.2279584465572
Maximum age in population: 131.6694474797305
Average age in population: 129.6543748260257
Median age in population: 129.6945595496076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.044
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 97479315
--- Timings ---
Current time: 1529615847941 milliseconds
Total Time:         267.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.4 seconds, 50.2%
Fitness Testing:    103.0 seconds, 38.5%
Report:              30.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_add} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction float_sub} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_inc} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add})
Best program: (print_float integer_add integer_pop float_dup integer_inc integer_mod in1 integer_shove float_sub in1 in2 float_sub float_sub float_rot in2 integer_mod float_swap in1 float_yank in1 in2 float_sub in1 integer_fromfloat in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer integer_inc float_yank in1 in2 float_sub in1 integer_fromfloat integer_add)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2180.5256070000046
Median total errors in population: 287.0456
Error averages by case: (75.52757039999867 12.034 74.87110080000089 11.132 73.94056759999881 11.937 75.48049949999951 11.263 72.29454820000022 11.143 75.97063870000125 11.249 76.67166189999833 11.145 77.84910490000001 11.242 78.73071030000116 11.253 77.0718907000007 11.242 74.80016100000142 12.05 75.94695679999967 11.143 78.8451481999988 11.226 70.68468409999912 11.122 74.91008359999836 11.162 80.51483169999815 11.216 73.19295499999909 10.161 78.12522250000029 11.225 73.29582119999966 12.05 77.62903329999958 11.256 74.91078690000053 11.167 76.10413179999954 11.224 76.95348560000112 11.268 76.79627340000079 11.158 77.09173889999877 11.248)
Error minima by case: (0.497 10 0.2295 4 0.2913 9 0.0311 6 0.3632 4 0.4694 10 0.5707 4 0.5144 6 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.7457 6 0.4178 10 0.2887 5 0.7715 6 0.4673 9 0.4825 10)
Average genome size in population (length): 28.543
Average program size in population (points): 29.543
Average percent parens in population: 0.040
Minimum age in population: 128.652506476288
Maximum age in population: 133.0112793530687
Average age in population: 131.0979894363772
Median age in population: 131.1584998862841
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.039
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 98193040
--- Timings ---
Current time: 1529615850692 milliseconds
Total Time:         270.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.1 seconds, 50.3%
Fitness Testing:    103.8 seconds, 38.4%
Report:              30.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_div} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_dup_times} {:instruction in1} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer})
Best program: (integer_add integer_add integer_yankdup float_dup integer_sub float_div integer_swap integer_stackdepth float_sin float_dup_times in1 integer_sub float_frominteger integer_rot float_dup_times integer_swap float_mod integer_pop float_dup integer_inc integer_dup_times float_dec float_dup_items in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 2240.0483065000044
Median total errors in population: 287.0456
Error averages by case: (77.46691409999866 12.063 79.34876500000084 11.141 77.17415529999876 11.951 78.1248335999991 11.312 75.33976360000061 11.159 79.8316218000012 11.276 77.96467789999824 11.177 79.64156530000001 11.277 79.70181570000126 11.279 78.75472110000082 11.273 79.58820540000157 12.064 77.48581279999975 11.172 79.19011559999869 11.247 73.83607209999948 11.157 77.85691679999823 11.189 80.46033239999808 11.252 77.34232399999912 10.183 79.10019320000018 11.264 75.78936929999992 12.058 79.6038985999996 11.296 77.34798280000032 11.183 77.74710319999969 11.258 79.57258310000125 11.299 78.53333730000065 11.19 80.25022649999882 11.275)
Error minima by case: (0.503 10 0.2295 3 0.2913 10 0.0311 5 0.3632 4 0.4694 9 0.5707 4 0.5144 5 0.0791 4 0.0797 4 0.1842 10 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 4 0.3523 9 0.0912 3 0.2547 9 0.7457 6 0.4178 10 0.2887 5 0.7715 6 0.5327 9 0.4825 10)
Average genome size in population (length): 27.893
Average program size in population (points): 28.893
Average percent parens in population: 0.041
Minimum age in population: 129.7720887402652
Maximum age in population: 134.5222807371919
Average age in population: 132.5723450656729
Median age in population: 132.6069001644065
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.03
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 98890465
--- Timings ---
Current time: 1529615853498 milliseconds
Total Time:         273.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.8 seconds, 50.4%
Fitness Testing:    104.6 seconds, 38.3%
Report:              30.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction float_swap} {:instruction float_cos} {:instruction float_yank} {:instruction in1} {:instruction integer_pop} {:instruction float_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction in2})
Best program: (float_rot float_swap float_cos float_yank in1 integer_pop float_sub in1 float_yank in1 in2 float_sub in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer in2)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2252.2534305000045
Median total errors in population: 287.0456
Error averages by case: (77.46604099999901 12.037 78.02358300000076 11.138 75.7191875999992 11.915 81.72905219999896 11.316 75.73905920000044 11.157 79.64674520000108 11.273 79.50762489999866 11.18 81.73858960000003 11.284 81.62165880000093 11.298 79.4127811000005 11.291 78.46004360000126 12.041 79.04377820000003 11.168 78.41653339999908 11.251 74.32934099999933 11.159 79.77089519999863 11.201 80.14498399999846 11.247 75.56927339999922 10.18 78.37799200000003 11.264 78.05767450000016 12.044 81.69434989999962 11.306 77.30671220000008 11.182 76.78571699999974 11.254 81.6605220000009 11.319 78.92913150000042 11.193 80.13715999999896 11.267)
Error minima by case: (0.497 9 0.2295 4 0.2913 10 0.0311 6 0.3632 4 0.4694 10 0.5707 4 0.5144 6 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 9 0.7457 6 0.4178 9 0.2887 5 0.7715 6 0.4673 9 0.4825 10)
Average genome size in population (length): 27.922
Average program size in population (points): 28.922
Average percent parens in population: 0.041
Minimum age in population: 131.4068054199633
Maximum age in population: 136.2401011390017
Average age in population: 134.0677552072195
Median age in population: 134.0759344106533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.042
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 99588540
--- Timings ---
Current time: 1529615856229 milliseconds
Total Time:         276.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.5 seconds, 50.5%
Fitness Testing:    105.4 seconds, 38.2%
Report:              31.0 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction integer_min} {:instruction tag_integer_480} {:instruction integer_max} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup_items} {:instruction in1} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub})
Best program: (integer_stackdepth integer_min tag_integer_480 integer_max integer_sub float_dec integer_sub float_dup_items in1 float_add integer_mod integer_dup_times integer_add integer_dup in2 float_dup integer_sub float_dec float_dup_times float_frominteger float_swap float_dec float_dup_items float_dup_times integer_dup_times in2 float_sub in1 integer_fromfloat integer_add integer_dup print_integer integer_sub)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2682.848009100004
Median total errors in population: 287.0456
Error averages by case: (97.6106930999984 12.068 95.79533840000096 11.174 94.73130659999862 11.93 96.04515439999807 11.37 92.27309930000186 11.201 95.13264400000129 11.314 95.85966889999796 11.209 96.81586090000003 11.341 97.99493450000142 11.346 97.06097230000093 11.33 94.96294950000183 12.056 95.27879050000067 11.204 96.75998329999847 11.301 92.87267950000064 11.19 95.35086289999794 11.226 98.19850369999781 11.297 93.35969649999902 10.203 97.09280609999938 11.308 95.16840220000077 12.067 96.6565109999996 11.348 97.52580679999961 11.216 95.77258370000057 11.304 96.4127149000014 11.356 98.66440359999973 11.224 95.55864249999873 11.31)
Error minima by case: (0.503 11 0.2295 4 0.2913 9 0.0311 5 0.3632 4 0.4694 10 0.5707 4 0.5144 5 0.0791 4 0.0797 4 0.1842 9 0.0626 4 0.1326 4 0.759 4 0.5563 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.7457 5 0.4178 10 0.2887 4 0.7715 5 0.5327 9 0.4825 9)
Average genome size in population (length): 27.469
Average program size in population (points): 28.469
Average percent parens in population: 0.041
Minimum age in population: 132.6548657625443
Maximum age in population: 137.4034694036668
Average age in population: 135.5359430198873
Median age in population: 135.5583879207316
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.039
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 100275265
--- Timings ---
Current time: 1529615858980 milliseconds
Total Time:         278.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.1 seconds, 50.6%
Fitness Testing:    106.2 seconds, 38.1%
Report:              31.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -32.25421214968122} {:instruction integer_flush} {:instruction integer_min} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yank} {:instruction -97} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_cos} {:instruction integer_max})
Best program: (float_add -32.25421214968122 integer_flush integer_min float_dup integer_yank integer_dup_times float_pop integer_dup in2 float_sub in1 integer_fromfloat integer_add integer_yank -97 integer_add integer_dup integer_sub integer_sub in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer float_cos integer_max)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 2072.0818258000045
Median total errors in population: 287.0456
Error averages by case: (71.17901099999881 12.031 73.31396850000081 11.116 69.85269199999892 11.925 72.26166809999954 11.282 70.17233520000029 11.145 72.39931270000112 11.252 73.21640999999836 11.158 74.21319950000003 11.25 72.06794690000117 11.274 71.22046230000072 11.252 70.85029140000138 12.036 72.50250009999952 11.153 70.99225719999886 11.222 68.93719159999927 11.125 71.67034219999837 11.172 72.12337279999824 11.211 67.3297320999992 10.173 71.00408640000065 11.224 70.07267449999955 12.03 73.95927399999962 11.278 70.98569860000067 11.17 70.10518139999922 11.22 73.31198660000116 11.287 72.67686990000088 11.173 73.2593607999989 11.245)
Error minima by case: (0.497 10 0.2295 2 0.2913 9 0.0311 3 0.3632 2 0.4694 10 0.4293 2 0.4856 3 0.0791 2 0.0797 2 0.1842 9 0.0626 2 0.1326 2 0.241 2 0.4437 2 0.2824 2 0.3523 9 0.0912 1 0.2547 3 0.2543 3 0.4178 10 0.2887 2 0.2285 3 0.4673 9 0.4825 10)
Average genome size in population (length): 27.432
Average program size in population (points): 28.432
Average percent parens in population: 0.041
Minimum age in population: 134.0145084289754
Maximum age in population: 139.1230614831711
Average age in population: 137.0615427336283
Median age in population: 137.0999551418695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.041
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 100961115
--- Timings ---
Current time: 1529615861705 milliseconds
Total Time:         281.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.6 seconds, 50.7%
Fitness Testing:    107.1 seconds, 38.1%
Report:              31.6 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_sub} {:instruction float_swap} {:instruction in1} {:instruction float_shove} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod})
Best program: (in1 integer_dec float_dec integer_mult float_dup_times integer_pop float_inc integer_pop integer_sub float_swap in1 float_shove in1 in2 in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 2285.3190805000045
Median total errors in population: 287.0456
Error averages by case: (80.89151399999884 12.049 79.84089450000076 11.11 77.42156589999904 11.931 80.20836319999921 11.303 75.71687520000039 11.136 79.89582660000104 11.278 79.82804909999848 11.154 80.98816160000003 11.262 83.31181700000114 11.267 82.0181796000007 11.257 79.1817280000013 12.047 79.20815379999976 11.138 82.28419639999882 11.226 74.64541299999934 11.128 79.22290189999852 11.169 83.93011359999824 11.228 76.47793199999921 10.183 82.61435679999984 11.242 78.96840099999994 12.053 80.79082409999963 11.285 80.73111640000022 11.189 81.08344919999992 11.233 80.50492250000109 11.296 82.20940260000032 11.196 80.70092249999897 11.284)
Error minima by case: (0.503 10 0.2295 3 0.2913 10 0.0311 4 0.3632 3 0.4694 10 0.5707 3 0.5144 4 0.0791 3 0.0797 3 0.1842 10 0.0626 3 0.1326 3 0.759 3 0.5563 3 0.2824 3 0.3523 9 0.0912 2 0.2547 10 0.7457 4 0.4178 10 0.2887 3 0.7715 4 0.5327 9 0.4825 10)
Average genome size in population (length): 26.745
Average program size in population (points): 27.745
Average percent parens in population: 0.042
Minimum age in population: 135.523474667415
Maximum age in population: 140.581010086729
Average age in population: 138.5622193380802
Median age in population: 138.5935297906931
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.039
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 101629765
--- Timings ---
Current time: 1529615864180 milliseconds
Total Time:         284.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.0 seconds, 50.7%
Fitness Testing:    108.0 seconds, 38.0%
Report:              31.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_cos} {:instruction float_frominteger} {:instruction in1} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_min} {:instruction float_dup} {:instruction integer_sub} {:instruction float_swap} {:instruction in1} {:instruction float_shove} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer})
Best program: (integer_flush float_cos float_frominteger in1 float_frominteger float_add integer_mod integer_pop float_dup integer_sub integer_dup integer_min integer_min float_dup integer_sub float_swap in1 float_shove in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 2001.5492965000049
Median total errors in population: 287.0456
Error averages by case: (67.15862199999881 12.041 69.99369750000078 11.125 67.62447009999894 11.935 69.47667419999986 11.272 65.38105439999981 11.133 70.6231332000011 11.241 67.71733189999848 11.15 68.78321920000002 11.257 71.05926910000113 11.249 69.57980970000068 11.247 69.92891180000139 12.036 67.34940419999909 11.149 70.62872679999893 11.214 65.05503899999881 11.139 68.57290859999848 11.172 72.42524319999825 11.22 67.33002399999917 10.157 71.24972160000084 11.233 65.93458899999919 12.044 68.91980689999963 11.262 67.011992800001 11.155 68.86216049999912 11.226 69.21423700000106 11.273 68.22257980000128 11.167 71.10966999999893 11.24)
Error minima by case: (0.497 10 0.2295 3 0.2913 10 0.0311 5 0.3632 4 0.4694 10 0.4293 4 0.4856 5 0.0791 5 0.0797 4 0.1842 9 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 11 0.2543 6 0.4178 10 0.2887 5 0.2285 6 0.4673 10 0.4825 10)
Average genome size in population (length): 26.66
Average program size in population (points): 27.66
Average percent parens in population: 0.042
Minimum age in population: 136.9624519222063
Maximum age in population: 141.9379468702493
Average age in population: 140.0363673486569
Median age in population: 140.0656098637001
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.045
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 102296290
--- Timings ---
Current time: 1529615866529 milliseconds
Total Time:         286.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.4 seconds, 50.8%
Fitness Testing:    108.7 seconds, 38.0%
Report:              32.1 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_dup} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_mod})
Best program: (integer_flush float_cos integer_swap integer_add integer_dup in2 float_dup in1 integer_fromfloat integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 2267.3789345000046
Median total errors in population: 287.0456
Error averages by case: (79.45171779999853 12.043 79.52475470000088 11.131 79.70339289999865 11.927 78.41892029999892 11.298 75.22385310000085 11.15 80.25310370000126 11.259 77.72342039999832 11.171 78.78784070000003 11.271 82.68263970000145 11.28 81.77015810000096 11.267 79.5401567000018 12.044 77.29054530000005 11.162 82.48490249999851 11.241 73.85155579999957 11.143 77.88465909999832 11.181 83.82702209999782 11.236 76.48286609999906 10.173 82.81255970000016 11.239 77.42305370000008 12.055 78.83601339999959 11.289 79.30205210000011 11.175 80.91514819999982 11.241 78.98528970000113 11.298 80.62095640000054 11.181 80.86835229999876 11.259)
Error minima by case: (0.497 10 0.2295 5 0.2913 9 0.0311 4 0.3632 4 0.4694 10 0.5707 4 0.5144 5 0.0791 4 0.0797 4 0.1842 9 0.0626 4 0.1326 5 0.759 3 0.5563 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.7457 5 0.4178 10 0.2887 5 0.7715 5 0.4673 10 0.4825 10)
Average genome size in population (length): 26.14
Average program size in population (points): 27.14
Average percent parens in population: 0.043
Minimum age in population: 137.9624519222063
Maximum age in population: 143.5257846305813
Average age in population: 141.4606801127617
Median age in population: 141.4986696496157
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.04
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 102949790
--- Timings ---
Current time: 1529615868797 milliseconds
Total Time:         288.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.8 seconds, 50.9%
Fitness Testing:    109.4 seconds, 37.9%
Report:              32.3 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_pop} {:instruction integer_dup} {:instruction in2} {:instruction float_dup} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_sin} {:instruction integer_sub} {:instruction float_add} {:instruction tagged_7} {:instruction integer_dup})
Best program: (integer_sub float_frominteger integer_swap float_pop integer_dup in2 float_dup in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer float_dup_times float_sin integer_sub float_add tagged_7 integer_dup)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 1647.717404400005
Median total errors in population: 287.0456
Error averages by case: (55.76096429999894 12.024 53.530481200000786 11.07 54.68759029999911 11.956 52.349415400000126 11.189 51.5862549999998 11.079 55.16718360000114 11.173 53.181046499998736 11.1 53.68126400000002 11.17 57.372173100000886 11.175 57.07206390000043 11.17 54.55940260000114 12.028 52.56994259999922 11.097 57.35412459999915 11.14 50.439663299998784 11.085 52.344425299998754 11.101 58.03163699999853 11.137 53.01232419999918 10.124 57.431291400000816 11.153 55.069119899999386 12.031 53.624455499999605 11.19 55.66362000000092 11.119 57.001701199999054 11.144 53.281225200000804 11.189 56.54445100000132 11.126 55.45958329999888 11.172)
Error minima by case: (0.503 10 0.2295 3 0.2913 10 0.0311 5 0.3632 4 0.4694 9 0.4293 4 0.4856 5 0.0791 5 0.0797 4 0.1842 10 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.2543 5 0.4178 9 0.2887 5 0.2285 5 0.4303 8 0.4825 9)
Average genome size in population (length): 25.853
Average program size in population (points): 26.853
Average percent parens in population: 0.043
Minimum age in population: 140.4259113461067
Maximum age in population: 144.8819459718705
Average age in population: 142.9413916175907
Median age in population: 143.0025962858763
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 103596115
--- Timings ---
Current time: 1529615871395 milliseconds
Total Time:         291.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.2 seconds, 50.9%
Fitness Testing:    110.3 seconds, 37.9%
Report:              32.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction in2} {:instruction float_swap} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_times} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub})
Best program: (integer_mod in2 float_swap float_dup integer_swap float_dec float_dup integer_sub integer_stackdepth float_frominteger float_dup_times float_frominteger in1 float_dup_times float_add float_stackdepth float_dec float_dup_items float_dup_times integer_dup_times in2 float_sub in1 integer_fromfloat integer_add integer_dup print_integer integer_sub)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 1933.002053700005
Median total errors in population: 287.0456
Error averages by case: (66.1436103999985 12.035 65.62295850000092 11.115 64.47719999999866 11.943 64.51313610000014 11.275 63.94977829999979 11.131 66.99790860000134 11.234 65.81062209999811 11.152 66.48715270000002 11.243 67.90571540000138 11.243 67.41309240000086 11.24 66.73006980000176 12.038 65.23390459999874 11.146 66.96084839999857 11.204 61.782507299998635 11.129 65.24618369999808 11.158 67.85776159999786 11.201 65.17614869999903 10.153 67.02318080000093 11.221 65.85771839999923 12.037 66.41722699999954 11.257 66.03490060000115 11.146 66.37349099999885 11.209 66.1995990000013 11.263 67.15301080000144 11.164 67.47632749999867 11.221)
Error minima by case: (0.503 10 0.2295 2 0.2913 10 0.0311 3 0.3632 2 0.4694 10 0.5707 2 0.5144 3 0.0791 2 0.0797 2 0.1842 9 0.0626 2 0.1326 2 0.759 2 0.5563 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.7457 3 0.4178 10 0.2887 2 0.7715 3 0.5327 9 0.4825 10)
Average genome size in population (length): 25.306
Average program size in population (points): 26.306
Average percent parens in population: 0.043
Minimum age in population: 141.8394898340143
Maximum age in population: 146.3618732897379
Average age in population: 144.3907783306661
Median age in population: 144.4568551943711
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.03
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 104228815
--- Timings ---
Current time: 1529615873941 milliseconds
Total Time:         293.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.8 seconds, 51.0%
Fitness Testing:    111.0 seconds, 37.8%
Report:              32.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction -32.25421214968122} {:instruction integer_flush} {:instruction integer_min} {:instruction integer_sub} {:instruction float_dup} {:instruction float_max} {:instruction float_max} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub})
Best program: (float_swap -32.25421214968122 integer_flush integer_min integer_sub float_dup float_max float_max float_dec float_dup_items integer_yank float_sub integer_add integer_dup in2 float_sub in1 integer_fromfloat integer_add integer_dup print_integer integer_sub)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2241.2189156000045
Median total errors in population: 287.0456
Error averages by case: (78.38910179999881 12.05 78.55194050000082 11.139 77.34072129999893 11.927 77.62780629999902 11.335 74.2945346000005 11.16 79.70282660000115 11.285 76.81614669999848 11.182 77.79158760000003 11.303 82.27989610000118 11.305 81.31125930000066 11.292 79.48217540000141 12.042 76.20865369999991 11.181 79.92806379999907 11.254 72.9522998999994 11.164 76.63912029999855 11.209 81.52539599999828 11.248 76.59357969999917 10.189 80.3484479999999 11.262 77.86181640000027 12.051 77.5940288999996 11.309 78.29220220000009 11.19 78.99585090000005 11.26 77.24318820000109 11.328 79.85738390000037 11.201 80.44988749999887 11.275)
Error minima by case: (0.503 10 0.2295 2 0.2913 10 0.0311 3 0.3632 2 0.4694 10 0.4293 2 0.4856 3 0.0791 2 0.0797 2 0.1842 9 0.0626 2 0.1326 2 0.241 2 0.4437 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.2543 3 0.4178 10 0.2887 2 0.2285 3 0.5327 9 0.4825 10)
Average genome size in population (length): 24.845
Average program size in population (points): 25.845
Average percent parens in population: 0.044
Minimum age in population: 143.3158233848499
Maximum age in population: 147.6548437728915
Average age in population: 145.8936745668615
Median age in population: 145.9598038301425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.043
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 104849940
--- Timings ---
Current time: 1529615876470 milliseconds
Total Time:         296.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.3 seconds, 51.1%
Fitness Testing:    111.8 seconds, 37.8%
Report:              33.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction print_float} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_cos} {:instruction integer_mod} {:instruction -55.09466359754522} {:instruction integer_flush} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction 5} {:instruction 10} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_dup} {:instruction float_dup} {:instruction float_mult} {:instruction float_swap} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_mod})
Best program: (integer_dup_items print_float float_dec integer_yank integer_flush float_cos float_frominteger float_frominteger integer_rot float_dup_times integer_swap float_stackdepth float_cos integer_mod -55.09466359754522 integer_flush float_cos float_frominteger float_frominteger integer_rot float_dup_times integer_swap float_stackdepth float_cos integer_mod integer_swap float_stackdepth integer_add 5 10 float_flush float_frominteger float_mult integer_dup float_dup float_mult float_swap float_rot float_shove in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer integer_mod)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1970.8362884000048
Median total errors in population: 287.0456
Error averages by case: (68.28915099999872 12.032 66.66095000000072 11.137 68.50380229999884 11.938 66.62762190000004 11.279 62.58232959999981 11.157 68.07803100000099 11.231 65.10071259999845 11.165 67.08271000000002 11.263 71.16539900000124 11.274 70.2486142000008 11.263 67.25051720000137 12.03 64.65828079999888 11.159 70.51825719999879 11.235 62.077237999998935 11.145 65.18918829999842 11.19 71.67437279999821 11.232 64.46144409999928 10.153 70.64408640000104 11.242 67.82622359999921 12.042 67.14353059999965 11.281 68.09810220000105 11.161 68.9153152999988 11.239 67.28198750000121 11.284 69.42199030000133 11.168 68.80143249999904 11.235)
Error minima by case: (0.497 10 0.2295 9 0.2913 9 0.0311 10 0.3632 9 0.4694 9 0.4293 10 0.4856 9 0.0791 10 0.0797 10 0.1842 9 0.0626 8 0.1326 10 0.241 10 0.4437 10 0.2824 9 0.3523 9 0.0912 9 0.2547 10 0.2543 10 0.4178 9 0.2887 9 0.2285 10 0.4673 9 0.4825 9)
Average genome size in population (length): 24.417
Average program size in population (points): 25.417
Average percent parens in population: 0.045
Minimum age in population: 144.7408655232603
Maximum age in population: 149.2867579527816
Average age in population: 147.4176746230001
Median age in population: 147.4382220544407
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.034
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 105460365
--- Timings ---
Current time: 1529615879134 milliseconds
Total Time:         298.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.8 seconds, 51.1%
Fitness Testing:    112.6 seconds, 37.7%
Report:              33.3 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_tan} {:instruction integer_min} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction in1})
Best program: (integer_mod float_stackdepth integer_flush float_stackdepth integer_mod integer_min integer_min float_dup integer_pop integer_shove integer_yank float_dup_items integer_mult integer_inc float_dup float_stackdepth float_tan integer_min in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer integer_fromfloat float_dup_items print_integer in1)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 2093.2901733000044
Median total errors in population: 287.0456
Error averages by case: (70.59554999999888 12.047 74.97043550000079 11.099 69.08935279999902 11.936 70.64420769999992 11.257 68.22578559999985 11.105 76.64264300000114 11.273 70.8574783999985 11.122 71.80913280000001 11.227 74.66097520000112 11.231 73.78133900000067 11.223 76.45164900000138 12.045 70.2340911999991 11.112 74.76372679999888 11.189 66.74889499999883 11.095 70.0801203999985 11.135 76.36624319999828 11.183 74.31069349999918 10.186 75.19172160000014 11.188 69.5657120999993 12.044 71.60707839999961 11.248 70.51213000000092 11.175 73.7350265999994 11.197 71.15560800000102 11.261 72.10979500000103 11.197 77.14078249999886 11.265)
Error minima by case: (0.503 10 0.2295 4 0.2913 10 0.0311 4 0.3632 4 0.4694 10 0.4293 4 0.4856 5 0.0791 4 0.0797 4 0.1842 9 0.0626 4 0.1326 5 0.241 3 0.4437 4 0.2824 4 0.3523 9 0.0912 3 0.2547 10 0.2543 5 0.4178 10 0.2887 5 0.2285 5 0.5327 9 0.4825 10)
Average genome size in population (length): 24.829
Average program size in population (points): 25.829
Average percent parens in population: 0.044
Minimum age in population: 146.2021067749464
Maximum age in population: 150.8201898127275
Average age in population: 148.9460306544122
Median age in population: 148.9651132766658
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.037
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 106081090
--- Timings ---
Current time: 1529615881676 milliseconds
Total Time:         301.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.4 seconds, 51.2%
Fitness Testing:    113.3 seconds, 37.6%
Report:              33.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction float_div} {:instruction float_rot} {:instruction float_swap} {:instruction float_flush} {:instruction float_yank} {:instruction in1} {:instruction float_swap} {:instruction float_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction print_integer} {:instruction in2})
Best program: (integer_dup float_div float_rot float_swap float_flush float_yank in1 float_swap float_sub in1 float_yank in1 in2 float_sub in1 float_yank in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_times print_integer in2)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 2002.7464543000046
Median total errors in population: 287.0456
Error averages by case: (69.00059799999883 12.04 68.28156650000095 11.12 67.82643099999882 11.938 68.1037364 11.269 65.86050719999984 11.133 69.83803100000134 11.236 68.97789749999818 11.15 69.71082000000003 11.241 70.68671540000126 11.253 70.14961420000077 11.244 68.76470140000166 12.031 68.33290499999917 11.148 69.9923179999987 11.21 64.9982799999986 11.132 68.00957749999839 11.159 70.88763199999798 11.205 66.39044409999904 10.158 70.08181600000101 11.222 67.23855139999938 12.041 69.56077249999956 11.264 68.87881480000087 11.156 69.42733619999885 11.207 69.13063750000121 11.274 69.98931820000139 11.167 70.39343249999868 11.236)
Error minima by case: (0.497 10 0.2295 4 0.2913 10 0.0311 6 0.3632 4 0.4694 10 0.4293 4 0.4856 6 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 11 0.2543 6 0.4178 10 0.2887 5 0.2285 6 0.4673 9 0.4825 10)
Average genome size in population (length): 24.357
Average program size in population (points): 25.357
Average percent parens in population: 0.045
Minimum age in population: 148.1154973667558
Maximum age in population: 152.4230975830969
Average age in population: 150.3653369501219
Median age in population: 150.4038143817832
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.042
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 106690015
--- Timings ---
Current time: 1529615884277 milliseconds
Total Time:         304.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.8 seconds, 51.3%
Fitness Testing:    114.1 seconds, 37.5%
Report:              33.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 11479.005300000008
Test mean error for best: 5.73950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 22            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 4             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -19           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -6            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: -1            
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 72            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 17            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 37            
Correct output: -38.5175194694 | Program output: -39           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction float_mod} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_yank} {:instruction in1} {:instruction float_shove} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction in1})
Best program: (float_rot float_mod integer_add float_pop float_dup integer_sub float_dec integer_sub float_frominteger integer_div float_mult float_dup_items integer_yank in1 float_shove in1 in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer in1)
Errors: [0.503 12 0.2295 11 0.2913 12 0.0311 11 0.3632 11 0.4694 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.1842 12 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.3523 10 0.0912 11 0.2547 12 0.7457 11 0.4178 11 0.2887 11 0.7715 11 0.5327 11 0.4825 11]
Total: 287.0456
Mean: 5.740912
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2195.563020800005
Median total errors in population: 287.0456
Error averages by case: (78.34059199999882 12.058 74.64594350000075 11.16 75.818139699999 11.954 74.7206430999994 11.299 72.67578080000027 11.16 75.63609220000109 11.259 74.48347329999844 11.172 75.13673360000003 11.273 80.78439900000122 11.284 79.90793300000072 11.276 74.95614880000133 12.056 73.91752939999947 11.169 79.88819639999892 11.26 72.38603899999929 11.162 74.24235229999847 11.191 80.8731135999983 11.261 73.04209179999921 10.171 80.0603568000002 11.266 78.48504199999982 12.07 75.05929829999958 11.285 78.21597920000035 11.178 79.28244919999972 11.27 74.81700850000117 11.292 79.10725280000057 11.178 76.11743249999893 11.259)
Error minima by case: (0.497 10 0.2295 9 0.2913 10 0.0311 9 0.3632 9 0.4694 10 0.5707 10 0.5144 9 0.0791 10 0.0797 10 0.1842 9 0.0626 9 0.1326 9 0.759 10 0.5563 10 0.2824 9 0.3523 10 0.0912 10 0.2547 11 0.7457 10 0.4178 10 0.2887 9 0.7715 10 0.4673 9 0.4825 10)
Average genome size in population (length): 23.957
Average program size in population (points): 24.957
Average percent parens in population: 0.045
Minimum age in population: 149.6852166413135
Maximum age in population: 153.8217906158731
Average age in population: 151.8270611429048
Median age in population: 151.8547337627865
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.033
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 107288940
--- Timings ---
Current time: 1529615886824 milliseconds
Total Time:         306.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.5 seconds, 51.4%
Fitness Testing:    114.8 seconds, 37.4%
Report:              34.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 11404.0011
Test mean error for best: 5.70200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 21            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 3             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -18           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -5            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: 0             
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 71            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 16            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 36            
Correct output: -38.5175194694 | Program output: -38           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction print_float} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sin} {:instruction float_dup} {:instruction in1} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_sub} {:instruction float_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_inc} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1})
Best program: (float_stackdepth print_float integer_mod integer_pop float_dup integer_yank float_dup_items integer_yank integer_rot integer_add in2 float_sin integer_sub float_sin float_dup in1 float_frominteger float_add integer_mod integer_pop float_sub float_div integer_fromfloat in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer integer_inc float_yank in1 in2 float_sub in1)
Errors: [0.497 11 0.2295 11 0.7087 11 0.0311 11 0.3632 11 0.5306 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.8158 11 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.6477 11 0.0912 11 0.7453 11 0.7457 11 0.5822 11 0.2887 11 0.7715 11 0.4673 11 0.5175 11]
Total: 286.06979999999993
Mean: 5.721396
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1825.2798626000047
Median total errors in population: 287.0456
Error averages by case: (63.24504699999879 12.015 60.61151750000083 11.091 62.013478899998994 11.928 60.23292300000014 11.257 58.852049599999795 11.118 61.5693370000012 11.222 62.193609599998354 11.139 63.44139200000002 11.211 63.76963050000116 11.234 63.0661435000006 11.214 60.80367520000137 12.034 61.57209279999892 11.132 62.248185399998924 11.194 56.91259299999869 11.104 60.9198026999984 11.146 62.87934959999819 11.17 57.543921099999224 10.154 62.039724800001096 11.178 62.38724029999913 12.032 63.33900959999954 11.249 63.02654780000111 11.146 60.858068399998814 11.17 62.873723500001184 11.254 64.80926230000152 11.157 62.30953749999882 11.213)
Error minima by case: (0.497 9 0.2295 2 0.2913 9 0.0311 3 0.3632 2 0.4694 10 0.4293 2 0.4856 3 0.0791 2 0.0797 2 0.1842 9 0.0626 2 0.1326 2 0.241 2 0.4437 2 0.2824 2 0.3523 9 0.0912 1 0.2547 10 0.2543 3 0.4178 10 0.2887 2 0.2285 3 0.4673 9 0.4825 10)
Average genome size in population (length): 23.865
Average program size in population (points): 24.865
Average percent parens in population: 0.046
Minimum age in population: 150.7358189262233
Maximum age in population: 155.5678067042697
Average age in population: 153.294208703914
Median age in population: 153.3455260314256
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.035
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 107885565
--- Timings ---
Current time: 1529615889321 milliseconds
Total Time:         309.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.9 seconds, 51.4%
Fitness Testing:    115.5 seconds, 37.4%
Report:              34.5 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 11404.0011
Test mean error for best: 5.70200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 21            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 3             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -18           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -5            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: 0             
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 71            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 16            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 36            
Correct output: -38.5175194694 | Program output: -38           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction print_float} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sin} {:instruction float_dup} {:instruction in1} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_sub} {:instruction float_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_inc} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1})
Best program: (float_stackdepth print_float integer_mod integer_pop float_dup integer_yank float_dup_items integer_yank integer_rot integer_add in2 float_sin integer_sub float_sin float_dup in1 float_frominteger float_add integer_mod integer_pop float_sub float_div integer_fromfloat in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer integer_inc float_yank in1 in2 float_sub in1)
Errors: [0.497 11 0.2295 11 0.7087 11 0.0311 11 0.3632 11 0.5306 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.8158 11 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.6477 11 0.0912 11 0.7453 11 0.7457 11 0.5822 11 0.2887 11 0.7715 11 0.4673 11 0.5175 11]
Total: 286.06979999999993
Mean: 5.721396
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2316.087835000005
Median total errors in population: 287.0456
Error averages by case: (80.94467529999847 12.044 79.52329160000095 11.154 79.79540899999859 11.936 79.06218819999921 11.317 77.69903740000062 11.177 82.83490800000126 11.291 80.28730759999796 11.182 81.06453640000001 11.298 84.35278870000151 11.315 83.87014350000099 11.296 82.07159660000174 12.055 79.60409679999954 11.182 84.1214007999984 11.264 76.9667408999994 11.165 78.83753199999794 11.203 84.91341919999776 11.252 80.16264749999903 10.204 84.09080960000033 11.266 81.35381759999979 12.062 80.92269319999957 11.315 80.7721494000006 11.202 83.52613959999954 11.265 80.3498224000014 11.32 82.2149987000009 11.206 83.48168499999876 11.293)
Error minima by case: (0.497 10 0.2295 4 0.2913 10 0.0311 6 0.3632 4 0.4694 10 0.4293 4 0.4856 6 0.0791 5 0.0797 5 0.1842 10 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 11 0.2543 6 0.4178 10 0.2887 5 0.2285 6 0.4673 9 0.4825 10)
Average genome size in population (length): 23.944
Average program size in population (points): 24.944
Average percent parens in population: 0.046
Minimum age in population: 151.8671290363671
Maximum age in population: 156.8765355654234
Average age in population: 154.7505073627739
Median age in population: 154.8016133302153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 108484165
--- Timings ---
Current time: 1529615891976 milliseconds
Total Time:         311.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.6 seconds, 51.5%
Fitness Testing:    116.2 seconds, 37.3%
Report:              34.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 11404.0011
Test mean error for best: 5.70200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 21            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 3             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -18           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -5            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: 0             
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 71            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 16            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 36            
Correct output: -38.5175194694 | Program output: -38           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction print_float} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sin} {:instruction float_dup} {:instruction in1} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_sub} {:instruction float_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer})
Best program: (float_stackdepth print_float integer_mod integer_pop float_dup integer_yank float_dup_items integer_yank integer_rot integer_add in2 float_sin integer_sub float_sin float_dup in1 float_frominteger float_add integer_mod integer_pop float_sub float_div integer_fromfloat in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer)
Errors: [0.497 11 0.2295 11 0.7087 11 0.0311 11 0.3632 11 0.5306 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.8158 11 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.6477 11 0.0912 11 0.7453 11 0.7457 11 0.5822 11 0.2887 11 0.7715 11 0.4673 11 0.5175 11]
Total: 286.06979999999993
Mean: 5.721396
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2314.7323631000045
Median total errors in population: 287.0456
Error averages by case: (83.25839999999869 12.011 81.20327150000085 11.137 81.4874964999988 11.911 81.21530099999846 11.307 78.51342240000108 11.155 79.24305060000107 11.257 81.24762489999819 11.168 82.16658960000002 11.273 83.91544980000133 11.277 82.57497660000087 11.273 78.09254420000138 12.008 80.65377820000037 11.173 83.00619639999861 11.239 74.84093099999978 11.151 80.57190189999815 11.183 84.61111359999799 11.238 75.31719229999919 10.201 83.37235679999965 11.26 83.52399590000049 12.016 82.09734989999964 11.284 83.07723999999982 11.175 81.87571700000024 11.243 81.77775050000128 11.293 84.43815999999997 11.181 79.99155249999895 11.245)
Error minima by case: (0.497 10 0.2295 4 0.2913 10 0.0311 5 0.3632 4 0.4694 10 0.4293 4 0.4856 5 0.0791 5 0.0797 5 0.1842 9 0.0626 4 0.1326 5 0.241 4 0.4437 4 0.2824 5 0.3523 9 0.0912 4 0.2547 10 0.2543 5 0.4178 10 0.2887 5 0.2285 5 0.4673 10 0.4825 10)
Average genome size in population (length): 24.559
Average program size in population (points): 25.559
Average percent parens in population: 0.044
Minimum age in population: 152.8671290363671
Maximum age in population: 158.0060374008009
Average age in population: 156.2517449262414
Median age in population: 156.2903104270598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.033
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 109098165
--- Timings ---
Current time: 1529615894424 milliseconds
Total Time:         314.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.1 seconds, 51.6%
Fitness Testing:    116.9 seconds, 37.2%
Report:              35.1 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 11404.0011
Test mean error for best: 5.70200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 21            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 3             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -18           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -5            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: 0             
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 71            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 16            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 36            
Correct output: -38.5175194694 | Program output: -38           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction print_float} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_rot} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sin} {:instruction float_dup} {:instruction in1} {:instruction float_frominteger} {:instruction float_add} {:instruction in2} {:instruction integer_pop} {:instruction float_sub} {:instruction float_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer})
Best program: (float_stackdepth print_float integer_mod integer_pop float_dup integer_yank float_dup_items float_add integer_rot integer_add in2 float_sin integer_sub float_sin float_dup in1 float_frominteger float_add in2 integer_pop float_sub float_div integer_fromfloat in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer)
Errors: [0.497 11 0.2295 11 0.7087 11 0.0311 11 0.3632 11 0.5306 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.8158 11 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.6477 11 0.0912 11 0.7453 11 0.7457 11 0.5822 11 0.2887 11 0.7715 11 0.4673 11 0.5175 11]
Total: 286.06979999999993
Mean: 5.721396
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2088.5083791000047
Median total errors in population: 287.0456
Error averages by case: (73.73551799999926 11.847 71.02204200000084 11.142 74.09298039999933 11.751 72.70770529999983 11.312 69.64895999999999 11.163 70.71223060000072 11.246 72.59503889999834 11.177 73.86133440000002 11.28 75.31921250000111 11.295 74.0907375000006 11.275 69.64728420000084 11.872 72.12403019999928 11.177 72.37538979999887 11.248 67.9045209999989 11.151 72.29302119999838 11.199 74.01265519999826 11.233 65.63914999999947 10.337 72.69017760000068 11.253 72.84485939999973 11.881 73.8402638999996 11.294 73.58240680000046 11.172 71.13162489999927 11.253 73.8039520000011 11.308 75.02948080000058 11.175 71.5068024999993 11.256)
Error minima by case: (0.497 9 0.2295 8 0.2913 10 0.0311 9 0.3632 9 0.4694 10 0.5707 10 0.5144 9 0.0791 10 0.0797 10 0.1842 8 0.0626 10 0.1326 9 0.759 10 0.5563 10 0.2824 7 0.3523 9 0.0912 10 0.2547 10 0.7457 9 0.4178 9 0.2887 9 0.7715 10 0.4673 10 0.4825 10)
Average genome size in population (length): 26.433
Average program size in population (points): 27.433
Average percent parens in population: 0.042
Minimum age in population: 154.7646532521829
Maximum age in population: 159.8111442400429
Average age in population: 157.7429386842826
Median age in population: 157.7527873455542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.035
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 109758990
--- Timings ---
Current time: 1529615897058 milliseconds
Total Time:         316.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.8 seconds, 51.7%
Fitness Testing:    117.6 seconds, 37.1%
Report:              35.3 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 11404.0011
Test mean error for best: 5.70200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 21            
Correct output: 77.2295138971  | Program output: 77            
Correct output: 3.7086869825   | Program output: 3             
Correct output: 106.0311162765 | Program output: 106           
Correct output: 44.3632125446  | Program output: 44            
Correct output: -18.5306412947 | Program output: -18           
Correct output: 95.5706973412  | Program output: 95            
Correct output: 118.5144246046 | Program output: 118           
Correct output: -54.0790937495 | Program output: -54           
Correct output: -13.0796880736 | Program output: -13           
Correct output: -5.8158128871  | Program output: -5            
Correct output: 93.0625957308  | Program output: 93            
Correct output: -61.1326014182 | Program output: -61           
Correct output: 21.7590464153  | Program output: 21            
Correct output: 82.5562972995  | Program output: 82            
Correct output: -90.2824116849 | Program output: -90           
Correct output: -0.647710987   | Program output: 0             
Correct output: -68.0911880316 | Program output: -68           
Correct output: 71.7453346318  | Program output: 71            
Correct output: 110.7456636041 | Program output: 110           
Correct output: 16.5821962378  | Program output: 16            
Correct output: -34.2887157462 | Program output: -34           
Correct output: 105.7715338332 | Program output: 105           
Correct output: 36.4673197404  | Program output: 36            
Correct output: -38.5175194694 | Program output: -38           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction print_float} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sin} {:instruction float_dup} {:instruction in1} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_sub} {:instruction float_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_inc} {:instruction float_yank} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction in1})
Best program: (float_stackdepth print_float integer_mod integer_pop float_dup integer_yank float_dup_items integer_yank integer_rot integer_add in2 float_sin integer_sub float_sin float_dup in1 float_frominteger float_add integer_mod integer_pop float_sub float_div integer_fromfloat in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer integer_inc float_yank in1 in2 float_sub in1)
Errors: [0.497 11 0.2295 11 0.7087 11 0.0311 11 0.3632 11 0.5306 11 0.5707 11 0.5144 11 0.0791 11 0.0797 11 0.8158 11 0.0626 11 0.1326 11 0.759 11 0.5563 11 0.2824 11 0.6477 11 0.0912 11 0.7453 11 0.7457 11 0.5822 11 0.2887 11 0.7715 11 0.4673 11 0.5175 11]
Total: 286.06979999999993
Mean: 5.721396
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2131.1944952000026
Median total errors in population: 286.06979999999993
Error averages by case: (74.44335100000072 11.403 74.08317350000081 11.144 75.80901470000067 11.295 73.60648759999886 11.399 71.57078080000056 11.181 74.65515859999944 11.282 75.78575609999803 11.212 77.36476240000002 11.343 74.91557390000142 11.348 74.25091190000096 11.322 73.72318819999917 11.446 74.94577979999995 11.212 72.88506379999862 11.27 68.65348499999914 11.164 73.10112709999811 11.233 74.16583119999797 11.254 67.1755352000004 10.783 72.79726560000051 11.282 74.71041229999989 11.455 76.77828109999957 11.357 74.38498259999993 11.19 71.58473789999931 11.276 75.73355150000145 11.384 76.6609758999998 11.225 75.66630750000054 11.283)
Error minima by case: (0.497 9 0.2295 4 0.2913 10 0.0311 6 0.3632 4 0.4694 9 0.5707 4 0.5144 6 0.0791 5 0.0797 5 0.1842 10 0.0626 4 0.1326 5 0.759 4 0.5563 4 0.2824 5 0.3523 9 0.0912 4 0.2547 9 0.7457 6 0.4178 9 0.2887 5 0.7715 6 0.4673 10 0.4825 9)
Average genome size in population (length): 32.541
Average program size in population (points): 33.541
Average percent parens in population: 0.032
Minimum age in population: 157.2367425308987
Maximum age in population: 161.2532672737151
Average age in population: 159.2753042033841
Median age in population: 159.2736003734491
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 145
Genome diversity (% unique Plush genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.031
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 110572515
--- Timings ---
Current time: 1529615899732 milliseconds
Total Time:         319.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.3 seconds, 51.7%
Fitness Testing:    118.4 seconds, 37.1%
Report:              35.6 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 21.4970411673 
Correct output: 77.2295138971  | Program output: 77.2295138971 
Correct output: 3.7086869825   | Program output: 3.7086869825  
Correct output: 106.0311162765 | Program output: 106.0311162765
Correct output: 44.3632125446  | Program output: 44.3632125446 
Correct output: -18.5306412947 | Program output: -18.5306412947
Correct output: 95.5706973412  | Program output: 95.5706973412 
Correct output: 118.5144246046 | Program output: 118.5144246046
Correct output: -54.0790937495 | Program output: -54.0790937495
Correct output: -13.0796880736 | Program output: -13.0796880736
Correct output: -5.8158128871  | Program output: -5.8158128871 
Correct output: 93.0625957308  | Program output: 93.0625957308 
Correct output: -61.1326014182 | Program output: -61.1326014182
Correct output: 21.7590464153  | Program output: 21.7590464153 
Correct output: 82.5562972995  | Program output: 82.5562972995 
Correct output: -90.2824116849 | Program output: -90.2824116849
Correct output: -0.647710987   | Program output: -0.647710987  
Correct output: -68.0911880316 | Program output: -68.0911880316
Correct output: 71.7453346318  | Program output: 71.7453346318 
Correct output: 110.7456636041 | Program output: 110.7456636041
Correct output: 16.5821962378  | Program output: 16.5821962378 
Correct output: -34.2887157462 | Program output: -34.2887157462
Correct output: 105.7715338332 | Program output: 105.7715338332
Correct output: 36.4673197404  | Program output: 36.4673197404 
Correct output: -38.5175194694 | Program output: -38.5175194694
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction print_float} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_add} {:instruction in2} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sin} {:instruction float_dup} {:instruction in1} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_mod} {:instruction print_float} {:instruction float_sub} {:instruction float_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction print_integer})
Best program: (float_stackdepth print_float integer_mod integer_pop float_dup integer_yank float_dup_items integer_yank integer_rot integer_add in2 float_sin integer_sub float_sin float_dup in1 float_frominteger float_add integer_mod print_float float_sub float_div integer_fromfloat in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2254.0068599999995
Median total errors in population: 286.06979999999993
Error averages by case: (79.08643800000134 11.148 79.27322300000075 11.135 77.71756020000103 11.048 76.52539429999891 11.4 75.81414400000088 11.175 81.48335699999885 11.282 80.51018539999825 11.204 82.17627680000002 11.336 79.09656810000116 11.35 78.36288330000075 11.311 80.98053519999846 11.218 79.5107172000001 11.202 78.59853339999877 11.272 73.09196699999978 11.146 76.48945819999837 11.224 79.09126639999816 11.249 75.32971570000083 10.999 77.95008319999998 11.27 79.64048619999977 11.222 81.40353539999961 11.363 78.99219879999991 11.175 77.65358309999995 11.27 79.90932300000122 11.387 81.63913959999957 11.206 82.80428750000115 11.284)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 35.44
Average program size in population (points): 36.44
Average percent parens in population: 0.028
Minimum age in population: 158.7461043585745
Maximum age in population: 162.4473057327867
Average age in population: 160.7026960126819
Median age in population: 160.7746979316876
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 155
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.038
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 111458515
--- Timings ---
Current time: 1529615902675 milliseconds
Total Time:         322.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.8 seconds, 51.8%
Fitness Testing:    119.4 seconds, 37.1%
Report:              35.9 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 109
Successful program: (float_stackdepth print_float integer_mod integer_pop float_dup integer_yank float_dup_items integer_yank integer_rot integer_add in2 float_sin integer_sub float_sin float_dup in1 float_frominteger float_add integer_mod print_float float_sub float_div integer_fromfloat in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 32


Auto-simplifying with starting size: 32
step: 0
program: (float_stackdepth print_float integer_mod integer_pop float_dup integer_yank float_dup_items integer_yank integer_rot integer_add in2 float_sin integer_sub float_sin float_dup in1 float_frominteger float_add integer_mod print_float float_sub float_div integer_fromfloat in2 float_sub in1 integer_fromfloat integer_add integer_fromfloat float_dup_items print_integer)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 32

step: 500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 21.4970411673  | Program output: 21.4970411673 
Correct output: 77.2295138971  | Program output: 77.2295138971 
Correct output: 3.7086869825   | Program output: 3.7086869825  
Correct output: 106.0311162765 | Program output: 106.0311162765
Correct output: 44.3632125446  | Program output: 44.3632125446 
Correct output: -18.5306412947 | Program output: -18.5306412947
Correct output: 95.5706973412  | Program output: 95.5706973412 
Correct output: 118.5144246046 | Program output: 118.5144246046
Correct output: -54.0790937495 | Program output: -54.0790937495
Correct output: -13.0796880736 | Program output: -13.0796880736
Correct output: -5.8158128871  | Program output: -5.8158128871 
Correct output: 93.0625957308  | Program output: 93.0625957308 
Correct output: -61.1326014182 | Program output: -61.1326014182
Correct output: 21.7590464153  | Program output: 21.7590464153 
Correct output: 82.5562972995  | Program output: 82.5562972995 
Correct output: -90.2824116849 | Program output: -90.2824116849
Correct output: -0.647710987   | Program output: -0.647710987  
Correct output: -68.0911880316 | Program output: -68.0911880316
Correct output: 71.7453346318  | Program output: 71.7453346318 
Correct output: 110.7456636041 | Program output: 110.7456636041
Correct output: 16.5821962378  | Program output: 16.5821962378 
Correct output: -34.2887157462 | Program output: -34.2887157462
Correct output: 105.7715338332 | Program output: 105.7715338332
Correct output: 36.4673197404  | Program output: 36.4673197404 
Correct output: -38.5175194694 | Program output: -38.5175194694
;;******************************
