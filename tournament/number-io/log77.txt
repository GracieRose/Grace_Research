Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[86.33298198706353 63] 149.33298198706353]
Train Case:   1 | Input/Output: [[45.6327075507551 57] 102.6327075507551]
Train Case:   2 | Input/Output: [[85.15191224810556 -11] 74.15191224810556]
Train Case:   3 | Input/Output: [[-59.36525706973521 3] -56.36525706973521]
Train Case:   4 | Input/Output: [[66.74863590472165 62] 128.74863590472165]
Train Case:   5 | Input/Output: [[-98.07539915646515 59] -39.07539915646515]
Train Case:   6 | Input/Output: [[94.94612825772847 -31] 63.946128257728475]
Train Case:   7 | Input/Output: [[65.58131386060694 41] 106.58131386060694]
Train Case:   8 | Input/Output: [[61.57810700208998 58] 119.57810700208998]
Train Case:   9 | Input/Output: [[-27.50085567408776 -34] -61.50085567408776]
Train Case:  10 | Input/Output: [[36.89280424145943 76] 112.89280424145943]
Train Case:  11 | Input/Output: [[7.943682253425408 -86] -78.05631774657459]
Train Case:  12 | Input/Output: [[-90.10154799352061 44] -46.10154799352061]
Train Case:  13 | Input/Output: [[82.51681401279441 56] 138.5168140127944]
Train Case:  14 | Input/Output: [[60.31112355085554 19] 79.31112355085554]
Train Case:  15 | Input/Output: [[-80.76809205853202 -2] -82.76809205853202]
Train Case:  16 | Input/Output: [[-42.89848954077395 -42] -84.89848954077395]
Train Case:  17 | Input/Output: [[-79.21824442402261 71] -8.218244424022615]
Train Case:  18 | Input/Output: [[35.786867341281464 75] 110.78686734128146]
Train Case:  19 | Input/Output: [[82.16944246538947 80] 162.16944246538947]
Train Case:  20 | Input/Output: [[31.22048304843554 78] 109.22048304843554]
Train Case:  21 | Input/Output: [[-16.85736420261665 -91] -107.85736420261665]
Train Case:  22 | Input/Output: [[10.834978561357289 -65] -54.16502143864271]
Train Case:  23 | Input/Output: [[-75.73728583955632 -31] -106.73728583955632]
Train Case:  24 | Input/Output: [[11.233242990022617 40] 51.23324299002262]
Test Case:   0 | Input/Output: [[24.3826337596405 -32] -7.617366240359502]
Test Case:   1 | Input/Output: [[46.192334358029996 72] 118.19233435803]
Test Case:   2 | Input/Output: [[55.79235778336934 57] 112.79235778336934]
Test Case:   3 | Input/Output: [[-49.31845883091617 6] -43.31845883091617]
Test Case:   4 | Input/Output: [[98.58843369561066 -89] 9.58843369561066]
Test Case:   5 | Input/Output: [[21.998529058227405 63] 84.9985290582274]
Test Case:   6 | Input/Output: [[-73.439197606233 -66] -139.439197606233]
Test Case:   7 | Input/Output: [[-41.93057560661679 80] 38.06942439338321]
Test Case:   8 | Input/Output: [[-61.48938287611551 72] 10.510617123884487]
Test Case:   9 | Input/Output: [[59.92423902035188 -61] -1.0757609796481233]
Test Case:  10 | Input/Output: [[-0.23493313916695513 -7] -7.234933139166955]
Test Case:  11 | Input/Output: [[-95.01341095025468 -56] -151.0134109502547]
Test Case:  12 | Input/Output: [[98.07433078737603 58] 156.07433078737603]
Test Case:  13 | Input/Output: [[-89.50324099771028 36] -53.50324099771028]
Test Case:  14 | Input/Output: [[62.70970304463037 -34] 28.709703044630373]
Test Case:  15 | Input/Output: [[72.39406346087497 -12] 60.394063460874975]
Test Case:  16 | Input/Output: [[82.87968126931924 -89] -6.120318730680765]
Test Case:  17 | Input/Output: [[-79.86892909676834 53] -26.86892909676834]
Test Case:  18 | Input/Output: [[90.69343324636583 89] 179.69343324636583]
Test Case:  19 | Input/Output: [[25.52285068461066 -38] -12.47714931538934]
Test Case:  20 | Input/Output: [[-11.602646483482175 90] 78.39735351651782]
Test Case:  21 | Input/Output: [[43.50104608743578 63] 106.50104608743578]
Test Case:  22 | Input/Output: [[13.810734860609244 38] 51.810734860609244]
Test Case:  23 | Input/Output: [[-84.01712859629322 -21] -105.01712859629322]
Test Case:  24 | Input/Output: [[9.868049223166082 -65] -55.13195077683392]
Test Case:  25 | Input/Output: [[-92.01049421197473 -98] -190.01049421197473]
Test Case:  26 | Input/Output: [[-51.14065412684048 35] -16.14065412684048]
Test Case:  27 | Input/Output: [[11.768525886134213 61] 72.76852588613421]
Test Case:  28 | Input/Output: [[6.831949346965004 -70] -63.168050653034996]
Test Case:  29 | Input/Output: [[62.370569034541376 -57] 5.370569034541376]
Test Case:  30 | Input/Output: [[-0.9404815239590079 61] 60.05951847604099]
Test Case:  31 | Input/Output: [[13.468638819507888 93] 106.46863881950789]
Test Case:  32 | Input/Output: [[95.17953095574475 -36] 59.17953095574475]
Test Case:  33 | Input/Output: [[57.67117573026644 -54] 3.671175730266441]
Test Case:  34 | Input/Output: [[19.663279653642647 53] 72.66327965364265]
Test Case:  35 | Input/Output: [[-82.2189548380428 -57] -139.2189548380428]
Test Case:  36 | Input/Output: [[6.354862163753921 21] 27.35486216375392]
Test Case:  37 | Input/Output: [[60.256819189832385 -5] 55.256819189832385]
Test Case:  38 | Input/Output: [[24.361611551546673 80] 104.36161155154667]
Test Case:  39 | Input/Output: [[44.626491260135055 -67] -22.373508739864945]
Test Case:  40 | Input/Output: [[-42.116832192121144 -82] -124.11683219212114]
Test Case:  41 | Input/Output: [[69.6892609970028 -89] -19.310739002997195]
Test Case:  42 | Input/Output: [[-63.55690542987988 -3] -66.55690542987989]
Test Case:  43 | Input/Output: [[-4.071010524736067 45] 40.92898947526393]
Test Case:  44 | Input/Output: [[61.83458478585783 69] 130.83458478585783]
Test Case:  45 | Input/Output: [[-52.72769778541022 33] -19.72769778541022]
Test Case:  46 | Input/Output: [[-97.16044071260276 -80] -177.16044071260276]
Test Case:  47 | Input/Output: [[88.74577163430811 -19] 69.74577163430811]
Test Case:  48 | Input/Output: [[-39.97487508375946 53] 13.025124916240543]
Test Case:  49 | Input/Output: [[34.514219930411116 -44] -9.485780069588884]
Test Case:  50 | Input/Output: [[-57.581656937820405 73] 15.418343062179595]
Test Case:  51 | Input/Output: [[65.66594871619887 -19] 46.66594871619887]
Test Case:  52 | Input/Output: [[-71.40394531658158 -22] -93.40394531658158]
Test Case:  53 | Input/Output: [[-49.59787400495068 84] 34.40212599504932]
Test Case:  54 | Input/Output: [[38.984245915630595 52] 90.9842459156306]
Test Case:  55 | Input/Output: [[-9.068776227610527 68] 58.93122377238947]
Test Case:  56 | Input/Output: [[93.0976167159971 -77] 16.097616715997106]
Test Case:  57 | Input/Output: [[-23.69904385713717 67] 43.30095614286283]
Test Case:  58 | Input/Output: [[43.41108929535983 -78] -34.58891070464017]
Test Case:  59 | Input/Output: [[97.34623752392076 -88] 9.346237523920763]
Test Case:  60 | Input/Output: [[-56.069373820992084 20] -36.069373820992084]
Test Case:  61 | Input/Output: [[-29.94274081462494 79] 49.05725918537506]
Test Case:  62 | Input/Output: [[-66.20884891678205 -47] -113.20884891678205]
Test Case:  63 | Input/Output: [[-4.976968442679365 45] 40.023031557320635]
Test Case:  64 | Input/Output: [[40.80348612832205 -65] -24.19651387167795]
Test Case:  65 | Input/Output: [[-5.286705946460387 92] 86.71329405353961]
Test Case:  66 | Input/Output: [[52.65973296551283 34] 86.65973296551283]
Test Case:  67 | Input/Output: [[41.65769589628664 -35] 6.65769589628664]
Test Case:  68 | Input/Output: [[-50.172089779692605 2] -48.172089779692605]
Test Case:  69 | Input/Output: [[-54.52662864359168 71] 16.47337135640832]
Test Case:  70 | Input/Output: [[-38.98275194408396 0] -38.98275194408396]
Test Case:  71 | Input/Output: [[-91.53347592482946 38] -53.53347592482946]
Test Case:  72 | Input/Output: [[-71.05931761816609 -47] -118.05931761816609]
Test Case:  73 | Input/Output: [[8.336031429272353 -9] -0.663968570727647]
Test Case:  74 | Input/Output: [[27.622479600659105 -25] 2.622479600659105]
Test Case:  75 | Input/Output: [[-70.38778000605173 -24] -94.38778000605173]
Test Case:  76 | Input/Output: [[1.5769086216147628 93] 94.57690862161476]
Test Case:  77 | Input/Output: [[-79.22721332280345 -91] -170.22721332280344]
Test Case:  78 | Input/Output: [[-20.298766420886395 -18] -38.298766420886395]
Test Case:  79 | Input/Output: [[-39.497372548899094 85] 45.502627451100906]
Test Case:  80 | Input/Output: [[84.60054394981992 93] 177.60054394981992]
Test Case:  81 | Input/Output: [[44.31166234538043 82] 126.31166234538043]
Test Case:  82 | Input/Output: [[44.48730510640425 -59] -14.51269489359575]
Test Case:  83 | Input/Output: [[24.997264135002666 -79] -54.002735864997334]
Test Case:  84 | Input/Output: [[6.029506879163193 94] 100.0295068791632]
Test Case:  85 | Input/Output: [[-39.454272399994885 4] -35.454272399994885]
Test Case:  86 | Input/Output: [[-21.12724308791715 68] 46.87275691208285]
Test Case:  87 | Input/Output: [[-91.91301403176253 -60] -151.91301403176254]
Test Case:  88 | Input/Output: [[62.43215711999392 68] 130.43215711999392]
Test Case:  89 | Input/Output: [[56.89250992237379 -50] 6.89250992237379]
Test Case:  90 | Input/Output: [[-62.66050694110776 -54] -116.66050694110777]
Test Case:  91 | Input/Output: [[89.4517515620349 -15] 74.4517515620349]
Test Case:  92 | Input/Output: [[5.973229219167592 97] 102.97322921916759]
Test Case:  93 | Input/Output: [[71.39003650204472 -32] 39.39003650204472]
Test Case:  94 | Input/Output: [[16.073446266439944 31] 47.073446266439944]
Test Case:  95 | Input/Output: [[-26.743531561285522 -64] -90.74353156128552]
Test Case:  96 | Input/Output: [[-73.78769695952545 3] -70.78769695952545]
Test Case:  97 | Input/Output: [[4.755295844458502 -3] 1.7552958444585016]
Test Case:  98 | Input/Output: [[7.977240344843864 -19] -11.022759655156136]
Test Case:  99 | Input/Output: [[18.83669692199159 -45] -26.16330307800841]
Test Case: 100 | Input/Output: [[-86.95778695846408 -13] -99.95778695846408]
Test Case: 101 | Input/Output: [[76.75894569268237 15] 91.75894569268237]
Test Case: 102 | Input/Output: [[81.89523627036067 7] 88.89523627036067]
Test Case: 103 | Input/Output: [[-24.024107017096227 89] 64.97589298290377]
Test Case: 104 | Input/Output: [[-93.65492545532544 -88] -181.65492545532544]
Test Case: 105 | Input/Output: [[-24.877719897692813 84] 59.12228010230719]
Test Case: 106 | Input/Output: [[68.52924091330627 6] 74.52924091330627]
Test Case: 107 | Input/Output: [[57.0927446509082 81] 138.0927446509082]
Test Case: 108 | Input/Output: [[-12.266715138487044 -18] -30.266715138487044]
Test Case: 109 | Input/Output: [[-68.35261134258306 100] 31.64738865741694]
Test Case: 110 | Input/Output: [[-28.070106694525435 -74] -102.07010669452544]
Test Case: 111 | Input/Output: [[35.63725162762742 -37] -1.3627483723725788]
Test Case: 112 | Input/Output: [[89.73080009701354 -62] 27.730800097013542]
Test Case: 113 | Input/Output: [[-69.02364053642636 -6] -75.02364053642636]
Test Case: 114 | Input/Output: [[2.826850765561062 44] 46.82685076556106]
Test Case: 115 | Input/Output: [[-34.64479462528432 -54] -88.64479462528432]
Test Case: 116 | Input/Output: [[-77.1305624280212 2] -75.1305624280212]
Test Case: 117 | Input/Output: [[-31.063444244885147 -65] -96.06344424488515]
Test Case: 118 | Input/Output: [[63.35035963372957 -15] 48.35035963372957]
Test Case: 119 | Input/Output: [[-77.1059176960456 -44] -121.1059176960456]
Test Case: 120 | Input/Output: [[-16.244184924796997 -26] -42.244184924797]
Test Case: 121 | Input/Output: [[-51.41577067966434 -11] -62.41577067966434]
Test Case: 122 | Input/Output: [[-78.39639221382984 -60] -138.39639221382984]
Test Case: 123 | Input/Output: [[21.33736514847307 -20] 1.3373651484730686]
Test Case: 124 | Input/Output: [[-75.11528011184423 -65] -140.11528011184424]
Test Case: 125 | Input/Output: [[-23.342919428409175 -61] -84.34291942840917]
Test Case: 126 | Input/Output: [[-52.160141854537436 -83] -135.16014185453744]
Test Case: 127 | Input/Output: [[-53.38302535227935 30] -23.383025352279347]
Test Case: 128 | Input/Output: [[0.11806802986808407 -35] -34.881931970131916]
Test Case: 129 | Input/Output: [[-7.745075354533412 96] 88.25492464546659]
Test Case: 130 | Input/Output: [[81.84860251637895 56] 137.84860251637895]
Test Case: 131 | Input/Output: [[84.71161832344538 26] 110.71161832344538]
Test Case: 132 | Input/Output: [[57.66960715351027 -73] -15.33039284648973]
Test Case: 133 | Input/Output: [[-5.487747553000347 86] 80.51225244699965]
Test Case: 134 | Input/Output: [[57.23725653614895 22] 79.23725653614895]
Test Case: 135 | Input/Output: [[61.08171555407762 -95] -33.91828444592238]
Test Case: 136 | Input/Output: [[-89.02004595985437 80] -9.020045959854372]
Test Case: 137 | Input/Output: [[-35.27550141956104 -82] -117.27550141956104]
Test Case: 138 | Input/Output: [[-25.959956129095247 18] -7.9599561290952465]
Test Case: 139 | Input/Output: [[63.379225411684985 66] 129.37922541168498]
Test Case: 140 | Input/Output: [[91.21549500137814 -82] 9.215495001378144]
Test Case: 141 | Input/Output: [[-82.54142273096106 90] 7.4585772690389405]
Test Case: 142 | Input/Output: [[-80.5279572377974 -11] -91.5279572377974]
Test Case: 143 | Input/Output: [[-52.49001495058074 62] 9.509985049419257]
Test Case: 144 | Input/Output: [[-74.90878954449974 -82] -156.90878954449974]
Test Case: 145 | Input/Output: [[-85.1857308741299 69] -16.185730874129902]
Test Case: 146 | Input/Output: [[13.208591062282096 -93] -79.7914089377179]
Test Case: 147 | Input/Output: [[-1.6444635706854882 64] 62.35553642931451]
Test Case: 148 | Input/Output: [[-62.40015692557972 15] -47.40015692557972]
Test Case: 149 | Input/Output: [[1.4523114319338077 64] 65.45231143193381]
Test Case: 150 | Input/Output: [[59.66166054682378 -88] -28.338339453176218]
Test Case: 151 | Input/Output: [[49.45194523013103 80] 129.45194523013103]
Test Case: 152 | Input/Output: [[32.23465434838127 -49] -16.76534565161873]
Test Case: 153 | Input/Output: [[25.86854981113642 -59] -33.13145018886358]
Test Case: 154 | Input/Output: [[99.93511913039796 -32] 67.93511913039796]
Test Case: 155 | Input/Output: [[59.85053278848102 -20] 39.85053278848102]
Test Case: 156 | Input/Output: [[-35.893604614831304 70] 34.106395385168696]
Test Case: 157 | Input/Output: [[81.64479806601062 57] 138.64479806601062]
Test Case: 158 | Input/Output: [[-47.09112331951124 6] -41.09112331951124]
Test Case: 159 | Input/Output: [[88.25020606007035 -60] 28.250206060070354]
Test Case: 160 | Input/Output: [[-95.39347357005157 79] -16.39347357005157]
Test Case: 161 | Input/Output: [[-89.64197825143998 3] -86.64197825143998]
Test Case: 162 | Input/Output: [[-62.51440292113388 65] 2.485597078866121]
Test Case: 163 | Input/Output: [[-26.283076851276448 53] 26.716923148723552]
Test Case: 164 | Input/Output: [[92.5020322035065 73] 165.5020322035065]
Test Case: 165 | Input/Output: [[-88.74976220749033 88] -0.7497622074903347]
Test Case: 166 | Input/Output: [[-36.586369059925914 -15] -51.586369059925914]
Test Case: 167 | Input/Output: [[68.0766992331946 -35] 33.0766992331946]
Test Case: 168 | Input/Output: [[15.67094562957297 45] 60.67094562957297]
Test Case: 169 | Input/Output: [[-2.8543289235425817 29] 26.14567107645742]
Test Case: 170 | Input/Output: [[-93.16416498595366 60] -33.16416498595366]
Test Case: 171 | Input/Output: [[81.73149679251031 -38] 43.73149679251031]
Test Case: 172 | Input/Output: [[4.776303338163814 64] 68.77630333816381]
Test Case: 173 | Input/Output: [[59.980964706515266 85] 144.98096470651527]
Test Case: 174 | Input/Output: [[31.030502292820813 -57] -25.969497707179187]
Test Case: 175 | Input/Output: [[80.20670152594397 62] 142.20670152594397]
Test Case: 176 | Input/Output: [[-93.76343383705836 70] -23.763433837058358]
Test Case: 177 | Input/Output: [[9.861924460319898 11] 20.861924460319898]
Test Case: 178 | Input/Output: [[-10.878501439787541 -44] -54.87850143978754]
Test Case: 179 | Input/Output: [[-68.48167358160669 44] -24.481673581606685]
Test Case: 180 | Input/Output: [[91.72451311798415 45] 136.72451311798415]
Test Case: 181 | Input/Output: [[22.85461993244857 -22] 0.8546199324485713]
Test Case: 182 | Input/Output: [[62.90001696729462 -96] -33.09998303270538]
Test Case: 183 | Input/Output: [[80.18453054556741 9] 89.18453054556741]
Test Case: 184 | Input/Output: [[56.80930578789125 -35] 21.809305787891248]
Test Case: 185 | Input/Output: [[-74.85483670895603 -86] -160.85483670895604]
Test Case: 186 | Input/Output: [[-43.80839694761238 -48] -91.80839694761238]
Test Case: 187 | Input/Output: [[60.55091741758798 -49] 11.550917417587982]
Test Case: 188 | Input/Output: [[-33.60997589712768 -30] -63.60997589712768]
Test Case: 189 | Input/Output: [[-47.67523342615998 74] 26.324766573840023]
Test Case: 190 | Input/Output: [[-53.05722673504274 5] -48.05722673504274]
Test Case: 191 | Input/Output: [[-27.298536502007508 -3] -30.298536502007508]
Test Case: 192 | Input/Output: [[41.71073739697192 -22] 19.710737396971922]
Test Case: 193 | Input/Output: [[99.59331503241805 54] 153.59331503241805]
Test Case: 194 | Input/Output: [[-13.80515092769889 73] 59.19484907230111]
Test Case: 195 | Input/Output: [[30.142772913485913 -26] 4.1427729134859135]
Test Case: 196 | Input/Output: [[-24.724379448197325 87] 62.275620551802675]
Test Case: 197 | Input/Output: [[-69.77659682741191 -91] -160.7765968274119]
Test Case: 198 | Input/Output: [[88.74490090474032 61] 149.74490090474032]
Test Case: 199 | Input/Output: [[48.746504480814366 11] 59.746504480814366]
Test Case: 200 | Input/Output: [[-90.70091382265954 -32] -122.70091382265954]
Test Case: 201 | Input/Output: [[-38.97568036101377 35] -3.9756803610137723]
Test Case: 202 | Input/Output: [[-34.988105726487916 31] -3.988105726487916]
Test Case: 203 | Input/Output: [[-83.19796599069831 40] -43.19796599069831]
Test Case: 204 | Input/Output: [[28.51335728591536 81] 109.51335728591536]
Test Case: 205 | Input/Output: [[-78.79925199852187 -53] -131.79925199852187]
Test Case: 206 | Input/Output: [[76.87866450619819 16] 92.87866450619819]
Test Case: 207 | Input/Output: [[-93.04215248557503 -44] -137.04215248557503]
Test Case: 208 | Input/Output: [[-27.496054192284404 -45] -72.4960541922844]
Test Case: 209 | Input/Output: [[12.479369530844878 71] 83.47936953084488]
Test Case: 210 | Input/Output: [[52.240356792357204 -92] -39.759643207642796]
Test Case: 211 | Input/Output: [[9.682798571893358 -73] -63.31720142810664]
Test Case: 212 | Input/Output: [[-52.18294301782753 38] -14.182943017827533]
Test Case: 213 | Input/Output: [[-61.70932975996726 68] 6.290670240032739]
Test Case: 214 | Input/Output: [[83.5110089163328 -27] 56.5110089163328]
Test Case: 215 | Input/Output: [[40.53657823503934 41] 81.53657823503934]
Test Case: 216 | Input/Output: [[-0.3428312035814116 -47] -47.34283120358141]
Test Case: 217 | Input/Output: [[-79.3506449708882 93] 13.649355029111803]
Test Case: 218 | Input/Output: [[-49.770993952486876 17] -32.770993952486876]
Test Case: 219 | Input/Output: [[-87.96960591438257 -10] -97.96960591438257]
Test Case: 220 | Input/Output: [[17.677903043170147 28] 45.67790304317015]
Test Case: 221 | Input/Output: [[-9.755748152068762 -55] -64.75574815206876]
Test Case: 222 | Input/Output: [[14.949313051005447 31] 45.94931305100545]
Test Case: 223 | Input/Output: [[-77.75054260091363 67] -10.750542600913633]
Test Case: 224 | Input/Output: [[-30.161672450534454 58] 27.838327549465546]
Test Case: 225 | Input/Output: [[48.265526682358484 -71] -22.734473317641516]
Test Case: 226 | Input/Output: [[-75.72811506298686 -96] -171.72811506298686]
Test Case: 227 | Input/Output: [[72.34275183703488 -59] 13.342751837034882]
Test Case: 228 | Input/Output: [[36.24152353327122 58] 94.24152353327122]
Test Case: 229 | Input/Output: [[4.6460640770553 -54] -49.3539359229447]
Test Case: 230 | Input/Output: [[-19.181841513168635 3] -16.181841513168635]
Test Case: 231 | Input/Output: [[-13.962728394431906 93] 79.0372716055681]
Test Case: 232 | Input/Output: [[-0.0045152960173311385 83] 82.99548470398267]
Test Case: 233 | Input/Output: [[53.911209991377405 -56] -2.0887900086225955]
Test Case: 234 | Input/Output: [[23.187949819463455 -14] 9.187949819463455]
Test Case: 235 | Input/Output: [[-54.649649658112764 23] -31.649649658112764]
Test Case: 236 | Input/Output: [[-65.83179754369246 -5] -70.83179754369246]
Test Case: 237 | Input/Output: [[75.51237115748728 74] 149.51237115748728]
Test Case: 238 | Input/Output: [[21.000688332186073 -63] -41.99931166781393]
Test Case: 239 | Input/Output: [[-67.97967943410643 -3] -70.97967943410643]
Test Case: 240 | Input/Output: [[55.242681652717295 55] 110.2426816527173]
Test Case: 241 | Input/Output: [[47.005242446059924 54] 101.00524244605992]
Test Case: 242 | Input/Output: [[-17.684354839426092 69] 51.31564516057391]
Test Case: 243 | Input/Output: [[-77.14442539472253 -62] -139.14442539472253]
Test Case: 244 | Input/Output: [[44.98449312455128 -64] -19.01550687544872]
Test Case: 245 | Input/Output: [[65.81040562789329 12] 77.81040562789329]
Test Case: 246 | Input/Output: [[-51.86339763990067 24] -27.86339763990067]
Test Case: 247 | Input/Output: [[-34.46778237228101 -23] -57.46778237228101]
Test Case: 248 | Input/Output: [[-31.015940086883447 71] 39.98405991311655]
Test Case: 249 | Input/Output: [[-85.57421116826028 -51] -136.57421116826026]
Test Case: 250 | Input/Output: [[-42.11961377067357 -59] -101.11961377067357]
Test Case: 251 | Input/Output: [[-60.795918215155375 36] -24.795918215155375]
Test Case: 252 | Input/Output: [[-12.020670109449696 63] 50.979329890550304]
Test Case: 253 | Input/Output: [[9.328561314349741 48] 57.32856131434974]
Test Case: 254 | Input/Output: [[-0.12516816758616756 -89] -89.12516816758617]
Test Case: 255 | Input/Output: [[9.92425813268629 42] 51.92425813268629]
Test Case: 256 | Input/Output: [[52.391159290948764 19] 71.39115929094876]
Test Case: 257 | Input/Output: [[-1.7918428751149804 -66] -67.79184287511498]
Test Case: 258 | Input/Output: [[-94.72342909485225 -79] -173.72342909485224]
Test Case: 259 | Input/Output: [[-50.35465110407857 -48] -98.35465110407857]
Test Case: 260 | Input/Output: [[-63.830299287216796 72] 8.169700712783204]
Test Case: 261 | Input/Output: [[-81.06807005473664 -48] -129.06807005473664]
Test Case: 262 | Input/Output: [[-34.093216659442916 10] -24.093216659442916]
Test Case: 263 | Input/Output: [[67.29818110532119 52] 119.29818110532119]
Test Case: 264 | Input/Output: [[53.44578558400869 -25] 28.44578558400869]
Test Case: 265 | Input/Output: [[7.9013799539320075 -57] -49.09862004606799]
Test Case: 266 | Input/Output: [[94.44627141631469 5] 99.44627141631469]
Test Case: 267 | Input/Output: [[36.187452809182844 -5] 31.187452809182844]
Test Case: 268 | Input/Output: [[27.190394323749302 -78] -50.8096056762507]
Test Case: 269 | Input/Output: [[1.309127937192713 -2] -0.6908720628072871]
Test Case: 270 | Input/Output: [[72.56761150832293 98] 170.56761150832293]
Test Case: 271 | Input/Output: [[-70.74055564185406 82] 11.259444358145942]
Test Case: 272 | Input/Output: [[50.256752936578096 -41] 9.256752936578096]
Test Case: 273 | Input/Output: [[35.36843200425025 11] 46.36843200425025]
Test Case: 274 | Input/Output: [[13.631745926716277 -44] -30.368254073283723]
Test Case: 275 | Input/Output: [[-82.0672932913058 -79] -161.06729329130582]
Test Case: 276 | Input/Output: [[-1.1346313332276452 -10] -11.134631333227645]
Test Case: 277 | Input/Output: [[-44.509747587275214 -7] -51.509747587275214]
Test Case: 278 | Input/Output: [[28.990578954719126 -9] 19.990578954719126]
Test Case: 279 | Input/Output: [[-62.34942384827329 -3] -65.34942384827329]
Test Case: 280 | Input/Output: [[93.30368218229 -64] 29.303682182290004]
Test Case: 281 | Input/Output: [[-59.72885437324182 -20] -79.72885437324183]
Test Case: 282 | Input/Output: [[-77.73395500910854 -92] -169.73395500910854]
Test Case: 283 | Input/Output: [[81.67441148447111 -19] 62.67441148447111]
Test Case: 284 | Input/Output: [[21.246662830754488 95] 116.24666283075449]
Test Case: 285 | Input/Output: [[-39.929388576712775 21] -18.929388576712775]
Test Case: 286 | Input/Output: [[-22.044263071724757 56] 33.95573692827524]
Test Case: 287 | Input/Output: [[90.41284674276667 2] 92.41284674276667]
Test Case: 288 | Input/Output: [[-37.05658829131131 -25] -62.05658829131131]
Test Case: 289 | Input/Output: [[8.612513857305743 -46] -37.38748614269426]
Test Case: 290 | Input/Output: [[12.247283105071858 -46] -33.75271689492814]
Test Case: 291 | Input/Output: [[-27.662689751120567 37] 9.337310248879433]
Test Case: 292 | Input/Output: [[83.12337312473613 39] 122.12337312473613]
Test Case: 293 | Input/Output: [[-1.9069811805068753 14] 12.093018819493125]
Test Case: 294 | Input/Output: [[-16.004800275395198 -62] -78.0048002753952]
Test Case: 295 | Input/Output: [[71.33298999328889 -56] 15.33298999328889]
Test Case: 296 | Input/Output: [[9.637233973536723 33] 42.63723397353672]
Test Case: 297 | Input/Output: [[-51.08789117322725 -37] -88.08789117322725]
Test Case: 298 | Input/Output: [[-76.32680250080239 63] -13.326802500802387]
Test Case: 299 | Input/Output: [[41.94053397690095 -68] -26.05946602309905]
Test Case: 300 | Input/Output: [[-67.50789701724833 13] -54.507897017248325]
Test Case: 301 | Input/Output: [[-49.89978997215925 20] -29.899789972159247]
Test Case: 302 | Input/Output: [[-84.72843700936848 -47] -131.72843700936846]
Test Case: 303 | Input/Output: [[-1.7538711801852855 100] 98.24612881981471]
Test Case: 304 | Input/Output: [[-31.01088197740816 -35] -66.01088197740816]
Test Case: 305 | Input/Output: [[-40.828624976077286 90] 49.171375023922714]
Test Case: 306 | Input/Output: [[90.07271090540993 52] 142.07271090540993]
Test Case: 307 | Input/Output: [[-11.90887506755314 -25] -36.90887506755314]
Test Case: 308 | Input/Output: [[61.45749633619988 89] 150.45749633619988]
Test Case: 309 | Input/Output: [[97.6571225486006 96] 193.6571225486006]
Test Case: 310 | Input/Output: [[-69.27442125691067 67] -2.2744212569106708]
Test Case: 311 | Input/Output: [[11.788818127606788 3] 14.788818127606788]
Test Case: 312 | Input/Output: [[1.2883231674363884 -68] -66.71167683256361]
Test Case: 313 | Input/Output: [[8.506834966601076 49] 57.506834966601076]
Test Case: 314 | Input/Output: [[-98.31712621893453 46] -52.31712621893453]
Test Case: 315 | Input/Output: [[64.92989653669181 -9] 55.929896536691814]
Test Case: 316 | Input/Output: [[74.0606604882172 -98] -23.939339511782805]
Test Case: 317 | Input/Output: [[-16.3443571837293 -50] -66.3443571837293]
Test Case: 318 | Input/Output: [[3.963678694347905 95] 98.9636786943479]
Test Case: 319 | Input/Output: [[59.92807456595881 -84] -24.07192543404119]
Test Case: 320 | Input/Output: [[15.92288704003333 85] 100.92288704003333]
Test Case: 321 | Input/Output: [[-91.89695573454865 93] 1.103044265451345]
Test Case: 322 | Input/Output: [[-77.86702360671532 98] 20.13297639328468]
Test Case: 323 | Input/Output: [[58.095152254962414 -46] 12.095152254962414]
Test Case: 324 | Input/Output: [[68.8250041783248 -23] 45.825004178324804]
Test Case: 325 | Input/Output: [[-60.7778489083344 -16] -76.77784890833439]
Test Case: 326 | Input/Output: [[-21.878775872778974 51] 29.121224127221026]
Test Case: 327 | Input/Output: [[10.71309642973462 -52] -41.28690357026538]
Test Case: 328 | Input/Output: [[55.28334473109447 94] 149.28334473109447]
Test Case: 329 | Input/Output: [[69.51924541549465 74] 143.51924541549465]
Test Case: 330 | Input/Output: [[-57.23406662640145 1] -56.23406662640145]
Test Case: 331 | Input/Output: [[-2.90466864399977 58] 55.09533135600023]
Test Case: 332 | Input/Output: [[-22.70091685791003 62] 39.29908314208997]
Test Case: 333 | Input/Output: [[-58.077306915738156 -51] -109.07730691573815]
Test Case: 334 | Input/Output: [[-23.139427500419217 -83] -106.13942750041922]
Test Case: 335 | Input/Output: [[17.665627933968892 34] 51.66562793396889]
Test Case: 336 | Input/Output: [[-23.584784607225615 -95] -118.58478460722561]
Test Case: 337 | Input/Output: [[57.375065349101476 64] 121.37506534910148]
Test Case: 338 | Input/Output: [[67.74906715251794 42] 109.74906715251794]
Test Case: 339 | Input/Output: [[-17.001758830738154 -25] -42.001758830738154]
Test Case: 340 | Input/Output: [[-95.46389074590368 4] -91.46389074590368]
Test Case: 341 | Input/Output: [[-14.724843011712665 59] 44.275156988287335]
Test Case: 342 | Input/Output: [[-15.300878867196573 62] 46.69912113280343]
Test Case: 343 | Input/Output: [[9.544818951383661 -17] -7.455181048616339]
Test Case: 344 | Input/Output: [[-98.42083691429544 29] -69.42083691429544]
Test Case: 345 | Input/Output: [[-91.82185856592231 47] -44.82185856592231]
Test Case: 346 | Input/Output: [[87.21432424004192 16] 103.21432424004192]
Test Case: 347 | Input/Output: [[66.77249223556612 40] 106.77249223556612]
Test Case: 348 | Input/Output: [[70.60545633275274 -25] 45.60545633275274]
Test Case: 349 | Input/Output: [[-68.4472498205891 32] -36.44724982058909]
Test Case: 350 | Input/Output: [[38.63218086152898 -14] 24.63218086152898]
Test Case: 351 | Input/Output: [[83.70371859851434 4] 87.70371859851434]
Test Case: 352 | Input/Output: [[-91.23229131705955 24] -67.23229131705955]
Test Case: 353 | Input/Output: [[82.1793915740945 3] 85.1793915740945]
Test Case: 354 | Input/Output: [[-95.89584851801585 40] -55.89584851801585]
Test Case: 355 | Input/Output: [[-34.470314985889175 80] 45.529685014110825]
Test Case: 356 | Input/Output: [[-42.3342265254735 -81] -123.3342265254735]
Test Case: 357 | Input/Output: [[56.7099666041467 23] 79.7099666041467]
Test Case: 358 | Input/Output: [[-82.24358539931387 -74] -156.24358539931387]
Test Case: 359 | Input/Output: [[34.75120201821133 81] 115.75120201821133]
Test Case: 360 | Input/Output: [[-60.0091647773215 -37] -97.0091647773215]
Test Case: 361 | Input/Output: [[18.317249851307096 -85] -66.6827501486929]
Test Case: 362 | Input/Output: [[-45.943060794781275 24] -21.943060794781275]
Test Case: 363 | Input/Output: [[59.53270610942354 -33] 26.532706109423543]
Test Case: 364 | Input/Output: [[95.03633989663257 69] 164.03633989663257]
Test Case: 365 | Input/Output: [[75.13460727751323 61] 136.13460727751323]
Test Case: 366 | Input/Output: [[18.86575139207487 -78] -59.13424860792513]
Test Case: 367 | Input/Output: [[94.1204981175452 -45] 49.120498117545196]
Test Case: 368 | Input/Output: [[69.63143486314624 -1] 68.63143486314624]
Test Case: 369 | Input/Output: [[-35.67457223277752 -27] -62.67457223277752]
Test Case: 370 | Input/Output: [[94.03416654365179 -44] 50.03416654365179]
Test Case: 371 | Input/Output: [[84.92519931784733 42] 126.92519931784733]
Test Case: 372 | Input/Output: [[-19.43640478840382 15] -4.43640478840382]
Test Case: 373 | Input/Output: [[-55.65582748358209 -88] -143.65582748358207]
Test Case: 374 | Input/Output: [[-5.755505547415012 -58] -63.75550554741501]
Test Case: 375 | Input/Output: [[-80.26357487664183 -36] -116.26357487664183]
Test Case: 376 | Input/Output: [[-21.313210737073746 -57] -78.31321073707375]
Test Case: 377 | Input/Output: [[-64.533716636212 90] 25.466283363787994]
Test Case: 378 | Input/Output: [[-34.26023153050947 26] -8.260231530509472]
Test Case: 379 | Input/Output: [[-13.968498561072835 -59] -72.96849856107283]
Test Case: 380 | Input/Output: [[-58.416146077438945 54] -4.416146077438945]
Test Case: 381 | Input/Output: [[73.89895907045317 48] 121.89895907045317]
Test Case: 382 | Input/Output: [[96.83621285231106 -59] 37.836212852311064]
Test Case: 383 | Input/Output: [[-3.0003910848761564 -61] -64.00039108487616]
Test Case: 384 | Input/Output: [[-23.270142158706335 -9] -32.270142158706335]
Test Case: 385 | Input/Output: [[13.800481107716848 61] 74.80048110771685]
Test Case: 386 | Input/Output: [[-32.51400265420783 -93] -125.51400265420783]
Test Case: 387 | Input/Output: [[-12.07263994874748 -6] -18.07263994874748]
Test Case: 388 | Input/Output: [[57.412260384754546 -55] 2.4122603847545463]
Test Case: 389 | Input/Output: [[-35.126719109830404 -86] -121.1267191098304]
Test Case: 390 | Input/Output: [[-86.14369476022215 -84] -170.14369476022216]
Test Case: 391 | Input/Output: [[90.24747628411546 77] 167.24747628411546]
Test Case: 392 | Input/Output: [[21.68552314229666 96] 117.68552314229666]
Test Case: 393 | Input/Output: [[32.53263234724048 -15] 17.53263234724048]
Test Case: 394 | Input/Output: [[45.409741665751426 -20] 25.409741665751426]
Test Case: 395 | Input/Output: [[99.52003135979578 89] 188.52003135979578]
Test Case: 396 | Input/Output: [[-51.74913450677396 -39] -90.74913450677397]
Test Case: 397 | Input/Output: [[42.56224298802556 -75] -32.43775701197444]
Test Case: 398 | Input/Output: [[50.983784088464034 -57] -6.016215911535966]
Test Case: 399 | Input/Output: [[-92.46174664103508 -86] -178.46174664103506]
Test Case: 400 | Input/Output: [[52.45043734198691 70] 122.45043734198691]
Test Case: 401 | Input/Output: [[-77.61564979678099 -43] -120.61564979678099]
Test Case: 402 | Input/Output: [[-91.8409935601923 43] -48.8409935601923]
Test Case: 403 | Input/Output: [[-96.54776892679496 -76] -172.54776892679496]
Test Case: 404 | Input/Output: [[11.959761674658978 -47] -35.04023832534102]
Test Case: 405 | Input/Output: [[43.04083871317803 36] 79.04083871317803]
Test Case: 406 | Input/Output: [[-8.24683638637731 -99] -107.24683638637731]
Test Case: 407 | Input/Output: [[71.85824159095009 -33] 38.85824159095009]
Test Case: 408 | Input/Output: [[-10.964303219491626 -71] -81.96430321949163]
Test Case: 409 | Input/Output: [[19.795758682644532 43] 62.79575868264453]
Test Case: 410 | Input/Output: [[-89.418073214176 -43] -132.418073214176]
Test Case: 411 | Input/Output: [[49.431193896625246 -9] 40.431193896625246]
Test Case: 412 | Input/Output: [[46.622185296019126 78] 124.62218529601913]
Test Case: 413 | Input/Output: [[-9.653729046110286 -85] -94.65372904611029]
Test Case: 414 | Input/Output: [[-32.296514167746395 62] 29.703485832253605]
Test Case: 415 | Input/Output: [[75.44873828371357 -5] 70.44873828371357]
Test Case: 416 | Input/Output: [[57.739418915546 91] 148.739418915546]
Test Case: 417 | Input/Output: [[-48.79408743674756 82] 33.20591256325244]
Test Case: 418 | Input/Output: [[-27.00392632188158 55] 27.99607367811842]
Test Case: 419 | Input/Output: [[13.53444032421885 -89] -75.46555967578115]
Test Case: 420 | Input/Output: [[18.852213256983234 -32] -13.147786743016766]
Test Case: 421 | Input/Output: [[-63.43012914809349 -45] -108.4301291480935]
Test Case: 422 | Input/Output: [[-81.87353747884882 91] 9.126462521151183]
Test Case: 423 | Input/Output: [[-70.50783395699456 -42] -112.50783395699456]
Test Case: 424 | Input/Output: [[-46.26972509575169 75] 28.73027490424831]
Test Case: 425 | Input/Output: [[28.65489087356579 -33] -4.34510912643421]
Test Case: 426 | Input/Output: [[31.43522430445148 -51] -19.56477569554852]
Test Case: 427 | Input/Output: [[51.5026755681462 61] 112.5026755681462]
Test Case: 428 | Input/Output: [[80.67144329751704 31] 111.67144329751704]
Test Case: 429 | Input/Output: [[86.64971593049799 -2] 84.64971593049799]
Test Case: 430 | Input/Output: [[-77.41311709411276 -70] -147.41311709411275]
Test Case: 431 | Input/Output: [[-20.093777390653415 47] 26.906222609346585]
Test Case: 432 | Input/Output: [[41.079631645970636 -92] -50.920368354029364]
Test Case: 433 | Input/Output: [[-94.38598231223393 18] -76.38598231223393]
Test Case: 434 | Input/Output: [[77.47740287499715 -80] -2.5225971250028465]
Test Case: 435 | Input/Output: [[1.0337489158026614 67] 68.03374891580266]
Test Case: 436 | Input/Output: [[-76.78185723125034 -75] -151.78185723125034]
Test Case: 437 | Input/Output: [[-93.84341385001547 -99] -192.84341385001545]
Test Case: 438 | Input/Output: [[-49.5818226519493 22] -27.581822651949302]
Test Case: 439 | Input/Output: [[22.37330346355826 -32] -9.626696536441742]
Test Case: 440 | Input/Output: [[20.109212862044075 29] 49.109212862044075]
Test Case: 441 | Input/Output: [[97.33791244432112 -70] 27.33791244432112]
Test Case: 442 | Input/Output: [[80.43292097454739 99] 179.4329209745474]
Test Case: 443 | Input/Output: [[-67.37202822648726 -45] -112.37202822648726]
Test Case: 444 | Input/Output: [[-73.19658188102431 49] -24.196581881024315]
Test Case: 445 | Input/Output: [[5.977088479890341 -60] -54.02291152010966]
Test Case: 446 | Input/Output: [[-49.8367467480088 59] 9.1632532519912]
Test Case: 447 | Input/Output: [[-4.09639460404685 30] 25.90360539595315]
Test Case: 448 | Input/Output: [[-80.60590680359863 44] -36.60590680359863]
Test Case: 449 | Input/Output: [[-56.28435675125374 70] 13.715643248746261]
Test Case: 450 | Input/Output: [[-24.632319270267786 -15] -39.632319270267786]
Test Case: 451 | Input/Output: [[-37.88498956743269 -97] -134.88498956743268]
Test Case: 452 | Input/Output: [[64.68516349607313 -78] -13.31483650392687]
Test Case: 453 | Input/Output: [[83.9487075498912 69] 152.9487075498912]
Test Case: 454 | Input/Output: [[-8.868125137952546 -16] -24.868125137952546]
Test Case: 455 | Input/Output: [[-43.05110538819983 -9] -52.05110538819983]
Test Case: 456 | Input/Output: [[44.78203389834212 -70] -25.21796610165788]
Test Case: 457 | Input/Output: [[-75.56135765196888 68] -7.561357651968876]
Test Case: 458 | Input/Output: [[-1.014842694964372 44] 42.98515730503563]
Test Case: 459 | Input/Output: [[53.353156494472444 -64] -10.646843505527556]
Test Case: 460 | Input/Output: [[-3.4853414805914156 -97] -100.48534148059142]
Test Case: 461 | Input/Output: [[55.64708692045707 -79] -23.35291307954293]
Test Case: 462 | Input/Output: [[82.36774899690244 -67] 15.367748996902435]
Test Case: 463 | Input/Output: [[-29.303817790878 -6] -35.303817790878]
Test Case: 464 | Input/Output: [[96.84447853404251 -62] 34.84447853404251]
Test Case: 465 | Input/Output: [[63.07329681598216 10] 73.07329681598216]
Test Case: 466 | Input/Output: [[81.92171184980802 41] 122.92171184980802]
Test Case: 467 | Input/Output: [[-23.65790240218655 -39] -62.65790240218655]
Test Case: 468 | Input/Output: [[40.08384368815706 40] 80.08384368815706]
Test Case: 469 | Input/Output: [[73.33759643649088 93] 166.33759643649088]
Test Case: 470 | Input/Output: [[-59.40700644702779 -69] -128.40700644702778]
Test Case: 471 | Input/Output: [[24.245952680487832 -9] 15.245952680487832]
Test Case: 472 | Input/Output: [[76.59714262777868 -10] 66.59714262777868]
Test Case: 473 | Input/Output: [[-31.862337650691686 57] 25.137662349308314]
Test Case: 474 | Input/Output: [[-25.392467643901483 2] -23.392467643901483]
Test Case: 475 | Input/Output: [[-43.69096736388825 -69] -112.69096736388825]
Test Case: 476 | Input/Output: [[-2.508769155488096 67] 64.4912308445119]
Test Case: 477 | Input/Output: [[89.72686774702808 64] 153.72686774702808]
Test Case: 478 | Input/Output: [[-30.154561198043453 -76] -106.15456119804345]
Test Case: 479 | Input/Output: [[-68.6022271844854 -39] -107.6022271844854]
Test Case: 480 | Input/Output: [[31.386353152265144 -50] -18.613646847734856]
Test Case: 481 | Input/Output: [[91.51746260007744 35] 126.51746260007744]
Test Case: 482 | Input/Output: [[-36.553228314852774 -1] -37.553228314852774]
Test Case: 483 | Input/Output: [[-10.706540606502315 -93] -103.70654060650232]
Test Case: 484 | Input/Output: [[93.74015056464637 17] 110.74015056464637]
Test Case: 485 | Input/Output: [[98.52400250798266 -66] 32.52400250798266]
Test Case: 486 | Input/Output: [[-36.09154640119441 66] 29.908453598805593]
Test Case: 487 | Input/Output: [[50.64531492762555 93] 143.64531492762555]
Test Case: 488 | Input/Output: [[-83.31895185109464 -64] -147.31895185109465]
Test Case: 489 | Input/Output: [[12.844362158186627 63] 75.84436215818663]
Test Case: 490 | Input/Output: [[96.23460175615818 19] 115.23460175615818]
Test Case: 491 | Input/Output: [[87.64809655903025 63] 150.64809655903025]
Test Case: 492 | Input/Output: [[99.66587564594485 77] 176.66587564594485]
Test Case: 493 | Input/Output: [[-91.59891373834803 24] -67.59891373834803]
Test Case: 494 | Input/Output: [[59.11633284320274 -63] -3.8836671567972587]
Test Case: 495 | Input/Output: [[26.573307666332852 35] 61.57330766633285]
Test Case: 496 | Input/Output: [[-73.01726508805856 -3] -76.01726508805856]
Test Case: 497 | Input/Output: [[31.5710635008586 -91] -59.4289364991414]
Test Case: 498 | Input/Output: [[-87.6460039367901 78] -9.646003936790095]
Test Case: 499 | Input/Output: [[-63.474464132004904 87] 23.525535867995096]
Test Case: 500 | Input/Output: [[18.14378895588152 -25] -6.856211044118481]
Test Case: 501 | Input/Output: [[14.545964534267995 -65] -50.454035465732005]
Test Case: 502 | Input/Output: [[34.24068793848767 51] 85.24068793848767]
Test Case: 503 | Input/Output: [[-54.964094932064775 50] -4.964094932064775]
Test Case: 504 | Input/Output: [[45.16624308602201 -36] 9.166243086022007]
Test Case: 505 | Input/Output: [[-58.5555357001728 -92] -150.5555357001728]
Test Case: 506 | Input/Output: [[23.80290464723103 -27] -3.1970953527689687]
Test Case: 507 | Input/Output: [[90.07924296109758 100] 190.07924296109758]
Test Case: 508 | Input/Output: [[-23.779447002516733 -54] -77.77944700251673]
Test Case: 509 | Input/Output: [[89.96059938729479 12] 101.96059938729479]
Test Case: 510 | Input/Output: [[66.32764002251685 -75] -8.672359977483154]
Test Case: 511 | Input/Output: [[31.32937332468032 96] 127.32937332468032]
Test Case: 512 | Input/Output: [[-14.854259015238853 53] 38.14574098476115]
Test Case: 513 | Input/Output: [[61.96072683070179 -69] -7.0392731692982125]
Test Case: 514 | Input/Output: [[-61.42306036494336 -84] -145.42306036494335]
Test Case: 515 | Input/Output: [[39.42293041264267 43] 82.42293041264267]
Test Case: 516 | Input/Output: [[-37.72931196383236 32] -5.729311963832359]
Test Case: 517 | Input/Output: [[-51.97025395671731 -63] -114.9702539567173]
Test Case: 518 | Input/Output: [[46.162939316929766 92] 138.16293931692977]
Test Case: 519 | Input/Output: [[-83.975229518704 -59] -142.975229518704]
Test Case: 520 | Input/Output: [[-71.22999121113537 -89] -160.22999121113537]
Test Case: 521 | Input/Output: [[81.00751938827796 -59] 22.007519388277956]
Test Case: 522 | Input/Output: [[8.895835096179098 -95] -86.1041649038209]
Test Case: 523 | Input/Output: [[-4.259660803423344 100] 95.74033919657666]
Test Case: 524 | Input/Output: [[-88.35849752545558 -53] -141.35849752545556]
Test Case: 525 | Input/Output: [[49.14860578535715 -63] -13.851394214642852]
Test Case: 526 | Input/Output: [[76.49433782544148 70] 146.49433782544148]
Test Case: 527 | Input/Output: [[-31.957533715027026 37] 5.042466284972974]
Test Case: 528 | Input/Output: [[36.30792284264243 0] 36.30792284264243]
Test Case: 529 | Input/Output: [[87.92724539675615 -58] 29.92724539675615]
Test Case: 530 | Input/Output: [[40.07553028621189 17] 57.07553028621189]
Test Case: 531 | Input/Output: [[-98.32670370871017 82] -16.32670370871017]
Test Case: 532 | Input/Output: [[-42.60300211777053 8] -34.60300211777053]
Test Case: 533 | Input/Output: [[-90.70519156717407 -64] -154.70519156717407]
Test Case: 534 | Input/Output: [[-2.989987269548493 13] 10.010012730451507]
Test Case: 535 | Input/Output: [[82.87411248397459 83] 165.87411248397459]
Test Case: 536 | Input/Output: [[34.57634756832084 -50] -15.423652431679159]
Test Case: 537 | Input/Output: [[54.43373185634954 -60] -5.566268143650461]
Test Case: 538 | Input/Output: [[27.810314677773178 78] 105.81031467777318]
Test Case: 539 | Input/Output: [[-54.06439242629326 26] -28.06439242629326]
Test Case: 540 | Input/Output: [[-80.78238836558248 70] -10.782388365582477]
Test Case: 541 | Input/Output: [[72.98209570701783 53] 125.98209570701783]
Test Case: 542 | Input/Output: [[-42.754597455311426 -100] -142.75459745531143]
Test Case: 543 | Input/Output: [[62.68888469349912 74] 136.68888469349912]
Test Case: 544 | Input/Output: [[-38.139460019781126 -90] -128.13946001978113]
Test Case: 545 | Input/Output: [[28.73166866532418 -66] -37.26833133467582]
Test Case: 546 | Input/Output: [[82.67438376122436 39] 121.67438376122436]
Test Case: 547 | Input/Output: [[6.178423811200659 98] 104.17842381120066]
Test Case: 548 | Input/Output: [[-29.412724407834688 -9] -38.41272440783469]
Test Case: 549 | Input/Output: [[3.5143479496705368 29] 32.51434794967054]
Test Case: 550 | Input/Output: [[19.84305909524467 -71] -51.15694090475533]
Test Case: 551 | Input/Output: [[30.926014575132655 -33] -2.0739854248673453]
Test Case: 552 | Input/Output: [[-5.23957295629242 67] 61.76042704370758]
Test Case: 553 | Input/Output: [[82.80813298458585 14] 96.80813298458585]
Test Case: 554 | Input/Output: [[8.707934324457781 8] 16.70793432445778]
Test Case: 555 | Input/Output: [[-10.911082042077382 -87] -97.91108204207738]
Test Case: 556 | Input/Output: [[48.08559891334713 -78] -29.914401086652873]
Test Case: 557 | Input/Output: [[-0.025526296906690504 36] 35.97447370309331]
Test Case: 558 | Input/Output: [[-30.00666724332642 31] 0.9933327566735812]
Test Case: 559 | Input/Output: [[25.62529259036073 12] 37.62529259036073]
Test Case: 560 | Input/Output: [[33.54722269331279 41] 74.54722269331279]
Test Case: 561 | Input/Output: [[46.5260837487516 -33] 13.526083748751603]
Test Case: 562 | Input/Output: [[-49.278014007930615 90] 40.721985992069385]
Test Case: 563 | Input/Output: [[-11.592559300956594 2] -9.592559300956594]
Test Case: 564 | Input/Output: [[35.10612908178422 -35] 0.10612908178421776]
Test Case: 565 | Input/Output: [[-30.155926158174566 36] 5.844073841825434]
Test Case: 566 | Input/Output: [[-35.141676325363775 11] -24.141676325363775]
Test Case: 567 | Input/Output: [[43.5164569792949 17] 60.5164569792949]
Test Case: 568 | Input/Output: [[88.42881490684985 94] 182.42881490684985]
Test Case: 569 | Input/Output: [[-87.27744342348296 -24] -111.27744342348296]
Test Case: 570 | Input/Output: [[-74.40244887325085 5] -69.40244887325085]
Test Case: 571 | Input/Output: [[-77.5606341432323 61] -16.560634143232306]
Test Case: 572 | Input/Output: [[99.75799811249223 24] 123.75799811249223]
Test Case: 573 | Input/Output: [[-59.77554690831104 -55] -114.77554690831104]
Test Case: 574 | Input/Output: [[70.6762177790591 99] 169.6762177790591]
Test Case: 575 | Input/Output: [[7.573219093773616 27] 34.573219093773616]
Test Case: 576 | Input/Output: [[37.669730957794656 -71] -33.330269042205344]
Test Case: 577 | Input/Output: [[-10.01079483873113 41] 30.98920516126887]
Test Case: 578 | Input/Output: [[19.48577292343603 45] 64.48577292343603]
Test Case: 579 | Input/Output: [[23.466543817030157 -65] -41.53345618296984]
Test Case: 580 | Input/Output: [[-76.44117444866588 54] -22.441174448665876]
Test Case: 581 | Input/Output: [[12.52045078528377 61] 73.52045078528377]
Test Case: 582 | Input/Output: [[2.084390810339798 -22] -19.915609189660202]
Test Case: 583 | Input/Output: [[76.31723912507147 -17] 59.31723912507147]
Test Case: 584 | Input/Output: [[72.445468769493 -17] 55.445468769493004]
Test Case: 585 | Input/Output: [[43.672485546564474 -56] -12.327514453435526]
Test Case: 586 | Input/Output: [[-66.06936511099006 -1] -67.06936511099006]
Test Case: 587 | Input/Output: [[-82.6104785247692 -38] -120.6104785247692]
Test Case: 588 | Input/Output: [[-79.47752017279527 -85] -164.47752017279527]
Test Case: 589 | Input/Output: [[-44.002676115569386 91] 46.997323884430614]
Test Case: 590 | Input/Output: [[49.742305074340294 -98] -48.257694925659706]
Test Case: 591 | Input/Output: [[1.892321942900793 77] 78.8923219429008]
Test Case: 592 | Input/Output: [[-21.741050693021975 -43] -64.74105069302198]
Test Case: 593 | Input/Output: [[65.92385252078569 54] 119.92385252078569]
Test Case: 594 | Input/Output: [[-35.76505800911754 -40] -75.76505800911754]
Test Case: 595 | Input/Output: [[-81.35795964800477 -31] -112.35795964800477]
Test Case: 596 | Input/Output: [[27.69380352542565 80] 107.69380352542565]
Test Case: 597 | Input/Output: [[84.75508496214485 -95] -10.24491503785515]
Test Case: 598 | Input/Output: [[74.91975385279221 36] 110.91975385279221]
Test Case: 599 | Input/Output: [[-84.3868963272543 51] -33.386896327254306]
Test Case: 600 | Input/Output: [[-34.76262762653997 -80] -114.76262762653997]
Test Case: 601 | Input/Output: [[16.732416111464616 31] 47.732416111464616]
Test Case: 602 | Input/Output: [[2.9520613347605433 41] 43.95206133476054]
Test Case: 603 | Input/Output: [[-52.270403681851604 -85] -137.2704036818516]
Test Case: 604 | Input/Output: [[-6.507806095048082 10] 3.492193904951918]
Test Case: 605 | Input/Output: [[42.00675032668687 11] 53.00675032668687]
Test Case: 606 | Input/Output: [[11.26196556279038 85] 96.26196556279038]
Test Case: 607 | Input/Output: [[-49.242355374250394 8] -41.242355374250394]
Test Case: 608 | Input/Output: [[-3.2305871858481225 -68] -71.23058718584812]
Test Case: 609 | Input/Output: [[93.08327127455522 23] 116.08327127455522]
Test Case: 610 | Input/Output: [[-56.0815447157712 70] 13.918455284228799]
Test Case: 611 | Input/Output: [[-2.8734028529683115 -93] -95.87340285296831]
Test Case: 612 | Input/Output: [[87.96698749809892 84] 171.96698749809892]
Test Case: 613 | Input/Output: [[-76.02029500139253 77] 0.979704998607474]
Test Case: 614 | Input/Output: [[18.500555172653918 6] 24.500555172653918]
Test Case: 615 | Input/Output: [[-95.84652614293236 -77] -172.84652614293236]
Test Case: 616 | Input/Output: [[64.4566715992884 46] 110.4566715992884]
Test Case: 617 | Input/Output: [[-63.307798959009595 98] 34.692201040990405]
Test Case: 618 | Input/Output: [[-44.190055901263946 15] -29.190055901263946]
Test Case: 619 | Input/Output: [[88.14593595104827 -40] 48.14593595104827]
Test Case: 620 | Input/Output: [[56.00566877332892 -3] 53.00566877332892]
Test Case: 621 | Input/Output: [[-81.8054587478814 17] -64.8054587478814]
Test Case: 622 | Input/Output: [[-73.6620868751775 45] -28.662086875177494]
Test Case: 623 | Input/Output: [[-65.08562495319109 -87] -152.0856249531911]
Test Case: 624 | Input/Output: [[-53.8657575501795 70] 16.134242449820498]
Test Case: 625 | Input/Output: [[-16.46238888099174 -95] -111.46238888099174]
Test Case: 626 | Input/Output: [[44.62314430667723 -1] 43.62314430667723]
Test Case: 627 | Input/Output: [[-65.79022368901857 28] -37.790223689018575]
Test Case: 628 | Input/Output: [[32.88111058214537 98] 130.88111058214537]
Test Case: 629 | Input/Output: [[72.7221855614763 17] 89.7221855614763]
Test Case: 630 | Input/Output: [[13.331422292430474 -13] 0.3314222924304744]
Test Case: 631 | Input/Output: [[-18.480504286363654 -23] -41.480504286363654]
Test Case: 632 | Input/Output: [[95.23527254223092 -31] 64.23527254223092]
Test Case: 633 | Input/Output: [[27.698520848499882 57] 84.69852084849988]
Test Case: 634 | Input/Output: [[49.916450831849716 -71] -21.083549168150284]
Test Case: 635 | Input/Output: [[49.67662553748099 -60] -10.323374462519013]
Test Case: 636 | Input/Output: [[9.141703462470034 -51] -41.85829653752997]
Test Case: 637 | Input/Output: [[27.848893803365016 -24] 3.8488938033650157]
Test Case: 638 | Input/Output: [[-72.93657305737077 -75] -147.93657305737077]
Test Case: 639 | Input/Output: [[34.21614327216071 49] 83.2161432721607]
Test Case: 640 | Input/Output: [[-70.31150905791101 11] -59.31150905791101]
Test Case: 641 | Input/Output: [[-2.8406860591900625 -35] -37.84068605919006]
Test Case: 642 | Input/Output: [[63.819208026375236 63] 126.81920802637524]
Test Case: 643 | Input/Output: [[21.75066850409641 -77] -55.24933149590359]
Test Case: 644 | Input/Output: [[14.020594963123074 -98] -83.97940503687693]
Test Case: 645 | Input/Output: [[-65.91610960156584 -90] -155.91610960156584]
Test Case: 646 | Input/Output: [[-21.652121402770746 49] 27.347878597229254]
Test Case: 647 | Input/Output: [[-54.6864517666944 -4] -58.6864517666944]
Test Case: 648 | Input/Output: [[5.775438202874426 53] 58.775438202874426]
Test Case: 649 | Input/Output: [[-51.12741163820043 -78] -129.12741163820044]
Test Case: 650 | Input/Output: [[-78.16728212811074 6] -72.16728212811074]
Test Case: 651 | Input/Output: [[7.519890551090413 -98] -90.48010944890959]
Test Case: 652 | Input/Output: [[-46.095338164243735 -92] -138.09533816424374]
Test Case: 653 | Input/Output: [[-83.89115105806661 -72] -155.8911510580666]
Test Case: 654 | Input/Output: [[-4.795459745689598 -47] -51.7954597456896]
Test Case: 655 | Input/Output: [[12.578705173350997 -38] -25.421294826649003]
Test Case: 656 | Input/Output: [[-16.219213898885528 -71] -87.21921389888553]
Test Case: 657 | Input/Output: [[-53.22363381240045 82] 28.77636618759955]
Test Case: 658 | Input/Output: [[64.90147747122344 -1] 63.901477471223444]
Test Case: 659 | Input/Output: [[76.81361882917116 -28] 48.81361882917116]
Test Case: 660 | Input/Output: [[39.900896594079455 -28] 11.900896594079455]
Test Case: 661 | Input/Output: [[75.67860986929216 25] 100.67860986929216]
Test Case: 662 | Input/Output: [[-16.874371634397335 55] 38.125628365602665]
Test Case: 663 | Input/Output: [[70.49195993477437 94] 164.49195993477437]
Test Case: 664 | Input/Output: [[78.40278855447747 81] 159.40278855447747]
Test Case: 665 | Input/Output: [[-13.853493010324442 -13] -26.853493010324442]
Test Case: 666 | Input/Output: [[-39.46892549464695 -47] -86.46892549464695]
Test Case: 667 | Input/Output: [[-46.214299858486704 -29] -75.2142998584867]
Test Case: 668 | Input/Output: [[31.014821653473064 66] 97.01482165347306]
Test Case: 669 | Input/Output: [[80.97176759551104 20] 100.97176759551104]
Test Case: 670 | Input/Output: [[40.5602144224832 49] 89.5602144224832]
Test Case: 671 | Input/Output: [[-8.526967773275402 -54] -62.5269677732754]
Test Case: 672 | Input/Output: [[67.55969380503447 43] 110.55969380503447]
Test Case: 673 | Input/Output: [[-13.485458903313102 61] 47.5145410966869]
Test Case: 674 | Input/Output: [[68.94012521972869 -13] 55.940125219728685]
Test Case: 675 | Input/Output: [[33.3627244520066 -93] -59.6372755479934]
Test Case: 676 | Input/Output: [[89.18129422706417 -19] 70.18129422706417]
Test Case: 677 | Input/Output: [[0.30602677951281976 45] 45.30602677951282]
Test Case: 678 | Input/Output: [[15.04028313326296 37] 52.04028313326296]
Test Case: 679 | Input/Output: [[25.228890989184436 24] 49.228890989184436]
Test Case: 680 | Input/Output: [[-79.32172275041587 -4] -83.32172275041587]
Test Case: 681 | Input/Output: [[-24.156859948999184 -68] -92.15685994899918]
Test Case: 682 | Input/Output: [[64.2929146338663 -59] 5.292914633866303]
Test Case: 683 | Input/Output: [[42.40555436352261 90] 132.4055543635226]
Test Case: 684 | Input/Output: [[-49.98682529421876 -49] -98.98682529421876]
Test Case: 685 | Input/Output: [[-93.72574042140278 -89] -182.72574042140278]
Test Case: 686 | Input/Output: [[-57.629320929169594 -75] -132.62932092916958]
Test Case: 687 | Input/Output: [[87.37699894216883 -78] 9.376998942168825]
Test Case: 688 | Input/Output: [[-49.672219750225466 -87] -136.67221975022545]
Test Case: 689 | Input/Output: [[-32.46845454098124 -25] -57.46845454098124]
Test Case: 690 | Input/Output: [[-70.75171983083641 -46] -116.75171983083641]
Test Case: 691 | Input/Output: [[45.36752799316244 -63] -17.63247200683756]
Test Case: 692 | Input/Output: [[-79.69596523740607 62] -17.69596523740607]
Test Case: 693 | Input/Output: [[46.37672085665642 34] 80.37672085665642]
Test Case: 694 | Input/Output: [[47.516898566078225 64] 111.51689856607823]
Test Case: 695 | Input/Output: [[1.738080980934825 88] 89.73808098093482]
Test Case: 696 | Input/Output: [[-1.1237676392441927 -9] -10.123767639244193]
Test Case: 697 | Input/Output: [[-32.50644989784588 58] 25.493550102154117]
Test Case: 698 | Input/Output: [[60.63658729626434 76] 136.63658729626434]
Test Case: 699 | Input/Output: [[-2.460123193946842 -100] -102.46012319394684]
Test Case: 700 | Input/Output: [[95.15758020870345 -17] 78.15758020870345]
Test Case: 701 | Input/Output: [[18.357299387473986 -86] -67.64270061252601]
Test Case: 702 | Input/Output: [[-39.478821176836966 -97] -136.47882117683696]
Test Case: 703 | Input/Output: [[-92.37388447887041 70] -22.37388447887041]
Test Case: 704 | Input/Output: [[-64.22361665956171 -99] -163.2236166595617]
Test Case: 705 | Input/Output: [[-23.90674735364955 -13] -36.90674735364955]
Test Case: 706 | Input/Output: [[76.70263338659737 -79] -2.2973666134026303]
Test Case: 707 | Input/Output: [[8.117839861161144 -40] -31.882160138838856]
Test Case: 708 | Input/Output: [[-72.72394309457897 23] -49.72394309457897]
Test Case: 709 | Input/Output: [[-2.360203993593373 -71] -73.36020399359337]
Test Case: 710 | Input/Output: [[43.158410135133124 -24] 19.158410135133124]
Test Case: 711 | Input/Output: [[-87.18103057842377 -100] -187.18103057842376]
Test Case: 712 | Input/Output: [[-75.96576430642577 83] 7.034235693574232]
Test Case: 713 | Input/Output: [[93.737783856347 -85] 8.737783856346994]
Test Case: 714 | Input/Output: [[46.06155989804083 -21] 25.061559898040827]
Test Case: 715 | Input/Output: [[94.82329373950367 39] 133.82329373950367]
Test Case: 716 | Input/Output: [[-62.87140280197549 95] 32.12859719802451]
Test Case: 717 | Input/Output: [[-69.27710421213717 -80] -149.27710421213717]
Test Case: 718 | Input/Output: [[78.29105653286254 -56] 22.29105653286254]
Test Case: 719 | Input/Output: [[-54.55099351947301 20] -34.55099351947301]
Test Case: 720 | Input/Output: [[88.76962156728666 28] 116.76962156728666]
Test Case: 721 | Input/Output: [[-24.69347475552182 49] 24.30652524447818]
Test Case: 722 | Input/Output: [[86.20989953123083 51] 137.20989953123083]
Test Case: 723 | Input/Output: [[87.96633177538305 -12] 75.96633177538305]
Test Case: 724 | Input/Output: [[74.61122327295718 -14] 60.611223272957176]
Test Case: 725 | Input/Output: [[-35.256505406247925 -4] -39.256505406247925]
Test Case: 726 | Input/Output: [[-95.22260978684378 16] -79.22260978684378]
Test Case: 727 | Input/Output: [[-94.49648370678658 -38] -132.4964837067866]
Test Case: 728 | Input/Output: [[-65.35769632814586 42] -23.357696328145863]
Test Case: 729 | Input/Output: [[-92.53126852886588 82] -10.53126852886588]
Test Case: 730 | Input/Output: [[18.396788476007075 88] 106.39678847600707]
Test Case: 731 | Input/Output: [[-47.40036902480285 -47] -94.40036902480284]
Test Case: 732 | Input/Output: [[75.31947187972702 34] 109.31947187972702]
Test Case: 733 | Input/Output: [[70.2100885550764 84] 154.2100885550764]
Test Case: 734 | Input/Output: [[-76.03290750977551 -21] -97.03290750977551]
Test Case: 735 | Input/Output: [[6.8654381458290885 15] 21.86543814582909]
Test Case: 736 | Input/Output: [[16.35240988171023 44] 60.35240988171023]
Test Case: 737 | Input/Output: [[17.774234547585237 -44] -26.225765452414763]
Test Case: 738 | Input/Output: [[-66.38267046551456 -91] -157.38267046551456]
Test Case: 739 | Input/Output: [[20.29350582754597 -47] -26.70649417245403]
Test Case: 740 | Input/Output: [[72.5334985989434 85] 157.5334985989434]
Test Case: 741 | Input/Output: [[66.0883280203314 -9] 57.0883280203314]
Test Case: 742 | Input/Output: [[36.17581682564324 -80] -43.82418317435676]
Test Case: 743 | Input/Output: [[-11.08044574397556 -74] -85.08044574397556]
Test Case: 744 | Input/Output: [[29.35692903828175 -2] 27.35692903828175]
Test Case: 745 | Input/Output: [[64.38396775426429 -46] 18.38396775426429]
Test Case: 746 | Input/Output: [[63.91329476332987 64] 127.91329476332987]
Test Case: 747 | Input/Output: [[-35.122669834472674 -51] -86.12266983447267]
Test Case: 748 | Input/Output: [[79.37239481019077 -96] -16.62760518980923]
Test Case: 749 | Input/Output: [[-31.121852464393342 80] 48.87814753560666]
Test Case: 750 | Input/Output: [[-81.8344206760192 -86] -167.8344206760192]
Test Case: 751 | Input/Output: [[-49.41556098246458 -47] -96.41556098246457]
Test Case: 752 | Input/Output: [[-2.2918617045389027 39] 36.7081382954611]
Test Case: 753 | Input/Output: [[-16.585972527573475 -2] -18.585972527573475]
Test Case: 754 | Input/Output: [[13.50662570088383 41] 54.50662570088383]
Test Case: 755 | Input/Output: [[-12.122421274644111 -4] -16.12242127464411]
Test Case: 756 | Input/Output: [[-52.55534024326636 2] -50.55534024326636]
Test Case: 757 | Input/Output: [[-21.025722126423304 -95] -116.0257221264233]
Test Case: 758 | Input/Output: [[-48.313332845460266 -32] -80.31333284546027]
Test Case: 759 | Input/Output: [[-38.48533051016896 38] -0.4853305101689571]
Test Case: 760 | Input/Output: [[-46.861924271068986 13] -33.861924271068986]
Test Case: 761 | Input/Output: [[-57.11328960627655 91] 33.88671039372345]
Test Case: 762 | Input/Output: [[28.707061393957503 62] 90.7070613939575]
Test Case: 763 | Input/Output: [[23.791626879998603 2] 25.791626879998603]
Test Case: 764 | Input/Output: [[-23.81885709616607 -2] -25.81885709616607]
Test Case: 765 | Input/Output: [[29.62150497048316 38] 67.62150497048316]
Test Case: 766 | Input/Output: [[-29.451609464093636 -81] -110.45160946409364]
Test Case: 767 | Input/Output: [[31.048673857974393 -50] -18.951326142025607]
Test Case: 768 | Input/Output: [[-99.7692560068402 66] -33.769256006840195]
Test Case: 769 | Input/Output: [[38.785796665039925 0] 38.785796665039925]
Test Case: 770 | Input/Output: [[-95.80468652384131 -28] -123.80468652384131]
Test Case: 771 | Input/Output: [[16.52770901317946 -97] -80.47229098682054]
Test Case: 772 | Input/Output: [[0.8505475993735132 53] 53.85054759937351]
Test Case: 773 | Input/Output: [[-25.811235060936482 35] 9.188764939063518]
Test Case: 774 | Input/Output: [[97.66030824610013 4] 101.66030824610013]
Test Case: 775 | Input/Output: [[-80.0338577873446 -50] -130.0338577873446]
Test Case: 776 | Input/Output: [[-76.20480573249301 96] 19.795194267506986]
Test Case: 777 | Input/Output: [[-82.09590852884594 13] -69.09590852884594]
Test Case: 778 | Input/Output: [[-82.21783550509932 -85] -167.21783550509932]
Test Case: 779 | Input/Output: [[-57.19305027808708 -92] -149.19305027808707]
Test Case: 780 | Input/Output: [[-29.190950430795198 40] 10.809049569204802]
Test Case: 781 | Input/Output: [[8.668446160052937 89] 97.66844616005294]
Test Case: 782 | Input/Output: [[69.33800657813163 -76] -6.661993421868374]
Test Case: 783 | Input/Output: [[-65.27164095307252 -10] -75.27164095307252]
Test Case: 784 | Input/Output: [[64.45017181076466 41] 105.45017181076466]
Test Case: 785 | Input/Output: [[74.98278123681322 -88] -13.017218763186776]
Test Case: 786 | Input/Output: [[-45.10465416197109 -88] -133.1046541619711]
Test Case: 787 | Input/Output: [[80.45689266656186 -57] 23.456892666561856]
Test Case: 788 | Input/Output: [[24.087721000998982 84] 108.08772100099898]
Test Case: 789 | Input/Output: [[-60.50994809856745 92] 31.49005190143255]
Test Case: 790 | Input/Output: [[66.4868505661889 83] 149.4868505661889]
Test Case: 791 | Input/Output: [[-99.35194994357255 40] -59.35194994357255]
Test Case: 792 | Input/Output: [[-6.866056290146517 90] 83.13394370985348]
Test Case: 793 | Input/Output: [[-32.669298157977394 -82] -114.6692981579774]
Test Case: 794 | Input/Output: [[-60.951782027728086 -67] -127.95178202772809]
Test Case: 795 | Input/Output: [[-39.913581885632766 -48] -87.91358188563277]
Test Case: 796 | Input/Output: [[-47.629733137751764 -2] -49.629733137751764]
Test Case: 797 | Input/Output: [[82.81711610365917 57] 139.81711610365917]
Test Case: 798 | Input/Output: [[-26.216972894708164 93] 66.78302710529184]
Test Case: 799 | Input/Output: [[57.81004328195519 95] 152.8100432819552]
Test Case: 800 | Input/Output: [[57.854354512870714 21] 78.85435451287071]
Test Case: 801 | Input/Output: [[-84.31225321381332 29] -55.31225321381332]
Test Case: 802 | Input/Output: [[90.81686291353145 86] 176.81686291353145]
Test Case: 803 | Input/Output: [[24.300111056577904 92] 116.3001110565779]
Test Case: 804 | Input/Output: [[29.163008414526246 -28] 1.1630084145262458]
Test Case: 805 | Input/Output: [[87.13539769413012 -2] 85.13539769413012]
Test Case: 806 | Input/Output: [[-67.19550049644005 87] 19.804499503559953]
Test Case: 807 | Input/Output: [[8.816589291888931 95] 103.81658929188893]
Test Case: 808 | Input/Output: [[-96.2978006842456 57] -39.2978006842456]
Test Case: 809 | Input/Output: [[-35.32760456407131 77] 41.67239543592869]
Test Case: 810 | Input/Output: [[-8.145550732925216 -19] -27.145550732925216]
Test Case: 811 | Input/Output: [[-94.57630288378044 -54] -148.57630288378044]
Test Case: 812 | Input/Output: [[-65.60226619464791 60] -5.60226619464791]
Test Case: 813 | Input/Output: [[1.9383815891489888 -70] -68.06161841085101]
Test Case: 814 | Input/Output: [[38.726624170015185 90] 128.72662417001519]
Test Case: 815 | Input/Output: [[6.7695217183033805 -5] 1.7695217183033805]
Test Case: 816 | Input/Output: [[4.360029377315257 -96] -91.63997062268474]
Test Case: 817 | Input/Output: [[-82.13530571365453 54] -28.13530571365453]
Test Case: 818 | Input/Output: [[-17.084920733768726 -47] -64.08492073376873]
Test Case: 819 | Input/Output: [[96.03977840383459 57] 153.0397784038346]
Test Case: 820 | Input/Output: [[-33.06304086821454 81] 47.93695913178546]
Test Case: 821 | Input/Output: [[20.54430862278926 92] 112.54430862278926]
Test Case: 822 | Input/Output: [[26.78734324027394 -42] -15.212656759726059]
Test Case: 823 | Input/Output: [[-40.57824750063139 -20] -60.57824750063139]
Test Case: 824 | Input/Output: [[-28.021664190509526 39] 10.978335809490474]
Test Case: 825 | Input/Output: [[-35.82720158234845 -33] -68.82720158234845]
Test Case: 826 | Input/Output: [[-62.99621219855482 -10] -72.99621219855482]
Test Case: 827 | Input/Output: [[97.42267427793138 -57] 40.42267427793138]
Test Case: 828 | Input/Output: [[-68.53301565255386 -34] -102.53301565255386]
Test Case: 829 | Input/Output: [[-27.31624344929027 54] 26.68375655070973]
Test Case: 830 | Input/Output: [[27.773963573161907 34] 61.77396357316191]
Test Case: 831 | Input/Output: [[-25.542511641238093 -83] -108.5425116412381]
Test Case: 832 | Input/Output: [[-48.91478067077788 -48] -96.91478067077787]
Test Case: 833 | Input/Output: [[25.486580326316272 -8] 17.486580326316272]
Test Case: 834 | Input/Output: [[54.011758009098685 74] 128.01175800909868]
Test Case: 835 | Input/Output: [[23.847922642864546 55] 78.84792264286455]
Test Case: 836 | Input/Output: [[-49.536956243670204 -44] -93.5369562436702]
Test Case: 837 | Input/Output: [[45.040145579717745 -86] -40.959854420282255]
Test Case: 838 | Input/Output: [[4.566382425324548 52] 56.56638242532455]
Test Case: 839 | Input/Output: [[32.225670591100084 -69] -36.774329408899916]
Test Case: 840 | Input/Output: [[80.97663160972306 36] 116.97663160972306]
Test Case: 841 | Input/Output: [[-7.528017811944807 88] 80.4719821880552]
Test Case: 842 | Input/Output: [[29.12578264319191 93] 122.12578264319191]
Test Case: 843 | Input/Output: [[-0.5645338556143855 16] 15.435466144385614]
Test Case: 844 | Input/Output: [[-91.21107409105099 -79] -170.211074091051]
Test Case: 845 | Input/Output: [[-87.76330310605655 47] -40.763303106056554]
Test Case: 846 | Input/Output: [[-57.62011368919684 23] -34.62011368919684]
Test Case: 847 | Input/Output: [[-19.028737567100933 -50] -69.02873756710093]
Test Case: 848 | Input/Output: [[-16.26999971167011 -37] -53.26999971167011]
Test Case: 849 | Input/Output: [[-92.94906570449567 47] -45.949065704495666]
Test Case: 850 | Input/Output: [[57.39326313806191 -85] -27.60673686193809]
Test Case: 851 | Input/Output: [[74.10345760737786 -93] -18.896542392622138]
Test Case: 852 | Input/Output: [[-35.17552378731233 11] -24.17552378731233]
Test Case: 853 | Input/Output: [[-37.02699463306685 -54] -91.02699463306685]
Test Case: 854 | Input/Output: [[-12.025567549487917 76] 63.97443245051208]
Test Case: 855 | Input/Output: [[-13.09132256170706 -3] -16.09132256170706]
Test Case: 856 | Input/Output: [[-2.3531095378403535 93] 90.64689046215965]
Test Case: 857 | Input/Output: [[97.31820563988734 11] 108.31820563988734]
Test Case: 858 | Input/Output: [[-18.051132119769093 12] -6.051132119769093]
Test Case: 859 | Input/Output: [[-41.96823243380303 -4] -45.96823243380303]
Test Case: 860 | Input/Output: [[-47.46665107229391 -17] -64.4666510722939]
Test Case: 861 | Input/Output: [[94.09755941974848 -9] 85.09755941974848]
Test Case: 862 | Input/Output: [[70.46784363399567 -79] -8.53215636600433]
Test Case: 863 | Input/Output: [[54.858406708621914 -63] -8.141593291378086]
Test Case: 864 | Input/Output: [[-57.067079667671926 39] -18.067079667671926]
Test Case: 865 | Input/Output: [[-37.32650085045704 -18] -55.32650085045704]
Test Case: 866 | Input/Output: [[-31.791086855575657 -13] -44.79108685557566]
Test Case: 867 | Input/Output: [[20.815489894701855 2] 22.815489894701855]
Test Case: 868 | Input/Output: [[86.90449959930521 62] 148.9044995993052]
Test Case: 869 | Input/Output: [[99.33528932548401 -1] 98.33528932548401]
Test Case: 870 | Input/Output: [[-32.94111243473981 31] -1.9411124347398072]
Test Case: 871 | Input/Output: [[37.56118600919399 28] 65.56118600919399]
Test Case: 872 | Input/Output: [[-78.63708082418539 -75] -153.63708082418538]
Test Case: 873 | Input/Output: [[40.78387974702579 -50] -9.216120252974207]
Test Case: 874 | Input/Output: [[-30.17429271270464 -54] -84.17429271270464]
Test Case: 875 | Input/Output: [[-17.37846344531819 68] 50.62153655468181]
Test Case: 876 | Input/Output: [[-39.714664160033266 28] -11.714664160033266]
Test Case: 877 | Input/Output: [[20.007705830899212 11] 31.007705830899212]
Test Case: 878 | Input/Output: [[-45.36789101987455 -60] -105.36789101987455]
Test Case: 879 | Input/Output: [[15.964188701688542 45] 60.96418870168854]
Test Case: 880 | Input/Output: [[-25.504488957242685 -48] -73.50448895724269]
Test Case: 881 | Input/Output: [[1.3180907370422972 44] 45.3180907370423]
Test Case: 882 | Input/Output: [[19.17404803364326 36] 55.17404803364326]
Test Case: 883 | Input/Output: [[90.28657730531978 -13] 77.28657730531978]
Test Case: 884 | Input/Output: [[-22.893102670966428 99] 76.10689732903357]
Test Case: 885 | Input/Output: [[-68.00276407230832 9] -59.002764072308324]
Test Case: 886 | Input/Output: [[13.350810058541057 31] 44.35081005854106]
Test Case: 887 | Input/Output: [[-23.156596655291352 -55] -78.15659665529135]
Test Case: 888 | Input/Output: [[85.20559989301478 89] 174.20559989301478]
Test Case: 889 | Input/Output: [[-71.62536611668962 74] 2.3746338833103806]
Test Case: 890 | Input/Output: [[-0.7153263006825341 -28] -28.715326300682534]
Test Case: 891 | Input/Output: [[-8.606573737501535 -33] -41.606573737501535]
Test Case: 892 | Input/Output: [[82.4684120067123 74] 156.4684120067123]
Test Case: 893 | Input/Output: [[-85.04406183031689 95] 9.955938169683108]
Test Case: 894 | Input/Output: [[8.169012591170983 -79] -70.83098740882902]
Test Case: 895 | Input/Output: [[9.904166360843817 -9] 0.9041663608438171]
Test Case: 896 | Input/Output: [[76.69049079391925 -92] -15.309509206080747]
Test Case: 897 | Input/Output: [[64.49411491629564 11] 75.49411491629564]
Test Case: 898 | Input/Output: [[-20.32333358473346 -82] -102.32333358473346]
Test Case: 899 | Input/Output: [[75.83410717171958 71] 146.83410717171958]
Test Case: 900 | Input/Output: [[-26.030898387643163 49] 22.969101612356837]
Test Case: 901 | Input/Output: [[-39.645746624173704 -77] -116.64574662417371]
Test Case: 902 | Input/Output: [[-66.33372001576777 38] -28.333720015767767]
Test Case: 903 | Input/Output: [[-2.659671024877724 -8] -10.659671024877724]
Test Case: 904 | Input/Output: [[-0.29072133469499306 -26] -26.290721334694993]
Test Case: 905 | Input/Output: [[-34.61469226005602 -93] -127.61469226005602]
Test Case: 906 | Input/Output: [[18.36617606429911 -58] -39.63382393570089]
Test Case: 907 | Input/Output: [[74.32095295373026 -77] -2.679047046269744]
Test Case: 908 | Input/Output: [[-56.545925840609755 72] 15.454074159390245]
Test Case: 909 | Input/Output: [[52.73096677616172 -53] -0.269033223838278]
Test Case: 910 | Input/Output: [[-95.40336068375588 4] -91.40336068375588]
Test Case: 911 | Input/Output: [[-30.93688632978899 78] 47.06311367021101]
Test Case: 912 | Input/Output: [[-25.532459749192867 57] 31.467540250807133]
Test Case: 913 | Input/Output: [[46.69265299349138 0] 46.69265299349138]
Test Case: 914 | Input/Output: [[-58.485052795009196 39] -19.485052795009196]
Test Case: 915 | Input/Output: [[84.43381170732056 12] 96.43381170732056]
Test Case: 916 | Input/Output: [[38.80319997208079 -67] -28.19680002791921]
Test Case: 917 | Input/Output: [[-34.458360111192874 6] -28.458360111192874]
Test Case: 918 | Input/Output: [[8.59498493386495 50] 58.59498493386495]
Test Case: 919 | Input/Output: [[75.86788834581895 -96] -20.132111654181045]
Test Case: 920 | Input/Output: [[-54.0541727633987 15] -39.0541727633987]
Test Case: 921 | Input/Output: [[41.31855516775846 -49] -7.681444832241539]
Test Case: 922 | Input/Output: [[-60.47662564671907 -12] -72.47662564671907]
Test Case: 923 | Input/Output: [[43.81815620679035 16] 59.81815620679035]
Test Case: 924 | Input/Output: [[-37.464187838676025 -4] -41.464187838676025]
Test Case: 925 | Input/Output: [[-14.461070270715865 -55] -69.46107027071587]
Test Case: 926 | Input/Output: [[-25.376323368289988 79] 53.62367663171001]
Test Case: 927 | Input/Output: [[27.282341562850945 -35] -7.717658437149055]
Test Case: 928 | Input/Output: [[-48.08313904666339 -80] -128.0831390466634]
Test Case: 929 | Input/Output: [[-0.8410579657233797 -69] -69.84105796572338]
Test Case: 930 | Input/Output: [[-36.54680303938673 12] -24.54680303938673]
Test Case: 931 | Input/Output: [[-20.00008503451467 -33] -53.00008503451467]
Test Case: 932 | Input/Output: [[71.71205153552688 -4] 67.71205153552688]
Test Case: 933 | Input/Output: [[-72.40884326507299 -65] -137.408843265073]
Test Case: 934 | Input/Output: [[-96.25249111248904 21] -75.25249111248904]
Test Case: 935 | Input/Output: [[54.908973717724734 27] 81.90897371772473]
Test Case: 936 | Input/Output: [[62.79059513656088 -35] 27.79059513656088]
Test Case: 937 | Input/Output: [[36.309657957287016 26] 62.309657957287016]
Test Case: 938 | Input/Output: [[94.17658110446655 12] 106.17658110446655]
Test Case: 939 | Input/Output: [[-81.763863337775 -89] -170.763863337775]
Test Case: 940 | Input/Output: [[-63.7262269330725 -73] -136.7262269330725]
Test Case: 941 | Input/Output: [[-20.145516160507995 -45] -65.145516160508]
Test Case: 942 | Input/Output: [[10.383410114994419 63] 73.38341011499442]
Test Case: 943 | Input/Output: [[82.76797378715236 96] 178.76797378715236]
Test Case: 944 | Input/Output: [[-8.141115148600136 -85] -93.14111514860014]
Test Case: 945 | Input/Output: [[16.716867233667926 -33] -16.283132766332074]
Test Case: 946 | Input/Output: [[-10.681285328040317 -3] -13.681285328040317]
Test Case: 947 | Input/Output: [[21.155168799550623 17] 38.15516879955062]
Test Case: 948 | Input/Output: [[-79.66963492713248 54] -25.669634927132478]
Test Case: 949 | Input/Output: [[88.82815940114571 86] 174.8281594011457]
Test Case: 950 | Input/Output: [[-44.40600718715106 -54] -98.40600718715106]
Test Case: 951 | Input/Output: [[25.38270439958457 66] 91.38270439958457]
Test Case: 952 | Input/Output: [[65.91606234111362 -88] -22.083937658886384]
Test Case: 953 | Input/Output: [[-68.11357449261439 40] -28.11357449261439]
Test Case: 954 | Input/Output: [[71.57580964497433 -20] 51.57580964497433]
Test Case: 955 | Input/Output: [[75.93760029492867 83] 158.93760029492867]
Test Case: 956 | Input/Output: [[-61.887672761635 -93] -154.887672761635]
Test Case: 957 | Input/Output: [[-19.65584111912308 49] 29.34415888087692]
Test Case: 958 | Input/Output: [[-2.2872947222580393 50] 47.71270527774196]
Test Case: 959 | Input/Output: [[27.491103289264714 62] 89.49110328926471]
Test Case: 960 | Input/Output: [[-57.74996776054253 24] -33.74996776054253]
Test Case: 961 | Input/Output: [[4.2784943389690255 -15] -10.721505661030974]
Test Case: 962 | Input/Output: [[-34.77023405463211 -69] -103.77023405463211]
Test Case: 963 | Input/Output: [[-31.21516859058893 61] 29.78483140941107]
Test Case: 964 | Input/Output: [[-70.8430767655132 -32] -102.8430767655132]
Test Case: 965 | Input/Output: [[63.960765365593545 -41] 22.960765365593545]
Test Case: 966 | Input/Output: [[-67.12462163457573 91] 23.875378365424268]
Test Case: 967 | Input/Output: [[-98.69145454291773 -30] -128.6914545429177]
Test Case: 968 | Input/Output: [[-93.12555267461349 52] -41.12555267461349]
Test Case: 969 | Input/Output: [[-6.919272291667312 100] 93.08072770833269]
Test Case: 970 | Input/Output: [[-46.989617436411635 -26] -72.98961743641163]
Test Case: 971 | Input/Output: [[-65.91744739041643 -63] -128.91744739041644]
Test Case: 972 | Input/Output: [[89.09023702769682 17] 106.09023702769682]
Test Case: 973 | Input/Output: [[4.477513998074542 38] 42.47751399807454]
Test Case: 974 | Input/Output: [[-18.69622286355515 -86] -104.69622286355515]
Test Case: 975 | Input/Output: [[13.812504658584345 -74] -60.187495341415655]
Test Case: 976 | Input/Output: [[-65.81951414627179 67] 1.1804858537282144]
Test Case: 977 | Input/Output: [[18.470980174530368 45] 63.47098017453037]
Test Case: 978 | Input/Output: [[39.69683905188165 -77] -37.30316094811835]
Test Case: 979 | Input/Output: [[-58.256833338375344 94] 35.743166661624656]
Test Case: 980 | Input/Output: [[-16.850641933906246 -96] -112.85064193390625]
Test Case: 981 | Input/Output: [[-16.682430815184944 70] 53.317569184815056]
Test Case: 982 | Input/Output: [[34.06880000752278 26] 60.06880000752278]
Test Case: 983 | Input/Output: [[-9.611613026095611 -73] -82.61161302609561]
Test Case: 984 | Input/Output: [[25.716990705787367 -61] -35.28300929421263]
Test Case: 985 | Input/Output: [[-12.567583902069941 -50] -62.56758390206994]
Test Case: 986 | Input/Output: [[0.5631885209184162 38] 38.563188520918416]
Test Case: 987 | Input/Output: [[-23.81317106003749 -66] -89.81317106003749]
Test Case: 988 | Input/Output: [[43.88458728584459 77] 120.88458728584459]
Test Case: 989 | Input/Output: [[-5.482422486922459 -21] -26.48242248692246]
Test Case: 990 | Input/Output: [[-90.32965766041639 65] -25.329657660416387]
Test Case: 991 | Input/Output: [[-30.726856394491946 12] -18.726856394491946]
Test Case: 992 | Input/Output: [[-29.23202862676058 95] 65.76797137323942]
Test Case: 993 | Input/Output: [[37.00192108296304 -49] -11.998078917036963]
Test Case: 994 | Input/Output: [[62.90315744541749 -58] 4.9031574454174915]
Test Case: 995 | Input/Output: [[74.90905817208503 -34] 40.909058172085025]
Test Case: 996 | Input/Output: [[32.90927082648466 -93] -60.09072917351534]
Test Case: 997 | Input/Output: [[-8.289807236654198 -72] -80.2898072366542]
Test Case: 998 | Input/Output: [[62.600011011501834 -90] -27.399988988498166]
Test Case: 999 | Input/Output: [[-65.22266584412479 -59] -124.22266584412479]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -117 23 50 -96 -44 76 -89 -122 -81 26 19 -124 77 56 -107 123
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth integer_rot float_sub in1 integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 18250.413625099998
Median total errors in population: 25344.0
Error averages by case: (729.128324799999 13.292 717.0934436999987 13.169 710.9861461000015 12.376 702.9561289999984 13.068 723.227088000001 13.173 712.5108302999975 13.038 713.0161365999982 12.386 716.5127302999994 13.13 720.8191799000012 13.114 714.3574504999989 13.149 720.8666755999999 13.263 716.2671382000008 13.674 711.7425285999989 13.069 724.6373391999988 13.123 707.1939283000008 12.365 715.6834693999982 13.012 719.4650854000015 13.124 708.5750609000004 11.643 720.6426438999986 13.223 732.5022159000015 13.281 719.3519778000016 13.162 728.1670425999976 13.948 711.3905109000005 13.699 724.2735985000002 13.97 703.7459507000012 10.85)
Error minima by case: (0.333 2 0.6327 3 0.1519 1 0.1093 1 0.7486 3 0.0754 1 0.0355 1 0.5813 2 0.5781 2 0.4075 2 0.8928 3 0.9437 2 0.1015 2 0.5168 2 0.3111 1 0.7681 1 0.8985 1 0.2182 1 0.7869 3 0.1694 2 0.2205 1 0.8574 1 0.835 2 0.7373 2 0.2332 1)
Average genome size in population (length): 49.983
Average program size in population (points): 50.983
Average percent parens in population: 0.041
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.297
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1253855
--- Timings ---
Current time: 1529615818506 milliseconds
Total Time:           3.6 seconds
Initialization:       0.1 seconds,  3.1%
Reproduction:         0.6 seconds, 15.9%
Fitness Testing:      2.9 seconds, 80.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth integer_rot float_sub in1 integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 6982.159861900013
Median total errors in population: 2480.0837
Error averages by case: (290.62070250000176 10.767 264.40491759999793 10.606 259.6920875999992 9.804 243.87609820000122 10.241 278.90266589999885 10.582 265.75292550000046 10.271 265.2770808000006 9.811 261.9661727999987 10.47 274.17690680000203 10.359 263.5191059000022 10.426 270.9435417000002 10.792 275.35196519999994 12.58 261.85513799999853 10.357 282.30436400000127 10.428 247.14594499999922 9.846 268.43518019999755 10.113 275.79995930000155 10.475 253.36449820000078 9.434 269.63489610000187 10.63 296.7126233000028 10.673 268.68308299999893 10.609 294.3615104000001 11.061 262.5222261000004 12.756 287.08620790000043 11.172 236.82805989999852 8.679)
Error minima by case: (0.333 3 0.6327 3 0.1519 1 0.1093 1 0.7486 3 0.0754 1 0.0355 1 0.5813 2 0.5781 2 0.5009 2 0.8928 3 0.9437 9 0.1015 2 0.5168 2 0.3111 1 0.7681 1 0.8985 2 0.2182 1 0.7869 3 0.1694 2 0.2205 2 0.8574 1 0.835 8 0.7373 2 0.2332 1)
Average genome size in population (length): 61.708
Average program size in population (points): 62.708
Average percent parens in population: 0.021
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.495
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.297
Error (vector) diversity:			 0.314
Behavioral diversity:				 0.342
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2802379
--- Timings ---
Current time: 1529615823716 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.6 seconds, 39.4%
Fitness Testing:      4.7 seconds, 51.5%
Report:               0.7 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth integer_rot float_sub in1 integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4710.102075199997
Median total errors in population: 1375.0
Error averages by case: (190.56308260000074 6.645 182.0846807999996 6.624 156.25941749999973 5.779 149.82085140000035 5.501 187.79643069999986 6.599 194.08141400000028 6.019 171.4303897000001 5.783 172.93828609999986 6.476 183.76189040000057 6.093 170.53369340000046 6.104 193.9179946000002 6.722 202.36101070000038 12.531 181.67518099999975 6.086 186.06641160000044 6.394 156.8791598000001 5.821 153.74787129999964 5.436 178.4539431000003 6.066 199.37967220000033 5.574 193.05045250000063 6.617 203.33775530000088 6.066 195.91716129999963 6.591 210.78376610000032 6.318 187.41570859999996 13.145 175.9542071000001 6.967 165.22964339999973 4.705)
Error minima by case: (0.333 2 0.6327 2 0.1519 1 0.3653 1 0.7486 2 0.0754 1 0.0355 1 0.5813 2 0.5781 2 0.5009 2 0.8928 2 0.9437 9 0.1015 2 0.5168 2 0.3111 1 0.7681 1 0.8985 2 0.2182 1 0.7869 2 0.1694 1 0.2205 2 0.8574 1 0.835 9 0.7373 2 0.2332 1)
Average genome size in population (length): 56.686
Average program size in population (points): 57.686
Average percent parens in population: 0.023
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9305
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.103
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4222602
--- Timings ---
Current time: 1529615827138 milliseconds
Total Time:          12.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.8 seconds, 38.3%
Fitness Testing:      6.4 seconds, 51.9%
Report:               1.1 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth integer_rot float_sub in1 integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times float_rot float_add integer_mod float_mod float_div tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4034.4319984000003
Median total errors in population: 1352.0
Error averages by case: (157.63216920000028 6.162 152.66599349999987 6.151 130.56655769999955 5.365 124.47504990000029 4.814 156.56570660000025 6.149 162.1100153000003 5.467 144.09784160000015 5.358 142.3296248000003 5.957 153.70654210000026 5.637 153.2691762000003 5.493 165.34024430000028 6.183 186.21128390000055 12.396 152.05588850000012 5.5 152.86365780000006 5.954 127.29297120000054 5.364 133.6613496000002 4.944 158.98515250000008 5.475 169.5800160000005 4.926 164.61287780000083 6.153 168.9864148000004 5.631 166.4221489999995 6.138 190.71511189999998 5.585 173.2935032000002 12.843 152.57580249999964 6.26 140.26889850000026 4.243)
Error minima by case: (0.333 2 0.6327 2 0.1519 1 0.3653 1 0.7486 2 0.0754 1 0.9461 1 0.5813 2 0.5781 2 0.5009 2 0.8928 2 0.9437 11 0.1015 2 0.5168 2 0.3111 1 0.7681 1 0.8985 2 0.2182 1 0.7869 2 0.1694 2 0.2205 2 0.8574 1 0.835 10 0.7373 2 0.2332 1)
Average genome size in population (length): 48.41
Average program size in population (points): 49.41
Average percent parens in population: 0.027
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.3925
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.062
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5434414
--- Timings ---
Current time: 1529615830627 milliseconds
Total Time:          15.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.1 seconds, 38.5%
Fitness Testing:      8.1 seconds, 50.7%
Report:               1.6 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_flush} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div})
Best program: (in1 float_inc float_stackdepth integer_rot float_sub in1 integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove integer_flush float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult float_rot integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2596.777802099999
Median total errors in population: 286.4037
Error averages by case: (91.82311179999924 9.614 87.00934830000064 9.588 88.8427972999989 9.195 84.42855030000032 9.111 89.15392250000097 9.578 101.57958750000087 9.315 94.64780080000055 9.156 84.94657640000047 9.403 87.5801852999993 9.511 100.1127001999994 9.327 90.77801040000084 9.674 109.78763620000142 12.072 97.15444420000048 9.311 88.87818169999908 9.345 78.78594490000032 9.173 97.51913260000065 9.257 101.61287819999937 9.313 102.7438803000012 8.288 91.37345080000107 9.591 94.99149579999934 9.589 90.47030139999971 9.599 114.02466919999846 9.482 107.16560410000115 11.653 104.70956879999856 9.661 79.20202310000082 7.65)
Error minima by case: (0.333 2 0.3673 2 0.1519 2 0.3653 1 0.2514 2 0.0754 2 0.0539 2 0.4187 2 0.4219 2 0.4991 2 0.1072 2 0.0563 10 0.1015 2 0.4832 2 0.3111 2 0.2319 1 0.1015 2 0.2182 1 0.2131 2 0.1694 2 0.2205 2 0.1426 2 0.165 9 0.2627 3 0.2332 1)
Average genome size in population (length): 56.562
Average program size in population (points): 57.562
Average percent parens in population: 0.020
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.898375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 56
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.053
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6850080
--- Timings ---
Current time: 1529615833968 milliseconds
Total Time:          19.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.4 seconds, 37.9%
Fitness Testing:      9.9 seconds, 50.8%
Report:               2.1 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction float_cos} {:instruction integer_max} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_flush} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_dup} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (integer_max integer_pop float_pop float_cos integer_max float_swap integer_dec integer_yankdup print_float float_shove integer_dup integer_sub float_flush float_dup_items integer_swap float_flush integer_pop float_dup_items integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove integer_dup float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div float_stackdepth float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1767.951253299999
Median total errors in population: 286.4037
Error averages by case: (61.781690999999135 11.285 57.406124300000116 11.26 60.34312769999924 11.061 54.35867909999978 11.194 60.004952199999366 11.247 62.86939870000101 11.151 62.21140630000062 11.031 58.768702499999726 11.238 59.14889869999922 11.21 58.27311709999927 11.146 57.95834080000093 11.373 59.71780720000114 12.002 61.81442479999912 11.162 61.234073599999356 11.159 56.57876749999937 11.058 63.167089500000756 11.131 60.878303700000906 11.141 60.325836200000836 10.115 57.69829209999932 11.269 61.92003379999926 11.301 56.95443450000083 11.274 61.29967110000062 11.327 59.152594999999344 11.159 64.19550710000055 11.271 52.16397880000023 9.161)
Error minima by case: (0.333 3 0.3673 3 0.1519 2 0.3653 1 0.2514 3 0.0754 2 0.0539 2 0.4187 2 0.4219 2 0.5009 2 0.1072 3 0.0563 10 0.1015 2 0.4832 2 0.3111 2 0.7681 1 0.8985 2 0.2182 1 0.2131 3 0.1694 2 0.2205 3 0.8574 2 0.165 9 0.7373 3 0.2332 1)
Average genome size in population (length): 63.169
Average program size in population (points): 64.169
Average percent parens in population: 0.016
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.4035
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.048
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8431309
--- Timings ---
Current time: 1529615836873 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.4 seconds, 37.9%
Fitness Testing:     11.3 seconds, 50.6%
Report:               2.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div})
Best program: (in1 float_inc float_stackdepth integer_rot float_sub in1 integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div tag_float_618 tagged_948 integer_max tag_integer_327 float_dup_times integer_sub float_add integer_mod float_mod float_div tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2344.3426207999996
Median total errors in population: 286.4037
Error averages by case: (85.65877959999906 11.292 81.48635410000057 11.277 82.7674156999988 11.072 76.50211340000018 11.203 83.91589760000046 11.254 85.39703260000108 11.185 84.56657550000064 11.039 82.7493285000005 11.239 83.08559509999915 11.217 82.19337379999929 11.171 82.218328200001 11.371 82.8554172000016 11.977 84.41468759999984 11.196 85.13611859999897 11.169 77.9627157000004 11.065 83.16614440000076 11.154 80.87203240000015 11.158 82.84889220000129 10.142 81.96082090000041 11.284 85.75772159999919 11.289 81.27555710000027 11.285 85.52938259999951 11.353 82.69032540000043 11.147 87.61468079999902 11.286 73.71633020000078 9.176)
Error minima by case: (0.333 3 0.6327 3 0.1519 3 0.3653 2 0.7486 3 0.0754 4 0.9461 3 0.5813 3 0.5781 3 0.4991 4 0.8928 3 0.9437 10 0.1015 4 0.5168 3 0.3111 3 0.2319 3 0.1015 4 0.2182 3 0.7869 3 0.1694 3 0.2205 3 0.1426 4 0.835 8 0.2627 4 0.2332 3)
Average genome size in population (length): 63.602
Average program size in population (points): 64.602
Average percent parens in population: 0.016
Minimum age in population: 6.0
Maximum age in population: 10.625
Average age in population: 8.82596875
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.057
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 10023587
--- Timings ---
Current time: 1529615840122 milliseconds
Total Time:          25.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:         9.8 seconds, 38.6%
Fitness Testing:     12.7 seconds, 49.8%
Report:               2.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_add} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan})
Best program: (in1 float_inc float_stackdepth integer_rot float_sub in1 integer_flush -54 integer_yankdup integer_dup_times integer_mult integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_add integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2265.5678093999986
Median total errors in population: 286.4037
Error averages by case: (80.95581609999924 11.315 76.70584620000079 11.266 75.61801329999895 11.084 74.7208987999997 11.2 79.41712490000022 11.258 85.68329930000091 11.191 77.44310080000054 11.035 78.34133039999988 11.234 78.22622869999933 11.241 79.6506938999993 11.171 78.31066960000085 11.391 81.38831780000159 11.994 85.12549009999974 11.186 79.75704109999882 11.19 75.1994005 11.063 80.95306050000067 11.143 80.02784080000052 11.15 83.59457260000136 10.151 78.04968480000005 11.282 81.47881439999934 11.307 77.40780830000075 11.276 83.17776499999981 11.335 80.68445390000008 11.153 84.60991299999971 11.277 70.97762460000087 9.17)
Error minima by case: (0.333 3 0.3673 3 0.1519 2 0.3653 1 0.2514 3 0.0754 2 0.0539 2 0.4187 3 0.4219 2 0.4991 2 0.1072 3 0.0563 10 0.1015 2 0.4832 3 0.3111 2 0.2319 1 0.1015 2 0.2182 2 0.2131 3 0.1694 2 0.2205 3 0.1426 2 0.165 8 0.2627 3 0.2332 1)
Average genome size in population (length): 63.101
Average program size in population (points): 64.101
Average percent parens in population: 0.016
Minimum age in population: 8.09375
Maximum age in population: 12.171875
Average age in population: 10.338171875
Median age in population: 10.359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.056
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11603591
--- Timings ---
Current time: 1529615843255 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.1 seconds, 38.7%
Fitness Testing:     14.2 seconds, 49.5%
Report:               3.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 11490.408000000003
Test mean error for best: 5.74520
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149
          
Correct output: 102.6327075508 | Program output: 102
          
Correct output: 74.1519122481  | Program output: 74
           
Correct output: -56.3652570697 | Program output: -56
          
Correct output: 128.7486359047 | Program output: 128
          
Correct output: -39.0753991565 | Program output: -39
          
Correct output: 63.9461282577  | Program output: 63
           
Correct output: 106.5813138606 | Program output: 106
          
Correct output: 119.5781070021 | Program output: 119
          
Correct output: -61.5008556741 | Program output: -61
          
Correct output: 112.8928042415 | Program output: 112
          
Correct output: -78.0563177466 | Program output: -79
          
Correct output: -46.1015479935 | Program output: -46
          
Correct output: 138.5168140128 | Program output: 138
          
Correct output: 79.3111235509  | Program output: 79
           
Correct output: -82.7680920585 | Program output: -82
          
Correct output: -84.8984895408 | Program output: -84
          
Correct output: -8.218244424   | Program output: -8
           
Correct output: 110.7868673413 | Program output: 110
          
Correct output: 162.1694424654 | Program output: 162
          
Correct output: 109.2204830484 | Program output: 109
          
Correct output: -107.8573642026 | Program output: -107
         
Correct output: -54.1650214386 | Program output: -55
          
Correct output: -106.7372858396 | Program output: -106
         
Correct output: 51.23324299    | Program output: 51
           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction float_cos} {:instruction integer_max} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction integer_sub} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction print_newline} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_yank} {:instruction 5.187824899395153} {:instruction float_swap} {:instruction float_add} {:instruction integer_fromfloat} {:instruction float_swap})
Best program: (integer_max integer_pop float_pop float_cos integer_max float_swap integer_dec integer_yankdup print_float float_shove integer_dup integer_sub float_rot float_dup_items integer_swap float_stackdepth integer_pop float_dup_items integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div tag_float_618 integer_sub integer_max tag_integer_327 integer_yank integer_div print_newline integer_pop float_stackdepth float_inc integer_yank 5.187824899395153 float_swap float_add integer_fromfloat float_swap)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2465.5168978999995
Median total errors in population: 286.4037
Error averages by case: (90.5723729999991 11.369 85.91968710000079 11.32 86.62693779999861 11.112 79.05915800000017 11.278 89.18851660000107 11.316 89.62844720000105 11.235 88.27353820000067 11.085 87.8868001000007 11.321 88.44130609999918 11.271 84.6907991999993 11.245 87.71198560000097 11.439 87.33542650000187 12.006 88.75830500000014 11.236 90.12230079999885 11.246 85.31883470000075 11.096 89.22698570000078 11.208 87.55115749999986 11.229 86.9349612000015 10.191 87.4439637000009 11.334 90.82624139999923 11.38 86.77349650000006 11.347 89.44037119999881 11.427 85.54157500000085 11.186 91.58614619999862 11.358 81.22858360000107 9.194)
Error minima by case: (0.333 3 0.3673 3 0.1519 2 0.3653 1 0.2514 3 0.0754 2 0.0539 2 0.4187 3 0.4219 2 0.4991 2 0.1072 3 0.0563 10 0.1015 2 0.4832 3 0.3111 2 0.2319 1 0.1015 2 0.2182 2 0.2131 3 0.1694 2 0.2205 3 0.1426 2 0.165 9 0.2627 3 0.2332 1)
Average genome size in population (length): 62.618
Average program size in population (points): 63.618
Average percent parens in population: 0.016
Minimum age in population: 9.46875
Maximum age in population: 13.9296875
Average age in population: 11.785734375
Median age in population: 11.828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.053
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 13171165
--- Timings ---
Current time: 1529615846280 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.3 seconds, 38.9%
Fitness Testing:     15.6 seconds, 49.4%
Report:               3.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mod} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub})
Best program: (in1 float_inc integer_stackdepth float_div float_sub in1 integer_flush -54 integer_yankdup integer_dup_times integer_div integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove print_integer float_div print_integer float_div tag_integer_848 integer_inc integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mod print_float integer_yank float_flush integer_dup float_dup_times integer_sub)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2267.7123608999996
Median total errors in population: 286.4037
Error averages by case: (80.7147382999992 11.361 75.77006270000061 11.328 79.65628109999886 11.091 72.80804879999995 11.249 79.07677570000035 11.323 84.68015650000098 11.215 81.83923230000057 11.048 77.77278790000022 11.287 78.24047319999926 11.271 80.80911349999927 11.218 77.45170550000091 11.476 81.08863340000147 12.015 83.49926330000011 11.212 80.14699669999895 11.21 74.87752710000022 11.071 82.5578723000007 11.177 79.6888112000003 11.193 82.58103390000123 10.168 77.20250280000015 11.343 81.01635309999931 11.385 76.53874270000047 11.342 84.04238409999924 11.413 79.89647770000045 11.189 86.07744759999903 11.348 70.55893950000086 9.187)
Error minima by case: (0.333 3 0.3673 3 0.1519 2 0.3653 1 0.2514 3 0.0754 2 0.0539 2 0.4187 3 0.4219 2 0.5009 2 0.1072 3 0.0563 9 0.1015 2 0.4832 3 0.3111 2 0.7681 1 0.8985 2 0.2182 2 0.2131 3 0.1694 2 0.2205 3 0.8574 2 0.165 9 0.7373 3 0.2332 1)
Average genome size in population (length): 62.762
Average program size in population (points): 63.762
Average percent parens in population: 0.016
Minimum age in population: 10.625
Maximum age in population: 15.24609375
Average age in population: 13.22683203125
Median age in population: 13.287109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.051
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 14742290
--- Timings ---
Current time: 1529615849338 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.6 seconds, 39.1%
Fitness Testing:     17.0 seconds, 48.9%
Report:               4.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction print_float} {:instruction tag_float_618} {:instruction tag_integer_323} {:instruction integer_mod} {:instruction float_mod} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_729} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1})
Best program: (in1 float_inc float_stackdepth integer_rot float_sub in1 integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod print_float tag_float_618 tag_integer_323 integer_mod float_mod print_float tag_float_618 tagged_948 integer_max tag_integer_729 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2197.6996221
Median total errors in population: 286.4037
Error averages by case: (79.5140309999992 11.309 74.14503540000071 11.292 75.65800109999877 11.099 74.16152329999977 11.232 77.92698020000054 11.279 80.42937180000095 11.207 77.74116090000058 11.051 76.81323910000029 11.263 76.68033669999929 11.253 75.29330549999932 11.193 76.37349110000092 11.401 74.78121250000152 11.998 79.69069599999982 11.196 78.21173759999883 11.21 73.08085660000008 11.063 78.17389860000067 11.171 76.02254850000051 11.166 79.13308840000128 10.162 76.22407660000015 11.306 80.03881519999932 11.326 75.61511150000061 11.297 78.2733729999995 11.372 75.68559500000015 11.148 80.04525649999937 11.309 69.51288000000099 9.171)
Error minima by case: (0.333 2 0.3673 2 0.1519 2 0.3653 1 0.2514 2 0.0754 2 0.0539 2 0.4187 2 0.4219 2 0.4991 2 0.1072 2 0.0563 10 0.1015 2 0.4832 2 0.3111 2 0.2319 1 0.1015 2 0.2182 2 0.2131 2 0.1694 2 0.2205 2 0.1426 2 0.165 9 0.2627 3 0.2332 1)
Average genome size in population (length): 62.498
Average program size in population (points): 63.498
Average percent parens in population: 0.016
Minimum age in population: 11.640625
Maximum age in population: 16.431640625
Average age in population: 14.658740234375
Median age in population: 14.7197265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.054
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 16306756
--- Timings ---
Current time: 1529615852417 milliseconds
Total Time:          37.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.9 seconds, 39.4%
Fitness Testing:     18.4 seconds, 48.8%
Report:               4.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction float_cos} {:instruction integer_max} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_279} {:instruction float_flush} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_yank} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult})
Best program: (integer_max integer_pop float_pop float_cos integer_max integer_dup_times float_sub integer_mod float_sub float_div tag_float_279 float_flush float_inc integer_shove integer_mod float_shove integer_fromfloat integer_pop float_yank in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 tagged_428 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2326.5548512
Median total errors in population: 286.4037
Error averages by case: (83.2398106999991 11.379 77.72868390000068 11.333 81.49998999999868 11.123 77.10042740000027 11.305 81.13224560000073 11.333 87.4672964000011 11.246 83.02727600000067 11.08 79.7446099000006 11.333 80.19514859999917 11.282 83.19980819999924 11.255 78.511230100001 11.477 84.02592390000171 11.991 86.59789900000008 11.242 82.31574729999889 11.239 76.74635190000058 11.093 87.01375380000083 11.227 84.03964999999988 11.226 83.53108840000144 10.212 78.20760710000066 11.366 83.32828159999922 11.419 77.37185090000021 11.348 86.67280259999893 11.459 82.9360227000007 11.172 90.97688349999872 11.373 70.21846170000103 9.213)
Error minima by case: (0.333 6 0.3673 6 0.1519 4 0.3653 4 0.2514 6 0.0754 5 0.0539 4 0.4187 5 0.4219 5 0.4991 5 0.1072 6 0.0563 10 0.1015 5 0.4832 5 0.3111 4 0.2319 4 0.1015 5 0.2182 3 0.2131 6 0.1694 5 0.2205 6 0.1426 6 0.165 10 0.2627 7 0.2332 3)
Average genome size in population (length): 62.133
Average program size in population (points): 63.133
Average percent parens in population: 0.016
Minimum age in population: 12.8125
Maximum age in population: 18.2021484375
Average age in population: 16.1273701171875
Median age in population: 16.1748046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.064
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 17862381
--- Timings ---
Current time: 1529615855487 milliseconds
Total Time:          41.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.1 seconds, 39.3%
Fitness Testing:     19.9 seconds, 48.7%
Report:               4.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 11482.408000000003
Test mean error for best: 5.74120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149           
Correct output: 102.6327075508 | Program output: 102           
Correct output: 74.1519122481  | Program output: 74            
Correct output: -56.3652570697 | Program output: -56           
Correct output: 128.7486359047 | Program output: 128           
Correct output: -39.0753991565 | Program output: -39           
Correct output: 63.9461282577  | Program output: 63            
Correct output: 106.5813138606 | Program output: 106           
Correct output: 119.5781070021 | Program output: 119           
Correct output: -61.5008556741 | Program output: -61           
Correct output: 112.8928042415 | Program output: 112           
Correct output: -78.0563177466 | Program output: -79           
Correct output: -46.1015479935 | Program output: -46           
Correct output: 138.5168140128 | Program output: 138           
Correct output: 79.3111235509  | Program output: 79            
Correct output: -82.7680920585 | Program output: -82           
Correct output: -84.8984895408 | Program output: -84           
Correct output: -8.218244424   | Program output: -8            
Correct output: 110.7868673413 | Program output: 110           
Correct output: 162.1694424654 | Program output: 162           
Correct output: 109.2204830484 | Program output: 109           
Correct output: -107.8573642026 | Program output: -107          
Correct output: -54.1650214386 | Program output: -55           
Correct output: -106.7372858396 | Program output: -106          
Correct output: 51.23324299    | Program output: 51            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction float_cos} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup})
Best program: (in1 float_inc float_inc float_stackdepth integer_rot float_sub in1 integer_flush -54 float_cos integer_dup_times float_sub integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add integer_fromfloat integer_dup print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan float_dup integer_stackdepth float_dup float_yankdup)
Errors: [0.333 11 0.6327 11 0.1519 11 0.3653 11 0.7486 11 0.0754 11 0.9461 11 0.5813 11 0.5781 11 0.5009 11 0.8928 11 0.9437 12 0.1015 11 0.5168 11 0.3111 11 0.7681 11 0.8985 11 0.2182 10 0.7869 11 0.1694 11 0.2205 11 0.8574 11 0.835 11 0.7373 11 0.2332 9]
Total: 286.4037
Mean: 5.728074
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2185.8679033999992
Median total errors in population: 286.4037
Error averages by case: (79.7117923999991 11.307 74.07483430000072 11.268 76.35616809999877 11.083 74.96455400000026 11.231 76.62233540000061 11.261 79.23519660000106 11.2 77.84443570000067 11.039 75.30656360000052 11.25 76.07223119999915 11.22 76.43680639999926 11.183 73.639024600001 11.371 75.76733630000172 11.984 78.55335049999988 11.191 77.9881189999989 11.191 70.0662334 11.063 82.9877538000008 11.162 79.67105600000002 11.185 75.3713556000013 10.171 73.20041790000059 11.283 78.71785339999923 11.315 72.2717594000007 11.285 78.8768007999992 11.372 75.63176000000048 11.159 84.32956999999888 11.313 63.92159500000093 9.162)
Error minima by case: (0.333 2 0.3673 2 0.1519 2 0.3653 1 0.2514 2 0.0754 2 0.0539 2 0.4187 2 0.4219 2 0.4991 2 0.1072 2 0.0563 10 0.1015 2 0.4832 2 0.3111 2 0.2319 1 0.1015 2 0.2182 2 0.2131 2 0.1694 2 0.2205 2 0.1426 2 0.165 10 0.2627 3 0.2332 1)
Average genome size in population (length): 61.651
Average program size in population (points): 62.651
Average percent parens in population: 0.016
Minimum age in population: 15.015625
Maximum age in population: 19.6328125
Average age in population: 17.5156337890625
Median age in population: 17.55810546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.061
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 19406061
--- Timings ---
Current time: 1529615858587 milliseconds
Total Time:          44.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.3 seconds, 39.3%
Fitness Testing:     21.5 seconds, 48.8%
Report:               5.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 10069.408000000001
Test mean error for best: 5.03470
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0         
Correct output: 102.6327075508 | Program output: 102.0         
Correct output: 74.1519122481  | Program output: 74.0          
Correct output: -56.3652570697 | Program output: -56.0         
Correct output: 128.7486359047 | Program output: 128.0         
Correct output: -39.0753991565 | Program output: -39.0         
Correct output: 63.9461282577  | Program output: 63.0          
Correct output: 106.5813138606 | Program output: 106.0         
Correct output: 119.5781070021 | Program output: 119.0         
Correct output: -61.5008556741 | Program output: -61.0         
Correct output: 112.8928042415 | Program output: 112.0         
Correct output: -78.0563177466 | Program output: -79.0         
Correct output: -46.1015479935 | Program output: -46.0         
Correct output: 138.5168140128 | Program output: 138.0         
Correct output: 79.3111235509  | Program output: 79.0          
Correct output: -82.7680920585 | Program output: -82.0         
Correct output: -84.8984895408 | Program output: -84.0         
Correct output: -8.218244424   | Program output: -8.0          
Correct output: 110.7868673413 | Program output: 110.0         
Correct output: 162.1694424654 | Program output: 162.0         
Correct output: 109.2204830484 | Program output: 109.0         
Correct output: -107.8573642026 | Program output: -107.0        
Correct output: -54.1650214386 | Program output: -55.0         
Correct output: -106.7372858396 | Program output: -106.0        
Correct output: 51.23324299    | Program output: 51.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction float_cos} {:instruction integer_pop} {:instruction tagged_163} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (integer_max integer_pop float_pop float_cos integer_pop tagged_163 integer_dec integer_yankdup print_float float_shove integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 tagged_428 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div print_float tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 10 0.6327 9 0.1519 10 0.3653 9 0.7486 9 0.0754 9 0.9461 10 0.5813 9 0.5781 9 0.5009 9 0.8928 9 0.9437 10 0.1015 9 0.5168 9 0.3111 9 0.7681 9 0.8985 9 0.2182 9 0.7869 10 0.1694 10 0.2205 9 0.8574 9 0.835 10 0.7373 10 0.2332 8]
Total: 245.40370000000007
Mean: 4.908074
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2237.820668899999
Median total errors in population: 286.4037
Error averages by case: (80.14505249999914 11.37 75.89441910000069 11.34 77.10984449999876 11.11 73.07306849999968 11.277 78.49094940000047 11.334 83.33320190000099 11.24 78.79543830000061 11.065 77.0545895000002 11.31 77.62824069999921 11.279 79.09207529999928 11.245 76.44446910000094 11.468 78.6208585000015 12.006 82.47467319999996 11.224 79.56655119999888 11.232 74.67581510000026 11.092 80.41685990000076 11.207 79.12759989999986 11.232 80.56162300000128 10.198 76.16962870000033 11.352 80.52098099999924 11.418 75.41177250000047 11.345 81.7636098999992 11.452 77.59409500000031 11.17 84.51517169999894 11.371 69.79908050000084 9.204)
Error minima by case: (0.333 3 0.3673 3 0.1519 2 0.3653 1 0.2514 3 0.0754 2 0.0539 2 0.4187 3 0.4219 2 0.4991 2 0.1072 3 0.0563 9 0.1015 2 0.4832 3 0.3111 2 0.2319 1 0.1015 2 0.2182 2 0.2131 3 0.1694 2 0.2205 3 0.1426 2 0.165 9 0.2627 3 0.2332 1)
Average genome size in population (length): 62.046
Average program size in population (points): 63.046
Average percent parens in population: 0.016
Minimum age in population: 16.302734375
Maximum age in population: 20.95849609375
Average age in population: 18.98329711914062
Median age in population: 19.0665283203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.066
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 20959936
--- Timings ---
Current time: 1529615861571 milliseconds
Total Time:          47.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.5 seconds, 39.4%
Fitness Testing:     22.9 seconds, 48.7%
Report:               5.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 10069.408000000001
Test mean error for best: 5.03470
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0         
Correct output: 102.6327075508 | Program output: 102.0         
Correct output: 74.1519122481  | Program output: 74.0          
Correct output: -56.3652570697 | Program output: -56.0         
Correct output: 128.7486359047 | Program output: 128.0         
Correct output: -39.0753991565 | Program output: -39.0         
Correct output: 63.9461282577  | Program output: 63.0          
Correct output: 106.5813138606 | Program output: 106.0         
Correct output: 119.5781070021 | Program output: 119.0         
Correct output: -61.5008556741 | Program output: -61.0         
Correct output: 112.8928042415 | Program output: 112.0         
Correct output: -78.0563177466 | Program output: -79.0         
Correct output: -46.1015479935 | Program output: -46.0         
Correct output: 138.5168140128 | Program output: 138.0         
Correct output: 79.3111235509  | Program output: 79.0          
Correct output: -82.7680920585 | Program output: -82.0         
Correct output: -84.8984895408 | Program output: -84.0         
Correct output: -8.218244424   | Program output: -8.0          
Correct output: 110.7868673413 | Program output: 110.0         
Correct output: 162.1694424654 | Program output: 162.0         
Correct output: 109.2204830484 | Program output: 109.0         
Correct output: -107.8573642026 | Program output: -107.0        
Correct output: -54.1650214386 | Program output: -55.0         
Correct output: -106.7372858396 | Program output: -106.0        
Correct output: 51.23324299    | Program output: 51.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction float_cos} {:instruction integer_pop} {:instruction tagged_163} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (integer_max integer_pop float_pop float_cos integer_pop tagged_163 integer_dec integer_yankdup print_float float_shove integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 tagged_428 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div print_float tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 10 0.6327 9 0.1519 10 0.3653 9 0.7486 9 0.0754 9 0.9461 10 0.5813 9 0.5781 9 0.5009 9 0.8928 9 0.9437 10 0.1015 9 0.5168 9 0.3111 9 0.7681 9 0.8985 9 0.2182 9 0.7869 10 0.1694 10 0.2205 9 0.8574 9 0.835 10 0.7373 10 0.2332 8]
Total: 245.40370000000007
Mean: 4.908074
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2243.9614581
Median total errors in population: 286.4037
Error averages by case: (81.19307429999915 11.346 76.50881030000065 11.296 75.30788559999881 11.075 71.19033149999986 11.257 79.26269870000023 11.283 85.05569320000095 11.204 77.5635150000006 11.037 76.44845860000018 11.286 78.3074191999992 11.244 78.56030189999935 11.211 77.20740650000091 11.435 80.0128206000015 11.95 83.36908699999977 11.194 80.50131049999905 11.195 72.24207509999995 11.048 82.93205810000072 11.166 80.59825900000041 11.179 81.61856100000124 10.162 76.93347440000012 11.318 81.62999789999927 11.35 76.23151130000065 11.317 81.93165819999962 11.391 78.62289500000018 11.14 84.07383269999927 11.33 68.06232250000073 9.182)
Error minima by case: (0.333 3 0.3673 3 0.1519 3 0.3653 2 0.2514 3 0.0754 3 0.0539 3 0.4187 3 0.4219 3 0.4991 3 0.1072 3 0.0563 9 0.1015 3 0.4832 3 0.3111 3 0.2319 2 0.1015 3 0.2182 3 0.2131 3 0.1694 2 0.2205 3 0.1426 3 0.165 9 0.2627 4 0.2332 2)
Average genome size in population (length): 61.533
Average program size in population (points): 62.533
Average percent parens in population: 0.016
Minimum age in population: 17.714599609375
Maximum age in population: 22.3519287109375
Average age in population: 20.42594030761719
Median age in population: 20.4434814453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.062
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 22501186
--- Timings ---
Current time: 1529615864714 milliseconds
Total Time:          50.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.7 seconds, 39.3%
Fitness Testing:     24.3 seconds, 48.7%
Report:               5.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 10069.408000000001
Test mean error for best: 5.03470
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0         
Correct output: 102.6327075508 | Program output: 102.0         
Correct output: 74.1519122481  | Program output: 74.0          
Correct output: -56.3652570697 | Program output: -56.0         
Correct output: 128.7486359047 | Program output: 128.0         
Correct output: -39.0753991565 | Program output: -39.0         
Correct output: 63.9461282577  | Program output: 63.0          
Correct output: 106.5813138606 | Program output: 106.0         
Correct output: 119.5781070021 | Program output: 119.0         
Correct output: -61.5008556741 | Program output: -61.0         
Correct output: 112.8928042415 | Program output: 112.0         
Correct output: -78.0563177466 | Program output: -79.0         
Correct output: -46.1015479935 | Program output: -46.0         
Correct output: 138.5168140128 | Program output: 138.0         
Correct output: 79.3111235509  | Program output: 79.0          
Correct output: -82.7680920585 | Program output: -82.0         
Correct output: -84.8984895408 | Program output: -84.0         
Correct output: -8.218244424   | Program output: -8.0          
Correct output: 110.7868673413 | Program output: 110.0         
Correct output: 162.1694424654 | Program output: 162.0         
Correct output: 109.2204830484 | Program output: 109.0         
Correct output: -107.8573642026 | Program output: -107.0        
Correct output: -54.1650214386 | Program output: -55.0         
Correct output: -106.7372858396 | Program output: -106.0        
Correct output: 51.23324299    | Program output: 51.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction float_cos} {:instruction integer_pop} {:instruction tagged_163} {:instruction float_add} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction in2} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_rot})
Best program: (integer_max integer_pop float_pop float_cos integer_pop tagged_163 float_add integer_yankdup print_float float_shove integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 tagged_428 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times in2 float_add integer_mod float_mod float_div print_float tag_float_618 tagged_948 integer_rot)
Errors: [0.333 10 0.6327 9 0.1519 10 0.3653 9 0.7486 9 0.0754 9 0.9461 10 0.5813 9 0.5781 9 0.5009 9 0.8928 9 0.9437 10 0.1015 9 0.5168 9 0.3111 9 0.7681 9 0.8985 9 0.2182 9 0.7869 10 0.1694 10 0.2205 9 0.8574 9 0.835 10 0.7373 10 0.2332 8]
Total: 245.40370000000007
Mean: 4.908074
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1971.2350576
Median total errors in population: 286.4037
Error averages by case: (69.14288929999906 11.273 65.01684580000071 11.216 70.76005049999864 11.025 58.77463079999908 11.149 67.3904837999995 11.198 70.37122410000109 11.107 72.8235270000007 10.984 66.29905379999929 11.195 66.48629799999915 11.144 69.06994569999925 11.11 64.34697110000104 11.331 69.97322620000173 11.886 69.134992699999 11.115 68.6300075999989 11.105 63.1740022999993 10.981 72.65941280000082 11.079 69.87297550000098 11.107 67.32406510000135 10.108 65.02405349999931 11.265 69.41490029999918 11.313 64.29057650000152 11.229 71.94108269999992 11.307 69.26088749999971 11.085 74.47055509999969 11.256 58.890399900000965 9.124)
Error minima by case: (0.27 3 0.3673 3 0.1519 2 0.3353 1 0.2514 3 0.0164 2 0.0539 2 0.4187 3 0.4219 2 0.4991 2 0.1072 3 0.0563 9 0.0575 2 0.4608 3 0.2921 2 0.2319 1 0.1015 2 0.1472 2 0.2131 3 0.0894 2 0.1425 3 0.1426 2 0.165 9 0.2627 3 0.1932 1)
Average genome size in population (length): 62.128
Average program size in population (points): 63.128
Average percent parens in population: 0.016
Minimum age in population: 18.714599609375
Maximum age in population: 24.158203125
Average age in population: 21.90228405761719
Median age in population: 21.9019775390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.059
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 24057386
--- Timings ---
Current time: 1529615867991 milliseconds
Total Time:          53.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.0 seconds, 39.3%
Fitness Testing:     25.9 seconds, 48.5%
Report:               6.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 10069.408000000001
Test mean error for best: 5.03470
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0         
Correct output: 102.6327075508 | Program output: 102.0         
Correct output: 74.1519122481  | Program output: 74.0          
Correct output: -56.3652570697 | Program output: -56.0         
Correct output: 128.7486359047 | Program output: 128.0         
Correct output: -39.0753991565 | Program output: -39.0         
Correct output: 63.9461282577  | Program output: 63.0          
Correct output: 106.5813138606 | Program output: 106.0         
Correct output: 119.5781070021 | Program output: 119.0         
Correct output: -61.5008556741 | Program output: -61.0         
Correct output: 112.8928042415 | Program output: 112.0         
Correct output: -78.0563177466 | Program output: -79.0         
Correct output: -46.1015479935 | Program output: -46.0         
Correct output: 138.5168140128 | Program output: 138.0         
Correct output: 79.3111235509  | Program output: 79.0          
Correct output: -82.7680920585 | Program output: -82.0         
Correct output: -84.8984895408 | Program output: -84.0         
Correct output: -8.218244424   | Program output: -8.0          
Correct output: 110.7868673413 | Program output: 110.0         
Correct output: 162.1694424654 | Program output: 162.0         
Correct output: 109.2204830484 | Program output: 109.0         
Correct output: -107.8573642026 | Program output: -107.0        
Correct output: -54.1650214386 | Program output: -55.0         
Correct output: -106.7372858396 | Program output: -106.0        
Correct output: 51.23324299    | Program output: 51.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_max} {:instruction float_swap} {:instruction integer_dec} {:instruction print_float} {:instruction print_float} {:instruction float_shove} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_min} {:instruction integer_swap} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_add} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction float_inc} {:instruction in1} {:instruction float_yankdup})
Best program: (integer_max integer_pop float_pop integer_flush integer_max float_swap integer_dec print_float print_float float_shove integer_dup integer_sub float_flush float_dup_items integer_swap float_div integer_pop float_dup_items integer_inc integer_min integer_swap float_shove in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth integer_mod integer_add integer_add float_flush float_frominteger integer_swap print_integer integer_mult print_float integer_yank float_mod integer_dup float_dup_times integer_sub float_add integer_mod integer_yank integer_div integer_swap float_tan in2 float_inc in1 float_yankdup)
Errors: [0.333 10 0.6327 9 0.1519 10 0.3653 9 0.7486 9 0.0754 9 0.9461 10 0.5813 9 0.5781 9 0.5009 9 0.8928 9 0.9437 10 0.1015 9 0.5168 9 0.3111 9 0.7681 9 0.8985 9 0.2182 9 0.7869 10 0.1694 10 0.2205 9 0.8574 9 0.835 10 0.7373 10 0.2332 8]
Total: 245.40370000000007
Mean: 4.908074
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2359.1764495
Median total errors in population: 286.4037
Error averages by case: (86.0772119999991 11.182 81.66544470000085 10.936 85.84350119999857 10.894 71.80261679999957 10.855 84.41002710000116 10.92 84.36528490000101 10.836 87.16736600000064 10.869 82.92561330000083 10.898 83.55715389999918 10.857 83.77354699999927 10.848 82.45338510000099 11.056 84.68507540000175 11.666 84.09923110000022 10.829 85.5083340999987 10.823 79.55542200000066 10.698 87.06189260000079 10.784 84.82917099999977 10.803 81.32057830000142 9.991 82.18066980000081 11.146 86.39602239999921 11.187 81.46005890000009 10.947 87.3027391999985 11.018 84.56125370000098 11.027 89.72825789999838 11.18 75.21059110000112 8.986)
Error minima by case: (0.333 3 0.3673 3 0.1519 2 0.3653 1 0.2514 3 0.0754 2 0.0539 2 0.4187 3 0.4219 2 0.4991 2 0.1072 3 0.0563 9 0.1015 2 0.4832 3 0.3111 2 0.2319 1 0.1015 2 0.2182 2 0.2131 3 0.1694 2 0.2205 3 0.1426 2 0.165 9 0.2627 3 0.2332 1)
Average genome size in population (length): 62.362
Average program size in population (points): 63.362
Average percent parens in population: 0.016
Minimum age in population: 21.06207275390625
Maximum age in population: 25.39346313476562
Average age in population: 23.52984634399414
Median age in population: 23.53704833984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.083
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 25619861
--- Timings ---
Current time: 1529615870882 milliseconds
Total Time:          56.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.1 seconds, 39.2%
Fitness Testing:     27.3 seconds, 48.4%
Report:               6.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 10069.408000000001
Test mean error for best: 5.03470
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0         
Correct output: 102.6327075508 | Program output: 102.0         
Correct output: 74.1519122481  | Program output: 74.0          
Correct output: -56.3652570697 | Program output: -56.0         
Correct output: 128.7486359047 | Program output: 128.0         
Correct output: -39.0753991565 | Program output: -39.0         
Correct output: 63.9461282577  | Program output: 63.0          
Correct output: 106.5813138606 | Program output: 106.0         
Correct output: 119.5781070021 | Program output: 119.0         
Correct output: -61.5008556741 | Program output: -61.0         
Correct output: 112.8928042415 | Program output: 112.0         
Correct output: -78.0563177466 | Program output: -79.0         
Correct output: -46.1015479935 | Program output: -46.0         
Correct output: 138.5168140128 | Program output: 138.0         
Correct output: 79.3111235509  | Program output: 79.0          
Correct output: -82.7680920585 | Program output: -82.0         
Correct output: -84.8984895408 | Program output: -84.0         
Correct output: -8.218244424   | Program output: -8.0          
Correct output: 110.7868673413 | Program output: 110.0         
Correct output: 162.1694424654 | Program output: 162.0         
Correct output: 109.2204830484 | Program output: 109.0         
Correct output: -107.8573642026 | Program output: -107.0        
Correct output: -54.1650214386 | Program output: -55.0         
Correct output: -106.7372858396 | Program output: -106.0        
Correct output: 51.23324299    | Program output: 51.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_max} {:instruction float_swap} {:instruction integer_dec} {:instruction print_float} {:instruction print_float} {:instruction float_shove} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction float_dup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (integer_max integer_pop float_pop integer_flush integer_max float_swap integer_dec print_float print_float float_shove integer_dup integer_sub float_flush float_dup_items integer_swap float_div integer_pop float_dup_items integer_inc integer_fromfloat integer_swap float_shove in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 float_dup float_flush float_rot in2 float_stackdepth integer_mod integer_add integer_add integer_fromfloat float_frominteger integer_swap print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div print_float tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 10 0.6327 9 0.1519 10 0.3653 9 0.7486 9 0.0754 9 0.9461 10 0.5813 9 0.5781 9 0.5009 9 0.8928 9 0.9437 10 0.1015 9 0.5168 9 0.3111 9 0.7681 9 0.8985 9 0.2182 9 0.7869 10 0.1694 10 0.2205 9 0.8574 9 0.835 10 0.7373 10 0.2332 8]
Total: 245.40370000000007
Mean: 4.908074
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2372.6720137
Median total errors in population: 245.40370000000007
Error averages by case: (86.05828029999898 10.755 82.72049250000089 10.07 86.14025269999847 10.516 76.58119889999952 9.984 84.74456910000067 10.033 88.73107430000117 9.977 87.83602990000074 10.488 83.94295790000051 10.019 84.06761559999907 9.978 85.04360359999923 10.007 82.80639690000112 10.12 83.5037867000019 10.826 87.90991579999995 9.971 85.74226569999873 9.983 82.49628150000045 9.882 89.4616551000009 9.913 87.24873970000006 9.94 87.14185760000163 9.586 82.5996196000007 10.733 86.01551549999911 10.732 81.79289880000054 10.062 85.82581009999912 10.105 83.00704270000068 10.58 89.81581189999865 10.754 77.8513413000012 8.573)
Error minima by case: (0.27 3 0.3673 3 0.1519 2 0.3353 1 0.2514 3 0.0164 2 0.0539 2 0.4187 3 0.4219 2 0.4991 2 0.1072 3 0.0563 9 0.0575 2 0.4608 3 0.2921 2 0.2319 1 0.1015 2 0.1472 2 0.2131 3 0.0894 2 0.1425 3 0.1426 2 0.165 9 0.2627 3 0.1932 1)
Average genome size in population (length): 63.802
Average program size in population (points): 64.802
Average percent parens in population: 0.016
Minimum age in population: 22.65057373046875
Maximum age in population: 27.20620727539062
Average age in population: 25.17276979064941
Median age in population: 25.22459411621094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.068
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 27219586
--- Timings ---
Current time: 1529615874155 milliseconds
Total Time:          59.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.2 seconds, 39.0%
Fitness Testing:     28.9 seconds, 48.7%
Report:               7.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 10069.408000000001
Test mean error for best: 5.03470
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0         
Correct output: 102.6327075508 | Program output: 102.0         
Correct output: 74.1519122481  | Program output: 74.0          
Correct output: -56.3652570697 | Program output: -56.0         
Correct output: 128.7486359047 | Program output: 128.0         
Correct output: -39.0753991565 | Program output: -39.0         
Correct output: 63.9461282577  | Program output: 63.0          
Correct output: 106.5813138606 | Program output: 106.0         
Correct output: 119.5781070021 | Program output: 119.0         
Correct output: -61.5008556741 | Program output: -61.0         
Correct output: 112.8928042415 | Program output: 112.0         
Correct output: -78.0563177466 | Program output: -79.0         
Correct output: -46.1015479935 | Program output: -46.0         
Correct output: 138.5168140128 | Program output: 138.0         
Correct output: 79.3111235509  | Program output: 79.0          
Correct output: -82.7680920585 | Program output: -82.0         
Correct output: -84.8984895408 | Program output: -84.0         
Correct output: -8.218244424   | Program output: -8.0          
Correct output: 110.7868673413 | Program output: 110.0         
Correct output: 162.1694424654 | Program output: 162.0         
Correct output: 109.2204830484 | Program output: 109.0         
Correct output: -107.8573642026 | Program output: -107.0        
Correct output: -54.1650214386 | Program output: -55.0         
Correct output: -106.7372858396 | Program output: -106.0        
Correct output: 51.23324299    | Program output: 51.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction float_cos} {:instruction integer_pop} {:instruction tagged_163} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_204} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_mult} {:instruction in2} {:instruction integer_stackdepth})
Best program: (integer_max integer_pop float_pop float_cos integer_pop tagged_163 integer_dec integer_yankdup print_float float_shove integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_204 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 tagged_428 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div print_float tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_mult in2 integer_stackdepth)
Errors: [0.333 10 0.6327 9 0.1519 10 0.3653 9 0.7486 9 0.0754 9 0.9461 10 0.5813 9 0.5781 9 0.5009 9 0.8928 9 0.9437 10 0.1015 9 0.5168 9 0.3111 9 0.7681 9 0.8985 9 0.2182 9 0.7869 10 0.1694 10 0.2205 9 0.8574 9 0.835 10 0.7373 10 0.2332 8]
Total: 245.40370000000007
Mean: 4.908074
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2359.202124600001
Median total errors in population: 245.40370000000007
Error averages by case: (85.99858839999905 10.453 83.02064780000067 9.509 85.08197079999866 10.205 69.44458689999942 9.407 84.84409020000047 9.449 89.62437860000114 9.392 87.0464794000007 10.184 83.88832330000042 9.435 84.18099589999917 9.379 84.98922379999924 9.462 83.30251760000097 9.546 84.52179080000164 10.334 88.59437749999968 9.405 85.64256359999904 9.398 82.49160810000042 9.309 88.22599810000084 9.3 86.1143020000003 9.352 88.61946690000146 9.281 83.09395980000038 10.445 86.17606759999917 10.419 82.42917770000044 9.497 86.71920309999949 9.521 85.06248010000034 10.319 88.72792829999925 10.444 79.64139830000101 8.275)
Error minima by case: (0.27 2 0.3673 2 0.1519 2 0.3353 1 0.2514 2 0.0164 2 0.0539 2 0.4187 2 0.4219 2 0.5009 2 0.1072 2 0.0563 9 0.0575 2 0.4608 2 0.2921 2 0.7681 1 0.8985 2 0.1472 2 0.2131 2 0.0894 2 0.1425 2 0.8574 2 0.165 9 0.7373 3 0.1932 1)
Average genome size in population (length): 64.617
Average program size in population (points): 65.617
Average percent parens in population: 0.015
Minimum age in population: 23.72994995117188
Maximum age in population: 28.86032867431641
Average age in population: 26.69028122711182
Median age in population: 26.72380828857422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.057
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 28841286
--- Timings ---
Current time: 1529615877384 milliseconds
Total Time:          62.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.4 seconds, 38.8%
Fitness Testing:     30.5 seconds, 48.7%
Report:               7.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 10069.408000000001
Test mean error for best: 5.03470
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0         
Correct output: 102.6327075508 | Program output: 102.0         
Correct output: 74.1519122481  | Program output: 74.0          
Correct output: -56.3652570697 | Program output: -56.0         
Correct output: 128.7486359047 | Program output: 128.0         
Correct output: -39.0753991565 | Program output: -39.0         
Correct output: 63.9461282577  | Program output: 63.0          
Correct output: 106.5813138606 | Program output: 106.0         
Correct output: 119.5781070021 | Program output: 119.0         
Correct output: -61.5008556741 | Program output: -61.0         
Correct output: 112.8928042415 | Program output: 112.0         
Correct output: -78.0563177466 | Program output: -79.0         
Correct output: -46.1015479935 | Program output: -46.0         
Correct output: 138.5168140128 | Program output: 138.0         
Correct output: 79.3111235509  | Program output: 79.0          
Correct output: -82.7680920585 | Program output: -82.0         
Correct output: -84.8984895408 | Program output: -84.0         
Correct output: -8.218244424   | Program output: -8.0          
Correct output: 110.7868673413 | Program output: 110.0         
Correct output: 162.1694424654 | Program output: 162.0         
Correct output: 109.2204830484 | Program output: 109.0         
Correct output: -107.8573642026 | Program output: -107.0        
Correct output: -54.1650214386 | Program output: -55.0         
Correct output: -106.7372858396 | Program output: -106.0        
Correct output: 51.23324299    | Program output: 51.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction float_cos} {:instruction integer_pop} {:instruction tagged_163} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (integer_max integer_pop float_pop float_cos integer_pop tagged_163 integer_dec integer_yankdup print_float float_shove integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 tagged_428 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div print_float tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 10 0.6327 9 0.1519 10 0.3653 9 0.7486 9 0.0754 9 0.9461 10 0.5813 9 0.5781 9 0.5009 9 0.8928 9 0.9437 10 0.1015 9 0.5168 9 0.3111 9 0.7681 9 0.8985 9 0.2182 9 0.7869 10 0.1694 10 0.2205 9 0.8574 9 0.835 10 0.7373 10 0.2332 8]
Total: 245.40370000000007
Mean: 4.908074
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2207.6877752
Median total errors in population: 245.40370000000007
Error averages by case: (81.15006189999907 10.448 78.3655301000007 9.501 80.32918169999863 10.198 63.486404399999145 9.403 80.0756913000008 9.438 81.2458193000011 9.399 82.00311860000069 10.179 79.28443840000072 9.424 79.45378669999917 9.377 77.57799789999923 9.45 78.52028070000104 9.53 76.6020536000017 10.31 80.47571440000004 9.4 80.85351369999884 9.396 78.08635790000073 9.303 80.1556982000008 9.296 78.56403680000005 9.35 80.0171415000014 9.277 78.3284278000007 10.434 81.19375059999922 10.409 77.63435770000011 9.496 78.90892589999916 9.505 77.44229510000063 10.304 81.14623519999901 10.445 75.24395580000106 8.271)
Error minima by case: (0.333 3 0.3673 3 0.1519 2 0.3653 1 0.2514 3 0.0754 2 0.0539 2 0.4187 3 0.4219 2 0.4991 2 0.1072 3 0.0563 9 0.1015 2 0.4832 3 0.3111 2 0.2319 1 0.1015 2 0.2182 2 0.2131 3 0.1694 2 0.2205 3 0.1426 2 0.165 9 0.2627 3 0.2332 1)
Average genome size in population (length): 64.665
Average program size in population (points): 65.665
Average percent parens in population: 0.015
Minimum age in population: 25.12054443359375
Maximum age in population: 30.34951400756836
Average age in population: 28.17452188491821
Median age in population: 28.16684532165527
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.051
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 30464811
--- Timings ---
Current time: 1529615880559 milliseconds
Total Time:          65.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.6 seconds, 38.9%
Fitness Testing:     32.0 seconds, 48.6%
Report:               8.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 9854.408000000005
Test mean error for best: 4.92720
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.00        
Correct output: 102.6327075508 | Program output: 102.00        
Correct output: 74.1519122481  | Program output: 74.00         
Correct output: -56.3652570697 | Program output: -56.00        
Correct output: 128.7486359047 | Program output: 128.00        
Correct output: -39.0753991565 | Program output: -39.00        
Correct output: 63.9461282577  | Program output: 63.00         
Correct output: 106.5813138606 | Program output: 106.00        
Correct output: 119.5781070021 | Program output: 119.00        
Correct output: -61.5008556741 | Program output: -61.00        
Correct output: 112.8928042415 | Program output: 112.00        
Correct output: -78.0563177466 | Program output: -79.00        
Correct output: -46.1015479935 | Program output: -46.00        
Correct output: 138.5168140128 | Program output: 138.00        
Correct output: 79.3111235509  | Program output: 79.00         
Correct output: -82.7680920585 | Program output: -82.00        
Correct output: -84.8984895408 | Program output: -84.00        
Correct output: -8.218244424   | Program output: -8.00         
Correct output: 110.7868673413 | Program output: 110.00        
Correct output: 162.1694424654 | Program output: 162.00        
Correct output: 109.2204830484 | Program output: 109.00        
Correct output: -107.8573642026 | Program output: -107.00       
Correct output: -54.1650214386 | Program output: -55.00        
Correct output: -106.7372858396 | Program output: -106.00       
Correct output: 51.23324299    | Program output: 51.00         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dup_items} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction integer_pop} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (in1 float_dup_items integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove float_min float_shove print_integer integer_pop tag_integer_848 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float float_stackdepth float_sub integer_add integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 10 0.6327 8 0.1519 10 0.3653 9 0.7486 9 0.0754 9 0.9461 10 0.5813 9 0.5781 8 0.5009 8 0.8928 9 0.9437 10 0.1015 9 0.5168 9 0.3111 9 0.7681 8 0.8985 9 0.2182 9 0.7869 10 0.1694 10 0.2205 8 0.8574 9 0.835 10 0.7373 10 0.2332 8]
Total: 240.40370000000007
Mean: 4.808074
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2319.2957534999996
Median total errors in population: 245.40370000000007
Error averages by case: (84.41793859999923 10.432 81.71161200000081 9.502 83.51219279999867 10.218 73.49641079999972 9.407 83.33116780000076 9.445 87.67868380000104 9.416 85.33712210000054 10.186 83.40891800000031 9.443 82.70986209999933 9.382 81.69188619999927 9.444 81.97562610000085 9.534 82.60331020000179 10.36 87.74496600000013 9.409 84.13459859999872 9.414 82.19241520000065 9.309 84.82603650000065 9.317 82.59352090000017 9.375 86.52397770000144 9.284 81.77487830000045 10.427 84.40810879999938 10.4 81.14093300000033 9.486 83.58090459999926 9.52 82.01124960000043 10.349 85.2001243999991 10.449 79.50130940000118 8.28)
Error minima by case: (0.333 3 0.3673 3 0.1519 2 0.3653 1 0.2514 3 0.0754 2 0.0539 2 0.4187 3 0.4219 2 0.4991 2 0.1072 3 0.0563 9 0.1015 2 0.4832 3 0.3111 2 0.2319 1 0.1015 2 0.2182 2 0.2131 3 0.1694 2 0.2205 3 0.1426 2 0.165 9 0.2627 3 0.2332 1)
Average genome size in population (length): 64.459
Average program size in population (points): 65.459
Average percent parens in population: 0.015
Minimum age in population: 27.05072021484375
Maximum age in population: 31.54378128051758
Average age in population: 29.64913984298706
Median age in population: 29.71988296508789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.064
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 32084261
--- Timings ---
Current time: 1529615883828 milliseconds
Total Time:          69.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.7 seconds, 38.7%
Fitness Testing:     33.7 seconds, 48.8%
Report:               8.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 9854.408000000005
Test mean error for best: 4.92720
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.00        
Correct output: 102.6327075508 | Program output: 102.00        
Correct output: 74.1519122481  | Program output: 74.00         
Correct output: -56.3652570697 | Program output: -56.00        
Correct output: 128.7486359047 | Program output: 128.00        
Correct output: -39.0753991565 | Program output: -39.00        
Correct output: 63.9461282577  | Program output: 63.00         
Correct output: 106.5813138606 | Program output: 106.00        
Correct output: 119.5781070021 | Program output: 119.00        
Correct output: -61.5008556741 | Program output: -61.00        
Correct output: 112.8928042415 | Program output: 112.00        
Correct output: -78.0563177466 | Program output: -79.00        
Correct output: -46.1015479935 | Program output: -46.00        
Correct output: 138.5168140128 | Program output: 138.00        
Correct output: 79.3111235509  | Program output: 79.00         
Correct output: -82.7680920585 | Program output: -82.00        
Correct output: -84.8984895408 | Program output: -84.00        
Correct output: -8.218244424   | Program output: -8.00         
Correct output: 110.7868673413 | Program output: 110.00        
Correct output: 162.1694424654 | Program output: 162.00        
Correct output: 109.2204830484 | Program output: 109.00        
Correct output: -107.8573642026 | Program output: -107.00       
Correct output: -54.1650214386 | Program output: -55.00        
Correct output: -106.7372858396 | Program output: -106.00       
Correct output: 51.23324299    | Program output: 51.00         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dup_items} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction integer_pop} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (in1 float_dup_items integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove float_min float_shove print_integer integer_pop tag_integer_848 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float float_stackdepth float_sub integer_add integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.333 10 0.6327 8 0.1519 10 0.3653 9 0.7486 9 0.0754 9 0.9461 10 0.5813 9 0.5781 8 0.5009 8 0.8928 9 0.9437 10 0.1015 9 0.5168 9 0.3111 9 0.7681 8 0.8985 9 0.2182 9 0.7869 10 0.1694 10 0.2205 8 0.8574 9 0.835 10 0.7373 10 0.2332 8]
Total: 240.40370000000007
Mean: 4.808074
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2197.8404603999993
Median total errors in population: 245.40370000000007
Error averages by case: (79.98868739999912 10.4 77.39486110000085 9.451 78.36327059999859 10.206 66.93078819999904 9.372 78.97808710000018 9.416 80.80856070000107 9.392 79.79721090000065 10.18 78.61673369999991 9.398 78.3633519999992 9.352 77.39118769999924 9.417 78.54867380000098 9.476 77.58343510000178 10.328 80.2368679999993 9.401 79.69460329999878 9.383 77.4276899000002 9.307 79.51846900000079 9.307 78.7810128000007 9.343 80.03829430000152 9.265 78.36535180000011 10.39 80.39829999999924 10.364 77.78046190000082 9.439 79.29619009999985 9.485 76.83287609999998 10.323 80.21030409999969 10.418 75.42519080000123 8.257)
Error minima by case: (0.333 3 0.3673 3 0.1519 2 0.3653 1 0.2514 3 0.0754 2 0.0539 2 0.4187 3 0.4219 2 0.4991 2 0.1072 3 0.0563 9 0.1015 2 0.4832 3 0.3111 2 0.2319 1 0.1015 2 0.2182 2 0.2131 3 0.1694 2 0.2205 3 0.1426 2 0.165 9 0.2627 3 0.2332 1)
Average genome size in population (length): 64.188
Average program size in population (points): 65.188
Average percent parens in population: 0.016
Minimum age in population: 28.05072021484375
Maximum age in population: 33.06330680847168
Average age in population: 31.11838017940521
Median age in population: 31.18395090103149
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.063
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 33697436
--- Timings ---
Current time: 1529615886961 milliseconds
Total Time:          72.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.9 seconds, 38.6%
Fitness Testing:     35.3 seconds, 48.8%
Report:               9.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 9854.408000000005
Test mean error for best: 4.92720
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.00        
Correct output: 102.6327075508 | Program output: 102.00        
Correct output: 74.1519122481  | Program output: 74.00         
Correct output: -56.3652570697 | Program output: -56.00        
Correct output: 128.7486359047 | Program output: 128.00        
Correct output: -39.0753991565 | Program output: -39.00        
Correct output: 63.9461282577  | Program output: 63.00         
Correct output: 106.5813138606 | Program output: 106.00        
Correct output: 119.5781070021 | Program output: 119.00        
Correct output: -61.5008556741 | Program output: -61.00        
Correct output: 112.8928042415 | Program output: 112.00        
Correct output: -78.0563177466 | Program output: -79.00        
Correct output: -46.1015479935 | Program output: -46.00        
Correct output: 138.5168140128 | Program output: 138.00        
Correct output: 79.3111235509  | Program output: 79.00         
Correct output: -82.7680920585 | Program output: -82.00        
Correct output: -84.8984895408 | Program output: -84.00        
Correct output: -8.218244424   | Program output: -8.00         
Correct output: 110.7868673413 | Program output: 110.00        
Correct output: 162.1694424654 | Program output: 162.00        
Correct output: 109.2204830484 | Program output: 109.00        
Correct output: -107.8573642026 | Program output: -107.00       
Correct output: -54.1650214386 | Program output: -55.00        
Correct output: -106.7372858396 | Program output: -106.00       
Correct output: 51.23324299    | Program output: 51.00         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dup_items} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_pop} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction float_yankdup})
Best program: (in1 float_dup_items integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove float_min integer_pop print_integer integer_pop tag_integer_848 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float float_stackdepth float_sub integer_add integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush float_yankdup)
Errors: [0.333 10 0.6327 8 0.1519 10 0.3653 9 0.7486 9 0.0754 9 0.9461 10 0.5813 9 0.5781 8 0.5009 8 0.8928 9 0.9437 10 0.1015 9 0.5168 9 0.3111 9 0.7681 8 0.8985 9 0.2182 9 0.7869 10 0.1694 10 0.2205 8 0.8574 9 0.835 10 0.7373 10 0.2332 8]
Total: 240.40370000000007
Mean: 4.808074
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2570.4248267000003
Median total errors in population: 245.40370000000007
Error averages by case: (94.66162269999909 10.451 91.30051240000074 9.446 94.93286349999863 10.201 76.24912459999993 9.388 94.26557290000098 9.456 97.14379810000102 9.4 95.73496270000066 10.191 93.2335355000008 9.427 93.57082859999917 9.326 93.5740680999993 9.402 92.56964490000098 9.552 93.31339770000174 10.347 95.3159456000001 9.413 95.1383480999989 9.418 90.66846390000089 9.318 97.15528990000081 9.242 94.74686019999983 9.359 94.74121680000148 9.282 91.45006090000095 10.429 95.70327309999924 10.411 91.66657049999992 9.448 95.61654769999892 9.525 91.84969880000084 10.346 97.08514799999864 10.454 87.24047150000105 8.265)
Error minima by case: (0.27 3 0.3673 3 0.1519 2 0.3353 1 0.2514 3 0.0164 2 0.0539 2 0.4187 3 0.4219 2 0.4991 2 0.1072 3 0.0563 9 0.0575 2 0.4608 3 0.2921 2 0.2319 1 0.1015 2 0.1472 2 0.2131 3 0.0894 2 0.1425 3 0.1426 2 0.165 9 0.2627 3 0.1932 1)
Average genome size in population (length): 63.772
Average program size in population (points): 64.772
Average percent parens in population: 0.016
Minimum age in population: 29.97560119628906
Maximum age in population: 34.5727424621582
Average age in population: 32.63424846553802
Median age in population: 32.69345879554749
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.065
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 35299336
--- Timings ---
Current time: 1529615890044 milliseconds
Total Time:          75.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.2 seconds, 38.6%
Fitness Testing:     36.8 seconds, 48.7%
Report:               9.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 9567.784000000005
Test mean error for best: 4.78389
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.01        
Correct output: 102.6327075508 | Program output: 102.01        
Correct output: 74.1519122481  | Program output: 74.01         
Correct output: -56.3652570697 | Program output: -56.01        
Correct output: 128.7486359047 | Program output: 128.01        
Correct output: -39.0753991565 | Program output: -39.01        
Correct output: 63.9461282577  | Program output: 63.01         
Correct output: 106.5813138606 | Program output: 106.01        
Correct output: 119.5781070021 | Program output: 119.01        
Correct output: -61.5008556741 | Program output: -61.01        
Correct output: 112.8928042415 | Program output: 112.01        
Correct output: -78.0563177466 | Program output: -79.01        
Correct output: -46.1015479935 | Program output: -46.01        
Correct output: 138.5168140128 | Program output: 138.01        
Correct output: 79.3111235509  | Program output: 79.01         
Correct output: -82.7680920585 | Program output: -82.01        
Correct output: -84.8984895408 | Program output: -84.01        
Correct output: -8.218244424   | Program output: -8.01         
Correct output: 110.7868673413 | Program output: 110.01        
Correct output: 162.1694424654 | Program output: 162.01        
Correct output: 109.2204830484 | Program output: 109.01        
Correct output: -107.8573642026 | Program output: -107.01       
Correct output: -54.1650214386 | Program output: -55.01        
Correct output: -106.7372858396 | Program output: -106.01       
Correct output: 51.23324299    | Program output: 51.01         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_pop} {:instruction float_pop} {:instruction float_cos} {:instruction integer_pop} {:instruction tagged_163} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_mod} {:instruction float_sub} {:instruction float_max} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction print_float})
Best program: (integer_max integer_pop float_pop float_cos integer_pop tagged_163 integer_dec integer_yankdup print_float float_shove integer_yankdup integer_dup_times integer_max integer_mod float_sub float_max tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 tagged_428 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_sub integer_add integer_add float_tan integer_swap print_integer integer_sub float_mod float_div print_float tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 print_integer integer_mult integer_pop integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div print_float)
Errors: [0.323 9 0.6227 9 0.1419 9 0.3553 9 0.7386 9 0.0654 8 0.9361 9 0.5713 9 0.5681 8 0.4909 8 0.8828 8 0.9537 9 0.0915 8 0.5068 8 0.3011 9 0.7581 9 0.8885 9 0.2082 8 0.7769 9 0.1594 10 0.2105 9 0.8474 9 0.845 9 0.7273 10 0.2232 8]
Total: 232.1937
Mean: 4.643874
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2724.9315686
Median total errors in population: 245.40370000000007
Error averages by case: (101.33202549999908 10.419 97.74115960000094 9.169 101.9863242999985 10.202 86.01634340000034 9.397 100.70761470000156 9.448 102.13281680000108 9.407 101.8089432000007 10.171 100.29320030000126 9.446 99.89790889999914 9.059 100.70167129999928 9.129 99.59868550000103 9.538 99.2338484000019 10.387 99.9224929000007 9.413 102.3096964999987 9.43 94.87497540000136 9.3 103.61549230000085 8.973 100.16355819999934 9.364 98.88466050000153 9.296 98.10873700000157 10.415 101.99690949999919 10.41 98.59688279999946 9.151 102.72541889999817 9.533 97.8175248000013 10.386 103.66079739999789 10.435 90.64288050000118 8.283)
Error minima by case: (0.27 3 0.3673 3 0.1419 2 0.3353 1 0.2514 3 0.0164 2 0.0539 2 0.4187 3 0.4219 2 0.4909 2 0.1072 3 0.0563 7 0.0575 2 0.4608 3 0.2921 2 0.2319 1 0.1015 2 0.1472 2 0.2131 3 0.0894 2 0.1425 3 0.1426 2 0.165 9 0.2627 3 0.1932 1)
Average genome size in population (length): 62.567
Average program size in population (points): 63.567
Average percent parens in population: 0.016
Minimum age in population: 31.21643447875977
Maximum age in population: 36.11106944084167
Average age in population: 34.21142243742943
Median age in population: 34.2470942735672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.083
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 36869218
--- Timings ---
Current time: 1529615893163 milliseconds
Total Time:          78.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.3 seconds, 38.6%
Fitness Testing:     38.3 seconds, 48.8%
Report:               9.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 9400.937000000009
Test mean error for best: 4.70047
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.001       
Correct output: 102.6327075508 | Program output: 102.001       
Correct output: 74.1519122481  | Program output: 74.001        
Correct output: -56.3652570697 | Program output: -56.001       
Correct output: 128.7486359047 | Program output: 128.001       
Correct output: -39.0753991565 | Program output: -39.001       
Correct output: 63.9461282577  | Program output: 63.001        
Correct output: 106.5813138606 | Program output: 106.001       
Correct output: 119.5781070021 | Program output: 119.001       
Correct output: -61.5008556741 | Program output: -61.001       
Correct output: 112.8928042415 | Program output: 112.001       
Correct output: -78.0563177466 | Program output: -79.001       
Correct output: -46.1015479935 | Program output: -46.001       
Correct output: 138.5168140128 | Program output: 138.001       
Correct output: 79.3111235509  | Program output: 79.001        
Correct output: -82.7680920585 | Program output: -82.001       
Correct output: -84.8984895408 | Program output: -84.001       
Correct output: -8.218244424   | Program output: -8.001        
Correct output: 110.7868673413 | Program output: 110.001       
Correct output: 162.1694424654 | Program output: 162.001       
Correct output: 109.2204830484 | Program output: 109.001       
Correct output: -107.8573642026 | Program output: -107.001      
Correct output: -54.1650214386 | Program output: -55.001       
Correct output: -106.7372858396 | Program output: -106.001      
Correct output: 51.23324299    | Program output: 51.001        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dup_items} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction integer_pop} {:instruction tag_integer_848} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction print_float})
Best program: (in1 float_dup_items integer_mod float_sub float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove float_min float_shove print_integer integer_pop tag_integer_848 float_max integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float float_stackdepth float_sub integer_add integer_mod float_mod float_sub integer_add integer_add float_tan integer_swap print_integer integer_sub float_mod float_div print_float tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 print_integer integer_mult integer_pop integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div print_float)
Errors: [0.332 9 0.6317 8 0.1509 9 0.3643 9 0.7476 9 0.0744 8 0.9451 9 0.5803 9 0.5771 7 0.4999 7 0.8918 8 0.9447 9 0.1005 8 0.5158 8 0.3101 9 0.7671 8 0.8975 9 0.2172 9 0.7859 9 0.1684 10 0.2195 8 0.8564 9 0.836 9 0.7363 10 0.2322 8]
Total: 228.38270000000003
Mean: 4.567654
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2624.820594
Median total errors in population: 240.40370000000007
Error averages by case: (98.70875609999914 10.42 95.0972834000009 8.725 96.89798739999857 10.206 77.2062810999999 9.365 99.57654910000139 9.438 98.370818100001 9.378 97.0785091000006 10.206 99.12583770000101 9.425 99.16920869999922 8.575 93.24105959999926 8.692 97.64754490000098 9.527 95.57892420000181 10.304 95.15307320000034 9.381 100.30861099999873 9.384 93.15876590000113 9.311 97.68499240000075 8.53 93.34970299999975 9.337 93.2872661000015 9.306 94.53772150000113 10.397 100.35691109999924 10.427 97.5473702999997 8.698 97.30405749999868 9.509 90.10764840000097 10.297 98.22770939999842 10.433 88.49000480000116 8.337)
Error minima by case: (0.323 4 0.3673 3 0.1419 3 0.3553 2 0.2514 4 0.0654 3 0.0539 3 0.4187 3 0.4219 3 0.4909 3 0.1072 4 0.0563 9 0.0915 3 0.4832 4 0.3011 3 0.7581 2 0.8885 3 0.2082 3 0.2131 3 0.1594 3 0.2105 3 0.8474 3 0.165 9 0.7273 4 0.2232 2)
Average genome size in population (length): 60.486
Average program size in population (points): 61.486
Average percent parens in population: 0.017
Minimum age in population: 33.65000081062317
Maximum age in population: 37.60262560844421
Average age in population: 35.78194458019733
Median age in population: 35.79523092508316
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.095
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 38382993
--- Timings ---
Current time: 1529615896264 milliseconds
Total Time:          81.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.5 seconds, 38.6%
Fitness Testing:     39.7 seconds, 48.7%
Report:              10.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 9400.937000000009
Test mean error for best: 4.70047
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.001       
Correct output: 102.6327075508 | Program output: 102.001       
Correct output: 74.1519122481  | Program output: 74.001        
Correct output: -56.3652570697 | Program output: -56.001       
Correct output: 128.7486359047 | Program output: 128.001       
Correct output: -39.0753991565 | Program output: -39.001       
Correct output: 63.9461282577  | Program output: 63.001        
Correct output: 106.5813138606 | Program output: 106.001       
Correct output: 119.5781070021 | Program output: 119.001       
Correct output: -61.5008556741 | Program output: -61.001       
Correct output: 112.8928042415 | Program output: 112.001       
Correct output: -78.0563177466 | Program output: -79.001       
Correct output: -46.1015479935 | Program output: -46.001       
Correct output: 138.5168140128 | Program output: 138.001       
Correct output: 79.3111235509  | Program output: 79.001        
Correct output: -82.7680920585 | Program output: -82.001       
Correct output: -84.8984895408 | Program output: -84.001       
Correct output: -8.218244424   | Program output: -8.001        
Correct output: 110.7868673413 | Program output: 110.001       
Correct output: 162.1694424654 | Program output: 162.001       
Correct output: 109.2204830484 | Program output: 109.001       
Correct output: -107.8573642026 | Program output: -107.001      
Correct output: -54.1650214386 | Program output: -55.001       
Correct output: -106.7372858396 | Program output: -106.001      
Correct output: 51.23324299    | Program output: 51.001        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -54} {:instruction float_shove} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction integer_pop} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_div} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (-54 float_shove float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove float_min float_shove print_integer integer_pop tag_integer_848 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float float_stackdepth float_sub integer_add integer_stackdepth float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap float_tan float_stackdepth float_sub integer_add integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_div float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.332 9 0.6317 8 0.1509 9 0.3643 9 0.7476 9 0.0744 8 0.9451 9 0.5803 9 0.5771 7 0.4999 7 0.8918 8 0.9447 9 0.1005 8 0.5158 8 0.3101 9 0.7671 8 0.8975 9 0.2172 9 0.7859 9 0.1684 10 0.2195 8 0.8564 9 0.836 9 0.7363 10 0.2322 8]
Total: 228.38270000000003
Mean: 4.567654
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2900.8104423999994
Median total errors in population: 240.40370000000007
Error averages by case: (107.50195289999922 10.391 103.99421170000087 8.667 109.51462389999868 10.127 90.02732410000013 9.375 107.68565960000166 9.426 109.47818570000096 9.324 109.96417130000059 10.134 106.45746630000123 9.435 107.74465869999929 8.422 108.48417489999933 8.568 106.25298190000092 9.513 109.44125740000169 10.323 105.50182960000062 9.316 108.81381309999874 9.338 100.35960850000127 9.262 111.7758048000007 8.432 109.99336579999928 9.328 104.66600430000139 9.28 103.59644680000123 10.361 109.27975219999932 10.406 104.37552349999964 8.638 114.01474209999807 9.518 105.18844500000121 10.31 113.68741239999801 10.431 96.32802590000104 8.358)
Error minima by case: (0.313 3 0.3673 3 0.1319 2 0.3453 1 0.2514 3 0.0554 2 0.0539 2 0.4187 3 0.4219 2 0.4809 2 0.1072 3 0.0463 8 0.0815 2 0.4832 3 0.2911 2 0.7481 1 0.8785 2 0.1982 2 0.2131 3 0.1494 2 0.2005 3 0.8374 2 0.155 8 0.7173 3 0.2132 1)
Average genome size in population (length): 61.022
Average program size in population (points): 62.022
Average percent parens in population: 0.016
Minimum age in population: 34.65000081062317
Maximum age in population: 39.28548246622086
Average age in population: 37.27357186388969
Median age in population: 37.35993614792824
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.108
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 39909618
--- Timings ---
Current time: 1529615899652 milliseconds
Total Time:          84.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.7 seconds, 38.6%
Fitness Testing:     41.3 seconds, 48.7%
Report:              10.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 9207.028799999991
Test mean error for best: 4.60351
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.086       
Correct output: 102.6327075508 | Program output: 102.086       
Correct output: 74.1519122481  | Program output: 74.086        
Correct output: -56.3652570697 | Program output: -56.086       
Correct output: 128.7486359047 | Program output: 128.086       
Correct output: -39.0753991565 | Program output: -39.086       
Correct output: 63.9461282577  | Program output: 63.086        
Correct output: 106.5813138606 | Program output: 106.086       
Correct output: 119.5781070021 | Program output: 119.086       
Correct output: -61.5008556741 | Program output: -61.086       
Correct output: 112.8928042415 | Program output: 112.086       
Correct output: -78.0563177466 | Program output: -79.086       
Correct output: -46.1015479935 | Program output: -46.086       
Correct output: 138.5168140128 | Program output: 138.086       
Correct output: 79.3111235509  | Program output: 79.086        
Correct output: -82.7680920585 | Program output: -82.086       
Correct output: -84.8984895408 | Program output: -84.086       
Correct output: -8.218244424   | Program output: -8.086        
Correct output: 110.7868673413 | Program output: 110.086       
Correct output: 162.1694424654 | Program output: 162.086       
Correct output: 109.2204830484 | Program output: 109.086       
Correct output: -107.8573642026 | Program output: -107.086      
Correct output: -54.1650214386 | Program output: -55.086       
Correct output: -106.7372858396 | Program output: -106.086      
Correct output: 51.23324299    | Program output: 51.086        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_rot} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot float_pop integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_rot 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_add integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.247 9 0.5467 9 0.0659 9 0.2793 9 0.6626 8 0.0106 8 0.8601 9 0.4953 8 0.4921 9 0.4149 7 0.8068 9 1.0297 9 0.0155 9 0.4308 9 0.2251 10 0.6821 8 0.8125 9 0.1322 8 0.7009 8 0.0834 9 0.1345 8 0.7714 8 0.921 8 0.6513 8 0.1472 8]
Total: 224.6189
Mean: 4.492378
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2910.929270399999
Median total errors in population: 240.40370000000007
Error averages by case: (109.99379759999923 10.265 105.79182600000091 8.792 108.57135539999886 10.075 92.70090180000079 9.414 109.02974620000148 9.467 110.4582681000011 9.257 108.06486890000073 10.083 108.80682680000136 9.455 109.29457289999927 8.33 106.86631739999946 8.593 108.14327670000104 9.421 107.65125100000121 10.216 106.25130240000067 9.24 110.17252149999909 9.278 101.78743510000135 9.315 110.73463160000085 8.582 107.58142449999932 9.377 105.53175270000102 9.223 103.9324478000014 10.282 111.07485639999932 10.442 106.78512909999944 8.746 111.42582689999821 9.538 104.0995390000015 10.184 113.17219779999812 10.437 96.61619680000054 8.379)
Error minima by case: (0.247 4 0.3673 4 0.0659 3 0.2793 2 0.2514 4 0.0106 3 0.0539 3 0.4187 3 0.4219 3 0.4149 3 0.1072 4 0.0463 8 0.0155 3 0.4308 3 0.2251 3 0.6821 2 0.8125 3 0.1322 3 0.2131 4 0.0834 3 0.1345 3 0.7714 3 0.155 8 0.6513 4 0.1472 2)
Average genome size in population (length): 63.899
Average program size in population (points): 64.899
Average percent parens in population: 0.016
Minimum age in population: 35.65000081062317
Maximum age in population: 40.90314424037933
Average age in population: 38.7582258156836
Median age in population: 38.7943948507309
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.124
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 41509368
--- Timings ---
Current time: 1529615902906 milliseconds
Total Time:          88.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.0 seconds, 38.5%
Fitness Testing:     42.9 seconds, 48.6%
Report:              11.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 9137.028799999993
Test mean error for best: 4.56851
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0860
     
Correct output: 102.6327075508 | Program output: 102.0860
     
Correct output: 74.1519122481  | Program output: 74.0860
      
Correct output: -56.3652570697 | Program output: -56.0860
     
Correct output: 128.7486359047 | Program output: 128.0860
     
Correct output: -39.0753991565 | Program output: -39.0860
     
Correct output: 63.9461282577  | Program output: 63.0860
      
Correct output: 106.5813138606 | Program output: 106.0860
     
Correct output: 119.5781070021 | Program output: 119.0860
     
Correct output: -61.5008556741 | Program output: -61.0860
     
Correct output: 112.8928042415 | Program output: 112.0860
     
Correct output: -78.0563177466 | Program output: -79.0860
     
Correct output: -46.1015479935 | Program output: -46.0860
     
Correct output: 138.5168140128 | Program output: 138.0860
     
Correct output: 79.3111235509  | Program output: 79.0860
      
Correct output: -82.7680920585 | Program output: -82.0860
     
Correct output: -84.8984895408 | Program output: -84.0860
     
Correct output: -8.218244424   | Program output: -8.0860
      
Correct output: 110.7868673413 | Program output: 110.0860
     
Correct output: 162.1694424654 | Program output: 162.0860
     
Correct output: 109.2204830484 | Program output: 109.0860
     
Correct output: -107.8573642026 | Program output: -107.0860
    
Correct output: -54.1650214386 | Program output: -55.0860
     
Correct output: -106.7372858396 | Program output: -106.0860
    
Correct output: 51.23324299    | Program output: 51.0860
      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction print_newline} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_add integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_sub integer_add integer_add float_tan integer_mult print_integer integer_mult integer_yank integer_yank float_flush integer_min integer_swap print_newline in2 integer_stackdepth in1 float_yankdup)
Errors: [0.247 9 0.5467 8 0.0659 10 0.2793 9 0.6626 7 0.0106 9 0.8601 9 0.4953 7 0.4921 8 0.4149 7 0.8068 9 1.0297 9 0.0155 9 0.4308 8 0.2251 9 0.6821 8 0.8125 8 0.1322 8 0.7009 8 0.0834 9 0.1345 7 0.7714 8 0.921 10 0.6513 9 0.1472 8]
Total: 221.6189
Mean: 4.432378
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2989.0128554000007
Median total errors in population: 239.40370000000007
Error averages by case: (108.39981409999965 9.826 104.79939270000108 8.969 115.64119519999964 9.69 91.70394310000019 9.392 114.81022750000028 9.39 114.27465060000102 8.878 109.09865020000068 9.714 114.49913940000063 9.403 114.96493849999969 8.092 115.55536589999991 8.431 112.74858510000105 8.966 115.99516129999984 9.83 105.6659961999999 8.888 115.90440939999985 8.874 101.07448880000007 9.305 118.5533425000009 8.778 111.00366050000014 9.348 101.78206779999994 8.953 104.4206910000002 9.843 115.41112029999972 10.379 112.57811030000023 8.935 119.80303749999884 9.482 107.69666620000099 9.792 115.60375519999874 10.38 95.1524460999996 8.334)
Error minima by case: (0.247 4 0.3673 4 0.0659 3 0.2793 2 0.2614 4 0.0106 3 0.0639 3 0.4287 4 0.4319 3 0.4149 3 0.1172 4 0.0363 8 0.0155 3 0.4308 4 0.2251 3 0.6821 2 0.8125 3 0.1322 3 0.2231 4 0.0834 3 0.1345 4 0.7714 3 0.145 8 0.6513 4 0.1472 2)
Average genome size in population (length): 68.519
Average program size in population (points): 69.519
Average percent parens in population: 0.015
Minimum age in population: 37.02895545959473
Maximum age in population: 42.21763148903847
Average age in population: 40.24819987493753
Median age in population: 40.28230725973845
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.15
Error (vector) diversity:			 0.155
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 43224918
--- Timings ---
Current time: 1529615906247 milliseconds
Total Time:          91.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.2 seconds, 38.4%
Fitness Testing:     44.6 seconds, 48.7%
Report:              11.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 8937.994200000008
Test mean error for best: 4.46900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0861      
Correct output: 102.6327075508 | Program output: 102.0861      
Correct output: 74.1519122481  | Program output: 74.0861       
Correct output: -56.3652570697 | Program output: -56.0861      
Correct output: 128.7486359047 | Program output: 128.0861      
Correct output: -39.0753991565 | Program output: -39.0861      
Correct output: 63.9461282577  | Program output: 63.0861       
Correct output: 106.5813138606 | Program output: 106.0861      
Correct output: 119.5781070021 | Program output: 119.0861      
Correct output: -61.5008556741 | Program output: -61.0861      
Correct output: 112.8928042415 | Program output: 112.0861      
Correct output: -78.0563177466 | Program output: -79.0861      
Correct output: -46.1015479935 | Program output: -46.0861      
Correct output: 138.5168140128 | Program output: 138.0861      
Correct output: 79.3111235509  | Program output: 79.0861       
Correct output: -82.7680920585 | Program output: -82.0861      
Correct output: -84.8984895408 | Program output: -84.0861      
Correct output: -8.218244424   | Program output: -8.0861       
Correct output: 110.7868673413 | Program output: 110.0861      
Correct output: 162.1694424654 | Program output: 162.0861      
Correct output: 109.2204830484 | Program output: 109.0861      
Correct output: -107.8573642026 | Program output: -107.0861     
Correct output: -54.1650214386 | Program output: -55.0861      
Correct output: -106.7372858396 | Program output: -106.0861     
Correct output: 51.23324299    | Program output: 51.0861       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction tag_integer_327} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_div} {:instruction print_float})
Best program: (in1 float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_add integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max tag_integer_327 integer_yank integer_div integer_swap float_tan in2 integer_stackdepth in1 print_integer integer_mult integer_pop integer_yank float_flush integer_dup float_dup_times integer_sub float_add integer_mod float_mod float_div print_float)
Errors: [0.2469 8 0.5466 9 0.0658 9 0.2792 9 0.6625 8 0.0107 8 0.86 8 0.4952 8 0.492 8 0.4148 6 0.8067 8 1.0298 8 0.0154 9 0.4307 8 0.225 9 0.682 9 0.8124 9 0.1321 8 0.7008 7 0.0833 9 0.1344 8 0.7713 9 0.9211 9 0.6512 9 0.1471 8]
Total: 219.61699999999996
Mean: 4.39234
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3053.575960500001
Median total errors in population: 232.1937
Error averages by case: (112.54248999999953 9.549 108.3725637000003 9.007 117.45284029999937 9.36 94.64724380000015 9.457 117.30874110000026 9.414 116.4202883000001 8.666 112.57437439999997 9.476 116.11493230000043 9.38 116.60862989999956 8.045 117.18409139999977 8.19 114.57458350000002 8.751 117.46451419999856 9.616 109.69022539999978 8.698 118.24770999999946 8.628 106.73732960000031 9.285 118.67372379999988 8.748 113.01802560000093 9.4 105.35992189999924 8.986 108.89599950000037 9.596 117.78267579999958 10.377 114.455177400001 8.923 121.15008619999996 9.488 110.85311360000004 9.503 117.53388909999985 10.334 100.67678969999899 8.359)
Error minima by case: (0.2469 4 0.3683 4 0.0658 3 0.2792 2 0.2524 4 0.0106 3 0.0549 3 0.4197 4 0.4229 3 0.4148 3 0.1082 4 0.0463 8 0.0154 3 0.4307 4 0.225 3 0.682 2 0.8124 3 0.1321 3 0.2141 4 0.0833 3 0.1344 4 0.7713 3 0.155 8 0.6512 4 0.1471 2)
Average genome size in population (length): 72.67
Average program size in population (points): 73.67
Average percent parens in population: 0.014
Minimum age in population: 39.03463377058506
Maximum age in population: 43.78852248191833
Average age in population: 41.77187353468686
Median age in population: 41.8437057249248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.779
Total error diversity:				 0.152
Error (vector) diversity:			 0.16
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 45042693
--- Timings ---
Current time: 1529615909970 milliseconds
Total Time:          95.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.6 seconds, 38.4%
Fitness Testing:     46.3 seconds, 48.7%
Report:              12.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 8934.731099999997
Test mean error for best: 4.46737
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.08686     
Correct output: 102.6327075508 | Program output: 102.08686     
Correct output: 74.1519122481  | Program output: 74.08686      
Correct output: -56.3652570697 | Program output: -56.08686     
Correct output: 128.7486359047 | Program output: 128.08686     
Correct output: -39.0753991565 | Program output: -39.08686     
Correct output: 63.9461282577  | Program output: 63.08686      
Correct output: 106.5813138606 | Program output: 106.08686     
Correct output: 119.5781070021 | Program output: 119.08686     
Correct output: -61.5008556741 | Program output: -61.08686     
Correct output: 112.8928042415 | Program output: 112.08686     
Correct output: -78.0563177466 | Program output: -79.08686     
Correct output: -46.1015479935 | Program output: -46.08686     
Correct output: 138.5168140128 | Program output: 138.08686     
Correct output: 79.3111235509  | Program output: 79.08686      
Correct output: -82.7680920585 | Program output: -82.08686     
Correct output: -84.8984895408 | Program output: -84.08686     
Correct output: -8.218244424   | Program output: -8.08686      
Correct output: 110.7868673413 | Program output: 110.08686     
Correct output: 162.1694424654 | Program output: 162.08686     
Correct output: 109.2204830484 | Program output: 109.08686     
Correct output: -107.8573642026 | Program output: -107.08686    
Correct output: -54.1650214386 | Program output: -55.08686     
Correct output: -106.7372858396 | Program output: -106.08686    
Correct output: 51.23324299    | Program output: 51.08686      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dup_items} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_rot} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (in1 float_dup_items integer_mod float_sub float_yank float_pop float_tan integer_inc integer_yankdup integer_pop float_shove float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove in1 integer_shove float_min integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_rot 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float integer_swap print_integer 86 print_float float_stackdepth float_sub integer_add integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.2461 8 0.5458 9 0.0651 9 0.2784 9 0.6618 8 0.0115 8 0.8593 8 0.4945 7 0.4912 9 0.414 7 0.8059 9 1.0305 8 0.0147 9 0.43 8 0.2243 10 0.6812 8 0.8116 8 0.1314 8 0.7 6 0.0826 9 0.1336 7 0.7705 8 0.9218 8 0.6504 7 0.1464 8]
Total: 214.6026
Mean: 4.292052
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3234.484435199999
Median total errors in population: 228.38270000000003
Error averages by case: (116.54551339999959 9.534 113.71958359999982 8.914 126.23489679999913 9.398 102.76487080000017 9.439 122.36610930000046 9.31 125.81746019999942 8.716 119.87993019999962 9.479 123.40315160000031 9.219 123.79003269999957 8.112 126.72035949999959 8.155 120.87313049999955 8.873 126.65318689999847 9.64 116.08413829999992 8.799 123.73649179999923 8.71 108.9162200000005 9.309 131.81720979999957 8.586 120.72148680000105 9.496 114.63463789999936 9.043 112.58108030000056 9.473 123.61170389999963 10.236 121.53254420000103 8.663 132.20048260000019 9.417 118.87352469999983 9.425 127.68527730000012 10.114 104.93541209999941 8.326)
Error minima by case: (0.2461 4 0.3673 4 0.0651 3 0.2784 2 0.2524 4 0.0096 3 0.0549 3 0.4197 4 0.4229 3 0.414 3 0.1082 4 0.0297 8 0.0147 3 0.43 4 0.2243 3 0.2329 2 0.1025 3 0.1314 3 0.2141 4 0.0826 3 0.1336 4 0.1436 3 0.079 7 0.2637 4 0.1464 2)
Average genome size in population (length): 75.472
Average program size in population (points): 76.472
Average percent parens in population: 0.013
Minimum age in population: 41.04655291885138
Maximum age in population: 45.35710627585649
Average age in population: 43.27375577378646
Median age in population: 43.30411146022379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.208
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.22
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 46931468
--- Timings ---
Current time: 1529615913380 milliseconds
Total Time:          98.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.7 seconds, 38.2%
Fitness Testing:     48.1 seconds, 48.7%
Report:              12.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 8835.424900000015
Test mean error for best: 4.41771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.08486     
Correct output: 102.6327075508 | Program output: 102.08486     
Correct output: 74.1519122481  | Program output: 74.08486      
Correct output: -56.3652570697 | Program output: -56.08486     
Correct output: 128.7486359047 | Program output: 128.08486     
Correct output: -39.0753991565 | Program output: -39.08486     
Correct output: 63.9461282577  | Program output: 63.08486      
Correct output: 106.5813138606 | Program output: 106.08486     
Correct output: 119.5781070021 | Program output: 119.08486     
Correct output: -61.5008556741 | Program output: -61.08486     
Correct output: 112.8928042415 | Program output: 112.08486     
Correct output: -78.0563177466 | Program output: -79.08486     
Correct output: -46.1015479935 | Program output: -46.08486     
Correct output: 138.5168140128 | Program output: 138.08486     
Correct output: 79.3111235509  | Program output: 79.08486      
Correct output: -82.7680920585 | Program output: -82.08486     
Correct output: -84.8984895408 | Program output: -84.08486     
Correct output: -8.218244424   | Program output: -8.08486      
Correct output: 110.7868673413 | Program output: 110.08486     
Correct output: 162.1694424654 | Program output: 162.08486     
Correct output: 109.2204830484 | Program output: 109.08486     
Correct output: -107.8573642026 | Program output: -107.08486    
Correct output: -54.1650214386 | Program output: -55.08486     
Correct output: -106.7372858396 | Program output: -106.08486    
Correct output: 51.23324299    | Program output: 51.08486      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction integer_pop} {:instruction tag_integer_848} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction 84} {:instruction integer_add} {:instruction integer_mod} {:instruction float_mod} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_yankdup})
Best program: (in1 float_yank float_pop float_tan integer_inc integer_fromfloat integer_pop float_shove float_yank float_pop float_tan integer_inc integer_fromfloat print_float integer_swap in1 integer_shove float_min float_shove print_integer integer_pop tag_integer_848 float_max integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer integer_mult print_float float_stackdepth 84 integer_add integer_mod float_mod float_sub integer_add integer_add float_tan integer_swap print_integer 86 print_float float_stackdepth float_sub integer_add integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap float_tan in2 integer_stackdepth in1 float_yankdup)
Errors: [0.2481 8 0.5478 9 0.0671 8 0.2804 9 0.6638 8 0.0095 8 0.8613 9 0.4965 7 0.4932 9 0.416 7 0.8079 8 1.0285 8 0.0167 8 0.432 8 0.2263 10 0.6832 8 0.8136 7 0.1334 7 0.702 7 0.0846 8 0.1356 6 0.7725 8 0.9198 7 0.6524 7 0.1484 7]
Total: 207.64060000000003
Mean: 4.152812
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3872.0591911999986
Median total errors in population: 227.13070000000002
Error averages by case: (145.6211132000006 9.578 141.2382254000009 9.378 148.0735104999997 9.426 131.78454609999946 9.568 147.84937710000003 9.145 151.35509649999992 8.863 144.46793350000056 9.403 145.23917649999981 8.97 146.50687770000056 8.799 148.78434360000057 8.295 145.9815117000005 9.229 150.46374049999986 9.639 145.04977799999975 9.168 149.1882842000001 8.977 137.31913899999975 9.559 150.54855670000083 8.752 146.2987946 9.646 144.66266119999892 8.8 142.6899307999995 9.229 149.40196880000062 9.992 145.81758939999978 8.72 152.51978749999938 9.276 145.8710639000005 9.314 150.25616679999928 9.667 135.2950180000006 8.382)
Error minima by case: (0.246 5 0.4533 5 0.0649 4 0.2783 3 0.3374 5 0.0095 4 0.1399 4 0.4943 5 0.4911 4 0.4139 4 0.1932 5 0.0297 8 0.0145 4 0.4298 5 0.2241 4 0.2331 3 0.1027 4 0.1312 4 0.2991 5 0.0824 4 0.1335 5 0.1438 4 0.079 6 0.2639 5 0.1462 3)
Average genome size in population (length): 77.451
Average program size in population (points): 78.451
Average percent parens in population: 0.013
Minimum age in population: 42.60937666893005
Maximum age in population: 46.72649293020368
Average age in population: 44.77963464144617
Median age in population: 44.83663400728256
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.247
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 48874018
--- Timings ---
Current time: 1529615917082 milliseconds
Total Time:         102.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.0 seconds, 38.1%
Fitness Testing:     50.0 seconds, 48.8%
Report:              13.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 8762.371800000004
Test mean error for best: 4.38119
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.08501     
Correct output: 102.6327075508 | Program output: 102.08501     
Correct output: 74.1519122481  | Program output: 74.08501      
Correct output: -56.3652570697 | Program output: -56.08501     
Correct output: 128.7486359047 | Program output: 128.08501     
Correct output: -39.0753991565 | Program output: -39.08501     
Correct output: 63.9461282577  | Program output: 63.08501      
Correct output: 106.5813138606 | Program output: 106.08501     
Correct output: 119.5781070021 | Program output: 119.08501     
Correct output: -61.5008556741 | Program output: -61.08501     
Correct output: 112.8928042415 | Program output: 112.08501     
Correct output: -78.0563177466 | Program output: -79.08501     
Correct output: -46.1015479935 | Program output: -46.08501     
Correct output: 138.5168140128 | Program output: 138.08501     
Correct output: 79.3111235509  | Program output: 79.08501      
Correct output: -82.7680920585 | Program output: -82.08501     
Correct output: -84.8984895408 | Program output: -84.08501     
Correct output: -8.218244424   | Program output: -8.08501      
Correct output: 110.7868673413 | Program output: 110.08501     
Correct output: 162.1694424654 | Program output: 162.08501     
Correct output: 109.2204830484 | Program output: 109.08501     
Correct output: -107.8573642026 | Program output: -107.08501    
Correct output: -54.1650214386 | Program output: -55.08501     
Correct output: -106.7372858396 | Program output: -106.08501    
Correct output: 51.23324299    | Program output: 51.08501      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.248 8 0.5477 7 0.0669 9 0.2802 8 0.6636 7 0.0096 7 0.8611 8 0.4963 8 0.4931 7 0.4158 6 0.8078 8 1.0287 9 0.0165 8 0.4318 7 0.2261 8 0.6831 8 0.8135 7 0.1332 8 0.7019 8 0.0844 10 0.1355 7 0.7724 8 0.92 8 0.6523 8 0.1482 8]
Total: 206.63769999999997
Mean: 4.132754
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3975.7380392
Median total errors in population: 223.3785
Error averages by case: (148.02959180000036 9.31 144.6436820000011 9.431 154.87848119999978 9.443 139.91236339999972 9.569 150.03433690000057 8.857 155.0758260999999 8.818 154.7449425000001 9.137 148.52865620000043 8.678 149.47307220000016 8.797 154.39399590000036 7.877 146.18534190000045 9.209 150.2570044000001 9.364 150.7148577000003 9.341 151.1477152999998 8.855 143.4712308000003 9.65 157.9292450000008 8.851 150.85128119999948 9.474 149.94282429999942 8.652 144.9879701 8.72 150.81436850000009 9.746 147.40779259999917 8.529 159.20273129999902 9.263 149.080689000001 9.353 159.3718286999989 9.434 137.9142102000012 8.386)
Error minima by case: (0.2418 5 0.4083 5 0.0607 4 0.274 3 0.2924 5 0.0014 4 0.0949 4 0.4597 5 0.4629 4 0.4096 4 0.1482 5 0.0152 7 0.0103 4 0.4256 5 0.2199 4 0.2339 3 0.1035 4 0.127 4 0.2541 5 0.0782 4 0.1293 5 0.1446 4 0.0782 6 0.2647 5 0.142 3)
Average genome size in population (length): 83.665
Average program size in population (points): 84.665
Average percent parens in population: 0.012
Minimum age in population: 44.15783964842558
Maximum age in population: 48.16521671786904
Average age in population: 46.23305741420761
Median age in population: 46.26657139370218
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.268
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 50980093
--- Timings ---
Current time: 1529615921075 milliseconds
Total Time:         106.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.3 seconds, 37.9%
Fitness Testing:     52.0 seconds, 49.0%
Report:              13.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 8762.371800000004
Test mean error for best: 4.38119
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.08501     
Correct output: 102.6327075508 | Program output: 102.08501     
Correct output: 74.1519122481  | Program output: 74.08501      
Correct output: -56.3652570697 | Program output: -56.08501     
Correct output: 128.7486359047 | Program output: 128.08501     
Correct output: -39.0753991565 | Program output: -39.08501     
Correct output: 63.9461282577  | Program output: 63.08501      
Correct output: 106.5813138606 | Program output: 106.08501     
Correct output: 119.5781070021 | Program output: 119.08501     
Correct output: -61.5008556741 | Program output: -61.08501     
Correct output: 112.8928042415 | Program output: 112.08501     
Correct output: -78.0563177466 | Program output: -79.08501     
Correct output: -46.1015479935 | Program output: -46.08501     
Correct output: 138.5168140128 | Program output: 138.08501     
Correct output: 79.3111235509  | Program output: 79.08501      
Correct output: -82.7680920585 | Program output: -82.08501     
Correct output: -84.8984895408 | Program output: -84.08501     
Correct output: -8.218244424   | Program output: -8.08501      
Correct output: 110.7868673413 | Program output: 110.08501     
Correct output: 162.1694424654 | Program output: 162.08501     
Correct output: 109.2204830484 | Program output: 109.08501     
Correct output: -107.8573642026 | Program output: -107.08501    
Correct output: -54.1650214386 | Program output: -55.08501     
Correct output: -106.7372858396 | Program output: -106.08501    
Correct output: 51.23324299    | Program output: 51.08501      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.248 8 0.5477 7 0.0669 9 0.2802 8 0.6636 7 0.0096 7 0.8611 8 0.4963 8 0.4931 7 0.4158 6 0.8078 8 1.0287 9 0.0165 8 0.4318 7 0.2261 8 0.6831 8 0.8135 7 0.1332 8 0.7019 8 0.0844 10 0.1355 7 0.7724 8 0.92 8 0.6523 8 0.1482 8]
Total: 206.63769999999997
Mean: 4.132754
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4221.988047399999
Median total errors in population: 219.61699999999996
Error averages by case: (159.1268613999995 9.033 152.60352970000122 9.661 164.92058100000108 9.457 142.9554166999996 9.702 158.88761640000138 8.893 165.84780509999996 8.8 163.99267479999924 8.982 156.94573140000097 8.482 157.91440729999943 8.989 168.4440859999993 7.753 156.0836427000004 9.263 164.23899259999885 9.079 163.36629350000067 9.502 159.63862079999885 8.79 150.52823990000113 9.906 169.66971350000026 8.99 167.49341979999835 9.319 160.42290649999975 8.642 152.42664009999967 8.203 160.41781169999896 9.804 155.10416169999982 8.516 170.50855589999975 9.377 161.2511999000016 9.201 170.73323509999955 9.269 142.26090390000064 8.592)
Error minima by case: (0.2418 6 0.3759 6 0.0607 6 0.274 6 0.2622 6 0.0014 5 0.0647 6 0.4295 6 0.4328 6 0.4096 5 0.1181 6 0.0298 7 0.0103 7 0.4256 6 0.2199 6 0.318 6 0.1876 7 0.127 7 0.224 4 0.0782 6 0.1293 6 0.2287 7 0.0788 6 0.3488 6 0.142 6)
Average genome size in population (length): 86.15
Average program size in population (points): 87.15
Average percent parens in population: 0.012
Minimum age in population: 45.15783964842558
Maximum age in population: 49.56224617455155
Average age in population: 47.64186441440601
Median age in population: 47.67031570803374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.285
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 53149273
--- Timings ---
Current time: 1529615925046 milliseconds
Total Time:         110.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.7 seconds, 37.8%
Fitness Testing:     54.1 seconds, 49.1%
Report:              14.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 8762.371800000004
Test mean error for best: 4.38119
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.08501     
Correct output: 102.6327075508 | Program output: 102.08501     
Correct output: 74.1519122481  | Program output: 74.08501      
Correct output: -56.3652570697 | Program output: -56.08501     
Correct output: 128.7486359047 | Program output: 128.08501     
Correct output: -39.0753991565 | Program output: -39.08501     
Correct output: 63.9461282577  | Program output: 63.08501      
Correct output: 106.5813138606 | Program output: 106.08501     
Correct output: 119.5781070021 | Program output: 119.08501     
Correct output: -61.5008556741 | Program output: -61.08501     
Correct output: 112.8928042415 | Program output: 112.08501     
Correct output: -78.0563177466 | Program output: -79.08501     
Correct output: -46.1015479935 | Program output: -46.08501     
Correct output: 138.5168140128 | Program output: 138.08501     
Correct output: 79.3111235509  | Program output: 79.08501      
Correct output: -82.7680920585 | Program output: -82.08501     
Correct output: -84.8984895408 | Program output: -84.08501     
Correct output: -8.218244424   | Program output: -8.08501      
Correct output: 110.7868673413 | Program output: 110.08501     
Correct output: 162.1694424654 | Program output: 162.08501     
Correct output: 109.2204830484 | Program output: 109.08501     
Correct output: -107.8573642026 | Program output: -107.08501    
Correct output: -54.1650214386 | Program output: -55.08501     
Correct output: -106.7372858396 | Program output: -106.08501    
Correct output: 51.23324299    | Program output: 51.08501      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction float_sub} {:instruction float_rot} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 float_sub float_rot float_pop integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.248 8 0.5477 7 0.0669 9 0.2802 8 0.6636 7 0.0096 7 0.8611 8 0.4963 8 0.4931 7 0.4158 6 0.8078 8 1.0287 9 0.0165 8 0.4318 7 0.2261 8 0.6831 8 0.8135 7 0.1332 8 0.7019 8 0.0844 10 0.1355 7 0.7724 8 0.92 8 0.6523 8 0.1482 8]
Total: 206.63769999999997
Mean: 4.132754
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4350.725384099999
Median total errors in population: 214.6026
Error averages by case: (163.96689669999947 8.827 159.1892952000008 9.576 169.3412206000009 9.301 151.2274949999999 9.633 166.41470790000108 8.805 169.4420833999985 8.71 170.05445000000012 8.969 161.97627080000055 8.113 162.32251839999932 9.028 166.1814316999997 7.873 161.85112440000128 9.231 168.76376689999913 8.953 164.57807740000027 9.323 167.6076369999985 8.563 157.88644600000092 9.984 171.4315400000003 8.727 166.11221189999875 8.873 166.21008630000057 8.555 164.03723710000023 7.949 167.0552470999991 9.673 164.66445199999959 8.192 171.72297990000098 9.156 167.82750740000088 8.895 173.38123150000072 8.894 155.1804695000002 8.496)
Error minima by case: (0.2418 6 0.369 7 0.0607 6 0.274 5 0.3364 6 0.0086 6 0.1389 6 0.4901 5 0.4869 6 0.4096 6 0.1922 7 0.0287 7 0.0103 6 0.4256 6 0.2199 6 0.3188 5 0.1884 6 0.127 6 0.2981 4 0.0782 6 0.1293 6 0.2295 6 0.0782 6 0.3496 6 0.142 5)
Average genome size in population (length): 81.921
Average program size in population (points): 82.921
Average percent parens in population: 0.012
Minimum age in population: 47.15712519641966
Maximum age in population: 51.16453189938329
Average age in population: 49.23758416178939
Median age in population: 49.23106499307323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.298
Error (vector) diversity:			 0.331
Behavioral diversity:				 0.331
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 55203098
--- Timings ---
Current time: 1529615928971 milliseconds
Total Time:         114.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.0 seconds, 37.7%
Fitness Testing:     56.1 seconds, 49.1%
Report:              14.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 8685.735199999997
Test mean error for best: 4.34287
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0868501   
Correct output: 102.6327075508 | Program output: 102.0868501   
Correct output: 74.1519122481  | Program output: 74.0868501    
Correct output: -56.3652570697 | Program output: -56.0868501   
Correct output: 128.7486359047 | Program output: 128.0868501   
Correct output: -39.0753991565 | Program output: -39.0868501   
Correct output: 63.9461282577  | Program output: 63.0868501    
Correct output: 106.5813138606 | Program output: 106.0868501   
Correct output: 119.5781070021 | Program output: 119.0868501   
Correct output: -61.5008556741 | Program output: -61.0868501   
Correct output: 112.8928042415 | Program output: 112.0868501   
Correct output: -78.0563177466 | Program output: -79.0868501   
Correct output: -46.1015479935 | Program output: -46.0868501   
Correct output: 138.5168140128 | Program output: 138.0868501   
Correct output: 79.3111235509  | Program output: 79.0868501    
Correct output: -82.7680920585 | Program output: -82.0868501   
Correct output: -84.8984895408 | Program output: -84.0868501   
Correct output: -8.218244424   | Program output: -8.0868501    
Correct output: 110.7868673413 | Program output: 110.0868501   
Correct output: 162.1694424654 | Program output: 162.0868501   
Correct output: 109.2204830484 | Program output: 109.0868501   
Correct output: -107.8573642026 | Program output: -107.0868501  
Correct output: -54.1650214386 | Program output: -55.0868501   
Correct output: -106.7372858396 | Program output: -106.0868501  
Correct output: 51.23324299    | Program output: 51.0868501    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_rot} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction integer_swap} {:instruction print_integer} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 integer_pop float_stackdepth in1 float_inc integer_min integer_rot integer_fromfloat integer_pop float_shove in1 integer_shove float_min integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_rot 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float integer_swap print_integer float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_add integer_add integer_dec integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.2461 8 0.5459 8 0.0651 9 0.2784 8 0.6618 6 0.0115 8 0.8593 7 0.4945 7 0.4913 7 0.414 7 0.806 8 1.0305 9 0.0147 9 0.43 6 0.2243 8 0.6812 8 0.8116 6 0.1314 8 0.7 6 0.0826 10 0.1336 8 0.7705 8 0.9218 9 0.6504 8 0.1464 8]
Total: 205.6029
Mean: 4.112058
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4077.1986108
Median total errors in population: 212.61964999999998
Error averages by case: (148.58145379999965 8.872 147.16412790000052 9.493 160.71328929999993 9.244 144.3055921 9.612 150.79981970000026 8.653 155.58743239999885 8.717 162.5711146999998 9.191 148.38835089999986 8.055 150.72821929999964 9.02 162.23719409999924 7.78 149.31548720000126 9.041 162.5820574999987 9.08 154.6594683999995 9.128 151.88208239999972 8.582 145.5683308 9.959 163.75673269999993 8.724 161.8409243999984 8.473 151.93903190000017 8.395 146.9987316999998 8.11 152.62316800000048 9.53 148.27836279999985 7.958 165.72587690000012 9.058 160.52907420000122 8.891 165.71079090000006 8.793 143.99689680000068 8.356)
Error minima by case: (0.246 6 0.3859 6 0.0649 5 0.2782 4 0.3354 6 0.0085 5 0.1379 5 0.4943 6 0.4911 5 0.4138 5 0.1912 6 0.0277 7 0.0145 5 0.4298 6 0.2125 5 0.2505 4 0.1201 5 0.1312 5 0.2971 5 0.0824 5 0.1335 6 0.1612 5 0.0782 6 0.2813 6 0.1462 4)
Average genome size in population (length): 82.558
Average program size in population (points): 83.558
Average percent parens in population: 0.012
Minimum age in population: 48.19078976195306
Maximum age in population: 52.84453674452379
Average age in population: 50.80062682281353
Median age in population: 50.82683275296586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.298
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.325
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 57275598
--- Timings ---
Current time: 1529615933109 milliseconds
Total Time:         118.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.3 seconds, 37.4%
Fitness Testing:     58.4 seconds, 49.3%
Report:              15.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 8685.735199999997
Test mean error for best: 4.34287
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0868501   
Correct output: 102.6327075508 | Program output: 102.0868501   
Correct output: 74.1519122481  | Program output: 74.0868501    
Correct output: -56.3652570697 | Program output: -56.0868501   
Correct output: 128.7486359047 | Program output: 128.0868501   
Correct output: -39.0753991565 | Program output: -39.0868501   
Correct output: 63.9461282577  | Program output: 63.0868501    
Correct output: 106.5813138606 | Program output: 106.0868501   
Correct output: 119.5781070021 | Program output: 119.0868501   
Correct output: -61.5008556741 | Program output: -61.0868501   
Correct output: 112.8928042415 | Program output: 112.0868501   
Correct output: -78.0563177466 | Program output: -79.0868501   
Correct output: -46.1015479935 | Program output: -46.0868501   
Correct output: 138.5168140128 | Program output: 138.0868501   
Correct output: 79.3111235509  | Program output: 79.0868501    
Correct output: -82.7680920585 | Program output: -82.0868501   
Correct output: -84.8984895408 | Program output: -84.0868501   
Correct output: -8.218244424   | Program output: -8.0868501    
Correct output: 110.7868673413 | Program output: 110.0868501   
Correct output: 162.1694424654 | Program output: 162.0868501   
Correct output: 109.2204830484 | Program output: 109.0868501   
Correct output: -107.8573642026 | Program output: -107.0868501  
Correct output: -54.1650214386 | Program output: -55.0868501   
Correct output: -106.7372858396 | Program output: -106.0868501  
Correct output: 51.23324299    | Program output: 51.0868501    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_rot} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction integer_swap} {:instruction print_integer} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 integer_pop float_stackdepth in1 float_inc integer_min integer_rot integer_fromfloat integer_pop float_shove in1 integer_shove float_min integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_rot 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float integer_swap print_integer float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_add integer_add integer_dec integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.2461 8 0.5459 8 0.0651 9 0.2784 8 0.6618 6 0.0115 8 0.8593 7 0.4945 7 0.4913 7 0.414 7 0.806 8 1.0305 9 0.0147 9 0.43 6 0.2243 8 0.6812 8 0.8116 6 0.1314 8 0.7 6 0.0826 10 0.1336 8 0.7705 8 0.9218 9 0.6504 8 0.1464 8]
Total: 205.6029
Mean: 4.112058
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3640.9602442999994
Median total errors in population: 207.64060000000003
Error averages by case: (137.83500139999938 8.863 135.03431690000008 9.247 140.5336829 8.996 127.8713549000006 9.364 138.98023859999893 8.48 141.03702489999975 8.552 141.97528180000006 9.237 137.69820769999848 8.066 137.7385714999994 9.007 137.25090119999925 7.617 136.17369110000004 8.845 133.8476348999998 9.079 139.41458359999834 8.778 140.3393085000004 8.56 135.2149998999989 9.845 135.78667839999954 8.53 131.72766109999858 7.887 137.91975570000093 8.085 135.413826100001 8.194 139.6597481000012 9.317 136.03965379999872 7.512 137.36302570000151 8.849 137.22737340000108 8.357 141.85679460000105 8.383 131.3429276000011 8.028)
Error minima by case: (0.2461 5 0.386 5 0.0651 5 0.2784 4 0.2701 5 0.0085 5 0.0726 5 0.4374 5 0.4406 5 0.414 5 0.1259 5 0.0285 7 0.0147 5 0.43 5 0.2243 5 0.3159 4 0.1855 5 0.1314 5 0.2318 5 0.0826 5 0.1336 5 0.2266 5 0.08 6 0.3467 6 0.1464 4)
Average genome size in population (length): 78.032
Average program size in population (points): 79.032
Average percent parens in population: 0.013
Minimum age in population: 49.72982977470383
Maximum age in population: 54.21279483562103
Average age in population: 52.27555293079495
Median age in population: 52.35387099222862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.234
Error (vector) diversity:			 0.264
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 59238748
--- Timings ---
Current time: 1529615936790 milliseconds
Total Time:         122.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.5 seconds, 37.3%
Fitness Testing:     60.3 seconds, 49.4%
Report:              16.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 8685.735199999997
Test mean error for best: 4.34287
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0868501   
Correct output: 102.6327075508 | Program output: 102.0868501   
Correct output: 74.1519122481  | Program output: 74.0868501    
Correct output: -56.3652570697 | Program output: -56.0868501   
Correct output: 128.7486359047 | Program output: 128.0868501   
Correct output: -39.0753991565 | Program output: -39.0868501   
Correct output: 63.9461282577  | Program output: 63.0868501    
Correct output: 106.5813138606 | Program output: 106.0868501   
Correct output: 119.5781070021 | Program output: 119.0868501   
Correct output: -61.5008556741 | Program output: -61.0868501   
Correct output: 112.8928042415 | Program output: 112.0868501   
Correct output: -78.0563177466 | Program output: -79.0868501   
Correct output: -46.1015479935 | Program output: -46.0868501   
Correct output: 138.5168140128 | Program output: 138.0868501   
Correct output: 79.3111235509  | Program output: 79.0868501    
Correct output: -82.7680920585 | Program output: -82.0868501   
Correct output: -84.8984895408 | Program output: -84.0868501   
Correct output: -8.218244424   | Program output: -8.0868501    
Correct output: 110.7868673413 | Program output: 110.0868501   
Correct output: 162.1694424654 | Program output: 162.0868501   
Correct output: 109.2204830484 | Program output: 109.0868501   
Correct output: -107.8573642026 | Program output: -107.0868501  
Correct output: -54.1650214386 | Program output: -55.0868501   
Correct output: -106.7372858396 | Program output: -106.0868501  
Correct output: 51.23324299    | Program output: 51.0868501    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_rot} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction integer_swap} {:instruction print_integer} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 integer_pop float_stackdepth in1 float_inc integer_min integer_rot integer_fromfloat integer_pop float_shove in1 integer_shove float_min integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_rot 46.29272832092809 tagged_392 float_flush 46.29272832092809 integer_div float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float integer_swap print_integer float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_add integer_add integer_dec integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.2461 8 0.5459 8 0.0651 9 0.2784 8 0.6618 6 0.0115 8 0.8593 7 0.4945 7 0.4913 7 0.414 7 0.806 8 1.0305 9 0.0147 9 0.43 6 0.2243 8 0.6812 8 0.8116 6 0.1314 8 0.7 6 0.0826 10 0.1336 8 0.7705 8 0.9218 9 0.6504 8 0.1464 8]
Total: 205.6029
Mean: 4.112058
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4394.964838400001
Median total errors in population: 207.64060000000003
Error averages by case: (164.23362589999957 9.023 162.0976510999993 8.809 169.34967300000045 9.445 157.1336228999998 9.242 167.60772780000016 8.359 171.8525717999983 8.523 171.83998699999992 9.135 166.69241029999958 8.561 165.8596208999995 8.635 169.1026315999988 7.54 164.72970260000116 9.012 168.6630272999983 9.582 169.14699189999905 8.957 168.37655869999963 8.489 161.86170610000008 9.467 171.2926285999988 8.686 168.03207999999827 7.919 165.85109280000037 8.572 163.94692279999845 8.674 168.17328450000042 10.023 165.16731970000063 7.923 170.71183209999907 9.005 170.23369300000152 8.833 173.060572899999 8.738 160.3059031 8.49)
Error minima by case: (0.2461 7 0.4522 7 0.065 6 0.2784 5 0.3362 6 0.0086 6 0.1387 6 0.4944 6 0.4912 6 0.414 5 0.1921 7 0.0285 7 0.0147 6 0.4299 6 0.2243 6 0.3169 5 0.1865 5 0.1314 6 0.298 5 0.0826 6 0.1336 5 0.2276 6 0.0799 6 0.3477 7 0.1464 5)
Average genome size in population (length): 85.73
Average program size in population (points): 86.73
Average percent parens in population: 0.012
Minimum age in population: 50.72982977470383
Maximum age in population: 55.8652065921633
Average age in population: 53.53573429342141
Median age in population: 53.59361898709903
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.231
Error (vector) diversity:			 0.249
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 61411423
--- Timings ---
Current time: 1529615941093 milliseconds
Total Time:         126.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.7 seconds, 37.0%
Fitness Testing:     62.7 seconds, 49.7%
Report:              16.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 8730.738799999997
Test mean error for best: 4.36537
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0868401   
Correct output: 102.6327075508 | Program output: 102.0868401   
Correct output: 74.1519122481  | Program output: 74.0868401    
Correct output: -56.3652570697 | Program output: -56.0868401   
Correct output: 128.7486359047 | Program output: 128.0868401   
Correct output: -39.0753991565 | Program output: -39.0868401   
Correct output: 63.9461282577  | Program output: 63.0868401    
Correct output: 106.5813138606 | Program output: 106.0868401   
Correct output: 119.5781070021 | Program output: 119.0868401   
Correct output: -61.5008556741 | Program output: -61.0868401   
Correct output: 112.8928042415 | Program output: 112.0868401   
Correct output: -78.0563177466 | Program output: -79.0868401   
Correct output: -46.1015479935 | Program output: -46.0868401   
Correct output: 138.5168140128 | Program output: 138.0868401   
Correct output: 79.3111235509  | Program output: 79.0868401    
Correct output: -82.7680920585 | Program output: -82.0868401   
Correct output: -84.8984895408 | Program output: -84.0868401   
Correct output: -8.218244424   | Program output: -8.0868401    
Correct output: 110.7868673413 | Program output: 110.0868401   
Correct output: 162.1694424654 | Program output: 162.0868401   
Correct output: 109.2204830484 | Program output: 109.0868401   
Correct output: -107.8573642026 | Program output: -107.0868401  
Correct output: -54.1650214386 | Program output: -55.0868401   
Correct output: -106.7372858396 | Program output: -106.0868401  
Correct output: 51.23324299    | Program output: 51.0868401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.8619703011127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction integer_swap} {:instruction print_integer} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.8619703011127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float integer_swap print_integer float_sub integer_add integer_add float_frominteger float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_dec integer_add float_tan integer_swap float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.2461 8 0.5459 9 0.0651 8 0.2784 9 0.6618 7 0.0114 8 0.8593 8 0.4945 7 0.4913 7 0.414 6 0.806 7 1.0305 8 0.0147 9 0.43 5 0.2243 9 0.6813 8 0.8116 6 0.1314 7 0.7 6 0.0826 9 0.1336 7 0.7705 8 0.9218 10 0.6504 8 0.1464 7]
Total: 202.6029
Mean: 4.052058
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4564.502780000002
Median total errors in population: 206.63769999999997
Error averages by case: (173.6183455000001 8.954 170.31338129999816 8.288 175.20234220000208 9.637 167.0123707999996 8.948 173.9319132999999 8.037 179.9358475999984 8.229 174.8797552000003 8.827 171.55418269999925 8.746 173.84905329999998 8.006 176.66772669999864 7.218 170.30606580000054 8.941 173.92510869999785 9.773 177.06801929999875 8.973 174.8725023999991 8.104 169.54199759999995 8.942 176.78039799999794 8.695 175.97604999999865 7.877 175.73448180000108 8.857 171.82245549999772 8.759 174.77316159999995 10.601 170.65166870000132 8.228 179.05307899999852 8.981 172.5273799000015 9.104 180.34224569999841 8.991 165.6732473999986 8.774)
Error minima by case: (0.246 3 0.4523 3 0.0649 2 0.2782 1 0.3364 3 0.0076 2 0.1389 2 0.4943 2 0.4911 3 0.4138 2 0.1922 3 0.0287 8 0.0145 2 0.4298 2 0.2241 2 0.3169 2 0.1865 2 0.1312 1 0.2981 3 0.0824 3 0.1335 3 0.2276 2 0.08 7 0.3477 3 0.1462 2)
Average genome size in population (length): 94.79
Average program size in population (points): 95.79
Average percent parens in population: 0.011
Minimum age in population: 52.33666993433144
Maximum age in population: 56.82770922294003
Average age in population: 54.80150225742567
Median age in population: 54.8157146901649
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.206
Error (vector) diversity:			 0.238
Behavioral diversity:				 0.238
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 63825498
--- Timings ---
Current time: 1529615945369 milliseconds
Total Time:         130.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.9 seconds, 36.7%
Fitness Testing:     65.1 seconds, 49.8%
Report:              17.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 8730.738799999997
Test mean error for best: 4.36537
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0868401   
Correct output: 102.6327075508 | Program output: 102.0868401   
Correct output: 74.1519122481  | Program output: 74.0868401    
Correct output: -56.3652570697 | Program output: -56.0868401   
Correct output: 128.7486359047 | Program output: 128.0868401   
Correct output: -39.0753991565 | Program output: -39.0868401   
Correct output: 63.9461282577  | Program output: 63.0868401    
Correct output: 106.5813138606 | Program output: 106.0868401   
Correct output: 119.5781070021 | Program output: 119.0868401   
Correct output: -61.5008556741 | Program output: -61.0868401   
Correct output: 112.8928042415 | Program output: 112.0868401   
Correct output: -78.0563177466 | Program output: -79.0868401   
Correct output: -46.1015479935 | Program output: -46.0868401   
Correct output: 138.5168140128 | Program output: 138.0868401   
Correct output: 79.3111235509  | Program output: 79.0868401    
Correct output: -82.7680920585 | Program output: -82.0868401   
Correct output: -84.8984895408 | Program output: -84.0868401   
Correct output: -8.218244424   | Program output: -8.0868401    
Correct output: 110.7868673413 | Program output: 110.0868401   
Correct output: 162.1694424654 | Program output: 162.0868401   
Correct output: 109.2204830484 | Program output: 109.0868401   
Correct output: -107.8573642026 | Program output: -107.0868401  
Correct output: -54.1650214386 | Program output: -55.0868401   
Correct output: -106.7372858396 | Program output: -106.0868401  
Correct output: 51.23324299    | Program output: 51.0868401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.8619703011127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction integer_swap} {:instruction print_integer} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.8619703011127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float integer_swap print_integer float_sub integer_add integer_add float_frominteger float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_dec integer_add float_tan integer_swap float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.2461 8 0.5459 9 0.0651 8 0.2784 9 0.6618 7 0.0114 8 0.8593 8 0.4945 7 0.4913 7 0.414 6 0.806 7 1.0305 8 0.0147 9 0.43 5 0.2243 9 0.6813 8 0.8116 6 0.1314 7 0.7 6 0.0826 9 0.1336 7 0.7705 8 0.9218 10 0.6504 8 0.1464 7]
Total: 202.6029
Mean: 4.052058
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4394.367056400001
Median total errors in population: 206.63769999999997
Error averages by case: (168.90841469999958 8.833 165.30977769999882 8.313 166.80819490000152 9.605 159.49945939999984 8.868 167.68371750000028 7.758 172.70030749999844 8.311 168.2395206000004 8.548 166.95190519999971 8.509 166.9889069999995 7.916 167.55972799999913 7.282 165.7324527000007 8.858 165.28043789999856 9.709 171.69806359999927 9.076 168.82964159999875 7.784 163.7023044000003 8.82 170.1042646999989 8.671 167.49623019999865 7.602 170.7874386000008 8.787 165.31450529999867 8.301 169.1217704999995 10.525 164.9385862000008 8.299 168.84454469999955 8.947 164.42105190000098 9.302 172.08977279999937 8.926 159.0850587999991 8.721)
Error minima by case: (0.2461 7 0.4523 6 0.0651 7 0.2772 5 0.3364 6 0.0086 6 0.1389 7 0.4945 5 0.4912 5 0.414 5 0.1922 6 0.0287 7 0.0147 7 0.43 5 0.2243 7 0.232 6 0.1016 6 0.1314 7 0.2981 5 0.0826 5 0.1336 6 0.1427 7 0.0792 7 0.2628 7 0.1464 6)
Average genome size in population (length): 96.116
Average program size in population (points): 97.116
Average percent parens in population: 0.010
Minimum age in population: 53.33666993433144
Maximum age in population: 58.54461456795252
Average age in population: 56.27272337820799
Median age in population: 56.31261350923887
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.206
Error (vector) diversity:			 0.239
Behavioral diversity:				 0.24
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 66263248
--- Timings ---
Current time: 1529615949928 milliseconds
Total Time:         134.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.1 seconds, 36.4%
Fitness Testing:     67.7 seconds, 50.1%
Report:              18.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 8720.08479999999
Test mean error for best: 4.36004
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0858401   
Correct output: 102.6327075508 | Program output: 102.0858401   
Correct output: 74.1519122481  | Program output: 74.0858401    
Correct output: -56.3652570697 | Program output: -56.0858401   
Correct output: 128.7486359047 | Program output: 128.0858401   
Correct output: -39.0753991565 | Program output: -39.0858401   
Correct output: 63.9461282577  | Program output: 63.0858401    
Correct output: 106.5813138606 | Program output: 106.0858401   
Correct output: 119.5781070021 | Program output: 119.0858401   
Correct output: -61.5008556741 | Program output: -61.0858401   
Correct output: 112.8928042415 | Program output: 112.0858401   
Correct output: -78.0563177466 | Program output: -79.0858401   
Correct output: -46.1015479935 | Program output: -46.0858401   
Correct output: 138.5168140128 | Program output: 138.0858401   
Correct output: 79.3111235509  | Program output: 79.0858401    
Correct output: -82.7680920585 | Program output: -82.0858401   
Correct output: -84.8984895408 | Program output: -84.0858401   
Correct output: -8.218244424   | Program output: -8.0858401    
Correct output: 110.7868673413 | Program output: 110.0858401   
Correct output: 162.1694424654 | Program output: 162.0858401   
Correct output: 109.2204830484 | Program output: 109.0858401   
Correct output: -107.8573642026 | Program output: -107.0858401  
Correct output: -54.1650214386 | Program output: -55.0858401   
Correct output: -106.7372858396 | Program output: -106.0858401  
Correct output: 51.23324299    | Program output: 51.0858401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.8619703011127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod float_sub float_rot integer_mod integer_yankdup float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.8619703011127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_sub integer_add integer_add integer_dec integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank print_integer 86 print_float float_stackdepth float_sub integer_dec integer_dec integer_add float_tan integer_swap float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.2471 8 0.5469 8 0.0661 8 0.2794 8 0.6628 8 0.0104 7 0.8603 9 0.4955 7 0.4923 7 0.415 6 0.807 7 1.0295 9 0.0157 8 0.431 6 0.2253 9 0.6823 8 0.8126 6 0.1324 7 0.701 7 0.0836 9 0.1346 7 0.7715 7 0.9208 9 0.6514 7 0.1474 7]
Total: 200.62189999999998
Mean: 4.012438
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4462.3656285
Median total errors in population: 206.63769999999997
Error averages by case: (172.01147499999973 8.928 167.88411059999902 8.756 171.59352810000237 9.627 160.61711379999952 9.039 170.45374770000052 7.569 174.12237929999796 8.755 173.0352069999998 8.375 170.48912610000016 8.292 168.7388104999986 8.095 170.97595579999967 7.651 168.90910820000045 8.916 168.22028159999778 9.726 173.7755009999998 9.487 172.20294469999808 7.547 164.6714589000005 8.976 175.04244670000008 8.761 168.0616331999991 7.413 172.6733370000006 8.827 167.99767060000002 7.745 170.63174119999854 10.535 166.9898938000006 8.667 171.111329900001 9.081 169.18877000000026 9.702 175.06631910000098 9.013 159.6377386999993 8.781)
Error minima by case: (0.2451 6 0.3858 7 0.0641 6 0.2774 7 0.2699 5 0.0086 6 0.0724 6 0.4372 6 0.4404 6 0.413 5 0.1257 7 0.0287 7 0.0137 7 0.429 5 0.2233 7 0.2504 6 0.12 6 0.1304 6 0.2316 5 0.0816 7 0.1326 6 0.1611 7 0.0782 7 0.2812 7 0.1454 7)
Average genome size in population (length): 96.511
Average program size in population (points): 97.511
Average percent parens in population: 0.010
Minimum age in population: 55.66168146899145
Maximum age in population: 59.98699008209223
Average age in population: 57.8038228649828
Median age in population: 57.83562805500696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.249
Error (vector) diversity:			 0.277
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 68698548
--- Timings ---
Current time: 1529615954314 milliseconds
Total Time:         139.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.3 seconds, 36.1%
Fitness Testing:     70.1 seconds, 50.3%
Report:              18.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 8720.08479999999
Test mean error for best: 4.36004
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0858401   
Correct output: 102.6327075508 | Program output: 102.0858401   
Correct output: 74.1519122481  | Program output: 74.0858401    
Correct output: -56.3652570697 | Program output: -56.0858401   
Correct output: 128.7486359047 | Program output: 128.0858401   
Correct output: -39.0753991565 | Program output: -39.0858401   
Correct output: 63.9461282577  | Program output: 63.0858401    
Correct output: 106.5813138606 | Program output: 106.0858401   
Correct output: 119.5781070021 | Program output: 119.0858401   
Correct output: -61.5008556741 | Program output: -61.0858401   
Correct output: 112.8928042415 | Program output: 112.0858401   
Correct output: -78.0563177466 | Program output: -79.0858401   
Correct output: -46.1015479935 | Program output: -46.0858401   
Correct output: 138.5168140128 | Program output: 138.0858401   
Correct output: 79.3111235509  | Program output: 79.0858401    
Correct output: -82.7680920585 | Program output: -82.0858401   
Correct output: -84.8984895408 | Program output: -84.0858401   
Correct output: -8.218244424   | Program output: -8.0858401    
Correct output: 110.7868673413 | Program output: 110.0858401   
Correct output: 162.1694424654 | Program output: 162.0858401   
Correct output: 109.2204830484 | Program output: 109.0858401   
Correct output: -107.8573642026 | Program output: -107.0858401  
Correct output: -54.1650214386 | Program output: -55.0858401   
Correct output: -106.7372858396 | Program output: -106.0858401  
Correct output: 51.23324299    | Program output: 51.0858401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.8619703011127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod float_sub float_rot integer_mod integer_yankdup float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.8619703011127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_sub integer_add integer_add integer_dec integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank print_integer 86 print_float float_stackdepth float_sub integer_dec integer_dec integer_add float_tan integer_swap float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.2471 8 0.5469 8 0.0661 8 0.2794 8 0.6628 8 0.0104 7 0.8603 9 0.4955 7 0.4923 7 0.415 6 0.807 7 1.0295 9 0.0157 8 0.431 6 0.2253 9 0.6823 8 0.8126 6 0.1324 7 0.701 7 0.0836 9 0.1346 7 0.7715 7 0.9208 9 0.6514 7 0.1474 7]
Total: 200.62189999999998
Mean: 4.012438
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4466.2767324
Median total errors in population: 205.6029
Error averages by case: (170.86324079999946 8.865 166.18177339999943 8.915 174.8575950000017 9.248 157.00878349999917 9.208 171.34218670000027 7.673 175.2580399999985 8.804 174.6160131999996 8.403 171.3414285000009 8.248 170.88798589999845 8.146 170.02332489999964 7.385 169.09852289999992 8.679 168.58726329999863 9.521 171.16081770000045 9.322 172.98194869999872 7.35 166.26102000000034 9.017 174.51914310000015 8.717 168.04892919999944 7.424 170.10130680000032 8.431 166.85009700000032 7.707 173.45769869999856 10.293 169.06318180000045 8.477 173.7571526000011 9.11 167.53239349999998 9.776 174.23038240000096 9.02 161.96850279999953 8.539)
Error minima by case: (0.2451 7 0.4523 7 0.0641 6 0.2774 5 0.3368 5 0.0066 6 0.1393 6 0.4935 5 0.4903 5 0.413 5 0.1926 7 0.0291 7 0.0137 6 0.429 5 0.2233 6 0.2504 5 0.12 5 0.1304 6 0.2985 4 0.0816 6 0.1326 5 0.1611 6 0.0782 8 0.2812 7 0.1454 5)
Average genome size in population (length): 98.084
Average program size in population (points): 99.084
Average percent parens in population: 0.010
Minimum age in population: 56.78877358823956
Maximum age in population: 61.48259397999209
Average age in population: 59.31154333769514
Median age in population: 59.30128631027947
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.283
Error (vector) diversity:			 0.333
Behavioral diversity:				 0.334
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 71181373
--- Timings ---
Current time: 1529615959009 milliseconds
Total Time:         143.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.5 seconds, 35.8%
Fitness Testing:     72.8 seconds, 50.6%
Report:              19.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 8720.08479999999
Test mean error for best: 4.36004
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0858401   
Correct output: 102.6327075508 | Program output: 102.0858401   
Correct output: 74.1519122481  | Program output: 74.0858401    
Correct output: -56.3652570697 | Program output: -56.0858401   
Correct output: 128.7486359047 | Program output: 128.0858401   
Correct output: -39.0753991565 | Program output: -39.0858401   
Correct output: 63.9461282577  | Program output: 63.0858401    
Correct output: 106.5813138606 | Program output: 106.0858401   
Correct output: 119.5781070021 | Program output: 119.0858401   
Correct output: -61.5008556741 | Program output: -61.0858401   
Correct output: 112.8928042415 | Program output: 112.0858401   
Correct output: -78.0563177466 | Program output: -79.0858401   
Correct output: -46.1015479935 | Program output: -46.0858401   
Correct output: 138.5168140128 | Program output: 138.0858401   
Correct output: 79.3111235509  | Program output: 79.0858401    
Correct output: -82.7680920585 | Program output: -82.0858401   
Correct output: -84.8984895408 | Program output: -84.0858401   
Correct output: -8.218244424   | Program output: -8.0858401    
Correct output: 110.7868673413 | Program output: 110.0858401   
Correct output: 162.1694424654 | Program output: 162.0858401   
Correct output: 109.2204830484 | Program output: 109.0858401   
Correct output: -107.8573642026 | Program output: -107.0858401  
Correct output: -54.1650214386 | Program output: -55.0858401   
Correct output: -106.7372858396 | Program output: -106.0858401  
Correct output: 51.23324299    | Program output: 51.0858401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.8619703011127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (float_inc float_stackdepth in1 float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod float_sub float_rot integer_mod integer_yankdup float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.8619703011127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add float_stackdepth float_sub integer_add integer_add float_frominteger integer_swap print_integer in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_sub integer_add integer_add integer_dec integer_add float_tan integer_swap print_integer integer_mult print_float integer_yank print_integer 86 print_float float_stackdepth float_sub integer_dec integer_dec integer_add float_tan integer_swap float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.2471 8 0.5469 8 0.0661 8 0.2794 8 0.6628 8 0.0104 7 0.8603 9 0.4955 7 0.4923 7 0.415 6 0.807 7 1.0295 9 0.0157 8 0.431 6 0.2253 9 0.6823 8 0.8126 6 0.1324 7 0.701 7 0.0836 9 0.1346 7 0.7715 7 0.9208 9 0.6514 7 0.1474 7]
Total: 200.62189999999998
Mean: 4.012438
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4456.784131899998
Median total errors in population: 204.63029999999998
Error averages by case: (169.83551979999967 8.832 164.9306570999997 9.096 172.8673771000013 8.95 161.90082109999955 9.455 170.48702700000013 7.942 175.2661929999993 8.737 172.2993865999999 8.835 170.27285190000066 8.352 169.68106219999882 8.228 171.7277114999995 7.058 167.84346249999987 8.403 171.05796719999904 9.397 172.39916330000023 9.149 171.84913079999922 7.265 165.3338861000002 9.368 172.30124059999983 8.743 169.7378855999993 7.511 169.6523193000005 8.142 165.62747149999964 7.818 171.63232349999888 9.983 168.08882220000018 8.146 172.49371820000073 9.061 168.99709920000006 9.941 173.33833570000073 9.046 161.44069889999966 8.264)
Error minima by case: (0.2441 7 0.3858 7 0.0631 6 0.2764 7 0.3368 5 0.0086 6 0.1393 6 0.4925 6 0.4893 6 0.412 5 0.1926 6 0.0291 7 0.0127 7 0.428 5 0.2223 7 0.2705 6 0.1401 6 0.1294 5 0.2985 4 0.0806 7 0.1316 5 0.1812 7 0.0782 8 0.3013 7 0.1444 6)
Average genome size in population (length): 101.503
Average program size in population (points): 102.503
Average percent parens in population: 0.010
Minimum age in population: 58.21299708654624
Maximum age in population: 62.77658916553082
Average age in population: 60.79793624770907
Median age in population: 60.82253460669335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.281
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.338
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 73766623
--- Timings ---
Current time: 1529615963566 milliseconds
Total Time:         148.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 35.5%
Fitness Testing:     75.3 seconds, 50.7%
Report:              20.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 integer_pop float_stackdepth float_cos float_inc integer_min integer_rot integer_fromfloat integer_pop float_shove in1 integer_shove float_min integer_shove integer_mod integer_mod float_sub float_rot integer_mod integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4991.372156199999
Median total errors in population: 204.62189999999998
Error averages by case: (192.14258539999935 8.952 187.40883319999972 9.546 193.66390570000067 8.895 181.1793006999999 9.676 194.47407079999954 8.31 196.62521569999907 8.926 191.63650570000053 9.308 193.6383280000011 8.615 194.0677723999996 8.433 190.7620211999994 7.172 190.50014790000057 8.48 189.52787469999967 9.365 192.70674540000064 9.318 196.05754129999943 7.433 188.10910049999978 9.826 193.43669669999957 8.81 186.71648079999886 7.511 190.72505250000094 8.196 187.08360470000065 7.934 195.77819469999963 10.012 190.56138109999958 8.287 192.95877260000145 9.003 186.2897968000003 10.2 192.41598110000126 9.128 183.29924659999975 8.271)
Error minima by case: (0.239 7 0.3843 7 0.0579 6 0.2712 7 0.2699 5 0.0086 6 0.0724 7 0.4372 5 0.4404 5 0.4068 5 0.1257 6 0.0291 7 0.0075 6 0.4228 5 0.2171 7 0.2504 6 0.1201 5 0.1242 5 0.2316 4 0.0754 8 0.1265 6 0.1612 6 0.0782 7 0.2813 7 0.1392 6)
Average genome size in population (length): 104.702
Average program size in population (points): 105.702
Average percent parens in population: 0.010
Minimum age in population: 59.21299708654624
Maximum age in population: 64.19157070512756
Average age in population: 62.21196358359214
Median age in population: 62.29185333952478
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.32
Error (vector) diversity:			 0.378
Behavioral diversity:				 0.381
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 76431673
--- Timings ---
Current time: 1529615968332 milliseconds
Total Time:         153.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.1 seconds, 35.3%
Fitness Testing:     78.1 seconds, 50.9%
Report:              21.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_553} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 integer_add integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup float_inc float_sub float_inc float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_553 tagged_948 integer_max float_flush integer_min integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4646.217658599999
Median total errors in population: 202.62189999999998
Error averages by case: (176.62703040000042 8.727 172.2464048999994 9.151 180.52953129999958 8.624 169.10667329999933 9.37 178.5724536999987 8.298 184.83143739999966 8.548 177.9951491999997 9.361 176.6516666000008 8.533 177.76111990000047 8.252 180.61833690000068 6.991 176.41921919999967 8.351 177.68885220000027 9.424 179.34787710000046 8.818 179.8182233000013 7.464 171.17953589999908 9.506 184.34987499999932 8.628 175.27908039999997 7.383 176.86442230000026 7.904 172.40987279999982 8.1 180.43556700000056 9.83 175.6127755999986 8.082 182.93631250000047 8.766 175.13587869999972 9.881 182.03662000000045 8.845 166.83574299999944 8.091)
Error minima by case: (0.239 7 0.3858 7 0.0579 6 0.2712 7 0.3382 6 0.0085 6 0.1407 6 0.4873 6 0.4841 6 0.4068 5 0.193 6 0.0295 7 0.0075 7 0.4228 5 0.2171 7 0.2504 6 0.1201 5 0.1242 5 0.3 5 0.0754 7 0.1265 5 0.1612 6 0.0782 8 0.2813 6 0.1392 6)
Average genome size in population (length): 106.273
Average program size in population (points): 107.273
Average percent parens in population: 0.009
Minimum age in population: 61.08031822081375
Maximum age in population: 65.35988920074146
Average age in population: 63.61463576794508
Median age in population: 63.66824464296826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.314
Error (vector) diversity:			 0.367
Behavioral diversity:				 0.367
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 79139121
--- Timings ---
Current time: 1529615972839 milliseconds
Total Time:         158.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.4 seconds, 35.1%
Fitness Testing:     80.6 seconds, 51.0%
Report:              21.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_yank} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.8619703011127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth integer_yank float_inc integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove integer_yank float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.8619703011127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult integer_add print_integer integer_mult print_float float_stackdepth float_mod float_inc print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4368.474767799999
Median total errors in population: 202.62189999999998
Error averages by case: (166.15519560000033 9.041 158.95757149999957 9.222 170.55076919999902 8.884 157.87327719999936 9.441 167.66609699999916 8.77 172.29976029999986 8.69 167.8628331999998 9.649 164.2321120000003 8.699 164.57351340000042 8.506 169.1674332000007 7.228 162.25426939999988 8.519 167.0247805000011 9.725 167.17458110000013 8.933 168.5858332000014 7.713 159.01307269999973 9.644 173.95137679999903 8.918 168.54125250000104 7.541 167.55970480000028 8.13 162.77184839999993 8.477 167.83324670000093 10.064 165.0726904999995 8.323 169.2272620000004 8.833 163.84268330000026 9.908 172.41945220000036 8.808 153.84315109999963 8.355)
Error minima by case: (0.244 7 0.3858 6 0.0629 6 0.2762 6 0.2699 6 0.0086 6 0.0724 7 0.4372 5 0.4404 6 0.4118 4 0.1257 6 0.0277 7 0.0125 6 0.4278 5 0.2221 7 0.2504 6 0.12 5 0.1292 5 0.2317 5 0.0804 7 0.1315 5 0.1612 6 0.0782 7 0.2813 7 0.1442 6)
Average genome size in population (length): 110.212
Average program size in population (points): 111.212
Average percent parens in population: 0.009
Minimum age in population: 62.56935234357434
Maximum age in population: 67.1076806539362
Average age in population: 65.05450169066266
Median age in population: 65.07385502913695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.343
Error (vector) diversity:			 0.378
Behavioral diversity:				 0.378
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 81949921
--- Timings ---
Current time: 1529615977819 milliseconds
Total Time:         162.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.6 seconds, 34.8%
Fitness Testing:     83.5 seconds, 51.3%
Report:              22.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_sub} {:instruction float_div} {:instruction float_rot} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup float_div float_sub float_div float_rot float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4698.067655099999
Median total errors in population: 202.0144
Error averages by case: (182.03942230000038 9.089 178.85009749999926 9.165 178.81459059999855 8.876 168.84303979999936 9.239 181.3945092999989 8.817 183.4722078999997 8.664 179.4201305999999 9.675 181.60157279999981 8.542 180.47233150000125 8.334 179.23975350000066 7.269 181.43740489999996 8.433 176.89707580000123 9.707 180.94065449999985 8.883 184.07115830000157 7.454 173.40559169999923 9.455 180.49959819999881 8.927 176.78694030000116 7.389 178.66833530000045 8.036 179.7637264 8.491 183.60343880000136 10.014 179.97908219999863 8.306 180.97964610000065 8.592 175.73381730000017 9.839 182.68873440000064 8.655 170.27379509999932 8.34)
Error minima by case: (0.2451 6 0.3857 6 0.0641 6 0.2774 7 0.2699 7 0.004 7 0.0724 7 0.4372 5 0.4404 5 0.413 5 0.1257 6 0.0378 7 0.0137 6 0.429 5 0.2233 7 0.2504 7 0.1201 5 0.1304 4 0.2317 6 0.0816 6 0.1326 5 0.1612 6 0.0792 8 0.2813 6 0.1454 6)
Average genome size in population (length): 112.584
Average program size in population (points): 113.584
Average percent parens in population: 0.009
Minimum age in population: 63.56935234357434
Maximum age in population: 68.57065657226218
Average age in population: 66.32723865444743
Median age in population: 66.38027184273409
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.307
Error (vector) diversity:			 0.348
Behavioral diversity:				 0.348
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 84821896
--- Timings ---
Current time: 1529615982323 milliseconds
Total Time:         167.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.9 seconds, 34.5%
Fitness Testing:     86.2 seconds, 51.5%
Report:              23.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_min} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 in1 integer_pop float_stackdepth float_cos float_inc integer_min integer_rot integer_fromfloat integer_pop float_shove in1 integer_shove float_min integer_shove integer_mod integer_mod float_sub float_rot integer_mod integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_dec float_shove print_integer float_div tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_min integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4563.196951999999
Median total errors in population: 201.0144
Error averages by case: (175.45823050000078 9.057 170.4657761000001 9.049 172.33351049999922 8.638 164.9881654999988 9.24 176.08035269999868 8.522 181.5308670999993 8.856 171.69184199999916 9.382 176.18631080000105 8.715 175.90259410000044 8.277 174.377816100001 7.36 173.60176939999923 8.368 173.87906040000078 9.492 176.3012332000007 8.62 177.9204741000021 7.153 165.7620917999991 8.899 179.52268949999984 8.935 173.0213452000007 7.404 175.8320513999996 7.737 171.34930539999945 8.738 178.44745300000068 9.942 173.61375309999858 8.243 177.90663699999988 8.845 170.48072089999954 9.926 177.84187109999988 8.908 162.15603109999978 8.239)
Error minima by case: (0.244 6 0.3857 7 0.0629 6 0.2762 7 0.2699 6 0.0023 7 0.0724 7 0.4372 6 0.4404 5 0.4118 4 0.1257 6 0.0301 7 0.0125 7 0.4278 5 0.2221 6 0.2505 7 0.1202 5 0.1292 5 0.2317 5 0.0804 8 0.1315 5 0.2266 6 0.0786 7 0.2814 6 0.1442 6)
Average genome size in population (length): 109.813
Average program size in population (points): 110.813
Average percent parens in population: 0.009
Minimum age in population: 64.56935234357434
Maximum age in population: 69.99235039868537
Average age in population: 67.52141897665474
Median age in population: 67.52153030974763
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.321
Error (vector) diversity:			 0.352
Behavioral diversity:				 0.354
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 87635496
--- Timings ---
Current time: 1529615986982 milliseconds
Total Time:         172.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.1 seconds, 34.3%
Fitness Testing:     89.1 seconds, 51.7%
Report:              23.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_rot} {:instruction in1} {:instruction float_max} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc integer_rot in1 float_max integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup float_inc float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_rot integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4372.8803548
Median total errors in population: 200.62189999999998
Error averages by case: (163.9336582000013 9.027 157.91159080000122 9.027 173.9007350999992 8.212 155.64926609999827 9.173 170.2192468999977 8.288 172.73341209999916 9.039 167.0254615999987 9.046 168.44525970000245 8.904 169.57554500000046 8.188 171.60719750000166 7.289 167.20791279999858 8.272 171.35094130000098 9.12 162.65135290000165 8.257 170.47462250000262 6.719 157.7905251999984 8.331 175.33702140000142 8.948 164.43795749999995 7.344 163.1436790999991 7.325 159.77336509999898 8.94 171.80490800000055 9.887 166.37616369999756 8.159 172.67203359999897 9.005 163.9802946999988 9.808 168.47866779999887 9.152 152.8355362000004 8.104)
Error minima by case: (0.2461 6 0.3858 6 0.0651 6 0.2784 7 0.2699 6 0.01 7 0.0724 7 0.4372 6 0.4404 6 0.414 5 0.1257 6 0.0295 7 0.0147 7 0.43 5 0.2243 6 0.2459 7 0.1155 5 0.1314 5 0.2316 6 0.0826 7 0.1336 6 0.1566 7 0.0792 7 0.2767 7 0.1464 6)
Average genome size in population (length): 106.717
Average program size in population (points): 107.717
Average percent parens in population: 0.009
Minimum age in population: 65.56935234357434
Maximum age in population: 70.87464127110245
Average age in population: 68.8353675910857
Median age in population: 68.89413887891995
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.264
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 90381321
--- Timings ---
Current time: 1529615991783 milliseconds
Total Time:         176.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.4 seconds, 34.2%
Fitness Testing:     91.7 seconds, 51.9%
Report:              24.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.8619703011127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_yank integer_fromfloat integer_pop float_shove in1 integer_shove float_min float_shove print_integer float_div tag_integer_848 integer_fromfloat integer_div integer_rot integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush float_swap 46.29272832092809 tagged_392 float_flush 46.8619703011127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add float_stackdepth float_sub integer_add integer_add float_frominteger print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_dup_times integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4445.4505512
Median total errors in population: 199.63029999999998
Error averages by case: (167.73948190000152 9.013 164.76223240000115 9.015 171.68688759999986 8.134 159.2643597999984 9.209 170.4494137999982 8.254 174.79150679999904 9.058 169.54802419999868 9.006 171.55602120000214 8.955 168.94847389999967 8.185 174.9832661000018 7.271 169.57865849999862 8.258 169.98565960000047 9.105 170.1570099000014 8.243 173.4987872000026 6.724 162.05581249999858 8.28 172.54225460000086 8.962 169.74236 7.391 168.13980459999894 7.366 164.9040661999989 8.996 172.16710479999983 9.905 169.71011309999787 8.198 176.6262089999989 9.093 167.39539089999877 9.778 174.35006689999884 9.213 157.11158570000026 8.144)
Error minima by case: (0.244 6 0.3858 6 0.0629 6 0.2762 7 0.2699 6 0.0096 7 0.0724 7 0.4372 6 0.4404 6 0.4118 5 0.1257 6 0.0378 7 0.0125 6 0.4278 4 0.2221 6 0.2504 7 0.12 6 0.1292 5 0.2316 6 0.0804 7 0.1315 6 0.1611 7 0.1465 7 0.2812 7 0.1442 6)
Average genome size in population (length): 106.434
Average program size in population (points): 107.434
Average percent parens in population: 0.009
Minimum age in population: 66.56935234357434
Maximum age in population: 72.27602676069614
Average age in population: 70.18553333525458
Median age in population: 70.2670000868444
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.261
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 93118296
--- Timings ---
Current time: 1529615996297 milliseconds
Total Time:         181.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.6 seconds, 34.0%
Fitness Testing:     94.4 seconds, 52.0%
Report:              25.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 integer_pop float_stackdepth in1 float_inc float_stackdepth in1 integer_add integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup float_inc float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add float_stackdepth integer_add integer_add float_frominteger integer_swap float_shove 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3821.255449
Median total errors in population: 198.01440000000002
Error averages by case: (139.6670816000014 8.866 136.49822509999984 8.873 147.87264440000064 8.012 135.2999971999985 9.023 146.8199827999993 8.031 154.82122469999942 8.94 141.4379086999988 8.867 146.1957991000009 8.817 147.01096429999905 8.009 150.45979540000172 7.078 145.03725129999918 8.072 150.4992830999997 8.918 145.33337200000025 8.088 147.21074040000215 6.492 133.2986033000003 8.101 152.89975000000024 8.776 143.59549729999995 7.186 144.46193379999877 7.184 135.9163069999994 8.85 148.20558069999916 9.776 144.2948945999992 8.012 152.72043859999877 8.918 142.40700799999877 9.667 149.10936879999875 9.039 130.63879679999872 7.948)
Error minima by case: (0.244 6 0.3858 6 0.0629 6 0.2762 6 0.2699 6 0.0096 6 0.0724 6 0.4372 6 0.4404 6 0.4118 5 0.1257 6 0.0291 7 0.0125 6 0.4278 5 0.2221 6 0.2504 6 0.1201 6 0.1292 5 0.2317 6 0.0804 7 0.1315 6 0.1612 7 0.0796 8 0.2813 7 0.1442 6)
Average genome size in population (length): 106.921
Average program size in population (points): 107.921
Average percent parens in population: 0.009
Minimum age in population: 68.58074178334633
Maximum age in population: 73.28799485032322
Average age in population: 71.53372528882943
Median age in population: 71.56936557701498
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.254
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 95865996
--- Timings ---
Current time: 1529616000875 milliseconds
Total Time:         186.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.9 seconds, 33.8%
Fitness Testing:     97.0 seconds, 52.1%
Report:              26.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction tag_float_531} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.8619703011127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_yank integer_fromfloat integer_pop float_shove in1 integer_shove float_min float_shove print_integer float_div tag_integer_848 integer_fromfloat integer_div integer_rot integer_dup_items tag_float_531 float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush float_swap 46.29272832092809 tagged_392 float_flush 46.8619703011127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add float_stackdepth float_sub integer_add integer_add float_frominteger print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_dup_times integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div tagged_948 integer_max float_flush integer_min integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4271.2224717
Median total errors in population: 198.01440000000002
Error averages by case: (159.00049020000165 8.997 153.24889910000053 9.005 170.49539170000003 8.138 149.58903809999836 9.201 164.95722249999838 8.206 168.76804509999926 9.082 166.66638499999843 8.968 162.30650230000182 8.92 164.14385469999945 8.148 167.03118370000175 7.241 159.72222009999857 8.239 169.08836720000033 9.061 161.10255000000106 8.241 164.66112340000282 6.639 154.44359339999866 8.192 171.4822297000009 8.941 165.49380179999997 7.348 160.95865879999906 7.311 155.05316729999888 8.986 164.87603509999954 9.906 160.6130570999983 8.158 170.45332029999884 9.095 159.1416358999987 9.809 167.82783079999882 9.204 146.9518683999998 8.11)
Error minima by case: (0.2466 6 0.3791 6 0.0655 5 0.2789 4 0.2699 6 0.009 5 0.0724 5 0.4372 5 0.4404 5 0.4145 4 0.1257 6 0.0378 7 0.0151 5 0.4304 5 0.2247 5 0.2504 4 0.1201 5 0.1318 5 0.2316 6 0.083 5 0.1341 6 0.1612 5 0.1465 7 0.2813 6 0.1468 4)
Average genome size in population (length): 106.423
Average program size in population (points): 107.423
Average percent parens in population: 0.009
Minimum age in population: 70.454171212239
Maximum age in population: 74.76438925788437
Average age in population: 72.96381529005146
Median age in population: 73.00963441138505
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.259
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 98597421
--- Timings ---
Current time: 1529616005543 milliseconds
Total Time:         190.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.2 seconds, 33.7%
Fitness Testing:     99.7 seconds, 52.3%
Report:              26.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 in1 integer_add integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub float_dup_times float_sub float_rot integer_flush integer_yankdup float_inc float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3987.7115832999993
Median total errors in population: 198.01440000000002
Error averages by case: (149.1611326000015 8.955 145.89596309999993 8.922 152.6511888000008 8.079 147.00392019999782 9.108 151.37751859999906 8.107 160.18547509999897 8.981 147.86841929999835 8.89 151.5130595000013 8.859 153.37191539999856 8.058 154.19834510000175 7.172 152.87015719999852 8.148 151.73698379999942 9.072 152.94640240000066 8.153 153.15096910000287 6.55 142.79849829999975 8.124 157.5175123000002 8.874 151.7092512 7.283 154.08349849999863 7.223 146.44174689999872 8.9 154.5400961999987 9.811 150.38115499999893 8.077 156.14732279999876 8.983 145.6752830999987 9.768 154.1565134999987 9.118 139.07925529999872 8.035)
Error minima by case: (0.2466 6 0.3858 6 0.0655 6 0.2789 6 0.2699 6 0.0096 7 0.0724 7 0.4372 6 0.4404 6 0.4145 4 0.1257 6 0.0291 7 0.0151 6 0.4304 5 0.2247 6 0.2504 6 0.1201 5 0.1318 5 0.2317 6 0.083 7 0.1341 6 0.1612 7 0.0796 8 0.2813 7 0.1468 6)
Average genome size in population (length): 106.316
Average program size in population (points): 107.316
Average percent parens in population: 0.009
Minimum age in population: 72.1846978220399
Maximum age in population: 76.1916367326282
Average age in population: 74.35452407431917
Median age in population: 74.40963780267917
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.229
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 101324721
--- Timings ---
Current time: 1529616010129 milliseconds
Total Time:         195.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.4 seconds, 33.5%
Fitness Testing:    102.5 seconds, 52.5%
Report:              27.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_rot} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction float_sub} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction integer_add} {:instruction float_tan} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_yank in1 float_inc float_stackdepth in1 integer_add integer_min integer_mod integer_yankdup float_inc float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove float_rot float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min float_sub integer_add print_integer integer_mult print_float 4 integer_add float_tan integer_swap float_tan integer_swap print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_stackdepth integer_stackdepth integer_stackdepth print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_min integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4199.3902479
Median total errors in population: 198.01440000000002
Error averages by case: (157.33380000000153 9.111 153.05999440000073 9.115 163.43941140000032 8.264 149.07056709999804 9.306 165.24813189999847 8.282 168.31107539999914 9.158 154.7256790999985 9.111 163.58573140000155 9.045 164.56891339999936 8.282 163.38861040000202 7.346 163.37739599999878 8.328 160.3207857999999 9.161 157.83292330000086 8.323 166.43789580000274 6.757 149.3209727999991 8.351 166.31852570000052 9.056 157.60137519999998 7.468 157.33756489999885 7.421 154.26098979999892 9.052 167.55558169999944 9.97 162.62766049999854 8.245 164.21167139999883 9.164 152.21010709999882 9.896 159.94461049999873 9.277 141.58027289999947 8.231)
Error minima by case: (0.2466 6 0.3813 7 0.0655 6 0.2789 7 0.2699 6 0.0098 7 0.0724 7 0.4372 5 0.4404 6 0.4145 5 0.1257 6 0.0374 7 0.0151 6 0.4304 4 0.2247 6 0.2504 7 0.12 6 0.1318 5 0.2317 6 0.083 8 0.1341 6 0.1612 7 0.1461 8 0.2812 7 0.1468 6)
Average genome size in population (length): 105.81
Average program size in population (points): 106.81
Average percent parens in population: 0.009
Minimum age in population: 73.30370825396987
Maximum age in population: 77.74577055391839
Average age in population: 75.73268678268428
Median age in population: 75.76295720811675
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.256
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 104036621
--- Timings ---
Current time: 1529616014926 milliseconds
Total Time:         199.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 33.4%
Fitness Testing:    105.1 seconds, 52.6%
Report:              27.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction tagged_800} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (float_add float_flush integer_fromfloat integer_pop float_shove in1 integer_shove float_min float_shove print_integer float_div tag_integer_848 tagged_800 integer_div integer_rot integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add float_stackdepth integer_add integer_add float_frominteger integer_swap float_shove 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult integer_mult print_float integer_yank integer_min integer_swap integer_add print_integer integer_mult float_yankdup float_stackdepth integer_sub float_div print_float tag_float_618 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4344.0433545
Median total errors in population: 201.01229999999998
Error averages by case: (161.61316960000156 8.956 157.94875000000076 8.958 165.7843854000005 8.109 161.22095419999755 9.13 169.27972379999815 8.123 176.99487869999868 9.017 159.59514829999833 8.927 166.79783280000203 8.899 166.89565169999915 8.102 171.13504380000188 7.214 166.75982009999834 8.169 168.3636977000002 9.031 164.88420500000134 8.177 170.25914150000312 6.611 153.54784639999866 8.214 175.811206200001 8.879 164.22915189999998 7.323 166.37853359999863 7.256 159.0803865999985 8.906 168.9019794999994 9.797 166.88960749999814 8.117 171.85277729999868 9.047 160.70641629999872 9.747 167.51675869999858 9.141 149.70028789999986 8.046)
Error minima by case: (0.244 6 0.3858 7 0.0629 6 0.2762 7 0.2699 6 0.009 7 0.0724 7 0.4372 6 0.4404 5 0.4118 5 0.1257 6 0.0378 7 0.0125 6 0.4278 5 0.2221 6 0.6791 7 0.8095 5 0.1292 5 0.2317 7 0.0804 8 0.1315 7 0.7684 7 0.1465 7 0.6483 7 0.1442 6)
Average genome size in population (length): 105.719
Average program size in population (points): 106.719
Average percent parens in population: 0.009
Minimum age in population: 74.30370825396987
Maximum age in population: 79.04599114234593
Average age in population: 77.15333673593722
Median age in population: 77.18715832697683
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.255
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 106743735
--- Timings ---
Current time: 1529616019678 milliseconds
Total Time:         204.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.0 seconds, 33.2%
Fitness Testing:    108.1 seconds, 52.8%
Report:              28.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_cos} {:instruction -49} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_206} {:instruction float_flush} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_tan} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_yank} {:instruction print_float} {:instruction in1} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 in1 integer_pop float_stackdepth float_cos -49 integer_min integer_rot integer_fromfloat integer_pop float_shove in1 integer_shove float_min integer_shove integer_mod integer_mod float_sub float_rot integer_mod integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_206 float_flush integer_rot integer_shove integer_mod float_shove print_integer float_div tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_tan integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult float_min integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_mult integer_yank print_float in1 float_mod integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4391.0877916
Median total errors in population: 199.63029999999998
Error averages by case: (167.05185470000143 8.966 161.87925440000112 8.978 168.06323219999993 8.113 160.64497639999826 9.141 169.80295479999822 8.18 177.00876579999917 9.009 163.35218009999863 8.91 167.96036030000198 8.896 167.9892306999997 8.16 172.41546020000166 7.206 167.4815674999988 8.229 166.66734590000053 9.082 171.43302650000152 8.177 170.23667330000245 6.68 158.46955199999877 8.201 172.696191900001 8.884 167.75799279999978 7.356 170.51703809999898 7.261 162.40654179999902 8.924 171.41010619999983 9.835 166.65166659999804 8.131 170.66001309999888 9.05 161.82679869999885 9.813 171.08794309999885 9.153 153.2400645000001 8.042)
Error minima by case: (0.244 6 0.3713 6 0.0629 6 0.2762 7 0.2614 6 0.0096 7 0.0639 7 0.4287 7 0.4319 6 0.4118 5 0.1172 6 0.0177 7 0.0125 6 0.4278 5 0.2221 6 0.2504 7 0.1201 5 0.1292 5 0.2231 6 0.0804 7 0.1315 6 0.1612 6 0.1264 7 0.2813 7 0.1442 5)
Average genome size in population (length): 105.035
Average program size in population (points): 106.035
Average percent parens in population: 0.009
Minimum age in population: 76.03990864038182
Maximum age in population: 80.7338656389029
Average age in population: 78.55119767914971
Median age in population: 78.53811254124123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.26
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 109431485
--- Timings ---
Current time: 1529616024329 milliseconds
Total Time:         209.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.1 seconds, 33.0%
Fitness Testing:    110.8 seconds, 52.9%
Report:              29.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_sin} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_cos} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_yank integer_fromfloat float_inc integer_min integer_rot integer_fromfloat integer_pop float_shove in1 integer_shove float_min integer_shove integer_mod integer_mod float_sub float_rot integer_mod float_div tag_float_222 float_flush in1 integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_sin in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap float_cos print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4719.823638499999
Median total errors in population: 201.0144
Error averages by case: (178.0014910000013 9.14 173.19225990000152 9.106 183.06163079999965 8.255 173.85078579999836 9.312 181.67618379999783 8.358 186.6078515999993 9.149 178.26502659999866 9.066 179.7765351000026 9.03 180.0588135000002 8.286 185.81791620000172 7.377 179.12126659999876 8.383 184.96383340000096 9.177 180.97161010000167 8.37 180.97521510000243 6.84 171.06721389999842 8.379 188.9530415000011 9.03 183.15759359999984 7.523 180.35985249999905 7.442 174.4673386999989 9.078 182.48645250000024 9.968 178.4613507999976 8.303 186.38070479999894 9.2 180.24235559999872 9.891 185.58128539999885 9.344 166.0760297000004 8.243)
Error minima by case: (0.2341 6 0.3713 6 0.053 6 0.2664 7 0.2554 7 0.0096 7 0.0579 6 0.4227 6 0.4259 6 0.402 5 0.1112 6 0.0287 7 0.0026 6 0.4179 5 0.2122 6 0.2504 7 0.1201 6 0.1193 5 0.2171 5 0.0705 7 0.1216 6 0.1612 7 0.0788 7 0.2813 7 0.1343 6)
Average genome size in population (length): 105.731
Average program size in population (points): 106.731
Average percent parens in population: 0.009
Minimum age in population: 77.36661977574073
Maximum age in population: 82.11961613499305
Average age in population: 79.9758068880343
Median age in population: 79.99983343744888
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.275
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 112135335
--- Timings ---
Current time: 1529616028822 milliseconds
Total Time:         214.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.4 seconds, 32.9%
Fitness Testing:    113.5 seconds, 53.0%
Report:              30.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_rot} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction float_sub} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_553} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction float_dup} {:instruction print_integer} {:instruction integer_mod} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 integer_add integer_min integer_mod integer_yankdup float_inc float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove float_rot float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min float_sub integer_add print_integer integer_mult print_float print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_553 tagged_948 integer_max float_flush integer_min float_dup print_integer integer_mod print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4052.3681591
Median total errors in population: 198.01440000000002
Error averages by case: (150.64980520000142 8.921 146.96143870000037 8.915 155.42041170000002 8.034 149.76866499999798 9.087 155.36342629999837 8.096 164.30787579999907 8.933 151.40187199999852 8.871 155.5462671000018 8.815 154.7259602999993 8.053 157.89439760000175 7.127 153.5655007999986 8.163 154.20361089999992 8.963 155.901611900001 8.138 156.33378160000265 6.569 144.39444379999907 8.151 161.99953020000063 8.812 152.93534269999998 7.27 156.11191009999885 7.233 148.00197849999878 8.877 156.63630209999948 9.801 153.57477759999838 8.055 160.77517539999891 8.976 147.8906304999987 9.691 158.4013289999988 9.103 138.9301142999993 8.018)
Error minima by case: (0.2461 5 0.3858 5 0.0651 5 0.2771 6 0.2654 5 0.0096 6 0.0724 5 0.4372 5 0.4404 5 0.414 5 0.1257 5 0.0374 7 0.0147 6 0.43 5 0.2243 5 0.2504 6 0.1201 6 0.1314 5 0.2317 5 0.0826 5 0.1336 5 0.1612 6 0.1445 6 0.2813 6 0.1464 5)
Average genome size in population (length): 106.275
Average program size in population (points): 107.275
Average percent parens in population: 0.009
Minimum age in population: 78.94323296050116
Maximum age in population: 83.53952459181048
Average age in population: 81.36674184103497
Median age in population: 81.41100344750815
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.256
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 114853340
--- Timings ---
Current time: 1529616033721 milliseconds
Total Time:         218.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.7 seconds, 32.8%
Fitness Testing:    116.3 seconds, 53.2%
Report:              30.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction tagged_364} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_dec} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc in1 integer_pop float_stackdepth in1 float_inc integer_fromfloat integer_shove float_min float_shove print_integer float_div tag_integer_848 integer_fromfloat integer_div integer_rot integer_mod float_sub float_div tag_float_222 float_flush in1 float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger tagged_364 integer_shove float_frominteger float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat float_dup tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_dec print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4205.199290299999
Median total errors in population: 198.01440000000002
Error averages by case: (156.8532051000015 8.929 153.30746330000127 8.944 163.47235310000008 8.073 152.81106049999872 9.095 161.82995369999858 8.119 166.63324789999922 8.939 157.541092799999 8.928 158.99079700000163 8.853 159.29314139999966 8.115 165.4052422000017 7.193 158.10016609999917 8.179 166.28730620000067 9.106 159.0782552000011 8.124 163.4187407000023 6.621 148.69331049999937 8.186 166.9991591000009 8.846 162.34652309999993 7.311 159.1965498999989 7.244 155.22688189999928 8.918 160.37302029999972 9.776 159.10641099999827 8.091 166.8686087999988 9.017 158.8900833999988 9.801 164.2414407999988 9.121 148.65027629999966 8.056)
Error minima by case: (0.246 6 0.3858 7 0.0649 5 0.2783 7 0.2699 6 0.0097 7 0.0724 7 0.4372 6 0.4404 6 0.4139 5 0.1257 6 0.0325 7 0.0146 6 0.4298 5 0.2241 6 0.2504 7 0.1201 6 0.1313 5 0.2317 6 0.0825 8 0.1335 6 0.1612 7 0.1412 8 0.2813 7 0.1463 7)
Average genome size in population (length): 106.565
Average program size in population (points): 107.565
Average percent parens in population: 0.009
Minimum age in population: 80.39919061779672
Maximum age in population: 84.93409681049815
Average age in population: 82.77824544331374
Median age in population: 82.81957539560528
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.261
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 117577840
--- Timings ---
Current time: 1529616038305 milliseconds
Total Time:         223.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 32.6%
Fitness Testing:    119.0 seconds, 53.2%
Report:              31.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_add} {:instruction in1} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_div} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_frominteger} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_add} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 in1 float_inc float_stackdepth in1 integer_add integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_inc integer_div float_inc float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div float_inc float_sub float_div tag_float_222 integer_add in1 integer_shove integer_mult float_shove float_div float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_mult float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add integer_yank float_flush integer_min integer_swap integer_add print_integer float_frominteger print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_dup_times integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_add integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_flush float_stackdepth integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4450.438109099999
Median total errors in population: 198.01440000000002
Error averages by case: (166.83075230000136 9.018 164.7720288000009 9.046 169.7320979000001 8.118 161.78453909999797 9.158 171.03053099999826 8.244 177.40680729999903 9.042 166.00415359999835 8.978 170.822542000002 8.949 171.25438809999952 8.182 171.63903930000174 7.261 171.02115929999863 8.262 175.08518150000032 9.139 170.65189540000137 8.218 171.70916030000274 6.694 160.9826963999986 8.24 172.92484190000079 8.89 165.14470849999998 7.359 170.03006839999892 7.356 165.46439519999882 9.041 170.77421889999945 9.879 171.299595699998 8.197 176.86708809999885 9.073 168.22958429999872 9.858 172.50327619999877 9.204 162.91935960000038 8.148)
Error minima by case: (0.2466 5 0.3791 5 0.0655 5 0.2789 6 0.2699 5 0.0096 6 0.0724 5 0.4372 5 0.4404 5 0.4145 5 0.1257 5 0.0378 7 0.0151 6 0.4304 5 0.2247 5 0.2503 6 0.12 5 0.1318 5 0.2317 5 0.083 5 0.1341 5 0.1611 6 0.1465 8 0.2812 6 0.1468 5)
Average genome size in population (length): 106.902
Average program size in population (points): 107.902
Average percent parens in population: 0.009
Minimum age in population: 81.58175075865383
Maximum age in population: 86.05324214771262
Average age in population: 84.16587084979555
Median age in population: 84.19928239877983
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.253
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 120308990
--- Timings ---
Current time: 1529616043400 milliseconds
Total Time:         228.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        74.2 seconds, 32.5%
Fitness Testing:    121.9 seconds, 53.4%
Report:              32.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_tan} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 19.27440681181946} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction float_shove} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction float_yank} {:instruction float_inc} {:instruction tag_float_618} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 integer_min integer_rot integer_fromfloat integer_pop float_tan in1 integer_shove float_min integer_shove integer_mod integer_yankdup integer_dup_times float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 19.27440681181946 float_flush float_rot in2 float_shove float_sub float_shove integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush float_yank float_inc tag_float_618 integer_fromfloat integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4659.188375499999
Median total errors in population: 201.0144
Error averages by case: (177.48155550000152 9.102 171.83567890000123 9.095 173.2446600000001 8.235 177.35340719999843 9.272 179.4109401999977 8.295 186.65309319999903 9.137 172.39343499999876 9.058 178.5397825000024 9.016 178.68525170000018 8.248 182.2205283000017 7.371 178.35526639999875 8.346 177.92030650000063 9.22 183.75815880000175 8.364 179.69774410000267 6.84 170.78680459999836 8.319 183.71462170000137 8.987 177.18598629999997 7.515 181.02572859999887 7.447 173.88293029999892 9.074 179.25846910000007 9.926 178.7048725999976 8.287 182.0348340999989 9.178 172.86545569999868 9.915 180.60054609999887 9.319 165.79631810000004 8.216)
Error minima by case: (0.2466 6 0.3858 6 0.0655 6 0.2789 7 0.2699 6 0.0096 7 0.0724 7 0.4372 6 0.4404 6 0.4145 5 0.1257 6 0.0359 7 0.0151 7 0.4304 4 0.2247 6 0.2504 7 0.1201 6 0.1318 5 0.2316 6 0.083 7 0.1341 6 0.1612 7 0.1446 7 0.2813 7 0.1468 6)
Average genome size in population (length): 106.874
Average program size in population (points): 107.874
Average percent parens in population: 0.009
Minimum age in population: 82.67908776095814
Maximum age in population: 87.54382008970181
Average age in population: 85.57243279620948
Median age in population: 85.63257902001547
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.254
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 123038815
--- Timings ---
Current time: 1529616047904 milliseconds
Total Time:         233.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        75.5 seconds, 32.4%
Fitness Testing:    124.6 seconds, 53.4%
Report:              32.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_yank} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_min} {:instruction float_min} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 float_inc in1 float_inc integer_min integer_rot integer_flush float_sin integer_mod integer_stackdepth float_pop integer_yankdup integer_dup_times float_inc float_sub integer_mod float_sub float_div integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_yank float_frominteger integer_swap print_integer 86 print_float float_min float_min float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min float_dup_times integer_add print_integer integer_mult print_float float_stackdepth float_mod float_div print_float tag_float_618 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth integer_min print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4302.8714089000005
Median total errors in population: 198.01440000000002
Error averages by case: (161.63761850000145 8.879 158.118551800001 8.887 166.51614609999987 7.977 157.81087599999805 9.028 163.24595289999843 8.069 170.1312679999989 8.907 163.30815119999832 8.852 163.73491670000195 8.801 163.62897429999927 8.013 169.16667250000185 7.103 162.72624059999865 8.102 165.64487660000017 8.976 165.79957110000143 8.082 164.88125190000267 6.496 156.5816377999988 8.114 171.58521560000113 8.766 166.89268359999994 7.219 164.4535999999987 7.146 159.0172239999988 8.865 164.95923009999936 9.744 161.00509299999806 8.035 171.31269159999877 8.93 160.79921819999856 9.7 169.7673421999987 9.056 150.42040459999964 7.979)
Error minima by case: (0.2466 6 0.3674 6 0.0655 6 0.2788 7 0.2699 6 0.0096 7 0.0724 7 0.4372 6 0.4404 5 0.4144 5 0.1257 7 0.0289 7 0.0151 6 0.4304 5 0.2247 6 0.2504 7 0.1201 6 0.1318 5 0.2317 6 0.083 8 0.1341 6 0.1612 7 0.0798 7 0.2813 7 0.1468 5)
Average genome size in population (length): 106.345
Average program size in population (points): 107.345
Average percent parens in population: 0.009
Minimum age in population: 83.67908776095814
Maximum age in population: 88.91341025193985
Average age in population: 86.97845479703523
Median age in population: 87.0229684986892
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.246
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 125753765
--- Timings ---
Current time: 1529616052533 milliseconds
Total Time:         237.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        76.7 seconds, 32.3%
Fitness Testing:    127.3 seconds, 53.6%
Report:              33.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_rot} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction integer_mod} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction float_mod} {:instruction float_mod} {:instruction float_dup_times} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction print_integer})
Best program: (in1 in1 float_swap in1 float_inc integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup float_inc float_sub integer_mod float_sub float_div tag_float_222 integer_swap in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_rot float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_yank float_swap 46.29272832092809 tagged_392 float_flush integer_mod tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_618 float_mod float_mod float_dup_times tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth integer_add print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4010.2580768999997
Median total errors in population: 198.01440000000002
Error averages by case: (152.6566722000017 8.944 148.01681070000063 8.938 152.77268990000084 8.057 143.77003429999812 9.084 153.09676729999907 8.14 158.99500909999907 8.957 152.7248864999985 8.895 150.36067890000126 8.903 151.47668809999868 8.11 154.87824380000194 7.127 151.86951199999865 8.151 153.06689679999954 9.012 154.48774750000086 8.115 153.9853655000028 6.562 144.26741579999967 8.149 159.14670930000034 8.825 155.29213889999997 7.277 155.2581167999986 7.222 148.1033404999988 8.932 151.66858059999873 9.805 150.1473936999988 8.108 157.5430877999986 9.001 148.6549056999986 9.773 157.9615101999986 9.121 138.82087499999872 8.028)
Error minima by case: (0.243 4 0.3858 4 0.0619 4 0.2752 3 0.2699 4 0.0098 4 0.0724 4 0.4372 3 0.4404 4 0.4108 4 0.1257 4 0.0378 7 0.0115 4 0.4268 4 0.2211 4 0.2504 3 0.1201 4 0.1282 4 0.2316 4 0.0794 3 0.1305 4 0.1612 4 0.1465 7 0.2813 5 0.1432 3)
Average genome size in population (length): 105.64
Average program size in population (points): 106.64
Average percent parens in population: 0.009
Minimum age in population: 85.84918310628065
Maximum age in population: 90.17727883090636
Average age in population: 88.33006134517487
Median age in population: 88.36811966841923
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.239
Error (vector) diversity:			 0.264
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 128446865
--- Timings ---
Current time: 1529616057289 milliseconds
Total Time:         242.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        78.0 seconds, 32.2%
Fitness Testing:    129.9 seconds, 53.6%
Report:              34.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction float_max} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_tan} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction integer_dec} {:instruction float_flush} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_mult} {:instruction print_float} {:instruction float_inc} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_dec} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_add} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction tag_float_618} {:instruction integer_dup} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (float_flush float_inc float_stackdepth in1 float_max in1 float_inc integer_min integer_rot integer_flush integer_mod integer_rot float_tan tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat float_swap integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float integer_dec float_flush float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_mult print_float float_inc print_integer integer_mult print_float 4 94 float_dec float_flush integer_min integer_swap integer_add print_integer integer_add integer_mult print_float float_stackdepth float_mod float_inc print_float tag_float_618 integer_dup integer_max float_flush integer_min integer_shove integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4201.4374412
Median total errors in population: 198.01440000000002
Error averages by case: (152.71927900000156 8.954 148.5599846000001 8.998 163.08749440000045 8.11 154.1943295999982 9.152 164.24580819999875 8.182 173.58969949999903 9.01 151.56785139999872 8.934 163.49862760000153 8.906 163.6028314999989 8.146 169.2066587000019 7.226 161.60936039999868 8.202 165.1875093 9.056 159.52714370000064 8.195 165.3114787000028 6.655 147.30612159999976 8.233 173.4263113000006 8.911 155.94826979999996 7.369 157.40420439999875 7.273 148.89185449999894 8.923 164.6147312999989 9.817 161.55069639999834 8.138 170.36884589999886 9.042 151.7093427999987 9.731 160.28089429999866 9.178 141.6361122999989 8.051)
Error minima by case: (0.246 6 0.3813 7 0.0649 6 0.2783 6 0.2654 6 0.0096 7 0.0679 7 0.4327 6 0.4359 5 0.4139 5 0.1212 6 0.0378 7 0.0146 6 0.4298 5 0.2241 6 0.2504 6 0.1201 6 0.1313 5 0.2271 6 0.0825 7 0.1335 6 0.1612 7 0.1465 7 0.2813 7 0.1463 6)
Average genome size in population (length): 105.077
Average program size in population (points): 106.077
Average percent parens in population: 0.010
Minimum age in population: 86.9748445659797
Maximum age in population: 91.49353365456417
Average age in population: 89.75344990315492
Median age in population: 89.80158940701929
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.257
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 131124940
--- Timings ---
Current time: 1529616061693 milliseconds
Total Time:         246.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        79.3 seconds, 32.1%
Fitness Testing:    132.5 seconds, 53.7%
Report:              35.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_add} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_swap} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_mult} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (integer_swap float_inc in1 float_inc float_stackdepth in1 integer_add integer_min integer_rot integer_add -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub integer_yankdup float_dup_times float_sub float_swap float_sub float_div tag_float_222 float_flush in1 print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 46.29272832092809 float_flush float_rot in2 float_mult float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_mult integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_add float_flush integer_min integer_swap 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_shove print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5094.578170099998
Median total errors in population: 201.0144
Error averages by case: (193.30422940000145 9.146 188.866638100002 9.11 194.99761539999915 8.253 184.31697889999805 9.245 196.73425279999674 8.356 206.3560904999988 9.134 193.6134935999984 9.076 195.94883820000368 9.064 198.67673840000063 8.31 198.06555950000188 7.389 195.7676703999982 8.395 198.23655320000148 9.188 198.14019050000286 8.359 199.644827600003 6.876 185.0828344999972 8.355 203.9494262000021 9.004 194.3703726999999 7.508 197.03171629999903 7.445 189.36591609999857 9.122 197.40949640000068 9.964 194.2553783999967 8.312 205.2142513999988 9.206 190.41461959999862 9.874 202.07332049999886 9.347 176.4731615000013 8.23)
Error minima by case: (0.2466 6 0.3777 7 0.0655 6 0.2788 7 0.2618 6 0.0031 6 0.0643 7 0.4291 6 0.4323 6 0.4144 4 0.1176 6 0.0378 7 0.0151 6 0.4304 4 0.2247 6 0.2405 7 0.1102 5 0.1318 5 0.2235 6 0.083 7 0.1341 6 0.1513 7 0.1465 8 0.2714 7 0.1468 6)
Average genome size in population (length): 105.275
Average program size in population (points): 106.275
Average percent parens in population: 0.010
Minimum age in population: 88.85812099590703
Maximum age in population: 93.1006446128824
Average age in population: 91.22593387711201
Median age in population: 91.27432408949468
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.952
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.952
Total error diversity:				 0.283
Error (vector) diversity:			 0.326
Behavioral diversity:				 0.33
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 133805740
--- Timings ---
Current time: 1529616066724 milliseconds
Total Time:         251.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        80.5 seconds, 32.0%
Fitness Testing:    135.4 seconds, 53.8%
Report:              35.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction in1} {:instruction integer_swap} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_shove} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_mult} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_mod} {:instruction float_div} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_yank} {:instruction print_float} {:instruction in1} {:instruction float_mod} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_inc float_stackdepth in1 integer_add in1 integer_swap integer_min integer_rot integer_fromfloat integer_pop integer_stackdepth integer_rot integer_flush integer_fromfloat integer_pop float_shove in1 integer_shove float_min integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_mod float_sub integer_shove integer_mod integer_shove float_div tag_float_222 float_flush float_mod integer_shove integer_mod float_shove float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_mult integer_mult print_float integer_yank float_flush integer_yankdup integer_swap integer_add print_integer integer_mult print_float integer_dup_times float_mod float_div print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult float_min integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_mult integer_yank print_float in1 float_mod integer_flush float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4436.359485599999
Median total errors in population: 201.0144
Error averages by case: (167.26369960000142 8.961 163.75478490000137 8.945 171.0291714999995 8.042 161.9931151999983 9.127 169.38592029999808 8.149 176.32270189999915 8.938 167.84794569999875 8.902 168.7046679000023 8.867 168.7580305999999 8.121 176.06995990000163 7.17 167.54271369999861 8.206 171.54185820000072 9.035 171.62278840000172 8.145 170.40850770000256 6.641 158.22717149999866 8.149 178.04173320000132 8.833 171.09030739999994 7.352 169.50481559999886 7.218 162.86803159999891 8.946 170.48871260000004 9.797 166.7375643999979 8.102 177.3101464999988 9.023 168.00523099999876 9.721 176.4059461999988 9.163 153.84896010000017 8.032)
Error minima by case: (0.2466 6 0.3858 6 0.0655 5 0.2789 7 0.2699 6 0.0096 7 0.0724 7 0.4372 6 0.4404 6 0.4145 5 0.1257 6 0.0287 7 0.0151 6 0.4304 5 0.2247 6 0.2504 7 0.1201 6 0.1318 5 0.2317 6 0.083 6 0.1341 6 0.1612 6 0.08 7 0.2813 7 0.1468 6)
Average genome size in population (length): 104.87
Average program size in population (points): 105.87
Average percent parens in population: 0.010
Minimum age in population: 89.85812099590703
Maximum age in population: 94.94913957158755
Average age in population: 92.59187864237639
Median age in population: 92.62290487177798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.276
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.316
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 136474840
--- Timings ---
Current time: 1529616071157 milliseconds
Total Time:         256.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        81.7 seconds, 31.9%
Fitness Testing:    138.0 seconds, 53.8%
Report:              36.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_mod} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc integer_mod in1 integer_add integer_min float_frominteger integer_flush -54 integer_yankdup integer_dup_times integer_add integer_mod float_sub float_rot integer_mod integer_yankdup float_inc float_sub float_inc float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_max float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4016.8913791999994
Median total errors in population: 198.01440000000002
Error averages by case: (152.4807561000014 8.875 148.51341770000087 8.871 154.69992360000023 8.004 149.65202809999803 9.04 147.66581509999878 8.086 156.405869399999 8.901 154.37517499999848 8.846 150.49109190000172 8.799 148.02288469999905 8.04 156.59442710000167 7.112 150.67296279999866 8.139 153.05955499999996 9.036 155.75917200000129 8.077 148.55415840000273 6.525 147.25701279999882 8.107 157.88466510000075 8.74 158.06642959999996 7.257 154.56648609999888 7.17 147.70087109999884 8.879 150.82016799999934 9.731 147.05387259999858 8.027 156.5505706999989 8.987 155.0818108999987 9.754 161.7467113999989 9.081 143.11854399999953 8.013)
Error minima by case: (0.2466 6 0.3784 6 0.0655 5 0.2789 4 0.2699 6 0.009 5 0.0724 5 0.4372 6 0.4404 5 0.4145 5 0.1257 6 0.0378 7 0.0151 5 0.4304 5 0.2247 5 0.2504 4 0.1201 5 0.1318 5 0.2316 6 0.083 5 0.1341 6 0.1612 5 0.1465 8 0.2813 6 0.1468 4)
Average genome size in population (length): 103.594
Average program size in population (points): 104.594
Average percent parens in population: 0.010
Minimum age in population: 91.21261557841952
Maximum age in population: 96.29091152214708
Average age in population: 94.04324819076623
Median age in population: 94.09242214972139
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.245
Error (vector) diversity:			 0.267
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 139111406
--- Timings ---
Current time: 1529616075710 milliseconds
Total Time:         260.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        83.0 seconds, 31.8%
Fitness Testing:    140.6 seconds, 53.9%
Report:              37.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_swap} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction in1} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 integer_add integer_min integer_rot integer_flush -54 integer_swap integer_dup_times integer_dup_times float_sub integer_mod float_sub float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat float_mult integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_add integer_add float_frominteger float_sub integer_add integer_add float_frominteger integer_swap integer_add integer_add float_frominteger print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_dup_times integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_swap integer_min integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div in1 integer_max float_flush integer_min integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_dup_times print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4573.4568882
Median total errors in population: 201.0144
Error averages by case: (171.00635270000146 9.148 167.40347070000104 9.162 176.2295309999996 8.245 169.5663125999983 9.255 172.1723972999981 8.335 183.55018909999927 9.096 176.22832669999866 9.063 173.88088030000222 9.038 172.3603851999996 8.293 177.48003140000174 7.35 170.48948449999864 8.418 176.4711036000007 9.21 177.0283665000017 8.291 174.02331470000277 6.835 166.96929219999853 8.308 181.34617290000122 8.972 178.27566769999993 7.493 178.94107929999893 7.414 167.5608436999988 9.133 173.64139889999984 9.977 171.508421899998 8.327 184.56939529999883 9.172 172.19566869999875 9.902 180.8387205999989 9.343 163.71608070000028 8.224)
Error minima by case: (0.2466 6 0.3791 6 0.0655 5 0.2789 6 0.2632 6 0.0096 7 0.0657 7 0.4305 5 0.4337 5 0.4145 4 0.119 6 0.0277 7 0.0151 6 0.4304 5 0.2247 6 0.2504 6 0.1201 6 0.1318 5 0.225 6 0.083 6 0.1341 6 0.1612 7 0.1364 7 0.2813 7 0.1468 6)
Average genome size in population (length): 102.922
Average program size in population (points): 103.922
Average percent parens in population: 0.010
Minimum age in population: 92.96399846870673
Maximum age in population: 97.6286807188824
Average age in population: 95.4604741770979
Median age in population: 95.47512786610967
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.96
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.96
Total error diversity:				 0.271
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 141726972
--- Timings ---
Current time: 1529616080129 milliseconds
Total Time:         265.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.3 seconds, 31.8%
Fitness Testing:    143.2 seconds, 54.0%
Report:              37.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_swap} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 45.07284750349333} {:instruction float_flush} {:instruction float_rot} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_integer} {:instruction 4} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 integer_add integer_min integer_rot integer_flush -54 integer_swap integer_dup_times integer_dup_times float_flush in1 integer_shove integer_mod float_shove integer_shove integer_mod float_shove tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_swap integer_min integer_fromfloat integer_div float_swap tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult integer_yankdup float_inc integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 45.07284750349333 float_flush float_rot float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_dup_times float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float print_integer 4 integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3907.3638909
Median total errors in population: 198.01440000000002
Error averages by case: (143.1475065000014 8.92 139.47791150000006 8.936 148.4882485000006 7.958 140.45141899999862 9.014 143.40924859999922 8.066 158.16543099999936 8.878 148.65201989999875 8.826 142.327669300001 8.819 142.66025089999894 8.053 156.95618080000173 7.091 141.81681999999893 8.15 154.98513280000017 8.925 155.1543833000008 8.047 144.37621200000234 6.511 138.02633339999974 8.053 157.3723919000006 8.718 157.22873249999984 7.202 153.27786139999893 7.121 139.81026589999922 8.922 145.07232869999896 9.761 141.056741199999 8.069 159.4461576999989 8.925 153.05106989999868 9.644 159.61312299999892 9.091 133.706451199999 7.934)
Error minima by case: (0.244 6 0.3858 7 0.0629 5 0.2762 7 0.2699 6 0.0096 7 0.0724 7 0.4372 7 0.4404 6 0.4118 4 0.1257 6 0.0377 7 0.0125 6 0.4278 5 0.2221 6 0.2504 7 0.1201 6 0.1292 5 0.2317 7 0.0804 8 0.1315 6 0.1612 6 0.1464 8 0.2813 7 0.1442 6)
Average genome size in population (length): 102.823
Average program size in population (points): 103.823
Average percent parens in population: 0.010
Minimum age in population: 94.39096080594196
Maximum age in population: 98.9908155607178
Average age in population: 96.87173779198883
Median age in population: 96.93103953650217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.249
Error (vector) diversity:			 0.27
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 144337063
--- Timings ---
Current time: 1529616084499 milliseconds
Total Time:         269.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.4 seconds, 31.7%
Fitness Testing:    145.7 seconds, 54.0%
Report:              38.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -52} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_yank} {:instruction float_flush} {:instruction float_div} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction print_integer} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_553} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth integer_div float_inc integer_min integer_rot float_stackdepth integer_add integer_min integer_rot integer_flush -52 integer_swap integer_dup_times float_sub integer_mod float_sub float_rot integer_mod integer_yankdup float_inc float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub float_yankdup integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_dup_times integer_stackdepth print_integer integer_yank float_flush float_div integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min print_integer integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_553 tagged_948 integer_max float_flush integer_min integer_add print_integer integer_mult print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4517.4615687
Median total errors in population: 198.82235
Error averages by case: (169.97679980000146 8.918 167.2150395000015 8.941 171.83896889999943 8.061 165.82499619999817 9.067 171.1521405999978 8.102 180.77046989999903 8.932 172.70873949999844 8.896 172.13317840000275 8.851 171.3366840000002 8.05 175.57887410000168 7.176 170.38386329999852 8.164 173.63078060000095 9.095 175.09488760000218 8.133 172.28016190000284 6.556 163.5029713999984 8.107 178.62598570000148 8.808 176.1388064999999 7.275 175.7695508999989 7.196 166.59484189999867 8.919 172.63137660000018 9.76 170.5092108999976 8.07 181.98566489999885 8.975 169.51388079999876 9.766 179.61334369999886 9.15 161.68735110000046 7.995)
Error minima by case: (0.2426 6 0.3858 6 0.0615 6 0.2749 5 0.2699 6 0.0031 6 0.0724 6 0.4372 5 0.4404 5 0.4105 5 0.1257 6 0.0378 7 0.0111 6 0.4264 4 0.2207 6 0.2504 5 0.1201 5 0.1278 5 0.2317 6 0.079 6 0.1301 5 0.1612 6 0.1465 8 0.2813 7 0.1428 5)
Average genome size in population (length): 102.259
Average program size in population (points): 103.259
Average percent parens in population: 0.010
Minimum age in population: 95.93413967143863
Maximum age in population: 100.3064590803914
Average age in population: 98.26004287465594
Median age in population: 98.31393024638552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.272
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 146933263
--- Timings ---
Current time: 1529616089129 milliseconds
Total Time:         274.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        86.7 seconds, 31.6%
Fitness Testing:    148.5 seconds, 54.1%
Report:              39.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_rot} {:instruction float_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction in1} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction in1} {:instruction integer_shove} {:instruction float_flush} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction integer_dup_times} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_div} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_553} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction print_float} {:instruction tag_float_618} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction integer_mod} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (float_max float_stackdepth in1 integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub integer_rot float_sub float_rot float_dup_times integer_yankdup in1 tag_float_222 float_flush in1 integer_yankdup integer_mod integer_div integer_mod float_shove print_integer integer_mod float_shove print_integer float_div in1 integer_shove float_flush tag_float_222 float_flush in1 integer_shove float_frominteger integer_div float_swap 46.29272832092809 tagged_392 float_flush integer_dup_times tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_swap float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult integer_div integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_553 tagged_948 integer_max float_flush integer_min print_float tag_float_618 integer_mult float_dup print_integer integer_mod print_float integer_stackdepth in1 integer_stackdepth float_max float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4489.950071799999
Median total errors in population: 198.01440000000002
Error averages by case: (166.1633498000015 8.971 162.71740680000156 8.925 173.18436429999937 8.061 168.94839979999804 9.144 169.05377499999756 8.199 179.54094539999898 8.981 170.01232089999863 8.933 169.16316120000283 8.888 168.51141690000023 8.103 179.5786305000018 7.243 168.40617669999847 8.209 171.81026900000114 9.056 174.51308140000228 8.193 169.9803664000028 6.632 162.35936529999807 8.156 184.60237460000178 8.851 176.60979509999993 7.353 173.35610479999895 7.318 162.8710553999987 8.963 171.37875980000027 9.82 167.60618519999719 8.109 181.53501349999885 9.031 167.78863259999875 9.75 180.5522665999988 9.187 157.56285480000068 8.068)
Error minima by case: (0.2466 6 0.3858 5 0.0655 6 0.2789 5 0.2699 6 0.0096 6 0.0724 6 0.4372 4 0.4404 5 0.4145 5 0.1257 6 0.0378 7 0.0151 6 0.4304 5 0.2247 6 0.2504 5 0.1201 6 0.1318 5 0.2317 5 0.083 5 0.1341 5 0.1612 6 0.1465 8 0.2813 6 0.1468 5)
Average genome size in population (length): 102.195
Average program size in population (points): 103.195
Average percent parens in population: 0.010
Minimum age in population: 97.48860287314047
Maximum age in population: 101.840982231139
Average age in population: 99.69108632766743
Median age in population: 99.73690782393194
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.952
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.952
Total error diversity:				 0.239
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 149527379
--- Timings ---
Current time: 1529616093734 milliseconds
Total Time:         278.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.9 seconds, 31.5%
Fitness Testing:    151.1 seconds, 54.2%
Report:              39.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_755} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_pop} {:instruction tag_integer_300} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 48.8235874723645} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_dup_items} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction float_yankdup} {:instruction float_mod} {:instruction tag_float_243} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction integer_mod} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_stackdepth in1 integer_mod float_shove print_integer float_div tag_integer_848 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_755 float_frominteger integer_fromfloat float_inc integer_pop tag_integer_300 float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 48.8235874723645 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap float_dup_items 86 print_float float_stackdepth float_flush integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush float_flush integer_min integer_swap integer_max print_integer integer_mult print_float 4 float_yankdup float_mod tag_float_243 integer_min integer_swap integer_add print_integer integer_dup_times integer_max float_stackdepth float_mod float_div print_float tag_float_618 integer_mult float_dup print_integer integer_mod print_float integer_stackdepth in1 integer_stackdepth float_max float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4332.419288499999
Median total errors in population: 198.01440000000002
Error averages by case: (161.08960460000145 8.878 159.00701680000063 8.882 168.7495965000003 7.996 158.91341819999812 9.041 163.35748849999857 8.051 170.52595799999898 8.901 166.48067459999848 8.838 164.55341230000172 8.796 163.7920191999992 8.026 170.87346620000176 7.136 163.9014915999986 8.121 168.2162415000001 9.008 165.20319120000107 8.089 164.20725870000274 6.495 157.86762259999898 8.056 172.60938600000094 8.773 167.56249899999995 7.232 164.94641819999876 7.179 158.35758079999874 8.87 165.34835719999924 9.739 163.19934689999826 8.046 173.64842879999884 8.955 164.10467019999868 9.727 171.95714689999878 9.06 154.07299399999994 7.979)
Error minima by case: (0.2459 6 0.3858 5 0.0648 5 0.2782 6 0.2699 6 0.0096 6 0.0724 6 0.4372 4 0.4404 5 0.4138 5 0.1257 6 0.0378 7 0.0144 6 0.4297 5 0.224 6 0.2504 6 0.1201 6 0.1311 5 0.2316 5 0.0823 5 0.1334 4 0.1612 5 0.1465 7 0.2813 6 0.1461 5)
Average genome size in population (length): 101.246
Average program size in population (points): 102.246
Average percent parens in population: 0.010
Minimum age in population: 98.58709963854342
Maximum age in population: 103.125155514821
Average age in population: 101.0755664574403
Median age in population: 101.1081378287881
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.244
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 152098429
--- Timings ---
Current time: 1529616098506 milliseconds
Total Time:         283.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.2 seconds, 31.4%
Fitness Testing:    153.9 seconds, 54.3%
Report:              40.5 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_inc} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_sin} {:instruction in1} {:instruction integer_shove} {:instruction tagged_392} {:instruction float_mult} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction 46.8619703011127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction integer_shove} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_flush} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_flush} {:instruction float_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_682} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -57.085485249297975} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_yank integer_fromfloat float_cos float_inc integer_max integer_rot integer_fromfloat integer_pop float_shove in1 integer_div integer_rot integer_mod float_sub float_div tag_float_222 float_sin in1 integer_shove tagged_392 float_mult float_swap 46.29272832092809 46.8619703011127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 46.29272832092809 tagged_428 float_frominteger integer_fromfloat float_min integer_mult 46.29272832092809 float_flush integer_shove in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float print_float float_stackdepth float_sub integer_dec integer_add float_dup_times integer_stackdepth print_integer float_flush print_float integer_yank integer_yank float_flush float_mod integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min float_mod float_div print_float tag_float_682 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth -57.085485249297975 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4228.697706699999
Median total errors in population: 198.01440000000002
Error averages by case: (156.12988860000146 9.028 153.27013710000128 9.046 159.9320433999995 8.142 154.77657919999817 9.17 162.7690507999978 8.211 173.3505064999992 9.054 152.26562869999873 8.957 161.76558320000254 8.952 162.04191640000008 8.154 167.5266456000018 7.27 161.91072959999863 8.286 165.84354720000093 9.155 163.9076276000018 8.253 162.93933870000268 6.733 147.24899769999857 8.205 169.8668017000014 8.874 160.1166208 7.385 162.23283179999896 7.327 151.86951729999893 9.024 164.39365210000017 9.904 161.12838739999745 8.193 171.35284319999886 9.088 158.44392259999873 9.858 165.27441799999878 9.216 144.74649150000022 8.109)
Error minima by case: (0.2466 6 0.3858 6 0.0655 6 0.2789 5 0.2699 6 0.0047 6 0.0724 6 0.4372 6 0.4404 5 0.4145 5 0.1257 6 0.0378 7 0.0151 6 0.4304 4 0.2247 6 0.2504 5 0.1201 6 0.1318 5 0.2317 6 0.083 6 0.1341 6 0.1612 6 0.1465 8 0.2813 7 0.1468 5)
Average genome size in population (length): 101.194
Average program size in population (points): 102.194
Average percent parens in population: 0.010
Minimum age in population: 99.8311169731257
Maximum age in population: 104.4034165276401
Average age in population: 102.4484454992205
Median age in population: 102.4853987684169
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.262
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 154666129
--- Timings ---
Current time: 1529616103046 milliseconds
Total Time:         288.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.5 seconds, 31.4%
Fitness Testing:    156.6 seconds, 54.3%
Report:              41.1 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_rot} {:instruction float_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_pop} {:instruction float_shove} {:instruction float_add} {:instruction integer_add} {:instruction float_stackdepth} {:instruction in1} {:instruction tagged_514} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_div} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_pop} {:instruction float_flush} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_rot} {:instruction 46.29272832092809} {:instruction tagged_391} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction 86} {:instruction print_float} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_dec} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_dup})
Best program: (float_max float_stackdepth in1 integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub integer_rot float_sub float_rot float_dup_times integer_yankdup float_inc integer_pop float_shove float_add integer_add float_stackdepth in1 tagged_514 integer_min integer_rot integer_dup_items -54 integer_yankdup integer_div float_sub integer_mod float_sub float_dup_times float_flush in1 integer_shove integer_dup_items float_shove float_pop float_flush tag_float_222 float_flush in1 print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_rot 46.29272832092809 tagged_391 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_yankdup float_cos float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap 86 print_float print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult float_rot integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div tagged_948 integer_max float_flush integer_min integer_add print_integer integer_dec print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_dup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3736.7531673
Median total errors in population: 198.01440000000002
Error averages by case: (138.83860020000145 8.946 135.99738779999953 8.922 141.35203690000114 8.035 138.39195719999807 9.035 141.77656399999967 8.059 150.05450289999928 8.875 138.41341759999878 8.863 141.91254810000078 8.874 141.98549619999832 8.042 143.50800410000187 7.082 140.8283544999988 8.122 143.43819809999923 8.957 143.5549902000004 8.051 142.82082580000267 6.525 134.14415290000025 8.087 146.50432480000015 8.755 140.7402209 7.183 142.9721564999987 7.132 135.2790102999991 8.906 143.06622749999835 9.779 140.03660379999937 8.055 146.09887939999874 8.893 137.70320989999874 9.745 145.6571615999987 9.075 131.7183360999984 7.962)
Error minima by case: (0.2386 7 0.3773 7 0.0575 6 0.2709 7 0.2699 6 0.0096 7 0.0724 7 0.4372 6 0.4404 6 0.4065 5 0.1257 6 0.0162 7 0.0072 6 0.4224 5 0.2167 6 0.2504 7 0.1201 5 0.1239 5 0.2317 7 0.0751 6 0.1261 6 0.1612 7 0.1249 8 0.2813 7 0.1389 6)
Average genome size in population (length): 100.82
Average program size in population (points): 101.82
Average percent parens in population: 0.010
Minimum age in population: 101.1213278184738
Maximum age in population: 105.5460986110806
Average age in population: 103.8251454784696
Median age in population: 103.857147070533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.229
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 157222954
--- Timings ---
Current time: 1529616107740 milliseconds
Total Time:         292.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.8 seconds, 31.4%
Fitness Testing:    159.2 seconds, 54.4%
Report:              41.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_mod} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_sin} {:instruction in1} {:instruction integer_shove} {:instruction tagged_392} {:instruction float_mult} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction 46.8619703011127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_dec} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_461} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction integer_dup_times} {:instruction in2} {:instruction float_shove} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_pop} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_yank integer_fromfloat float_cos float_mod integer_max integer_rot integer_fromfloat integer_pop float_shove in1 integer_div integer_rot integer_mod float_sub float_div tag_float_222 float_sin in1 integer_shove tagged_392 float_mult float_swap 46.29272832092809 46.8619703011127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 46.29272832092809 tagged_428 float_frominteger integer_fromfloat float_pop integer_mult float_frominteger integer_fromfloat integer_div float_dec 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_461 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush integer_dup_times in2 float_shove float_shove float_sub integer_add integer_add float_frominteger integer_swap integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 integer_max float_flush integer_min integer_swap integer_add print_integer integer_pop print_float integer_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4443.822448499999
Median total errors in population: 198.01440000000002
Error averages by case: (167.89731490000156 8.958 164.0184536000011 8.943 170.6607329 8.08 159.89586609999836 9.101 170.82205729999777 8.169 178.07784469999908 8.978 166.34522019999858 8.916 171.58292370000254 8.894 171.91377939999992 8.098 172.34900680000186 7.244 170.82615689999867 8.214 170.72579110000072 9.063 170.68723720000122 8.184 172.7105889000029 6.629 160.66051619999888 8.12 175.86662530000135 8.841 170.39316840000004 7.306 170.70666289999878 7.27 164.34271569999902 8.964 173.10815919999985 9.809 169.0168680999979 8.135 176.07198409999884 9.045 163.8583811999986 9.808 173.55722369999884 9.183 155.6911699999995 8.084)
Error minima by case: (0.243 6 0.3791 6 0.0619 6 0.2752 7 0.2699 6 0.0087 6 0.0724 7 0.4372 6 0.4404 6 0.4108 5 0.1257 6 0.0378 7 0.0115 6 0.4268 5 0.2211 6 0.2504 7 0.1201 6 0.1282 5 0.2317 7 0.0794 7 0.1305 6 0.1612 7 0.1465 8 0.2813 7 0.1432 6)
Average genome size in population (length): 100.68
Average program size in population (points): 101.68
Average percent parens in population: 0.010
Minimum age in population: 102.5725439397908
Maximum age in population: 107.4158603408103
Average age in population: 105.2346173075137
Median age in population: 105.2471349747975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.241
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 159775804
--- Timings ---
Current time: 1529616112622 milliseconds
Total Time:         297.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.2 seconds, 31.3%
Fitness Testing:    161.8 seconds, 54.4%
Report:              42.5 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction print_integer} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_sub} {:instruction float_sub} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction float_div} {:instruction tagged_225} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction float_flush} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_pop} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_inc print_integer integer_rot integer_flush float_sub float_sub float_rot integer_fromfloat integer_yankdup float_div tagged_225 float_flush in1 integer_shove float_flush tag_float_222 float_flush in1 integer_shove float_dup_items float_shove integer_dup_times integer_fromfloat integer_div integer_mult integer_rot float_flush float_rot in2 float_pop float_sub integer_add integer_max float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_fromfloat integer_swap integer_add print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3968.6676865
Median total errors in population: 198.01440000000002
Error averages by case: (147.52338740000152 8.864 145.3405057999997 8.874 150.86575530000073 8.008 143.77839039999802 9.044 148.03057099999964 8.096 158.202438599999 8.841 151.63617229999844 8.841 149.18216030000067 8.811 148.28796499999797 8.027 154.50353420000187 7.149 147.3167986999987 8.111 152.2130851999995 8.973 153.58865760000106 8.071 148.13035800000281 6.548 144.5660944999998 8.075 157.1451951000004 8.764 155.52521999999993 7.277 155.79482779999876 7.164 144.48101579999886 8.882 148.364339499998 9.705 148.37288929999937 8.027 157.0150647999988 8.956 148.4433538999987 9.701 157.9200353999987 9.106 142.5688705999989 7.956)
Error minima by case: (0.2426 6 0.3858 6 0.0615 6 0.2749 7 0.2699 6 0.0096 7 0.0724 7 0.4372 6 0.4404 6 0.4105 5 0.1257 6 0.0376 6 0.0111 6 0.4264 5 0.2207 6 0.2459 7 0.1155 5 0.1278 5 0.2234 6 0.079 7 0.1301 6 0.1566 7 0.1463 7 0.2767 7 0.1428 6)
Average genome size in population (length): 100.284
Average program size in population (points): 101.284
Average percent parens in population: 0.010
Minimum age in population: 103.5725439397908
Maximum age in population: 108.5399951825335
Average age in population: 106.6354307632827
Median age in population: 106.680720080752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.257
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 162317536
--- Timings ---
Current time: 1529616117189 milliseconds
Total Time:         302.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.5 seconds, 31.2%
Fitness Testing:    164.6 seconds, 54.4%
Report:              43.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_sub} {:instruction in2} {:instruction float_sub} {:instruction float_div} {:instruction float_rot} {:instruction float_div} {:instruction integer_yankdup} {:instruction integer_min} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_sin} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction print_float} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_553} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_inc} {:instruction print_float} {:instruction in2} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction in1})
Best program: (in1 in1 float_inc float_stackdepth in1 integer_add integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub float_dup_items float_sub float_rot integer_mod integer_yankdup integer_sub float_sub in2 float_sub float_div float_rot float_div integer_yankdup integer_min tag_float_222 float_flush in1 integer_shove integer_mod float_shove float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div float_sin 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap print_float print_integer integer_mult integer_yankdup float_stackdepth float_mod float_div print_float tag_float_553 tagged_948 integer_max float_flush integer_min integer_add print_integer integer_inc print_float in2 in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer in1)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3875.4607940999986
Median total errors in population: 198.01440000000002
Error averages by case: (143.21992630000148 8.85 140.65624530000022 8.842 147.1786374000008 7.972 141.96114809999847 9.033 148.37540209999935 8.04 154.28686509999937 8.846 143.186107099999 8.794 147.7330427000008 8.755 147.8371409999988 7.968 152.4720055000018 7.089 146.93832519999913 8.079 148.85265589999963 8.94 148.0032115000001 8.044 149.06889170000233 6.466 137.74793349999993 8.033 155.77937880000053 8.717 147.91769779999993 7.241 147.26902289999876 7.125 141.41712809999933 8.86 149.2911362999988 9.676 146.13122989999897 8.008 154.08964759999895 8.909 143.0583773999987 9.629 151.1040559999989 9.05 132.9895808999986 7.93)
Error minima by case: (0.244 6 0.3791 6 0.0629 6 0.2762 7 0.2632 6 0.0096 7 0.0657 6 0.4305 6 0.4337 6 0.4118 5 0.119 6 0.0301 7 0.0125 6 0.4278 5 0.2221 6 0.2438 6 0.1134 6 0.1292 5 0.225 6 0.0804 8 0.1315 6 0.1545 6 0.0786 8 0.2746 6 0.1442 6)
Average genome size in population (length): 100.68
Average program size in population (points): 101.68
Average percent parens in population: 0.010
Minimum age in population: 105.1439433899924
Maximum age in population: 109.9192880124452
Average age in population: 108.0525276426506
Median age in population: 108.1088551055484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.236
Error (vector) diversity:			 0.268
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 164868961
--- Timings ---
Current time: 1529616121744 milliseconds
Total Time:         306.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.7 seconds, 31.2%
Fitness Testing:    167.1 seconds, 54.5%
Report:              43.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction in1} {:instruction tag_float_222} {:instruction in1} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction integer_mod} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction in2} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_sin} {:instruction print_float} {:instruction print_integer} {:instruction float_stackdepth} {:instruction print_float} {:instruction 4} {:instruction 95} {:instruction float_cos} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_tan} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction in1} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction tag_float_739})
Best program: (in1 float_inc float_stackdepth in1 integer_add integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot float_dup_times integer_yankdup in1 tag_float_222 in1 in1 integer_yankdup integer_mod integer_div integer_mod tag_float_222 float_flush in1 integer_shove integer_dup_items float_shove float_mult integer_fromfloat integer_mult 46.29272832092809 float_flush float_rot float_flush float_yank in2 integer_add float_frominteger float_shove print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer float_sin print_float print_integer float_stackdepth print_float 4 95 float_cos float_flush integer_min integer_swap integer_add integer_mult integer_mult float_tan integer_swap float_tan integer_swap print_integer integer_mult integer_max integer_swap integer_add print_integer integer_mult print_float float_stackdepth float_flush integer_min integer_swap integer_add float_div integer_mult integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer in1 float_dup_times integer_stackdepth float_stackdepth print_integer tag_float_739)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4354.399456
Median total errors in population: 198.01440000000002
Error averages by case: (165.67469010000136 8.915 162.51959220000097 8.907 166.69150110000007 7.988 157.14603729999826 9.034 163.5423759999985 8.103 171.8672438999991 8.857 168.62269269999857 8.845 163.48848780000185 8.8 163.80146299999933 8.01 169.48957730000163 7.166 163.00432879999858 8.097 167.40148930000018 8.96 169.9075376000013 8.093 164.48595850000268 6.494 160.03420929999857 8.084 167.82010640000067 8.765 170.32456740000003 7.273 170.11837139999886 7.133 161.9197636999988 8.908 165.11426189999935 9.701 162.25892129999812 8.046 172.50839269999895 8.945 167.39927859999878 9.725 174.1600850999989 9.144 155.20252260000012 7.903)
Error minima by case: (0.2466 6 0.3858 6 0.0655 6 0.2788 6 0.2699 6 0.0031 6 0.0724 6 0.4372 5 0.4404 5 0.4144 5 0.1257 6 0.0378 7 0.0151 7 0.4304 4 0.2247 6 0.2504 6 0.1201 5 0.1318 5 0.2317 6 0.083 5 0.1341 5 0.1612 6 0.1465 8 0.2813 7 0.1468 5)
Average genome size in population (length): 100.942
Average program size in population (points): 101.942
Average percent parens in population: 0.010
Minimum age in population: 106.1439433899924
Maximum age in population: 111.3978657056124
Average age in population: 109.4522538457476
Median age in population: 109.5178590404767
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.251
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 167426711
--- Timings ---
Current time: 1529616126393 milliseconds
Total Time:         311.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.0 seconds, 31.1%
Fitness Testing:    169.8 seconds, 54.5%
Report:              44.6 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_add} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction in1} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction float_swap} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_mult} {:instruction tagged_392} {:instruction float_flush} {:instruction 45.708133558361915} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_flush} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc integer_swap integer_dup_times integer_add tag_integer_848 float_frominteger integer_div integer_rot integer_mod float_sub in1 tag_float_222 float_flush in1 float_swap integer_mod float_shove print_integer float_div tag_integer_848 integer_mod integer_fromfloat integer_div float_swap float_swap integer_fromfloat in1 integer_shove integer_mod float_shove print_integer integer_fromfloat integer_min integer_mult tagged_392 float_flush 45.708133558361915 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth integer_add integer_dec integer_add integer_sub integer_stackdepth print_integer integer_mult print_float float_dup_times float_flush integer_min integer_swap float_flush print_integer integer_mult print_float 4 94 float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth integer_mult integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4291.552486299999
Median total errors in population: 198.01440000000002
Error averages by case: (161.92470910000162 9.021 157.4379756000011 9.005 166.99616029999976 8.114 153.3913931999982 9.114 164.7532509999981 8.205 167.87796149999903 8.941 162.4302364999986 8.971 164.50374720000204 8.914 164.98156219999987 8.128 166.3212858000019 7.238 163.78746429999887 8.247 167.6663492000005 9.027 162.55538430000135 8.152 165.8867059000026 6.646 155.1454327999988 8.173 171.25889880000125 8.815 163.13454570000002 7.325 161.41202049999873 7.229 158.97502409999902 9.01 167.25687959999985 9.832 162.81954879999802 8.134 168.67005059999892 9.007 162.1546748999987 9.761 166.87078399999882 9.196 151.08544039999987 8.05)
Error minima by case: (0.2465 5 0.3858 5 0.0655 5 0.2788 4 0.2699 5 0.0096 5 0.0724 5 0.4372 5 0.4404 5 0.4144 5 0.1257 5 0.0378 7 0.0151 5 0.4304 5 0.2247 5 0.2504 4 0.12 5 0.1318 4 0.2317 5 0.083 4 0.134 5 0.1611 5 0.1465 8 0.2812 6 0.1468 4)
Average genome size in population (length): 100.345
Average program size in population (points): 101.345
Average percent parens in population: 0.010
Minimum age in population: 107.1439433899924
Maximum age in population: 112.8289490461729
Average age in population: 110.828810925821
Median age in population: 110.8762747594212
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.262
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 169970418
--- Timings ---
Current time: 1529616130849 milliseconds
Total Time:         315.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.2 seconds, 31.1%
Fitness Testing:    172.4 seconds, 54.6%
Report:              45.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction tag_float_954} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_mod} {:instruction float_sub} {:instruction -54} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_swap} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_add} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_max} {:instruction float_rot} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction -29.24244837503616} {:instruction print_integer} {:instruction tag_float_362} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction 94} {:instruction integer_inc} {:instruction tag_float_267} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_sin} {:instruction integer_max} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 tag_float_954 float_stackdepth in1 float_inc float_stackdepth integer_yankdup integer_add integer_min integer_rot integer_flush -54 integer_mult integer_dup_times in2 integer_mod float_sub -54 integer_mod integer_yankdup float_inc float_swap integer_mod float_sub float_div tag_float_222 integer_fromfloat in1 integer_add integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger float_shove integer_max float_rot tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth integer_shove integer_dec integer_add integer_shove integer_stackdepth print_integer -29.24244837503616 print_integer tag_float_362 print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 94 integer_inc tag_float_267 integer_min integer_swap integer_add print_integer float_sin integer_max float_stackdepth print_integer integer_dup_times print_float float_flush in1 integer_yankdup float_rot float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4780.7334346
Median total errors in population: 198.01440000000002
Error averages by case: (181.8715950000015 8.998 177.60591920000186 8.984 184.0704922999991 8.111 173.62286059999812 9.135 183.90498139999713 8.198 191.26318219999894 8.973 180.78841299999837 8.974 183.5797369000031 8.901 185.0761841000004 8.127 186.2274597000018 7.285 183.38418819999842 8.26 187.10076200000168 9.123 183.69911710000258 8.214 185.83016030000283 6.712 173.4085742999976 8.156 190.84243510000195 8.853 181.59087449999996 7.398 184.16175759999896 7.33 175.93661709999867 9.01 185.43623780000055 9.825 182.56286619999713 8.178 189.50403719999898 9.101 180.31708469999865 9.833 186.71528439999895 9.232 169.195613700001 8.126)
Error minima by case: (0.2456 6 0.3858 6 0.0645 6 0.2779 5 0.2699 6 0.0031 6 0.0724 6 0.4372 6 0.4404 5 0.4135 4 0.1257 6 0.0378 7 0.0141 6 0.4294 5 0.2237 6 0.2504 5 0.12 6 0.1308 5 0.2317 6 0.082 5 0.1331 6 0.1611 6 0.1465 8 0.2812 7 0.1458 5)
Average genome size in population (length): 100.655
Average program size in population (points): 101.655
Average percent parens in population: 0.010
Minimum age in population: 109.3309604914753
Maximum age in population: 114.2941670955166
Average age in population: 112.2163699209656
Median age in population: 112.2922813570336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.282
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 172517768
--- Timings ---
Current time: 1529616135408 milliseconds
Total Time:         320.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.6 seconds, 31.1%
Fitness Testing:    174.9 seconds, 54.6%
Report:              46.0 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction in1} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_879} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction tag_float_19} {:instruction float_flush} {:instruction in1} {:instruction float_flush} {:instruction integer_shove} {:instruction float_div} {:instruction integer_mod} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction integer_div} {:instruction 43.56324312959127} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_flush} {:instruction print_float} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_max} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction print_float} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction integer_add} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_inc float_stackdepth in1 integer_stackdepth float_inc in2 float_shove float_sub in1 tag_float_222 float_flush in1 integer_yankdup integer_mod float_shove print_integer float_div tag_integer_879 float_frominteger integer_fromfloat integer_div tag_float_19 float_flush in1 float_flush integer_shove float_div integer_mod float_sub float_dup_times float_dup integer_div float_swap 46.29272832092809 tagged_392 integer_div 43.56324312959127 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float print_float float_stackdepth float_sub integer_dec integer_add float_dup_times integer_stackdepth print_integer float_flush print_float integer_min integer_swap integer_add print_integer integer_max print_float 4 94 float_mod float_flush integer_min integer_swap print_float print_integer integer_mult integer_yankdup float_stackdepth float_mod float_div integer_add print_integer integer_fromfloat print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4379.891681799999
Median total errors in population: 198.01440000000002
Error averages by case: (164.53099640000136 8.928 162.97838650000074 8.937 168.40861729999986 8.01 157.37864839999847 9.006 167.0934583999987 8.12 172.50241249999914 8.842 166.19463509999875 8.893 168.1841623000019 8.822 167.44899839999945 8.005 171.3536808000017 7.073 168.86224199999896 8.163 169.51350380000065 8.953 166.9815764000014 8.077 167.79260230000233 6.539 158.72206979999922 8.109 173.85179960000104 8.73 167.9623549999999 7.223 167.45978039999878 7.151 162.43490769999906 8.912 168.13565759999966 9.757 166.15110019999838 8.068 172.65172959999882 8.941 167.6535607999987 9.71 170.49546109999875 9.07 155.10033939999963 8.01)
Error minima by case: (0.2466 6 0.3858 6 0.0655 6 0.2789 6 0.2699 6 0.0096 7 0.0724 6 0.4372 5 0.4404 6 0.4145 4 0.1257 6 0.0378 7 0.0151 6 0.4304 5 0.2247 6 0.2504 6 0.1201 6 0.1318 4 0.2317 6 0.083 6 0.1341 6 0.1612 7 0.1465 8 0.2813 7 0.1468 5)
Average genome size in population (length): 100.487
Average program size in population (points): 101.487
Average percent parens in population: 0.010
Minimum age in population: 110.3309604914753
Maximum age in population: 115.6705954416516
Average age in population: 113.5843003839164
Median age in population: 113.6456085906374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.253
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 175058793
--- Timings ---
Current time: 1529616139944 milliseconds
Total Time:         325.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.8 seconds, 31.0%
Fitness Testing:    177.5 seconds, 54.6%
Report:              46.6 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_rot} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction float_dec} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_inc} {:instruction tag_float_222} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_534} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_swap} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_shove} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (integer_pop float_stackdepth in1 float_inc integer_flush integer_rot float_rot integer_mod integer_yankdup float_inc float_sub integer_mod float_sub float_div tag_float_222 float_flush in1 float_dec integer_mod float_shove print_integer float_inc tag_float_222 float_flush integer_dup_times integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_534 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_stackdepth integer_add integer_dec integer_add integer_sub integer_stackdepth print_integer integer_mult print_float float_swap float_flush integer_min integer_swap float_shove print_integer integer_mult print_float 4 94 float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth integer_mult integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4637.361431
Median total errors in population: 198.01440000000002
Error averages by case: (172.4565027000014 8.98 172.03772600000124 8.978 176.46266749999998 8.068 171.00322389999832 9.119 176.0339558999982 8.151 186.9096851999992 8.964 174.43609059999866 8.921 176.44913310000194 8.885 176.44110789999974 8.104 182.05679690000176 7.249 176.05239839999888 8.218 179.77102850000063 9.058 180.21085250000144 8.195 176.67586970000247 6.621 168.19656819999832 8.128 185.73681790000117 8.831 181.0149444000001 7.343 181.53503669999898 7.264 170.54108999999914 8.985 175.07110939999973 9.815 176.2240951999981 8.138 185.39524139999895 9.044 173.3407194999986 9.768 183.75920709999892 9.193 167.43956240000026 8.09)
Error minima by case: (0.246 6 0.3858 6 0.0649 5 0.2782 4 0.2699 6 0.009 5 0.0724 5 0.4372 6 0.4404 5 0.4138 5 0.1257 6 0.0378 7 0.0145 5 0.4298 4 0.2241 5 0.2504 4 0.1201 5 0.1312 5 0.2317 6 0.0824 5 0.1335 6 0.1612 5 0.1465 8 0.2813 6 0.1462 4)
Average genome size in population (length): 99.984
Average program size in population (points): 100.984
Average percent parens in population: 0.010
Minimum age in population: 111.7459884925653
Maximum age in population: 116.9972114742624
Average age in population: 114.9822463576009
Median age in population: 115.0088870012729
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.261
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 177584818
--- Timings ---
Current time: 1529616144386 milliseconds
Total Time:         329.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.2 seconds, 31.0%
Fitness Testing:    180.0 seconds, 54.6%
Report:              47.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_sub} {:instruction float_shove} {:instruction in1} {:instruction integer_inc} {:instruction in1} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction float_flush} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_flush} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_div} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_sub float_shove in1 integer_inc in1 float_yank integer_yankdup integer_dup_times float_sub integer_mod integer_dup_times integer_fromfloat integer_pop integer_swap in1 integer_shove float_min float_shove print_integer tag_float_222 float_flush in1 integer_shove float_flush tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer integer_fromfloat integer_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_flush float_mult float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot integer_mult 46.29272832092809 float_flush float_rot in2 integer_swap float_sub integer_add integer_max float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_dup_times integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_swap float_stackdepth integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_add print_integer integer_mult float_div integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4232.5182399
Median total errors in population: 198.01440000000002
Error averages by case: (155.5472543000012 8.905 155.39279310000052 8.881 162.24558030000037 7.963 155.22501019999828 9.066 157.82357249999896 8.091 166.05741009999923 8.867 162.03905689999874 8.823 158.87540010000123 8.801 159.03954779999899 8.027 167.43051900000162 7.118 159.15962159999884 8.144 165.9264545999998 8.927 161.80169720000066 8.108 157.81254170000244 6.554 152.3207958999994 8.072 170.21734420000053 8.769 167.2493123 7.264 162.3232220999989 7.188 154.7276302999989 8.903 158.18509799999904 9.74 158.38265669999873 8.065 169.71985959999893 8.929 162.03697209999876 9.641 172.05512989999883 9.122 150.96175939999952 7.994)
Error minima by case: (0.2466 6 0.3858 6 0.0655 5 0.2789 4 0.2699 6 0.009 5 0.0724 5 0.4372 6 0.4404 5 0.4145 5 0.1257 6 0.0378 7 0.0151 5 0.4304 5 0.2247 5 0.6817 4 0.8121 5 0.1318 5 0.2317 6 0.083 5 0.1341 6 0.771 5 0.1465 8 0.6509 6 0.1468 4)
Average genome size in population (length): 99.602
Average program size in population (points): 100.602
Average percent parens in population: 0.010
Minimum age in population: 113.6318642134775
Maximum age in population: 118.2741741003845
Average age in population: 116.3393380699771
Median age in population: 116.3728422483001
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.252
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 180101168
--- Timings ---
Current time: 1529616149076 milliseconds
Total Time:         334.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.4 seconds, 31.0%
Fitness Testing:    182.6 seconds, 54.7%
Report:              47.9 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_min} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_flush} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_879} {:instruction tag_float_222} {:instruction integer_add} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_907} {:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_flush} {:instruction in1} {:instruction integer_add} {:instruction integer_mult} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_893} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.5389467971953} {:instruction float_flush} {:instruction integer_mod} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction integer_dec} {:instruction float_flush} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction tag_float_362} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_min} {:instruction float_flush} {:instruction -96.93142590173898} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_dup_items} {:instruction print_float} {:instruction float_yankdup} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (integer_dup_times float_inc float_stackdepth integer_yank float_inc integer_min float_rot integer_rot integer_flush tag_float_222 float_flush in1 integer_yankdup integer_mod float_shove print_integer float_div tag_integer_879 tag_float_222 integer_add integer_mod float_shove print_integer float_div tag_integer_907 float_swap float_swap integer_fromfloat integer_div float_flush in1 integer_add integer_mult float_shove print_integer float_div tag_integer_893 float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_div integer_mult 46.5389467971953 float_flush integer_mod in2 float_shove float_sub float_sub integer_add integer_add float_frominteger integer_add in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float integer_dec float_flush float_tan integer_stackdepth print_integer tag_float_362 print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_min float_flush -96.93142590173898 integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_min integer_swap integer_add integer_add print_integer integer_mult print_float integer_stackdepth float_flush float_dup_items print_float float_yankdup integer_mult print_float float_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4070.7388818999993
Median total errors in population: 198.01440000000002
Error averages by case: (151.33852430000144 8.856 148.7863805000006 8.85 157.77315660000042 7.94 151.26756949999813 8.994 153.00103299999893 8.031 158.90606319999907 8.767 157.1248520999986 8.772 151.32742710000124 8.741 151.55217469999897 7.987 159.1603260000019 7.034 151.0936268999989 8.077 159.49517019999985 8.938 156.0356135000007 7.996 153.63677510000252 6.444 147.42395949999909 7.983 161.28134510000035 8.692 158.81466909999997 7.183 155.7089598999987 7.052 150.022044799999 8.823 153.20403299999901 9.663 151.22711319999863 8.009 163.63438499999882 8.865 155.43421079999862 9.678 161.30194079999876 9.035 143.8985279999993 7.879)
Error minima by case: (0.246 6 0.3858 5 0.0649 5 0.2772 4 0.2699 6 0.0097 5 0.0724 5 0.4372 4 0.4404 5 0.4138 5 0.1257 6 0.0378 7 0.0145 5 0.4298 5 0.2241 5 0.2504 4 0.1201 5 0.1312 4 0.2317 5 0.0824 5 0.1335 4 0.1612 5 0.1465 7 0.2813 6 0.1462 4)
Average genome size in population (length): 100.006
Average program size in population (points): 101.006
Average percent parens in population: 0.010
Minimum age in population: 115.2750196619775
Maximum age in population: 119.8202321096689
Average age in population: 117.6805974995733
Median age in population: 117.7394007798302
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.257
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 182626793
--- Timings ---
Current time: 1529616153636 milliseconds
Total Time:         338.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.7 seconds, 30.9%
Fitness Testing:    185.3 seconds, 54.7%
Report:              48.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_sub} {:instruction float_sub} {:instruction -33.666907019987974} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_pop} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_873} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_mod} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_cos} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction integer_sub} {:instruction tag_float_618} {:instruction print_integer} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction float_mod} {:instruction integer_mult} {:instruction print_float} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_inc float_stackdepth integer_rot integer_flush float_sub float_sub -33.666907019987974 integer_fromfloat float_sub integer_fromfloat integer_pop integer_min integer_stackdepth integer_flush float_shove in1 integer_shove integer_dup float_inc integer_yankdup float_pop float_sub float_div tag_float_222 float_flush in1 integer_dup_times print_integer float_div tag_integer_873 float_swap integer_fromfloat integer_div integer_mult float_yankdup float_flush float_rot in2 float_shove integer_rot float_sub integer_add integer_add float_frominteger float_mod print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_pop integer_stackdepth print_integer print_integer integer_mult print_float 4 94 float_cos float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod float_div integer_sub tag_float_618 print_integer integer_max float_flush integer_min integer_swap integer_add float_mod integer_mult print_float integer_swap integer_add print_integer integer_fromfloat print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4337.679656699999
Median total errors in population: 198.01440000000002
Error averages by case: (159.93101420000158 8.905 155.4396735000005 8.863 160.02330500000068 7.998 164.78936229999775 9.043 158.0430995999985 8.096 177.93199089999865 8.905 158.7899479999982 8.825 160.78275650000185 8.813 161.9140358999991 8.012 175.11238060000187 7.161 160.67288339999845 8.134 168.7473719000001 9.042 172.49066190000147 8.159 159.6478461000031 6.558 152.11688209999886 8.086 177.9160340000014 8.789 174.75999749999994 7.281 174.4378231999986 7.259 156.08702939999858 8.903 160.91149059999918 9.722 160.04492529999825 8.056 178.7582826999987 8.974 167.8295065999986 9.755 179.2343601999987 9.121 150.77399529999983 8.033)
Error minima by case: (0.246 5 0.3713 6 0.065 5 0.2783 4 0.2699 6 0.0096 5 0.0724 5 0.4372 4 0.4404 5 0.4139 5 0.1257 6 0.0378 7 0.0146 5 0.4299 5 0.2242 5 0.2504 4 0.1201 5 0.1313 5 0.2316 6 0.0825 4 0.1335 5 0.1612 5 0.1465 7 0.2813 6 0.1463 4)
Average genome size in population (length): 100.419
Average program size in population (points): 101.419
Average percent parens in population: 0.010
Minimum age in population: 116.2960442835255
Maximum age in population: 121.179304929199
Average age in population: 119.0885845332093
Median age in population: 119.1335010439679
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.251
Error (vector) diversity:			 0.286
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 185163243
--- Timings ---
Current time: 1529616158202 milliseconds
Total Time:         343.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.8 seconds, 30.8%
Fitness Testing:    188.0 seconds, 54.8%
Report:              49.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction float_flush} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_shove} {:instruction float_rot} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_fromfloat} {:instruction float_min} {:instruction float_shove} {:instruction in1} {:instruction float_flush} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_222} {:instruction integer_div} {:instruction integer_mod} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction print_float} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction 86} {:instruction print_float} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_stackdepth} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_dec} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_dup})
Best program: (in1 integer_flush -54 float_flush integer_dup_times float_sub integer_mod float_shove float_rot float_div tag_float_222 integer_fromfloat float_min float_shove in1 float_flush float_min integer_shove integer_mod tag_float_222 float_flush in1 tag_float_222 integer_div integer_mod tag_float_222 float_flush in1 integer_shove integer_dup_items float_shove float_mult integer_fromfloat float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_shove integer_mult 46.29272832092809 float_flush print_float in2 float_shove float_sub integer_add integer_add float_frominteger 86 print_float print_float float_stackdepth float_sub integer_dec integer_add integer_mod integer_stackdepth print_integer integer_mult float_rot integer_yank float_flush integer_min integer_swap integer_add print_integer float_stackdepth 4 integer_max float_flush integer_min integer_fromfloat integer_min integer_swap integer_add print_integer integer_mult integer_rot float_stackdepth float_mod float_div tagged_948 integer_max float_flush integer_min integer_add print_integer integer_dec print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_dup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4054.1876067999992
Median total errors in population: 198.01440000000002
Error averages by case: (148.65386220000138 9.063 147.07466950000074 9.003 153.54016490000035 8.159 150.15696379999858 9.161 151.899046799999 8.208 164.27661329999938 9.001 150.1638619999991 8.954 153.54926760000131 8.924 153.87886219999942 8.18 158.49627530000163 7.281 152.11865629999926 8.297 157.0089376000001 9.152 156.9150960000008 8.274 152.735668500002 6.715 143.77550179999966 8.202 162.4688844000008 8.865 156.10510739999992 7.38 157.639753099999 7.35 145.57564829999936 9.039 154.27030009999945 9.887 151.3522256999988 8.21 163.21646209999884 9.095 151.3524004999988 9.865 161.52967689999883 9.251 142.7717004999993 8.146)
Error minima by case: (0.2466 6 0.3713 6 0.0655 6 0.2789 5 0.2699 6 0.0096 6 0.0724 6 0.4372 5 0.4404 5 0.4145 5 0.1257 6 0.0378 7 0.0151 6 0.4304 4 0.2247 6 0.2504 5 0.1201 5 0.1318 5 0.2317 6 0.083 5 0.1341 6 0.1612 6 0.1465 8 0.2813 7 0.1468 5)
Average genome size in population (length): 99.775
Average program size in population (points): 100.775
Average percent parens in population: 0.010
Minimum age in population: 117.2960442835255
Maximum age in population: 122.415609386079
Average age in population: 120.4887064953945
Median age in population: 120.532792909933
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.258
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 187682543
--- Timings ---
Current time: 1529616162439 milliseconds
Total Time:         347.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.0 seconds, 30.8%
Fitness Testing:    190.4 seconds, 54.8%
Report:              50.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_yank} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction float_max} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction float_inc} {:instruction float_div} {:instruction integer_mod} {:instruction float_div} {:instruction integer_min} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction tagged_955} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_div} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_dup_times})
Best program: (in1 integer_yank in1 integer_add integer_min integer_rot integer_yankdup integer_dup_times float_sub integer_mod float_sub float_rot integer_mod float_max float_inc float_sub float_inc float_sub float_div tag_float_222 float_flush float_inc float_div integer_mod float_div integer_min float_flush in1 integer_shove float_tan integer_shove tagged_955 tag_float_222 float_flush in1 integer_yankdup integer_mod float_shove print_integer float_div integer_shove float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot integer_mult 46.29272832092809 float_flush float_rot in2 integer_swap float_sub integer_add integer_max float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_dup_times integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_swap float_stackdepth integer_max float_stackdepth float_mod float_div print_float tag_float_618 tagged_948 integer_max float_flush integer_min integer_add print_integer integer_mult float_div integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_dup_times)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4033.634062899999
Median total errors in population: 198.01440000000002
Error averages by case: (149.80850480000151 8.865 148.83450910000013 8.821 153.0466121000008 7.959 146.85015009999816 9.016 151.50042009999942 8.033 161.92045939999903 8.831 150.9105006999984 8.781 154.10811060000123 8.762 154.30617929999866 8.01 154.9942432000018 7.098 152.78335449999872 8.103 157.1513736999998 8.977 155.49400950000063 8.073 152.07893300000285 6.465 146.37865729999945 8.011 155.5715959 8.713 154.51429770000004 7.196 156.5464481999988 7.129 147.35533689999892 8.873 151.8851515999982 9.724 152.03465769999906 8.007 162.43431599999883 8.954 151.3121232999987 9.7 159.7586184999988 9.084 142.88549969999897 7.985)
Error minima by case: (0.244 6 0.3858 6 0.0629 5 0.2762 4 0.2699 6 0.0098 5 0.0724 5 0.4372 5 0.4404 5 0.4118 5 0.1257 6 0.0378 7 0.0125 5 0.4278 5 0.2221 5 0.2504 4 0.1201 5 0.1292 5 0.2317 6 0.0804 5 0.1315 6 0.1612 5 0.1465 8 0.2813 6 0.1442 4)
Average genome size in population (length): 99.777
Average program size in population (points): 100.777
Average percent parens in population: 0.010
Minimum age in population: 118.6575741128782
Maximum age in population: 124.0085209524177
Average age in population: 121.8406367053355
Median age in population: 121.8517913012926
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.242
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 190201388
--- Timings ---
Current time: 1529616166862 milliseconds
Total Time:         352.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.3 seconds, 30.8%
Fitness Testing:    192.8 seconds, 54.8%
Report:              50.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_inc} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_dec} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_swap} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_mod} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_pop} {:instruction 4} {:instruction float_cos} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_div} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_flush} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_yank integer_fromfloat float_cos float_inc integer_max integer_rot integer_fromfloat integer_pop integer_dec float_max integer_yankdup integer_dup_times float_sub integer_mod float_dec float_flush in1 integer_yankdup integer_mod float_shove print_integer float_frominteger integer_div integer_rot integer_mod integer_mod float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove float_frominteger integer_fromfloat integer_stackdepth float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 float_tan float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_rot in2 float_yankdup float_shove float_sub integer_add integer_add float_frominteger integer_swap integer_add integer_add float_frominteger integer_swap integer_add float_frominteger integer_swap integer_swap 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer float_mod print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult integer_pop 4 float_cos integer_min integer_swap integer_add integer_swap integer_add print_integer integer_mult float_div float_stackdepth print_integer integer_dup_items print_float float_flush in1 integer_stackdepth integer_stackdepth float_flush print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4312.309822199999
Median total errors in population: 198.01440000000002
Error averages by case: (162.2151575000014 8.978 160.22884130000097 8.953 160.9370757000001 8.08 160.59266379999823 9.049 161.53019399999837 8.142 173.50368039999913 8.906 160.55548169999867 8.857 161.90175470000176 8.882 161.57833439999953 8.096 168.61417230000185 7.176 161.56759339999883 8.217 168.59846770000064 9.032 168.82312660000136 8.115 163.6600027000025 6.632 153.7901887999987 8.127 170.79527720000104 8.771 168.23248850000004 7.29 169.83416719999894 7.207 158.5360865999989 8.963 162.47250199999957 9.817 160.58574749999815 8.153 171.6104630999989 8.984 164.53561199999876 9.772 172.15686069999882 9.151 154.09988240000018 8.004)
Error minima by case: (0.243 6 0.3783 6 0.0619 6 0.2752 5 0.2624 6 0.0031 6 0.0649 6 0.4297 5 0.4329 6 0.4108 5 0.1182 6 0.0378 7 0.0115 6 0.4268 5 0.2211 6 0.2504 5 0.1201 6 0.1282 5 0.2241 6 0.0794 5 0.1305 6 0.1612 6 0.1465 8 0.2813 7 0.1432 5)
Average genome size in population (length): 99.409
Average program size in population (points): 100.409
Average percent parens in population: 0.010
Minimum age in population: 120.3985932547753
Maximum age in population: 125.2839981466105
Average age in population: 123.2490577198586
Median age in population: 123.2607774166697
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.261
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 192711979
--- Timings ---
Current time: 1529616171432 milliseconds
Total Time:         356.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.6 seconds, 30.7%
Fitness Testing:    195.4 seconds, 54.8%
Report:              51.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_add} {:instruction tag_integer_988} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_971} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction print_float} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction float_rot} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_max} {:instruction float_sub} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_flush} {:instruction integer_min} {:instruction integer_mult} {:instruction integer_add} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction print_float} {:instruction print_float} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction float_dup} {:instruction print_integer} {:instruction integer_add} {:instruction print_integer} {:instruction float_sub} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_pop})
Best program: (in1 float_inc float_dup_items float_rot integer_add tag_integer_988 float_frominteger integer_div integer_rot integer_mod float_sub integer_mod float_inc float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_integer_971 float_frominteger integer_fromfloat integer_div float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat tagged_428 float_frominteger integer_fromfloat float_flush 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div 46.29272832092809 float_flush float_rot print_float float_swap 46.29272832092809 float_rot integer_mult 46.29272832092809 float_flush float_rot float_flush float_rot in2 integer_add float_frominteger integer_swap float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_max float_sub float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult float_flush integer_min integer_mult integer_add print_integer integer_shove print_float 4 94 float_mod float_flush integer_min integer_swap integer_add print_integer integer_mult integer_max float_stackdepth float_mod print_float print_float tag_float_618 tagged_948 integer_max float_flush integer_min float_dup print_integer integer_add print_integer float_sub print_float integer_stackdepth in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer integer_pop)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4469.777287799999
Median total errors in population: 198.01440000000002
Error averages by case: (167.69100390000145 8.955 163.59711990000093 8.904 170.1789855000001 8.021 170.0586340999982 9.057 167.75242449999857 8.118 178.86730099999906 8.88 169.0899957999987 8.858 166.8473874000017 8.826 165.99524439999956 8.056 176.3161296000016 7.174 164.66152519999878 8.173 174.26324880000058 8.953 176.11005000000142 8.099 167.95003390000235 6.559 163.62033429999877 8.076 179.4883373000009 8.762 176.4572588999999 7.258 175.154359099999 7.202 163.66040419999888 8.942 168.43904109999954 9.714 163.8096492999984 8.081 179.23333219999907 8.945 172.63542059999878 9.693 178.65068129999895 9.124 158.83338550000013 7.986)
Error minima by case: (0.2429 6 0.3858 7 0.0619 6 0.2752 7 0.2699 6 0.0096 6 0.0724 7 0.4372 6 0.4404 5 0.4108 5 0.1257 6 0.0291 7 0.0115 7 0.4268 5 0.2211 5 0.2504 6 0.12 6 0.1282 5 0.2317 7 0.0794 7 0.1304 6 0.1611 7 0.0796 8 0.2812 7 0.1432 6)
Average genome size in population (length): 99.632
Average program size in population (points): 100.632
Average percent parens in population: 0.010
Minimum age in population: 121.6934395009783
Maximum age in population: 126.7948217527475
Average age in population: 124.6479634459186
Median age in population: 124.7161828935246
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.26
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 195229113
--- Timings ---
Current time: 1529616175824 milliseconds
Total Time:         361.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.8 seconds, 30.7%
Fitness Testing:    197.9 seconds, 54.8%
Report:              52.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction -54} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_sub} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_pop} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction float_cos} {:instruction integer_swap} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction in1} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction integer_shove} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction float_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_flush} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction float_div} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_max} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_swap})
Best program: (in1 in1 float_inc float_stackdepth in1 integer_add integer_min integer_rot integer_flush -54 integer_yankdup integer_dup_times float_sub float_dup_items float_sub float_rot integer_mod integer_yankdup integer_add float_sub float_inc float_sub float_div float_rot integer_mod integer_yankdup float_div tag_float_222 integer_mod in1 integer_shove integer_mod float_pop float_frominteger integer_fromfloat integer_div float_swap float_cos integer_swap float_flush 46.29272832092809 tagged_392 float_flush in1 float_yankdup float_frominteger integer_fromfloat float_pop integer_mult 46.29272832092809 float_flush integer_shove in2 float_shove float_sub float_add integer_add float_frominteger integer_swap print_integer 86 print_float print_float float_stackdepth float_sub integer_dec integer_add float_dup_times integer_stackdepth print_integer float_flush print_float integer_yank float_flush integer_min integer_swap float_max print_integer integer_mult 4 integer_dup_times float_flush integer_min integer_fromfloat tag_float_618 tagged_948 float_div float_flush integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_max print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_swap)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4285.2182741999995
Median total errors in population: 198.01440000000002
Error averages by case: (160.0687131000015 8.869 157.49616450000045 8.873 163.8148966000003 7.947 158.3015579999979 9.007 160.4315458999984 8.017 169.5001727999989 8.868 164.19224249999837 8.767 161.31580880000183 8.793 161.638557799999 7.999 167.85561940000187 7.119 161.66219839999843 8.086 165.7094810000001 9.002 166.97406120000147 8.084 160.489398200003 6.458 156.08787799999902 8.03 168.00629810000075 8.725 167.28904289999986 7.221 165.0084696999988 7.131 156.98624099999859 8.859 161.97930969999908 9.7 160.8220086999982 8.001 170.93713949999875 8.949 162.4373027999987 9.733 173.2709804999987 9.076 153.7261850999996 7.903)
Error minima by case: (0.2466 6 0.3784 6 0.0655 6 0.2789 5 0.2699 6 0.009 6 0.0724 6 0.4372 5 0.4404 6 0.4145 5 0.1257 6 0.0377 7 0.0151 5 0.4304 4 0.2247 6 0.2504 5 0.1201 6 0.1318 5 0.2317 6 0.083 5 0.1341 6 0.1612 6 0.1464 8 0.2813 7 0.1468 5)
Average genome size in population (length): 99.014
Average program size in population (points): 100.014
Average percent parens in population: 0.010
Minimum age in population: 123.1251010176362
Maximum age in population: 128.3379933952237
Average age in population: 125.9912998733085
Median age in population: 126.0384732976982
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.225
Error (vector) diversity:			 0.268
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 197730213
--- Timings ---
Current time: 1529616180075 milliseconds
Total Time:         365.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.0 seconds, 30.7%
Fitness Testing:    200.3 seconds, 54.8%
Report:              52.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction in1} {:instruction integer_flush} {:instruction float_sub} {:instruction integer_max} {:instruction in1} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction in2} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 45.85476496626627} {:instruction 45.955304917256385} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction -69.48095316991703} {:instruction float_flush} {:instruction integer_min} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_inc} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_pop} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_inc float_stackdepth in1 integer_add integer_min in1 integer_flush float_sub integer_max in1 tag_float_222 float_flush in1 integer_shove integer_mod in2 float_sub float_rot integer_mod integer_yankdup integer_flush integer_mod float_shove float_frominteger integer_fromfloat float_frominteger integer_fromfloat integer_div float_swap 45.85476496626627 45.955304917256385 float_flush float_rot in2 float_tan float_sub integer_add float_stackdepth integer_add integer_add float_frominteger integer_swap float_shove 86 print_float float_stackdepth float_dec integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult float_sub print_float print_integer integer_min integer_swap integer_add print_float -69.48095316991703 float_flush integer_min print_integer float_dup_times float_flush float_mod integer_swap integer_add print_integer integer_mult 4 integer_max integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_fromfloat integer_swap integer_add print_integer float_inc print_float integer_stackdepth float_flush integer_min integer_swap float_pop print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4743.411206099999
Median total errors in population: 198.01440000000002
Error averages by case: (176.09216900000166 9.167 174.82954390000154 9.169 179.39553159999977 8.273 177.32217889999794 9.258 179.4024464999976 8.359 189.42092859999892 9.066 176.2850217999984 9.1 181.08343720000272 9.062 180.67763099999993 8.313 188.3913427000019 7.395 180.50436439999845 8.419 187.05154540000078 9.281 183.81650490000206 8.314 179.92297960000298 6.872 168.24649569999804 8.33 191.29574380000136 8.937 183.8396892999999 7.502 183.24997859999883 7.42 173.95460379999864 9.165 181.23787189999993 9.969 179.6829577999973 8.316 191.06339869999883 9.215 182.4155254999985 10.028 189.73699889999875 9.355 167.97031660000064 8.237)
Error minima by case: (0.2466 6 0.3858 6 0.0655 5 0.2789 4 0.2699 6 0.0096 5 0.8597 5 0.4372 6 0.4404 5 0.4145 4 0.1257 6 0.9447 7 0.0151 5 0.4304 5 0.2247 5 0.2504 4 0.1201 5 0.1318 5 0.2317 6 0.083 5 0.1341 6 0.1612 5 0.836 8 0.2813 6 0.1468 4)
Average genome size in population (length): 98.726
Average program size in population (points): 99.726
Average percent parens in population: 0.010
Minimum age in population: 124.8994456499806
Maximum age in population: 129.3424845366355
Average age in population: 127.4473708741369
Median age in population: 127.503545179651
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.263
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 200223788
--- Timings ---
Current time: 1529616184645 milliseconds
Total Time:         369.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.3 seconds, 30.6%
Fitness Testing:    202.9 seconds, 54.9%
Report:              53.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_dec} {:instruction float_tan} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_mod} {:instruction tag_float_13} {:instruction integer_inc} {:instruction float_sin} {:instruction integer_shove} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_shove} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction float_div} {:instruction integer_flush} {:instruction float_flush} {:instruction in1} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction 46.29272832092809} {:instruction tagged_490} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_mult} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_mod} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_shove} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction float_flush} {:instruction integer_min} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 integer_dec float_tan float_stackdepth in1 integer_add integer_min integer_rot integer_flush integer_yankdup float_mod tag_float_13 integer_inc float_sin integer_shove float_rot float_shove in1 integer_shove integer_mod float_shove print_integer integer_fromfloat integer_div float_shove 46.29272832092809 float_flush float_rot float_div integer_flush float_flush in1 float_yankdup integer_fromfloat integer_fromfloat 46.29272832092809 tagged_490 float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush float_mult in2 float_shove float_sub integer_add integer_add float_frominteger integer_mod print_integer 86 print_float float_stackdepth integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_shove float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 94 float_mod float_flush integer_min integer_swap float_tan integer_swap float_tan integer_swap print_integer integer_swap integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush float_flush integer_min print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3723.4419659999994
Median total errors in population: 198.01440000000002
Error averages by case: (137.95455440000129 8.744 135.58155920000019 8.749 140.39341110000058 7.849 140.1187633999984 8.893 138.83516339999946 7.912 147.76624019999923 8.691 138.4361417999989 8.672 138.17709690000066 8.642 139.21522849999886 7.849 145.52836290000164 6.91 137.65288499999912 7.951 144.0179994999999 8.81 145.12416290000047 7.887 139.4617753000021 6.322 131.7265327000004 7.905 148.18200880000015 8.596 145.6625668 7.083 144.36511829999887 6.957 134.8157932999993 8.731 140.57185949999905 9.611 136.9412194999994 7.869 149.5353363999989 8.774 140.3654019999988 9.537 148.57814739999878 8.926 128.7736367999985 7.791)
Error minima by case: (0.2466 2 0.3789 3 0.0655 4 0.2789 2 0.2699 3 0.0096 4 0.0724 4 0.4372 3 0.4404 3 0.4145 4 0.1257 3 0.0378 7 0.0151 4 0.4304 3 0.2247 4 0.2504 3 0.1201 4 0.1318 4 0.2317 3 0.083 3 0.1341 3 0.1612 4 0.1465 8 0.2813 5 0.1468 3)
Average genome size in population (length): 97.959
Average program size in population (points): 98.959
Average percent parens in population: 0.010
Minimum age in population: 126.2439642805561
Maximum age in population: 130.9332267285196
Average age in population: 128.8173949718976
Median age in population: 128.8801954187607
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.232
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 202696638
--- Timings ---
Current time: 1529616188902 milliseconds
Total Time:         374.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.5 seconds, 30.6%
Fitness Testing:    205.3 seconds, 54.9%
Report:              54.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_add} {:instruction tag_integer_988} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction float_rot} {:instruction in1} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction 46.5389467971953} {:instruction float_flush} {:instruction integer_mod} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction integer_dec} {:instruction float_rot} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_max} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction float_mod} {:instruction integer_swap} {:instruction tag_float_29} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_671} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_pop} {:instruction print_integer} {:instruction float_mod} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_inc float_dup_items float_rot integer_add tag_integer_988 float_frominteger integer_div integer_rot integer_mod float_sub integer_mod float_inc float_sub float_div tag_float_222 float_flush in1 in1 integer_shove integer_mod float_shove float_sub integer_mod float_pop float_rot in1 integer_mod integer_pop float_frominteger integer_fromfloat integer_mult 46.5389467971953 float_flush integer_mod in2 float_shove float_sub float_sub integer_add integer_add float_frominteger integer_add in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float integer_dec float_rot float_tan integer_stackdepth print_integer integer_max print_float integer_yank float_flush integer_min integer_swap integer_add float_mod integer_swap tag_float_29 print_integer integer_mult 4 integer_max integer_min integer_fromfloat tag_float_671 tagged_948 integer_max float_flush integer_fromfloat integer_swap integer_add print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap float_pop print_integer float_mod print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4380.0171721
Median total errors in population: 198.01440000000002
Error averages by case: (164.0634938000014 8.872 161.551834100001 8.854 162.45202950000007 7.958 168.0967608999982 9.028 163.97980459999843 8.094 175.01706539999898 8.825 163.16995089999853 8.799 163.10486120000178 8.783 163.41401939999938 8.029 172.29262880000164 7.142 163.11224619999868 8.112 170.3832112000002 8.967 174.1782209000013 8.08 164.61285440000265 6.487 158.18730879999873 8.035 175.33492800000067 8.721 172.58134539999998 7.213 172.00913809999884 7.138 162.06795169999884 8.878 165.1956293999995 9.693 162.39771709999826 8.042 175.24716219999885 8.961 168.3002626999988 9.745 174.00739399999884 9.108 155.72935340000006 7.966)
Error minima by case: (0.245 7 0.3858 6 0.0639 5 0.2772 5 0.2699 6 0.0031 6 0.0724 6 0.4372 6 0.4404 6 0.4128 5 0.1257 6 0.0378 7 0.0135 6 0.4288 5 0.2231 6 0.2504 5 0.12 5 0.1302 5 0.2317 7 0.0814 6 0.1325 6 0.1611 6 0.1465 8 0.2812 7 0.1452 5)
Average genome size in population (length): 97.933
Average program size in population (points): 98.933
Average percent parens in population: 0.010
Minimum age in population: 127.5811416488051
Maximum age in population: 132.3332297422794
Average age in population: 130.1496944419718
Median age in population: 130.2151778916866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.245
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 205168488
--- Timings ---
Current time: 1529616193252 milliseconds
Total Time:         378.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.7 seconds, 30.6%
Fitness Testing:    207.9 seconds, 54.9%
Report:              54.7 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 32.8069209827851} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_pop} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction in1} {:instruction in2} {:instruction float_mult} {:instruction tag_integer_908} {:instruction float_rot} {:instruction float_div} {:instruction tag_float_238} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_mult} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_shove} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.274949491192025} {:instruction float_flush} {:instruction float_rot} {:instruction float_sin} {:instruction float_rot} {:instruction in2} {:instruction float_pop} {:instruction float_sub} {:instruction integer_add} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_rot} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction print_integer} {:instruction 4} {:instruction float_sub} {:instruction integer_add} {:instruction print_integer} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (32.8069209827851 float_inc float_dup_items float_dup_items integer_dup_times float_pop tag_integer_848 float_frominteger float_inc integer_min integer_rot integer_max integer_rot integer_fromfloat integer_pop float_shove in1 integer_div integer_rot float_dec float_flush in1 integer_yankdup integer_dup_times float_sub in1 in2 float_mult tag_integer_908 float_rot float_div tag_float_238 float_sub integer_yankdup integer_rot in1 integer_shove integer_mod float_shove float_sub float_div tag_float_222 float_flush in1 integer_mult float_div tag_integer_848 float_shove print_integer integer_fromfloat integer_div integer_mult 46.274949491192025 float_flush float_rot float_sin float_rot in2 float_pop float_sub integer_add integer_shove float_frominteger integer_swap print_integer integer_add float_frominteger integer_swap print_integer 86 print_float float_rot float_sub integer_dec integer_add float_tan integer_stackdepth print_integer float_min print_float print_integer 4 float_sub integer_add print_integer integer_dup integer_yankdup integer_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3972.4636333999997
Median total errors in population: 198.01440000000002
Error averages by case: (147.35024160000148 8.902 145.20647679999993 8.87 150.88817550000087 7.98 144.19278929999805 9.003 147.86570389999898 8.072 160.14585489999902 8.846 150.33902129999854 8.793 147.9701905000014 8.783 147.25753119999865 8.041 156.5868648000018 7.092 146.6976059999986 8.112 153.33906359999958 9.003 155.57506110000085 8.06 147.79624470000294 6.549 141.19472489999953 8.065 156.5863324000005 8.71 156.5958016 7.218 156.53504669999876 7.158 144.82545289999885 8.898 148.08714009999863 9.696 145.99031649999878 8.028 162.73933869999877 8.919 150.22493799999856 9.746 162.45495179999875 9.054 136.450764599999 7.97)
Error minima by case: (0.2466 6 0.3858 6 0.0655 6 0.2789 7 0.2699 6 0.0097 6 0.0724 7 0.4372 5 0.4404 6 0.4145 5 0.1257 6 0.0378 7 0.0151 6 0.4304 5 0.2247 5 0.2504 7 0.1201 6 0.1318 5 0.2317 6 0.083 6 0.1341 6 0.1612 7 0.1465 7 0.2813 7 0.1468 6)
Average genome size in population (length): 97.67
Average program size in population (points): 98.67
Average percent parens in population: 0.010
Minimum age in population: 128.8601269609085
Maximum age in population: 133.6544595436792
Average age in population: 131.5679796009408
Median age in population: 131.6351343571947
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.243
Error (vector) diversity:			 0.266
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 207633688
--- Timings ---
Current time: 1529616197683 milliseconds
Total Time:         382.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.0 seconds, 30.6%
Fitness Testing:    210.3 seconds, 54.9%
Report:              55.3 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_min} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_pop} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_907} {:instruction float_inc} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_flush} {:instruction in1} {:instruction integer_add} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_893} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.5389467971953} {:instruction float_flush} {:instruction integer_mod} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction integer_yank} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_add} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_max} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_mult} {:instruction integer_add} {:instruction print_integer} {:instruction integer_shove} {:instruction float_mod} {:instruction 4} {:instruction 94} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_pop} {:instruction integer_max} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_dup_times} {:instruction -76} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 integer_min float_cos integer_swap integer_add integer_min integer_rot integer_add integer_pop float_shove print_integer float_div tag_integer_907 float_inc float_swap integer_fromfloat integer_div float_flush in1 integer_add integer_mod float_shove print_integer float_div tag_integer_893 float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_div integer_mult 46.5389467971953 float_flush integer_mod in2 float_shove float_sub float_sub integer_add integer_add float_frominteger integer_add float_sub integer_add integer_yank float_frominteger integer_add float_frominteger integer_swap integer_add 86 print_float float_stackdepth float_sub integer_dec integer_add integer_stackdepth print_integer integer_max print_float integer_yank float_flush integer_min integer_mult integer_add print_integer integer_shove float_mod 4 94 integer_inc float_flush integer_min integer_swap integer_add print_integer float_pop integer_max float_stackdepth print_integer integer_dup_times -76 float_flush in1 integer_yankdup integer_dup float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4231.1929875999995
Median total errors in population: 198.01440000000002
Error averages by case: (155.7662194000016 8.939 153.02214070000065 8.902 163.7093598000001 8.021 155.11742379999805 9.037 159.92338809999868 8.091 171.14884859999907 8.904 159.84856199999848 8.855 159.19076320000164 8.832 159.786209699999 8.047 170.65941170000187 7.131 159.02062729999867 8.16 163.72151410000012 8.982 163.72951210000133 8.102 160.52819280000273 6.544 148.0957690999992 8.076 172.762007600001 8.78 166.7781416 7.252 162.11554099999873 7.165 152.38076529999893 8.897 160.95932159999907 9.752 157.92670449999855 8.064 171.14825799999866 8.954 160.3902314999986 9.733 169.62985489999875 9.103 143.5172191999991 7.994)
Error minima by case: (0.2466 7 0.3773 7 0.0655 6 0.2789 5 0.2699 6 0.01 6 0.0724 6 0.4372 6 0.4404 6 0.4145 5 0.1257 6 0.0378 7 0.0151 6 0.4304 5 0.2247 6 0.2504 5 0.1201 6 0.1318 5 0.2317 7 0.083 6 0.1341 6 0.1612 6 0.1465 7 0.2813 7 0.1468 5)
Average genome size in population (length): 96.967
Average program size in population (points): 97.967
Average percent parens in population: 0.010
Minimum age in population: 130.5528179649094
Maximum age in population: 135.2382363959385
Average age in population: 132.987258996993
Median age in population: 133.0582746897255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.24
Error (vector) diversity:			 0.277
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 210080958
--- Timings ---
Current time: 1529616202101 milliseconds
Total Time:         387.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.3 seconds, 30.5%
Fitness Testing:    212.9 seconds, 55.0%
Report:              56.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_min} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_mod} {:instruction float_cos} {:instruction integer_yankdup} {:instruction float_sub} {:instruction integer_max} {:instruction float_sub} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_599} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 45.71511562092143} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_yankdup} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_pop} {:instruction print_float} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_1251} {:instruction integer_max} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_mod} {:instruction print_float} {:instruction float_pop} {:instruction in1} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_min float_stackdepth in1 integer_add integer_min integer_rot integer_inc integer_mult float_max integer_dup_times float_sub integer_mod float_sub float_rot integer_mod float_cos integer_yankdup float_sub integer_max float_sub float_div float_inc float_sub integer_mod float_sub tag_float_222 float_flush in1 integer_shove integer_mod float_shove float_frominteger integer_fromfloat integer_stackdepth float_swap 46.29272832092809 tagged_392 float_flush 46.29272832092809 tagged_599 float_frominteger integer_fromfloat integer_div integer_mult 45.71511562092143 float_flush float_rot in2 float_yankdup float_sub integer_add integer_add float_frominteger float_dup_items print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add integer_add integer_stackdepth print_integer integer_mult print_float integer_yank float_pop print_float integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_1251 integer_max float_flush integer_fromfloat integer_swap integer_yankdup print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap integer_add print_integer float_mod print_float float_pop in1 integer_dup integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4003.113392399999
Median total errors in population: 198.01440000000002
Error averages by case: (148.2977711000014 8.945 145.92448819999981 8.914 153.23965160000094 8.045 143.65007419999804 9.084 152.33330199999907 8.119 161.02561289999878 8.915 150.41585129999845 8.843 152.18197260000113 8.844 152.49267619999853 8.063 156.4704904000018 7.191 151.9173678999985 8.177 152.60892049999933 9.04 154.42837730000045 8.146 153.1693657000029 6.603 144.35039159999965 8.099 158.2955348999999 8.805 154.18267590000005 7.34 152.20633099999873 7.226 145.50406749999877 8.917 153.77957479999856 9.76 151.15169839999876 8.113 159.02019659999885 9.018 147.43770549999869 9.766 156.90797729999875 9.165 140.96731699999904 8.016)
Error minima by case: (0.243 3 0.3774 3 0.0619 4 0.2752 3 0.2699 3 0.0096 4 0.0724 4 0.4372 3 0.4404 3 0.4108 4 0.1257 3 0.0162 7 0.0115 4 0.4268 3 0.2211 4 0.2504 3 0.1201 4 0.1282 4 0.2316 3 0.0794 2 0.1305 3 0.1612 4 0.0789 7 0.2813 5 0.1432 3)
Average genome size in population (length): 96.09
Average program size in population (points): 97.09
Average percent parens in population: 0.010
Minimum age in population: 131.6269166812088
Maximum age in population: 136.3183603039483
Average age in population: 134.4197559067682
Median age in population: 134.4984059759764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.256
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 212506283
--- Timings ---
Current time: 1529616206619 milliseconds
Total Time:         391.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.6 seconds, 30.5%
Fitness Testing:    215.4 seconds, 55.0%
Report:              56.6 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 46.29272832092809} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_sub} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_707} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_max} {:instruction print_float} {:instruction integer_min} {:instruction in1} {:instruction integer_add} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (integer_pop float_stackdepth in1 float_inc integer_min integer_rot integer_mod integer_mod integer_yankdup float_inc float_sub float_stackdepth float_sub float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_float_222 float_flush integer_dup_times integer_shove integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div 46.29272832092809 tagged_428 float_frominteger integer_fromfloat integer_div 46.29272832092809 float_flush float_rot in2 float_sub float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float print_float float_stackdepth float_sub integer_dec integer_add float_dup_times integer_stackdepth print_integer integer_swap integer_add print_integer integer_mult 4 integer_dup_times float_flush integer_min integer_fromfloat tag_float_707 tagged_948 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult float_dup integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_max print_float integer_min in1 integer_add print_integer integer_fromfloat print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4331.4069211
Median total errors in population: 198.01440000000002
Error averages by case: (160.29846890000144 8.95 158.02699120000074 8.892 167.27114299999988 8.007 160.33765049999812 9.061 163.1451253999986 8.115 171.6005921999991 8.894 167.29138949999862 8.867 162.10306350000172 8.835 162.3773142999995 8.065 168.3229887000017 7.155 161.09793599999867 8.141 170.02992960000054 9.007 165.09271950000104 8.104 166.05961490000254 6.549 157.59253829999872 8.07 173.1426535000007 8.765 171.15832749999996 7.247 167.29762949999898 7.154 160.79769599999884 8.911 162.29649929999943 9.71 161.77820929999822 8.071 173.81792659999903 8.948 162.81614059999876 9.773 173.8000120999989 9.124 153.4593612000002 7.98)
Error minima by case: (0.2466 6 0.3858 6 0.0569 5 0.2769 4 0.2699 6 0.009 5 0.0724 5 0.4372 6 0.4404 5 0.4144 5 0.1257 6 0.0291 7 0.0151 5 0.4304 5 0.2247 5 0.2504 4 0.1201 5 0.1318 4 0.2317 6 0.083 5 0.1341 6 0.1612 5 0.0796 8 0.2813 6 0.1468 4)
Average genome size in population (length): 95.722
Average program size in population (points): 96.722
Average percent parens in population: 0.010
Minimum age in population: 132.6269166812088
Maximum age in population: 137.9489592101588
Average age in population: 135.8431389043372
Median age in population: 135.8944944707825
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.25
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 214921108
--- Timings ---
Current time: 1529616211145 milliseconds
Total Time:         396.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.9 seconds, 30.5%
Fitness Testing:    217.9 seconds, 55.0%
Report:              57.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_add} {:instruction tag_integer_988} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_sin} {:instruction in1} {:instruction integer_shove} {:instruction tagged_392} {:instruction float_cos} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_div} {:instruction float_flush} {:instruction in1} {:instruction integer_add} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_893} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction integer_shove} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction print_float} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_shove} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 95} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dup_items} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction float_flush} {:instruction integer_min} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_inc float_dup_items float_rot integer_add tag_integer_988 integer_dup integer_min integer_mod integer_yankdup integer_max integer_sub integer_fromfloat integer_pop float_shove in1 integer_div integer_rot integer_mod float_sub float_div tag_float_222 float_sin in1 integer_shove tagged_392 float_cos integer_shove integer_dup_items float_shove integer_div float_flush in1 integer_add integer_mod float_shove print_integer float_div tag_integer_893 float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div 46.29272832092809 float_flush integer_shove in2 float_shove float_sub integer_add print_float float_frominteger integer_swap print_integer 86 print_float float_stackdepth integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_shove float_flush integer_min integer_swap integer_add print_integer integer_mult print_float 4 95 float_mod float_flush integer_min integer_swap float_tan integer_swap float_tan integer_swap print_integer integer_swap integer_min float_dup_items tag_float_618 tagged_948 integer_max float_flush float_flush integer_min print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4651.4865633
Median total errors in population: 198.82235
Error averages by case: (173.4618266000014 8.991 170.48574200000118 8.947 176.77799339999967 8.122 175.06915449999826 9.15 175.04649749999842 8.18 185.32434689999923 8.947 175.9862169999987 8.911 173.97669130000176 8.884 173.44400539999984 8.127 186.76096930000168 7.241 173.4100680999989 8.223 180.6100557000008 9.089 180.00296920000136 8.181 175.4202670000022 6.639 164.7194628999988 8.175 190.29006370000138 8.836 187.70102719999997 7.398 181.50728779999892 7.269 170.8415866999991 8.975 175.8433426999999 9.748 173.5339540999981 8.129 190.2596873999991 9.02 176.6027291999989 9.799 190.14494829999904 9.201 162.02566940000025 8.058)
Error minima by case: (0.2462 6 0.3858 6 0.0651 5 0.2785 4 0.2699 6 0.0096 5 0.0724 5 0.4372 6 0.4404 5 0.4141 5 0.1257 6 0.0378 7 0.0147 5 0.43 5 0.2243 5 0.2504 4 0.1201 5 0.1314 4 0.2317 6 0.0826 5 0.1337 6 0.1612 5 0.1465 8 0.2813 6 0.1464 4)
Average genome size in population (length): 94.749
Average program size in population (points): 95.749
Average percent parens in population: 0.011
Minimum age in population: 134.6345219288221
Maximum age in population: 139.0835372805721
Average age in population: 137.2950114845384
Median age in population: 137.3212359080325
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.25
Error (vector) diversity:			 0.286
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 217311408
--- Timings ---
Current time: 1529616215534 milliseconds
Total Time:         400.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.2 seconds, 30.5%
Fitness Testing:    220.3 seconds, 55.0%
Report:              58.0 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_rot} {:instruction integer_flush} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_222} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction integer_dup} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 45.40875882152537} {:instruction tagged_374} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_mult} {:instruction 46.5389467971953} {:instruction float_flush} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 46.35849004150858} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 45.07284750349333} {:instruction float_flush} {:instruction float_rot} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_integer} {:instruction 4} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (integer_rot print_integer integer_mod integer_rot integer_flush tag_float_222 float_flush in1 tag_float_222 integer_mod in1 integer_shove integer_dec float_shove print_integer integer_dup tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 45.40875882152537 tagged_374 float_frominteger integer_fromfloat integer_sub integer_mult 46.5389467971953 float_flush float_rot integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 46.35849004150858 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 45.07284750349333 float_flush float_rot float_flush float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap print_integer 86 print_float float_dup_times float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float print_integer 4 integer_swap integer_add print_integer integer_mult print_float integer_stackdepth integer_add print_integer integer_fromfloat print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4747.778955599999
Median total errors in population: 198.01440000000002
Error averages by case: (177.57176940000144 8.981 174.91662260000103 8.969 182.4879049000003 8.053 175.53165229999792 9.059 180.52675569999792 8.173 189.39630919999883 8.889 180.56260729999826 8.906 181.51597940000246 8.822 180.75290389999924 8.068 186.71957330000177 7.221 179.60774899999814 8.208 185.83168780000042 9.069 183.75457360000175 8.162 181.4977889000034 6.6 172.10982939999815 8.126 191.0792287000015 8.801 184.900431 7.366 182.14848909999878 7.248 174.97327649999838 8.953 180.92561099999924 9.799 179.5806582999977 8.134 191.48068639999875 8.984 180.22562449999856 9.773 189.0669322999987 9.207 169.0163111000004 8.027)
Error minima by case: (0.247 5 0.3858 5 0.0659 4 0.2792 3 0.2699 5 0.0031 4 0.0724 4 0.4372 4 0.4404 5 0.4148 4 0.1257 5 0.0377 7 0.0155 4 0.4308 4 0.2251 4 0.2504 4 0.1201 4 0.1322 3 0.2317 5 0.0834 5 0.1345 5 0.1612 4 0.1464 8 0.2813 5 0.1472 4)
Average genome size in population (length): 93.692
Average program size in population (points): 94.692
Average percent parens in population: 0.011
Minimum age in population: 135.6345219288221
Maximum age in population: 140.7496595448899
Average age in population: 138.7031250955641
Median age in population: 138.7151382553092
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.259
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 219674683
--- Timings ---
Current time: 1529616219809 milliseconds
Total Time:         405.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.6 seconds, 30.5%
Fitness Testing:    222.7 seconds, 55.0%
Report:              58.7 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_yank} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction float_div} {:instruction tag_float_222} {:instruction -27.602058835816194} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_flush} {:instruction float_add} {:instruction tag_float_176} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_dup} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction integer_mod} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_shove} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_inc integer_yankdup float_inc float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove integer_yank tag_integer_848 float_frominteger float_div tag_float_222 -27.602058835816194 integer_mod integer_yankdup integer_dup_times float_sub integer_mod float_flush float_add tag_float_176 in1 integer_shove integer_mod float_shove print_integer integer_fromfloat integer_div float_dup 46.29272832092809 float_flush integer_mod in2 integer_swap float_sub integer_add integer_max float_frominteger float_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank integer_mod integer_shove integer_swap print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth integer_mult integer_stackdepth float_stackdepth integer_stackdepth float_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3996.3940872999992
Median total errors in population: 198.01440000000002
Error averages by case: (146.45324350000135 8.91 143.64410430000046 8.865 159.91914430000026 8.013 142.0967362999986 9.038 150.16834059999886 8.091 155.89135009999927 8.835 156.00982639999887 8.829 149.98147900000143 8.794 148.49567759999914 8.038 160.32852940000174 7.137 149.49239639999908 8.161 158.2680211000001 9.036 149.3205158000005 8.082 150.48040610000217 6.546 142.37004329999954 8.018 162.0860890000006 8.764 156.79208089999995 7.276 148.5457911999989 7.184 143.8358558999993 8.91 151.04036729999922 9.751 148.65916949999874 8.066 161.45841679999907 9.005 153.3613699999987 9.793 158.970102799999 9.112 138.46902969999906 8.002)
Error minima by case: (0.2466 6 0.3858 5 0.0655 5 0.2789 4 0.6622 6 0.0096 5 0.8597 5 0.4949 6 0.4917 5 0.4145 5 0.8064 6 0.9437 7 0.0151 5 0.4304 5 0.2247 5 0.2504 4 0.1201 5 0.1318 5 0.7005 6 0.083 5 0.1341 6 0.1612 5 0.835 8 0.2813 6 0.1468 4)
Average genome size in population (length): 93.819
Average program size in population (points): 94.819
Average percent parens in population: 0.011
Minimum age in population: 136.6345219288221
Maximum age in population: 142.1082738472891
Average age in population: 140.1177285999606
Median age in population: 140.1541532540184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.233
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 222039633
--- Timings ---
Current time: 1529616224215 milliseconds
Total Time:         409.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.9 seconds, 30.5%
Fitness Testing:    225.3 seconds, 55.0%
Report:              59.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_flush} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_pop} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_flush float_dup_items float_inc integer_shove float_flush tag_float_222 float_flush in1 integer_shove integer_dup_items integer_dup_items integer_dup_times integer_fromfloat integer_div integer_mult integer_rot float_flush float_rot in2 float_pop float_sub integer_add integer_max float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_fromfloat integer_swap integer_add print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4321.6549171999995
Median total errors in population: 198.01440000000002
Error averages by case: (164.69023930000137 8.812 161.4875811000008 8.812 166.01304860000033 7.889 159.18618999999836 8.943 165.33369719999877 8.009 170.4225559999993 8.744 164.84902609999878 8.742 164.53895130000126 8.69 164.7179923999994 7.914 167.16187500000154 7.044 163.803439699999 8.053 164.52746820000002 8.939 166.54941190000076 7.997 166.0002285000023 6.406 158.9955731999991 7.978 170.43930990000047 8.653 165.16371909999995 7.174 164.7707450999988 7.081 161.03960009999915 8.811 166.33964779999943 9.625 162.9235872999986 7.98 169.78074169999897 8.845 162.6146573999988 9.674 168.84353999999894 9.037 153.7270902999998 7.883)
Error minima by case: (0.244 6 0.3858 6 0.0629 4 0.2762 5 0.2699 6 0.009 4 0.0724 4 0.4372 6 0.4404 6 0.4118 5 0.1257 6 0.0378 7 0.0125 5 0.4278 5 0.2221 4 0.2504 4 0.12 5 0.1292 4 0.2316 6 0.0804 6 0.1315 5 0.7684 4 0.1465 7 0.2812 5 0.1442 5)
Average genome size in population (length): 93.54
Average program size in population (points): 94.54
Average percent parens in population: 0.011
Minimum age in population: 138.3230680742635
Maximum age in population: 143.4042995997881
Average age in population: 141.5161136473495
Median age in population: 141.5659082927695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.242
Error (vector) diversity:			 0.277
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 224397583
--- Timings ---
Current time: 1529616228260 milliseconds
Total Time:         413.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.1 seconds, 30.5%
Fitness Testing:    227.6 seconds, 55.0%
Report:              59.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_min} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_add} {:instruction integer_min} {:instruction float_sub} {:instruction float_rot} {:instruction in1} {:instruction integer_yankdup} {:instruction float_div} {:instruction tag_float_88} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction integer_sub} {:instruction float_flush} {:instruction integer_shove} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_rot} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_dec} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_sub} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction float_mod} {:instruction integer_rot} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_yank} {:instruction tagged_965} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup_items} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 float_min float_stackdepth in1 integer_add integer_min float_sub float_rot in1 integer_yankdup float_div tag_float_88 integer_mod in1 integer_shove integer_mod float_shove float_frominteger integer_fromfloat integer_div float_swap integer_sub float_flush integer_shove in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger integer_rot print_integer 86 print_float float_dec float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float float_sub integer_yank integer_yank float_sub integer_add print_integer integer_mult print_float 4 float_mod integer_rot integer_min integer_swap integer_add print_integer integer_swap float_stackdepth float_mod float_div print_float float_yank tagged_965 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult float_dup_items print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3905.536704499999
Median total errors in population: 198.01440000000002
Error averages by case: (141.8070016000013 8.952 139.56976740000022 8.892 149.3037835000005 8.089 141.48463939999837 9.088 146.67250489999927 8.147 156.97223329999912 8.893 145.1778345999988 8.888 146.3681423000011 8.846 147.34743959999895 8.101 154.85775380000172 7.23 146.372762399999 8.188 156.62633459999986 9.07 149.36475570000064 8.139 147.86783230000228 6.612 136.30413390000007 8.13 156.2406284000002 8.809 151.14795439999995 7.327 149.11884819999867 7.247 139.6837048999992 8.945 147.84195509999893 9.764 145.39423059999902 8.105 161.97630729999892 9.036 145.9441615999987 9.814 156.31891219999892 9.172 134.23208249999868 8.057)
Error minima by case: (0.2466 5 0.3774 5 0.0655 5 0.2789 4 0.2699 5 0.0096 5 0.0724 5 0.4372 5 0.4404 5 0.4145 5 0.1257 5 0.0378 7 0.0151 5 0.4304 4 0.2247 5 0.2504 4 0.12 5 0.1318 5 0.2317 5 0.083 4 0.1341 5 0.1611 5 0.1465 8 0.2812 6 0.1468 4)
Average genome size in population (length): 93.292
Average program size in population (points): 94.292
Average percent parens in population: 0.011
Minimum age in population: 140.1176983288184
Maximum age in population: 145.084817539546
Average age in population: 142.9184890051819
Median age in population: 143.0129766118639
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.248
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 226749924
--- Timings ---
Current time: 1529616232794 milliseconds
Total Time:         417.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.4 seconds, 30.5%
Fitness Testing:    230.2 seconds, 55.1%
Report:              60.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_rot} {:instruction float_shove} {:instruction in1} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_sub} {:instruction in1} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_169} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_flush} {:instruction in1} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_mult} {:instruction 46.5389467971953} {:instruction float_flush} {:instruction float_dec} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_swap} {:instruction 86} {:instruction print_float} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 4} {:instruction float_dup_times} {:instruction float_flush} {:instruction integer_min} {:instruction float_stackdepth} {:instruction tag_float_697} {:instruction integer_mod} {:instruction integer_max} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_flush} {:instruction print_float} {:instruction tag_float_618} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_float} {:instruction print_float} {:instruction print_float} {:instruction float_swap} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (float_add integer_rot float_shove in1 integer_div integer_rot integer_mod float_dec float_div float_sub float_dup_times float_sub in1 tag_float_222 float_flush in1 tag_float_169 integer_mod integer_flush float_flush in1 float_yankdup integer_fromfloat integer_fromfloat integer_sub integer_mult 46.5389467971953 float_flush float_dec in2 float_shove float_sub integer_add integer_fromfloat float_frominteger integer_swap 86 print_float print_float float_stackdepth float_sub integer_dec integer_add float_dup_times integer_stackdepth print_integer print_integer integer_mult 4 integer_dup_times float_flush integer_min integer_fromfloat 4 float_dup_times float_flush integer_min float_stackdepth tag_float_697 integer_mod integer_max print_integer integer_mult integer_max float_stackdepth print_integer integer_dup_items print_float float_flush print_float tag_float_618 integer_mult float_dup integer_dup_items integer_mod integer_dup float_flush integer_fromfloat integer_swap integer_dup print_float print_float print_float float_swap in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3935.4598631999997
Median total errors in population: 198.01440000000002
Error averages by case: (143.5658956000014 8.844 139.84094530000024 8.847 152.1913318000009 7.979 142.4976217999985 8.983 149.14683109999928 8.063 158.77591269999928 8.776 147.4601791999989 8.79 149.2019366000008 8.749 149.37075159999867 7.995 157.5501037000018 7.097 146.9263093999991 8.111 153.42833559999954 8.986 150.24771580000026 8.035 150.07574860000238 6.513 138.9903543999997 8.051 159.40162170000033 8.702 152.19918939999997 7.202 149.47710779999875 7.113 139.63807129999924 8.876 149.5971433999987 9.684 147.19449879999902 8.047 161.76459369999898 8.899 146.57970609999862 9.706 155.41360459999888 9.056 135.87635319999885 7.944)
Error minima by case: (0.2466 5 0.3774 5 0.0655 5 0.2789 4 0.2698 5 0.0096 5 0.0723 5 0.4371 5 0.4403 5 0.4145 5 0.1256 5 0.0378 7 0.0151 5 0.4304 4 0.2247 5 0.2504 4 0.1201 5 0.1318 5 0.2316 5 0.083 4 0.1341 5 0.1612 5 0.1465 8 0.2813 6 0.1468 4)
Average genome size in population (length): 92.949
Average program size in population (points): 93.949
Average percent parens in population: 0.011
Minimum age in population: 141.1176983288184
Maximum age in population: 146.4040334539147
Average age in population: 144.3788468943511
Median age in population: 144.4282766332533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.249
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 229093324
--- Timings ---
Current time: 1529616237526 milliseconds
Total Time:         422.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.7 seconds, 30.5%
Fitness Testing:    232.8 seconds, 55.1%
Report:              60.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_inc} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_max} {:instruction integer_dup} {:instruction integer_yank} {:instruction float_sub} {:instruction float_flush} {:instruction in1} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_flush} {:instruction 46.49221028952363} {:instruction integer_div} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_490} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_swap} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_mod} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction print_integer} {:instruction integer_dup_items} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_pop} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_dup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction print_integer})
Best program: (in1 integer_add integer_fromfloat float_cos float_inc integer_max integer_rot integer_fromfloat integer_pop integer_dec float_max integer_dup integer_yank float_sub float_flush in1 float_shove float_frominteger integer_fromfloat integer_div float_flush 46.49221028952363 integer_div float_flush 46.29272832092809 tagged_490 float_frominteger integer_fromfloat integer_div float_flush float_rot in2 float_swap integer_rot float_sub integer_add integer_add float_frominteger float_mod print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_pop integer_stackdepth print_integer print_integer integer_dup_items print_float 4 94 float_pop float_flush integer_min integer_swap integer_add print_integer integer_mult integer_dec float_flush integer_fromfloat integer_swap float_dup print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_mult print_float print_float float_yank integer_stackdepth integer_stackdepth integer_rot print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4220.0180732
Median total errors in population: 198.01440000000002
Error averages by case: (160.25318790000142 8.912 156.43112770000062 8.89 162.87764570000044 7.991 155.38428819999788 9.052 160.8320677999984 8.088 164.22372939999894 8.85 162.78127199999844 8.822 159.84098560000183 8.801 160.16219269999905 8.049 162.58701670000164 7.154 159.09498769999834 8.144 160.31808909999987 8.998 161.50185780000095 8.069 161.65041170000302 6.532 155.11745599999858 8.057 165.16133560000026 8.748 162.7444357 7.257 160.4602857999989 7.159 157.11520849999854 8.919 162.2560672999991 9.714 158.3089531999983 8.071 164.26789559999895 8.975 160.02658089999872 9.726 165.12436229999886 9.096 151.43963229999997 7.983)
Error minima by case: (0.244 7 0.3858 7 0.0629 6 0.2763 5 0.2699 6 0.0096 6 0.0724 6 0.4372 7 0.4404 6 0.4119 5 0.1257 6 0.0378 7 0.0125 5 0.4278 5 0.2221 6 0.2504 5 0.1201 5 0.1292 5 0.2317 6 0.0804 6 0.1315 6 0.1612 6 0.1465 8 0.2813 7 0.1442 5)
Average genome size in population (length): 92.777
Average program size in population (points): 93.777
Average percent parens in population: 0.011
Minimum age in population: 142.1176983288184
Maximum age in population: 147.9696142955245
Average age in population: 145.757093234203
Median age in population: 145.8078096565473
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.229
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 231432481
--- Timings ---
Current time: 1529616241868 milliseconds
Total Time:         427.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.0 seconds, 30.4%
Fitness Testing:    235.4 seconds, 55.1%
Report:              61.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_flush} {:instruction -54} {:instruction float_flush} {:instruction integer_dup_times} {:instruction float_tan} {:instruction integer_min} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction float_div} {:instruction tag_float_222} {:instruction -27.602058835816194} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction float_rot} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction float_flush} {:instruction float_sin} {:instruction tag_float_176} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_dup} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction integer_mod} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction tag_float_451} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_mult} {:instruction print_float} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_min} {:instruction float_mult} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction 94} {:instruction tagged_749} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_mod} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_flush} {:instruction in1} {:instruction float_tan} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_tan})
Best program: (in1 integer_flush -54 float_flush integer_dup_times float_tan integer_min integer_rot float_sub in1 tag_float_222 float_flush in1 integer_pop integer_mod float_shove print_integer float_div tag_integer_848 float_frominteger float_div tag_float_222 -27.602058835816194 integer_mult float_inc float_sub float_div float_rot float_sub float_div tag_float_222 integer_fromfloat integer_mod float_flush float_sin tag_float_176 in1 integer_shove integer_mod float_shove print_integer integer_fromfloat integer_div float_dup 46.29272832092809 float_flush integer_mod in2 integer_swap float_sub integer_add float_frominteger integer_swap float_shove 86 print_float float_stackdepth tag_float_451 integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult float_sub print_float print_integer integer_min integer_swap integer_mult print_float float_inc float_dup_times integer_min float_mult integer_add print_integer integer_mult print_float integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 94 tagged_749 float_flush integer_min integer_swap integer_add print_integer integer_mult float_mod float_stackdepth print_integer integer_dup_times print_float float_flush in1 float_tan integer_inc float_stackdepth print_integer float_tan)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4215.9142929
Median total errors in population: 198.01440000000002
Error averages by case: (156.02451820000138 8.922 152.08997500000038 8.886 161.25840110000013 8.014 157.58095989999802 9.082 160.1795337999987 8.085 168.69565369999907 8.879 158.40270839999852 8.882 156.45957660000136 8.826 158.48033869999907 8.031 162.91062780000172 7.157 158.44801889999866 8.131 166.73370520000026 8.988 161.98667480000117 8.121 160.04301700000266 6.516 150.75824949999918 8.065 166.3961498000008 8.794 165.76940600000006 7.3 164.44845319999865 7.225 156.37162689999894 8.901 160.1106304999992 9.733 158.65158059999828 8.064 169.07264089999885 8.998 159.9428123999987 9.702 164.94754869999878 9.135 149.68148529999937 8.033)
Error minima by case: (0.243 5 0.3858 5 0.0619 6 0.2752 6 0.2699 6 0.0097 6 0.0724 6 0.4372 4 0.4404 6 0.4108 5 0.1257 6 0.0378 7 0.0115 6 0.4268 5 0.2211 6 0.2504 6 0.1201 6 0.1282 5 0.2317 5 0.0794 5 0.1305 5 0.1612 6 0.1465 8 0.2813 7 0.1432 6)
Average genome size in population (length): 93.454
Average program size in population (points): 94.454
Average percent parens in population: 0.011
Minimum age in population: 144.6431903903874
Maximum age in population: 148.9668177072058
Average age in population: 147.1562395260284
Median age in population: 147.20505251964
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.254
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 233789247
--- Timings ---
Current time: 1529616246373 milliseconds
Total Time:         431.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.3 seconds, 30.4%
Fitness Testing:    237.8 seconds, 55.1%
Report:              62.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_inc} {:instruction float_add} {:instruction tag_float_110} {:instruction tag_float_222} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction tag_float_222} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_swap} {:instruction tagged_392} {:instruction float_flush} {:instruction 45.40875882152537} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction 46.5389467971953} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction tag_float_618} {:instruction integer_mult} {:instruction integer_max} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_swap} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 integer_inc float_add tag_float_110 tag_float_222 float_dup integer_yankdup float_mod tag_float_222 integer_mod integer_yankdup float_sub integer_mod integer_mod in1 integer_shove integer_dec float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_sub integer_swap tagged_392 float_flush 45.40875882152537 tagged_428 float_frominteger integer_fromfloat integer_stackdepth integer_mult 46.5389467971953 float_flush float_rot in2 float_shove float_sub integer_add integer_fromfloat float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_shove print_integer integer_mult print_float 4 tag_float_618 integer_mult integer_max print_integer integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_mult print_float float_swap in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4494.324200099999
Median total errors in population: 198.01440000000002
Error averages by case: (169.3176626000015 8.989 166.10787280000093 8.952 174.06243930000014 8.084 164.6883946999981 9.135 171.98686099999816 8.166 177.9654404999992 8.913 172.2743558999983 8.889 171.206869000002 8.851 170.36058369999935 8.085 174.93800520000184 7.24 169.2073332999987 8.231 172.4030798000004 9.052 171.6931283000012 8.164 173.2303784000031 6.635 163.77859019999846 8.13 177.73634880000068 8.804 173.5735108 7.367 173.05754509999866 7.26 166.35413649999893 8.964 172.64152289999927 9.752 170.24499329999801 8.137 178.37532229999886 9.028 167.89582109999853 9.789 177.7097612999988 9.225 161.65724330000015 8.015)
Error minima by case: (0.2466 6 0.3843 5 0.0655 6 0.2789 5 0.2684 6 0.0096 5 0.0709 5 0.4357 4 0.4389 6 0.4145 5 0.1242 6 0.0162 6 0.0151 6 0.4304 4 0.2247 4 0.6817 5 0.8121 5 0.1318 5 0.2302 5 0.083 4 0.1341 5 0.771 5 0.1249 7 0.6509 6 0.1468 4)
Average genome size in population (length): 92.896
Average program size in population (points): 93.896
Average percent parens in population: 0.011
Minimum age in population: 146.0110965806724
Maximum age in population: 150.5038927697807
Average age in population: 148.5780207744902
Median age in population: 148.6298544320998
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.265
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 236132579
--- Timings ---
Current time: 1529616250662 milliseconds
Total Time:         435.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.6 seconds, 30.4%
Fitness Testing:    240.3 seconds, 55.1%
Report:              63.0 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_integer_453} {:instruction integer_pop} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_swap} {:instruction -54} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_div} {:instruction integer_min} {:instruction integer_rot} {:instruction in1} {:instruction integer_yankdup} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction integer_sub} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_rot} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_dec} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_sub} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_sub} {:instruction integer_add} {:instruction print_integer} {:instruction float_sub} {:instruction print_float} {:instruction 4} {:instruction float_mod} {:instruction float_mod} {:instruction print_float} {:instruction integer_min} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction 42} {:instruction integer_mult} {:instruction print_float} {:instruction in2} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (tag_integer_453 integer_pop float_inc float_stackdepth integer_shove integer_fromfloat integer_rot integer_mult integer_fromfloat integer_pop integer_shove integer_fromfloat integer_min integer_rot integer_flush integer_swap -54 float_dup integer_yankdup integer_add float_div integer_min integer_rot in1 integer_yankdup float_div tag_float_222 integer_mod in1 integer_shove float_yankdup float_shove float_frominteger integer_fromfloat integer_div float_swap integer_sub float_flush float_rot in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger integer_rot print_integer 86 print_float float_dec float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float float_sub float_dup_times integer_shove float_sub integer_add print_integer float_sub print_float 4 float_mod float_mod print_float integer_min integer_min integer_swap integer_add print_integer float_div float_stackdepth float_mod integer_max float_flush integer_min integer_swap integer_add print_integer 42 integer_mult print_float in2 in1 integer_stackdepth integer_mod float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4348.806041199999
Median total errors in population: 198.01440000000002
Error averages by case: (167.72585880000145 8.961 163.78907970000108 8.929 162.35645530000008 8.0 163.73277729999808 9.098 167.45512229999818 8.142 170.524019599999 8.886 163.22665379999842 8.823 165.45912540000208 8.824 165.90950989999945 8.082 166.03949380000176 7.157 165.30502729999847 8.195 163.34837690000026 9.013 169.6461089000015 8.125 167.31095430000272 6.599 161.0291162999983 8.105 168.30868380000072 8.776 167.15134480000003 7.339 168.6410074999988 7.222 165.11108889999866 8.931 168.00837429999953 9.738 165.33252089999786 8.102 167.24591629999887 8.978 160.77684869999874 9.732 169.24442519999886 9.151 155.21815120000042 8.002)
Error minima by case: (0.244 6 0.3858 6 0.0629 6 0.2762 7 0.2699 6 0.0096 7 0.0724 6 0.4372 6 0.4404 6 0.4118 5 0.1257 6 0.0378 7 0.0125 7 0.4278 5 0.2221 5 0.2504 7 0.1201 6 0.1292 5 0.2316 6 0.0804 6 0.1315 6 0.1612 7 0.1465 8 0.2813 6 0.1442 6)
Average genome size in population (length): 92.866
Average program size in population (points): 93.866
Average percent parens in population: 0.011
Minimum age in population: 147.7810799378205
Maximum age in population: 152.0264333987967
Average age in population: 149.9649008217527
Median age in population: 149.9796341672232
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.252
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 238476304
--- Timings ---
Current time: 1529616254659 milliseconds
Total Time:         439.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.7 seconds, 30.4%
Fitness Testing:    242.6 seconds, 55.2%
Report:              63.5 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_add} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_min} {:instruction tag_float_222} {:instruction integer_add} {:instruction in1} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sub} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_sub} {:instruction 86} {:instruction print_float} {:instruction integer_shove} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_min} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_mod} {:instruction float_flush} {:instruction integer_min} {:instruction print_float} {:instruction integer_add} {:instruction print_integer} {:instruction float_yank} {:instruction float_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_dec} {:instruction 4} {:instruction 94} {:instruction float_mod} {:instruction print_float} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction float_flush} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (integer_dup_times float_inc float_stackdepth integer_yank float_inc integer_dec float_rot integer_rot integer_flush float_yankdup float_flush float_add integer_yankdup integer_mod float_shove float_inc float_sub float_min tag_float_222 integer_add in1 integer_shove integer_mult float_frominteger integer_fromfloat integer_div integer_mult 46.29272832092809 float_flush integer_dup_times in2 float_sub float_shove float_sub integer_add integer_add float_frominteger integer_swap float_dup_times float_sub 86 print_float integer_shove float_sub integer_dec integer_add float_min integer_stackdepth print_integer integer_mult print_float integer_mod float_flush integer_min print_float integer_add print_integer float_yank float_mod integer_swap integer_add print_integer integer_mult integer_dec 4 94 float_mod print_float integer_min integer_fromfloat tag_float_618 tagged_948 float_flush float_flush integer_min integer_swap integer_add print_integer integer_mult integer_stackdepth in1 print_integer float_div integer_mult integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4532.133451199999
Median total errors in population: 198.01440000000002
Error averages by case: (170.8380815000013 8.981 166.5019768000009 8.955 172.9088597000004 8.068 169.03245429999777 9.097 170.4866752999982 8.182 181.08881189999877 8.912 171.5979967999981 8.916 170.44858690000223 8.867 170.74163999999897 8.091 178.1560820000017 7.255 169.50602779999826 8.203 171.25748370000002 9.03 178.52297500000176 8.155 172.20910330000316 6.649 165.1755524999982 8.147 182.977425700001 8.783 179.1640545999999 7.365 176.25929639999887 7.25 167.49156899999844 8.981 172.6915526999991 9.774 167.72869879999791 8.103 182.74676709999886 9.023 170.8761538999985 9.758 181.6066204999988 9.2 160.35400500000026 8.02)
Error minima by case: (0.2466 5 0.3858 5 0.0655 5 0.2789 5 0.2699 5 0.0096 5 0.0724 5 0.4372 4 0.4404 4 0.4145 5 0.1257 5 0.0378 7 0.0151 6 0.4304 4 0.2247 5 0.2504 5 0.1201 5 0.1318 5 0.2131 5 0.083 4 0.1341 4 0.1612 5 0.1465 8 0.2813 6 0.1468 4)
Average genome size in population (length): 92.425
Average program size in population (points): 93.425
Average percent parens in population: 0.011
Minimum age in population: 148.8438898056229
Maximum age in population: 153.2364859232002
Average age in population: 151.3685056761511
Median age in population: 151.3706511516227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.251
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 240808620
--- Timings ---
Current time: 1529616258821 milliseconds
Total Time:         444.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.0 seconds, 30.4%
Fitness Testing:    244.9 seconds, 55.1%
Report:              64.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_swap} {:instruction integer_mod} {:instruction float_dec} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_mod} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_max} {:instruction 46.29272832092809} {:instruction tagged_548} {:instruction float_flush} {:instruction 46.35849004150858} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 45.07284750349333} {:instruction float_tan} {:instruction float_rot} {:instruction float_flush} {:instruction integer_mod} {:instruction float_shove} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_mult} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_shove} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.274949491192025} {:instruction float_flush} {:instruction float_rot} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_pop} {:instruction float_sub} {:instruction integer_add} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_rot} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction print_integer} {:instruction 4} {:instruction float_sub} {:instruction integer_add} {:instruction print_integer} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (in1 integer_fromfloat integer_pop integer_dec float_cos float_swap integer_mod float_dec tag_float_222 float_flush in1 integer_mod float_div tag_float_222 float_flush in1 integer_shove integer_mod float_shove integer_mod float_shove print_integer float_div tag_integer_848 integer_yankdup integer_fromfloat integer_div float_max 46.29272832092809 tagged_548 float_flush 46.35849004150858 tagged_428 float_frominteger integer_fromfloat integer_div integer_mult 45.07284750349333 float_tan float_rot float_flush integer_mod float_shove float_sub float_div tag_float_222 float_flush in1 integer_mult float_div tag_integer_848 float_shove print_integer integer_fromfloat integer_div integer_mult 46.274949491192025 float_flush float_rot integer_mod float_rot in2 float_pop float_sub integer_add integer_shove float_frominteger integer_swap print_integer integer_add float_frominteger integer_swap print_integer 86 print_float float_rot float_sub integer_dec integer_add float_tan integer_stackdepth print_integer float_min print_float print_integer 4 float_sub integer_add print_integer integer_dup integer_yankdup integer_stackdepth in1 print_integer integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3588.2069837999998
Median total errors in population: 198.01440000000002
Error averages by case: (134.58671390000148 8.856 132.37063909999958 8.828 132.97200930000162 7.918 132.0908278999984 8.962 133.37574730000014 8.003 139.28424859999922 8.779 135.2207368999987 8.76 133.4062543 8.729 134.48888429999798 7.945 136.25633860000175 7.013 132.73332039999914 8.035 137.34118879999875 8.875 138.50726409999982 7.976 135.1704130000023 6.401 130.3709833000004 7.99 138.76590119999952 8.674 137.9066953 7.165 137.26251239999863 7.042 132.53200369999925 8.804 134.750679499998 9.648 131.9507319999999 7.996 141.90782429999885 8.841 134.7429154999986 9.659 143.90429349999877 9.02 128.47385659999827 7.915)
Error minima by case: (0.244 5 0.3813 5 0.0629 6 0.2762 5 0.2654 5 0.0096 6 0.0679 6 0.4327 4 0.4359 5 0.4118 5 0.1212 5 0.0378 7 0.0125 6 0.4278 5 0.2221 6 0.6791 5 0.8095 5 0.1292 5 0.2271 5 0.0804 4 0.1315 5 0.7684 6 0.1465 7 0.6483 6 0.1442 5)
Average genome size in population (length): 91.59
Average program size in population (points): 92.59
Average percent parens in population: 0.011
Minimum age in population: 149.9392122023359
Maximum age in population: 155.014922288999
Average age in population: 152.8041903999227
Median age in population: 152.860246151705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.23
Error (vector) diversity:			 0.257
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 243118970
--- Timings ---
Current time: 1529616263361 milliseconds
Total Time:         448.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.4 seconds, 30.4%
Fitness Testing:    247.4 seconds, 55.2%
Report:              64.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction float_yank} {:instruction float_swap} {:instruction float_cos} {:instruction float_min} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_mod} {:instruction float_dec} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction integer_max} {:instruction tag_float_222} {:instruction float_flush} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction in2} {:instruction float_pop} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_sub} {:instruction float_flush} {:instruction integer_shove} {:instruction float_sub} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction print_float} {:instruction 4} {:instruction float_mod} {:instruction float_mod} {:instruction print_float} {:instruction float_cos} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction print_float} {:instruction in2} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction in1})
Best program: (float_pop float_yank float_swap float_cos float_min integer_max integer_rot integer_fromfloat integer_pop integer_dec integer_mod float_swap integer_mod float_dec float_flush in1 integer_yankdup integer_mod float_inc float_sub integer_max tag_float_222 float_flush float_inc float_sub integer_dup float_div tag_float_222 integer_dup_items in1 integer_pop integer_mod float_shove float_frominteger integer_fromfloat integer_div float_div tag_float_222 integer_fromfloat integer_rot in2 float_pop float_sub integer_add integer_max float_frominteger float_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer float_sub float_flush integer_shove float_sub integer_add print_integer integer_min print_float 4 float_mod float_mod print_float float_cos integer_min integer_swap integer_add print_integer integer_swap float_stackdepth integer_rot integer_max float_flush integer_min integer_swap integer_add print_integer float_stackdepth integer_mult print_float in2 in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer in1)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3899.7666965999992
Median total errors in population: 198.01440000000002
Error averages by case: (146.20591090000147 8.952 142.53077960000002 8.906 145.849759800001 7.99 145.20912019999818 9.014 147.35928089999928 8.061 152.95987429999914 8.848 144.6224772999987 8.83 145.69712470000078 8.814 146.58256189999855 8.04 152.8770343000017 7.135 145.64473659999896 8.15 148.84578179999923 9.054 150.94419190000036 8.067 148.41071670000258 6.512 139.36082709999994 8.08 156.7200608999999 8.742 152.8395312999999 7.261 149.97836549999872 7.162 143.7514990999992 8.896 149.18681119999863 9.715 144.80404489999918 8.07 152.6402077999987 8.91 148.28807939999874 9.792 152.94762719999872 9.108 135.44929129999855 7.952)
Error minima by case: (0.2439 6 0.3858 6 0.0628 5 0.2762 4 0.2699 6 0.009 5 0.0724 5 0.4372 6 0.4404 5 0.4118 5 0.1257 6 0.0378 7 0.0124 5 0.4277 5 0.222 5 0.2504 4 0.1201 5 0.1291 5 0.2317 6 0.0803 5 0.1314 6 0.1612 5 0.1465 7 0.2813 6 0.1441 4)
Average genome size in population (length): 90.716
Average program size in population (points): 91.716
Average percent parens in population: 0.011
Minimum age in population: 151.5558617223425
Maximum age in population: 156.5374557071334
Average age in population: 154.1980620510132
Median age in population: 154.2659625814927
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.247
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 245406545
--- Timings ---
Current time: 1529616267584 milliseconds
Total Time:         452.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.8 seconds, 30.4%
Fitness Testing:    249.6 seconds, 55.1%
Report:              65.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_rot} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction integer_sub} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_rot} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_dec} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_div} {:instruction float_shove} {:instruction float_sub} {:instruction float_flush} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_yank} {:instruction tagged_965} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup_items} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_mult})
Best program: (in1 in1 float_inc float_frominteger integer_rot integer_inc integer_shove float_mod integer_yankdup integer_yankdup float_inc float_shove in1 integer_add integer_rot float_shove print_integer float_div tag_integer_848 float_div tag_float_222 integer_mod in1 integer_shove integer_mod float_shove float_frominteger integer_fromfloat integer_div float_swap integer_sub float_flush float_rot in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger integer_rot print_integer 86 print_float float_dec float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_div float_shove float_sub float_flush integer_yank float_sub integer_add print_integer integer_mult print_float 4 integer_yank float_flush integer_min integer_swap integer_add print_integer integer_swap float_stackdepth float_mod float_div print_float float_yank tagged_965 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult float_dup_items print_float in1 integer_stackdepth float_yank float_stackdepth print_integer integer_mult)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4268.5713706
Median total errors in population: 198.01440000000002
Error averages by case: (162.02460500000137 8.883 160.12774720000115 8.811 164.35441840000027 7.957 154.23671059999813 8.994 162.82461449999843 8.066 166.64514219999907 8.813 164.09622259999855 8.81 161.85427940000181 8.764 161.36084089999937 7.995 165.15097600000175 7.139 161.65062759999873 8.104 160.17451000000005 9.008 163.97379860000115 8.062 164.26419350000262 6.49 157.64989249999857 8.038 163.21227400000072 8.693 167.3863441999999 7.258 162.79741889999875 7.174 161.49707139999893 8.857 163.14833689999944 9.64 161.82757049999805 7.988 167.3114922999988 8.924 160.03745939999865 9.741 167.4915752999988 9.085 154.24224870000023 7.937)
Error minima by case: (0.244 5 0.3773 5 0.0629 5 0.2762 4 0.2699 5 0.0096 5 0.0724 5 0.4372 5 0.4404 5 0.4118 5 0.1257 5 0.0 6 0.0125 5 0.4278 5 0.2221 5 0.2504 4 0.12 5 0.1292 5 0.2317 5 0.0804 4 0.1315 5 0.1611 5 0.0 6 0.2812 6 0.1442 4)
Average genome size in population (length): 90.528
Average program size in population (points): 91.528
Average percent parens in population: 0.011
Minimum age in population: 152.8078396917309
Maximum age in population: 157.4314984359369
Average age in population: 155.5442623905326
Median age in population: 155.5879180745279
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.245
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 247689220
--- Timings ---
Current time: 1529616271524 milliseconds
Total Time:         456.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.9 seconds, 30.4%
Fitness Testing:    251.9 seconds, 55.1%
Report:              65.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_div} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_pop} {:instruction float_mod} {:instruction float_rot} {:instruction float_cos} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_rot} {:instruction tagged_218} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_max} {:instruction integer_min} {:instruction integer_rot} {:instruction tagged_218} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_swap} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_mod} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction tag_float_222} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_shove} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction float_rot} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_add} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_shove} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_sub} {:instruction print_float} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction 95} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction float_shove} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_div} {:instruction integer_div} {:instruction float_yank} {:instruction tagged_965} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup_items} {:instruction tagged_658} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_pop} {:instruction in1} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (float_max float_div float_div tag_float_222 integer_pop float_mod float_rot float_cos integer_mod float_yankdup float_min integer_rot tagged_218 float_flush integer_fromfloat integer_mod float_dec integer_max integer_min integer_rot tagged_218 float_flush integer_fromfloat float_shove float_swap integer_mod float_sub integer_fromfloat float_sin integer_mod float_div tag_float_222 integer_dup_items in1 integer_shove float_stackdepth float_shove float_pop tag_float_222 float_flush in1 integer_shove float_inc tag_float_222 integer_stackdepth in1 float_shove print_integer integer_fromfloat float_pop float_swap 46.29272832092809 float_rot integer_mult 46.29272832092809 integer_div integer_mult 46.29272832092809 float_flush float_rot in2 integer_swap float_sub integer_add float_mult float_frominteger integer_shove print_integer 86 print_float float_stackdepth integer_fromfloat integer_dec integer_add float_tan integer_stackdepth print_integer integer_sub print_float integer_yankdup float_dup_times float_stackdepth integer_swap integer_add print_integer integer_mult print_float 4 95 float_mod float_flush integer_min float_shove integer_add print_integer integer_swap float_stackdepth float_mod float_div integer_div float_yank tagged_965 integer_max float_flush integer_min integer_swap integer_add print_integer integer_mult float_dup_items tagged_658 float_rot integer_stackdepth integer_stackdepth float_stackdepth float_pop in1 integer_dup integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4241.6995345
Median total errors in population: 198.01440000000002
Error averages by case: (158.66156360000141 8.882 156.5161616000004 8.815 161.52579180000055 7.918 155.0123585999981 8.949 159.12648769999888 8.029 168.6538200999991 8.799 162.18020899999854 8.802 160.14135860000124 8.746 159.4559782999988 7.955 164.94967860000182 7.05 158.5101790999987 8.081 164.13035299999981 8.874 165.0542753000008 7.997 160.13234010000264 6.427 155.178843299999 7.995 167.8312203000003 8.677 165.82775929999994 7.166 163.65015639999876 7.079 155.65484449999883 8.843 160.4284950999988 9.64 158.56868109999866 8.006 167.54672059999885 8.838 163.64372429999855 9.629 167.41655389999875 9.041 153.76498029999965 7.899)
Error minima by case: (0.244 6 0.3807 5 0.0629 5 0.2762 5 0.2648 6 0.0097 5 0.0673 5 0.4321 5 0.4353 6 0.4118 4 0.1206 6 0.0 7 0.0125 5 0.4278 5 0.2221 5 0.2504 5 0.12 5 0.1292 4 0.2265 5 0.0804 6 0.1315 5 0.1611 5 0.0 7 0.2812 5 0.1442 5)
Average genome size in population (length): 89.744
Average program size in population (points): 90.744
Average percent parens in population: 0.011
Minimum age in population: 153.8363251479772
Maximum age in population: 159.0359189215084
Average age in population: 156.9491771668645
Median age in population: 156.9962686734352
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.227
Error (vector) diversity:			 0.261
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 249953545
--- Timings ---
Current time: 1529616275681 milliseconds
Total Time:         460.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.2 seconds, 30.4%
Fitness Testing:    254.2 seconds, 55.2%
Report:              66.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_rot} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction integer_add} {:instruction float_dup_items} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_div} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_swap} {:instruction float_cos} {:instruction integer_swap} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction tagged_392} {:instruction float_flush} {:instruction in1} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction integer_shove} {:instruction in2} {:instruction float_shove} {:instruction integer_add} {:instruction float_frominteger} {:instruction print_integer} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_1251} {:instruction integer_max} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_float} {:instruction tag_integer_550} {:instruction in1} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (integer_pop float_stackdepth in1 integer_fromfloat integer_min integer_rot float_rot integer_mod integer_yankdup float_inc float_sub integer_add float_dup_items in1 integer_shove integer_mod float_div float_rot integer_mod integer_sub float_div tag_float_222 integer_mod in1 integer_shove integer_mod float_shove float_frominteger integer_fromfloat float_dup_items float_swap float_cos integer_swap float_flush 46.29272832092809 tagged_392 integer_shove integer_mult float_flush integer_fromfloat integer_stackdepth float_swap 46.29272832092809 tagged_392 tagged_392 float_flush in1 float_yankdup float_frominteger integer_fromfloat float_pop integer_mult 46.29272832092809 float_flush integer_shove in2 float_shove integer_add float_frominteger print_integer print_integer 86 print_float float_stackdepth print_float float_stackdepth float_sub integer_dec integer_add integer_add integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 integer_max float_flush integer_min integer_fromfloat tag_float_618 tagged_1251 integer_max float_flush integer_fromfloat integer_swap integer_yankdup print_integer integer_mult print_float integer_stackdepth float_flush integer_min integer_swap integer_add print_integer integer_yankdup print_float tag_integer_550 in1 float_shove integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4661.5578237
Median total errors in population: 198.01440000000002
Error averages by case: (175.6563995000013 8.926 172.77732350000107 8.895 176.1942036000001 8.014 173.46772869999825 9.041 176.49529179999845 8.104 184.73894829999907 8.894 176.98189719999866 8.866 176.7070429000018 8.815 175.8152043999994 8.043 182.53643800000168 7.215 176.28651939999878 8.181 182.7939848000006 9.083 179.71549830000126 8.124 178.80501850000243 6.536 170.43277869999883 8.065 185.87547310000102 8.79 182.1588756 7.281 179.1605959999988 7.243 175.23601329999894 8.945 176.09582319999947 9.739 176.43941729999813 8.093 186.20436839999897 8.999 177.4841533999987 9.797 183.94882879999884 9.131 168.70199700000006 8.028)
Error minima by case: (0.243 4 0.3858 4 0.0619 4 0.2752 3 0.2699 4 0.0096 4 0.0724 4 0.4372 3 0.4404 4 0.4108 4 0.1257 4 0.0378 7 0.0115 4 0.4268 4 0.2211 4 0.2504 3 0.1201 4 0.1282 4 0.2317 4 0.0794 3 0.1305 4 0.1612 4 0.1465 8 0.2813 5 0.1432 3)
Average genome size in population (length): 90.383
Average program size in population (points): 91.383
Average percent parens in population: 0.011
Minimum age in population: 156.1782115770822
Maximum age in population: 160.3566796285789
Average age in population: 158.3942478414764
Median age in population: 158.4323634076826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.23
Error (vector) diversity:			 0.268
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 252233770
--- Timings ---
Current time: 1529616280301 milliseconds
Total Time:         465.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.6 seconds, 30.4%
Fitness Testing:    256.6 seconds, 55.1%
Report:              67.0 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction float_yank} {:instruction float_swap} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_222} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction tag_integer_557} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_tan} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_145} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction tagged_392} {:instruction float_flush} {:instruction 45.40875882152537} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_mult} {:instruction 46.5389467971953} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction tag_integer_930} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction tag_float_618} {:instruction integer_mult} {:instruction integer_max} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_swap} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (float_pop float_yank float_swap tag_float_222 float_flush in1 tag_float_222 integer_mod in1 integer_shove tag_integer_557 float_shove print_integer float_div tag_integer_848 float_frominteger in1 float_yank integer_fromfloat float_cos float_tan float_min integer_fromfloat integer_pop float_shove in1 integer_flush tag_float_222 float_flush in1 tag_float_145 integer_mod in1 integer_shove integer_dec float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 tagged_392 float_flush 45.40875882152537 tagged_428 float_frominteger integer_fromfloat integer_sub integer_mult 46.5389467971953 float_flush float_rot in2 float_shove float_sub integer_add integer_fromfloat float_frominteger tag_integer_930 print_integer 86 print_float float_stackdepth float_dup_items integer_dec integer_add integer_sub integer_stackdepth print_integer integer_shove print_integer integer_mult print_float 4 tag_float_618 integer_mult integer_max print_integer integer_stackdepth float_max integer_min integer_mod integer_add print_integer integer_mult print_float float_swap in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4287.1942665
Median total errors in population: 198.01440000000002
Error averages by case: (159.0869159000014 9.017 155.57411330000036 8.925 164.41137990000024 8.094 157.48834079999818 9.124 162.10061809999857 8.202 169.664320899999 8.891 162.37521669999842 8.867 161.08703700000171 8.874 162.30070559999925 8.138 168.79701310000175 7.268 160.80486799999858 8.25 168.22687880000032 9.105 163.5140166000012 8.166 164.73786530000265 6.659 153.14186299999926 8.153 172.0790753000012 8.784 169.13953 7.357 163.3511007999988 7.271 157.02240669999884 9.002 163.56727129999942 9.778 160.78976299999817 8.142 172.9292674999989 9.047 163.67033599999868 9.799 170.53117899999893 9.205 148.5971838999995 8.088)
Error minima by case: (0.2466 6 0.3858 6 0.0655 6 0.2789 5 0.2699 6 0.0031 6 0.0724 6 0.4372 5 0.4404 6 0.4145 5 0.1257 6 0.0374 7 0.0151 6 0.4304 4 0.2247 6 0.2504 5 0.1201 6 0.1318 5 0.2317 6 0.083 5 0.1341 6 0.1612 6 0.1461 8 0.2813 7 0.1468 5)
Average genome size in population (length): 90.267
Average program size in population (points): 91.267
Average percent parens in population: 0.011
Minimum age in population: 157.2805402880562
Maximum age in population: 161.8522523618301
Average age in population: 159.758427703685
Median age in population: 159.7942770644429
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.259
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 254509370
--- Timings ---
Current time: 1529616284379 milliseconds
Total Time:         469.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.8 seconds, 30.4%
Fitness Testing:    258.9 seconds, 55.1%
Report:              67.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_min} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_add} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_swap} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_mod} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_cos} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_pop} {:instruction integer_sub} {:instruction tag_float_618} {:instruction print_integer} {:instruction integer_dec} {:instruction float_flush} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_add} {:instruction float_mod} {:instruction integer_mult} {:instruction print_float} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (integer_dup_times float_inc float_stackdepth integer_yank float_inc integer_dec float_rot integer_pop integer_flush float_yankdup float_flush in1 integer_yankdup integer_mod float_shove float_inc float_sub float_min float_flush in1 integer_shove integer_mod float_frominteger integer_fromfloat integer_mod float_sub integer_add tag_float_222 float_flush in1 integer_shove integer_mod float_frominteger integer_fromfloat integer_div float_flush float_rot in2 float_swap integer_rot float_inc integer_add integer_add float_frominteger float_mod print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_pop integer_stackdepth print_integer print_integer integer_stackdepth print_float 4 94 float_cos float_flush integer_min integer_swap integer_add print_integer integer_mult float_pop float_stackdepth integer_swap float_pop integer_sub tag_float_618 print_integer integer_dec float_flush float_dup integer_swap integer_add float_mod integer_mult print_float integer_swap integer_add print_integer integer_fromfloat print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3581.4039891999996
Median total errors in population: 198.01440000000002
Error averages by case: (134.17595300000144 8.797 133.3356207999998 8.741 135.02156380000145 7.837 129.6225818999982 8.868 134.95066159999988 7.938 139.6153986999991 8.7 135.67060769999853 8.68 134.82740910000035 8.668 135.18962389999777 7.875 135.84032470000176 6.965 134.89543169999877 7.969 134.57611459999853 8.802 135.75510339999985 7.912 135.6554599000027 6.31 129.81017270000046 7.892 138.32978389999934 8.589 136.96107980000008 7.079 137.33035579999867 7.002 132.89716129999908 8.773 135.46509519999785 9.623 135.07014509999948 7.92 138.41213629999882 8.801 132.39136339999857 9.567 139.6638492999987 8.962 129.8629915999982 7.808)
Error minima by case: (0.239 5 0.3713 5 0.0579 4 0.2712 3 0.2554 5 0.0096 4 0.0579 4 0.4227 4 0.4259 4 0.4068 4 0.1112 5 0.0376 6 0.0075 4 0.4228 4 0.2171 4 0.2504 3 0.1201 4 0.1242 4 0.2171 5 0.0754 4 0.1265 5 0.1612 4 0.1463 8 0.2813 5 0.1392 3)
Average genome size in population (length): 89.685
Average program size in population (points): 90.685
Average percent parens in population: 0.011
Minimum age in population: 158.8734724019045
Maximum age in population: 162.9199971183977
Average age in population: 161.1380135129379
Median age in population: 161.1725513264971
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.212
Error (vector) diversity:			 0.244
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 256770295
--- Timings ---
Current time: 1529616288574 milliseconds
Total Time:         473.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.1 seconds, 30.4%
Fitness Testing:    261.1 seconds, 55.1%
Report:              68.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_879} {:instruction tag_float_222} {:instruction integer_add} {:instruction integer_yank} {:instruction 93.81617602137086} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_907} {:instruction tag_float_222} {:instruction integer_inc} {:instruction float_sin} {:instruction integer_shove} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_shove} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_swap} {:instruction print_integer} {:instruction float_frominteger} {:instruction 86} {:instruction print_float} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_yank} {:instruction tag_float_105} {:instruction print_integer} {:instruction 4} {:instruction integer_max} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_max} {:instruction print_integer} {:instruction integer_add} {:instruction tag_integer_440} {:instruction print_float} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (integer_dec integer_mod float_shove print_integer float_div tag_integer_879 tag_float_222 integer_add integer_yank 93.81617602137086 print_integer float_div tag_integer_907 tag_float_222 integer_inc float_sin integer_shove integer_inc integer_add in1 integer_div integer_mod integer_dec print_integer integer_fromfloat integer_div float_shove 46.29272832092809 float_flush float_rot in2 integer_swap float_sub integer_add integer_max float_frominteger float_swap print_integer float_frominteger 86 print_float print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_yank tag_float_105 print_integer 4 integer_max integer_add print_integer integer_mult float_shove integer_add print_integer integer_mult integer_max print_integer integer_add tag_integer_440 print_float integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3877.9091958999998
Median total errors in population: 198.01440000000002
Error averages by case: (146.29549570000145 8.845 143.43450080000025 8.787 145.37538090000095 7.883 145.53104379999797 8.934 146.35456819999908 7.955 153.38390249999892 8.779 146.07103749999843 8.768 146.57493240000113 8.723 147.71273269999858 7.935 147.7755158000017 7.041 146.32472459999852 8.01 143.64827209999945 8.893 151.83898300000052 7.98 147.80755520000284 6.353 142.4692162999992 7.943 151.76981109999988 8.657 149.17833350000004 7.101 149.1471192999988 7.028 144.29540049999872 8.811 147.26687239999862 9.637 145.4495464999988 7.974 150.8473880999989 8.835 141.19027899999878 9.66 152.27455609999876 9.024 138.48602789999947 7.85)
Error minima by case: (0.2466 6 0.3813 6 0.0655 6 0.2789 5 0.2654 6 0.008 6 0.0679 6 0.4327 5 0.4359 6 0.4145 5 0.1212 6 0.0378 7 0.0151 6 0.4304 5 0.2247 6 0.2504 5 0.1201 6 0.1318 5 0.2271 5 0.083 5 0.1341 6 0.1612 6 0.1465 7 0.2813 7 0.1468 5)
Average genome size in population (length): 89.116
Average program size in population (points): 90.116
Average percent parens in population: 0.011
Minimum age in population: 159.9975213128575
Maximum age in population: 164.3352066856367
Average age in population: 162.5410769984822
Median age in population: 162.5743636964536
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.223
Error (vector) diversity:			 0.251
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 259016270
--- Timings ---
Current time: 1529616292515 milliseconds
Total Time:         477.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.3 seconds, 30.4%
Fitness Testing:    263.4 seconds, 55.1%
Report:              69.0 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction float_yank} {:instruction float_swap} {:instruction float_cos} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction integer_inc} {:instruction float_yank} {:instruction tag_float_110} {:instruction tag_float_222} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction tag_float_222} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_add} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_sub} {:instruction float_dec} {:instruction tagged_392} {:instruction float_flush} {:instruction 45.40875882152537} {:instruction integer_div} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction 86} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_pop} {:instruction 4} {:instruction 94} {:instruction float_cos} {:instruction float_flush} {:instruction integer_min} {:instruction float_dec} {:instruction 4} {:instruction 94} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (float_pop float_yank float_swap float_cos float_min in1 in1 integer_inc float_yank tag_float_110 tag_float_222 float_dup integer_yankdup float_mod tag_float_222 integer_swap integer_yankdup float_sub integer_mod integer_mod in1 integer_shove integer_add float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div integer_sub float_dec tagged_392 float_flush 45.40875882152537 integer_div integer_mult 46.29272832092809 float_flush float_yank integer_mult 46.29272832092809 float_flush float_rot in2 float_flush integer_add float_frominteger integer_swap float_shove 86 integer_mult print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer print_integer integer_mult integer_pop 4 94 float_cos float_flush integer_min float_dec 4 94 integer_mod integer_yank integer_min integer_swap integer_mod print_integer integer_mult integer_min integer_swap integer_add integer_add print_integer integer_mult integer_stackdepth in1 print_integer integer_stackdepth integer_mult integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4205.360511299999
Median total errors in population: 198.01440000000002
Error averages by case: (158.58232970000137 8.915 155.1496988000008 8.864 161.81975880000047 7.956 153.59308639999784 8.99 157.93044389999838 8.044 164.08017479999856 8.828 161.95394759999826 8.772 157.180881400002 8.758 158.24527609999902 8.011 164.61064140000173 7.097 156.30809889999838 8.108 163.51696680000018 8.999 162.09426130000162 8.035 158.916647900003 6.477 152.3389882999986 8.022 166.36972810000074 8.73 165.03700490000006 7.255 162.72688369999884 7.118 155.12473839999853 8.862 159.3829483999991 9.678 155.43668599999816 8.061 166.89158329999884 8.927 162.02239639999866 9.691 168.35921049999882 9.086 148.48512949999986 7.919)
Error minima by case: (0.243 6 0.3858 7 0.0619 5 0.2752 5 0.2699 6 0.0096 6 0.0724 6 0.4372 6 0.4404 6 0.4108 4 0.1257 6 0.0377 7 0.0115 6 0.4268 5 0.2211 6 0.2504 5 0.12 6 0.1282 5 0.2317 7 0.0794 6 0.1305 6 0.1611 6 0.1464 8 0.2812 7 0.1432 5)
Average genome size in population (length): 88.505
Average program size in population (points): 89.505
Average percent parens in population: 0.011
Minimum age in population: 161.1757600229803
Maximum age in population: 166.2019069848934
Average age in population: 163.9413139395982
Median age in population: 163.9830283419795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.236
Error (vector) diversity:			 0.272
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 261246895
--- Timings ---
Current time: 1529616296512 milliseconds
Total Time:         481.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.5 seconds, 30.4%
Fitness Testing:    265.7 seconds, 55.1%
Report:              69.5 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_yankdup} {:instruction float_swap} {:instruction float_div} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_pop} {:instruction in1} {:instruction float_flush} {:instruction in1} {:instruction integer_min} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_min} {:instruction integer_flush} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction tag_float_222} {:instruction float_mod} {:instruction in1} {:instruction float_div} {:instruction tag_float_222} {:instruction float_sub} {:instruction in1} {:instruction tag_float_222} {:instruction in1} {:instruction in1} {:instruction tag_float_169} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_flush} {:instruction tag_float_222} {:instruction float_flush} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 45.40875882152537} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_mult} {:instruction 46.5389467971953} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_div} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_sub} {:instruction 4} {:instruction tag_float_636} {:instruction integer_mult} {:instruction integer_max} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (integer_min integer_yankdup float_swap float_div float_div tag_float_222 integer_pop in1 float_flush in1 integer_min float_stackdepth in2 integer_min integer_flush integer_mult integer_yankdup integer_dup_times tag_float_222 float_mod in1 float_div tag_float_222 float_sub in1 tag_float_222 in1 in1 tag_float_169 integer_mod integer_flush float_flush tag_float_222 float_flush float_inc float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_swap 46.29272832092809 tagged_392 float_flush 45.40875882152537 tagged_428 float_frominteger integer_fromfloat integer_sub integer_mult 46.5389467971953 float_flush float_rot in2 float_shove float_sub integer_add integer_fromfloat float_frominteger integer_swap float_div 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_add print_integer integer_mult integer_sub 4 tag_float_636 integer_mult integer_max print_integer integer_stackdepth in1 print_integer integer_stackdepth integer_mult integer_stackdepth float_stackdepth integer_stackdepth float_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4088.7723370999997
Median total errors in population: 198.01440000000002
Error averages by case: (153.44736150000148 8.893 151.38550820000088 8.863 150.94418030000054 7.946 154.40820939999827 8.996 153.99365199999875 8.055 162.12818029999906 8.795 151.67634699999854 8.764 152.76294040000147 8.764 153.093779099999 7.999 159.3918154000019 7.112 152.89181629999882 8.087 156.98118949999986 8.923 159.36628260000103 7.988 154.57726110000254 6.458 145.79951419999912 7.997 161.3987643000005 8.701 160.74871260000003 7.251 158.79137939999873 7.091 151.96004509999906 8.843 154.05214869999912 9.649 153.15661679999855 8.021 163.8351967999987 8.916 154.51727199999854 9.68 162.99949839999869 9.088 145.70266569999959 7.882)
Error minima by case: (0.2466 5 0.3858 5 0.0652 6 0.2788 6 0.2699 5 0.0096 7 0.0724 6 0.4372 4 0.4404 4 0.4144 5 0.1257 4 0.0378 7 0.0151 6 0.4304 4 0.2243 6 0.2504 6 0.12 6 0.1318 4 0.2316 4 0.083 4 0.1341 5 0.1611 7 0.1465 7 0.2812 7 0.1467 5)
Average genome size in population (length): 87.72
Average program size in population (points): 88.72
Average percent parens in population: 0.011
Minimum age in population: 162.1757600229803
Maximum age in population: 167.2806610042674
Average age in population: 165.3173270872232
Median age in population: 165.3361484113305
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.229
Error (vector) diversity:			 0.257
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 263457495
--- Timings ---
Current time: 1529616300673 milliseconds
Total Time:         485.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.8 seconds, 30.4%
Fitness Testing:    267.9 seconds, 55.1%
Report:              70.0 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_sub} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_pop} {:instruction float_sub} {:instruction integer_add} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction float_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_div} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_yank integer_fromfloat float_swap float_sub float_inc integer_stackdepth integer_shove in1 integer_sub float_inc integer_dup_times float_flush float_rot in2 float_pop float_sub integer_add integer_sub float_frominteger integer_swap print_integer 86 print_float integer_sub float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float integer_yank float_flush integer_min integer_swap integer_add print_integer integer_mult 4 float_max float_flush integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush integer_fromfloat integer_swap integer_add print_integer integer_mult print_float integer_stackdepth float_flush float_stackdepth integer_swap float_div print_integer integer_mult print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4046.9213292999993
Median total errors in population: 198.01440000000002
Error averages by case: (152.4213584000014 8.855 150.66866040000053 8.835 153.02992970000048 7.9 148.45088969999836 8.977 151.84811509999906 8.006 162.2643585999991 8.805 151.99657189999863 8.769 151.68460810000113 8.752 153.87481139999895 7.977 154.88695020000168 7.036 153.19664779999886 8.04 153.90715729999985 8.919 158.60255020000082 8.016 153.73527140000246 6.408 147.1919942999995 7.988 156.26851800000026 8.714 155.25450470000004 7.169 159.3624110999988 7.043 149.31919789999912 8.803 156.15152249999912 9.663 151.47217599999874 7.997 158.81864439999882 8.892 151.2920167999987 9.684 158.23353359999882 9.056 144.80192979999927 7.883)
Error minima by case: (0.2466 5 0.3858 5 0.0655 5 0.2789 4 0.2699 4 0.0023 5 0.0724 5 0.4372 5 0.4404 5 0.4145 4 0.1257 5 0.0378 7 0.0151 5 0.4304 5 0.2247 5 0.2504 5 0.1201 5 0.1318 5 0.2131 5 0.083 5 0.1341 5 0.1612 5 0.1465 7 0.2813 6 0.1468 4)
Average genome size in population (length): 87.776
Average program size in population (points): 88.776
Average percent parens in population: 0.011
Minimum age in population: 164.4049898837506
Maximum age in population: 168.5451460227535
Average age in population: 166.7337644217337
Median age in population: 166.7827199363426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.243
Error (vector) diversity:			 0.267
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 265670370
--- Timings ---
Current time: 1529616304677 milliseconds
Total Time:         489.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.9 seconds, 30.4%
Fitness Testing:    270.1 seconds, 55.1%
Report:              70.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction float_swap} {:instruction float_cos} {:instruction float_inc} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_sub} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_flush} {:instruction in1} {:instruction integer_yankdup} {:instruction float_div} {:instruction tag_integer_818} {:instruction integer_mod} {:instruction integer_yank} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_dec} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_818} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction in2} {:instruction tag_float_222} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_sub} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_rot} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction 4} {:instruction 4} {:instruction integer_max} {:instruction tag_float_636} {:instruction integer_mult} {:instruction integer_max} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (in1 float_yank float_swap float_cos float_inc integer_max integer_rot integer_mult integer_fromfloat integer_pop integer_dec float_max integer_yankdup integer_add float_sub integer_mod float_yankdup float_flush in1 integer_yankdup float_div tag_integer_818 integer_mod integer_yank float_div tag_float_222 integer_swap in1 integer_shove integer_pop float_dec print_integer float_div tag_integer_818 integer_mod integer_yankdup in2 tag_float_222 integer_mod in1 integer_shove integer_mod float_shove float_frominteger integer_fromfloat integer_fromfloat float_swap integer_sub float_flush float_rot in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger integer_rot print_integer 86 print_float float_stackdepth tag_float_923 integer_dec integer_add float_tan integer_stackdepth print_integer float_swap integer_shove integer_swap print_integer integer_mult 4 4 integer_max tag_float_636 integer_mult integer_max print_integer integer_stackdepth in1 print_integer integer_stackdepth integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3984.5178269999997
Median total errors in population: 198.01440000000002
Error averages by case: (149.68361720000135 8.937 146.25068439999973 8.897 153.13119780000076 7.993 145.957338499998 9.059 150.7925289999995 8.102 157.2878397999991 8.871 152.05593939999855 8.826 150.1073273000007 8.836 150.1979417999985 8.052 153.6389429000017 7.118 149.25726189999878 8.149 153.0104638999995 8.962 153.64280530000056 8.095 150.8773412000024 6.525 146.12603969999975 8.103 155.12152149999991 8.756 152.84221179999997 7.251 153.70108669999868 7.178 146.37131429999897 8.915 151.1973594999985 9.737 149.39828479999932 8.094 156.178201599999 8.914 148.89137749999873 9.674 155.15156789999892 9.082 143.53163129999902 7.99)
Error minima by case: (0.2466 6 0.3858 7 0.0655 6 0.2789 6 0.2699 7 0.0096 7 0.0724 7 0.4372 6 0.4404 6 0.4145 5 0.1257 6 0.0378 7 0.0151 5 0.4304 4 0.2247 7 0.2504 6 0.1201 6 0.1318 5 0.2317 7 0.083 7 0.1341 6 0.1612 7 0.1465 8 0.2813 7 0.1468 6)
Average genome size in population (length): 86.806
Average program size in population (points): 87.806
Average percent parens in population: 0.012
Minimum age in population: 165.576508079486
Maximum age in population: 170.0069149443153
Average age in population: 168.0500583305308
Median age in population: 168.1113528778788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.233
Error (vector) diversity:			 0.265
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 267856820
--- Timings ---
Current time: 1529616308793 milliseconds
Total Time:         494.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.1 seconds, 30.4%
Fitness Testing:    272.4 seconds, 55.2%
Report:              71.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction in1} {:instruction integer_shove} {:instruction in1} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_shove} {:instruction print_integer} {:instruction integer_div} {:instruction float_swap} {:instruction float_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_shove} {:instruction print_integer} {:instruction integer_div} {:instruction float_swap} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction integer_div} {:instruction float_flush} {:instruction 46.29272832092809} {:instruction tagged_490} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_swap} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_mod} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction print_float} {:instruction 4} {:instruction 94} {:instruction float_cos} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_max} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction integer_sub} {:instruction tag_float_618} {:instruction print_integer} {:instruction integer_max} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_mult} {:instruction print_float} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction print_float} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (float_flush integer_flush integer_yankdup in1 integer_shove in1 float_yank integer_yankdup integer_dup_times integer_mod in1 integer_shove float_dup_times float_shove print_integer integer_div float_swap float_swap integer_shove float_dup_times float_shove print_integer integer_div float_swap float_swap integer_fromfloat integer_div integer_stackdepth 46.29272832092809 tagged_392 integer_div float_flush 46.29272832092809 tagged_490 float_frominteger integer_fromfloat integer_div float_flush float_rot in2 float_swap integer_rot float_sub integer_add integer_add float_frominteger float_mod print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_pop integer_stackdepth print_integer print_integer integer_stackdepth print_float 4 94 float_cos float_flush integer_min integer_swap integer_max print_integer integer_sub float_pop float_stackdepth float_inc float_div integer_sub tag_float_618 print_integer integer_max float_flush integer_min integer_swap integer_add integer_inc integer_mult print_float integer_swap integer_add integer_mult integer_fromfloat print_float print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3942.8234307
Median total errors in population: 198.01440000000002
Error averages by case: (147.22433580000137 8.889 143.70893800000022 8.808 150.84493690000036 7.941 149.02436329999847 8.949 146.61459179999943 8.019 156.98664879999941 8.8 152.6897219999987 8.753 145.86297730000086 8.767 145.04447519999863 7.99 152.3011061000017 7.059 143.80353649999898 8.083 150.3205389000001 8.916 155.8823825000008 8.02 147.6966113000022 6.425 144.6210509999996 7.971 155.68789980000048 8.656 155.98353899999992 7.19 154.4022607999988 7.091 144.5116673999992 8.866 147.12073759999907 9.679 143.6823916999993 7.999 154.26617109999893 8.906 149.11294489999872 9.667 157.8433368999989 9.07 139.18326609999912 7.889)
Error minima by case: (0.244 5 0.3858 5 0.0629 4 0.2762 3 0.2699 5 0.0096 4 0.0724 4 0.4372 4 0.4404 5 0.4118 4 0.1257 5 0.0378 7 0.0125 4 0.4278 4 0.2221 4 0.2504 4 0.1201 4 0.1292 3 0.2316 5 0.0804 5 0.1315 5 0.1612 4 0.1465 7 0.2813 5 0.1442 4)
Average genome size in population (length): 86.657
Average program size in population (points): 87.657
Average percent parens in population: 0.012
Minimum age in population: 167.0660255335931
Maximum age in population: 171.3574788448108
Average age in population: 169.4292242976914
Median age in population: 169.4461728567298
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.222
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 270039420
--- Timings ---
Current time: 1529616313111 milliseconds
Total Time:         498.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.4 seconds, 30.4%
Fitness Testing:    274.7 seconds, 55.1%
Report:              71.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_inc} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_max} {:instruction float_sub} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_flush} {:instruction tag_float_229} {:instruction float_flush} {:instruction in1} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction integer_swap} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_rot} {:instruction print_integer} {:instruction 86} {:instruction integer_swap} {:instruction float_shove} {:instruction 86} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_pop} {:instruction 4} {:instruction 94} {:instruction float_cos} {:instruction float_flush} {:instruction integer_min} {:instruction float_dec} {:instruction 4} {:instruction 94} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_swap} {:instruction print_integer} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_add} {:instruction tag_float_416} {:instruction print_integer} {:instruction integer_mult} {:instruction float_min} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_yank} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_yank})
Best program: (in1 float_yank integer_fromfloat float_cos float_inc integer_max integer_rot integer_fromfloat integer_pop integer_dec print_integer integer_yankdup float_max float_sub integer_max float_yankdup float_flush tag_float_229 float_flush in1 integer_mod in1 integer_shove integer_mod float_shove float_frominteger integer_fromfloat integer_div float_swap integer_swap float_flush float_rot in2 integer_swap float_sub float_sub integer_add integer_sub float_frominteger integer_rot print_integer 86 integer_swap float_shove 86 integer_mult print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer print_integer integer_mult integer_pop 4 94 float_cos float_flush integer_min float_dec 4 94 integer_mod integer_yank integer_min integer_swap print_integer print_integer integer_mult integer_min integer_swap integer_add integer_add tag_float_416 print_integer integer_mult float_min integer_stackdepth in1 print_integer integer_stackdepth integer_mult float_yank float_stackdepth print_integer integer_yank)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3737.624626599999
Median total errors in population: 198.01440000000002
Error averages by case: (139.5371171000015 8.835 136.76329709999965 8.759 143.37986050000137 7.875 134.65177759999804 8.881 141.99059179999972 7.956 146.29175219999902 8.754 141.21093669999846 8.715 140.55224100000058 8.705 141.37448779999787 7.915 144.71332990000178 7.007 141.05860089999868 8.018 145.32760509999918 8.846 141.78950959999992 7.933 142.62715770000284 6.353 133.9047284000003 7.919 147.38086999999965 8.638 142.79225009999993 7.093 140.84024549999867 6.987 137.31108449999897 8.78 142.88352489999795 9.625 139.58918539999937 7.928 147.00492999999884 8.83 141.57188909999869 9.621 145.18329089999875 8.974 131.11436279999833 7.833)
Error minima by case: (0.2466 6 0.3858 6 0.0655 5 0.2788 4 0.2699 6 0.0057 5 0.0724 5 0.4372 6 0.4404 5 0.4144 5 0.1257 6 0.0378 7 0.0151 5 0.4304 5 0.2247 5 0.2504 4 0.12 5 0.1318 5 0.2316 6 0.083 5 0.1341 6 0.1611 5 0.1465 7 0.2812 6 0.1468 4)
Average genome size in population (length): 86.352
Average program size in population (points): 87.352
Average percent parens in population: 0.012
Minimum age in population: 168.1251526548623
Maximum age in population: 172.7029333965438
Average age in population: 170.8495250222923
Median age in population: 170.8995485638043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.221
Error (vector) diversity:			 0.252
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 272214995
--- Timings ---
Current time: 1529616317062 milliseconds
Total Time:         502.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.6 seconds, 30.4%
Fitness Testing:    276.9 seconds, 55.1%
Report:              72.6 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_sub} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_mod} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction 46.29272832092809} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction 86} {:instruction print_float} {:instruction print_float} {:instruction integer_add} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction print_integer} {:instruction 4} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction float_flush} {:instruction integer_sub} {:instruction integer_min} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (float_flush float_sub float_shove in1 integer_shove integer_swap float_yank integer_yankdup integer_dup_times float_sub integer_mod integer_dup_times integer_fromfloat integer_pop float_mod in1 float_stackdepth integer_mult integer_sub integer_fromfloat integer_div integer_mult in1 integer_sub float_shove float_frominteger integer_add integer_fromfloat integer_div float_swap 46.29272832092809 46.29272832092809 float_flush float_rot in2 float_shove float_sub integer_add float_stackdepth integer_add integer_add float_frominteger integer_swap float_shove 86 print_float print_float integer_add float_shove integer_dec integer_add float_tan integer_stackdepth print_integer print_integer 4 integer_dup_times float_flush float_shove integer_fromfloat tag_float_618 tagged_948 float_flush integer_sub integer_min integer_min integer_swap integer_add print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth float_shove integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4101.086384099999
Median total errors in population: 198.01440000000002
Error averages by case: (153.70247670000154 8.954 151.6574897000003 8.889 156.61058130000043 7.982 151.88003879999806 9.03 155.27862619999883 8.104 163.17459039999892 8.85 155.39307419999858 8.84 155.37654410000147 8.827 155.53940619999906 8.016 157.60887910000176 7.157 154.80705439999886 8.13 157.0627135999999 8.993 158.56087380000093 8.079 155.99509690000258 6.48 150.43606569999932 8.034 160.30895690000025 8.767 156.8255264 7.241 157.15556399999872 7.137 151.05481589999894 8.934 156.5523809999991 9.725 154.22354259999872 8.084 162.17118109999882 8.927 152.03909279999874 9.751 160.15032659999875 9.146 147.50248569999945 7.942)
Error minima by case: (0.2466 5 0.3858 5 0.0655 5 0.2789 4 0.2699 5 0.0096 5 0.0724 5 0.4372 5 0.4404 5 0.4145 5 0.1257 5 0.0277 7 0.0151 5 0.4304 5 0.2247 5 0.2504 4 0.1201 5 0.1318 5 0.2317 5 0.083 4 0.1341 5 0.1612 5 0.1364 7 0.2813 6 0.1468 4)
Average genome size in population (length): 85.897
Average program size in population (points): 86.897
Average percent parens in population: 0.012
Minimum age in population: 169.328208203083
Maximum age in population: 174.2672816826917
Average age in population: 172.268358699774
Median age in population: 172.2907488466121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.23
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 274379520
--- Timings ---
Current time: 1529616320883 milliseconds
Total Time:         506.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.8 seconds, 30.4%
Fitness Testing:    279.1 seconds, 55.1%
Report:              73.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -97.6385025333639} {:instruction float_yank} {:instruction float_cos} {:instruction float_inc} {:instruction float_sub} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_mod} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_float_91} {:instruction tagged_666} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_div} {:instruction integer_div} {:instruction integer_yankdup} {:instruction tagged_666} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_integer} {:instruction integer_dup} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction 46.29272832092809} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction float_rot} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_yank} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_mod} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction float_flush} {:instruction print_integer} {:instruction integer_mod} {:instruction float_pop} {:instruction 4} {:instruction 93} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_tan} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (-97.6385025333639 float_yank float_cos float_inc float_sub integer_max integer_rot integer_fromfloat integer_pop integer_dec integer_mod tag_float_222 float_flush in1 integer_shove integer_mod float_shove print_integer float_div tag_float_91 tagged_666 integer_dup_times integer_shove integer_mod float_div integer_div integer_yankdup tagged_666 integer_dup_times integer_shove integer_mod float_shove print_integer integer_dup tag_integer_848 float_frominteger integer_fromfloat integer_add 46.29272832092809 float_flush float_rot in2 float_shove float_sub float_rot integer_add float_frominteger integer_swap float_yank 86 print_float float_stackdepth integer_add integer_dec integer_add integer_sub integer_stackdepth print_integer integer_mult print_float float_mod float_flush integer_min integer_swap float_flush print_integer integer_mod float_pop 4 93 float_flush integer_min integer_swap integer_add print_integer float_tan print_float integer_stackdepth in1 print_integer integer_stackdepth integer_mult integer_stackdepth float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3862.413236199999
Median total errors in population: 198.01440000000002
Error averages by case: (143.96398210000132 8.885 140.4234100000003 8.819 148.73703560000044 7.919 142.88682919999854 8.937 144.69454079999954 8.006 151.34852629999943 8.751 148.34779969999883 8.737 143.1470893000006 8.735 144.11811549999894 7.973 150.4472370000016 7.025 142.56176719999928 8.07 150.31432529999978 8.878 148.00470260000026 7.992 145.376513900002 6.399 139.03964189999976 7.945 153.2457966000001 8.624 149.53888259999997 7.133 147.23490149999878 7.07 141.32651859999947 8.837 145.76632339999887 9.673 142.4999222999993 8.006 156.3667625999989 8.813 147.5989038999987 9.65 153.23825259999887 8.999 134.4754556999986 7.834)
Error minima by case: (0.2466 5 0.3858 5 0.0655 4 0.2788 3 0.2699 5 0.0031 4 0.0724 4 0.4372 4 0.4404 4 0.4144 4 0.1257 5 0.0378 6 0.0151 4 0.4304 5 0.2247 4 0.2504 3 0.12 4 0.1318 4 0.2317 5 0.083 4 0.1341 5 0.1611 4 0.1465 8 0.2812 5 0.1468 3)
Average genome size in population (length): 85.448
Average program size in population (points): 86.448
Average percent parens in population: 0.012
Minimum age in population: 170.328208203083
Maximum age in population: 175.5328039911972
Average age in population: 173.6841438299323
Median age in population: 173.7704032436751
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.231
Error (vector) diversity:			 0.256
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 276532495
--- Timings ---
Current time: 1529616325233 milliseconds
Total Time:         510.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.0 seconds, 30.4%
Fitness Testing:    281.5 seconds, 55.2%
Report:              73.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction print_integer} {:instruction float_max} {:instruction integer_rot} {:instruction integer_add} {:instruction tag_integer_988} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_sub} {:instruction float_div} {:instruction integer_rot} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction integer_max} {:instruction tag_float_222} {:instruction float_flush} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_pop} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction in2} {:instruction float_pop} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_sub} {:instruction float_flush} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_max} {:instruction 4} {:instruction tag_float_618} {:instruction integer_mult} {:instruction integer_max} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_swap} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (integer_rot print_integer float_max integer_rot integer_add tag_integer_988 float_frominteger integer_div float_sub float_div integer_rot in1 integer_yankdup integer_mod float_inc float_sub integer_max tag_float_222 float_flush float_inc float_sub integer_dup float_div tag_float_222 integer_dup_items in1 integer_pop integer_mod integer_yankdup float_frominteger integer_fromfloat integer_div float_div tag_float_222 integer_fromfloat integer_rot in2 float_pop float_sub integer_add integer_max float_frominteger float_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer float_sub float_flush integer_rot float_sub integer_add print_integer integer_min print_integer integer_mult float_max 4 tag_float_618 integer_mult integer_max print_integer integer_stackdepth float_flush integer_min integer_mod integer_add print_integer integer_mult print_float float_swap in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3916.3974841999993
Median total errors in population: 198.01440000000002
Error averages by case: (146.3871029000014 8.916 143.81609230000007 8.859 148.37132890000083 7.99 143.6529768999982 9.026 148.0835108999992 8.087 153.26397279999884 8.847 146.11383449999863 8.849 148.3419012000011 8.792 148.41201779999872 7.995 150.28906180000172 7.129 147.65750479999878 8.15 152.01430679999982 8.994 148.76188200000036 8.08 148.81950450000252 6.481 140.9907603999999 8.048 154.6064121000001 8.754 151.47215900000006 7.258 149.94455389999874 7.172 145.7187731999988 8.907 148.18747939999875 9.743 146.01571829999907 8.064 154.4942813999989 8.947 149.16031839999874 9.709 153.2849410999988 9.131 138.59508889999898 8.014)
Error minima by case: (0.244 7 0.3858 7 0.0629 6 0.2762 6 0.2699 6 0.0096 7 0.0724 7 0.4372 6 0.4404 5 0.4118 5 0.1257 6 0.0278 7 0.0125 7 0.4278 4 0.2221 6 0.2504 6 0.1201 6 0.1292 5 0.2317 6 0.0804 7 0.1315 6 0.1612 7 0.0796 8 0.2813 7 0.1442 6)
Average genome size in population (length): 85.671
Average program size in population (points): 86.671
Average percent parens in population: 0.012
Minimum age in population: 172.133433759462
Maximum age in population: 177.036546028354
Average age in population: 175.0278350456083
Median age in population: 175.0584633099336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.238
Error (vector) diversity:			 0.272
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 278691420
--- Timings ---
Current time: 1529616329186 milliseconds
Total Time:         514.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.2 seconds, 30.4%
Fitness Testing:    283.8 seconds, 55.2%
Report:              74.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_rot} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_742} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction tag_float_222} {:instruction float_sin} {:instruction in1} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction tag_integer_848} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_yankdup} {:instruction 46.29272832092809} {:instruction tagged_392} {:instruction float_flush} {:instruction 45.81273046472687} {:instruction tagged_428} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction 46.5389467971953} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction print_integer} {:instruction 4} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (float_add integer_rot integer_inc integer_mult integer_fromfloat integer_mod float_sub float_div tag_float_222 float_flush in1 tag_float_742 integer_max integer_mult integer_yankdup integer_dup_times tag_float_222 float_sin in1 float_div tag_float_222 integer_swap in1 integer_shove integer_dec float_shove print_integer float_div tag_integer_848 float_frominteger integer_fromfloat integer_div float_yankdup 46.29272832092809 tagged_392 float_flush 45.81273046472687 tagged_428 float_frominteger integer_fromfloat integer_stackdepth integer_mult 46.5389467971953 float_flush float_rot in2 float_shove float_sub integer_add integer_fromfloat float_frominteger integer_swap print_integer 86 print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_shove print_integer integer_mult print_float print_integer 4 integer_swap integer_add print_integer integer_mult integer_mult integer_stackdepth integer_add print_integer integer_fromfloat integer_dup_times print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3908.4535561
Median total errors in population: 198.01440000000002
Error averages by case: (146.39281080000148 8.952 143.19822330000008 8.895 143.71211940000106 7.957 146.5129975999983 9.031 145.0926192999997 8.073 158.0032640999993 8.836 146.29669739999866 8.822 146.36185730000054 8.825 146.09705619999835 8.017 149.4813376000018 7.129 146.71061399999908 8.132 149.00773119999917 8.926 154.0075780000004 8.058 147.76450560000234 6.444 139.55432910000002 8.012 152.38705839999994 8.737 151.4019722 7.239 154.62571669999875 7.131 143.72275829999924 8.914 147.72210069999838 9.726 146.89637659999931 8.071 154.7345116999988 8.94 146.55304799999863 9.684 153.63798109999877 9.126 138.94029149999886 7.961)
Error minima by case: (0.243 6 0.3858 6 0.0619 6 0.2752 5 0.2699 6 0.0096 6 0.0724 6 0.4372 5 0.4404 5 0.4108 5 0.1257 6 0.0378 7 0.0115 6 0.4268 5 0.2211 6 0.6781 5 0.8085 6 0.1282 5 0.2316 6 0.0794 4 0.1305 6 0.7674 6 0.1465 8 0.6473 7 0.1432 5)
Average genome size in population (length): 85.613
Average program size in population (points): 86.613
Average percent parens in population: 0.012
Minimum age in population: 173.133433759462
Maximum age in population: 178.2989430629777
Average age in population: 176.4458807461849
Median age in population: 176.4621151179911
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.225
Error (vector) diversity:			 0.252
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 280849395
--- Timings ---
Current time: 1529616333505 milliseconds
Total Time:         518.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.3 seconds, 30.3%
Fitness Testing:    286.3 seconds, 55.2%
Report:              74.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction float_yank} {:instruction float_cos} {:instruction -97.6385025333639} {:instruction float_yank} {:instruction float_cos} {:instruction float_inc} {:instruction float_sub} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_mod} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_mult} {:instruction print_integer} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_flush} {:instruction in1} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_swap} {:instruction integer_sub} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_swap} {:instruction float_yank} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_rot} {:instruction integer_div} {:instruction 86} {:instruction print_float} {:instruction in1} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_div} {:instruction float_min} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_flush} {:instruction print_float} {:instruction integer_yank} {:instruction integer_swap} {:instruction print_integer} {:instruction 4} {:instruction integer_max} {:instruction integer_add} {:instruction print_integer} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_swap} {:instruction integer_add} {:instruction tag_integer_100} {:instruction print_float} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (float_shove float_yank float_cos -97.6385025333639 float_yank float_cos float_inc float_sub integer_max integer_rot integer_fromfloat integer_pop integer_dec integer_mod tag_float_222 float_flush in1 integer_shove integer_mod integer_mult print_integer in1 integer_shove integer_dec float_flush in1 integer_mod float_shove float_frominteger integer_fromfloat in1 float_swap integer_sub float_flush float_rot in2 integer_swap float_yank float_sub integer_add integer_add float_frominteger integer_rot integer_div 86 print_float in1 float_sub integer_dec integer_div float_min float_sub integer_stackdepth print_integer float_flush print_float integer_yank integer_swap print_integer 4 integer_max integer_add print_integer float_frominteger integer_max float_swap integer_add tag_integer_100 print_float integer_mult print_float integer_stackdepth in1 print_integer integer_add float_inc integer_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3892.710062399999
Median total errors in population: 198.01440000000002
Error averages by case: (141.9193527000016 8.984 140.23860760000025 8.902 145.05112100000082 8.011 144.98138469999796 9.016 143.2153945999994 8.112 157.73485069999884 8.848 143.93568319999844 8.87 143.80863180000094 8.851 144.29437319999843 8.047 155.41803790000185 7.168 144.2178533999987 8.163 151.7438239999995 8.997 153.04762620000068 8.077 144.0637576000028 6.516 134.9356153000003 8.059 159.1380159000004 8.727 155.10674559999995 7.267 151.28190309999866 7.174 139.489904599999 8.947 144.98462129999834 9.738 143.329850199999 8.08 160.6657631999987 8.966 146.7779139999985 9.765 158.6120923999987 9.166 134.27313819999847 7.993)
Error minima by case: (0.2466 5 0.3858 5 0.0655 5 0.2789 4 0.2699 5 0.009 5 0.0724 5 0.4372 5 0.4404 5 0.4145 5 0.1257 5 0.0378 7 0.0151 5 0.4304 5 0.2247 5 0.6817 4 0.8121 5 0.1318 5 0.2317 5 0.083 4 0.1341 5 0.771 5 0.1465 7 0.6509 6 0.1468 4)
Average genome size in population (length): 84.991
Average program size in population (points): 85.991
Average percent parens in population: 0.012
Minimum age in population: 175.37199944106
Maximum age in population: 179.7455226478924
Average age in population: 177.8763322864877
Median age in population: 177.8934275998739
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.242
Error (vector) diversity:			 0.264
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 282991470
--- Timings ---
Current time: 1529616337345 milliseconds
Total Time:         522.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.5 seconds, 30.3%
Fitness Testing:    288.5 seconds, 55.2%
Report:              75.6 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction tagged_218} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_flush} {:instruction tag_float_229} {:instruction float_div} {:instruction in1} {:instruction integer_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_swap} {:instruction integer_swap} {:instruction float_flush} {:instruction float_rot} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_rot} {:instruction print_integer} {:instruction 86} {:instruction integer_swap} {:instruction float_shove} {:instruction 86} {:instruction integer_mult} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_pop} {:instruction 4} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction tag_float_618} {:instruction tagged_948} {:instruction integer_max} {:instruction float_flush} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction tagged_354} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (integer_min integer_rot tagged_218 float_flush integer_fromfloat float_shove integer_yankdup float_inc integer_min integer_rot float_sub integer_max float_yankdup float_flush tag_float_229 float_div in1 integer_mod in1 integer_shove integer_mod float_shove float_frominteger integer_fromfloat integer_div float_swap integer_swap float_flush float_rot in2 integer_swap float_sub float_sub integer_add integer_sub float_frominteger integer_rot print_integer 86 integer_swap float_shove 86 integer_mult print_float float_stackdepth float_sub integer_dec integer_add float_tan integer_stackdepth print_integer print_integer integer_mult integer_pop 4 integer_min integer_fromfloat tag_float_618 tagged_948 integer_max float_flush print_integer integer_mult print_float integer_stackdepth in1 print_integer integer_stackdepth integer_mult tagged_354 float_stackdepth integer_stackdepth float_stackdepth float_stackdepth print_integer)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3560.0865328999994
Median total errors in population: 198.01440000000002
Error averages by case: (130.7850565000013 8.993 127.41931059999945 8.944 136.31529640000122 8.051 126.56181679999841 9.019 134.77451839999972 8.124 142.38729959999915 8.871 130.53341399999877 8.89 132.8404598000004 8.874 133.21686119999845 8.058 140.5645778000017 7.148 133.561858699999 8.164 138.78514509999926 9.044 135.89367879999995 8.065 135.54470490000227 6.53 122.69154470000045 8.091 142.06196969999988 8.767 137.4020802999999 7.234 133.21141119999888 7.151 127.99465649999918 8.944 136.14384869999856 9.786 132.83842879999938 8.107 143.86709799999886 8.958 132.7630905999988 9.804 139.9469862999987 9.151 121.21741949999856 7.996)
Error minima by case: (0.243 5 0.3719 5 0.0619 5 0.2752 5 0.2618 6 0.0096 4 0.0643 5 0.4291 4 0.4323 6 0.4108 5 0.1176 6 0.0378 7 0.0115 4 0.4268 5 0.2211 6 0.2504 5 0.1201 6 0.1282 5 0.2235 5 0.0794 4 0.1305 5 0.1612 6 0.1465 7 0.2813 6 0.1432 5)
Average genome size in population (length): 84.427
Average program size in population (points): 85.427
Average percent parens in population: 0.012
Minimum age in population: 176.9888772182601
Maximum age in population: 181.0083890736616
Average age in population: 179.2870894533992
Median age in population: 179.3422457807025
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.233
Error (vector) diversity:			 0.257
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 285119295
--- Timings ---
Current time: 1529616341224 milliseconds
Total Time:         526.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.7 seconds, 30.3%
Fitness Testing:    290.7 seconds, 55.2%
Report:              76.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 8650.993600000018
Test mean error for best: 4.32550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.0185401   
Correct output: 102.6327075508 | Program output: 102.0185401   
Correct output: 74.1519122481  | Program output: 74.0185401    
Correct output: -56.3652570697 | Program output: -56.0185401   
Correct output: 128.7486359047 | Program output: 128.0185401   
Correct output: -39.0753991565 | Program output: -39.0185401   
Correct output: 63.9461282577  | Program output: 63.0185401    
Correct output: 106.5813138606 | Program output: 106.0185401   
Correct output: 119.5781070021 | Program output: 119.0185401   
Correct output: -61.5008556741 | Program output: -61.0185401   
Correct output: 112.8928042415 | Program output: 112.0185401   
Correct output: -78.0563177466 | Program output: -79.0185401   
Correct output: -46.1015479935 | Program output: -46.0185401   
Correct output: 138.5168140128 | Program output: 138.0185401   
Correct output: 79.3111235509  | Program output: 79.0185401    
Correct output: -82.7680920585 | Program output: -82.0185401   
Correct output: -84.8984895408 | Program output: -84.0185401   
Correct output: -8.218244424   | Program output: -8.0185401    
Correct output: 110.7868673413 | Program output: 110.0185401   
Correct output: 162.1694424654 | Program output: 162.0185401   
Correct output: 109.2204830484 | Program output: 109.0185401   
Correct output: -107.8573642026 | Program output: -107.0185401  
Correct output: -54.1650214386 | Program output: -55.0185401   
Correct output: -106.7372858396 | Program output: -106.0185401  
Correct output: 51.23324299    | Program output: 51.0185401    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_integer_334} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_cos} {:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction tag_float_222} {:instruction integer_add} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_mult} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_222} {:instruction float_flush} {:instruction print_float} {:instruction tag_float_222} {:instruction integer_mod} {:instruction tag_integer_749} {:instruction integer_shove} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction in2} {:instruction float_shove} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_mod} {:instruction 86} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_swap} {:instruction float_flush} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction 4} {:instruction 94} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction in1} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_mod} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yankdup})
Best program: (tag_integer_334 integer_pop float_stackdepth float_cos in1 float_yank integer_fromfloat float_cos tag_float_222 integer_add in1 integer_yankdup integer_mult float_frominteger integer_fromfloat integer_div integer_mult in1 integer_flush tag_float_222 float_flush print_float tag_float_222 integer_mod tag_integer_749 integer_shove float_sub integer_mod integer_stackdepth tag_float_222 float_flush in1 integer_shove integer_mod float_shove float_frominteger integer_fromfloat float_rot in2 float_shove float_sub integer_add integer_add float_frominteger integer_swap float_mod 86 print_float float_stackdepth integer_add integer_dec integer_add integer_sub integer_stackdepth print_integer integer_mult print_float float_dup_times float_div integer_min integer_swap integer_swap print_integer integer_mod float_tan integer_min integer_swap float_flush print_integer integer_mod integer_dup_times 4 94 float_flush integer_min integer_swap integer_add print_integer integer_mult integer_div integer_stackdepth in1 print_integer integer_stackdepth integer_mult float_mod float_stackdepth print_integer float_yankdup)
Errors: [0.3144 8 0.6142 8 0.1334 7 0.3467 8 0.7301 7 0.0569 8 0.9276 8 0.5628 8 0.5596 7 0.4823 6 0.8743 7 0.9622 8 0.083 7 0.4983 5 0.2926 7 0.7496 8 0.8799 6 0.1997 6 0.7683 8 0.1509 9 0.2019 7 0.8388 8 0.8535 9 0.7187 8 0.2147 7]
Total: 198.01440000000002
Mean: 3.960288
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3759.3316500999995
Median total errors in population: 198.01440000000002
Error averages by case: (141.87283450000155 8.851 138.31647179999962 8.783 144.83174540000056 7.904 135.5415540999982 8.925 142.2200686999994 7.975 147.25301219999906 8.732 143.3109853999987 8.749 141.38069220000074 8.71 141.0866774999984 7.931 144.5153238000018 7.038 141.28661189999877 8.03 142.67407349999957 8.884 143.6541864000003 7.966 144.0680529000027 6.367 135.6815343000002 7.93 145.39243919999998 8.619 146.72230089999994 7.128 143.9107320999988 7.036 140.26630169999882 8.81 143.55498969999843 9.624 139.65329479999957 7.961 146.23553269999888 8.819 140.72888419999876 9.662 146.8393940999988 9.007 131.02295609999845 7.87)
Error minima by case: (0.2459 7 0.3858 7 0.0648 6 0.2782 5 0.2699 6 0.009 6 0.0724 6 0.4372 7 0.4404 5 0.4138 5 0.1257 6 0.0378 7 0.0144 6 0.4297 4 0.224 6 0.2504 5 0.1201 5 0.1311 4 0.2317 7 0.0823 6 0.1334 6 0.1612 6 0.1465 7 0.2813 7 0.1461 5)
Average genome size in population (length): 83.602
Average program size in population (points): 84.602
Average percent parens in population: 0.012
Minimum age in population: 177.9888772182601
Maximum age in population: 182.7933528819269
Average age in population: 180.6794164714622
Median age in population: 180.726636536812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.227
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 287224920
--- Timings ---
Current time: 1529616345172 milliseconds
Total Time:         530.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.9 seconds, 30.3%
Fitness Testing:    292.9 seconds, 55.2%
Report:              76.5 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 6000.0
Test mean error for best: 3.00000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.3329819871185401
Correct output: 102.6327075508 | Program output: 102.6327075508185401
Correct output: 74.1519122481  | Program output: 74.1519122481185401
Correct output: -56.3652570697 | Program output: -56.3652570697185401
Correct output: 128.7486359047 | Program output: 128.7486359047185401
Correct output: -39.0753991565 | Program output: -39.0753991565185401
Correct output: 63.9461282577  | Program output: 63.9461282577185401
Correct output: 106.5813138606 | Program output: 106.5813138606185401
Correct output: 119.5781070021 | Program output: 119.5781070021185401
Correct output: -61.5008556741 | Program output: -61.5008556741185401
Correct output: 112.8928042415 | Program output: 112.8928042415185401
Correct output: -78.0563177466 | Program output: -78.0563177466185401
Correct output: -46.1015479935 | Program output: -46.1015479935185401
Correct output: 138.5168140128 | Program output: 138.5168140128185401
Correct output: 79.3111235509  | Program output: 79.3111235509185401
Correct output: -82.7680920585 | Program output: -82.7680920585185401
Correct output: -84.8984895408 | Program output: -84.8984895408185401
Correct output: -8.218244424   | Program output: -8.218244424185401
Correct output: 110.7868673413 | Program output: 110.7868673413185401
Correct output: 162.1694424654 | Program output: 162.1694424654185401
Correct output: 109.2204830484 | Program output: 109.2204830484185401
Correct output: -107.8573642026 | Program output: -107.8573642026185401
Correct output: -54.1650214386 | Program output: -54.1650214386185401
Correct output: -106.7372858396 | Program output: -106.7372858396185401
Correct output: 51.23324299    | Program output: 51.23324299185401
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_sub} {:instruction tag_integer_334} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_742} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction tag_float_222} {:instruction float_sin} {:instruction in1} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_add} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_dec} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction integer_shove} {:instruction float_sub} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction 4} {:instruction float_mod} {:instruction float_mod} {:instruction print_float} {:instruction integer_min} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_max} {:instruction float_dec} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_add} {:instruction in2} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_max})
Best program: (float_div float_sub tag_integer_334 integer_fromfloat integer_div float_sub float_div tag_float_222 float_flush in1 tag_float_742 integer_mod integer_mult integer_yankdup integer_dup_times tag_float_222 float_sin in1 float_div tag_float_222 integer_swap in1 integer_shove integer_dec float_shove print_integer float_div in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger float_add print_integer 86 print_float float_dec float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float float_sub float_flush integer_shove float_sub integer_add print_integer integer_mult print_float 4 float_mod float_mod print_float integer_min integer_min integer_swap integer_add print_integer integer_swap float_stackdepth integer_rot integer_max float_dec integer_min integer_swap integer_add print_integer float_stackdepth integer_mult float_add in2 in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer integer_max)
Errors: [0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6]
Total: 150.0
Mean: 3.0
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3278.5113821999994
Median total errors in population: 198.01440000000002
Error averages by case: (120.52888670000148 8.795 116.58290279999957 8.708 122.72928200000169 7.822 120.62544109999826 8.849 121.22861110000053 7.897 130.23932969999922 8.683 121.86089209999875 8.662 121.05596949999978 8.651 122.36489379999749 7.848 126.27756090000166 6.916 120.75092739999899 7.936 123.14704679999831 8.741 127.63130639999923 7.858 123.70718100000235 6.263 117.82846070000052 7.864 129.39154099999868 8.604 126.97066039999996 7.042 126.14416279999871 6.947 118.7370565999993 8.714 123.42404699999754 9.597 119.04561680000003 7.871 131.71677639999888 8.772 119.14276559999873 9.555 128.78110169999883 8.94 113.29596189999837 7.768)
Error minima by case: (0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 5 0.0 5 0.0 6 0.0 6 0.0 6 0.0 4 0.0 6 0.0 6 0.0 6 0.0 5 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6)
Average genome size in population (length): 82.706
Average program size in population (points): 83.706
Average percent parens in population: 0.012
Minimum age in population: 179.0367118920404
Maximum age in population: 183.8564533640136
Average age in population: 181.9969584412253
Median age in population: 182.0519583819837
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.208
Error (vector) diversity:			 0.232
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 289307270
--- Timings ---
Current time: 1529616349115 milliseconds
Total Time:         534.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.1 seconds, 30.3%
Fitness Testing:    295.0 seconds, 55.2%
Report:              77.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 5000.0
Test mean error for best: 2.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.332981987186401
Correct output: 102.6327075508 | Program output: 102.632707550886401
Correct output: 74.1519122481  | Program output: 74.151912248186401
Correct output: -56.3652570697 | Program output: -56.365257069786401
Correct output: 128.7486359047 | Program output: 128.748635904786401
Correct output: -39.0753991565 | Program output: -39.075399156586401
Correct output: 63.9461282577  | Program output: 63.946128257786401
Correct output: 106.5813138606 | Program output: 106.581313860686401
Correct output: 119.5781070021 | Program output: 119.578107002186401
Correct output: -61.5008556741 | Program output: -61.500855674186401
Correct output: 112.8928042415 | Program output: 112.892804241586401
Correct output: -78.0563177466 | Program output: -78.056317746686401
Correct output: -46.1015479935 | Program output: -46.101547993586401
Correct output: 138.5168140128 | Program output: 138.516814012886401
Correct output: 79.3111235509  | Program output: 79.311123550986401
Correct output: -82.7680920585 | Program output: -82.768092058586401
Correct output: -84.8984895408 | Program output: -84.898489540886401
Correct output: -8.218244424   | Program output: -8.21824442486401
Correct output: 110.7868673413 | Program output: 110.786867341386401
Correct output: 162.1694424654 | Program output: 162.169442465486401
Correct output: 109.2204830484 | Program output: 109.220483048486401
Correct output: -107.8573642026 | Program output: -107.857364202686401
Correct output: -54.1650214386 | Program output: -54.165021438686401
Correct output: -106.7372858396 | Program output: -106.737285839686401
Correct output: 51.23324299    | Program output: 51.2332429986401
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction in1} {:instruction tag_float_742} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction tag_float_222} {:instruction float_sin} {:instruction in1} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_add} {:instruction print_integer} {:instruction 86} {:instruction print_float} {:instruction float_dec} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_yank} {:instruction 4} {:instruction 96} {:instruction float_mod} {:instruction print_float} {:instruction integer_min} {:instruction integer_swap} {:instruction float_flush} {:instruction print_integer} {:instruction float_cos} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_cos} {:instruction tag_float_644} {:instruction print_float} {:instruction in2} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_stackdepth} {:instruction print_integer} {:instruction in1})
Best program: (in1 integer_inc integer_fromfloat float_cos float_yank integer_fromfloat in1 tag_float_742 integer_mod integer_mult integer_yankdup integer_dup_times tag_float_222 float_sin in1 float_div tag_float_222 integer_swap in1 integer_shove integer_dec float_shove print_integer float_div in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger float_add print_integer 86 print_float float_dec float_sub integer_swap integer_add print_integer integer_mult float_yank 4 96 float_mod print_float integer_min integer_swap float_flush print_integer float_cos float_stackdepth float_mod integer_swap integer_stackdepth integer_min integer_swap integer_add print_integer float_cos tag_float_644 print_float in2 in1 integer_stackdepth float_yank float_stackdepth print_integer in1)
Errors: [0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5]
Total: 125.0
Mean: 2.5
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3627.137018599999
Median total errors in population: 198.01440000000002
Error averages by case: (136.02187630000154 8.741 134.0170007999991 8.68 133.3207029000021 7.784 131.3100517999982 8.778 136.20219210000025 7.841 142.17236129999915 8.655 134.61498639999843 8.6 135.21408319999995 8.593 135.82505899999745 7.808 140.62653590000176 6.879 136.11410779999872 7.885 139.96221009999866 8.769 140.46526109999968 7.81 136.3973309000027 6.19 129.61546220000045 7.831 139.75302359999915 8.553 141.57164079999998 7.003 139.33221589999863 6.87 134.74505909999885 8.651 137.07294149999768 9.523 135.11487289999994 7.834 145.61550729999882 8.713 137.3147612999986 9.562 142.79468119999876 8.877 127.80109319999825 7.712)
Error minima by case: (0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5)
Average genome size in population (length): 83.045
Average program size in population (points): 84.045
Average percent parens in population: 0.012
Minimum age in population: 180.7819263609559
Maximum age in population: 185.1584932610368
Average age in population: 183.4183445936947
Median age in population: 183.4553724202425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.212
Error (vector) diversity:			 0.236
Behavioral diversity:				 0.24
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 291396995
--- Timings ---
Current time: 1529616353183 milliseconds
Total Time:         538.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.5 seconds, 30.4%
Fitness Testing:    297.2 seconds, 55.2%
Report:              77.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 3000.0
Test mean error for best: 1.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.3329819871001
Correct output: 102.6327075508 | Program output: 102.6327075508001
Correct output: 74.1519122481  | Program output: 74.1519122481001
Correct output: -56.3652570697 | Program output: -56.3652570697001
Correct output: 128.7486359047 | Program output: 128.7486359047001
Correct output: -39.0753991565 | Program output: -39.0753991565001
Correct output: 63.9461282577  | Program output: 63.9461282577001
Correct output: 106.5813138606 | Program output: 106.5813138606001
Correct output: 119.5781070021 | Program output: 119.5781070021001
Correct output: -61.5008556741 | Program output: -61.5008556741001
Correct output: 112.8928042415 | Program output: 112.8928042415001
Correct output: -78.0563177466 | Program output: -78.0563177466001
Correct output: -46.1015479935 | Program output: -46.1015479935001
Correct output: 138.5168140128 | Program output: 138.5168140128001
Correct output: 79.3111235509  | Program output: 79.3111235509001
Correct output: -82.7680920585 | Program output: -82.7680920585001
Correct output: -84.8984895408 | Program output: -84.8984895408001
Correct output: -8.218244424   | Program output: -8.218244424001
Correct output: 110.7868673413 | Program output: 110.7868673413001
Correct output: 162.1694424654 | Program output: 162.1694424654001
Correct output: 109.2204830484 | Program output: 109.2204830484001
Correct output: -107.8573642026 | Program output: -107.8573642026001
Correct output: -54.1650214386 | Program output: -54.1650214386001
Correct output: -106.7372858396 | Program output: -106.7372858396001
Correct output: 51.23324299    | Program output: 51.23324299001
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_sub} {:instruction tag_integer_334} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_742} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction tag_float_222} {:instruction float_sin} {:instruction in1} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_add} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction integer_shove} {:instruction float_sub} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_max} {:instruction float_dec} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_add} {:instruction in2} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_max})
Best program: (float_div float_sub tag_integer_334 integer_fromfloat integer_div float_sub float_div tag_float_222 float_flush in1 tag_float_742 integer_mod integer_mult integer_yankdup integer_dup_times tag_float_222 float_sin in1 float_div tag_float_222 integer_swap in1 integer_shove integer_dec float_shove print_integer float_div in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger float_add print_integer integer_yankdup print_float float_dec float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float float_sub float_flush integer_shove float_sub float_flush integer_min integer_swap integer_add print_integer print_float print_float integer_min integer_min integer_swap integer_add print_integer integer_swap float_stackdepth integer_rot integer_max float_dec integer_min integer_swap integer_add print_integer float_stackdepth integer_mult float_add in2 in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer integer_max)
Errors: [0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3]
Total: 75.0
Mean: 1.5
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3817.861475899999
Median total errors in population: 198.01440000000002
Error averages by case: (142.54298670000156 8.873 139.96501250000048 8.768 141.58081920000083 7.915 138.2489487999984 8.859 142.96155009999936 8.001 153.7820677999992 8.716 141.01238109999903 8.719 145.81814030000103 8.699 144.881813199999 7.954 148.29318380000183 7.049 144.04003279999915 8.06 147.9219220999997 8.888 148.26266360000054 7.937 145.80597330000245 6.439 135.3084285000001 7.902 150.23024250000037 8.633 147.76394719999993 7.127 147.8577627999987 7.05 139.4028271999993 8.785 144.00715629999877 9.6 143.23957029999897 7.989 152.75186579999874 8.796 143.27708889999857 9.647 150.61281609999875 8.975 131.0352749999983 7.876)
Error minima by case: (0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3)
Average genome size in population (length): 82.888
Average program size in population (points): 83.888
Average percent parens in population: 0.012
Minimum age in population: 182.2026629687568
Maximum age in population: 186.7716654292496
Average age in population: 184.8436047187508
Median age in population: 184.9152867692325
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.226
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 293481745
--- Timings ---
Current time: 1529616357061 milliseconds
Total Time:         542.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.7 seconds, 30.4%
Fitness Testing:    299.3 seconds, 55.2%
Report:              78.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 2000.0
Test mean error for best: 1.00000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.332981987101
Correct output: 102.6327075508 | Program output: 102.632707550801
Correct output: 74.1519122481  | Program output: 74.151912248101
Correct output: -56.3652570697 | Program output: -56.365257069701
Correct output: 128.7486359047 | Program output: 128.748635904701
Correct output: -39.0753991565 | Program output: -39.075399156501
Correct output: 63.9461282577  | Program output: 63.946128257701
Correct output: 106.5813138606 | Program output: 106.581313860601
Correct output: 119.5781070021 | Program output: 119.578107002101
Correct output: -61.5008556741 | Program output: -61.500855674101
Correct output: 112.8928042415 | Program output: 112.892804241501
Correct output: -78.0563177466 | Program output: -78.056317746601
Correct output: -46.1015479935 | Program output: -46.101547993501
Correct output: 138.5168140128 | Program output: 138.516814012801
Correct output: 79.3111235509  | Program output: 79.311123550901
Correct output: -82.7680920585 | Program output: -82.768092058501
Correct output: -84.8984895408 | Program output: -84.898489540801
Correct output: -8.218244424   | Program output: -8.21824442401
Correct output: 110.7868673413 | Program output: 110.786867341301
Correct output: 162.1694424654 | Program output: 162.169442465401
Correct output: 109.2204830484 | Program output: 109.220483048401
Correct output: -107.8573642026 | Program output: -107.857364202601
Correct output: -54.1650214386 | Program output: -54.165021438601
Correct output: -106.7372858396 | Program output: -106.737285839601
Correct output: 51.23324299    | Program output: 51.2332429901 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_sub} {:instruction tag_integer_334} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_742} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction tag_float_222} {:instruction float_sin} {:instruction in1} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_add} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction integer_shove} {:instruction float_sub} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction print_float} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction print_integer})
Best program: (float_div float_sub tag_integer_334 integer_fromfloat integer_div float_sub float_div tag_float_222 float_flush in1 tag_float_742 integer_mod integer_mult integer_yankdup integer_dup_times tag_float_222 float_sin in1 float_div tag_float_222 integer_swap in1 integer_shove integer_dec float_shove print_integer float_div in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger float_add print_integer integer_yankdup print_float float_dec float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float float_sub float_flush integer_shove float_sub float_flush integer_min integer_swap integer_add print_integer print_float print_float integer_min integer_min integer_swap integer_add print_integer integer_swap float_stackdepth print_float in1 integer_stackdepth integer_stackdepth float_stackdepth print_integer)
Errors: [0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2]
Total: 50.0
Mean: 1.0
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3768.1620611999997
Median total errors in population: 198.01440000000002
Error averages by case: (141.0865895000012 8.58 137.68740819999974 8.553 146.1310232000009 7.737 136.40591459999828 8.654 140.47581209999967 7.82 146.80631309999916 8.498 146.33694959999852 8.457 140.77826070000057 8.469 141.2256874999985 7.781 144.17471740000147 7.02 141.35476729999885 7.873 145.47546049999926 8.606 144.58988070000004 7.841 142.08208370000222 6.462 138.06450189999987 7.803 146.14075569999972 8.395 147.0309131 7.092 144.87016269999887 7.052 139.5315281999991 8.534 141.95703609999845 9.222 138.91813199999953 7.83 149.219445499999 8.585 141.93169369999885 9.278 148.99664169999897 8.747 134.27238249999894 7.729)
Error minima by case: (0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2)
Average genome size in population (length): 82.05
Average program size in population (points): 83.05
Average percent parens in population: 0.012
Minimum age in population: 183.2026629687568
Maximum age in population: 188.2474267928816
Average age in population: 186.2754560012293
Median age in population: 186.2904427323181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.233
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 295543195
--- Timings ---
Current time: 1529616361213 milliseconds
Total Time:         546.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.1 seconds, 30.4%
Fitness Testing:    301.6 seconds, 55.2%
Report:              78.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.33298198710
Correct output: 102.6327075508 | Program output: 102.63270755080
Correct output: 74.1519122481  | Program output: 74.15191224810
Correct output: -56.3652570697 | Program output: -56.36525706970
Correct output: 128.7486359047 | Program output: 128.74863590470
Correct output: -39.0753991565 | Program output: -39.07539915650
Correct output: 63.9461282577  | Program output: 63.94612825770
Correct output: 106.5813138606 | Program output: 106.58131386060
Correct output: 119.5781070021 | Program output: 119.57810700210
Correct output: -61.5008556741 | Program output: -61.50085567410
Correct output: 112.8928042415 | Program output: 112.89280424150
Correct output: -78.0563177466 | Program output: -78.05631774660
Correct output: -46.1015479935 | Program output: -46.10154799350
Correct output: 138.5168140128 | Program output: 138.51681401280
Correct output: 79.3111235509  | Program output: 79.31112355090
Correct output: -82.7680920585 | Program output: -82.76809205850
Correct output: -84.8984895408 | Program output: -84.89848954080
Correct output: -8.218244424   | Program output: -8.2182444240 
Correct output: 110.7868673413 | Program output: 110.78686734130
Correct output: 162.1694424654 | Program output: 162.16944246540
Correct output: 109.2204830484 | Program output: 109.22048304840
Correct output: -107.8573642026 | Program output: -107.85736420260
Correct output: -54.1650214386 | Program output: -54.16502143860
Correct output: -106.7372858396 | Program output: -106.73728583960
Correct output: 51.23324299    | Program output: 51.233242990  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_sub} {:instruction tag_integer_334} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_742} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction tag_float_222} {:instruction float_sin} {:instruction in1} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_add} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_sub} {:instruction float_inc} {:instruction integer_shove} {:instruction float_sub} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction print_float} {:instruction integer_min} {:instruction integer_flush} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_max} {:instruction float_dec} {:instruction integer_min})
Best program: (float_div float_sub tag_integer_334 integer_fromfloat integer_div float_sub float_div tag_float_222 float_flush in1 tag_float_742 integer_mod integer_mult integer_yankdup integer_dup_times tag_float_222 float_sin in1 float_div tag_float_222 integer_swap in1 integer_shove integer_dec float_shove print_integer float_div in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger float_add print_integer integer_yankdup print_float float_dec float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float float_sub float_inc integer_shove float_sub float_flush integer_min integer_swap integer_add print_integer print_float print_float integer_min integer_min integer_swap integer_add float_mod float_mod print_float integer_min integer_flush integer_swap integer_add print_integer integer_swap float_stackdepth integer_rot integer_max float_dec integer_min)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2567.5875992
Median total errors in population: 198.01440000000002
Error averages by case: (93.40326810000057 7.18 90.63578610000009 7.188 101.8886653000005 6.762 88.74266119999969 7.157 92.13682290000023 6.798 97.16517649999993 7.128 102.18276519999968 7.09 92.44810559999995 7.118 91.66494059999933 6.751 100.74947200000068 6.403 91.11299769999997 6.844 100.38852009999962 7.302 95.92099389999971 6.771 92.94004220000059 6.115 89.2207435000002 6.746 104.4539963999997 7.027 101.62797469999991 6.431 94.81494569999951 6.39 90.91504149999997 7.166 94.4607480999993 7.522 90.78653479999996 6.822 105.77364519999946 7.174 100.2562120999995 7.669 104.84116539999943 7.307 85.54737439999937 6.648)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 79.088
Average program size in population (points): 80.088
Average percent parens in population: 0.013
Minimum age in population: 185.3670589076476
Maximum age in population: 190.0405775358499
Average age in population: 187.7833040398794
Median age in population: 187.8192631171712
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.205
Error (vector) diversity:			 0.219
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 297525720
--- Timings ---
Current time: 1529616365235 milliseconds
Total Time:         550.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.3 seconds, 30.4%
Fitness Testing:    303.9 seconds, 55.2%
Report:              79.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.33298198710
Correct output: 102.6327075508 | Program output: 102.63270755080
Correct output: 74.1519122481  | Program output: 74.15191224810
Correct output: -56.3652570697 | Program output: -56.36525706970
Correct output: 128.7486359047 | Program output: 128.74863590470
Correct output: -39.0753991565 | Program output: -39.07539915650
Correct output: 63.9461282577  | Program output: 63.94612825770
Correct output: 106.5813138606 | Program output: 106.58131386060
Correct output: 119.5781070021 | Program output: 119.57810700210
Correct output: -61.5008556741 | Program output: -61.50085567410
Correct output: 112.8928042415 | Program output: 112.89280424150
Correct output: -78.0563177466 | Program output: -78.05631774660
Correct output: -46.1015479935 | Program output: -46.10154799350
Correct output: 138.5168140128 | Program output: 138.51681401280
Correct output: 79.3111235509  | Program output: 79.31112355090
Correct output: -82.7680920585 | Program output: -82.76809205850
Correct output: -84.8984895408 | Program output: -84.89848954080
Correct output: -8.218244424   | Program output: -8.2182444240 
Correct output: 110.7868673413 | Program output: 110.78686734130
Correct output: 162.1694424654 | Program output: 162.16944246540
Correct output: 109.2204830484 | Program output: 109.22048304840
Correct output: -107.8573642026 | Program output: -107.85736420260
Correct output: -54.1650214386 | Program output: -54.16502143860
Correct output: -106.7372858396 | Program output: -106.73728583960
Correct output: 51.23324299    | Program output: 51.233242990  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_sub} {:instruction tag_integer_334} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_742} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction tag_float_222} {:instruction float_sin} {:instruction in1} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_add} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_sub} {:instruction float_inc} {:instruction integer_shove} {:instruction float_sub} {:instruction print_float} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction print_float} {:instruction integer_min} {:instruction integer_flush} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_max} {:instruction float_dec} {:instruction integer_min})
Best program: (float_div float_sub tag_integer_334 integer_fromfloat integer_yank float_sub float_div tag_float_222 float_flush in1 tag_float_742 integer_mod integer_mult integer_yankdup integer_dup_times tag_float_222 float_sin in1 float_div tag_float_222 integer_swap in1 integer_shove integer_dec float_shove print_integer float_div in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger float_add print_integer integer_yankdup print_float float_dec float_sub integer_dec integer_add float_tan integer_stackdepth print_integer integer_mult print_float float_sub float_inc integer_shove float_sub print_float integer_min integer_swap integer_add print_integer print_float print_float integer_min integer_min integer_swap integer_add float_mod float_mod print_float integer_min integer_flush integer_swap integer_add print_integer integer_swap float_stackdepth integer_rot integer_max float_dec integer_min)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2254.8410849
Median total errors in population: 125.0
Error averages by case: (80.14439540000001 5.292 77.78244110000003 5.296 95.82474949999998 5.243 76.58634560000002 5.257 83.39726630000003 5.24 82.09777210000001 5.3 93.99401430000002 5.289 80.94513630000003 5.249 78.56858679999998 5.197 90.86962679999998 5.218 79.93675240000003 5.298 92.6867736 5.509 77.4845596 5.247 82.32732729999996 5.191 79.11289250000004 5.209 93.49161019999997 5.187 96.45316259999998 5.227 79.43248710000002 5.212 78.96497200000002 5.308 82.19403989999999 5.313 79.7707381 5.249 96.35652239999997 5.28 93.09510980000002 5.498 95.14467159999995 5.349 76.3831316 5.138)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 74.605
Average program size in population (points): 75.605
Average percent parens in population: 0.013
Minimum age in population: 186.7753595100945
Maximum age in population: 191.3410626052738
Average age in population: 189.4066010700588
Median age in population: 189.4637097032198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.144
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 299392695
--- Timings ---
Current time: 1529616369397 milliseconds
Total Time:         554.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.6 seconds, 30.4%
Fitness Testing:    306.3 seconds, 55.2%
Report:              79.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.3329819871
Correct output: 102.6327075508 | Program output: 102.6327075508
Correct output: 74.1519122481  | Program output: 74.1519122481 
Correct output: -56.3652570697 | Program output: -56.3652570697
Correct output: 128.7486359047 | Program output: 128.7486359047
Correct output: -39.0753991565 | Program output: -39.0753991565
Correct output: 63.9461282577  | Program output: 63.9461282577 
Correct output: 106.5813138606 | Program output: 106.5813138606
Correct output: 119.5781070021 | Program output: 119.5781070021
Correct output: -61.5008556741 | Program output: -61.5008556741
Correct output: 112.8928042415 | Program output: 112.8928042415
Correct output: -78.0563177466 | Program output: -78.0563177466
Correct output: -46.1015479935 | Program output: -46.1015479935
Correct output: 138.5168140128 | Program output: 138.5168140128
Correct output: 79.3111235509  | Program output: 79.3111235509 
Correct output: -82.7680920585 | Program output: -82.7680920585
Correct output: -84.8984895408 | Program output: -84.8984895408
Correct output: -8.218244424   | Program output: -8.218244424  
Correct output: 110.7868673413 | Program output: 110.7868673413
Correct output: 162.1694424654 | Program output: 162.1694424654
Correct output: 109.2204830484 | Program output: 109.2204830484
Correct output: -107.8573642026 | Program output: -107.8573642026
Correct output: -54.1650214386 | Program output: -54.1650214386
Correct output: -106.7372858396 | Program output: -106.7372858396
Correct output: 51.23324299    | Program output: 51.23324299   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_sub} {:instruction tag_integer_334} {:instruction tag_float_222} {:instruction float_flush} {:instruction in1} {:instruction tag_float_742} {:instruction integer_mod} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction tag_float_222} {:instruction float_sin} {:instruction integer_div} {:instruction float_div} {:instruction tag_float_222} {:instruction integer_swap} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction print_integer} {:instruction float_div} {:instruction in2} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_add} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction float_tan} {:instruction print_integer} {:instruction integer_mult} {:instruction print_float} {:instruction float_sub} {:instruction float_inc} {:instruction integer_shove} {:instruction float_sub} {:instruction float_flush} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction print_float} {:instruction integer_min} {:instruction integer_flush} {:instruction integer_swap} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_max} {:instruction float_dec} {:instruction integer_min})
Best program: (float_div float_sub tag_integer_334 tag_float_222 float_flush in1 tag_float_742 integer_mod float_mult integer_yankdup integer_dup_times tag_float_222 float_sin integer_div float_div tag_float_222 integer_swap in1 integer_shove integer_dec float_shove print_integer float_div in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger float_add print_integer integer_yankdup print_float float_dec float_sub integer_dec integer_add float_tan print_integer integer_mult print_float float_sub float_inc integer_shove float_sub float_flush integer_min integer_swap integer_add print_integer print_float print_float integer_min integer_min integer_swap integer_add float_mod float_mod print_float integer_min integer_flush integer_swap integer_add print_integer integer_swap float_stackdepth integer_rot integer_max float_dec integer_min)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1930.5196016000002
Median total errors in population: 75.0
Error averages by case: (66.1281651 3.74 69.07837070000001 3.713 74.55031399999999 3.67 68.40274480000002 3.658 70.48752500000003 3.684 74.24754050000003 3.829 75.8573898 3.691 73.55068080000004 3.705 72.5660888 3.605 76.29261869999999 3.681 72.5489471 3.725 82.97805739999994 4.116 67.51087170000001 3.685 71.96108779999996 3.67 66.17857750000002 3.614 77.06864569999998 3.583 82.30832100000002 3.706 73.70005580000004 3.781 68.82148860000001 3.75 69.46039040000001 3.735 70.59757040000001 3.704 82.68429210000001 3.741 76.43520449999998 4.122 84.15033459999998 3.818 69.71631879999998 3.512)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 73.607
Average program size in population (points): 74.607
Average percent parens in population: 0.014
Minimum age in population: 188.4001524999955
Maximum age in population: 192.6331596499461
Average age in population: 190.8579528213836
Median age in population: 190.917568250212
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.13
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 301234220
--- Timings ---
Current time: 1529616373294 milliseconds
Total Time:         558.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.8 seconds, 30.4%
Fitness Testing:    308.5 seconds, 55.2%
Report:              80.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 134
Successful program: (float_div float_sub tag_integer_334 tag_float_222 float_flush in1 tag_float_742 integer_mod float_mult integer_yankdup integer_dup_times tag_float_222 float_sin integer_div float_div tag_float_222 integer_swap in1 integer_shove integer_dec float_shove print_integer float_div in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger float_add print_integer integer_yankdup print_float float_dec float_sub integer_dec integer_add float_tan print_integer integer_mult print_float float_sub float_inc integer_shove float_sub float_flush integer_min integer_swap integer_add print_integer print_float print_float integer_min integer_min integer_swap integer_add float_mod float_mod print_float integer_min integer_flush integer_swap integer_add print_integer integer_swap float_stackdepth integer_rot integer_max float_dec integer_min)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 72


Auto-simplifying with starting size: 72
step: 0
program: (float_div float_sub tag_integer_334 tag_float_222 float_flush in1 tag_float_742 integer_mod float_mult integer_yankdup integer_dup_times tag_float_222 float_sin integer_div float_div tag_float_222 integer_swap in1 integer_shove integer_dec float_shove print_integer float_div in2 integer_swap float_sub float_sub integer_add integer_add float_frominteger float_add print_integer integer_yankdup print_float float_dec float_sub integer_dec integer_add float_tan print_integer integer_mult print_float float_sub float_inc integer_shove float_sub float_flush integer_min integer_swap integer_add print_integer print_float print_float integer_min integer_min integer_swap integer_add float_mod float_mod print_float integer_min integer_flush integer_swap integer_add print_integer integer_swap float_stackdepth integer_rot integer_max float_dec integer_min)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 72

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 149.3329819871 | Program output: 149.3329819871
Correct output: 102.6327075508 | Program output: 102.6327075508
Correct output: 74.1519122481  | Program output: 74.1519122481 
Correct output: -56.3652570697 | Program output: -56.3652570697
Correct output: 128.7486359047 | Program output: 128.7486359047
Correct output: -39.0753991565 | Program output: -39.0753991565
Correct output: 63.9461282577  | Program output: 63.9461282577 
Correct output: 106.5813138606 | Program output: 106.5813138606
Correct output: 119.5781070021 | Program output: 119.5781070021
Correct output: -61.5008556741 | Program output: -61.5008556741
Correct output: 112.8928042415 | Program output: 112.8928042415
Correct output: -78.0563177466 | Program output: -78.0563177466
Correct output: -46.1015479935 | Program output: -46.1015479935
Correct output: 138.5168140128 | Program output: 138.5168140128
Correct output: 79.3111235509  | Program output: 79.3111235509 
Correct output: -82.7680920585 | Program output: -82.7680920585
Correct output: -84.8984895408 | Program output: -84.8984895408
Correct output: -8.218244424   | Program output: -8.218244424  
Correct output: 110.7868673413 | Program output: 110.7868673413
Correct output: 162.1694424654 | Program output: 162.1694424654
Correct output: 109.2204830484 | Program output: 109.2204830484
Correct output: -107.8573642026 | Program output: -107.8573642026
Correct output: -54.1650214386 | Program output: -54.1650214386
Correct output: -106.7372858396 | Program output: -106.7372858396
Correct output: 51.23324299    | Program output: 51.23324299   
;;******************************
