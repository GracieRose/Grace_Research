Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[2.907668008050109 -39] -36.09233199194989]
Train Case:   1 | Input/Output: [[7.875523020200916 76] 83.87552302020092]
Train Case:   2 | Input/Output: [[53.5659592300577 -36] 17.5659592300577]
Train Case:   3 | Input/Output: [[33.354946445636386 47] 80.35494644563639]
Train Case:   4 | Input/Output: [[-6.065661986462473 25] 18.934338013537527]
Train Case:   5 | Input/Output: [[-55.11295644081093 15] -40.11295644081093]
Train Case:   6 | Input/Output: [[-40.39575350411433 99] 58.60424649588567]
Train Case:   7 | Input/Output: [[-17.549069932567235 -3] -20.549069932567235]
Train Case:   8 | Input/Output: [[8.220662142576288 -52] -43.77933785742371]
Train Case:   9 | Input/Output: [[-92.78312102980823 -37] -129.78312102980823]
Train Case:  10 | Input/Output: [[82.81489871135412 80] 162.81489871135412]
Train Case:  11 | Input/Output: [[-65.00246551199311 -67] -132.0024655119931]
Train Case:  12 | Input/Output: [[37.600303522584625 77] 114.60030352258462]
Train Case:  13 | Input/Output: [[-4.753407708823147 3] -1.753407708823147]
Train Case:  14 | Input/Output: [[38.21194083790661 51] 89.21194083790661]
Train Case:  15 | Input/Output: [[57.70626768024394 31] 88.70626768024394]
Train Case:  16 | Input/Output: [[97.29530860902088 67] 164.29530860902088]
Train Case:  17 | Input/Output: [[-77.7267472666904 77] -0.7267472666903956]
Train Case:  18 | Input/Output: [[69.10028947677188 88] 157.10028947677188]
Train Case:  19 | Input/Output: [[-15.7711719158998 -80] -95.7711719158998]
Train Case:  20 | Input/Output: [[-69.13157803647603 77] 7.868421963523971]
Train Case:  21 | Input/Output: [[97.08697280780484 -72] 25.08697280780484]
Train Case:  22 | Input/Output: [[-21.238922756828643 -59] -80.23892275682864]
Train Case:  23 | Input/Output: [[26.88977599525377 -73] -46.11022400474623]
Train Case:  24 | Input/Output: [[-97.79276418303142 64] -33.79276418303142]
Test Case:   0 | Input/Output: [[97.738711025486 -95] 2.7387110254859977]
Test Case:   1 | Input/Output: [[24.81909905205457 -16] 8.819099052054568]
Test Case:   2 | Input/Output: [[-49.41564833412298 93] 43.58435166587702]
Test Case:   3 | Input/Output: [[11.507285199137883 -27] -15.492714800862117]
Test Case:   4 | Input/Output: [[51.228399333478364 44] 95.22839933347836]
Test Case:   5 | Input/Output: [[10.117586429107135 98] 108.11758642910713]
Test Case:   6 | Input/Output: [[26.668467107869475 39] 65.66846710786947]
Test Case:   7 | Input/Output: [[9.667092616957973 38] 47.66709261695797]
Test Case:   8 | Input/Output: [[-72.60292030696687 -14] -86.60292030696687]
Test Case:   9 | Input/Output: [[-67.76801580546635 39] -28.768015805466348]
Test Case:  10 | Input/Output: [[-85.66075073736185 9] -76.66075073736185]
Test Case:  11 | Input/Output: [[58.55077773395638 16] 74.55077773395638]
Test Case:  12 | Input/Output: [[1.5260768099270194 -50] -48.47392319007298]
Test Case:  13 | Input/Output: [[48.50320715568142 -98] -49.49679284431858]
Test Case:  14 | Input/Output: [[-57.89871080290272 51] -6.89871080290272]
Test Case:  15 | Input/Output: [[-65.04275458276045 93] 27.957245417239548]
Test Case:  16 | Input/Output: [[92.04610651131907 -14] 78.04610651131907]
Test Case:  17 | Input/Output: [[84.98654576108848 62] 146.98654576108848]
Test Case:  18 | Input/Output: [[-98.51729740835704 -73] -171.51729740835702]
Test Case:  19 | Input/Output: [[5.690522826507532 26] 31.690522826507532]
Test Case:  20 | Input/Output: [[-36.93163591427502 -45] -81.93163591427502]
Test Case:  21 | Input/Output: [[-38.25382602120519 -97] -135.25382602120519]
Test Case:  22 | Input/Output: [[56.82687765035473 41] 97.82687765035473]
Test Case:  23 | Input/Output: [[23.049223050099826 63] 86.04922305009983]
Test Case:  24 | Input/Output: [[-44.95416718872065 92] 47.04583281127935]
Test Case:  25 | Input/Output: [[62.68552213258059 -73] -10.314477867419413]
Test Case:  26 | Input/Output: [[-72.59615742139465 -62] -134.59615742139465]
Test Case:  27 | Input/Output: [[-38.127225210656924 -14] -52.127225210656924]
Test Case:  28 | Input/Output: [[-79.14305179251615 84] 4.856948207483853]
Test Case:  29 | Input/Output: [[92.57235063308059 -77] 15.572350633080589]
Test Case:  30 | Input/Output: [[12.222728256031672 -93] -80.77727174396833]
Test Case:  31 | Input/Output: [[50.109518245485106 6] 56.109518245485106]
Test Case:  32 | Input/Output: [[-63.775243704287156 -19] -82.77524370428716]
Test Case:  33 | Input/Output: [[75.85631008121408 -34] 41.856310081214076]
Test Case:  34 | Input/Output: [[-66.39161101857145 -96] -162.39161101857144]
Test Case:  35 | Input/Output: [[14.798143207794709 -78] -63.20185679220529]
Test Case:  36 | Input/Output: [[-66.04005049866325 -43] -109.04005049866325]
Test Case:  37 | Input/Output: [[-1.5827824938455137 -21] -22.582782493845514]
Test Case:  38 | Input/Output: [[12.84855887880974 -10] 2.8485588788097402]
Test Case:  39 | Input/Output: [[-89.99278822987978 -19] -108.99278822987978]
Test Case:  40 | Input/Output: [[-37.1675520407768 93] 55.8324479592232]
Test Case:  41 | Input/Output: [[69.52882966300854 -87] -17.471170336991463]
Test Case:  42 | Input/Output: [[54.570351082370166 -16] 38.570351082370166]
Test Case:  43 | Input/Output: [[57.81780955081436 59] 116.81780955081436]
Test Case:  44 | Input/Output: [[52.05898303596962 42] 94.05898303596962]
Test Case:  45 | Input/Output: [[-94.00465267685192 -32] -126.00465267685192]
Test Case:  46 | Input/Output: [[-29.40182940030958 13] -16.40182940030958]
Test Case:  47 | Input/Output: [[15.833401457940283 45] 60.83340145794028]
Test Case:  48 | Input/Output: [[69.27445861516927 86] 155.27445861516927]
Test Case:  49 | Input/Output: [[3.7628271137043328 -26] -22.237172886295667]
Test Case:  50 | Input/Output: [[81.39892145429869 63] 144.3989214542987]
Test Case:  51 | Input/Output: [[-2.343097359815218 -47] -49.34309735981522]
Test Case:  52 | Input/Output: [[-34.52703429094777 68] 33.47296570905223]
Test Case:  53 | Input/Output: [[-85.27677122702543 52] -33.276771227025435]
Test Case:  54 | Input/Output: [[91.16002927191818 -96] -4.839970728081823]
Test Case:  55 | Input/Output: [[93.26330486339577 85] 178.26330486339577]
Test Case:  56 | Input/Output: [[85.63418268212897 70] 155.63418268212897]
Test Case:  57 | Input/Output: [[-66.25070832199111 -73] -139.2507083219911]
Test Case:  58 | Input/Output: [[-13.929536103546596 -83] -96.9295361035466]
Test Case:  59 | Input/Output: [[-28.136824305153297 3] -25.136824305153297]
Test Case:  60 | Input/Output: [[-57.51916820880367 -64] -121.51916820880368]
Test Case:  61 | Input/Output: [[70.61585410888043 -90] -19.384145891119573]
Test Case:  62 | Input/Output: [[73.75175784248847 4] 77.75175784248847]
Test Case:  63 | Input/Output: [[56.98062094497436 78] 134.98062094497436]
Test Case:  64 | Input/Output: [[-76.51772759492002 90] 13.482272405079982]
Test Case:  65 | Input/Output: [[-74.17853788502975 79] 4.821462114970245]
Test Case:  66 | Input/Output: [[98.12193548610219 61] 159.1219354861022]
Test Case:  67 | Input/Output: [[84.80022334505753 -5] 79.80022334505753]
Test Case:  68 | Input/Output: [[19.899281872490022 8] 27.899281872490022]
Test Case:  69 | Input/Output: [[-25.27940582419599 37] 11.72059417580401]
Test Case:  70 | Input/Output: [[-59.06751714149865 -6] -65.06751714149866]
Test Case:  71 | Input/Output: [[-2.1876588461525444 -83] -85.18765884615254]
Test Case:  72 | Input/Output: [[-23.529441271909434 90] 66.47055872809057]
Test Case:  73 | Input/Output: [[21.83052368149248 -3] 18.83052368149248]
Test Case:  74 | Input/Output: [[-55.42811820316362 -61] -116.42811820316362]
Test Case:  75 | Input/Output: [[-32.43821673557585 -16] -48.43821673557585]
Test Case:  76 | Input/Output: [[-26.05368218144453 43] 16.94631781855547]
Test Case:  77 | Input/Output: [[-8.193551552701024 -93] -101.19355155270102]
Test Case:  78 | Input/Output: [[-51.97617388004725 31] -20.97617388004725]
Test Case:  79 | Input/Output: [[-87.3539517560482 59] -28.353951756048204]
Test Case:  80 | Input/Output: [[-24.17354845625556 -92] -116.17354845625556]
Test Case:  81 | Input/Output: [[-52.980533091429514 -35] -87.98053309142952]
Test Case:  82 | Input/Output: [[47.248544968917315 60] 107.24854496891732]
Test Case:  83 | Input/Output: [[90.31599622744477 39] 129.31599622744477]
Test Case:  84 | Input/Output: [[68.01485012227167 26] 94.01485012227167]
Test Case:  85 | Input/Output: [[-28.066661349379245 37] 8.933338650620755]
Test Case:  86 | Input/Output: [[-53.16763728456231 29] -24.16763728456231]
Test Case:  87 | Input/Output: [[45.817715792718104 -70] -24.182284207281896]
Test Case:  88 | Input/Output: [[31.66846703282434 69] 100.66846703282434]
Test Case:  89 | Input/Output: [[92.46798254471378 -8] 84.46798254471378]
Test Case:  90 | Input/Output: [[74.05223248376791 83] 157.0522324837679]
Test Case:  91 | Input/Output: [[81.18688421244192 -41] 40.186884212441925]
Test Case:  92 | Input/Output: [[57.68065564779502 6] 63.68065564779502]
Test Case:  93 | Input/Output: [[-63.84554730245529 -94] -157.8455473024553]
Test Case:  94 | Input/Output: [[-74.02815925534918 -41] -115.02815925534918]
Test Case:  95 | Input/Output: [[-54.83220664224915 -33] -87.83220664224915]
Test Case:  96 | Input/Output: [[-43.94670834647001 -5] -48.94670834647001]
Test Case:  97 | Input/Output: [[14.048105617234398 -93] -78.9518943827656]
Test Case:  98 | Input/Output: [[-92.71153876245299 85] -7.711538762452989]
Test Case:  99 | Input/Output: [[69.35938737357841 22] 91.35938737357841]
Test Case: 100 | Input/Output: [[0.7003569328436328 -97] -96.29964306715637]
Test Case: 101 | Input/Output: [[39.199234143895495 76] 115.1992341438955]
Test Case: 102 | Input/Output: [[43.775598404821324 -73] -29.224401595178676]
Test Case: 103 | Input/Output: [[-18.315073857943332 66] 47.68492614205667]
Test Case: 104 | Input/Output: [[47.989157584493455 -18] 29.989157584493455]
Test Case: 105 | Input/Output: [[43.3345025578453 2] 45.3345025578453]
Test Case: 106 | Input/Output: [[-56.726092204120924 -47] -103.72609220412093]
Test Case: 107 | Input/Output: [[-80.9488463834057 53] -27.948846383405694]
Test Case: 108 | Input/Output: [[70.6071977979633 71] 141.6071977979633]
Test Case: 109 | Input/Output: [[71.68471841260177 -12] 59.68471841260177]
Test Case: 110 | Input/Output: [[25.861553357031568 -31] -5.138446642968432]
Test Case: 111 | Input/Output: [[96.11545845385646 50] 146.11545845385646]
Test Case: 112 | Input/Output: [[93.73243361537672 74] 167.73243361537672]
Test Case: 113 | Input/Output: [[-75.3876307558292 81] 5.612369244170793]
Test Case: 114 | Input/Output: [[47.53473085869942 -39] 8.534730858699419]
Test Case: 115 | Input/Output: [[-63.348851743593656 -71] -134.34885174359366]
Test Case: 116 | Input/Output: [[-9.577506396507587 14] 4.422493603492413]
Test Case: 117 | Input/Output: [[80.15577695445248 28] 108.15577695445248]
Test Case: 118 | Input/Output: [[13.119294006136045 44] 57.119294006136045]
Test Case: 119 | Input/Output: [[7.603454617254187 -10] -2.3965453827458134]
Test Case: 120 | Input/Output: [[-0.5312871121976741 -18] -18.531287112197674]
Test Case: 121 | Input/Output: [[-93.00278659121555 14] -79.00278659121555]
Test Case: 122 | Input/Output: [[18.55103887577647 -36] -17.44896112422353]
Test Case: 123 | Input/Output: [[-50.89885775120149 -96] -146.8988577512015]
Test Case: 124 | Input/Output: [[-13.44070094487219 87] 73.55929905512781]
Test Case: 125 | Input/Output: [[52.69055032274056 81] 133.69055032274056]
Test Case: 126 | Input/Output: [[-45.11822482112908 42] -3.1182248211290826]
Test Case: 127 | Input/Output: [[-40.12787460222109 -53] -93.12787460222108]
Test Case: 128 | Input/Output: [[45.425577973284504 65] 110.4255779732845]
Test Case: 129 | Input/Output: [[76.10972033383186 15] 91.10972033383186]
Test Case: 130 | Input/Output: [[29.9721283063611 -46] -16.0278716936389]
Test Case: 131 | Input/Output: [[42.992559328292344 -3] 39.992559328292344]
Test Case: 132 | Input/Output: [[12.144910120454796 6] 18.144910120454796]
Test Case: 133 | Input/Output: [[-64.79617947468823 -67] -131.79617947468824]
Test Case: 134 | Input/Output: [[-16.961407082445874 91] 74.03859291755413]
Test Case: 135 | Input/Output: [[-73.02201011544507 -4] -77.02201011544507]
Test Case: 136 | Input/Output: [[-21.57393351487427 -78] -99.57393351487427]
Test Case: 137 | Input/Output: [[-77.87016956319195 86] 8.12983043680805]
Test Case: 138 | Input/Output: [[-47.46964172489832 -19] -66.46964172489831]
Test Case: 139 | Input/Output: [[80.63891324577034 -77] 3.6389132457703397]
Test Case: 140 | Input/Output: [[58.699781376441535 96] 154.69978137644154]
Test Case: 141 | Input/Output: [[-56.88261328485824 89] 32.11738671514176]
Test Case: 142 | Input/Output: [[63.40018539118202 -2] 61.40018539118202]
Test Case: 143 | Input/Output: [[-30.660426892055767 -26] -56.66042689205577]
Test Case: 144 | Input/Output: [[65.19549434348818 -76] -10.804505656511822]
Test Case: 145 | Input/Output: [[22.69435259946158 19] 41.69435259946158]
Test Case: 146 | Input/Output: [[-12.349521969715482 43] 30.650478030284518]
Test Case: 147 | Input/Output: [[-6.333043929600663 37] 30.666956070399337]
Test Case: 148 | Input/Output: [[93.76785545517731 -38] 55.76785545517731]
Test Case: 149 | Input/Output: [[47.61610639929458 -57] -9.38389360070542]
Test Case: 150 | Input/Output: [[30.053995461698634 95] 125.05399546169863]
Test Case: 151 | Input/Output: [[25.4522331311408 -81] -55.5477668688592]
Test Case: 152 | Input/Output: [[91.62158422697098 82] 173.62158422697098]
Test Case: 153 | Input/Output: [[-82.0637345728703 -13] -95.0637345728703]
Test Case: 154 | Input/Output: [[18.93973413210297 -2] 16.93973413210297]
Test Case: 155 | Input/Output: [[-26.923175295479894 31] 4.0768247045201065]
Test Case: 156 | Input/Output: [[89.54647371371553 63] 152.54647371371553]
Test Case: 157 | Input/Output: [[95.51735480434206 -84] 11.517354804342062]
Test Case: 158 | Input/Output: [[5.227126204796107 -3] 2.2271262047961073]
Test Case: 159 | Input/Output: [[-63.75906582954363 -90] -153.75906582954363]
Test Case: 160 | Input/Output: [[33.68393548174359 87] 120.68393548174359]
Test Case: 161 | Input/Output: [[98.95912852725226 93] 191.95912852725226]
Test Case: 162 | Input/Output: [[99.72631838574196 72] 171.72631838574196]
Test Case: 163 | Input/Output: [[-75.17793948036831 -64] -139.1779394803683]
Test Case: 164 | Input/Output: [[-48.464986447009515 -94] -142.46498644700952]
Test Case: 165 | Input/Output: [[53.34195831579984 -80] -26.658041684200157]
Test Case: 166 | Input/Output: [[-96.91809031657237 -49] -145.91809031657237]
Test Case: 167 | Input/Output: [[32.728195362378045 19] 51.728195362378045]
Test Case: 168 | Input/Output: [[19.4249289220936 -32] -12.5750710779064]
Test Case: 169 | Input/Output: [[-70.39581603681742 96] 25.604183963182578]
Test Case: 170 | Input/Output: [[-63.51636727751626 27] -36.51636727751626]
Test Case: 171 | Input/Output: [[45.47258851525217 64] 109.47258851525217]
Test Case: 172 | Input/Output: [[-94.68664050627551 -2] -96.68664050627551]
Test Case: 173 | Input/Output: [[-76.42776763485008 91] 14.572232365149915]
Test Case: 174 | Input/Output: [[-93.79176491426111 33] -60.79176491426111]
Test Case: 175 | Input/Output: [[-70.15872236652432 -95] -165.15872236652433]
Test Case: 176 | Input/Output: [[15.162659441111217 20] 35.16265944111122]
Test Case: 177 | Input/Output: [[66.6950887828738 -41] 25.695088782873796]
Test Case: 178 | Input/Output: [[-75.28000438531934 20] -55.280004385319344]
Test Case: 179 | Input/Output: [[0.26198103679790563 82] 82.2619810367979]
Test Case: 180 | Input/Output: [[-2.6491294774742187 17] 14.350870522525781]
Test Case: 181 | Input/Output: [[-57.94840027784236 70] 12.05159972215764]
Test Case: 182 | Input/Output: [[95.93876184743911 62] 157.9387618474391]
Test Case: 183 | Input/Output: [[-4.6719723509530695 -15] -19.67197235095307]
Test Case: 184 | Input/Output: [[-39.055184404591905 -36] -75.0551844045919]
Test Case: 185 | Input/Output: [[59.22956167404132 -48] 11.22956167404132]
Test Case: 186 | Input/Output: [[23.365586363364386 -57] -33.634413636635614]
Test Case: 187 | Input/Output: [[38.90160514029455 -44] -5.098394859705451]
Test Case: 188 | Input/Output: [[-80.61515333792536 46] -34.61515333792536]
Test Case: 189 | Input/Output: [[-58.925262416651435 -55] -113.92526241665144]
Test Case: 190 | Input/Output: [[22.734757148450882 39] 61.73475714845088]
Test Case: 191 | Input/Output: [[79.46554986589564 75] 154.46554986589564]
Test Case: 192 | Input/Output: [[-82.44656618407652 -20] -102.44656618407652]
Test Case: 193 | Input/Output: [[14.380314477406174 -57] -42.61968552259383]
Test Case: 194 | Input/Output: [[55.03982353526479 -87] -31.960176464735213]
Test Case: 195 | Input/Output: [[67.13711886491078 93] 160.13711886491078]
Test Case: 196 | Input/Output: [[13.395726651642391 32] 45.39572665164239]
Test Case: 197 | Input/Output: [[-63.82513425911371 -44] -107.82513425911371]
Test Case: 198 | Input/Output: [[-90.79845875406963 -10] -100.79845875406963]
Test Case: 199 | Input/Output: [[73.90712467185759 -49] 24.907124671857588]
Test Case: 200 | Input/Output: [[22.781667081217492 59] 81.78166708121749]
Test Case: 201 | Input/Output: [[59.90134512425854 95] 154.90134512425854]
Test Case: 202 | Input/Output: [[-45.05462011917698 -1] -46.05462011917698]
Test Case: 203 | Input/Output: [[-71.11359183912857 -63] -134.11359183912856]
Test Case: 204 | Input/Output: [[-46.9092695804398 30] -16.909269580439798]
Test Case: 205 | Input/Output: [[66.56726994061361 -31] 35.56726994061361]
Test Case: 206 | Input/Output: [[-70.35691183322163 -13] -83.35691183322163]
Test Case: 207 | Input/Output: [[-76.93653137470145 -35] -111.93653137470145]
Test Case: 208 | Input/Output: [[-69.10487216390229 -76] -145.1048721639023]
Test Case: 209 | Input/Output: [[82.1341217033322 72] 154.1341217033322]
Test Case: 210 | Input/Output: [[-36.5296729509869 -90] -126.5296729509869]
Test Case: 211 | Input/Output: [[1.3630691285503787 -79] -77.63693087144962]
Test Case: 212 | Input/Output: [[-13.322898425208791 71] 57.67710157479121]
Test Case: 213 | Input/Output: [[-49.4058742271634 -20] -69.4058742271634]
Test Case: 214 | Input/Output: [[81.38319367424415 50] 131.38319367424415]
Test Case: 215 | Input/Output: [[-24.10027380317797 -61] -85.10027380317797]
Test Case: 216 | Input/Output: [[63.41053311651001 96] 159.41053311651]
Test Case: 217 | Input/Output: [[-23.82490588721234 -28] -51.82490588721234]
Test Case: 218 | Input/Output: [[15.150438644364513 89] 104.15043864436451]
Test Case: 219 | Input/Output: [[10.245005079043182 -7] 3.2450050790431817]
Test Case: 220 | Input/Output: [[29.18264758977969 62] 91.18264758977969]
Test Case: 221 | Input/Output: [[89.63523407598763 79] 168.63523407598763]
Test Case: 222 | Input/Output: [[42.05888766927126 -89] -46.94111233072874]
Test Case: 223 | Input/Output: [[54.657950422011254 24] 78.65795042201125]
Test Case: 224 | Input/Output: [[55.774688052062515 37] 92.77468805206252]
Test Case: 225 | Input/Output: [[-67.68103478268401 46] -21.68103478268401]
Test Case: 226 | Input/Output: [[-20.79025898308224 99] 78.20974101691776]
Test Case: 227 | Input/Output: [[66.54211991085248 -16] 50.54211991085248]
Test Case: 228 | Input/Output: [[-23.481372689094158 77] 53.51862731090584]
Test Case: 229 | Input/Output: [[-82.45036791127802 -46] -128.45036791127802]
Test Case: 230 | Input/Output: [[25.07032372130456 -37] -11.929676278695439]
Test Case: 231 | Input/Output: [[-77.73881130503341 -94] -171.7388113050334]
Test Case: 232 | Input/Output: [[20.78143598099072 8] 28.78143598099072]
Test Case: 233 | Input/Output: [[52.996876352954956 -50] 2.9968763529549562]
Test Case: 234 | Input/Output: [[81.80081918553222 -80] 1.8008191855322195]
Test Case: 235 | Input/Output: [[-88.95781399648988 -3] -91.95781399648988]
Test Case: 236 | Input/Output: [[-86.81528032958326 -55] -141.81528032958326]
Test Case: 237 | Input/Output: [[-18.74609281092701 -75] -93.74609281092701]
Test Case: 238 | Input/Output: [[-70.4973463134558 -71] -141.4973463134558]
Test Case: 239 | Input/Output: [[26.768420894677007 77] 103.768420894677]
Test Case: 240 | Input/Output: [[24.810578819484235 99] 123.81057881948423]
Test Case: 241 | Input/Output: [[-58.26015247950447 -37] -95.26015247950447]
Test Case: 242 | Input/Output: [[30.72065015847616 71] 101.72065015847616]
Test Case: 243 | Input/Output: [[-62.83984725419409 82] 19.16015274580591]
Test Case: 244 | Input/Output: [[-55.54316805564299 47] -8.543168055642987]
Test Case: 245 | Input/Output: [[42.175678155500265 18] 60.175678155500265]
Test Case: 246 | Input/Output: [[81.34101006272832 -69] 12.341010062728316]
Test Case: 247 | Input/Output: [[-19.317401938818406 59] 39.682598061181594]
Test Case: 248 | Input/Output: [[63.27778644816959 74] 137.2777864481696]
Test Case: 249 | Input/Output: [[43.34953648190756 40] 83.34953648190756]
Test Case: 250 | Input/Output: [[-61.1029256668501 80] 18.897074333149902]
Test Case: 251 | Input/Output: [[82.79386359214988 -40] 42.793863592149876]
Test Case: 252 | Input/Output: [[65.39262778605121 24] 89.39262778605121]
Test Case: 253 | Input/Output: [[96.92779796801327 -48] 48.927797968013266]
Test Case: 254 | Input/Output: [[11.355357489877306 -12] -0.6446425101226936]
Test Case: 255 | Input/Output: [[-39.613715997293355 84] 44.386284002706645]
Test Case: 256 | Input/Output: [[61.32798473938789 -87] -25.672015260612113]
Test Case: 257 | Input/Output: [[-31.109158462000195 -68] -99.1091584620002]
Test Case: 258 | Input/Output: [[-82.64125981417902 13] -69.64125981417902]
Test Case: 259 | Input/Output: [[36.771635542052366 -65] -28.228364457947634]
Test Case: 260 | Input/Output: [[63.681374548502475 98] 161.68137454850248]
Test Case: 261 | Input/Output: [[14.736213649948766 73] 87.73621364994877]
Test Case: 262 | Input/Output: [[66.45289863931973 -6] 60.45289863931973]
Test Case: 263 | Input/Output: [[91.27678071571884 -84] 7.276780715718843]
Test Case: 264 | Input/Output: [[-57.61489518985745 -65] -122.61489518985745]
Test Case: 265 | Input/Output: [[-44.616208806922565 -95] -139.61620880692257]
Test Case: 266 | Input/Output: [[68.10200891761056 -20] 48.10200891761056]
Test Case: 267 | Input/Output: [[-87.21910802769672 -16] -103.21910802769672]
Test Case: 268 | Input/Output: [[-61.4913687549874 -88] -149.4913687549874]
Test Case: 269 | Input/Output: [[-24.067488601699694 -62] -86.0674886016997]
Test Case: 270 | Input/Output: [[-76.5407106465712 -95] -171.5407106465712]
Test Case: 271 | Input/Output: [[27.23156862607017 -52] -24.76843137392983]
Test Case: 272 | Input/Output: [[-6.147333963889579 26] 19.85266603611042]
Test Case: 273 | Input/Output: [[69.90090523208559 15] 84.90090523208559]
Test Case: 274 | Input/Output: [[79.35226959700861 -57] 22.352269597008615]
Test Case: 275 | Input/Output: [[15.016322379689157 -86] -70.98367762031084]
Test Case: 276 | Input/Output: [[-86.12582753252747 -84] -170.12582753252747]
Test Case: 277 | Input/Output: [[5.346032689700067 77] 82.34603268970007]
Test Case: 278 | Input/Output: [[7.3071139325215455 70] 77.30711393252155]
Test Case: 279 | Input/Output: [[-23.208733452291867 -5] -28.208733452291867]
Test Case: 280 | Input/Output: [[-38.12794420588157 -88] -126.12794420588156]
Test Case: 281 | Input/Output: [[-12.046482832033135 -43] -55.046482832033135]
Test Case: 282 | Input/Output: [[-82.29449363813875 -82] -164.29449363813876]
Test Case: 283 | Input/Output: [[-51.87275772610873 -67] -118.87275772610873]
Test Case: 284 | Input/Output: [[-80.98625050690615 51] -29.986250506906146]
Test Case: 285 | Input/Output: [[14.558375646634829 21] 35.55837564663483]
Test Case: 286 | Input/Output: [[-1.4058580989933205 -35] -36.40585809899332]
Test Case: 287 | Input/Output: [[-46.74390050960262 -79] -125.74390050960261]
Test Case: 288 | Input/Output: [[-20.856747626836864 43] 22.143252373163136]
Test Case: 289 | Input/Output: [[82.88460098960357 -7] 75.88460098960357]
Test Case: 290 | Input/Output: [[-32.02306971009344 32] -0.023069710093437834]
Test Case: 291 | Input/Output: [[-42.50142145027094 36] -6.501421450270939]
Test Case: 292 | Input/Output: [[-71.96687577886827 -27] -98.96687577886827]
Test Case: 293 | Input/Output: [[-2.579455815487435 73] 70.42054418451256]
Test Case: 294 | Input/Output: [[-97.00218815848096 -53] -150.00218815848098]
Test Case: 295 | Input/Output: [[-94.52291515554107 67] -27.52291515554107]
Test Case: 296 | Input/Output: [[99.7831612338328 39] 138.7831612338328]
Test Case: 297 | Input/Output: [[-47.503905310948056 0] -47.503905310948056]
Test Case: 298 | Input/Output: [[6.374089247441901 70] 76.3740892474419]
Test Case: 299 | Input/Output: [[-58.34118045311789 52] -6.341180453117893]
Test Case: 300 | Input/Output: [[-31.579757510482523 55] 23.420242489517477]
Test Case: 301 | Input/Output: [[-3.694665631703444 -64] -67.69466563170344]
Test Case: 302 | Input/Output: [[-58.8914356390702 55] -3.8914356390702025]
Test Case: 303 | Input/Output: [[23.850605108245375 51] 74.85060510824538]
Test Case: 304 | Input/Output: [[-50.90188176150961 23] -27.901881761509607]
Test Case: 305 | Input/Output: [[88.03415857882732 -55] 33.034158578827316]
Test Case: 306 | Input/Output: [[-65.15651655218018 -57] -122.15651655218018]
Test Case: 307 | Input/Output: [[99.56190838274759 -65] 34.56190838274759]
Test Case: 308 | Input/Output: [[70.19895677104614 7] 77.19895677104614]
Test Case: 309 | Input/Output: [[-88.61833810371633 -2] -90.61833810371633]
Test Case: 310 | Input/Output: [[-40.13375232752647 -98] -138.13375232752648]
Test Case: 311 | Input/Output: [[-59.697272478380455 13] -46.697272478380455]
Test Case: 312 | Input/Output: [[48.53328257879167 -24] 24.53328257879167]
Test Case: 313 | Input/Output: [[40.730273723413035 -32] 8.730273723413035]
Test Case: 314 | Input/Output: [[9.48101265860825 61] 70.48101265860825]
Test Case: 315 | Input/Output: [[-14.345568502546755 33] 18.654431497453245]
Test Case: 316 | Input/Output: [[-16.746083069049917 -1] -17.746083069049917]
Test Case: 317 | Input/Output: [[-54.07567198956818 68] 13.924328010431822]
Test Case: 318 | Input/Output: [[-30.082600866403936 -58] -88.08260086640394]
Test Case: 319 | Input/Output: [[-77.80019922863868 -64] -141.8001992286387]
Test Case: 320 | Input/Output: [[-65.98266571645794 30] -35.982665716457944]
Test Case: 321 | Input/Output: [[-23.47477672259484 -1] -24.47477672259484]
Test Case: 322 | Input/Output: [[8.56683648128444 93] 101.56683648128444]
Test Case: 323 | Input/Output: [[-26.76867044080315 30] 3.231329559196851]
Test Case: 324 | Input/Output: [[-37.17612668808459 76] 38.82387331191541]
Test Case: 325 | Input/Output: [[7.240806839195329 -42] -34.75919316080467]
Test Case: 326 | Input/Output: [[-25.79369905992948 54] 28.20630094007052]
Test Case: 327 | Input/Output: [[-18.799931156187682 53] 34.20006884381232]
Test Case: 328 | Input/Output: [[-38.90401268974881 97] 58.09598731025119]
Test Case: 329 | Input/Output: [[-6.2066159230762565 20] 13.793384076923743]
Test Case: 330 | Input/Output: [[21.638323052480544 -72] -50.361676947519456]
Test Case: 331 | Input/Output: [[-17.111536750887097 -14] -31.111536750887097]
Test Case: 332 | Input/Output: [[-26.75995795211344 18] -8.759957952113439]
Test Case: 333 | Input/Output: [[3.2041639083768274 89] 92.20416390837683]
Test Case: 334 | Input/Output: [[29.652392090804966 51] 80.65239209080497]
Test Case: 335 | Input/Output: [[5.273060915127445 9] 14.273060915127445]
Test Case: 336 | Input/Output: [[-34.38397520191265 -25] -59.38397520191265]
Test Case: 337 | Input/Output: [[56.80894187311637 -37] 19.808941873116368]
Test Case: 338 | Input/Output: [[-67.87106757623951 38] -29.87106757623951]
Test Case: 339 | Input/Output: [[-0.32276773345228094 31] 30.67723226654772]
Test Case: 340 | Input/Output: [[-86.64642131214875 -83] -169.64642131214873]
Test Case: 341 | Input/Output: [[69.51210060142299 50] 119.51210060142299]
Test Case: 342 | Input/Output: [[80.5973215022143 -70] 10.5973215022143]
Test Case: 343 | Input/Output: [[-61.55612373026005 86] 24.443876269739953]
Test Case: 344 | Input/Output: [[-41.73374028533689 -62] -103.73374028533689]
Test Case: 345 | Input/Output: [[-7.586946285913257 2] -5.586946285913257]
Test Case: 346 | Input/Output: [[58.271258465557366 97] 155.27125846555737]
Test Case: 347 | Input/Output: [[79.12568646506924 -77] 2.1256864650692364]
Test Case: 348 | Input/Output: [[-56.02161515148501 45] -11.021615151485008]
Test Case: 349 | Input/Output: [[-35.72943188993678 -71] -106.72943188993678]
Test Case: 350 | Input/Output: [[65.76900586145254 -97] -31.23099413854746]
Test Case: 351 | Input/Output: [[19.235728528039743 42] 61.23572852803974]
Test Case: 352 | Input/Output: [[-87.43761698747711 66] -21.437616987477114]
Test Case: 353 | Input/Output: [[96.65620875776088 -43] 53.65620875776088]
Test Case: 354 | Input/Output: [[-0.470868559667025 -26] -26.470868559667025]
Test Case: 355 | Input/Output: [[-51.592313987666685 -93] -144.59231398766667]
Test Case: 356 | Input/Output: [[-45.59161746108609 -38] -83.59161746108609]
Test Case: 357 | Input/Output: [[70.30169895255935 72] 142.30169895255935]
Test Case: 358 | Input/Output: [[68.74541332005623 -94] -25.25458667994377]
Test Case: 359 | Input/Output: [[29.507827469369857 49] 78.50782746936986]
Test Case: 360 | Input/Output: [[-91.57572678601494 -92] -183.57572678601494]
Test Case: 361 | Input/Output: [[-42.81357305153093 31] -11.81357305153093]
Test Case: 362 | Input/Output: [[-73.43098821622837 -84] -157.43098821622837]
Test Case: 363 | Input/Output: [[55.08751391359752 38] 93.08751391359752]
Test Case: 364 | Input/Output: [[-2.627730217838021 -46] -48.62773021783802]
Test Case: 365 | Input/Output: [[96.66149384070428 4] 100.66149384070428]
Test Case: 366 | Input/Output: [[-71.74398169810878 21] -50.74398169810878]
Test Case: 367 | Input/Output: [[-22.469395621507715 -25] -47.469395621507715]
Test Case: 368 | Input/Output: [[-69.76975978266948 -49] -118.76975978266948]
Test Case: 369 | Input/Output: [[93.73753830259304 -9] 84.73753830259304]
Test Case: 370 | Input/Output: [[-37.18015087768687 -28] -65.18015087768687]
Test Case: 371 | Input/Output: [[84.22202156322905 -72] 12.222021563229049]
Test Case: 372 | Input/Output: [[-52.61104446034128 -37] -89.61104446034128]
Test Case: 373 | Input/Output: [[25.150701975066852 33] 58.15070197506685]
Test Case: 374 | Input/Output: [[75.03325644018693 -41] 34.03325644018693]
Test Case: 375 | Input/Output: [[-9.24668477631569 -82] -91.24668477631569]
Test Case: 376 | Input/Output: [[73.84268275992198 -37] 36.842682759921985]
Test Case: 377 | Input/Output: [[-88.24306366482932 -97] -185.24306366482932]
Test Case: 378 | Input/Output: [[-34.46427938585212 14] -20.464279385852123]
Test Case: 379 | Input/Output: [[-24.40712370486186 -65] -89.40712370486186]
Test Case: 380 | Input/Output: [[-75.442210783441 73] -2.4422107834409985]
Test Case: 381 | Input/Output: [[41.82528043978411 -69] -27.17471956021589]
Test Case: 382 | Input/Output: [[-99.2618268025195 -47] -146.2618268025195]
Test Case: 383 | Input/Output: [[16.345610859211092 0] 16.345610859211092]
Test Case: 384 | Input/Output: [[-59.181253494983444 84] 24.818746505016556]
Test Case: 385 | Input/Output: [[-15.173937090947561 56] 40.82606290905244]
Test Case: 386 | Input/Output: [[45.99545635807712 -86] -40.00454364192288]
Test Case: 387 | Input/Output: [[-85.96002279515507 0] -85.96002279515507]
Test Case: 388 | Input/Output: [[-48.29836652902368 -43] -91.29836652902368]
Test Case: 389 | Input/Output: [[-56.48850974691588 -32] -88.48850974691588]
Test Case: 390 | Input/Output: [[-97.8757589951479 20] -77.8757589951479]
Test Case: 391 | Input/Output: [[79.6815904041967 -13] 66.6815904041967]
Test Case: 392 | Input/Output: [[-12.279965278237981 -5] -17.27996527823798]
Test Case: 393 | Input/Output: [[-13.333604052426608 -21] -34.33360405242661]
Test Case: 394 | Input/Output: [[-16.534321340852088 -76] -92.53432134085209]
Test Case: 395 | Input/Output: [[-1.467491410982035 -93] -94.46749141098203]
Test Case: 396 | Input/Output: [[19.184734886959347 -98] -78.81526511304065]
Test Case: 397 | Input/Output: [[84.30428949112041 -65] 19.304289491120414]
Test Case: 398 | Input/Output: [[-67.89075741273484 -3] -70.89075741273484]
Test Case: 399 | Input/Output: [[-4.931792160443678 -99] -103.93179216044368]
Test Case: 400 | Input/Output: [[-12.791823280368675 16] 3.208176719631325]
Test Case: 401 | Input/Output: [[-94.22298482247594 -40] -134.22298482247595]
Test Case: 402 | Input/Output: [[36.49859490672861 -1] 35.49859490672861]
Test Case: 403 | Input/Output: [[-0.5414452975863497 -95] -95.54144529758635]
Test Case: 404 | Input/Output: [[46.34490367257757 15] 61.34490367257757]
Test Case: 405 | Input/Output: [[-34.062980614962626 -4] -38.062980614962626]
Test Case: 406 | Input/Output: [[87.65499887051135 -67] 20.65499887051135]
Test Case: 407 | Input/Output: [[-74.51645260243166 -26] -100.51645260243166]
Test Case: 408 | Input/Output: [[67.46611134583628 -14] 53.46611134583628]
Test Case: 409 | Input/Output: [[42.27566754412342 -4] 38.27566754412342]
Test Case: 410 | Input/Output: [[-12.75301298852915 5] -7.75301298852915]
Test Case: 411 | Input/Output: [[-75.19705610520455 97] 21.802943894795447]
Test Case: 412 | Input/Output: [[76.36338515930768 -3] 73.36338515930768]
Test Case: 413 | Input/Output: [[-35.18214931703744 -26] -61.18214931703744]
Test Case: 414 | Input/Output: [[68.22313733738378 -33] 35.223137337383776]
Test Case: 415 | Input/Output: [[99.82385502824565 32] 131.82385502824565]
Test Case: 416 | Input/Output: [[-29.029703214963504 -55] -84.0297032149635]
Test Case: 417 | Input/Output: [[-28.855590078400084 46] 17.144409921599916]
Test Case: 418 | Input/Output: [[-3.9358977486575526 -36] -39.93589774865755]
Test Case: 419 | Input/Output: [[-79.13462817165629 18] -61.13462817165629]
Test Case: 420 | Input/Output: [[-80.78569690407599 -63] -143.785696904076]
Test Case: 421 | Input/Output: [[-92.57718927444793 43] -49.57718927444793]
Test Case: 422 | Input/Output: [[87.34475631257811 -11] 76.34475631257811]
Test Case: 423 | Input/Output: [[69.76773730933968 61] 130.76773730933968]
Test Case: 424 | Input/Output: [[51.48232683604863 -88] -36.51767316395137]
Test Case: 425 | Input/Output: [[-60.39237037221048 -55] -115.39237037221048]
Test Case: 426 | Input/Output: [[-50.79487237557721 -5] -55.79487237557721]
Test Case: 427 | Input/Output: [[-14.33481502824145 -55] -69.33481502824145]
Test Case: 428 | Input/Output: [[-7.122366566928221 21] 13.877633433071779]
Test Case: 429 | Input/Output: [[-60.905885295259885 -2] -62.905885295259885]
Test Case: 430 | Input/Output: [[-63.67068886484881 -2] -65.67068886484881]
Test Case: 431 | Input/Output: [[56.64225548543115 79] 135.64225548543115]
Test Case: 432 | Input/Output: [[47.5128357085174 -95] -47.4871642914826]
Test Case: 433 | Input/Output: [[71.1828142310172 -100] -28.817185768982796]
Test Case: 434 | Input/Output: [[11.36568820038157 85] 96.36568820038157]
Test Case: 435 | Input/Output: [[82.82972727665825 -54] 28.829727276658247]
Test Case: 436 | Input/Output: [[-14.672760448307471 68] 53.32723955169253]
Test Case: 437 | Input/Output: [[-86.06883814942077 -47] -133.06883814942077]
Test Case: 438 | Input/Output: [[-81.44106455293576 -85] -166.44106455293576]
Test Case: 439 | Input/Output: [[59.67605645264774 -37] 22.676056452647742]
Test Case: 440 | Input/Output: [[-95.86279982296449 66] -29.86279982296449]
Test Case: 441 | Input/Output: [[18.785005319975085 26] 44.785005319975085]
Test Case: 442 | Input/Output: [[-60.48447850926743 45] -15.484478509267433]
Test Case: 443 | Input/Output: [[29.25411614477565 -64] -34.74588385522435]
Test Case: 444 | Input/Output: [[-30.32224387988998 42] 11.677756120110018]
Test Case: 445 | Input/Output: [[-25.699068295733653 -93] -118.69906829573365]
Test Case: 446 | Input/Output: [[-13.154708748015494 -75] -88.1547087480155]
Test Case: 447 | Input/Output: [[44.76536872235147 -24] 20.765368722351468]
Test Case: 448 | Input/Output: [[10.13180342341029 -55] -44.86819657658971]
Test Case: 449 | Input/Output: [[-88.66664250537899 -73] -161.666642505379]
Test Case: 450 | Input/Output: [[-86.99067151486359 47] -39.99067151486359]
Test Case: 451 | Input/Output: [[69.47980604081133 92] 161.47980604081133]
Test Case: 452 | Input/Output: [[32.14142389186975 -7] 25.14142389186975]
Test Case: 453 | Input/Output: [[77.71282917108883 -9] 68.71282917108883]
Test Case: 454 | Input/Output: [[61.83156833039084 -13] 48.83156833039084]
Test Case: 455 | Input/Output: [[67.08638575683804 -39] 28.08638575683804]
Test Case: 456 | Input/Output: [[99.7244884517178 33] 132.7244884517178]
Test Case: 457 | Input/Output: [[-32.262866813417105 73] 40.737133186582895]
Test Case: 458 | Input/Output: [[-39.71675591287755 -28] -67.71675591287755]
Test Case: 459 | Input/Output: [[52.967417229453275 -69] -16.032582770546725]
Test Case: 460 | Input/Output: [[76.70400487963713 -59] 17.704004879637125]
Test Case: 461 | Input/Output: [[98.53147101482975 12] 110.53147101482975]
Test Case: 462 | Input/Output: [[98.89178749857848 -77] 21.89178749857848]
Test Case: 463 | Input/Output: [[78.11556936141042 -35] 43.11556936141042]
Test Case: 464 | Input/Output: [[72.37043098212092 84] 156.37043098212092]
Test Case: 465 | Input/Output: [[69.20422948936454 -61] 8.204229489364536]
Test Case: 466 | Input/Output: [[62.919828116736 -1] 61.919828116736]
Test Case: 467 | Input/Output: [[-46.412732280742475 -82] -128.4127322807425]
Test Case: 468 | Input/Output: [[60.148361679187815 18] 78.14836167918781]
Test Case: 469 | Input/Output: [[14.817695605198907 -57] -42.18230439480109]
Test Case: 470 | Input/Output: [[55.23108633774913 95] 150.23108633774913]
Test Case: 471 | Input/Output: [[-81.58460037818264 27] -54.58460037818264]
Test Case: 472 | Input/Output: [[92.62943543279044 -79] 13.629435432790444]
Test Case: 473 | Input/Output: [[-38.138267042382054 33] -5.138267042382054]
Test Case: 474 | Input/Output: [[95.1414651887215 -45] 50.1414651887215]
Test Case: 475 | Input/Output: [[-51.40165665254073 31] -20.40165665254073]
Test Case: 476 | Input/Output: [[36.11102197725691 50] 86.11102197725691]
Test Case: 477 | Input/Output: [[57.991093532405415 63] 120.99109353240542]
Test Case: 478 | Input/Output: [[-91.5551092622085 73] -18.555109262208504]
Test Case: 479 | Input/Output: [[-46.187768953856654 4] -42.187768953856654]
Test Case: 480 | Input/Output: [[-9.966074723582778 -41] -50.96607472358278]
Test Case: 481 | Input/Output: [[-53.627455598413356 10] -43.627455598413356]
Test Case: 482 | Input/Output: [[-33.809948137009044 -93] -126.80994813700904]
Test Case: 483 | Input/Output: [[-53.44394541955224 66] 12.556054580447757]
Test Case: 484 | Input/Output: [[-19.473959220300415 -80] -99.47395922030042]
Test Case: 485 | Input/Output: [[51.83630391528345 -60] -8.163696084716548]
Test Case: 486 | Input/Output: [[49.33285735943605 -79] -29.667142640563952]
Test Case: 487 | Input/Output: [[69.83865217424153 14] 83.83865217424153]
Test Case: 488 | Input/Output: [[-49.11130948922708 -14] -63.11130948922708]
Test Case: 489 | Input/Output: [[81.59343758486108 -69] 12.593437584861078]
Test Case: 490 | Input/Output: [[-68.7730356203943 -40] -108.7730356203943]
Test Case: 491 | Input/Output: [[74.2648919626269 11] 85.2648919626269]
Test Case: 492 | Input/Output: [[-91.42864961428529 83] -8.428649614285291]
Test Case: 493 | Input/Output: [[-94.60080416318976 29] -65.60080416318976]
Test Case: 494 | Input/Output: [[72.6196320239296 -46] 26.619632023929597]
Test Case: 495 | Input/Output: [[45.34647836601869 -97] -51.65352163398131]
Test Case: 496 | Input/Output: [[-8.942494916751983 -47] -55.94249491675198]
Test Case: 497 | Input/Output: [[-70.95183788131389 -92] -162.9518378813139]
Test Case: 498 | Input/Output: [[61.442982828363654 -47] 14.442982828363654]
Test Case: 499 | Input/Output: [[-51.75733311034889 -30] -81.7573331103489]
Test Case: 500 | Input/Output: [[76.28094461114677 -48] 28.280944611146765]
Test Case: 501 | Input/Output: [[-60.92385454145541 -49] -109.92385454145541]
Test Case: 502 | Input/Output: [[-1.165623746464405 88] 86.8343762535356]
Test Case: 503 | Input/Output: [[12.315444796686492 -37] -24.684555203313508]
Test Case: 504 | Input/Output: [[-92.1379105280468 -70] -162.1379105280468]
Test Case: 505 | Input/Output: [[34.73160685034381 7] 41.73160685034381]
Test Case: 506 | Input/Output: [[-42.53909973832548 -74] -116.53909973832549]
Test Case: 507 | Input/Output: [[-14.072138097423888 33] 18.92786190257611]
Test Case: 508 | Input/Output: [[8.830370537583619 23] 31.83037053758362]
Test Case: 509 | Input/Output: [[58.624856171826366 -92] -33.375143828173634]
Test Case: 510 | Input/Output: [[-8.183619181121145 -56] -64.18361918112114]
Test Case: 511 | Input/Output: [[-28.97569452876442 -23] -51.97569452876442]
Test Case: 512 | Input/Output: [[61.84718380210484 90] 151.84718380210484]
Test Case: 513 | Input/Output: [[-82.06776692238383 19] -63.067766922383825]
Test Case: 514 | Input/Output: [[18.351167702601217 8] 26.351167702601217]
Test Case: 515 | Input/Output: [[12.561500432043957 62] 74.56150043204396]
Test Case: 516 | Input/Output: [[33.18633051912616 7] 40.18633051912616]
Test Case: 517 | Input/Output: [[-96.48369395319595 65] -31.483693953195953]
Test Case: 518 | Input/Output: [[46.9355522725991 -100] -53.0644477274009]
Test Case: 519 | Input/Output: [[85.0517394694981 -37] 48.0517394694981]
Test Case: 520 | Input/Output: [[-82.37935564631114 50] -32.37935564631114]
Test Case: 521 | Input/Output: [[-97.9303426115387 86] -11.930342611538705]
Test Case: 522 | Input/Output: [[68.07176983739859 -28] 40.07176983739859]
Test Case: 523 | Input/Output: [[86.2855619474355 48] 134.2855619474355]
Test Case: 524 | Input/Output: [[54.47151278892116 -84] -29.52848721107884]
Test Case: 525 | Input/Output: [[-74.33779781502898 13] -61.33779781502898]
Test Case: 526 | Input/Output: [[0.4553374911410373 30] 30.455337491141037]
Test Case: 527 | Input/Output: [[8.991475014770359 14] 22.99147501477036]
Test Case: 528 | Input/Output: [[-7.689488989453935 35] 27.310511010546065]
Test Case: 529 | Input/Output: [[37.007826094650795 24] 61.007826094650795]
Test Case: 530 | Input/Output: [[54.1395156264615 -19] 35.1395156264615]
Test Case: 531 | Input/Output: [[22.778448444676087 37] 59.77844844467609]
Test Case: 532 | Input/Output: [[-52.15738223962132 -94] -146.1573822396213]
Test Case: 533 | Input/Output: [[-84.51117366703697 86] 1.4888263329630291]
Test Case: 534 | Input/Output: [[-30.994100749666956 44] 13.005899250333044]
Test Case: 535 | Input/Output: [[64.46258155373317 81] 145.46258155373317]
Test Case: 536 | Input/Output: [[-37.16435533467415 -21] -58.16435533467415]
Test Case: 537 | Input/Output: [[-44.761747795406535 90] 45.238252204593465]
Test Case: 538 | Input/Output: [[-5.246946133419243 24] 18.753053866580757]
Test Case: 539 | Input/Output: [[-50.54549224270728 59] 8.454507757292717]
Test Case: 540 | Input/Output: [[52.02855925468043 94] 146.02855925468043]
Test Case: 541 | Input/Output: [[-90.26115399356611 -3] -93.26115399356611]
Test Case: 542 | Input/Output: [[41.52636828068157 4] 45.52636828068157]
Test Case: 543 | Input/Output: [[18.973915151583583 -54] -35.02608484841642]
Test Case: 544 | Input/Output: [[-12.83071396676003 61] 48.16928603323997]
Test Case: 545 | Input/Output: [[51.339970731188544 -69] -17.660029268811456]
Test Case: 546 | Input/Output: [[20.744044124675852 95] 115.74404412467585]
Test Case: 547 | Input/Output: [[-72.69149285422678 -5] -77.69149285422678]
Test Case: 548 | Input/Output: [[-19.023572878051652 -70] -89.02357287805165]
Test Case: 549 | Input/Output: [[-55.01106296557718 26] -29.01106296557718]
Test Case: 550 | Input/Output: [[-4.655462636696669 3] -1.6554626366966687]
Test Case: 551 | Input/Output: [[-30.033962551698608 87] 56.96603744830139]
Test Case: 552 | Input/Output: [[25.687013168725542 -9] 16.687013168725542]
Test Case: 553 | Input/Output: [[74.79284204900421 16] 90.79284204900421]
Test Case: 554 | Input/Output: [[5.505833562194667 -96] -90.49416643780533]
Test Case: 555 | Input/Output: [[-19.89703802910651 -96] -115.89703802910651]
Test Case: 556 | Input/Output: [[22.559770926153703 -47] -24.440229073846297]
Test Case: 557 | Input/Output: [[5.492222239749282 -95] -89.50777776025072]
Test Case: 558 | Input/Output: [[17.092396360854693 82] 99.09239636085469]
Test Case: 559 | Input/Output: [[-58.066375168240626 19] -39.066375168240626]
Test Case: 560 | Input/Output: [[-19.160449440049604 -40] -59.160449440049604]
Test Case: 561 | Input/Output: [[90.15983050391054 45] 135.15983050391054]
Test Case: 562 | Input/Output: [[-28.931991547884834 -86] -114.93199154788483]
Test Case: 563 | Input/Output: [[-99.0500533138136 -12] -111.0500533138136]
Test Case: 564 | Input/Output: [[26.249836152132545 -71] -44.750163847867455]
Test Case: 565 | Input/Output: [[-24.465633723110926 -46] -70.46563372311093]
Test Case: 566 | Input/Output: [[60.504160504216884 -61] -0.49583949578311604]
Test Case: 567 | Input/Output: [[41.66612875974863 -35] 6.666128759748631]
Test Case: 568 | Input/Output: [[1.5261439556604586 88] 89.52614395566046]
Test Case: 569 | Input/Output: [[69.6916803643521 36] 105.6916803643521]
Test Case: 570 | Input/Output: [[-11.960059737400044 -85] -96.96005973740004]
Test Case: 571 | Input/Output: [[95.80192754622087 -98] -2.198072453779133]
Test Case: 572 | Input/Output: [[-83.48571594668272 -71] -154.48571594668272]
Test Case: 573 | Input/Output: [[-37.77071380790065 95] 57.22928619209935]
Test Case: 574 | Input/Output: [[-77.37326957274489 -33] -110.37326957274489]
Test Case: 575 | Input/Output: [[-15.860257361554787 46] 30.139742638445213]
Test Case: 576 | Input/Output: [[-27.174875506550976 42] 14.825124493449024]
Test Case: 577 | Input/Output: [[-44.21941773157643 -39] -83.21941773157643]
Test Case: 578 | Input/Output: [[25.05617049682965 -68] -42.94382950317035]
Test Case: 579 | Input/Output: [[-46.39105484716299 8] -38.39105484716299]
Test Case: 580 | Input/Output: [[5.57442522832055 54] 59.57442522832055]
Test Case: 581 | Input/Output: [[24.437379800891932 99] 123.43737980089193]
Test Case: 582 | Input/Output: [[-49.68731553302837 79] 29.312684466971632]
Test Case: 583 | Input/Output: [[43.95039106655997 94] 137.95039106655997]
Test Case: 584 | Input/Output: [[-51.679437148358964 -9] -60.679437148358964]
Test Case: 585 | Input/Output: [[-60.67645193527975 65] 4.323548064720249]
Test Case: 586 | Input/Output: [[-20.39604149125354 -17] -37.39604149125354]
Test Case: 587 | Input/Output: [[26.538220809053414 -96] -69.46177919094659]
Test Case: 588 | Input/Output: [[-75.3547372169334 40] -35.3547372169334]
Test Case: 589 | Input/Output: [[72.9443446677925 -7] 65.9443446677925]
Test Case: 590 | Input/Output: [[-45.74686057587836 84] 38.25313942412164]
Test Case: 591 | Input/Output: [[45.08789312084568 -20] 25.087893120845678]
Test Case: 592 | Input/Output: [[78.10352327082279 9] 87.10352327082279]
Test Case: 593 | Input/Output: [[-65.82195690389474 -84] -149.82195690389474]
Test Case: 594 | Input/Output: [[54.26868669835844 86] 140.26868669835844]
Test Case: 595 | Input/Output: [[-80.4564386141739 57] -23.456438614173905]
Test Case: 596 | Input/Output: [[73.77669768392781 -66] 7.776697683927807]
Test Case: 597 | Input/Output: [[57.91500014376956 -64] -6.084999856230439]
Test Case: 598 | Input/Output: [[40.969092357545975 -38] 2.969092357545975]
Test Case: 599 | Input/Output: [[-81.743597606732 84] 2.2564023932680044]
Test Case: 600 | Input/Output: [[18.778036429781025 39] 57.778036429781025]
Test Case: 601 | Input/Output: [[36.66916240710586 38] 74.66916240710586]
Test Case: 602 | Input/Output: [[96.03717505063653 -68] 28.037175050636534]
Test Case: 603 | Input/Output: [[-83.4995114077785 -65] -148.4995114077785]
Test Case: 604 | Input/Output: [[-59.034124007684326 -86] -145.03412400768434]
Test Case: 605 | Input/Output: [[-89.37320922357284 -68] -157.37320922357284]
Test Case: 606 | Input/Output: [[-33.11343526538168 -95] -128.11343526538167]
Test Case: 607 | Input/Output: [[-87.79906091948071 -3] -90.79906091948071]
Test Case: 608 | Input/Output: [[63.07478084632169 38] 101.07478084632169]
Test Case: 609 | Input/Output: [[73.64748051888358 -33] 40.64748051888358]
Test Case: 610 | Input/Output: [[-29.31991547633868 -40] -69.31991547633868]
Test Case: 611 | Input/Output: [[-22.353318276747785 -83] -105.35331827674779]
Test Case: 612 | Input/Output: [[67.1401796473559 3] 70.1401796473559]
Test Case: 613 | Input/Output: [[45.358749442396885 54] 99.35874944239688]
Test Case: 614 | Input/Output: [[-36.504485434104005 -44] -80.504485434104]
Test Case: 615 | Input/Output: [[-63.306535441171796 79] 15.693464558828204]
Test Case: 616 | Input/Output: [[-1.0930001132054485 -12] -13.093000113205449]
Test Case: 617 | Input/Output: [[35.996576159796774 -73] -37.003423840203226]
Test Case: 618 | Input/Output: [[-77.01479115152496 -75] -152.01479115152495]
Test Case: 619 | Input/Output: [[-94.42248069683113 30] -64.42248069683113]
Test Case: 620 | Input/Output: [[94.07882674126196 -55] 39.07882674126196]
Test Case: 621 | Input/Output: [[95.36936471167087 -58] 37.36936471167087]
Test Case: 622 | Input/Output: [[34.576969066548685 28] 62.576969066548685]
Test Case: 623 | Input/Output: [[26.312232667012637 -3] 23.312232667012637]
Test Case: 624 | Input/Output: [[-75.30526924786913 -82] -157.30526924786915]
Test Case: 625 | Input/Output: [[-81.9711512195415 -55] -136.9711512195415]
Test Case: 626 | Input/Output: [[-53.28871962033621 -45] -98.28871962033621]
Test Case: 627 | Input/Output: [[-46.77752793808425 2] -44.77752793808425]
Test Case: 628 | Input/Output: [[-29.040653210307 -81] -110.040653210307]
Test Case: 629 | Input/Output: [[70.51892181016149 18] 88.51892181016149]
Test Case: 630 | Input/Output: [[-91.81528842413648 68] -23.815288424136483]
Test Case: 631 | Input/Output: [[-83.06263636703454 -5] -88.06263636703454]
Test Case: 632 | Input/Output: [[-17.31924847365947 -50] -67.31924847365947]
Test Case: 633 | Input/Output: [[-10.839909770478457 20] 9.160090229521543]
Test Case: 634 | Input/Output: [[-45.64833976010991 27] -18.648339760109913]
Test Case: 635 | Input/Output: [[-72.02702566418839 89] 16.972974335811614]
Test Case: 636 | Input/Output: [[6.143851037335409 -99] -92.85614896266459]
Test Case: 637 | Input/Output: [[18.743543282774283 -67] -48.25645671722572]
Test Case: 638 | Input/Output: [[72.45457298273584 2] 74.45457298273584]
Test Case: 639 | Input/Output: [[49.37080112003122 74] 123.37080112003122]
Test Case: 640 | Input/Output: [[-23.84410938734223 -80] -103.84410938734223]
Test Case: 641 | Input/Output: [[8.657290969634587 0] 8.657290969634587]
Test Case: 642 | Input/Output: [[73.32492592565029 51] 124.32492592565029]
Test Case: 643 | Input/Output: [[-45.17901757823151 -50] -95.17901757823151]
Test Case: 644 | Input/Output: [[-30.71913908122326 11] -19.71913908122326]
Test Case: 645 | Input/Output: [[77.670202865374 -44] 33.670202865373994]
Test Case: 646 | Input/Output: [[-49.86767931434804 81] 31.132320685651962]
Test Case: 647 | Input/Output: [[36.269027845937956 -63] -26.730972154062044]
Test Case: 648 | Input/Output: [[-63.08087901317705 -72] -135.08087901317705]
Test Case: 649 | Input/Output: [[67.25248766381804 -50] 17.252487663818044]
Test Case: 650 | Input/Output: [[-73.75531536652728 25] -48.755315366527284]
Test Case: 651 | Input/Output: [[47.25119537554406 97] 144.25119537554406]
Test Case: 652 | Input/Output: [[-12.785816396226295 42] 29.214183603773705]
Test Case: 653 | Input/Output: [[-73.83590748050301 -25] -98.83590748050301]
Test Case: 654 | Input/Output: [[79.38887775098891 -89] -9.611122249011089]
Test Case: 655 | Input/Output: [[50.64262943123683 41] 91.64262943123683]
Test Case: 656 | Input/Output: [[65.9186970902588 -37] 28.918697090258803]
Test Case: 657 | Input/Output: [[-80.28660060602104 -56] -136.28660060602104]
Test Case: 658 | Input/Output: [[84.51802989915308 19] 103.51802989915308]
Test Case: 659 | Input/Output: [[19.243364738428397 -41] -21.756635261571603]
Test Case: 660 | Input/Output: [[-89.63421077475542 -29] -118.63421077475542]
Test Case: 661 | Input/Output: [[9.535615054715791 -8] 1.535615054715791]
Test Case: 662 | Input/Output: [[9.69347505527756 -48] -38.30652494472244]
Test Case: 663 | Input/Output: [[-66.55984515870041 -41] -107.55984515870041]
Test Case: 664 | Input/Output: [[75.60706274716438 11] 86.60706274716438]
Test Case: 665 | Input/Output: [[-76.70721639445853 62] -14.707216394458527]
Test Case: 666 | Input/Output: [[65.96711252025574 89] 154.96711252025574]
Test Case: 667 | Input/Output: [[-62.779688833576856 -62] -124.77968883357686]
Test Case: 668 | Input/Output: [[-66.09382734043203 -12] -78.09382734043203]
Test Case: 669 | Input/Output: [[7.82634462802217 15] 22.82634462802217]
Test Case: 670 | Input/Output: [[-34.38287129484432 -87] -121.38287129484432]
Test Case: 671 | Input/Output: [[-46.99580864744293 15] -31.995808647442928]
Test Case: 672 | Input/Output: [[8.11285496091297 20] 28.11285496091297]
Test Case: 673 | Input/Output: [[-46.3906034287656 -90] -136.3906034287656]
Test Case: 674 | Input/Output: [[48.29391913076165 -93] -44.70608086923835]
Test Case: 675 | Input/Output: [[18.39967765392238 -100] -81.60032234607762]
Test Case: 676 | Input/Output: [[43.61582568806895 -65] -21.384174311931048]
Test Case: 677 | Input/Output: [[45.45384111227668 82] 127.45384111227668]
Test Case: 678 | Input/Output: [[11.992766734851841 -63] -51.00723326514816]
Test Case: 679 | Input/Output: [[-22.01887293235872 62] 39.98112706764128]
Test Case: 680 | Input/Output: [[-80.49887617933717 -3] -83.49887617933717]
Test Case: 681 | Input/Output: [[98.35977723012178 68] 166.35977723012178]
Test Case: 682 | Input/Output: [[96.33281794642716 -4] 92.33281794642716]
Test Case: 683 | Input/Output: [[-30.794805821545964 -1] -31.794805821545964]
Test Case: 684 | Input/Output: [[-68.06067091500792 65] -3.0606709150079183]
Test Case: 685 | Input/Output: [[-20.262839592641797 -82] -102.2628395926418]
Test Case: 686 | Input/Output: [[-54.419312437352744 -99] -153.41931243735274]
Test Case: 687 | Input/Output: [[-3.5648941923760162 13] 9.435105807623984]
Test Case: 688 | Input/Output: [[4.457274179828346 -94] -89.54272582017165]
Test Case: 689 | Input/Output: [[-68.46743063818666 55] -13.467430638186656]
Test Case: 690 | Input/Output: [[81.50125747299165 -43] 38.501257472991654]
Test Case: 691 | Input/Output: [[-51.90288655088191 -22] -73.9028865508819]
Test Case: 692 | Input/Output: [[-81.47972046881715 -9] -90.47972046881715]
Test Case: 693 | Input/Output: [[-55.91791368833281 -6] -61.91791368833281]
Test Case: 694 | Input/Output: [[-38.92972970755479 14] -24.92972970755479]
Test Case: 695 | Input/Output: [[17.70664519958423 24] 41.70664519958423]
Test Case: 696 | Input/Output: [[-87.79003016095311 -21] -108.79003016095311]
Test Case: 697 | Input/Output: [[96.47808367457722 19] 115.47808367457722]
Test Case: 698 | Input/Output: [[-12.7496757658148 94] 81.2503242341852]
Test Case: 699 | Input/Output: [[35.68074253411356 81] 116.68074253411356]
Test Case: 700 | Input/Output: [[43.6563028637687 22] 65.6563028637687]
Test Case: 701 | Input/Output: [[82.04959966851342 16] 98.04959966851342]
Test Case: 702 | Input/Output: [[-78.69457636460399 91] 12.30542363539601]
Test Case: 703 | Input/Output: [[61.59211396503281 -86] -24.40788603496719]
Test Case: 704 | Input/Output: [[-22.952670241187235 52] 29.047329758812765]
Test Case: 705 | Input/Output: [[57.75850483413453 -89] -31.241495165865473]
Test Case: 706 | Input/Output: [[43.22736570331733 60] 103.22736570331733]
Test Case: 707 | Input/Output: [[-64.48698817198704 -55] -119.48698817198704]
Test Case: 708 | Input/Output: [[-63.959228352852435 -62] -125.95922835285243]
Test Case: 709 | Input/Output: [[45.841683573690915 65] 110.84168357369091]
Test Case: 710 | Input/Output: [[-68.14429148132797 -100] -168.14429148132797]
Test Case: 711 | Input/Output: [[27.98304561616503 -45] -17.01695438383497]
Test Case: 712 | Input/Output: [[75.65197872182688 -21] 54.65197872182688]
Test Case: 713 | Input/Output: [[-14.613176178519339 95] 80.38682382148066]
Test Case: 714 | Input/Output: [[40.367362437243315 -54] -13.632637562756685]
Test Case: 715 | Input/Output: [[70.47377201538083 98] 168.47377201538083]
Test Case: 716 | Input/Output: [[-7.537672440826441 83] 75.46232755917356]
Test Case: 717 | Input/Output: [[47.93124948029384 -50] -2.068750519706157]
Test Case: 718 | Input/Output: [[23.79941273668038 -72] -48.20058726331962]
Test Case: 719 | Input/Output: [[-49.857142997185576 -59] -108.85714299718558]
Test Case: 720 | Input/Output: [[-1.0758811377670412 -41] -42.07588113776704]
Test Case: 721 | Input/Output: [[-59.88055214897978 -64] -123.88055214897977]
Test Case: 722 | Input/Output: [[55.499228305540214 -10] 45.499228305540214]
Test Case: 723 | Input/Output: [[34.55625433370682 -51] -16.443745666293182]
Test Case: 724 | Input/Output: [[-68.70239332270343 62] -6.702393322703429]
Test Case: 725 | Input/Output: [[-7.992566859977018 -91] -98.99256685997702]
Test Case: 726 | Input/Output: [[21.42866172411155 5] 26.42866172411155]
Test Case: 727 | Input/Output: [[-3.5545256538124193 87] 83.44547434618758]
Test Case: 728 | Input/Output: [[-25.116670288921128 24] -1.116670288921128]
Test Case: 729 | Input/Output: [[-81.80040775153658 -34] -115.80040775153658]
Test Case: 730 | Input/Output: [[-73.86464959963142 -12] -85.86464959963142]
Test Case: 731 | Input/Output: [[-85.04335614037039 -11] -96.04335614037039]
Test Case: 732 | Input/Output: [[40.51523615135417 -73] -32.48476384864583]
Test Case: 733 | Input/Output: [[-67.009567074747 72] 4.990432925253003]
Test Case: 734 | Input/Output: [[-92.89062775780855 14] -78.89062775780855]
Test Case: 735 | Input/Output: [[87.44535695719799 -92] -4.554643042802013]
Test Case: 736 | Input/Output: [[-49.48550215886516 88] 38.51449784113484]
Test Case: 737 | Input/Output: [[13.846658781997249 -11] 2.846658781997249]
Test Case: 738 | Input/Output: [[87.63701952862894 19] 106.63701952862894]
Test Case: 739 | Input/Output: [[59.286871106050995 50] 109.286871106051]
Test Case: 740 | Input/Output: [[-12.076571026513136 -33] -45.076571026513136]
Test Case: 741 | Input/Output: [[98.65766585518412 66] 164.65766585518412]
Test Case: 742 | Input/Output: [[-80.48696288476322 99] 18.513037115236784]
Test Case: 743 | Input/Output: [[-89.23624691008642 -2] -91.23624691008642]
Test Case: 744 | Input/Output: [[-17.46132639656291 -37] -54.46132639656291]
Test Case: 745 | Input/Output: [[6.004157369831532 39] 45.00415736983153]
Test Case: 746 | Input/Output: [[24.79313837997364 -50] -25.20686162002636]
Test Case: 747 | Input/Output: [[51.75610089414505 25] 76.75610089414505]
Test Case: 748 | Input/Output: [[-6.098604179439036 3] -3.098604179439036]
Test Case: 749 | Input/Output: [[52.97586773691859 -21] 31.975867736918588]
Test Case: 750 | Input/Output: [[10.648759359802867 12] 22.648759359802867]
Test Case: 751 | Input/Output: [[25.205608269659535 -89] -63.794391730340465]
Test Case: 752 | Input/Output: [[-77.94159763281748 -54] -131.9415976328175]
Test Case: 753 | Input/Output: [[-31.515517595957718 -65] -96.51551759595772]
Test Case: 754 | Input/Output: [[5.925102479363261 -86] -80.07489752063674]
Test Case: 755 | Input/Output: [[7.404427505933043 86] 93.40442750593304]
Test Case: 756 | Input/Output: [[18.54717592014734 18] 36.54717592014734]
Test Case: 757 | Input/Output: [[7.291295313497798 18] 25.2912953134978]
Test Case: 758 | Input/Output: [[-3.1962800915816416 -18] -21.19628009158164]
Test Case: 759 | Input/Output: [[43.19681684156214 47] 90.19681684156214]
Test Case: 760 | Input/Output: [[-72.47490642530786 -60] -132.47490642530786]
Test Case: 761 | Input/Output: [[98.04490253498798 -26] 72.04490253498798]
Test Case: 762 | Input/Output: [[79.8723670198338 -29] 50.8723670198338]
Test Case: 763 | Input/Output: [[-81.01982446113773 68] -13.01982446113773]
Test Case: 764 | Input/Output: [[7.32257200685595 62] 69.32257200685595]
Test Case: 765 | Input/Output: [[-84.40102880474998 -66] -150.40102880474998]
Test Case: 766 | Input/Output: [[93.58591253990875 25] 118.58591253990875]
Test Case: 767 | Input/Output: [[-75.05767690598188 -28] -103.05767690598188]
Test Case: 768 | Input/Output: [[86.20034961036535 -76] 10.20034961036535]
Test Case: 769 | Input/Output: [[-85.82831607231356 71] -14.828316072313555]
Test Case: 770 | Input/Output: [[-42.92122594025665 -77] -119.92122594025665]
Test Case: 771 | Input/Output: [[63.57510951754023 -31] 32.57510951754023]
Test Case: 772 | Input/Output: [[64.05208723992203 -9] 55.05208723992203]
Test Case: 773 | Input/Output: [[47.79275742228597 50] 97.79275742228597]
Test Case: 774 | Input/Output: [[80.74706343068218 64] 144.74706343068218]
Test Case: 775 | Input/Output: [[-66.47640089637457 -86] -152.47640089637457]
Test Case: 776 | Input/Output: [[-25.943706222317118 90] 64.05629377768288]
Test Case: 777 | Input/Output: [[7.923194772242169 68] 75.92319477224217]
Test Case: 778 | Input/Output: [[59.94231407753199 76] 135.942314077532]
Test Case: 779 | Input/Output: [[-4.7987858456058206 93] 88.20121415439418]
Test Case: 780 | Input/Output: [[51.52482083313606 -13] 38.52482083313606]
Test Case: 781 | Input/Output: [[23.357733838778287 -30] -6.642266161221713]
Test Case: 782 | Input/Output: [[7.722959748767181 -1] 6.722959748767181]
Test Case: 783 | Input/Output: [[46.19064890798913 -87] -40.80935109201087]
Test Case: 784 | Input/Output: [[-94.0326446082497 91] -3.032644608249697]
Test Case: 785 | Input/Output: [[93.10613577498819 93] 186.1061357749882]
Test Case: 786 | Input/Output: [[-64.06550421694578 40] -24.065504216945783]
Test Case: 787 | Input/Output: [[-56.52479397934589 96] 39.47520602065411]
Test Case: 788 | Input/Output: [[97.613020563888 85] 182.613020563888]
Test Case: 789 | Input/Output: [[51.24369461131474 32] 83.24369461131474]
Test Case: 790 | Input/Output: [[-56.96997994710485 -24] -80.96997994710485]
Test Case: 791 | Input/Output: [[-45.9688924279515 63] 17.031107572048498]
Test Case: 792 | Input/Output: [[25.978072178380557 52] 77.97807217838056]
Test Case: 793 | Input/Output: [[-25.66384072112635 -68] -93.66384072112635]
Test Case: 794 | Input/Output: [[-24.078182535388777 41] 16.921817464611223]
Test Case: 795 | Input/Output: [[-81.59412104315984 73] -8.594121043159845]
Test Case: 796 | Input/Output: [[71.93069002979817 66] 137.93069002979817]
Test Case: 797 | Input/Output: [[65.65407608147552 -30] 35.65407608147552]
Test Case: 798 | Input/Output: [[25.752414235558916 61] 86.75241423555892]
Test Case: 799 | Input/Output: [[74.21542413964826 -64] 10.215424139648263]
Test Case: 800 | Input/Output: [[96.38230345235621 49] 145.3823034523562]
Test Case: 801 | Input/Output: [[-96.59338516907006 15] -81.59338516907006]
Test Case: 802 | Input/Output: [[-21.849977599150193 58] 36.15002240084981]
Test Case: 803 | Input/Output: [[-53.93418770206275 76] 22.06581229793725]
Test Case: 804 | Input/Output: [[69.92532860470592 -90] -20.074671395294075]
Test Case: 805 | Input/Output: [[73.83628854496871 57] 130.8362885449687]
Test Case: 806 | Input/Output: [[-29.902703205888997 41] 11.097296794111003]
Test Case: 807 | Input/Output: [[15.98108083369361 -89] -73.01891916630639]
Test Case: 808 | Input/Output: [[9.391980720779515 -80] -70.60801927922049]
Test Case: 809 | Input/Output: [[-48.447168464348046 -52] -100.44716846434804]
Test Case: 810 | Input/Output: [[-36.31235067892216 4] -32.31235067892216]
Test Case: 811 | Input/Output: [[-21.569702767249026 -30] -51.56970276724903]
Test Case: 812 | Input/Output: [[58.1319258769021 62] 120.1319258769021]
Test Case: 813 | Input/Output: [[-53.18195993173358 -23] -76.18195993173359]
Test Case: 814 | Input/Output: [[78.15151957988894 -59] 19.15151957988894]
Test Case: 815 | Input/Output: [[-31.39257216852232 74] 42.60742783147768]
Test Case: 816 | Input/Output: [[-31.771797713247494 -41] -72.7717977132475]
Test Case: 817 | Input/Output: [[71.06127222657534 17] 88.06127222657534]
Test Case: 818 | Input/Output: [[20.43730305491904 71] 91.43730305491904]
Test Case: 819 | Input/Output: [[-6.727252946172484 95] 88.27274705382752]
Test Case: 820 | Input/Output: [[21.365976044789804 -46] -24.634023955210196]
Test Case: 821 | Input/Output: [[-8.41725140845189 -46] -54.41725140845189]
Test Case: 822 | Input/Output: [[-81.87992740260049 -8] -89.87992740260049]
Test Case: 823 | Input/Output: [[-42.78882424181183 36] -6.788824241811831]
Test Case: 824 | Input/Output: [[36.90925680071109 -26] 10.909256800711091]
Test Case: 825 | Input/Output: [[-82.63612491670614 23] -59.63612491670614]
Test Case: 826 | Input/Output: [[86.91928916394863 -42] 44.91928916394863]
Test Case: 827 | Input/Output: [[76.33557252751132 -31] 45.33557252751132]
Test Case: 828 | Input/Output: [[1.8699140244188044 66] 67.8699140244188]
Test Case: 829 | Input/Output: [[69.98453674132418 -98] -28.015463258675823]
Test Case: 830 | Input/Output: [[27.54788285325114 3] 30.54788285325114]
Test Case: 831 | Input/Output: [[44.29581587258272 -32] 12.295815872582722]
Test Case: 832 | Input/Output: [[31.405359732151084 -80] -48.594640267848916]
Test Case: 833 | Input/Output: [[-85.59395191996317 67] -18.593951919963175]
Test Case: 834 | Input/Output: [[84.09655094137705 5] 89.09655094137705]
Test Case: 835 | Input/Output: [[-16.486308550287703 -17] -33.4863085502877]
Test Case: 836 | Input/Output: [[59.68059213135504 76] 135.68059213135504]
Test Case: 837 | Input/Output: [[-84.50267704239327 -5] -89.50267704239327]
Test Case: 838 | Input/Output: [[-24.934875130380703 76] 51.0651248696193]
Test Case: 839 | Input/Output: [[55.406738243097465 69] 124.40673824309746]
Test Case: 840 | Input/Output: [[62.377044641126645 -28] 34.377044641126645]
Test Case: 841 | Input/Output: [[-71.0596144399506 -30] -101.0596144399506]
Test Case: 842 | Input/Output: [[-50.36720590053092 -13] -63.36720590053092]
Test Case: 843 | Input/Output: [[56.526014659038026 90] 146.52601465903803]
Test Case: 844 | Input/Output: [[-76.98464849564503 -12] -88.98464849564503]
Test Case: 845 | Input/Output: [[90.67181514975076 33] 123.67181514975076]
Test Case: 846 | Input/Output: [[-63.49061530643223 64] 0.5093846935677675]
Test Case: 847 | Input/Output: [[58.345488680729005 86] 144.345488680729]
Test Case: 848 | Input/Output: [[10.038245002820176 -75] -64.96175499717982]
Test Case: 849 | Input/Output: [[-7.43406726592994 24] 16.56593273407006]
Test Case: 850 | Input/Output: [[69.00341803220437 77] 146.00341803220437]
Test Case: 851 | Input/Output: [[-48.241579487922 98] 49.758420512078]
Test Case: 852 | Input/Output: [[58.24052335995961 -68] -9.75947664004039]
Test Case: 853 | Input/Output: [[-73.67955676744123 12] -61.67955676744123]
Test Case: 854 | Input/Output: [[48.369856043963466 -28] 20.369856043963466]
Test Case: 855 | Input/Output: [[-30.827254943524323 -65] -95.82725494352432]
Test Case: 856 | Input/Output: [[-72.30305430384306 71] -1.303054303843055]
Test Case: 857 | Input/Output: [[-80.4748174362488 51] -29.4748174362488]
Test Case: 858 | Input/Output: [[-73.17999409041252 -95] -168.17999409041252]
Test Case: 859 | Input/Output: [[-58.22049088871204 85] 26.779509111287958]
Test Case: 860 | Input/Output: [[-25.23686171776309 2] -23.23686171776309]
Test Case: 861 | Input/Output: [[99.96147448638581 96] 195.9614744863858]
Test Case: 862 | Input/Output: [[-26.52994210090995 -6] -32.52994210090995]
Test Case: 863 | Input/Output: [[-91.99074938338504 -55] -146.99074938338504]
Test Case: 864 | Input/Output: [[79.83977159165315 91] 170.83977159165315]
Test Case: 865 | Input/Output: [[-11.935620615709738 -14] -25.935620615709738]
Test Case: 866 | Input/Output: [[-69.77197258933714 74] 4.228027410662861]
Test Case: 867 | Input/Output: [[-85.76613990715445 -30] -115.76613990715445]
Test Case: 868 | Input/Output: [[-61.36603429077954 -44] -105.36603429077954]
Test Case: 869 | Input/Output: [[-97.9892413174873 -63] -160.9892413174873]
Test Case: 870 | Input/Output: [[-4.453238693842792 40] 35.54676130615721]
Test Case: 871 | Input/Output: [[-66.74705976020653 18] -48.747059760206525]
Test Case: 872 | Input/Output: [[16.12005792031708 96] 112.12005792031708]
Test Case: 873 | Input/Output: [[11.875245733710301 -46] -34.1247542662897]
Test Case: 874 | Input/Output: [[-74.91001815940615 13] -61.91001815940615]
Test Case: 875 | Input/Output: [[59.70882882035622 32] 91.70882882035622]
Test Case: 876 | Input/Output: [[-74.88440078114152 -42] -116.88440078114152]
Test Case: 877 | Input/Output: [[-23.95538838509333 -51] -74.95538838509333]
Test Case: 878 | Input/Output: [[-14.399600921600438 -50] -64.39960092160044]
Test Case: 879 | Input/Output: [[28.692079508304346 -98] -69.30792049169565]
Test Case: 880 | Input/Output: [[-26.571337498262565 31] 4.428662501737435]
Test Case: 881 | Input/Output: [[54.59995913989718 -35] 19.59995913989718]
Test Case: 882 | Input/Output: [[19.14201274700065 1] 20.14201274700065]
Test Case: 883 | Input/Output: [[59.37448715566566 39] 98.37448715566566]
Test Case: 884 | Input/Output: [[-70.86807890392666 -52] -122.86807890392666]
Test Case: 885 | Input/Output: [[23.04192821948196 -78] -54.95807178051804]
Test Case: 886 | Input/Output: [[-83.17331153506288 24] -59.17331153506288]
Test Case: 887 | Input/Output: [[81.67605732057538 -90] -8.323942679424619]
Test Case: 888 | Input/Output: [[-96.14644100870684 -5] -101.14644100870684]
Test Case: 889 | Input/Output: [[21.288990037787684 79] 100.28899003778768]
Test Case: 890 | Input/Output: [[49.78237485041939 94] 143.7823748504194]
Test Case: 891 | Input/Output: [[-39.28679128635875 -69] -108.28679128635875]
Test Case: 892 | Input/Output: [[37.36549118863999 69] 106.36549118864]
Test Case: 893 | Input/Output: [[-53.05195678435626 23] -30.051956784356257]
Test Case: 894 | Input/Output: [[-4.949466507584916 57] 52.050533492415084]
Test Case: 895 | Input/Output: [[31.54605869045747 -42] -10.453941309542529]
Test Case: 896 | Input/Output: [[31.46436950947114 -18] 13.46436950947114]
Test Case: 897 | Input/Output: [[-81.76291381546939 65] -16.76291381546939]
Test Case: 898 | Input/Output: [[-40.671468213420226 -84] -124.67146821342023]
Test Case: 899 | Input/Output: [[5.8363637254960565 -53] -47.16363627450394]
Test Case: 900 | Input/Output: [[-85.6193654030343 35] -50.619365403034294]
Test Case: 901 | Input/Output: [[-81.08696122834988 -96] -177.08696122834988]
Test Case: 902 | Input/Output: [[-82.57960854176227 -18] -100.57960854176227]
Test Case: 903 | Input/Output: [[-45.9508984693987 21] -24.9508984693987]
Test Case: 904 | Input/Output: [[-4.797598855399073 12] 7.202401144600927]
Test Case: 905 | Input/Output: [[-51.68331475938675 -37] -88.68331475938675]
Test Case: 906 | Input/Output: [[12.302038650017906 50] 62.302038650017906]
Test Case: 907 | Input/Output: [[-47.91467046856697 -38] -85.91467046856697]
Test Case: 908 | Input/Output: [[85.42578781847195 37] 122.42578781847195]
Test Case: 909 | Input/Output: [[6.186998681728056 61] 67.18699868172806]
Test Case: 910 | Input/Output: [[-84.83082746338616 -75] -159.83082746338616]
Test Case: 911 | Input/Output: [[-81.61495855615573 -75] -156.61495855615573]
Test Case: 912 | Input/Output: [[-1.1460314139351055 31] 29.853968586064894]
Test Case: 913 | Input/Output: [[20.50449964694181 87] 107.50449964694181]
Test Case: 914 | Input/Output: [[81.43242118138505 96] 177.43242118138505]
Test Case: 915 | Input/Output: [[72.99997178185112 21] 93.99997178185112]
Test Case: 916 | Input/Output: [[73.39890001276308 -40] 33.39890001276308]
Test Case: 917 | Input/Output: [[96.76452649766821 6] 102.76452649766821]
Test Case: 918 | Input/Output: [[91.44152189605353 26] 117.44152189605353]
Test Case: 919 | Input/Output: [[-13.983293557199787 -56] -69.98329355719979]
Test Case: 920 | Input/Output: [[82.99758121359469 -78] 4.997581213594685]
Test Case: 921 | Input/Output: [[-58.67255806567944 -22] -80.67255806567944]
Test Case: 922 | Input/Output: [[-43.31876406992081 -6] -49.31876406992081]
Test Case: 923 | Input/Output: [[-88.14329680828811 38] -50.14329680828811]
Test Case: 924 | Input/Output: [[-70.62923919615048 75] 4.370760803849521]
Test Case: 925 | Input/Output: [[3.578727701571509 43] 46.57872770157151]
Test Case: 926 | Input/Output: [[-94.03709398892062 73] -21.037093988920617]
Test Case: 927 | Input/Output: [[-74.53943873915073 58] -16.539438739150725]
Test Case: 928 | Input/Output: [[-12.573614392923233 -68] -80.57361439292323]
Test Case: 929 | Input/Output: [[-11.492037440036285 -65] -76.49203744003628]
Test Case: 930 | Input/Output: [[-2.736652438184734 -58] -60.736652438184734]
Test Case: 931 | Input/Output: [[4.104414182821884 -96] -91.89558581717812]
Test Case: 932 | Input/Output: [[-91.5744147262034 90] -1.5744147262034005]
Test Case: 933 | Input/Output: [[85.51175205246201 9] 94.51175205246201]
Test Case: 934 | Input/Output: [[-25.550808550984044 -33] -58.550808550984044]
Test Case: 935 | Input/Output: [[37.71553880130466 -10] 27.71553880130466]
Test Case: 936 | Input/Output: [[95.55101953503785 -34] 61.55101953503785]
Test Case: 937 | Input/Output: [[5.693856887918528 -88] -82.30614311208147]
Test Case: 938 | Input/Output: [[-89.52095202601286 95] 5.479047973987136]
Test Case: 939 | Input/Output: [[-6.793587050903895 -71] -77.7935870509039]
Test Case: 940 | Input/Output: [[4.761730878963192 54] 58.76173087896319]
Test Case: 941 | Input/Output: [[-53.362208661387434 -11] -64.36220866138743]
Test Case: 942 | Input/Output: [[-2.1236575684007164 -80] -82.12365756840072]
Test Case: 943 | Input/Output: [[84.28248492950019 -35] 49.282484929500185]
Test Case: 944 | Input/Output: [[-24.557784984101104 89] 64.4422150158989]
Test Case: 945 | Input/Output: [[28.735025778264173 27] 55.73502577826417]
Test Case: 946 | Input/Output: [[53.216897533608375 84] 137.21689753360837]
Test Case: 947 | Input/Output: [[8.080353882286403 73] 81.0803538822864]
Test Case: 948 | Input/Output: [[-97.78953586213623 -36] -133.78953586213623]
Test Case: 949 | Input/Output: [[-16.505293663220982 0] -16.505293663220982]
Test Case: 950 | Input/Output: [[0.06023617220007793 79] 79.06023617220008]
Test Case: 951 | Input/Output: [[19.62890277654617 -15] 4.62890277654617]
Test Case: 952 | Input/Output: [[-6.318418749749696 88] 81.6815812502503]
Test Case: 953 | Input/Output: [[49.92642182727792 28] 77.92642182727792]
Test Case: 954 | Input/Output: [[97.66654234750376 -39] 58.666542347503764]
Test Case: 955 | Input/Output: [[38.955166550697726 75] 113.95516655069773]
Test Case: 956 | Input/Output: [[2.8673518349910267 85] 87.86735183499103]
Test Case: 957 | Input/Output: [[37.88013084289673 -90] -52.11986915710327]
Test Case: 958 | Input/Output: [[9.815249397321196 -9] 0.8152493973211961]
Test Case: 959 | Input/Output: [[-39.84927398506641 -91] -130.84927398506642]
Test Case: 960 | Input/Output: [[0.3957497464693205 28] 28.39574974646932]
Test Case: 961 | Input/Output: [[12.487440890735485 -65] -52.512559109264515]
Test Case: 962 | Input/Output: [[50.635856062316776 9] 59.635856062316776]
Test Case: 963 | Input/Output: [[-21.066696703133985 -76] -97.06669670313399]
Test Case: 964 | Input/Output: [[23.296625778797434 -30] -6.703374221202566]
Test Case: 965 | Input/Output: [[86.27116746102027 -31] 55.27116746102027]
Test Case: 966 | Input/Output: [[48.60713179984856 79] 127.60713179984856]
Test Case: 967 | Input/Output: [[20.764954256188076 -22] -1.2350457438119236]
Test Case: 968 | Input/Output: [[95.77238029394249 6] 101.77238029394249]
Test Case: 969 | Input/Output: [[68.84003715673703 81] 149.84003715673703]
Test Case: 970 | Input/Output: [[-33.90059928363888 -36] -69.90059928363888]
Test Case: 971 | Input/Output: [[-97.21639201191405 -91] -188.21639201191405]
Test Case: 972 | Input/Output: [[-47.539676478525436 7] -40.539676478525436]
Test Case: 973 | Input/Output: [[-32.869970681737556 15] -17.869970681737556]
Test Case: 974 | Input/Output: [[38.790400683182554 -90] -51.209599316817446]
Test Case: 975 | Input/Output: [[-12.380816855766767 44] 31.619183144233233]
Test Case: 976 | Input/Output: [[-20.398252724193284 -83] -103.39825272419328]
Test Case: 977 | Input/Output: [[-10.10243472553725 20] 9.89756527446275]
Test Case: 978 | Input/Output: [[64.89331401143767 62] 126.89331401143767]
Test Case: 979 | Input/Output: [[-5.853400620773812 -71] -76.85340062077381]
Test Case: 980 | Input/Output: [[-89.06769369861283 -22] -111.06769369861283]
Test Case: 981 | Input/Output: [[24.570517692151725 19] 43.570517692151725]
Test Case: 982 | Input/Output: [[-39.93997448369733 -80] -119.93997448369733]
Test Case: 983 | Input/Output: [[-99.34889062040584 8] -91.34889062040584]
Test Case: 984 | Input/Output: [[-57.40626434457325 38] -19.406264344573252]
Test Case: 985 | Input/Output: [[38.82022046702045 -41] -2.179779532979552]
Test Case: 986 | Input/Output: [[92.61534129644596 95] 187.61534129644596]
Test Case: 987 | Input/Output: [[-25.51505919965686 85] 59.48494080034314]
Test Case: 988 | Input/Output: [[17.763179893174396 34] 51.763179893174396]
Test Case: 989 | Input/Output: [[75.57220359493579 8] 83.57220359493579]
Test Case: 990 | Input/Output: [[-52.51630812496404 65] 12.483691875035959]
Test Case: 991 | Input/Output: [[-19.008888869524412 5] -14.008888869524412]
Test Case: 992 | Input/Output: [[18.848906401950742 89] 107.84890640195074]
Test Case: 993 | Input/Output: [[43.92211651057937 54] 97.92211651057937]
Test Case: 994 | Input/Output: [[-58.565631684697884 -46] -104.56563168469788]
Test Case: 995 | Input/Output: [[-94.79073960998304 -51] -145.79073960998304]
Test Case: 996 | Input/Output: [[-41.26365209265479 -67] -108.26365209265478]
Test Case: 997 | Input/Output: [[27.537585629590524 7] 34.537585629590524]
Test Case: 998 | Input/Output: [[-4.319937452619499 -100] -104.3199374526195]
Test Case: 999 | Input/Output: [[32.711583139186615 53] 85.71158313918662]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -22 -89 -7 -11 55 -121 -102 94 -121 -40 -123 -42 -58 58 120 -100
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 61270.2620000001
Test mean error for best: 30.63513
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0
        
Correct output: 83.8755230202  | Program output: 75.0
         
Correct output: 17.5659592301  | Program output: -37.0
        
Correct output: 80.3549464456  | Program output: 46.0
         
Correct output: 18.9343380135  | Program output: 24.0
         
Correct output: -40.1129564408 | Program output: 14.0
         
Correct output: 58.6042464959  | Program output: 98.0
         
Correct output: -20.5490699326 | Program output: -4.0
         
Correct output: -43.7793378574 | Program output: -53.0
        
Correct output: -129.7831210298 | Program output: -38.0
        
Correct output: 162.8148987114 | Program output: 79.0
         
Correct output: -132.002465512 | Program output: -68.0
        
Correct output: 114.6003035226 | Program output: 76.0
         
Correct output: -1.7534077088  | Program output: 2.0
          
Correct output: 89.2119408379  | Program output: 50.0
         
Correct output: 88.7062676802  | Program output: 30.0
         
Correct output: 164.295308609  | Program output: 66.0
         
Correct output: -0.7267472667  | Program output: 76.0
         
Correct output: 157.1002894768 | Program output: 87.0
         
Correct output: -95.7711719159 | Program output: -81.0
        
Correct output: 7.8684219635   | Program output: 76.0
         
Correct output: 25.0869728078  | Program output: -73.0
        
Correct output: -80.2389227568 | Program output: -60.0
        
Correct output: -46.1102240047 | Program output: -74.0
        
Correct output: -33.792764183  | Program output: 63.0
         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction float_max} {:instruction float_inc} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction tag_float_18} {:instruction integer_rot} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction integer_dup} {:instruction in2} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_yank} {:instruction float_div} {:instruction float_inc} {:instruction tagged_696} {:instruction float_max} {:instruction float_yankdup} {:instruction 54} {:instruction in1} {:instruction float_min} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_sub} {:instruction float_tan} {:instruction float_dup_items} {:instruction integer_pop} {:instruction integer_inc} {:instruction integer_swap} {:instruction 4} {:instruction in1} {:instruction float_add} {:instruction print_newline} {:instruction integer_max} {:instruction integer_yank})
Best program: (integer_dup_times integer_dup_items integer_dup float_min float_max float_inc in2 integer_fromfloat integer_rot integer_fromfloat integer_dec integer_mod float_yank tag_float_18 integer_rot float_flush float_frominteger integer_dup float_stackdepth integer_swap integer_dup in2 float_swap integer_dec integer_dup_items float_stackdepth print_float float_yank float_div float_inc tagged_696 float_max float_yankdup 54 in1 float_min integer_swap integer_sub integer_max integer_sub float_tan float_dup_items integer_pop integer_inc integer_swap 4 in1 float_add print_newline integer_max integer_yank)
Errors: [3.9077 11 8.8755 10 54.566 11 34.3549 11 5.0657 11 54.113 11 39.3958 10 16.5491 11 9.2207 11 91.7831 12 83.8149 13 64.0025 11 38.6003 12 3.7534 11 39.2119 11 58.7063 11 98.2953 10 76.7267 11 70.1003 11 14.7712 12 68.1316 10 98.087 11 20.2389 11 27.8898 11 96.7928 11]
Total: 1452.9543999999996
Mean: 29.059088
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 17651.000969999997
Median total errors in population: 25337.0
Error averages by case: (687.5891011000006 13.628 685.3894832999999 12.308 689.5180166999993 12.347 686.3113597000001 12.323 671.7803129000004 13.032 682.1601729000017 12.938 688.0675947999996 13.137 688.8112438999989 12.996 691.7315915000006 13.945 719.3207861000001 13.832 708.1120423 13.16 719.6425598999978 13.163 694.920996300001 13.236 667.6335463999997 12.133 686.1107891999993 12.303 684.7020021999995 12.398 709.4160773999998 12.315 681.4028845000001 12.229 707.5713164000009 13.072 709.5923049999986 13.12 681.7137725999997 12.346 696.9650930000009 12.28 704.8541428999994 13.041 698.1907750999999 13.874 688.0450039000015 12.292)
Error minima by case: (0.0208 6 0.1305 2 0.434 2 0.3549 2 0.1675 8 0.113 2 0.3268 8 0.0458 2 0.7403 8 8.7831 2 12.1851 2 1.9975 3 14.6003 3 0.7534 1 0.2119 2 0.2937 2 10.7047 3 3.0E-4 2 12.0 3 0.7712 1 0.5481 8 0.3963 2 1.2389 2 3.0712 8 1.1378 2)
Average genome size in population (length): 49.724
Average program size in population (points): 50.724
Average percent parens in population: 0.042
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.332
Error (vector) diversity:			 0.357
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1247040
--- Timings ---
Current time: 1529616023600 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.5 seconds, 15.3%
Fitness Testing:      2.8 seconds, 81.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 61270.2620000001
Test mean error for best: 30.63513
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0
        
Correct output: 83.8755230202  | Program output: 75.0
         
Correct output: 17.5659592301  | Program output: -37.0
        
Correct output: 80.3549464456  | Program output: 46.0
         
Correct output: 18.9343380135  | Program output: 24.0
         
Correct output: -40.1129564408 | Program output: 14.0
         
Correct output: 58.6042464959  | Program output: 98.0
         
Correct output: -20.5490699326 | Program output: -4.0
         
Correct output: -43.7793378574 | Program output: -53.0
        
Correct output: -129.7831210298 | Program output: -38.0
        
Correct output: 162.8148987114 | Program output: 79.0
         
Correct output: -132.002465512 | Program output: -68.0
        
Correct output: 114.6003035226 | Program output: 76.0
         
Correct output: -1.7534077088  | Program output: 2.0
          
Correct output: 89.2119408379  | Program output: 50.0
         
Correct output: 88.7062676802  | Program output: 30.0
         
Correct output: 164.295308609  | Program output: 66.0
         
Correct output: -0.7267472667  | Program output: 76.0
         
Correct output: 157.1002894768 | Program output: 87.0
         
Correct output: -95.7711719159 | Program output: -81.0
        
Correct output: 7.8684219635   | Program output: 76.0
         
Correct output: 25.0869728078  | Program output: -73.0
        
Correct output: -80.2389227568 | Program output: -60.0
        
Correct output: -46.1102240047 | Program output: -74.0
        
Correct output: -33.792764183  | Program output: 63.0
         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction float_max} {:instruction float_inc} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction tag_float_18} {:instruction integer_rot} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction integer_dup} {:instruction in2} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_yank} {:instruction float_div} {:instruction float_inc} {:instruction tagged_696} {:instruction float_max} {:instruction float_yankdup} {:instruction 54} {:instruction in1} {:instruction float_min} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_sub} {:instruction float_tan} {:instruction float_dup_items} {:instruction integer_pop} {:instruction integer_inc} {:instruction integer_swap} {:instruction 4} {:instruction in1} {:instruction float_add} {:instruction print_newline} {:instruction integer_max} {:instruction integer_yank})
Best program: (integer_dup_times integer_dup_items integer_dup float_min float_max float_inc in2 integer_fromfloat integer_rot integer_fromfloat integer_dec integer_mod float_yank tag_float_18 integer_rot float_flush float_frominteger integer_dup float_stackdepth integer_swap integer_dup in2 float_swap integer_dec integer_dup_items float_stackdepth print_float float_yank float_div float_inc tagged_696 float_max float_yankdup 54 in1 float_min integer_swap integer_sub integer_max integer_sub float_tan float_dup_items integer_pop integer_inc integer_swap 4 in1 float_add print_newline integer_max integer_yank)
Errors: [3.9077 11 8.8755 10 54.566 11 34.3549 11 5.0657 11 54.113 11 39.3958 10 16.5491 11 9.2207 11 91.7831 12 83.8149 13 64.0025 11 38.6003 12 3.7534 11 39.2119 11 58.7063 11 98.2953 10 76.7267 11 70.1003 11 14.7712 12 68.1316 10 98.087 11 20.2389 11 27.8898 11 96.7928 11]
Total: 1452.9543999999996
Mean: 29.059088
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 6623.94318699999
Median total errors in population: 2019.7318000000002
Error averages by case: (233.82499229999976 12.367 246.7612002999984 10.1 242.71997859999922 10.225 249.04983880000174 10.126 213.7727879000002 12.225 230.69220780000214 10.522 251.82914840000012 12.377 224.8182534000008 10.59 241.61579069999996 13.153 289.68373080000003 11.362 294.9259470999991 10.908 289.9185365000009 10.94 267.36191509999816 11.161 199.51266979999858 9.822 252.4295512999985 10.145 252.1747577999985 10.359 297.5888128999993 10.225 238.9351274999999 9.976 293.22379119999795 10.823 268.41195469999815 10.819 239.0617689999998 11.732 264.6660309999999 9.991 259.8307989999987 10.624 255.91563409999983 12.967 251.5399609999989 10.139)
Error minima by case: (0.0208 6 1.8755 2 0.434 2 0.3549 2 0.1675 9 0.113 2 0.3268 8 0.0458 2 0.7403 8 30.7831 2 12.1851 2 1.9975 3 19.2553 3 0.1025 1 0.2119 2 0.2937 2 10.7047 3 3.0E-4 2 17.8997 3 1.1215 1 0.5481 8 0.3963 2 2.2389 2 3.0712 8 2.2788 2)
Average genome size in population (length): 57.637
Average program size in population (points): 58.637
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.52
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.276
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.321
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2693743
--- Timings ---
Current time: 1529616027176 milliseconds
Total Time:           7.2 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.3 seconds, 31.3%
Fitness Testing:      4.3 seconds, 60.0%
Report:               0.5 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 60447.03079999995
Test mean error for best: 30.22352
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -39.057       
Correct output: 83.8755230202  | Program output: 76.057        
Correct output: 17.5659592301  | Program output: -36.057       
Correct output: 80.3549464456  | Program output: 47.057        
Correct output: 18.9343380135  | Program output: 25.057        
Correct output: -40.1129564408 | Program output: 15.057        
Correct output: 58.6042464959  | Program output: 99.057        
Correct output: -20.5490699326 | Program output: -3.057        
Correct output: -43.7793378574 | Program output: -52.057       
Correct output: -129.7831210298 | Program output: -37.057       
Correct output: 162.8148987114 | Program output: 80.057        
Correct output: -132.002465512 | Program output: -67.057       
Correct output: 114.6003035226 | Program output: 77.057        
Correct output: -1.7534077088  | Program output: 3.057         
Correct output: 89.2119408379  | Program output: 51.057        
Correct output: 88.7062676802  | Program output: 31.057        
Correct output: 164.295308609  | Program output: 67.057        
Correct output: -0.7267472667  | Program output: 77.057        
Correct output: 157.1002894768 | Program output: 88.057        
Correct output: -95.7711719159 | Program output: -80.057       
Correct output: 7.8684219635   | Program output: 77.057        
Correct output: 25.0869728078  | Program output: -72.057       
Correct output: -80.2389227568 | Program output: -59.057       
Correct output: -46.1102240047 | Program output: -73.057       
Correct output: -33.792764183  | Program output: 64.057        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction tag_integer_205} {:instruction float_div} {:instruction tag_float_811} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_mod} {:instruction float_div} {:instruction in2} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_yankdup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_sub} {:instruction -82.02502929497277} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction integer_max} {:instruction float_flush} {:instruction float_add} {:instruction in1} {:instruction integer_mod} {:instruction integer_swap} {:instruction print_integer} {:instruction -39.831376628661495} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_mod} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_dup_times})
Best program: (float_mod float_pop float_min integer_dup_times tag_integer_205 float_div tag_float_811 integer_swap integer_swap float_cos integer_dup_items integer_sub in2 integer_rot float_frominteger float_yankdup print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 float_stackdepth integer_shove integer_stackdepth float_dup_items integer_min float_mod float_div in2 float_shove float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod float_yankdup float_flush print_integer integer_flush integer_sub integer_add integer_sub -82.02502929497277 float_flush integer_dup_times integer_flush integer_max float_flush float_add in1 integer_mod integer_swap print_integer -39.831376628661495 integer_yankdup integer_dup float_mod float_yankdup float_shove integer_min integer_mod integer_dup_items float_tan float_stackdepth float_dup_times)
Errors: [2.9647 10 7.8185 11 53.623 11 33.2979 11 6.1227 11 55.17 12 40.4528 10 17.4921 11 8.2777 10 92.7261 12 82.7579 12 64.9455 10 37.5433 11 4.8104 10 38.1549 10 57.6493 10 97.2383 10 77.7837 10 69.0433 11 15.7142 11 69.1886 11 97.144 10 21.1819 11 26.9468 10 97.8498 11]
Total: 1442.8973999999998
Mean: 28.857948
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5023.856155400012
Median total errors in population: 1485.9543999999996
Error averages by case: (158.30296310000054 11.74 166.69796759999784 10.249 191.27757669999943 10.401 177.69501180000233 10.361 155.81249300000232 12.292 186.19024340000178 10.73 193.71430969999915 12.072 161.4394761000012 10.713 164.17431100000206 12.776 222.83802060000033 11.599 218.88573999999866 11.133 210.66320080000128 11.069 187.59792339999913 11.84 137.29988909999986 10.204 181.86557849999772 10.389 190.42382229999924 10.862 226.31895919999886 10.261 211.14996279999954 10.043 211.46436619999884 10.954 179.5557501999988 11.045 205.73709089999713 11.393 226.46276909999972 9.853 178.55147069999822 10.762 181.4978252000017 12.883 222.5134339999982 10.102)
Error minima by case: (0.9077 6 5.8755 2 0.566 2 13.6451 2 1.9343 9 6.113 2 21.3958 9 0.1292 2 6.2207 10 37.0 2 2.8149 2 1.9975 3 18.3899 3 0.7606 1 6.9985 2 7.5041 2 30.2953 3 0.0395 2 18.8997 3 3.2288 1 2.8684 9 8.087 2 2.2389 2 5.8898 9 0.2072 2)
Average genome size in population (length): 56.972
Average program size in population (points): 57.972
Average percent parens in population: 0.021
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9795
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.126
Error (vector) diversity:			 0.138
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4123738
--- Timings ---
Current time: 1529616030660 milliseconds
Total Time:          10.6 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         3.9 seconds, 37.2%
Fitness Testing:      5.6 seconds, 53.3%
Report:               0.9 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 60455.978800000004
Test mean error for best: 30.22799
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -39.058       
Correct output: 83.8755230202  | Program output: 76.058        
Correct output: 17.5659592301  | Program output: -36.058       
Correct output: 80.3549464456  | Program output: 47.058        
Correct output: 18.9343380135  | Program output: 25.058        
Correct output: -40.1129564408 | Program output: 15.058        
Correct output: 58.6042464959  | Program output: 99.058        
Correct output: -20.5490699326 | Program output: -3.058        
Correct output: -43.7793378574 | Program output: -52.058       
Correct output: -129.7831210298 | Program output: -37.058       
Correct output: 162.8148987114 | Program output: 80.058        
Correct output: -132.002465512 | Program output: -67.058       
Correct output: 114.6003035226 | Program output: 77.058        
Correct output: -1.7534077088  | Program output: 3.058         
Correct output: 89.2119408379  | Program output: 51.058        
Correct output: 88.7062676802  | Program output: 31.058        
Correct output: 164.295308609  | Program output: 67.058        
Correct output: -0.7267472667  | Program output: 77.058        
Correct output: 157.1002894768 | Program output: 88.058        
Correct output: -95.7711719159 | Program output: -80.058       
Correct output: 7.8684219635   | Program output: 77.058        
Correct output: 25.0869728078  | Program output: -72.058       
Correct output: -80.2389227568 | Program output: -59.058       
Correct output: -46.1102240047 | Program output: -73.058       
Correct output: -33.792764183  | Program output: 64.058        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction float_mod} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction tag_integer_205} {:instruction float_div} {:instruction tag_float_811} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_yankdup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_sub} {:instruction -82.02502929497277} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction integer_max} {:instruction float_flush} {:instruction float_add} {:instruction in1} {:instruction integer_mod} {:instruction integer_swap} {:instruction print_integer} {:instruction -39.831376628661495} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_mod} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_dup_times})
Best program: (integer_dup_times integer_dup_items integer_dup float_min float_mod float_pop float_min integer_dup_times tag_integer_205 float_div tag_float_811 integer_swap integer_swap float_cos integer_dup_items integer_sub in2 integer_rot float_frominteger float_yankdup print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 float_min float_shove float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod float_yankdup float_flush print_integer integer_flush integer_sub integer_add integer_sub -82.02502929497277 float_flush integer_dup_times integer_flush integer_max float_flush float_add in1 integer_mod integer_swap print_integer -39.831376628661495 integer_yankdup integer_dup float_mod float_yankdup float_shove integer_min integer_mod integer_dup_items float_tan float_stackdepth float_dup_times)
Errors: [2.9657 10 7.8175 11 53.624 11 33.2969 11 6.1237 11 55.171 11 40.4538 10 17.4911 11 8.2787 11 92.7251 11 82.7569 12 64.9445 10 37.5423 11 4.8114 10 38.1539 11 57.6483 10 97.2373 9 77.7847 11 69.0423 11 15.7132 11 69.1896 10 97.145 9 21.1809 10 26.9478 11 97.8508 11]
Total: 1440.8963999999999
Mean: 28.817928
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4455.633941000005
Median total errors in population: 1474.9543999999996
Error averages by case: (130.24889449999907 11.231 132.208549899998 11.417 173.4369317000003 11.653 153.78548550000212 11.783 129.011778500002 11.863 171.05163130000093 11.776 159.93654199999884 11.515 142.4688330000011 11.798 135.20135230000193 12.259 208.64867830000046 12.664 197.99437759999842 12.871 185.59261930000153 11.747 158.50952770000012 12.913 118.62389110000099 11.711 158.1517495999978 11.647 174.49227129999986 11.856 210.19967689999862 10.943 190.3285011999994 11.294 186.30819059999902 12.144 143.39296220000094 12.309 183.126898799997 10.812 210.9171468999996 11.091 147.44950349999792 12.146 151.83895320000158 12.051 207.868994099998 11.346)
Error minima by case: (0.9077 8 5.8755 2 15.566 3 31.3549 3 3.0657 10 15.0 3 21.6042 9 3.0 3 6.2207 10 7.7831 3 80.0 2 19.9975 4 35.6003 3 0.2466 2 36.2119 3 31.0 3 67.0 3 0.3291 3 67.1003 3 2.6905 2 5.8684 9 11.913 3 12.8418 3 24.8898 8 12.7928 3)
Average genome size in population (length): 53.14
Average program size in population (points): 54.14
Average percent parens in population: 0.021
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.32525
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.071
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5455858
--- Timings ---
Current time: 1529616033788 milliseconds
Total Time:          13.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.4 seconds, 39.4%
Fitness Testing:      6.8 seconds, 49.7%
Report:               1.4 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 60437.411999999946
Test mean error for best: 30.21871
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.057       
Correct output: 83.8755230202  | Program output: 75.057        
Correct output: 17.5659592301  | Program output: -37.057       
Correct output: 80.3549464456  | Program output: 46.057        
Correct output: 18.9343380135  | Program output: 24.057        
Correct output: -40.1129564408 | Program output: 14.057        
Correct output: 58.6042464959  | Program output: 98.057        
Correct output: -20.5490699326 | Program output: -4.057        
Correct output: -43.7793378574 | Program output: -53.057       
Correct output: -129.7831210298 | Program output: -38.057       
Correct output: 162.8148987114 | Program output: 79.057        
Correct output: -132.002465512 | Program output: -68.057       
Correct output: 114.6003035226 | Program output: 76.057        
Correct output: -1.7534077088  | Program output: 2.057         
Correct output: 89.2119408379  | Program output: 50.057        
Correct output: 88.7062676802  | Program output: 30.057        
Correct output: 164.295308609  | Program output: 66.057        
Correct output: -0.7267472667  | Program output: 76.057        
Correct output: 157.1002894768 | Program output: 87.057        
Correct output: -95.7711719159 | Program output: -81.057       
Correct output: 7.8684219635   | Program output: 76.057        
Correct output: 25.0869728078  | Program output: -73.057       
Correct output: -80.2389227568 | Program output: -60.057       
Correct output: -46.1102240047 | Program output: -74.057       
Correct output: -33.792764183  | Program output: 63.057        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction tag_integer_205} {:instruction float_div} {:instruction tag_float_811} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_mod} {:instruction float_div} {:instruction in2} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_yankdup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_sub} {:instruction -82.02502929497277} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction integer_max} {:instruction float_flush} {:instruction float_add} {:instruction in1} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_integer} {:instruction -39.831376628661495} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_mod} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_dup_times})
Best program: (float_mod float_pop float_min integer_dup_times tag_integer_205 float_div tag_float_811 integer_swap integer_swap float_cos integer_dup_items integer_sub in2 integer_rot float_frominteger float_dec print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 float_stackdepth integer_shove integer_stackdepth float_dup_items integer_min float_mod float_div in2 float_shove float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod float_yankdup float_flush print_integer integer_flush integer_sub integer_add integer_sub -82.02502929497277 float_flush integer_dup_times integer_flush integer_max float_flush float_add in1 integer_mod integer_dup print_integer -39.831376628661495 integer_yankdup integer_dup float_mod float_yankdup float_shove integer_min integer_mod integer_dup_items float_tan float_stackdepth float_dup_times)
Errors: [3.9647 11 8.8185 10 54.623 11 34.2979 10 5.1227 11 54.17 11 39.4528 9 16.4921 11 9.2777 9 91.7261 12 83.7579 12 63.9455 10 38.5433 11 3.8104 10 39.1549 10 58.6493 10 98.2383 10 76.7837 10 70.0433 10 14.7142 11 68.1886 10 98.144 11 20.1819 10 27.9468 10 96.8498 10]
Total: 1436.8973999999998
Mean: 28.737947
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3525.8069355000016
Median total errors in population: 1456.9543999999996
Error averages by case: (91.62160800000018 10.557 94.41705729999919 10.908 136.38817450000204 11.145 116.85614960000117 11.752 90.74823850000082 11.156 134.773973799999 11.279 122.28800839999886 10.916 103.17599980000013 11.25 96.53727280000078 11.889 173.06565610000044 12.233 162.79709479999843 12.936 148.45003600000106 11.156 121.59002810000125 12.124 88.55330770000083 11.129 121.38969399999856 11.162 138.68540370000161 11.143 175.71455789999868 10.252 154.24098499999945 11.148 150.5777020000008 11.845 103.87597040000121 12.053 146.78671059999758 10.751 175.28475059999965 10.574 108.39287489999838 11.867 113.21674810000083 11.262 172.70293289999836 11.189)
Error minima by case: (0.9077 8 5.8755 3 0.566 3 13.6451 3 4.0657 10 0.113 3 0.4336 9 3.0 3 6.2207 9 37.0 3 2.8149 3 63.0025 4 35.6003 4 0.2466 2 12.7881 3 26.7063 3 30.2953 4 0.7267 3 18.8997 4 13.7712 2 3.8684 9 0.087 3 19.2389 3 12.1784 8 0.139 3)
Average genome size in population (length): 57.557
Average program size in population (points): 58.557
Average percent parens in population: 0.018
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.712
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.068
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6896328
--- Timings ---
Current time: 1529616037114 milliseconds
Total Time:          17.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.1 seconds, 41.4%
Fitness Testing:      8.1 seconds, 47.2%
Report:               1.8 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 60625.53599999999
Test mean error for best: 30.31277
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.011       
Correct output: 83.8755230202  | Program output: 75.022        
Correct output: 17.5659592301  | Program output: -37.011       
Correct output: 80.3549464456  | Program output: 46.022        
Correct output: 18.9343380135  | Program output: 24.022        
Correct output: -40.1129564408 | Program output: 14.022        
Correct output: 58.6042464959  | Program output: 98.022        
Correct output: -20.5490699326 | Program output: -4.011        
Correct output: -43.7793378574 | Program output: -53.011       
Correct output: -129.7831210298 | Program output: -38.011       
Correct output: 162.8148987114 | Program output: 79.022        
Correct output: -132.002465512 | Program output: -68.011       
Correct output: 114.6003035226 | Program output: 76.022        
Correct output: -1.7534077088  | Program output: 2.022         
Correct output: 89.2119408379  | Program output: 50.022        
Correct output: 88.7062676802  | Program output: 30.022        
Correct output: 164.295308609  | Program output: 66.022        
Correct output: -0.7267472667  | Program output: 76.022        
Correct output: 157.1002894768 | Program output: 87.022        
Correct output: -95.7711719159 | Program output: -81.011       
Correct output: 7.8684219635   | Program output: 76.022        
Correct output: 25.0869728078  | Program output: -73.011       
Correct output: -80.2389227568 | Program output: -60.011       
Correct output: -46.1102240047 | Program output: -74.011       
Correct output: -33.792764183  | Program output: 63.022        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction float_max} {:instruction float_inc} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction tag_float_9993} {:instruction integer_rot} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_mod} {:instruction float_div} {:instruction in2} {:instruction integer_mult} {:instruction float_yank} {:instruction tagged_695} {:instruction integer_yank} {:instruction in2} {:instruction in2} {:instruction print_float} {:instruction float_swap} {:instruction integer_rot} {:instruction in2} {:instruction float_sin} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_sub} {:instruction tagged_353} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction tagged_353} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_mult} {:instruction integer_swap} {:instruction float_min})
Best program: (integer_dup_times integer_dup_items integer_dup float_min float_max float_inc in2 integer_fromfloat integer_rot integer_fromfloat integer_dec integer_mod float_yank tag_float_9993 integer_rot float_flush float_frominteger integer_stackdepth float_dup_items integer_min float_mod float_div in2 integer_mult float_yank tagged_695 integer_yank in2 in2 print_float float_swap integer_rot in2 float_sin float_frominteger float_shove float_dup_items float_inc integer_inc float_tan integer_sub tagged_353 integer_flush float_stackdepth print_integer float_yank integer_stackdepth integer_sub tagged_353 integer_flush float_stackdepth print_integer float_yank integer_stackdepth integer_yank integer_swap float_mult integer_swap float_min)
Errors: [3.9187 9 8.8535 8 54.577 11 34.3329 11 5.0877 11 54.135 11 39.4178 9 16.5381 11 9.2317 11 91.7721 11 83.7929 13 63.9915 10 38.5783 10 3.7754 11 39.1899 11 58.6843 9 98.2733 10 76.7487 10 70.0783 10 14.7602 10 68.1536 9 98.098 11 20.2279 11 27.9008 11 96.8148 10]
Total: 1435.9324
Mean: 28.718649
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3012.8211529
Median total errors in population: 1452.9543999999996
Error averages by case: (75.97193780000038 10.324 70.98589769999987 10.643 119.92416750000127 10.867 92.30673820000003 11.483 64.16968809999982 10.909 108.88712969999978 11.23 99.29448379999896 10.63 85.28813049999971 11.07 81.47874270000017 11.563 158.28190660000053 12.068 141.1893703999988 12.556 135.93666980000003 10.686 98.75442020000044 11.825 61.419382400000764 10.855 97.1678134999994 10.975 113.69630220000076 10.851 153.62242159999897 10.042 129.73541369999919 10.998 129.05905200000097 11.445 91.60700040000043 11.66 122.22546099999886 10.335 161.0572070999997 10.532 95.00377459999929 11.502 99.88420760000014 11.043 148.69783379999944 11.084)
Error minima by case: (1.9077 8 6.8455 6 6.566 7 22.3549 6 5.0657 10 35.0577 6 0.6042 9 9.4509 6 7.2207 9 91.7261 7 16.2431 6 63.9455 8 36.5703 7 1.7534 5 31.2119 6 30.7063 6 1.7627 6 0.7267 7 29.9577 6 14.7142 7 3.1316 7 14.087 7 20.1819 7 25.8898 9 28.7375 7)
Average genome size in population (length): 57.387
Average program size in population (points): 58.387
Average percent parens in population: 0.018
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.2091875
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.1
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8331938
--- Timings ---
Current time: 1529616040184 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.4 seconds, 41.9%
Fitness Testing:      9.3 seconds, 46.3%
Report:               2.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 60085.30250000005
Test mean error for best: 30.04265
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -39.03249     
Correct output: 83.8755230202  | Program output: 76.03249      
Correct output: 17.5659592301  | Program output: -36.03249     
Correct output: 80.3549464456  | Program output: 47.03249      
Correct output: 18.9343380135  | Program output: 25.03249      
Correct output: -40.1129564408 | Program output: 15.03249      
Correct output: 58.6042464959  | Program output: 99.03249      
Correct output: -20.5490699326 | Program output: -3.03249      
Correct output: -43.7793378574 | Program output: -52.03249     
Correct output: -129.7831210298 | Program output: -37.03249     
Correct output: 162.8148987114 | Program output: 80.03249      
Correct output: -132.002465512 | Program output: -67.03249     
Correct output: 114.6003035226 | Program output: 77.03249      
Correct output: -1.7534077088  | Program output: 3.03249       
Correct output: 89.2119408379  | Program output: 51.03249      
Correct output: 88.7062676802  | Program output: 31.03249      
Correct output: 164.295308609  | Program output: 67.03249      
Correct output: -0.7267472667  | Program output: 77.03249      
Correct output: 157.1002894768 | Program output: 88.03249      
Correct output: -95.7711719159 | Program output: -80.03249     
Correct output: 7.8684219635   | Program output: 77.03249      
Correct output: 25.0869728078  | Program output: -72.03249     
Correct output: -80.2389227568 | Program output: -59.03249     
Correct output: -46.1102240047 | Program output: -73.03249     
Correct output: -33.792764183  | Program output: 64.03249      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction tag_integer_205} {:instruction float_div} {:instruction tag_float_811} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_mod float_pop float_min integer_dup_times tag_integer_205 float_div tag_float_811 integer_swap integer_swap float_cos integer_dup_items integer_sub in2 integer_rot float_frominteger float_yankdup print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 57 float_dec float_inc float_mod integer_mult float_min float_mult 57 float_min float_shove float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [2.9402 8 7.843 10 53.5984 11 33.3225 10 6.0982 11 55.1454 11 40.4282 8 17.5166 10 8.2532 11 92.7506 10 82.7824 12 64.97 9 37.5678 10 4.7859 11 38.1795 10 57.6738 10 97.2628 9 77.7592 11 69.0678 10 15.7387 11 69.1641 9 97.1195 11 21.2064 10 26.9223 9 97.8253 10]
Total: 1427.9217999999998
Mean: 28.558435
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2738.9145999000007
Median total errors in population: 1442.8973999999998
Error averages by case: (70.73102409999991 9.954 55.77922080000003 10.755 114.41163170000105 10.858 77.13302990000003 11.346 50.12080829999985 10.898 96.15357950000002 11.341 84.58700019999998 10.404 81.52562300000015 10.987 76.0397267 11.245 154.37412260000042 11.796 127.23158089999855 12.199 130.4015883999995 10.246 84.0817953000003 11.364 44.67901229999994 10.476 82.01334820000002 10.775 99.25374280000052 10.383 140.14295339999873 9.769 116.92121499999976 10.772 114.72283620000077 11.187 85.38602340000001 11.294 109.15028149999912 10.305 153.9512000999997 10.077 89.15305540000024 11.154 93.13960279999988 10.785 136.48059739999965 10.98)
Error minima by case: (0.9077 7 5.8555 5 6.566 7 22.3549 5 3.0657 9 40.113 6 0.6042 8 10.4509 5 6.2207 9 91.6881 6 16.1851 5 63.9445 7 35.5803 6 1.7534 4 31.2119 5 30.7063 5 1.7047 6 0.7267 6 29.8997 5 14.7132 6 2.1316 7 14.087 6 20.1809 6 24.8898 8 33.7928 6)
Average genome size in population (length): 63.142
Average program size in population (points): 64.142
Average percent parens in population: 0.016
Minimum age in population: 6.25
Maximum age in population: 10.96875
Average age in population: 8.97609375
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.119
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9911163
--- Timings ---
Current time: 1529616043532 milliseconds
Total Time:          23.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.0 seconds, 42.4%
Fitness Testing:     10.8 seconds, 45.7%
Report:               2.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 60085.30250000005
Test mean error for best: 30.04265
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -39.03249     
Correct output: 83.8755230202  | Program output: 76.03249      
Correct output: 17.5659592301  | Program output: -36.03249     
Correct output: 80.3549464456  | Program output: 47.03249      
Correct output: 18.9343380135  | Program output: 25.03249      
Correct output: -40.1129564408 | Program output: 15.03249      
Correct output: 58.6042464959  | Program output: 99.03249      
Correct output: -20.5490699326 | Program output: -3.03249      
Correct output: -43.7793378574 | Program output: -52.03249     
Correct output: -129.7831210298 | Program output: -37.03249     
Correct output: 162.8148987114 | Program output: 80.03249      
Correct output: -132.002465512 | Program output: -67.03249     
Correct output: 114.6003035226 | Program output: 77.03249      
Correct output: -1.7534077088  | Program output: 3.03249       
Correct output: 89.2119408379  | Program output: 51.03249      
Correct output: 88.7062676802  | Program output: 31.03249      
Correct output: 164.295308609  | Program output: 67.03249      
Correct output: -0.7267472667  | Program output: 77.03249      
Correct output: 157.1002894768 | Program output: 88.03249      
Correct output: -95.7711719159 | Program output: -80.03249     
Correct output: 7.8684219635   | Program output: 77.03249      
Correct output: 25.0869728078  | Program output: -72.03249     
Correct output: -80.2389227568 | Program output: -59.03249     
Correct output: -46.1102240047 | Program output: -73.03249     
Correct output: -33.792764183  | Program output: 64.03249      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction tag_integer_205} {:instruction float_div} {:instruction tag_float_811} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_mod float_pop float_min integer_dup_times tag_integer_205 float_div tag_float_811 integer_swap integer_swap float_cos integer_dup_items integer_sub in2 integer_rot float_frominteger float_yankdup print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 57 float_dec float_inc float_mod integer_mult float_min float_mult 57 float_min float_shove float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [2.9402 8 7.843 10 53.5984 11 33.3225 10 6.0982 11 55.1454 11 40.4282 8 17.5166 10 8.2532 11 92.7506 10 82.7824 12 64.97 9 37.5678 10 4.7859 11 38.1795 10 57.6738 10 97.2628 9 77.7592 11 69.0678 10 15.7387 11 69.1641 9 97.1195 11 21.2064 10 26.9223 9 97.8253 10]
Total: 1427.9217999999998
Mean: 28.558435
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2521.9112586999813
Median total errors in population: 1440.8963999999999
Error averages by case: (55.843811100000245 10.092 50.301260399999705 10.709 99.97482220000035 10.983 72.64837050000044 11.027 45.984802099999506 11.06 92.5699913000003 11.205 79.45496670000075 10.072 63.647463799999684 10.966 61.377506500000315 11.056 140.54395149999985 11.417 121.94330019999784 12.152 116.48060989999934 10.207 78.61561010000034 11.151 40.722166799999684 10.314 77.57054849999982 10.828 94.56914770000047 10.185 134.96516939999816 9.454 113.5944151000001 10.863 109.34201720000061 10.952 70.90644929999948 11.19 105.56386599999888 10.08 140.49477150000027 9.79 74.53779750000004 10.535 79.02401930000023 10.895 133.11242409999946 10.939)
Error minima by case: (0.9077 7 5.8755 5 6.566 5 14.6451 5 3.0657 9 23.7349 5 0.3958 8 0.4509 5 6.2207 9 91.7251 5 24.8149 5 63.9445 6 1.6003 6 0.7634 4 13.7881 5 24.2937 5 39.2953 6 0.6958 5 11.1003 6 14.7072 4 4.8684 7 14.087 5 20.1809 5 24.8898 9 29.4966 5)
Average genome size in population (length): 68.065
Average program size in population (points): 69.065
Average percent parens in population: 0.015
Minimum age in population: 8.125
Maximum age in population: 12.3125
Average age in population: 10.556953125
Median age in population: 10.609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.118
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11612913
--- Timings ---
Current time: 1529616046702 milliseconds
Total Time:          26.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.4 seconds, 42.6%
Fitness Testing:     12.2 seconds, 45.6%
Report:               3.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 60195.97699999997
Test mean error for best: 30.09799
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0257      
Correct output: 83.8755230202  | Program output: 75.0257       
Correct output: 17.5659592301  | Program output: -37.0257      
Correct output: 80.3549464456  | Program output: 46.0257       
Correct output: 18.9343380135  | Program output: 24.0257       
Correct output: -40.1129564408 | Program output: 14.0257       
Correct output: 58.6042464959  | Program output: 98.0257       
Correct output: -20.5490699326 | Program output: -4.0257       
Correct output: -43.7793378574 | Program output: -53.0257      
Correct output: -129.7831210298 | Program output: -38.0257      
Correct output: 162.8148987114 | Program output: 79.0257       
Correct output: -132.002465512 | Program output: -68.0257      
Correct output: 114.6003035226 | Program output: 76.0257       
Correct output: -1.7534077088  | Program output: 2.0257        
Correct output: 89.2119408379  | Program output: 50.0257       
Correct output: 88.7062676802  | Program output: 30.0257       
Correct output: 164.295308609  | Program output: 66.0257       
Correct output: -0.7267472667  | Program output: 76.0257       
Correct output: 157.1002894768 | Program output: 87.0257       
Correct output: -95.7711719159 | Program output: -81.0257      
Correct output: 7.8684219635   | Program output: 76.0257       
Correct output: 25.0869728078  | Program output: -73.0257      
Correct output: -80.2389227568 | Program output: -60.0257      
Correct output: -46.1102240047 | Program output: -74.0257      
Correct output: -33.792764183  | Program output: 63.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction float_max} {:instruction float_inc} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction tag_float_9993} {:instruction integer_rot} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction integer_dup} {:instruction print_float} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_sub} {:instruction -82.02502929497277} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction integer_max} {:instruction float_flush} {:instruction float_add} {:instruction in1} {:instruction integer_mod} {:instruction integer_swap} {:instruction print_integer} {:instruction -39.831376628661495} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_mod} {:instruction float_cos} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dup_items})
Best program: (integer_dup_times integer_dup_items integer_dup float_min float_max float_inc in2 integer_fromfloat integer_rot integer_fromfloat integer_dec integer_mod float_yank tag_float_9993 integer_rot float_flush float_frominteger integer_dup float_stackdepth integer_swap integer_dup print_float print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 float_stackdepth integer_shove integer_stackdepth float_rot print_integer float_yankdup float_flush print_integer integer_flush integer_sub integer_add integer_sub -82.02502929497277 float_flush integer_dup_times integer_flush integer_max float_flush float_add in1 integer_mod integer_swap print_integer -39.831376628661495 integer_yankdup integer_dup float_mod float_cos integer_min integer_mod integer_dup_items)
Errors: [3.9334 10 8.8498 9 54.5917 11 34.3292 11 5.0914 11 54.1387 10 39.4215 8 16.5234 11 9.2464 9 91.7574 11 83.7892 12 63.9768 9 38.5746 11 3.7791 11 39.1862 10 58.6806 9 98.2696 10 76.7524 9 70.0746 9 14.7455 11 68.1573 9 98.1127 10 20.2132 9 27.9155 9 96.8185 10]
Total: 1425.9287
Mean: 28.518574
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2649.102901199991
Median total errors in population: 1439.8953999999997
Error averages by case: (62.82834409999989 10.01 55.60732499999977 10.1 106.02027820000076 10.885 77.59132890000022 10.826 49.8004430999995 11.014 95.84853089999986 11.154 84.10578990000032 9.734 71.6187832000001 10.781 67.30272589999983 10.933 145.3702560000006 11.444 127.06676119999835 12.223 123.32625869999978 10.136 84.83274110000008 10.99 45.73893779999987 10.536 82.51012419999986 10.661 99.48916080000006 10.105 139.90588689999908 9.682 116.18775149999962 10.662 114.8262332000002 10.574 78.25745080000004 11.127 108.40156699999923 9.749 145.59741589999942 10.485 80.90468800000019 10.625 85.47132080000011 10.688 134.7437980999986 10.625)
Error minima by case: (1.9077 8 5.8755 3 4.434 3 21.3549 3 3.0657 9 15.0 3 0.3958 8 0.5079 3 7.2207 9 37.0 3 52.8112 3 62.9915 4 35.6003 4 0.7314 2 30.2119 3 29.7063 3 67.0 4 0.2953 3 67.1003 4 13.7602 2 4.8684 7 3.087 3 19.2279 3 25.0532 9 12.7358 3)
Average genome size in population (length): 66.419
Average program size in population (points): 67.419
Average percent parens in population: 0.015
Minimum age in population: 9.75
Maximum age in population: 13.7421875
Average age in population: 12.0199921875
Median age in population: 12.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.158
Error (vector) diversity:			 0.169
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 13273838
--- Timings ---
Current time: 1529616049977 milliseconds
Total Time:          30.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.9 seconds, 42.9%
Fitness Testing:     13.6 seconds, 45.3%
Report:               3.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 60013.67719999997
Test mean error for best: 30.00684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0923249   
Correct output: 83.8755230202  | Program output: 75.0923249    
Correct output: 17.5659592301  | Program output: -37.0923249   
Correct output: 80.3549464456  | Program output: 46.0923249    
Correct output: 18.9343380135  | Program output: 24.0923249    
Correct output: -40.1129564408 | Program output: 14.0923249    
Correct output: 58.6042464959  | Program output: 98.0923249    
Correct output: -20.5490699326 | Program output: -4.0923249    
Correct output: -43.7793378574 | Program output: -53.0923249   
Correct output: -129.7831210298 | Program output: -38.0923249   
Correct output: 162.8148987114 | Program output: 79.0923249    
Correct output: -132.002465512 | Program output: -68.0923249   
Correct output: 114.6003035226 | Program output: 76.0923249    
Correct output: -1.7534077088  | Program output: 2.0923249     
Correct output: 89.2119408379  | Program output: 50.0923249    
Correct output: 88.7062676802  | Program output: 30.0923249    
Correct output: 164.295308609  | Program output: 66.0923249    
Correct output: -0.7267472667  | Program output: 76.0923249    
Correct output: 157.1002894768 | Program output: 87.0923249    
Correct output: -95.7711719159 | Program output: -81.0923249   
Correct output: 7.8684219635   | Program output: 76.0923249    
Correct output: 25.0869728078  | Program output: -73.0923249   
Correct output: -80.2389227568 | Program output: -60.0923249   
Correct output: -46.1102240047 | Program output: -74.0923249   
Correct output: -33.792764183  | Program output: 63.0923249    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction print_integer} {:instruction float_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_min integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec print_integer float_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 57 float_dec float_inc float_mod integer_mult float_min float_mult 57 float_min float_shove float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [4.0 7 8.7832 9 54.6583 10 34.2626 10 5.158 11 54.2053 10 39.4881 7 16.4567 9 9.313 9 91.6908 11 83.7226 12 63.9101 10 38.508 10 3.8457 12 39.1196 10 58.6139 10 98.203 8 76.8191 11 70.008 9 14.6788 11 68.2239 9 98.1793 10 20.1466 9 27.9821 9 96.8851 8]
Total: 1417.8617999999997
Mean: 28.357237
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2873.3755511000036
Median total errors in population: 1435.9324
Error averages by case: (74.59005789999976 9.793 64.64688949999984 9.755 116.34703450000102 10.94 85.71796019999981 10.705 59.32301839999947 11.024 105.41167209999927 10.968 91.5063776999998 9.353 80.6033564000003 10.754 79.82212280000002 10.902 158.16324330000032 11.218 133.9285260999987 12.232 134.46144510000036 9.966 91.56346499999991 10.779 52.84982000000004 10.692 90.48989729999944 10.609 107.43936769999988 10.038 146.67293479999915 9.711 123.71731979999939 10.703 121.66443149999996 10.346 89.57565210000035 11.086 115.92504259999966 9.525 153.79431679999968 10.829 93.18626949999974 10.491 95.48725140000046 10.403 143.3270785999982 10.339)
Error minima by case: (1.9077 7 5.8755 6 0.508 7 14.6451 6 2.0657 9 0.055 6 0.3958 7 0.4509 6 7.2207 9 90.7721 7 24.8149 6 62.9915 8 1.6003 7 0.6954 4 13.7881 6 20.2937 6 39.2953 7 0.7267 6 11.1003 7 13.7602 6 3.1316 7 0.029 7 19.2279 7 25.8898 9 0.7348 6)
Average genome size in population (length): 62.795
Average program size in population (points): 63.795
Average percent parens in population: 0.016
Minimum age in population: 10.96875
Maximum age in population: 15.59765625
Average age in population: 13.4773046875
Median age in population: 13.537109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.188
Error (vector) diversity:			 0.2
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 14844163
--- Timings ---
Current time: 1529616053117 milliseconds
Total Time:          33.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.3 seconds, 43.0%
Fitness Testing:     15.0 seconds, 45.1%
Report:               3.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 60042.66359999993
Test mean error for best: 30.02133
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09258     
Correct output: 83.8755230202  | Program output: 75.09258      
Correct output: 17.5659592301  | Program output: -37.09258     
Correct output: 80.3549464456  | Program output: 46.09258      
Correct output: 18.9343380135  | Program output: 24.09258      
Correct output: -40.1129564408 | Program output: 14.09258      
Correct output: 58.6042464959  | Program output: 98.09258      
Correct output: -20.5490699326 | Program output: -4.09258      
Correct output: -43.7793378574 | Program output: -53.09258     
Correct output: -129.7831210298 | Program output: -38.09258     
Correct output: 162.8148987114 | Program output: 79.09258      
Correct output: -132.002465512 | Program output: -68.09258     
Correct output: 114.6003035226 | Program output: 76.09258      
Correct output: -1.7534077088  | Program output: 2.09258       
Correct output: 89.2119408379  | Program output: 50.09258      
Correct output: 88.7062676802  | Program output: 30.09258      
Correct output: 164.295308609  | Program output: 66.09258      
Correct output: -0.7267472667  | Program output: 76.09258      
Correct output: 157.1002894768 | Program output: 87.09258      
Correct output: -95.7711719159 | Program output: -81.09258     
Correct output: 7.8684219635   | Program output: 76.09258      
Correct output: 25.0869728078  | Program output: -73.09258     
Correct output: -80.2389227568 | Program output: -60.09258     
Correct output: -46.1102240047 | Program output: -74.09258     
Correct output: -33.792764183  | Program output: 63.09258      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction print_integer} {:instruction float_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_sub} {:instruction -82.02502929497277} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_flush})
Best program: (integer_dup_times integer_dup_items integer_dup float_min integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec print_integer float_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 57 float_dec float_inc float_mod integer_mult float_min float_mult 57 float_min float_shove float_yank float_inc integer_inc integer_rot print_integer integer_flush integer_sub print_integer integer_flush integer_sub integer_add integer_sub -82.02502929497277 float_flush integer_dup_times integer_flush)
Errors: [4.0002 9 8.7829 10 54.6585 10 34.2624 10 5.1582 11 54.2055 9 39.4883 8 16.4565 10 9.3132 9 91.6905 11 83.7223 12 63.9099 9 38.5077 11 3.846 10 39.1194 10 58.6137 9 98.2027 9 76.8193 10 70.0077 9 14.6786 10 68.2242 9 98.1796 9 20.1463 7 27.9824 10 96.8853 8]
Total: 1415.8613
Mean: 28.317226
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3113.3839037999996
Median total errors in population: 1427.9217999999998
Error averages by case: (80.37837039999917 9.056 74.32407979999961 10.004 125.02912850000102 10.937 98.21509499999937 10.524 72.77000669999958 10.936 118.57426869999875 10.903 104.07013249999925 8.916 90.7198788000009 10.354 84.56458980000087 10.899 161.98394420000005 10.719 143.43480939999813 12.1 138.2006827000005 9.578 102.58477230000058 10.547 69.18578520000068 10.773 101.81589429999912 10.322 120.37655560000071 10.065 156.62577879999847 9.379 138.2821944999999 10.84 130.93153340000106 10.267 93.16888530000077 11.186 130.3301961999986 9.407 163.56251010000003 10.795 96.64298599999944 10.204 102.54438150000082 9.755 156.35344409999814 10.248)
Error minima by case: (0.0583 7 4.8415 5 4.434 7 14.6451 5 2.0657 9 39.257 6 0.6042 7 10.4509 5 5.2547 9 90.7694 6 5.8149 6 62.9576 7 5.3997 6 1.6109 4 13.7881 5 25.7063 5 2.7372 6 0.7487 6 0.1003 5 13.7072 7 3.1316 7 2.087 6 19.2041 6 23.9238 8 33.8148 6)
Average genome size in population (length): 60.107
Average program size in population (points): 61.107
Average percent parens in population: 0.017
Minimum age in population: 12.703125
Maximum age in population: 16.89453125
Average age in population: 14.96122265625
Median age in population: 15.0166015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.155
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 16348013
--- Timings ---
Current time: 1529616056151 milliseconds
Total Time:          36.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.6 seconds, 43.1%
Fitness Testing:     16.3 seconds, 45.0%
Report:               4.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 60042.66359999993
Test mean error for best: 30.02133
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09258     
Correct output: 83.8755230202  | Program output: 75.09258      
Correct output: 17.5659592301  | Program output: -37.09258     
Correct output: 80.3549464456  | Program output: 46.09258      
Correct output: 18.9343380135  | Program output: 24.09258      
Correct output: -40.1129564408 | Program output: 14.09258      
Correct output: 58.6042464959  | Program output: 98.09258      
Correct output: -20.5490699326 | Program output: -4.09258      
Correct output: -43.7793378574 | Program output: -53.09258     
Correct output: -129.7831210298 | Program output: -38.09258     
Correct output: 162.8148987114 | Program output: 79.09258      
Correct output: -132.002465512 | Program output: -68.09258     
Correct output: 114.6003035226 | Program output: 76.09258      
Correct output: -1.7534077088  | Program output: 2.09258       
Correct output: 89.2119408379  | Program output: 50.09258      
Correct output: 88.7062676802  | Program output: 30.09258      
Correct output: 164.295308609  | Program output: 66.09258      
Correct output: -0.7267472667  | Program output: 76.09258      
Correct output: 157.1002894768 | Program output: 87.09258      
Correct output: -95.7711719159 | Program output: -81.09258     
Correct output: 7.8684219635   | Program output: 76.09258      
Correct output: 25.0869728078  | Program output: -73.09258     
Correct output: -80.2389227568 | Program output: -60.09258     
Correct output: -46.1102240047 | Program output: -74.09258     
Correct output: -33.792764183  | Program output: 63.09258      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction print_integer} {:instruction float_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_sub} {:instruction -82.02502929497277} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_flush})
Best program: (integer_dup_times integer_dup_items integer_dup float_min integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec print_integer float_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 57 float_dec float_inc float_mod integer_mult float_min float_mult 57 float_min float_shove float_yank float_inc integer_inc integer_rot print_integer integer_flush integer_sub print_integer integer_flush float_dec integer_add integer_sub -82.02502929497277 float_flush integer_dup_times integer_flush)
Errors: [4.0002 9 8.7829 10 54.6585 10 34.2624 10 5.1582 11 54.2055 9 39.4883 8 16.4565 10 9.3132 9 91.6905 11 83.7223 12 63.9099 9 38.5077 11 3.846 10 39.1194 10 58.6137 9 98.2027 9 76.8193 10 70.0077 9 14.6786 10 68.2242 9 98.1796 9 20.1463 7 27.9824 10 96.8853 8]
Total: 1415.8613
Mean: 28.317226
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3156.251381399996
Median total errors in population: 1427.9217999999998
Error averages by case: (83.199860999999 8.951 76.13995339999973 9.903 127.88058890000121 10.955 99.0773000999994 10.411 74.01636099999969 10.843 119.6978774999985 10.645 104.79896099999915 8.501 95.26330430000135 10.3 88.202914300001 10.564 165.529135 10.594 144.15698269999794 12.045 140.57039950000086 9.445 103.10643790000069 10.52 70.06588560000084 10.749 103.50518099999891 10.228 121.08178210000106 9.968 157.27078439999826 9.342 138.9562042999999 10.655 131.78634750000157 9.969 95.49147770000107 11.181 131.09614059999856 9.384 167.03491870000008 10.662 100.02697389999939 9.866 105.06214080000075 9.484 158.0914681999983 9.977)
Error minima by case: (1.9077 6 6.8755 5 16.5403 7 11.6775 5 4.0657 9 12.068 6 0.6042 6 12.5166 5 7.2207 8 53.7506 6 4.7824 6 4.03 7 36.6003 6 1.3373 4 10.8205 5 28.6738 5 7.2953 6 0.7267 6 0.1003 5 13.6786 7 6.8427 7 24.0613 6 19.1464 6 16.0762 8 11.7478 6)
Average genome size in population (length): 60.346
Average program size in population (points): 61.346
Average percent parens in population: 0.017
Minimum age in population: 13.703125
Maximum age in population: 18.3056640625
Average age in population: 16.480384765625
Median age in population: 16.5048828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.13
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 17859963
--- Timings ---
Current time: 1529616059335 milliseconds
Total Time:          39.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.1 seconds, 43.4%
Fitness Testing:     17.6 seconds, 44.8%
Report:               4.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 60036.67459999999
Test mean error for best: 30.01834
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09236     
Correct output: 83.8755230202  | Program output: 75.09236      
Correct output: 17.5659592301  | Program output: -37.09236     
Correct output: 80.3549464456  | Program output: 46.09236      
Correct output: 18.9343380135  | Program output: 24.09236      
Correct output: -40.1129564408 | Program output: 14.09236      
Correct output: 58.6042464959  | Program output: 98.09236      
Correct output: -20.5490699326 | Program output: -4.09236      
Correct output: -43.7793378574 | Program output: -53.09236     
Correct output: -129.7831210298 | Program output: -38.09236     
Correct output: 162.8148987114 | Program output: 79.09236      
Correct output: -132.002465512 | Program output: -68.09236     
Correct output: 114.6003035226 | Program output: 76.09236      
Correct output: -1.7534077088  | Program output: 2.09236       
Correct output: 89.2119408379  | Program output: 50.09236      
Correct output: 88.7062676802  | Program output: 30.09236      
Correct output: 164.295308609  | Program output: 66.09236      
Correct output: -0.7267472667  | Program output: 76.09236      
Correct output: 157.1002894768 | Program output: 87.09236      
Correct output: -95.7711719159 | Program output: -81.09236     
Correct output: 7.8684219635   | Program output: 76.09236      
Correct output: 25.0869728078  | Program output: -73.09236     
Correct output: -80.2389227568 | Program output: -60.09236     
Correct output: -46.1102240047 | Program output: -74.09236     
Correct output: -33.792764183  | Program output: 63.09236      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_323} {:instruction float_sin} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction print_integer} {:instruction float_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_max} {:instruction 57} {:instruction float_min} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction 36} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_min integer_swap integer_swap float_cos tagged_323 float_sin in2 integer_rot float_frominteger float_dec print_integer float_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 57 float_dec float_inc float_mod integer_mult float_min float_max 57 float_min float_shove float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub 36 float_mod tagged_977 float_flush print_integer)
Errors: [4.0 8 8.7832 10 54.6583 9 34.2626 10 5.158 11 54.2053 10 39.4881 8 16.4567 8 9.313 9 91.6908 12 83.7225 12 63.9101 9 38.5079 10 3.8458 11 39.1196 10 58.6139 9 98.2029 8 76.8191 9 70.0079 9 14.6788 11 68.2239 8 98.1793 10 20.1466 8 27.9821 10 96.8851 8]
Total: 1413.8614999999998
Mean: 28.27723
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3619.3279193999974
Median total errors in population: 1421.9217999999998
Error averages by case: (102.94271499999907 8.965 96.1127092999992 9.862 147.12568769999956 10.998 117.7210105999993 10.184 92.27189399999928 10.812 137.004530699999 10.321 122.51338799999883 8.041 113.76421200000107 10.277 107.74521390000122 10.054 183.63141680000018 10.689 163.22174409999815 12.027 158.19564230000083 9.387 122.12130350000162 10.613 88.53053080000119 10.774 123.11604529999914 10.347 139.53276000000028 9.915 176.9162292999986 9.375 156.1819447999997 10.583 150.9112644000004 9.553 114.0719428000006 11.058 148.44330469999846 9.388 185.6116767999999 10.557 119.49596249999836 9.233 124.29098210000096 9.559 175.78880799999882 9.493)
Error minima by case: (0.9077 6 5.7995 5 7.0398 6 22.3549 5 3.2444 9 11.9195 5 0.6042 6 15.4565 5 6.2207 8 77.7506 6 42.8149 6 62.9099 7 5.3997 6 0.4316 4 30.7881 5 30.7063 5 44.2953 5 0.2733 6 37.1003 5 13.6786 7 5.8684 8 11.0094 7 19.1463 6 5.9223 8 18.2397 6)
Average genome size in population (length): 61.096
Average program size in population (points): 62.096
Average percent parens in population: 0.016
Minimum age in population: 15.3671875
Maximum age in population: 19.85986328125
Average age in population: 18.09069970703125
Median age in population: 18.12939453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.143
Error (vector) diversity:			 0.161
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 19389163
--- Timings ---
Current time: 1529616062455 milliseconds
Total Time:          42.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.5 seconds, 43.5%
Fitness Testing:     19.0 seconds, 44.7%
Report:               4.9 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 60036.67459999999
Test mean error for best: 30.01834
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09236     
Correct output: 83.8755230202  | Program output: 75.09236      
Correct output: 17.5659592301  | Program output: -37.09236     
Correct output: 80.3549464456  | Program output: 46.09236      
Correct output: 18.9343380135  | Program output: 24.09236      
Correct output: -40.1129564408 | Program output: 14.09236      
Correct output: 58.6042464959  | Program output: 98.09236      
Correct output: -20.5490699326 | Program output: -4.09236      
Correct output: -43.7793378574 | Program output: -53.09236     
Correct output: -129.7831210298 | Program output: -38.09236     
Correct output: 162.8148987114 | Program output: 79.09236      
Correct output: -132.002465512 | Program output: -68.09236     
Correct output: 114.6003035226 | Program output: 76.09236      
Correct output: -1.7534077088  | Program output: 2.09236       
Correct output: 89.2119408379  | Program output: 50.09236      
Correct output: 88.7062676802  | Program output: 30.09236      
Correct output: 164.295308609  | Program output: 66.09236      
Correct output: -0.7267472667  | Program output: 76.09236      
Correct output: 157.1002894768 | Program output: 87.09236      
Correct output: -95.7711719159 | Program output: -81.09236     
Correct output: 7.8684219635   | Program output: 76.09236      
Correct output: 25.0869728078  | Program output: -73.09236     
Correct output: -80.2389227568 | Program output: -60.09236     
Correct output: -46.1102240047 | Program output: -74.09236     
Correct output: -33.792764183  | Program output: 63.09236      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_323} {:instruction float_sin} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction print_integer} {:instruction float_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_max} {:instruction 57} {:instruction float_min} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction 36} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_min integer_swap integer_swap float_cos tagged_323 float_sin in2 integer_rot float_frominteger float_dec print_integer float_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 57 float_dec float_inc float_mod integer_mult float_min float_max 57 float_min float_shove float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub 36 float_mod tagged_977 float_flush print_integer)
Errors: [4.0 8 8.7832 10 54.6583 9 34.2626 10 5.158 11 54.2053 10 39.4881 8 16.4567 8 9.313 9 91.6908 12 83.7225 12 63.9101 9 38.5079 10 3.8458 11 39.1196 10 58.6139 9 98.2029 8 76.8191 9 70.0079 9 14.6788 11 68.2239 8 98.1793 10 20.1466 8 27.9821 10 96.8851 8]
Total: 1413.8614999999998
Mean: 28.27723
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3419.6346235999818
Median total errors in population: 1417.8617999999997
Error averages by case: (88.71292879999949 8.398 91.75517849999989 9.886 134.248061699999 10.492 114.80354250000028 9.988 88.76451089999973 10.841 133.63362269999976 10.053 119.65267179999971 7.767 99.58518720000022 9.94 93.61331650000007 9.445 169.3588905999998 10.967 159.9946484999981 11.994 144.20959719999905 9.473 118.68991270000126 10.671 78.62613760000032 10.978 119.22567640000027 10.338 136.86654569999968 9.782 173.11079899999865 9.056 153.74656839999892 10.64 147.77381510000077 9.307 99.27995789999983 10.785 145.91136479999867 9.281 173.82427170000017 10.113 104.0939475999985 8.655 110.5934881999994 9.55 172.27398160000007 8.886)
Error minima by case: (1.9077 6 6.8755 6 17.5335 6 11.6451 6 4.0982 9 15.0 6 0.6042 5 3.0 6 7.2207 7 37.0 6 70.7824 6 62.9101 7 22.5678 7 0.2791 5 2.7881 6 3.2937 6 67.0 7 0.7847 6 65.0678 6 13.6788 5 6.8684 8 25.0545 6 19.1466 6 25.8898 8 31.7603 6)
Average genome size in population (length): 59.97
Average program size in population (points): 60.97
Average percent parens in population: 0.017
Minimum age in population: 17.466796875
Maximum age in population: 21.538330078125
Average age in population: 19.64543701171875
Median age in population: 19.690185546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.127
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 20888963
--- Timings ---
Current time: 1529616065510 milliseconds
Total Time:          45.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.8 seconds, 43.5%
Fitness Testing:     20.4 seconds, 44.7%
Report:               5.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 60036.67459999999
Test mean error for best: 30.01834
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09236     
Correct output: 83.8755230202  | Program output: 75.09236      
Correct output: 17.5659592301  | Program output: -37.09236     
Correct output: 80.3549464456  | Program output: 46.09236      
Correct output: 18.9343380135  | Program output: 24.09236      
Correct output: -40.1129564408 | Program output: 14.09236      
Correct output: 58.6042464959  | Program output: 98.09236      
Correct output: -20.5490699326 | Program output: -4.09236      
Correct output: -43.7793378574 | Program output: -53.09236     
Correct output: -129.7831210298 | Program output: -38.09236     
Correct output: 162.8148987114 | Program output: 79.09236      
Correct output: -132.002465512 | Program output: -68.09236     
Correct output: 114.6003035226 | Program output: 76.09236      
Correct output: -1.7534077088  | Program output: 2.09236       
Correct output: 89.2119408379  | Program output: 50.09236      
Correct output: 88.7062676802  | Program output: 30.09236      
Correct output: 164.295308609  | Program output: 66.09236      
Correct output: -0.7267472667  | Program output: 76.09236      
Correct output: 157.1002894768 | Program output: 87.09236      
Correct output: -95.7711719159 | Program output: -81.09236     
Correct output: 7.8684219635   | Program output: 76.09236      
Correct output: 25.0869728078  | Program output: -73.09236     
Correct output: -80.2389227568 | Program output: -60.09236     
Correct output: -46.1102240047 | Program output: -74.09236     
Correct output: -33.792764183  | Program output: 63.09236      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction print_integer} {:instruction float_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_min} {:instruction float_max} {:instruction 57} {:instruction float_min} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction 36} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_min integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec print_integer float_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_dec float_inc float_mod integer_mult float_min float_mult 57 57 float_dec float_inc float_mod integer_dup integer_mult float_min float_max 57 float_min float_shove float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub 36 float_mod tagged_977 float_flush print_integer)
Errors: [4.0 8 8.7832 10 54.6583 9 34.2626 10 5.158 11 54.2053 10 39.4881 8 16.4567 8 9.313 9 91.6908 12 83.7225 12 63.9101 9 38.5079 10 3.8458 11 39.1196 10 58.6139 9 98.2029 8 76.8191 9 70.0079 9 14.6788 11 68.2239 8 98.1793 10 20.1466 8 27.9821 10 96.8851 8]
Total: 1413.8614999999998
Mean: 28.27723
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3241.0139374999844
Median total errors in population: 1415.9218999999998
Error averages by case: (82.52788789999968 8.782 83.5252634 9.972 128.24943460000014 10.085 106.774898600001 10.044 80.21387320000025 10.918 125.53448779999911 9.672 111.39572919999951 8.011 92.40900200000019 9.867 87.46155339999981 9.183 163.46338129999887 11.082 152.83846899999827 11.974 138.174637299999 9.316 110.98177300000083 10.838 75.51534920000022 10.593 111.2566584000001 10.252 129.05541580000022 9.445 166.0676574999984 9.049 145.71948880000016 10.279 140.24240200000062 9.247 92.93480219999971 10.516 137.82782919999832 9.141 167.8670024000011 9.657 97.7422714999989 7.974 104.50174349999921 9.912 164.42192629999911 8.502)
Error minima by case: (2.9077 6 7.7825 7 16.473 8 11.6451 7 4.0982 8 33.4607 7 0.6042 5 15.4565 7 8.2207 8 90.6905 7 70.7824 7 62.9099 8 22.5678 8 0.4316 6 2.7881 7 3.2937 7 72.2628 7 1.4135 8 65.0678 7 13.6786 8 6.7754 8 23.994 8 19.1463 6 26.8898 8 30.8361 6)
Average genome size in population (length): 59.358
Average program size in population (points): 60.358
Average percent parens in population: 0.017
Minimum age in population: 19.096435546875
Maximum age in population: 23.03369140625
Average age in population: 21.21699072265625
Median age in population: 21.2431640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.107
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 22373138
--- Timings ---
Current time: 1529616068881 milliseconds
Total Time:          48.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.2 seconds, 43.5%
Fitness Testing:     21.8 seconds, 44.8%
Report:               5.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3416.3791283999967
Median total errors in population: 1415.8613
Error averages by case: (89.52471309999967 8.84 91.39425050000057 10.107 134.8548654000001 9.79 114.43554650000152 10.191 88.11970150000036 11.066 133.05692019999944 9.753 119.15279459999988 8.402 98.60654949999979 9.446 94.41753439999974 9.389 169.7541143999993 11.419 160.03196049999917 12.051 144.69260439999874 9.369 118.5823869000001 10.798 78.76963290000012 10.656 118.87541640000049 10.16 136.5152372999996 9.328 173.15300779999907 8.921 153.2146161999997 9.894 147.5573865999994 9.291 99.83819679999928 10.645 145.37584369999877 8.927 174.1887647000006 9.627 104.60471559999834 7.925 111.33875019999836 10.229 171.71061829999982 8.389)
Error minima by case: (1.9437 7 6.8395 8 18.434 8 11.6451 8 4.158 9 16.0 8 0.6042 7 2.0 8 7.2567 7 36.0 9 69.8149 9 62.9099 8 21.6003 9 0.6608 7 2.7881 8 3.2937 8 68.0 8 0.3656 8 64.1003 8 13.6786 8 8.9608 8 10.913 8 19.1464 6 25.9258 9 32.7002 7)
Average genome size in population (length): 58.056
Average program size in population (points): 59.056
Average percent parens in population: 0.017
Minimum age in population: 20.096435546875
Maximum age in population: 24.33880615234375
Average age in population: 22.72572253417969
Median age in population: 22.74606323242188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.096
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 23824688
--- Timings ---
Current time: 1529616071941 milliseconds
Total Time:          51.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.5 seconds, 43.4%
Fitness Testing:     23.2 seconds, 44.6%
Report:               6.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3261.832839200001
Median total errors in population: 1413.8614999999998
Error averages by case: (85.41220040000002 8.384 83.65889770000076 10.124 130.78772869999852 9.356 106.88072940000094 10.167 79.92523400000032 11.054 125.33661510000096 10.202 111.40465720000122 8.41 93.80002659999907 8.478 90.32308409999871 9.404 166.0879602000002 11.939 153.02757970000184 12.116 140.91699139999793 9.371 111.16635739999855 10.294 70.91634090000073 11.103 111.42005320000196 10.152 129.2131170999981 9.337 166.26606710000118 8.453 145.51185519999726 9.396 140.43610079999837 9.279 95.82976369999889 11.133 137.59258319999861 8.399 170.20261289999956 10.123 100.60093289999787 8.338 107.28502179999806 10.24 164.22832850000185 8.35)
Error minima by case: (2.0 7 6.7832 9 16.8005 8 32.2626 9 4.1017 9 39.0206 9 22.6042 7 15.4567 7 7.313 7 90.6908 9 81.7225 9 62.9101 8 36.5079 9 0.661 8 37.1196 9 52.7063 8 96.2029 8 0.3656 8 68.0079 8 13.6788 9 7.0441 8 10.913 8 19.1466 7 25.9821 9 32.7004 7)
Average genome size in population (length): 57.375
Average program size in population (points): 58.375
Average percent parens in population: 0.017
Minimum age in population: 21.811279296875
Maximum age in population: 26.07037353515625
Average age in population: 24.17865213012695
Median age in population: 24.25576782226562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 83
Genome diversity (% unique Plush genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.077
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 25259063
--- Timings ---
Current time: 1529616075008 milliseconds
Total Time:          55.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.9 seconds, 43.4%
Fitness Testing:     24.5 seconds, 44.6%
Report:               6.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3317.4025159000084
Median total errors in population: 1413.8614999999998
Error averages by case: (86.58453780000004 8.367 86.17356190000082 10.082 132.88516729999853 9.339 109.70668160000098 10.153 83.01190780000023 11.064 128.27345490000107 10.217 114.42292490000133 8.405 96.5348144999991 8.389 91.60317669999893 9.4 167.69503220000038 11.929 155.45047430000196 12.076 142.46013719999837 9.326 113.82904529999834 10.211 70.44420810000038 11.016 114.18940350000192 10.101 131.96519669999805 9.298 168.6684577000013 8.366 148.628166699997 9.313 142.89703409999814 9.278 97.4190350999988 11.134 140.72058959999916 8.392 172.40063149999915 10.083 102.26500079999772 8.34 109.10859569999796 10.244 167.2322800000022 8.31)
Error minima by case: (1.9437 7 6.8395 7 18.434 8 11.6451 8 4.1577 9 39.0206 8 22.6042 7 15.4567 8 7.2567 7 90.6908 8 17.2775 8 62.9101 8 22.6003 8 0.661 6 2.7881 8 3.2937 8 2.7971 7 0.3656 8 30.9921 8 13.6788 9 8.9608 8 10.913 8 19.1466 7 25.9258 8 32.7004 7)
Average genome size in population (length): 56.725
Average program size in population (points): 57.725
Average percent parens in population: 0.017
Minimum age in population: 22.811279296875
Maximum age in population: 27.62510681152344
Average age in population: 25.68202555847168
Median age in population: 25.73287963867188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.073
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 26677238
--- Timings ---
Current time: 1529616078160 milliseconds
Total Time:          58.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.3 seconds, 43.4%
Fitness Testing:     25.9 seconds, 44.5%
Report:               6.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_min} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 float_yankdup float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_min 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3321.898197300006
Median total errors in population: 1413.8614999999998
Error averages by case: (90.15712780000004 8.448 84.26984150000108 10.05 135.66111989999868 9.39 107.74915230000089 10.128 80.53615319999993 11.022 125.60509480000117 10.111 112.49373670000139 8.4 99.12108979999893 8.553 95.04955669999886 9.377 170.51547450000007 11.747 153.75444220000162 12.052 145.33364799999836 9.318 111.94820969999836 10.187 73.35073740000011 10.816 112.27284970000166 10.087 130.0197807999982 9.262 167.05217440000052 8.417 146.7923528999977 9.379 141.14140549999823 9.269 100.38365719999884 11.142 138.8589906999987 8.471 175.04537539999959 9.866 105.22851649999852 8.233 111.98476709999822 10.097 165.42894260000193 8.322)
Error minima by case: (2.9437 6 6.973 5 5.5264 6 14.9858 6 4.1577 9 39.257 6 22.6042 7 15.4567 6 8.2567 7 90.6908 6 82.7225 5 62.9101 7 37.5079 6 1.6109 5 28.6998 6 47.6885 6 97.2029 6 23.8191 6 69.0079 6 13.6788 5 15.2239 7 1.9946 5 19.1466 6 26.9258 8 36.1406 6)
Average genome size in population (length): 55.526
Average program size in population (points): 56.526
Average percent parens in population: 0.018
Minimum age in population: 23.811279296875
Maximum age in population: 28.89269256591797
Average age in population: 27.16822561645508
Median age in population: 27.22952270507812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.084
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 28065413
--- Timings ---
Current time: 1529616081210 milliseconds
Total Time:          61.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.6 seconds, 43.5%
Fitness Testing:     27.2 seconds, 44.5%
Report:               7.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_add} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_add float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3353.9753926000026
Median total errors in population: 1413.8614999999998
Error averages by case: (88.46104460000008 8.78 87.7261573000005 10.06 134.14529319999906 9.728 110.79376460000111 10.146 84.00302190000036 11.023 129.16229160000108 9.819 116.08193570000138 8.433 97.93990209999929 9.228 93.48169369999927 9.392 168.63620729999886 11.143 156.6532162000006 12.033 143.752437999998 9.359 114.95265229999853 10.228 76.44527980000026 10.229 115.1286721000016 10.026 132.68565949999896 9.319 169.72378029999908 8.749 150.08762579999825 9.721 143.97139739999858 9.283 99.01226109999892 11.11 142.18005209999873 8.839 173.9104138000005 9.287 103.66835270000003 8.002 110.71236259999827 9.77 168.56291690000077 8.39)
Error minima by case: (0.0563 7 4.8395 6 18.434 6 11.6451 6 4.1577 9 16.0 6 0.6042 7 2.0 6 5.2567 7 36.0 7 70.8149 7 62.9104 7 22.6003 7 2.8455 5 2.7881 6 3.2937 6 68.0 6 6.3654 6 65.1003 7 13.6791 6 14.9606 7 10.913 6 19.1469 6 23.9258 8 26.7006 6)
Average genome size in population (length): 52.722
Average program size in population (points): 53.722
Average percent parens in population: 0.019
Minimum age in population: 25.6871337890625
Maximum age in population: 30.63980865478516
Average age in population: 28.66488990020752
Median age in population: 28.70737838745117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 155
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.093
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 29383538
--- Timings ---
Current time: 1529616084305 milliseconds
Total Time:          64.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.0 seconds, 43.5%
Fitness Testing:     28.6 seconds, 44.5%
Report:               7.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_mod} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_mod in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3657.928106100003
Median total errors in population: 1411.8619000000003
Error averages by case: (100.9339454000002 9.162 100.06952980000118 10.104 146.24778149999864 10.096 123.07038880000124 10.203 96.8354570999999 11.071 141.32130470000016 9.482 127.75861400000149 8.395 110.75147929999858 10.03 105.73576739999878 9.307 180.12349289999761 10.471 168.0392363999994 12.017 155.18752899999728 9.324 127.01759419999819 10.333 94.33654739999974 9.538 127.47397320000168 10.03 145.0763217000004 9.364 181.12103399999717 9.131 161.58474549999949 10.05 155.63209409999956 9.294 110.79666569999847 11.096 153.80609769999853 9.211 185.3145984000012 8.57 115.6290803000022 7.669 122.50994359999814 9.34 179.8358839999999 8.431)
Error minima by case: (2.9077 7 7.7826 6 18.658 7 11.6451 6 4.1578 10 39.0209 7 0.6042 7 15.457 6 8.2207 7 49.7742 7 70.8149 7 51.9936 8 22.6003 7 0.6613 6 2.7881 6 3.2937 6 72.2953 7 0.3653 7 65.1003 6 13.6791 7 8.9605 8 26.179 6 0.23 6 26.8898 8 32.7007 7)
Average genome size in population (length): 49.611
Average program size in population (points): 50.611
Average percent parens in population: 0.020
Minimum age in population: 28.1088695526123
Maximum age in population: 31.98467063903809
Average age in population: 30.11599280929565
Median age in population: 30.13066959381104
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 248
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 248
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.088
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 30623913
--- Timings ---
Current time: 1529616087385 milliseconds
Total Time:          67.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.4 seconds, 43.7%
Fitness Testing:     29.9 seconds, 44.4%
Report:               8.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_add} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_add float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3225.7391829999992
Median total errors in population: 1411.8619000000003
Error averages by case: (88.20987050000019 9.229 78.75591879999996 10.133 133.77854849999883 10.147 102.11120790000109 10.196 75.04220210000074 11.077 120.47911290000125 9.409 106.74759880000137 8.361 98.68566929999899 10.136 93.09896399999934 9.314 168.6055987999976 10.349 148.41957070000026 12.04 143.46377639999736 9.294 106.37800519999826 10.325 73.14480420000056 9.393 106.66292720000135 10.034 124.56749559999957 9.357 161.72955919999714 9.181 140.9167789999985 10.099 135.76876319999863 9.291 98.49565569999862 11.084 133.02166999999858 9.246 173.22941290000156 8.444 103.28885010000201 7.582 110.05036919999841 9.293 159.67385279999985 8.399)
Error minima by case: (2.9077 7 7.7829 7 16.7252 8 22.3549 7 4.1237 9 16.0 7 0.6042 7 15.4565 7 8.2207 8 90.6905 9 81.0 8 62.9099 8 37.5077 8 0.3373 5 31.2119 7 30.7063 7 68.0 7 0.5511 7 69.0077 8 13.6786 8 7.1817 8 24.4102 8 19.1463 7 26.8898 8 33.7787 7)
Average genome size in population (length): 48.995
Average program size in population (points): 49.995
Average percent parens in population: 0.020
Minimum age in population: 29.1088695526123
Maximum age in population: 33.47245693206787
Average age in population: 31.52596622371674
Median age in population: 31.57736492156982
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 206
Genome diversity (% unique Plush genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.086
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 31848913
--- Timings ---
Current time: 1529616090363 milliseconds
Total Time:          70.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.8 seconds, 43.7%
Fitness Testing:     31.2 seconds, 44.3%
Report:               8.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_max} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_max float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3237.739184
Median total errors in population: 1411.8619000000003
Error averages by case: (85.98323830000022 9.191 80.41275300000044 10.091 131.92914809999874 10.118 103.83434540000117 10.169 77.93845790000071 11.047 123.33344570000133 9.369 109.5176009000015 8.336 95.58970609999916 10.094 90.8871302999994 9.275 167.4598623999974 10.339 149.8296382000003 12.026 142.1373190999972 9.279 107.94272759999812 10.288 74.03510240000081 9.368 108.35411230000143 10.031 126.29197479999931 9.312 163.1610400999969 9.142 143.95799039999835 10.08 137.17985659999835 9.279 97.05598829999883 11.072 136.03039779999844 9.221 171.64301930000136 8.411 101.96382130000183 7.563 107.95364179999875 9.241 162.60286589999976 8.372)
Error minima by case: (2.9077 7 7.7829 4 16.7252 5 22.3549 5 4.1578 9 39.0209 5 0.6042 7 15.457 5 8.2207 8 90.691 6 78.0 5 62.9104 5 37.5077 5 0.4316 4 31.2119 5 29.0 5 65.0 5 0.3653 5 69.0077 5 13.6791 5 7.1817 9 26.0063 5 19.1468 5 26.8898 8 32.7007 5)
Average genome size in population (length): 49.024
Average program size in population (points): 50.024
Average percent parens in population: 0.020
Minimum age in population: 30.1088695526123
Maximum age in population: 34.81861209869385
Average age in population: 32.92808437204361
Median age in population: 32.953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 139
Genome diversity (% unique Plush genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.085
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 33074563
--- Timings ---
Current time: 1529616093354 milliseconds
Total Time:          73.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.1 seconds, 43.8%
Fitness Testing:     32.5 seconds, 44.2%
Report:               8.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_swap} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_tan} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_sub float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_swap float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_tan print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3172.876669099999
Median total errors in population: 1411.8619000000003
Error averages by case: (83.0746711000002 9.164 78.34243050000083 10.077 128.92944679999903 10.089 101.81602330000115 10.152 74.85557890000028 11.039 120.3992149000013 9.379 106.51604350000153 8.315 94.30807569999874 10.09 88.0018074999991 9.238 163.99179249999744 10.331 147.91374610000028 12.008 138.64474649999747 9.264 105.93315669999812 10.27 73.58351889999997 9.376 106.34452490000128 10.006 124.3168641999996 9.31 161.27384719999705 9.134 140.93541709999863 10.062 135.2316656999981 9.266 93.40739259999854 11.06 133.00153989999842 9.198 168.65208220000133 8.41 98.27176930000215 7.556 105.07218559999852 9.2 159.70112749999979 8.364)
Error minima by case: (2.9077 7 7.7829 9 16.8005 8 22.3549 8 4.1577 10 40.113 9 0.6042 7 15.457 9 8.2207 8 90.691 9 82.7223 9 62.9104 8 37.5077 9 1.3373 7 31.2119 9 30.7063 9 97.2027 8 0.7267 9 69.0077 8 13.6791 10 7.0441 8 25.087 8 19.1468 7 26.8898 8 33.7928 7)
Average genome size in population (length): 49.021
Average program size in population (points): 50.021
Average percent parens in population: 0.020
Minimum age in population: 31.7573299407959
Maximum age in population: 36.35073375701904
Average age in population: 34.37939442229271
Median age in population: 34.44068729877472
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.082
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 34300138
--- Timings ---
Current time: 1529616096381 milliseconds
Total Time:          76.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.5 seconds, 43.8%
Fitness Testing:     33.7 seconds, 44.1%
Report:               9.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction float_dup_times} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items float_shove float_div integer_swap integer_swap integer_swap integer_swap float_cos tagged_200 float_dup_times in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2822.333288799999
Median total errors in population: 1411.8619000000003
Error averages by case: (66.36567290000023 9.16 65.31221839999922 10.052 113.02814109999923 10.063 89.1124808000012 10.131 62.01994640000152 11.012 108.37783830000134 9.355 93.84852450000157 8.263 75.83114970000032 10.076 71.37525980000039 9.179 148.72067259999739 10.342 135.93213270000132 12.004 122.90473499999754 9.231 93.31878849999809 10.245 59.01715520000088 9.353 93.71395960000089 9.963 111.94373149999981 9.275 149.48222189999694 9.092 129.16070029999753 10.015 123.0709175999979 9.236 76.82854710000008 11.041 121.06120379999832 9.154 153.4517851000013 8.39 81.78820330000104 7.534 88.76380769999912 9.162 148.2194949999998 8.356)
Error minima by case: (2.9647 7 7.7834 8 16.7252 8 22.3549 9 3.1577 9 47.3576 9 0.6042 7 14.457 9 8.2777 7 89.6911 9 82.7228 10 61.9104 8 37.5082 9 0.4316 9 31.2119 9 30.7063 8 97.2032 8 1.4135 9 69.0082 8 12.6791 9 7.1817 8 26.0063 7 18.1469 7 26.9468 8 33.9625 7)
Average genome size in population (length): 49.078
Average program size in population (points): 50.078
Average percent parens in population: 0.020
Minimum age in population: 33.06146240234375
Maximum age in population: 37.65427303314209
Average age in population: 35.78878570461273
Median age in population: 35.83159393072128
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 56
Genome diversity (% unique Plush genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.077
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 35527113
--- Timings ---
Current time: 1529616099332 milliseconds
Total Time:          79.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.8 seconds, 43.9%
Fitness Testing:     35.0 seconds, 44.1%
Report:               9.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_dec} {:instruction tagged_200} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction float_cos} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_tan} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction print_integer})
Best program: (integer_dup_times float_dup integer_dup float_div integer_swap integer_swap float_dec tagged_200 tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot print_integer print_integer float_rot integer_sub print_float float_cos float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_tan float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3217.4444488999993
Median total errors in population: 1411.8619000000003
Error averages by case: (86.29794420000026 9.233 79.31738760000022 10.089 131.87395609999854 10.124 102.89287940000123 10.171 75.94414560000061 11.067 121.54284780000135 9.396 107.51679060000164 8.345 96.17364929999896 10.103 91.19596319999917 9.283 166.8730073999974 10.369 149.13771310000027 12.033 141.63853459999692 9.295 106.91077429999795 10.296 73.54915100000069 9.386 107.26965290000147 10.023 125.20020019999922 9.349 162.47359979999683 9.159 141.95651589999852 10.076 136.22974269999858 9.283 96.56194569999849 11.099 134.01006579999836 9.234 171.5111243000016 8.422 101.38998780000225 7.585 108.15395229999814 9.247 160.7479172999998 8.408)
Error minima by case: (2.9077 7 7.7835 8 16.8005 8 22.3549 9 4.1577 10 39.0209 9 0.6042 7 15.457 9 8.2207 8 90.6911 9 82.7228 9 62.9104 8 37.5082 9 0.6613 7 31.2119 8 30.7063 9 97.2033 8 0.3653 9 69.0082 8 13.6791 9 7.0441 9 25.8232 7 19.1469 7 26.8898 8 32.7007 7)
Average genome size in population (length): 49.08
Average program size in population (points): 50.08
Average percent parens in population: 0.020
Minimum age in population: 34.06146240234375
Maximum age in population: 39.19941359758377
Average age in population: 37.19918188548088
Median age in population: 37.23350241780281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.085
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 36754113
--- Timings ---
Current time: 1529616102294 milliseconds
Total Time:          82.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.2 seconds, 43.9%
Fitness Testing:     36.2 seconds, 44.0%
Report:               9.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_frominteger} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_frominteger tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3155.9049024000024
Median total errors in population: 1411.8619000000003
Error averages by case: (84.41122540000022 9.24 76.55808309999995 10.101 130.11859419999877 10.163 100.02903260000106 10.226 73.13119880000109 11.092 118.78808440000125 9.446 104.70995570000134 8.414 92.94377499999918 10.13 89.32302329999943 9.363 165.1508308999976 10.403 146.41310420000053 12.064 139.8932772999974 9.349 104.24036649999833 10.352 68.4443004000009 9.442 104.56009510000132 10.082 122.53235229999949 9.371 159.77860219999712 9.177 139.24586079999833 10.131 133.7100086999983 9.338 94.73055049999898 11.099 131.2982195999985 9.26 169.70913140000124 8.517 99.54886050000205 7.7 106.33768479999846 9.287 158.07568469999993 8.476)
Error minima by case: (2.9077 7 7.0225 9 16.8005 8 10.5431 8 3.1578 10 39.0208 9 0.6042 7 14.457 9 8.2207 7 89.691 8 70.8149 10 61.9104 8 22.6003 9 0.6612 7 1.6861 8 2.1918 8 72.2953 7 0.3653 9 65.1003 8 12.6791 9 7.0441 9 24.4102 8 18.1468 7 26.8898 8 32.7006 7)
Average genome size in population (length): 49.627
Average program size in population (points): 50.627
Average percent parens in population: 0.020
Minimum age in population: 35.06146240234375
Maximum age in population: 40.54457226395607
Average age in population: 38.63596757790446
Median age in population: 38.67598143219948
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.107
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 37994838
--- Timings ---
Current time: 1529616105340 milliseconds
Total Time:          85.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.5 seconds, 44.0%
Fitness Testing:     37.6 seconds, 44.0%
Report:              10.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction float_dup_times} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction tagged_850} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 float_dup_times in2 integer_rot float_frominteger float_dec integer_stackdepth float_min 92 print_float print_integer print_integer float_rot integer_sub integer_dec integer_sub float_max integer_yank float_mult 57 57 tagged_850 float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove float_sub print_float integer_shove integer_dup_times integer_dup_times float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3339.1469142999995
Median total errors in population: 1411.8619000000003
Error averages by case: (89.98552790000026 9.268 85.31460039999979 10.152 135.6418721999989 10.172 108.63480240000118 10.213 81.80282360000112 11.088 127.05648000000137 9.434 113.29391670000166 8.4 99.84267629999948 10.14 94.86514839999958 9.36 170.22973349999737 10.404 154.43271970000046 12.061 145.05044419999703 9.356 112.72557789999793 10.364 79.17849240000089 9.436 113.13457070000146 10.068 130.99501039999953 9.372 167.70618849999664 9.197 147.4493704999986 10.124 141.83706439999852 9.343 100.14294659999905 11.123 139.5679185999983 9.261 175.11798620000164 8.486 104.9913896000019 7.641 111.82278369999848 9.326 166.09386949999987 8.444)
Error minima by case: (0.9647 7 5.8185 9 16.7252 8 22.3549 9 4.1577 10 39.3533 9 0.6042 7 15.457 9 6.2777 8 90.691 9 80.7579 10 62.9104 8 35.5433 9 0.4316 7 31.2119 9 30.7063 8 95.2383 7 0.6958 9 67.0433 7 13.6791 10 7.1817 8 11.2574 8 19.1468 7 24.9468 8 33.7928 7)
Average genome size in population (length): 49.464
Average program size in population (points): 50.464
Average percent parens in population: 0.020
Minimum age in population: 36.06146240234375
Maximum age in population: 41.94665692746639
Average age in population: 40.05437114533782
Median age in population: 40.07190667837858
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.09
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 39231463
--- Timings ---
Current time: 1529616108261 milliseconds
Total Time:          88.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.9 seconds, 44.0%
Fitness Testing:     38.8 seconds, 44.0%
Report:              10.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_max} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_max in2 integer_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_yank float_inc integer_inc 57 57 float_dec float_inc integer_fromfloat float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3060.7423872
Median total errors in population: 1411.8619000000003
Error averages by case: (81.88387120000026 9.19 71.09328269999953 10.083 128.1127376999988 10.098 94.83033520000114 10.162 67.77636930000148 11.05 113.82287160000142 9.38 99.68359720000164 8.33 93.2577646999993 10.084 86.81699499999982 9.267 162.87919549999748 10.36 141.16522210000105 12.037 137.38290639999718 9.287 98.92184339999801 10.292 66.54475820000118 9.363 99.38260140000104 10.033 117.55112659999973 9.309 154.6728291999969 9.134 134.65562349999766 10.07 128.3750392999979 9.275 92.03629669999914 11.09 126.61912209999838 9.219 168.02691910000146 8.408 97.00342810000178 7.597 103.96224179999868 9.224 153.55940919999983 8.384)
Error minima by case: (0.9077 7 5.8755 9 25.3164 8 22.3549 9 4.1237 10 39.0208 8 0.6042 7 15.4911 9 6.2207 7 90.7251 10 80.8149 10 62.9445 8 35.6003 9 0.6613 7 31.2119 9 30.7063 8 95.2953 8 0.3654 8 67.1003 8 13.7132 10 8.9606 8 24.8246 8 19.1809 7 24.8898 8 32.7006 7)
Average genome size in population (length): 49.55
Average program size in population (points): 50.55
Average percent parens in population: 0.020
Minimum age in population: 38.67555405199528
Maximum age in population: 43.5996956974268
Average age in population: 41.46559859263152
Median age in population: 41.53740919753909
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.081
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 40470263
--- Timings ---
Current time: 1529616111434 milliseconds
Total Time:          91.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.2 seconds, 44.0%
Fitness Testing:     40.2 seconds, 44.0%
Report:              10.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_div} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_inc integer_dup float_div integer_swap integer_swap integer_div tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_fromfloat float_mult 57 57 integer_inc float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3400.743690700001
Median total errors in population: 1411.8619000000003
Error averages by case: (93.35584120000019 9.246 87.59232830000066 10.109 138.75962569999854 10.11 110.67750240000107 10.172 84.21910910000005 11.08 129.1387506000012 9.399 115.52965410000142 8.402 102.5078611999988 10.098 98.20728919999901 9.344 173.12262869999765 10.362 156.39175189999963 12.006 148.11220069999723 9.31 114.85174909999827 10.317 81.12370020000006 9.405 115.14479980000155 10.015 132.82259769999925 9.324 169.54183929999672 9.156 149.66698489999897 10.113 143.88974909999914 9.32 103.4287181999984 11.061 141.80934349999848 9.282 178.02148490000172 8.448 108.23892890000229 7.602 115.08180389999814 9.338 168.0864480999999 8.402)
Error minima by case: (2.9077 6 7.7826 7 17.4739 6 11.6451 7 4.1227 9 15.0 7 0.6042 7 2.0 5 8.2207 8 36.0 6 67.6317 7 40.0025 7 19.4171 8 1.8455 5 2.7881 7 3.2937 7 67.0 7 0.8188 7 61.9171 8 3.7712 5 7.7764 9 24.9949 6 11.7611 6 26.8898 8 33.8848 7)
Average genome size in population (length): 49.411
Average program size in population (points): 50.411
Average percent parens in population: 0.020
Minimum age in population: 39.88966000825167
Maximum age in population: 44.87661815062165
Average age in population: 42.94379920399562
Median age in population: 42.98936034552753
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.09
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 41705563
--- Timings ---
Current time: 1529616114474 milliseconds
Total Time:          94.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.6 seconds, 44.1%
Fitness Testing:     41.4 seconds, 43.9%
Report:              11.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_flush} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction float_inc} {:instruction print_integer} {:instruction float_dup} {:instruction print_integer} {:instruction print_integer} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction float_div} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap float_flush float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float float_inc print_integer float_dup print_integer print_integer float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_inc float_inc float_yank float_inc integer_inc integer_rot float_sub float_div integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2924.7885722
Median total errors in population: 1411.8619000000003
Error averages by case: (70.83682460000024 9.201 70.0897914999998 10.087 117.59102669999912 10.107 93.87922240000115 10.175 65.76550570000147 11.054 111.90547840000123 9.363 97.78689380000147 8.327 79.36888569999981 10.082 75.8267597999999 9.275 151.92747049999755 10.345 140.24104420000054 12.033 126.1015017999975 9.273 97.91316849999828 10.283 62.66835730000116 9.361 98.43453820000127 10.046 116.64193779999961 9.299 153.76836269999706 9.135 132.81263109999767 10.099 127.42055629999805 9.285 80.17120059999979 11.062 124.75278409999834 9.215 157.99944090000122 8.432 85.19378950000093 7.557 93.18805249999893 9.246 151.77234759999985 8.389)
Error minima by case: (1.9077 7 6.8755 8 16.508 8 22.3549 8 4.1577 10 41.1036 8 0.6042 7 15.457 7 7.2207 8 90.6911 8 81.8149 8 62.9104 8 36.6003 9 2.6627 7 31.2119 8 30.7063 8 96.2953 7 1.2929 8 68.1003 8 13.6791 9 6.8104 8 24.029 8 19.1469 6 25.8898 8 33.9601 6)
Average genome size in population (length): 49.972
Average program size in population (points): 50.972
Average percent parens in population: 0.020
Minimum age in population: 42.1285884231329
Maximum age in population: 46.44270496256649
Average age in population: 44.42718117801286
Median age in population: 44.45970888715237
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.088
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 42954938
--- Timings ---
Current time: 1529616117461 milliseconds
Total Time:          97.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.0 seconds, 44.1%
Fitness Testing:     42.7 seconds, 43.8%
Report:              11.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_min} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction print_float} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_min integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times integer_pop print_float float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3483.8663440000023
Median total errors in population: 1411.8619000000003
Error averages by case: (98.08291450000021 9.233 90.04678660000049 10.158 142.96755459999886 10.165 113.18996080000109 10.214 86.8507753000004 11.085 131.93437750000123 9.445 117.86652970000142 8.413 106.44258849999883 10.148 102.94860639999892 9.375 177.7966731999976 10.423 158.70294769999998 12.05 152.89736889999725 9.364 117.26537409999821 10.373 83.1314379000003 9.446 117.64925810000157 10.069 135.36705759999955 9.37 171.87607319999705 9.179 152.09210449999875 10.16 146.19637399999883 9.375 108.41081129999843 11.099 144.23300989999848 9.281 181.95324540000138 8.5 113.17562800000232 7.682 119.72509159999821 9.334 170.66079469999985 8.462)
Error minima by case: (0.9077 6 5.8755 9 17.4734 8 11.6451 9 4.0715 10 21.8668 9 0.6042 7 2.303 9 6.2207 8 90.6911 9 70.8149 9 62.9104 8 22.6003 9 1.7534 7 2.7881 8 3.2937 8 72.2953 7 0.7267 9 65.1003 8 13.6791 10 7.7758 8 24.9944 8 19.1469 7 24.8898 7 15.5467 6)
Average genome size in population (length): 49.935
Average program size in population (points): 50.935
Average percent parens in population: 0.020
Minimum age in population: 43.43424964696169
Maximum age in population: 47.64682446140796
Average age in population: 45.86840752961393
Median age in population: 45.88571449741721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.095
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 44203563
--- Timings ---
Current time: 1529616120473 milliseconds
Total Time:         100.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.3 seconds, 44.1%
Fitness Testing:     44.1 seconds, 43.8%
Report:              12.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction float_mult} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_sub integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove float_mult integer_dup_times integer_dup float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3190.377990100003
Median total errors in population: 1411.8619000000003
Error averages by case: (87.50156120000025 9.23 76.86586840000012 10.099 132.91239309999875 10.12 100.04590830000103 10.179 73.3142751000007 11.064 119.01348590000117 9.436 104.72581650000137 8.385 98.6079964999992 10.113 92.41302259999918 9.32 167.93738629999757 10.41 146.4807982000003 12.03 142.76789709999736 9.333 104.46501599999834 10.332 70.15199400000057 9.428 104.61782060000098 10.034 122.44375449999971 9.345 159.7650925999972 9.155 139.22219499999838 10.102 133.87536769999835 9.315 97.87712829999901 11.073 131.27256599999848 9.252 172.34202760000133 8.491 102.62619790000171 7.675 109.3769126999988 9.286 158.1045079999998 8.444)
Error minima by case: (0.9077 7 5.8755 9 16.5742 8 13.6451 8 4.0713 9 39.0209 9 0.6042 7 14.5491 8 6.2207 7 55.7831 9 2.8149 9 1.9975 8 35.6003 9 0.6613 7 12.7881 9 26.7063 8 1.7627 7 0.3653 9 18.8997 8 13.6786 9 6.8689 9 24.4102 7 19.1463 7 24.8898 8 32.7007 6)
Average genome size in population (length): 49.839
Average program size in population (points): 50.839
Average percent parens in population: 0.020
Minimum age in population: 45.30331657081842
Maximum age in population: 49.33661234611645
Average age in population: 47.36256331116334
Median age in population: 47.40091348439455
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.105
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 45449663
--- Timings ---
Current time: 1529616123588 milliseconds
Total Time:         103.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 44.1%
Fitness Testing:     45.4 seconds, 43.8%
Report:              12.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 59979.689799999935
Test mean error for best: 29.98984
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092056    
Correct output: 83.8755230202  | Program output: 75.092056     
Correct output: 17.5659592301  | Program output: -37.092056    
Correct output: 80.3549464456  | Program output: 46.092056     
Correct output: 18.9343380135  | Program output: 24.092056     
Correct output: -40.1129564408 | Program output: 14.092056     
Correct output: 58.6042464959  | Program output: 98.092056     
Correct output: -20.5490699326 | Program output: -4.092056     
Correct output: -43.7793378574 | Program output: -53.092056    
Correct output: -129.7831210298 | Program output: -38.092056    
Correct output: 162.8148987114 | Program output: 79.092056     
Correct output: -132.002465512 | Program output: -68.092056    
Correct output: 114.6003035226 | Program output: 76.092056     
Correct output: -1.7534077088  | Program output: 2.092056      
Correct output: 89.2119408379  | Program output: 50.092056     
Correct output: 88.7062676802  | Program output: 30.092056     
Correct output: 164.295308609  | Program output: 66.092056     
Correct output: -0.7267472667  | Program output: 76.092056     
Correct output: 157.1002894768 | Program output: 87.092056     
Correct output: -95.7711719159 | Program output: -81.092056    
Correct output: 7.8684219635   | Program output: 76.092056     
Correct output: 25.0869728078  | Program output: -73.092056    
Correct output: -80.2389227568 | Program output: -60.092056    
Correct output: -46.1102240047 | Program output: -74.092056    
Correct output: -33.792764183  | Program output: 63.092056     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 55} {:instruction float_min} {:instruction tag_float_325} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_sin} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 55 float_min tag_float_325 float_inc integer_inc integer_rot float_mod tagged_977 float_sin print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 9 5.1577 11 54.205 9 39.4878 8 16.457 9 9.3127 9 91.6911 11 83.7228 12 63.9104 9 38.5082 9 3.8455 10 39.1199 10 58.6142 9 98.2033 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 9 20.1469 7 27.9818 9 96.8848 9]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3065.7150833000014
Median total errors in population: 1411.8619000000003
Error averages by case: (77.52208480000024 9.21 74.89035679999984 10.109 123.27013329999897 10.139 98.22139110000111 10.178 71.19484970000096 11.074 116.73825050000129 9.354 102.86533720000139 8.338 88.66368139999899 10.101 82.47867009999932 9.308 158.84826479999754 10.341 144.76649860000052 12.054 133.57676269999732 9.29 102.58102999999822 10.296 69.86563610000078 9.35 102.7678469000012 10.056 120.6501345999995 9.288 158.068659699997 9.153 136.9981104999982 10.111 132.1072573999982 9.292 88.18152829999886 11.084 129.1145949999985 9.23 163.00916680000142 8.425 92.92677970000177 7.547 99.56623039999867 9.274 155.86582689999977 8.374)
Error minima by case: (1.9647 7 5.0741 7 16.7252 7 8.5947 7 4.1577 9 7.9791 7 0.6042 7 2.0 7 4.3127 8 36.0 8 70.8149 8 62.9099 8 22.6003 8 0.4316 6 0.2623 7 0.2434 7 68.0 7 0.3653 7 65.1003 7 13.6786 7 7.1817 9 24.9948 7 19.1463 7 1.9818 8 14.2993 6)
Average genome size in population (length): 49.827
Average program size in population (points): 50.827
Average percent parens in population: 0.020
Minimum age in population: 46.65302347391844
Maximum age in population: 50.56064244173467
Average age in population: 48.84912792559923
Median age in population: 48.89315845537931
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.081
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 46695563
--- Timings ---
Current time: 1529616126592 milliseconds
Total Time:         106.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.1 seconds, 44.1%
Fitness Testing:     46.7 seconds, 43.7%
Report:              12.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction float_mult} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap float_dup_times float_cos float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float float_max integer_yank float_mult 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove float_mult integer_dup_times integer_dup_times integer_dup_items integer_fromfloat print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3355.3277782000014
Median total errors in population: 1411.8619000000003
Error averages by case: (95.11587220000021 9.19 83.54639140000015 10.093 140.55099549999858 10.107 105.89601230000108 10.174 79.02885460000084 11.063 124.34174830000126 9.385 111.53847210000154 8.347 105.60435489999888 10.087 99.971674899999 9.304 174.8933888999975 10.37 152.87069190000005 12.033 149.848249799997 9.302 111.06146519999822 10.319 76.05877580000055 9.404 110.4108443000015 10.046 128.28497159999935 9.318 165.31889289999697 9.141 145.6812880999986 10.095 140.2656389999989 9.298 105.18064729999851 11.062 137.81323749999854 9.233 179.79140490000154 8.46 110.01369620000213 7.604 116.820547999998 9.25 164.32866059999978 8.406)
Error minima by case: (0.9647 7 5.8185 8 16.566 8 14.6403 8 4.1577 10 39.0208 8 0.6042 7 15.457 8 6.2777 8 90.6911 8 67.8196 8 62.9104 8 19.605 9 0.6611 7 5.7833 8 6.289 8 69.3 7 0.3653 9 62.105 8 13.6791 8 6.8684 8 24.087 8 19.1469 7 24.9468 8 32.7001 6)
Average genome size in population (length): 49.606
Average program size in population (points): 50.606
Average percent parens in population: 0.020
Minimum age in population: 47.65302347391844
Maximum age in population: 52.27222816809081
Average age in population: 50.30029761589796
Median age in population: 50.34509121492738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.098
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 47935938
--- Timings ---
Current time: 1529616129695 milliseconds
Total Time:         109.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.5 seconds, 44.2%
Fitness Testing:     48.0 seconds, 43.7%
Report:              13.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 59979.689799999935
Test mean error for best: 29.98984
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092056    
Correct output: 83.8755230202  | Program output: 75.092056     
Correct output: 17.5659592301  | Program output: -37.092056    
Correct output: 80.3549464456  | Program output: 46.092056     
Correct output: 18.9343380135  | Program output: 24.092056     
Correct output: -40.1129564408 | Program output: 14.092056     
Correct output: 58.6042464959  | Program output: 98.092056     
Correct output: -20.5490699326 | Program output: -4.092056     
Correct output: -43.7793378574 | Program output: -53.092056    
Correct output: -129.7831210298 | Program output: -38.092056    
Correct output: 162.8148987114 | Program output: 79.092056     
Correct output: -132.002465512 | Program output: -68.092056    
Correct output: 114.6003035226 | Program output: 76.092056     
Correct output: -1.7534077088  | Program output: 2.092056      
Correct output: 89.2119408379  | Program output: 50.092056     
Correct output: 88.7062676802  | Program output: 30.092056     
Correct output: 164.295308609  | Program output: 66.092056     
Correct output: -0.7267472667  | Program output: 76.092056     
Correct output: 157.1002894768 | Program output: 87.092056     
Correct output: -95.7711719159 | Program output: -81.092056    
Correct output: 7.8684219635   | Program output: 76.092056     
Correct output: 25.0869728078  | Program output: -73.092056    
Correct output: -80.2389227568 | Program output: -60.092056    
Correct output: -46.1102240047 | Program output: -74.092056    
Correct output: -33.792764183  | Program output: 63.092056     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_add} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 55} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth float_add 92 print_float print_integer print_float print_integer print_integer float_rot integer_sub integer_yank float_mult 57 57 float_rot integer_sub print_float integer_sub float_max float_inc float_mod float_mult 55 float_min float_yank float_inc integer_inc 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 9 5.1577 11 54.205 9 39.4878 8 16.457 9 9.3127 9 91.6911 11 83.7228 12 63.9104 9 38.5082 9 3.8455 10 39.1199 10 58.6142 9 98.2033 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 9 20.1469 7 27.9818 9 96.8848 9]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3361.7393993000014
Median total errors in population: 1411.8619000000003
Error averages by case: (90.91925710000022 9.203 85.96327960000062 10.108 136.64570179999853 10.134 109.3173300000011 10.182 82.75993880000028 11.068 128.0315487000012 9.4 114.05112540000133 8.347 102.15974009999871 10.102 95.79489619999893 9.315 171.10136499999757 10.375 154.9194469 12.043 145.8575956999972 9.311 113.31301489999838 10.318 81.5096640000001 9.405 113.79776950000162 10.044 131.67253399999942 9.323 168.20249449999704 9.141 148.57146479999847 10.122 142.32601499999885 9.304 100.96141879999844 11.066 140.6467011999985 9.242 176.1611667000016 8.458 105.86951010000216 7.599 112.77909509999803 9.263 167.1373253999998 8.397)
Error minima by case: (2.9077 7 7.7829 9 39.434 8 22.3549 9 4.1577 10 8.9792 9 0.6042 7 15.457 9 8.2207 8 90.691 8 82.7223 10 62.9104 9 37.5077 9 2.8454 7 31.2119 9 30.7063 8 97.2027 7 48.366 8 69.0077 8 13.6791 10 49.1316 8 31.913 8 19.1468 6 26.8898 8 15.2999 7)
Average genome size in population (length): 48.935
Average program size in population (points): 49.935
Average percent parens in population: 0.020
Minimum age in population: 48.65302347391844
Maximum age in population: 53.41542076389305
Average age in population: 51.72246292335761
Median age in population: 51.75286456974573
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.086
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 49159413
--- Timings ---
Current time: 1529616132702 milliseconds
Total Time:         112.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.8 seconds, 44.2%
Fitness Testing:     49.3 seconds, 43.7%
Report:              13.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 60001.68989999994
Test mean error for best: 30.00084
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092058     
Correct output: 17.5659592301  | Program output: -37.092058    
Correct output: 80.3549464456  | Program output: 46.092058     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092058    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092058     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092058     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092058     
Correct output: 88.7062676802  | Program output: 30.092058     
Correct output: 164.295308609  | Program output: 66.092058     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092058     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092058    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092058    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_div} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup integer_max integer_swap integer_swap float_cos tagged_200 in2 integer_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_div integer_yank float_mult 57 57 float_dec float_inc float_mod float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_rot integer_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_dup_times float_sub float_rot float_mod tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 9 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 8 20.1469 7 27.9818 9 96.8848 8]
Total: 1411.8619000000003
Mean: 28.237238
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3339.208466900004
Median total errors in population: 1411.8619000000003
Error averages by case: (90.73368910000023 9.212 85.53489230000109 10.064 135.47405629999858 10.116 108.00446710000114 10.17 82.47360100000006 11.059 127.01249330000122 9.405 113.74199780000134 8.366 99.62796189999874 10.063 95.62232809999882 9.331 171.01593289999758 10.388 154.32917889999965 12.037 144.87506599999716 9.303 111.9362132999984 10.286 79.10024090000032 9.405 113.38373490000166 10.049 131.27953299999925 9.311 167.622276699997 9.129 147.41711509999897 10.112 141.73916779999902 9.287 99.92939039999847 11.059 139.46398179999858 9.243 175.03300860000147 8.482 104.8426220000023 7.624 111.6746221999982 9.28 166.1348954999998 8.425)
Error minima by case: (0.9077 7 5.8755 4 16.9224 5 22.3549 4 4.1577 9 41.1036 5 0.6042 7 15.4565 4 6.2207 8 90.6905 5 80.8149 5 62.9099 6 35.6003 5 2.6627 4 31.2119 4 30.7063 4 95.2953 5 1.2929 5 67.1003 4 13.6786 5 7.3023 8 24.4102 4 19.1463 4 24.8898 7 33.9601 5)
Average genome size in population (length): 48.899
Average program size in population (points): 49.899
Average percent parens in population: 0.020
Minimum age in population: 49.65302347391844
Maximum age in population: 55.18004254758125
Average age in population: 53.22799220778904
Median age in population: 53.27718751017528
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.091
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 50381988
--- Timings ---
Current time: 1529616135919 milliseconds
Total Time:         115.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.1 seconds, 44.2%
Fitness Testing:     50.6 seconds, 43.7%
Report:              13.9 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 60015.68780000003
Test mean error for best: 30.00784
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920758   
Correct output: 83.8755230202  | Program output: 75.0920758    
Correct output: 17.5659592301  | Program output: -37.0920758   
Correct output: 80.3549464456  | Program output: 46.0920758    
Correct output: 18.9343380135  | Program output: 24.0920758    
Correct output: -40.1129564408 | Program output: 14.0920758    
Correct output: 58.6042464959  | Program output: 98.0920758    
Correct output: -20.5490699326 | Program output: -4.0920758    
Correct output: -43.7793378574 | Program output: -53.0920758   
Correct output: -129.7831210298 | Program output: -38.0920758   
Correct output: 162.8148987114 | Program output: 79.0920758    
Correct output: -132.002465512 | Program output: -68.0920758   
Correct output: 114.6003035226 | Program output: 76.0920758    
Correct output: -1.7534077088  | Program output: 2.0920758     
Correct output: 89.2119408379  | Program output: 50.0920758    
Correct output: 88.7062676802  | Program output: 30.0920758    
Correct output: 164.295308609  | Program output: 66.0920758    
Correct output: -0.7267472667  | Program output: 76.0920758    
Correct output: 157.1002894768 | Program output: 87.0920758    
Correct output: -95.7711719159 | Program output: -81.0920758   
Correct output: 7.8684219635   | Program output: 76.0920758    
Correct output: 25.0869728078  | Program output: -73.0920758   
Correct output: -80.2389227568 | Program output: -60.0920758   
Correct output: -46.1102240047 | Program output: -74.0920758   
Correct output: -33.792764183  | Program output: 63.0920758    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction integer_pop} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 print_integer print_integer float_rot integer_sub print_float print_integer float_rot print_float integer_sub float_max integer_yank integer_pop 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7834 10 54.658 11 34.2629 10 5.1577 11 54.205 10 39.4878 8 16.457 11 9.3127 8 91.691 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 8 98.2032 9 76.8188 11 70.0082 8 14.6791 10 68.2237 10 98.179 8 20.1468 6 27.9819 9 96.8848 8]
Total: 1411.8617000000004
Mean: 28.237234
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2909.4185616000027
Median total errors in population: 1411.8619000000003
Error averages by case: (69.13879160000025 9.196 69.38158619999956 10.109 115.8219073999993 10.107 93.08159730000115 10.192 65.9752909000013 11.082 112.06418150000131 9.374 97.82197610000144 8.345 79.27298659999977 10.088 74.12937949999997 9.296 151.24110379999755 10.35 139.7008281000012 12.054 125.48086049999768 9.297 97.26815129999825 10.293 63.53661590000101 9.376 97.66183300000091 10.042 115.81976279999958 9.297 153.19346259999696 9.137 132.7507596999978 10.114 126.896409399998 9.299 79.53813729999966 11.076 124.71719939999848 9.224 156.19787460000126 8.436 84.50125740000115 7.566 91.48356409999926 9.255 151.7280445999998 8.41)
Error minima by case: (1.9667 7 5.8755 9 16.7252 7 22.3549 9 4.1577 10 39.0209 8 0.6042 7 15.457 9 7.2797 8 90.6911 9 80.8149 9 62.9104 9 35.6003 9 0.4316 8 31.2119 8 30.7063 8 95.2953 7 0.3653 9 67.1003 8 13.6791 9 7.1817 8 25.087 8 19.1469 6 25.9488 8 32.7007 8)
Average genome size in population (length): 49.098
Average program size in population (points): 50.098
Average percent parens in population: 0.020
Minimum age in population: 51.82106841518544
Maximum age in population: 56.4481859770458
Average age in population: 54.65879410755546
Median age in population: 54.73712984744634
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.09
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 51609563
--- Timings ---
Current time: 1529616138980 milliseconds
Total Time:         118.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.5 seconds, 44.2%
Fitness Testing:     51.8 seconds, 43.6%
Report:              14.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 60015.68780000003
Test mean error for best: 30.00784
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920758   
Correct output: 83.8755230202  | Program output: 75.0920758    
Correct output: 17.5659592301  | Program output: -37.0920758   
Correct output: 80.3549464456  | Program output: 46.0920758    
Correct output: 18.9343380135  | Program output: 24.0920758    
Correct output: -40.1129564408 | Program output: 14.0920758    
Correct output: 58.6042464959  | Program output: 98.0920758    
Correct output: -20.5490699326 | Program output: -4.0920758    
Correct output: -43.7793378574 | Program output: -53.0920758   
Correct output: -129.7831210298 | Program output: -38.0920758   
Correct output: 162.8148987114 | Program output: 79.0920758    
Correct output: -132.002465512 | Program output: -68.0920758   
Correct output: 114.6003035226 | Program output: 76.0920758    
Correct output: -1.7534077088  | Program output: 2.0920758     
Correct output: 89.2119408379  | Program output: 50.0920758    
Correct output: 88.7062676802  | Program output: 30.0920758    
Correct output: 164.295308609  | Program output: 66.0920758    
Correct output: -0.7267472667  | Program output: 76.0920758    
Correct output: 157.1002894768 | Program output: 87.0920758    
Correct output: -95.7711719159 | Program output: -81.0920758   
Correct output: 7.8684219635   | Program output: 76.0920758    
Correct output: 25.0869728078  | Program output: -73.0920758   
Correct output: -80.2389227568 | Program output: -60.0920758   
Correct output: -46.1102240047 | Program output: -74.0920758   
Correct output: -33.792764183  | Program output: 63.0920758    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction integer_pop} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 print_integer print_integer float_rot integer_sub print_float print_integer float_rot print_float integer_sub float_max integer_yank integer_pop 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7834 10 54.658 11 34.2629 10 5.1577 11 54.205 10 39.4878 8 16.457 11 9.3127 8 91.691 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 8 98.2032 9 76.8188 11 70.0082 8 14.6791 10 68.2237 10 98.179 8 20.1468 6 27.9819 9 96.8848 8]
Total: 1411.8617000000004
Mean: 28.237234
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3348.9020392000025
Median total errors in population: 1411.8619000000003
Error averages by case: (89.5891422000002 9.283 86.21676080000033 10.136 134.5822460999988 10.168 109.31556340000111 10.228 82.9928646000004 11.104 128.32473570000127 9.445 113.86377910000138 8.426 99.95519909999913 10.132 94.49712239999916 9.412 170.0157863999977 10.421 155.19273729999998 12.072 144.9876520999973 9.39 113.55829509999836 10.372 81.1907835000004 9.447 113.81545310000139 10.081 131.51195589999938 9.364 168.3583656999971 9.193 148.22745269999876 10.168 142.67168299999906 9.353 100.10974469999881 11.107 140.34375929999854 9.286 173.77046720000146 8.516 104.83944450000197 7.663 111.3729971999985 9.374 166.97604809999976 8.481)
Error minima by case: (0.9647 7 5.8185 9 16.9224 9 11.6451 8 4.1577 9 40.2051 9 0.6042 7 15.457 9 6.2777 8 90.691 9 70.8149 9 62.9104 9 22.6003 9 1.8455 8 2.7881 8 3.2937 8 72.2953 7 0.8189 9 65.1003 8 13.6791 10 6.7762 9 24.4102 8 19.1468 6 24.9468 8 33.8849 7)
Average genome size in population (length): 49.078
Average program size in population (points): 50.078
Average percent parens in population: 0.020
Minimum age in population: 52.82106841518544
Maximum age in population: 58.07230514359253
Average age in population: 56.15590354052658
Median age in population: 56.18996034457814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.096
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 52836663
--- Timings ---
Current time: 1529616142109 milliseconds
Total Time:         122.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.9 seconds, 44.1%
Fitness Testing:     53.1 seconds, 43.5%
Report:              14.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 60015.68780000003
Test mean error for best: 30.00784
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920758   
Correct output: 83.8755230202  | Program output: 75.0920758    
Correct output: 17.5659592301  | Program output: -37.0920758   
Correct output: 80.3549464456  | Program output: 46.0920758    
Correct output: 18.9343380135  | Program output: 24.0920758    
Correct output: -40.1129564408 | Program output: 14.0920758    
Correct output: 58.6042464959  | Program output: 98.0920758    
Correct output: -20.5490699326 | Program output: -4.0920758    
Correct output: -43.7793378574 | Program output: -53.0920758   
Correct output: -129.7831210298 | Program output: -38.0920758   
Correct output: 162.8148987114 | Program output: 79.0920758    
Correct output: -132.002465512 | Program output: -68.0920758   
Correct output: 114.6003035226 | Program output: 76.0920758    
Correct output: -1.7534077088  | Program output: 2.0920758     
Correct output: 89.2119408379  | Program output: 50.0920758    
Correct output: 88.7062676802  | Program output: 30.0920758    
Correct output: 164.295308609  | Program output: 66.0920758    
Correct output: -0.7267472667  | Program output: 76.0920758    
Correct output: 157.1002894768 | Program output: 87.0920758    
Correct output: -95.7711719159 | Program output: -81.0920758   
Correct output: 7.8684219635   | Program output: 76.0920758    
Correct output: 25.0869728078  | Program output: -73.0920758   
Correct output: -80.2389227568 | Program output: -60.0920758   
Correct output: -46.1102240047 | Program output: -74.0920758   
Correct output: -33.792764183  | Program output: 63.0920758    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_pop} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction integer_pop} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_pop in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 print_integer print_integer float_rot integer_sub print_float print_integer float_rot print_float integer_sub float_max integer_yank integer_pop 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times float_dup float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7834 10 54.658 11 34.2629 10 5.1577 11 54.205 10 39.4878 8 16.457 11 9.3127 8 91.691 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 10 58.6142 8 98.2032 9 76.8188 11 70.0082 8 14.6791 10 68.2237 10 98.179 8 20.1468 6 27.9819 9 96.8848 8]
Total: 1411.8617000000004
Mean: 28.237234
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3198.9920134000045
Median total errors in population: 1411.8619000000003
Error averages by case: (87.88283890000025 9.231 76.7785176000003 10.087 133.6390318999989 10.146 100.30965260000104 10.159 73.81696370000067 11.07 119.5491671000013 9.428 104.97059710000141 8.383 96.95814559999913 10.14 92.90948329999922 9.298 169.03913529999784 10.379 146.61833960000047 12.018 143.9843786999977 9.322 104.66222039999832 10.301 69.12620730000074 9.356 104.86626780000104 10.032 122.66366699999966 9.276 159.86024139999742 9.142 139.72890459999854 10.128 134.0188272999983 9.274 99.05627899999897 11.009 131.75634219999867 9.285 172.8725672000012 8.438 103.79063840000178 7.58 110.32351359999879 9.333 158.59108579999983 8.404)
Error minima by case: (0.0333 7 4.8165 5 15.7252 7 22.3549 6 4.1577 10 2.5658 6 0.6042 7 15.457 6 1.1005 7 87.1043 6 79.7559 5 62.9104 7 34.5413 6 0.5684 4 31.2119 6 30.7063 6 69.0 6 0.3654 6 66.0413 6 13.6791 6 6.1817 9 25.0063 6 19.1468 6 3.4314 8 8.886 6)
Average genome size in population (length): 49.319
Average program size in population (points): 50.319
Average percent parens in population: 0.020
Minimum age in population: 54.02354591432959
Maximum age in population: 59.48229806991367
Average age in population: 57.59655247044792
Median age in population: 57.60732287711653
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.101
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 54069788
--- Timings ---
Current time: 1529616145188 milliseconds
Total Time:         125.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 44.1%
Fitness Testing:     54.5 seconds, 43.5%
Report:              15.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 59988.68979999994
Test mean error for best: 29.99434
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092057     
Correct output: 17.5659592301  | Program output: -37.092057    
Correct output: 80.3549464456  | Program output: 46.092057     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092057    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092057     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092057     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092057     
Correct output: 88.7062676802  | Program output: 30.092057     
Correct output: 164.295308609  | Program output: 66.092057     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092057     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092057    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092057    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction tagged_963} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc tagged_963 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 9 58.6142 10 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 9 20.1469 7 27.9818 8 96.8848 8]
Total: 1410.8619000000003
Mean: 28.217237
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3413.968950900005
Median total errors in population: 1411.8619000000003
Error averages by case: (100.01460440000025 9.231 84.03213190000014 10.117 144.93500599999865 10.269 107.18582450000106 10.177 80.22886300000079 11.069 125.20906690000135 9.529 111.9311419000015 8.362 110.0738879999989 10.261 104.86884749999895 9.161 179.49469229999804 10.391 153.0089299000003 12.039 154.61718549999716 9.333 111.42269079999818 10.337 77.77128730000064 9.366 111.69150170000134 10.053 129.2387886999994 9.162 166.2087220999976 9.164 146.28177969999865 10.236 140.4793556999987 9.145 110.20914649999857 10.921 138.39140999999898 9.38 183.8850443000015 8.434 114.99318400000209 7.452 121.61446979999856 9.281 164.92338849999982 8.388)
Error minima by case: (0.9657 6 5.8175 9 18.658 8 22.3549 8 4.1578 10 7.9792 9 0.6042 7 16.456 9 6.2787 7 91.6901 10 80.7569 10 63.9094 8 35.5423 9 0.2366 7 31.2119 8 30.7063 8 95.2373 8 0.3042 9 67.0423 8 14.6781 9 8.8994 9 24.8246 8 20.1459 6 24.9478 8 14.2994 6)
Average genome size in population (length): 52.001
Average program size in population (points): 53.001
Average percent parens in population: 0.019
Minimum age in population: 56.60585206736869
Maximum age in population: 60.98376758358427
Average age in population: 59.02552076063122
Median age in population: 59.07197132944111
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.111
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 55369888
--- Timings ---
Current time: 1529616148369 milliseconds
Total Time:         128.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.6 seconds, 44.1%
Fitness Testing:     55.8 seconds, 43.5%
Report:              15.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 59988.68979999994
Test mean error for best: 29.99434
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092057     
Correct output: 17.5659592301  | Program output: -37.092057    
Correct output: 80.3549464456  | Program output: 46.092057     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092057    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092057     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092057     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092057     
Correct output: 88.7062676802  | Program output: 30.092057     
Correct output: 164.295308609  | Program output: 66.092057     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092057     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092057    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092057    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction tagged_963} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc tagged_963 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 10 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 9 38.5082 10 3.8455 9 39.1199 9 58.6142 10 98.2033 9 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 9 20.1469 7 27.9818 8 96.8848 8]
Total: 1410.8619000000003
Mean: 28.217237
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3680.1013789000103
Median total errors in population: 1411.8619000000003
Error averages by case: (105.37466330000024 9.302 98.63803980000066 10.191 149.9967831999986 10.642 121.47427900000115 10.236 95.44185019999973 11.14 140.2081015000005 9.877 126.26046490000154 8.443 116.28401849999847 10.642 110.19592429999851 8.853 184.50284739999861 10.436 166.25526829999947 12.059 159.80435879999683 9.402 125.45295839999798 10.409 92.86545429999954 9.409 125.87622380000184 10.06 143.3623477000001 8.936 179.25089329999815 9.251 160.07241089999945 10.529 153.92398859999963 8.887 115.58975869999817 10.624 152.29412550000004 9.747 188.71686830000164 8.508 120.28281790000187 7.174 126.84329069999863 9.356 178.5796415999999 8.441)
Error minima by case: (2.9657 7 3.7834 8 16.8005 8 0.2628 7 4.0715 10 39.0208 8 0.6042 7 15.4569 7 8.2787 6 90.691 8 82.7221 8 62.9103 8 34.5081 9 0.6612 7 9.1198 8 8.6141 8 84.2032 8 0.3653 9 69.0075 8 13.679 9 7.0441 8 24.4102 8 19.1468 6 26.9478 8 32.7006 6)
Average genome size in population (length): 57.374
Average program size in population (points): 58.374
Average percent parens in population: 0.018
Minimum age in population: 57.8515715214744
Maximum age in population: 62.33882135025669
Average age in population: 60.55400662872275
Median age in population: 60.61194494677693
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.121
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 56804313
--- Timings ---
Current time: 1529616151608 milliseconds
Total Time:         131.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.9 seconds, 44.0%
Fitness Testing:     57.2 seconds, 43.5%
Report:              16.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 60012.68839999995
Test mean error for best: 30.00634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920658   
Correct output: 83.8755230202  | Program output: 75.0920658    
Correct output: 17.5659592301  | Program output: -37.0920658   
Correct output: 80.3549464456  | Program output: 46.0920658    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920658   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920658    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920658    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920658    
Correct output: 88.7062676802  | Program output: 30.0920658    
Correct output: 164.295308609  | Program output: 66.0920658    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920658    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920658   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920658   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 6} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction integer_pop} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mult} {:instruction 57} {:instruction float_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_dec} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 float_dec in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 6 print_integer print_integer float_rot integer_sub print_float print_integer float_rot print_float integer_sub float_max integer_yank integer_pop 57 57 float_dec float_inc float_mult 57 float_add float_dec float_inc float_mod float_dec float_inc float_yank float_mult 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_yank integer_dup_times integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 10 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 9 20.1469 7 27.9818 9 96.8848 7]
Total: 1410.8618000000001
Mean: 28.217236
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3146.673882100009
Median total errors in population: 1411.8617000000004
Error averages by case: (84.29572860000016 9.255 74.66796920000024 10.193 130.13456459999887 10.86 98.02297110000082 10.172 73.3167433000008 11.114 119.25683160000143 10.066 105.21354960000153 8.352 95.45939339999948 10.87 89.23055199999959 8.389 166.9838552000003 10.398 143.70585300000096 11.954 141.7540050999975 9.31 102.04757789999846 10.397 66.11019200000092 9.342 102.50765460000115 10.063 120.38968199999972 8.548 156.9910049000003 9.201 139.89536459999832 10.718 131.10570479999825 8.503 96.64065329999922 10.224 131.90146600000105 9.934 169.86696060000108 8.458 101.45036670000127 6.699 106.30796639999906 9.319 158.80027160000003 8.278)
Error minima by case: (2.9657 7 7.7828 9 16.7252 9 22.3549 9 4.1577 9 25.103 9 0.6042 7 4.5491 9 8.2787 6 38.7831 9 82.7221 10 62.9103 8 37.5075 9 0.4316 7 31.2119 8 30.7063 8 97.2026 8 0.3653 9 69.0075 7 13.679 9 7.0441 9 25.8232 8 19.1468 6 26.9478 8 30.2172 6)
Average genome size in population (length): 62.871
Average program size in population (points): 63.871
Average percent parens in population: 0.016
Minimum age in population: 59.88728901816285
Maximum age in population: 63.94438009434634
Average age in population: 62.05446749443306
Median age in population: 62.11604677521859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.096
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 58376163
--- Timings ---
Current time: 1529616154963 milliseconds
Total Time:         134.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.3 seconds, 43.9%
Fitness Testing:     58.8 seconds, 43.6%
Report:              16.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 59992.68999999994
Test mean error for best: 29.99634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.092058    
Correct output: 83.8755230202  | Program output: 75.092056     
Correct output: 17.5659592301  | Program output: -37.092056    
Correct output: 80.3549464456  | Program output: 46.092056     
Correct output: 18.9343380135  | Program output: 24.092058     
Correct output: -40.1129564408 | Program output: 14.092058     
Correct output: 58.6042464959  | Program output: 98.092058     
Correct output: -20.5490699326 | Program output: -4.092058     
Correct output: -43.7793378574 | Program output: -53.092056    
Correct output: -129.7831210298 | Program output: -38.092058    
Correct output: 162.8148987114 | Program output: 79.092056     
Correct output: -132.002465512 | Program output: -68.092058    
Correct output: 114.6003035226 | Program output: 76.092056     
Correct output: -1.7534077088  | Program output: 2.092058      
Correct output: 89.2119408379  | Program output: 50.092056     
Correct output: 88.7062676802  | Program output: 30.092056     
Correct output: 164.295308609  | Program output: 66.092056     
Correct output: -0.7267472667  | Program output: 76.092058     
Correct output: 157.1002894768 | Program output: 87.092056     
Correct output: -95.7711719159 | Program output: -81.092058    
Correct output: 7.8684219635   | Program output: 76.092058     
Correct output: 25.0869728078  | Program output: -73.092056    
Correct output: -80.2389227568 | Program output: -60.092058    
Correct output: -46.1102240047 | Program output: -74.092056    
Correct output: -33.792764183  | Program output: 63.092058     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction tagged_963} {:instruction 56} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc tagged_963 56 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 10 34.2629 9 5.1577 11 54.205 9 39.4878 8 16.457 10 9.3127 9 91.6911 10 83.7228 12 63.9104 9 38.5082 9 3.8455 9 39.1199 10 58.6142 9 98.2033 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 9 20.1469 7 27.9818 9 96.8848 8]
Total: 1409.8619000000003
Mean: 28.197239
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3754.4986081000034
Median total errors in population: 1411.8617000000004
Error averages by case: (108.63046320000052 9.328 100.07368210000055 10.437 153.6115757999988 10.704 122.55883870000038 10.208 98.40896029999972 11.198 143.0084400000006 9.886 130.21557160000197 8.466 121.56313039999932 10.634 113.53352719999866 8.534 189.76944649999888 10.648 167.18840269999976 11.793 165.46611199999697 9.362 126.68838069999937 10.635 91.9063680999996 9.614 126.94984810000156 10.277 144.17723180000095 8.689 180.00538079999808 9.283 163.88121260000042 10.53 155.00184840000088 8.621 121.7967925999989 10.343 156.077779600001 9.813 192.7568324000013 8.792 126.35302020000181 6.869 130.38866309999864 9.582 182.1220992000003 8.119)
Error minima by case: (2.9997 7 7.7827 9 14.4739 8 23.3549 9 4.1578 9 19.5637 9 1.6042 6 1.0E-4 9 8.3127 7 38.7831 9 82.7221 10 62.9097 8 37.5075 9 0.6613 7 32.2119 8 31.7063 7 97.2025 8 0.3653 9 69.0075 7 13.6784 8 4.7764 9 21.9949 7 19.1462 6 25.561 8 13.2435 6)
Average genome size in population (length): 64.117
Average program size in population (points): 65.117
Average percent parens in population: 0.016
Minimum age in population: 61.10534248625845
Maximum age in population: 65.20216392080124
Average age in population: 63.42437253702058
Median age in population: 63.47593453594959
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.121
Error (vector) diversity:			 0.144
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 59979188
--- Timings ---
Current time: 1529616158364 milliseconds
Total Time:         138.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 43.8%
Fitness Testing:     60.4 seconds, 43.7%
Report:              17.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920658   
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 6} {:instruction print_integer} {:instruction print_integer} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_inc} {:instruction integer_pop} {:instruction 57} {:instruction 57} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction tagged_963} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_pop integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 float_dec in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 6 print_integer print_integer print_float integer_sub float_max integer_inc integer_pop 57 57 57 float_min float_yank in1 integer_inc tagged_963 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1408.8618000000001
Mean: 28.177237
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3860.825371100007
Median total errors in population: 1411.8612
Error averages by case: (109.65287330000048 9.336 103.53577620000073 10.516 153.18647909999927 10.344 126.19578999999992 10.157 106.56500990000002 11.217 150.96988110000038 9.517 136.94680340000193 8.42 127.42443119999989 10.23 113.454382699999 8.691 194.58887569999865 10.796 170.54763690000055 11.608 170.1912368999975 9.314 130.1107648000001 10.725 102.51955259999984 9.825 130.5562755000011 10.184 147.90563710000131 9.117 183.4403446999978 9.218 170.79190200000085 10.135 158.31953980000125 8.837 126.59107529999947 10.597 163.03446159999996 9.423 191.81696120000103 9.138 131.25628420000172 7.189 130.0766206999986 9.566 189.06077520000065 7.986)
Error minima by case: (2.9997 7 7.7826 6 15.9224 7 8.4532 6 4.1577 10 42.1036 7 0.6042 6 4.5491 6 8.3127 7 38.7831 7 82.722 7 62.9097 7 37.5074 7 2.8455 6 18.4743 7 18.6943 7 93.3219 7 2.2929 7 69.0074 6 13.6784 7 6.3023 8 23.4102 6 19.1462 6 26.9818 8 34.9601 7)
Average genome size in population (length): 65.291
Average program size in population (points): 66.291
Average percent parens in population: 0.015
Minimum age in population: 62.24308404399926
Maximum age in population: 67.07659415145542
Average age in population: 64.86724421840924
Median age in population: 64.9014938554443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.143
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 61611613
--- Timings ---
Current time: 1529616161720 milliseconds
Total Time:         141.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.0 seconds, 43.8%
Fitness Testing:     61.9 seconds, 43.7%
Report:              17.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920658   
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction tagged_963} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 integer_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub 57 57 float_dec float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc tagged_963 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1408.8618000000001
Mean: 28.177237
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3885.581944300008
Median total errors in population: 1410.8619000000003
Error averages by case: (108.01960850000025 9.356 101.40302850000097 10.196 152.58453189999858 10.428 124.17776100000083 10.132 110.29883489999963 11.235 154.47132749999975 9.457 140.6597380000017 8.294 131.07897099999863 10.073 112.8169774999989 9.035 198.68459799999798 10.493 168.55753789999926 11.894 174.37052169999717 9.077 128.03748409999858 10.378 106.11217919999952 9.747 128.5344014000018 9.737 145.96820790000058 9.536 181.50656949999762 8.929 174.1979341000001 10.066 156.2857595000001 9.225 130.91692909999824 10.972 166.49071389999878 9.391 191.23297040000134 9.21 135.56406380000206 7.6 129.44332269999802 9.195 192.38697230000002 8.125)
Error minima by case: (2.9997 7 7.7828 7 16.7252 8 23.3549 7 4.1577 9 40.2497 7 0.6042 6 15.457 7 8.3127 7 90.6911 7 82.7221 7 62.9104 8 37.5075 8 0.4316 6 32.2119 7 31.7063 7 97.2026 7 1.4135 8 69.0075 7 13.6791 8 7.0441 8 13.0051 8 19.1469 6 26.9818 8 33.9625 6)
Average genome size in population (length): 66.995
Average program size in population (points): 67.995
Average percent parens in population: 0.015
Minimum age in population: 63.90415866040303
Maximum age in population: 68.11815532627588
Average age in population: 66.30910793626342
Median age in population: 66.34220637827454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 96
Genome diversity (% unique Plush genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.137
Error (vector) diversity:			 0.171
Behavioral diversity:				 0.186
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 63286688
--- Timings ---
Current time: 1529616165162 milliseconds
Total Time:         145.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.3 seconds, 43.7%
Fitness Testing:     63.6 seconds, 43.8%
Report:              18.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 59992.68829999994
Test mean error for best: 29.99634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920657   
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction tagged_963} {:instruction 57} {:instruction 57} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc tagged_963 57 57 float_inc float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1408.8618000000001
Mean: 28.177237
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4179.220302799994
Median total errors in population: 1410.8618000000001
Error averages by case: (123.20023900000025 9.383 114.23866740000112 10.195 167.35827959999833 10.815 136.67297000000104 10.032 118.85123799999951 11.254 162.21904119999937 9.437 149.1314474000014 7.925 144.74591959999805 10.127 127.89818119999842 9.399 210.28871299999759 10.434 180.5769482999991 12.036 186.3572890999969 8.752 140.550035199999 10.263 115.69707299999939 10.018 140.98741050000106 9.944 158.15988800000034 9.375 193.34013679999848 8.587 182.1476988 10.088 168.47152050000022 9.312 143.66628969999857 11.1 174.54954619999853 9.411 205.48859660000153 9.323 148.28450940000198 7.697 144.28163089999853 9.387 199.89903339999987 7.864)
Error minima by case: (2.9077 7 7.7835 7 35.0 7 22.3549 7 4.0715 10 16.0 7 0.6042 6 2.0 7 8.2207 7 36.0 8 81.0 8 44.9104 8 37.5082 8 2.7592 6 31.2119 7 30.7063 7 68.0 7 56.7267 7 69.0082 8 8.6791 7 48.1316 7 31.913 7 6.8531 6 26.8898 8 41.2994 6)
Average genome size in population (length): 65.613
Average program size in population (points): 66.613
Average percent parens in population: 0.015
Minimum age in population: 65.31556794332528
Maximum age in population: 69.64266540938289
Average age in population: 67.70945873058906
Median age in population: 67.72342511696245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.135
Error (vector) diversity:			 0.176
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 64927013
--- Timings ---
Current time: 1529616168567 milliseconds
Total Time:         148.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.7 seconds, 43.6%
Fitness Testing:     65.2 seconds, 43.9%
Report:              18.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920658   
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction integer_pop} {:instruction 56} {:instruction 57} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction tagged_963} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_rot print_float integer_sub float_max integer_yank integer_pop 56 57 float_dec float_mod float_dup 57 float_min float_yank in1 integer_inc tagged_963 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1408.8618000000001
Mean: 28.177237
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4265.405653299989
Median total errors in population: 1410.8618000000001
Error averages by case: (121.11414920000017 9.449 118.86767770000131 10.201 164.87983339999857 10.739 141.50266780000106 9.911 125.04187669999929 11.276 168.89487879999885 9.491 156.0426293000016 8.05 147.75869649999834 10.126 125.41759029999832 9.455 213.30042229999762 10.466 185.0384870999986 12.039 189.45962119999686 8.825 145.38481279999922 10.181 120.76961499999923 9.995 145.78585530000052 9.973 162.78465290000085 9.305 197.69608699999804 8.571 188.65140740000018 10.116 173.08552390000034 9.378 146.82306819999906 11.124 181.19852059999835 9.457 203.29119660000157 9.442 151.3962056000012 7.764 142.07903749999895 9.423 206.40214019999985 7.982)
Error minima by case: (1.9997 7 6.7835 7 1.566 7 24.3549 7 5.0657 10 0.887 7 0.6042 6 16.456 8 7.3127 7 91.6901 7 81.0 6 63.9094 8 36.5082 7 0.2466 6 33.2119 7 32.0 7 68.0 6 0.2733 7 68.0082 6 14.6781 8 7.8684 8 1.087 7 20.1459 6 25.9818 8 0.2072 7)
Average genome size in population (length): 67.969
Average program size in population (points): 68.969
Average percent parens in population: 0.015
Minimum age in population: 66.43418722477918
Maximum age in population: 70.95551759594088
Average age in population: 69.16762508098249
Median age in population: 69.1898136140896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.13
Error (vector) diversity:			 0.189
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 66626438
--- Timings ---
Current time: 1529616172068 milliseconds
Total Time:         152.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.0 seconds, 43.5%
Fitness Testing:     66.8 seconds, 44.0%
Report:              19.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920658   
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction float_dec} {:instruction in2} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 6} {:instruction print_integer} {:instruction print_integer} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_inc} {:instruction integer_pop} {:instruction 57} {:instruction 57} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction tagged_963} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_pop integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 float_dec in2 integer_dup_times float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 6 print_integer print_integer print_float integer_sub float_max integer_inc integer_pop 57 57 57 float_min float_yank in1 integer_inc tagged_963 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 9 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1408.8618000000001
Mean: 28.177237
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3979.2679527000014
Median total errors in population: 1409.8619000000003
Error averages by case: (108.05208130000024 9.401 104.96150210000138 10.223 152.73685899999833 10.839 127.73309130000119 9.933 115.83659639999908 11.302 160.60258229999894 9.455 146.91039070000156 7.877 135.32104019999807 10.109 112.7922087999983 9.114 203.0121382999975 10.455 172.11512009999865 12.059 178.80213039999688 8.692 131.59588399999816 10.221 112.46361239999901 10.11 132.09295850000206 9.7 149.51983910000052 9.287 185.06356159999825 8.521 180.31747560000045 10.082 159.84285140000023 9.343 135.6195865999981 11.127 172.65915589999838 9.451 191.46946780000167 9.785 140.27824230000186 7.715 129.4442920999976 9.094 198.28728449999988 7.843)
Error minima by case: (2.9997 8 7.7829 6 16.566 8 22.3549 7 4.1577 10 53.205 7 0.6042 6 4.5491 7 8.3127 8 38.7831 7 82.7223 5 62.9103 8 37.5077 7 2.8455 5 31.2119 7 30.7063 7 97.2027 6 57.7267 7 69.0077 7 13.679 7 49.1316 8 24.087 7 19.1468 7 26.9818 7 90.7928 7)
Average genome size in population (length): 70.903
Average program size in population (points): 71.903
Average percent parens in population: 0.014
Minimum age in population: 68.30741285288059
Maximum age in population: 72.71774492551508
Average age in population: 70.6564621469284
Median age in population: 70.7244143241339
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.131
Error (vector) diversity:			 0.185
Behavioral diversity:				 0.218
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 68399113
--- Timings ---
Current time: 1529616175619 milliseconds
Total Time:         155.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.4 seconds, 43.4%
Fitness Testing:     68.5 seconds, 44.0%
Report:              19.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 59995.68829999994
Test mean error for best: 29.99784
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920659   
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_dec} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction tagged_963} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_dec integer_swap float_cos tagged_200 integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc float_dec float_mod float_dup 57 float_min float_yank in1 integer_inc tagged_963 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 8 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1407.8618000000001
Mean: 28.157236
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4188.122622599995
Median total errors in population: 1408.8618000000001
Error averages by case: (113.07714950000023 9.444 111.65234090000122 10.246 158.98265109999832 11.052 134.17533710000114 10.121 128.0439549999994 11.318 171.2667891999987 9.453 158.72704980000165 7.751 146.52014949999815 10.124 119.43930339999856 8.94 212.20376019999748 10.465 178.04901399999912 12.05 188.33274859999682 8.544 137.9811281999988 10.331 124.84898529999924 10.242 138.47330840000137 9.458 155.70547200000073 9.293 191.31712419999886 8.467 190.63185240000016 10.062 165.91498370000025 9.34 145.66824979999902 11.134 183.09127889999834 9.47 197.73605550000158 10.025 150.2299073000011 7.737 135.9661581999986 8.906 208.4258703999998 7.689)
Error minima by case: (2.9142 8 3.7956 7 16.9224 8 7.3162 7 4.1577 10 39.0207 8 0.6042 6 4.5491 7 8.2272 7 38.7831 8 75.1438 6 62.9104 7 26.9292 8 0.6611 7 1.5408 8 1.0351 7 76.6242 7 0.3655 8 69.0076 8 13.6791 7 7.3023 8 24.4102 7 19.1469 6 26.8963 8 32.7005 7)
Average genome size in population (length): 72.173
Average program size in population (points): 73.173
Average percent parens in population: 0.014
Minimum age in population: 69.78298287181546
Maximum age in population: 74.3519472119583
Average age in population: 72.11965669129931
Median age in population: 72.13983181620846
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.134
Error (vector) diversity:			 0.176
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 70203538
--- Timings ---
Current time: 1529616179233 milliseconds
Total Time:         159.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.8 seconds, 43.3%
Fitness Testing:     70.2 seconds, 44.1%
Report:              19.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4824.283426499995
Median total errors in population: 1408.8618000000001
Error averages by case: (139.69380929999934 9.539 136.6218354000017 10.239 183.46588489999795 11.045 158.44878670000125 10.158 155.46091410000082 11.341 197.31875889999708 9.511 184.35576130000166 7.863 174.65822009999724 10.113 145.31641779999939 9.047 238.41678609999738 10.489 201.08071869999748 12.022 215.35727459999615 8.6 162.18697190000051 10.363 152.0897470999984 10.245 162.63599159999967 9.431 179.3472239000018 9.319 213.4953336999972 8.493 216.0048470000015 10.105 189.31210060000154 9.408 174.04662769999993 11.131 208.71429319999828 9.545 220.62103890000193 10.03 178.41665250000074 7.832 161.29419620000002 9.029 233.27023429999977 7.755)
Error minima by case: (2.9997 7 7.7835 6 6.4739 8 22.3549 7 4.1577 10 39.0209 7 0.6042 6 15.4569 7 8.3127 7 90.691 7 82.7228 6 62.9103 7 37.5082 7 0.4316 5 31.2119 7 30.7063 7 97.2032 6 0.3653 7 69.0082 6 13.679 8 3.2236 8 13.9949 7 19.1468 6 26.9818 8 32.7007 6)
Average genome size in population (length): 72.275
Average program size in population (points): 73.275
Average percent parens in population: 0.014
Minimum age in population: 71.25552232976365
Maximum age in population: 75.80852202344855
Average age in population: 73.54276445377052
Median age in population: 73.59349960100924
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.134
Error (vector) diversity:			 0.185
Behavioral diversity:				 0.219
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 72010438
--- Timings ---
Current time: 1529616182810 milliseconds
Total Time:         162.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.2 seconds, 43.1%
Fitness Testing:     71.9 seconds, 44.2%
Report:              20.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3913.379368099996
Median total errors in population: 1408.8618000000001
Error averages by case: (103.76921220000024 9.36 98.9689561000012 10.221 147.5583055999985 11.023 121.7504176000012 10.14 115.63788369999946 11.281 159.28621159999892 9.424 145.89158600000167 7.705 138.28645149999815 10.093 107.70837109999854 8.894 205.51529729999746 10.457 165.4626483999991 12.021 180.7366686999967 8.516 124.74910339999794 10.335 114.01406669999932 10.214 126.14271730000182 9.421 143.56658910000056 9.271 178.4449605999988 8.427 179.9348463000002 10.059 154.12118920000012 9.32 136.72303799999855 11.098 172.38464329999837 9.446 187.36359540000154 10.02 142.14018080000147 7.707 124.43515359999793 8.852 197.83127459999983 7.651)
Error minima by case: (1.9077 7 6.8755 7 0.434 8 22.3549 7 4.1577 10 1.113 8 0.6042 6 2.0 7 7.2207 7 36.0 8 81.0 6 62.9103 7 36.6003 8 0.6613 7 31.2119 8 30.7063 7 68.0 7 0.3653 8 68.1003 8 13.679 7 8.9605 8 0.913 7 19.1468 6 25.8898 8 1.7928 7)
Average genome size in population (length): 72.94
Average program size in population (points): 73.94
Average percent parens in population: 0.014
Minimum age in population: 72.64959103393674
Maximum age in population: 76.65331063716873
Average age in population: 74.93671445867055
Median age in population: 74.97121529703362
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.143
Error (vector) diversity:			 0.19
Behavioral diversity:				 0.22
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 73834213
--- Timings ---
Current time: 1529616186366 milliseconds
Total Time:         166.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.5 seconds, 43.0%
Fitness Testing:     73.6 seconds, 44.3%
Report:              21.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4447.080354999996
Median total errors in population: 1408.8618000000001
Error averages by case: (123.41920020000023 9.37 116.52621360000123 10.252 166.30564469999825 11.075 140.18679940000106 10.195 144.26116139999974 11.302 186.31411159999794 9.507 173.84231860000168 7.796 160.27752639999792 10.111 125.78650459999857 9.018 227.08541409999745 10.514 183.15049819999874 12.057 204.49798609999647 8.589 144.13546829999896 10.398 135.26255759999896 10.271 143.529469400001 9.463 161.5024799000007 9.345 195.79960109999843 8.483 205.60953710000084 10.096 171.14551810000066 9.407 162.67678539999926 11.133 198.26155299999832 9.526 203.35146610000174 10.06 166.3173468000012 7.808 143.36906759999871 8.987 221.96712569999983 7.736)
Error minima by case: (2.9657 7 7.7829 6 11.566 8 23.3549 7 4.1577 10 39.0209 7 0.6042 6 15.4561 7 8.2787 7 29.9642 8 82.7222 8 32.1835 7 37.5076 8 0.343 6 28.3089 7 31.7063 7 97.2027 7 0.3653 8 69.0076 7 4.0478 8 1.8684 8 19.087 7 19.146 6 26.9478 8 32.7007 7)
Average genome size in population (length): 73.318
Average program size in population (points): 74.318
Average percent parens in population: 0.014
Minimum age in population: 73.97533449988241
Maximum age in population: 78.2685421458223
Average age in population: 76.27866030656052
Median age in population: 76.32385999830507
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.152
Error (vector) diversity:			 0.202
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 75667288
--- Timings ---
Current time: 1529616190120 milliseconds
Total Time:         169.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 42.9%
Fitness Testing:     75.3 seconds, 44.3%
Report:              21.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4833.218677899995
Median total errors in population: 1408.8618000000001
Error averages by case: (143.9267679999992 9.268 136.78391150000164 10.282 186.52946549999803 11.065 159.54831010000106 10.219 152.63969200000096 11.39 194.57205069999608 9.566 182.57820060000176 7.922 174.73994909999746 10.145 149.11056529999976 9.125 238.1796366999975 10.571 202.314689499997 12.02 215.05333729999631 8.689 162.44042630000115 10.444 151.39997569999835 10.288 162.83923259999898 9.484 179.56366640000297 9.382 214.74477239999686 8.547 214.39684080000197 10.134 189.6811487000026 9.43 172.80506130000148 11.161 207.08425479999846 9.595 224.67802410000186 10.092 178.1754615999989 7.905 164.13289400000122 9.127 231.62434289999987 7.825)
Error minima by case: (2.9997 7 7.7835 3 16.8005 4 22.3549 4 4.1577 10 40.2497 5 0.6042 6 15.4564 5 8.3127 7 90.6905 5 79.0 3 62.9098 6 37.5082 5 2.8104 4 31.2119 3 30.0 3 66.0 4 1.5511 5 69.0082 5 13.6785 4 6.8114 8 31.913 4 19.1463 5 26.9818 8 34.7787 5)
Average genome size in population (length): 74.548
Average program size in population (points): 75.548
Average percent parens in population: 0.013
Minimum age in population: 75.30471954010692
Maximum age in population: 79.58628535738066
Average age in population: 77.6001188435703
Median age in population: 77.6878966742244
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.162
Error (vector) diversity:			 0.239
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 77531063
--- Timings ---
Current time: 1529616193782 milliseconds
Total Time:         173.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.4 seconds, 42.8%
Fitness Testing:     77.1 seconds, 44.4%
Report:              22.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4672.506571499994
Median total errors in population: 1408.8618000000001
Error averages by case: (135.86962239999986 9.0 135.5988840000013 10.395 180.36579599999814 11.121 158.56051150000104 10.334 145.41069860000016 11.416 187.3149935999983 9.641 173.41520950000148 7.992 161.26441489999783 10.259 142.63386469999907 9.19 226.54508119999764 10.657 200.0103517999983 12.11 203.58004699999654 8.761 161.71644980000008 10.558 143.66801609999868 10.384 161.37579230000009 9.589 178.31771700000132 9.5 212.31230659999787 8.662 205.5399024000005 10.216 188.31087540000095 9.563 161.78112749999946 11.223 198.36297149999848 9.609 217.85519910000195 10.179 166.693454800001 7.974 158.81946059999962 9.147 221.81682319999982 7.887)
Error minima by case: (2.9177 6 7.7829 6 0.566 7 22.3549 6 4.1577 10 0.113 7 0.6042 6 15.4569 6 8.2777 7 28.2169 7 82.7222 6 25.9975 7 37.5076 7 0.4316 6 28.4698 7 27.7915 7 97.2027 6 0.3654 7 69.0076 6 13.679 7 1.8684 8 0.087 6 19.1468 6 26.9468 8 0.7928 7)
Average genome size in population (length): 76.926
Average program size in population (points): 77.926
Average percent parens in population: 0.013
Minimum age in population: 76.67389182925243
Maximum age in population: 80.70104510533135
Average age in population: 78.95039999349838
Median age in population: 78.98524246799074
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.175
Error (vector) diversity:			 0.237
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 79454238
--- Timings ---
Current time: 1529616197422 milliseconds
Total Time:         177.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.7 seconds, 42.7%
Fitness Testing:     78.9 seconds, 44.5%
Report:              22.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4228.628984299995
Median total errors in population: 1408.36155
Error averages by case: (123.70088880000021 8.58 117.42156650000105 10.297 166.4652293999984 11.079 138.60890510000118 10.265 123.94573849999969 11.374 167.04683059999869 9.524 155.08752890000162 7.863 143.1668657999984 10.166 127.42684719999879 9.064 209.95768819999748 10.535 183.3351111999987 12.036 185.19293129999673 8.625 143.5584237999992 10.416 120.40486369999965 10.273 143.83728180000054 9.518 159.86875670000097 9.385 195.93302059999868 8.55 187.58940150000024 10.187 170.51488870000057 9.437 143.3461086999993 11.159 180.0730163999984 9.571 203.4596392000016 10.128 147.91045590000107 7.826 142.80425049999945 9.072 205.3117452999998 7.731)
Error minima by case: (2.9191 6 7.7834 7 11.566 8 23.3549 7 4.1577 10 11.887 8 0.6042 6 6.5491 7 8.2777 6 40.7831 6 16.2773 6 62.9098 7 37.5082 7 0.4316 6 32.2119 7 28.7063 7 1.7969 6 1.2929 8 29.9919 6 13.6785 7 1.8684 8 19.087 7 19.1463 6 26.9468 8 33.9601 7)
Average genome size in population (length): 79.492
Average program size in population (points): 80.492
Average percent parens in population: 0.013
Minimum age in population: 78.24061096905658
Maximum age in population: 82.12473443685023
Average age in population: 80.32798269673677
Median age in population: 80.35743062310802
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.145
Error (vector) diversity:			 0.208
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 81441713
--- Timings ---
Current time: 1529616201109 milliseconds
Total Time:         181.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.1 seconds, 42.6%
Fitness Testing:     80.7 seconds, 44.6%
Report:              23.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4865.228786599995
Median total errors in population: 1408.8613
Error averages by case: (146.54322729999902 8.472 140.95719390000167 10.401 189.23858419999797 11.154 162.32713590000105 10.295 154.8877257000004 11.389 196.83659659999742 9.552 184.54944850000166 7.927 171.22704849999764 10.225 150.68178499999925 9.138 236.20903989999746 10.6 203.29342349999808 12.022 214.04401959999637 8.715 166.99164460000006 10.527 149.6696004999985 10.3 166.42510510000022 9.563 181.85015940000164 9.465 215.4653165999978 8.663 216.33818920000104 10.253 192.67844150000144 9.56 171.5160983999996 11.177 209.0438090999983 9.625 224.24058200000187 10.205 176.7998478000007 7.953 166.56108779999948 9.152 232.72567599999985 7.795)
Error minima by case: (2.9191 6 7.2166 8 16.7252 8 10.7372 8 4.1577 10 16.0 8 0.6042 6 15.457 8 8.2777 7 90.6911 9 71.7227 7 62.9104 8 23.5081 9 0.4316 8 1.8802 8 2.3859 8 68.0 7 0.3653 8 66.0081 7 13.6791 8 7.1817 8 25.087 7 19.1469 6 26.9468 8 32.7008 7)
Average genome size in population (length): 81.525
Average program size in population (points): 82.525
Average percent parens in population: 0.012
Minimum age in population: 79.2709811826852
Maximum age in population: 83.99898372638441
Average age in population: 81.72753131875326
Median age in population: 81.7450461386363
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.166
Error (vector) diversity:			 0.216
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 83479963
--- Timings ---
Current time: 1529616204891 milliseconds
Total Time:         184.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.5 seconds, 42.5%
Fitness Testing:     82.6 seconds, 44.7%
Report:              23.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3914.8485140999965
Median total errors in population: 1406.8618000000001
Error averages by case: (105.82120150000027 8.188 99.35234950000113 10.284 150.06922739999862 11.072 122.71185310000111 10.207 116.14626399999932 11.246 159.88840779999893 9.433 146.4430096000016 7.666 134.1276788999982 10.122 109.2519105999987 8.843 202.3068619999975 10.506 167.1598444999993 12.015 178.03541139999672 8.51 126.55313389999806 10.42 110.36910939999912 10.246 127.07743860000154 9.465 144.56332220000056 9.303 180.15024559999873 8.481 179.78930300000064 10.175 154.8521334999998 9.405 134.86233019999847 11.075 172.13098339999846 9.442 188.98291800000146 10.098 139.5790544000017 7.736 126.51241069999828 8.85 197.7201108999999 7.604)
Error minima by case: (2.9083 6 7.7829 4 39.434 5 23.3549 5 4.1577 9 53.205 5 0.6042 6 15.457 5 8.2213 7 27.2169 5 82.7222 4 24.9975 6 37.5076 5 2.8455 4 32.2119 5 31.7063 5 97.2027 5 58.7267 5 69.0076 5 13.6791 4 50.1316 8 31.913 5 19.1469 5 26.8904 8 91.7928 5)
Average genome size in population (length): 81.946
Average program size in population (points): 82.946
Average percent parens in population: 0.012
Minimum age in population: 80.88584724937284
Maximum age in population: 84.96394043820007
Average age in population: 83.02606342365718
Median age in population: 83.04854283590454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.147
Error (vector) diversity:			 0.19
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 85528813
--- Timings ---
Current time: 1529616208734 milliseconds
Total Time:         188.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.8 seconds, 42.3%
Fitness Testing:     84.5 seconds, 44.8%
Report:              24.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_swap} {:instruction float_inc} {:instruction float_div} {:instruction integer_dec} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_swap float_inc float_div integer_dec integer_swap float_cos tagged_200 integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_sub float_mod float_dup integer_add float_dup_times float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4151.903101299996
Median total errors in population: 1406.8618000000001
Error averages by case: (119.04213910000023 8.167 112.36137200000175 10.298 162.00333869999815 11.062 135.11876310000105 10.208 123.32544899999881 11.265 166.62359789999866 9.485 153.44536350000163 7.763 141.29476709999778 10.141 122.18926069999803 8.885 207.9139276999975 10.52 178.92467669999863 11.959 183.99311429999656 8.585 139.0639272999987 10.412 116.64928229999876 10.254 139.42233990000133 9.464 156.45990690000104 9.336 191.59118499999835 8.519 186.01120170000044 10.154 166.89748520000046 9.433 141.15713459999836 11.111 178.4808874999983 9.466 200.2189862000016 10.104 145.6940733000016 7.79 139.15689979999837 8.924 203.89902179999984 7.66)
Error minima by case: (2.9688 6 7.7835 4 11.4739 5 21.3549 5 5.0715 10 37.1741 5 0.3958 6 4.5491 5 8.2864 7 38.7831 6 82.7228 5 63.9094 6 37.5082 5 0.3373 4 30.2119 4 25.2937 4 97.2032 5 0.5511 5 69.0082 5 14.6781 5 1.7764 8 18.9949 5 20.1459 4 26.9555 8 33.7787 5)
Average genome size in population (length): 81.766
Average program size in population (points): 82.766
Average percent parens in population: 0.012
Minimum age in population: 82.04306116803129
Maximum age in population: 86.5572038382922
Average age in population: 84.45766639874812
Median age in population: 84.48032148470323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.136
Error (vector) diversity:			 0.182
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 87573163
--- Timings ---
Current time: 1529616212449 milliseconds
Total Time:         192.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.2 seconds, 42.2%
Fitness Testing:     86.4 seconds, 44.9%
Report:              24.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206115  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_mult} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_yank} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_min} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub float_max integer_dup_items integer_dup float_div integer_mult float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup 57 integer_yank float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_min float_mult float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4235.365895899995
Median total errors in population: 1406.8618000000001
Error averages by case: (121.18613700000026 8.297 113.51551730000087 10.369 163.81707459999842 11.134 136.01772090000108 10.27 127.45919349999953 11.369 170.86646399999904 9.531 157.07693130000155 7.841 147.64741009999815 10.177 124.82434099999882 9.016 214.21631909999738 10.587 179.6071176999996 12.023 190.3506578999967 8.66 139.84463929999868 10.495 124.7637681999993 10.284 140.29694400000105 9.552 157.51777700000056 9.405 192.39188389999916 8.576 190.10607860000007 10.228 167.5051562999998 9.49 147.64793019999914 11.166 182.53689289999846 9.575 201.8755133000016 10.173 152.19345670000126 7.881 141.21446179999887 9.033 207.9995092999999 7.755)
Error minima by case: (2.9191 6 7.7835 9 16.7252 9 23.3549 9 4.1577 10 41.1036 8 0.6042 6 15.457 8 8.2777 7 90.6911 9 82.7228 9 62.9104 8 37.5082 8 0.4316 7 32.2119 8 31.7063 8 97.2032 7 1.2929 9 69.0082 8 13.6791 9 7.1817 7 24.4102 8 19.1469 6 26.9468 8 33.9601 6)
Average genome size in population (length): 82.182
Average program size in population (points): 83.182
Average percent parens in population: 0.012
Minimum age in population: 83.3570402509445
Maximum age in population: 87.69605833933551
Average age in population: 85.82582117915221
Median age in population: 85.86460019242774
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.154
Error (vector) diversity:			 0.199
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 89627788
--- Timings ---
Current time: 1529616216218 milliseconds
Total Time:         196.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.6 seconds, 42.1%
Fitness Testing:     88.2 seconds, 45.0%
Report:              25.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_min} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 55} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction print_float} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_tan print_float integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_min print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 55 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot print_float print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_swap print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4527.084846199996
Median total errors in population: 1406.8618000000001
Error averages by case: (128.69959690000022 8.189 128.38211050000135 10.293 169.77187369999845 11.062 149.28916260000105 10.215 143.68663820000043 11.279 186.20065559999804 9.466 173.62836600000168 7.769 156.25829799999804 10.136 132.4917800999986 8.958 223.05086389999755 10.509 193.38248899999843 11.948 198.80236549999677 8.584 153.27022389999965 10.432 138.5286881999991 10.253 154.50873290000007 9.464 171.2703098000016 9.318 205.84600999999824 8.54 204.79397160000076 10.181 181.54791910000097 9.468 156.6219483999993 11.124 197.41765519999834 9.497 207.2553244000017 10.129 160.99339550000113 7.815 147.74992819999935 8.957 222.37653899999984 7.674)
Error minima by case: (2.9191 6 7.7835 9 17.4739 9 19.4532 9 5.0717 10 39.0209 8 0.6042 6 16.456 8 8.2777 7 91.6901 9 82.7228 8 63.9094 7 0.3997 9 0.6613 8 32.2119 8 31.7063 8 97.2032 7 0.3653 9 69.0082 8 14.6781 9 7.7764 8 14.5433 8 20.1459 6 26.9468 8 32.7007 6)
Average genome size in population (length): 82.06
Average program size in population (points): 83.06
Average percent parens in population: 0.012
Minimum age in population: 85.068021529065
Maximum age in population: 89.129242468782
Average age in population: 87.21773501114498
Median age in population: 87.2580228387587
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.143
Error (vector) diversity:			 0.199
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 91679438
--- Timings ---
Current time: 1529616219952 milliseconds
Total Time:         199.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.0 seconds, 42.0%
Fitness Testing:     90.1 seconds, 45.1%
Report:              25.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction integer_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 float_yank integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add integer_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4371.178345999995
Median total errors in population: 1408.8618000000001
Error averages by case: (134.30106089999998 8.336 124.61623750000179 10.352 172.48612549999845 11.058 147.10361640000113 10.244 128.34253509999894 11.331 171.5294799999983 9.514 157.76564460000154 7.859 147.06941189999796 10.172 133.10177099999825 9.027 214.03568779999745 10.539 190.21587609999813 11.982 190.39879529999655 8.635 150.70735079999935 10.486 123.83953269999883 10.255 151.32783650000053 9.54 168.1510384000016 9.405 202.721566599998 8.635 190.56378940000076 10.208 178.34294910000116 9.509 147.91093159999895 11.108 183.04538409999836 9.539 210.01654210000171 10.115 152.3330514000014 7.848 150.35067909999916 9.041 208.40345209999984 7.76)
Error minima by case: (2.9688 6 7.783 2 16.8005 2 21.3549 2 4.1577 10 15.0 2 0.6042 6 3.0 2 8.2864 7 28.2169 2 48.8149 2 25.9975 3 0.6003 3 0.6613 1 24.7881 2 25.2937 2 50.2953 3 0.3653 2 43.1003 3 13.679 1 7.0441 8 25.8232 2 19.1468 2 26.9555 8 32.7007 2)
Average genome size in population (length): 82.067
Average program size in population (points): 83.067
Average percent parens in population: 0.012
Minimum age in population: 86.32440338635755
Maximum age in population: 90.90946713159948
Average age in population: 88.65119384755646
Median age in population: 88.70489830957513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.156
Error (vector) diversity:			 0.211
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 93731338
--- Timings ---
Current time: 1529616223697 milliseconds
Total Time:         203.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.4 seconds, 41.9%
Fitness Testing:     91.9 seconds, 45.1%
Report:              26.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_max} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup_times integer_dup_items integer_dup float_div integer_swap float_max float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4271.949591099997
Median total errors in population: 1406.8618000000001
Error averages by case: (122.27348570000025 8.227 117.70158270000185 10.319 164.28125459999836 11.058 140.30375270000104 10.229 129.09300409999892 11.286 172.49600819999768 9.47 158.1690267000016 7.814 145.30477579999797 10.162 125.600038499998 8.972 213.47900929999759 10.533 183.4082412999981 11.961 189.8560795999968 8.593 144.0605739999995 10.46 123.08257209999871 10.257 144.5204121000005 9.519 161.85913710000176 9.366 195.96777739999786 8.572 191.21818330000085 10.217 171.50100340000137 9.464 147.1854936999991 11.112 183.67063059999836 9.497 202.0194087000016 10.123 151.53054980000115 7.819 142.44149369999909 9.0 209.19609599999987 7.7)
Error minima by case: (2.9191 6 7.2166 4 16.4738 4 8.2629 4 4.1578 10 13.0 4 0.3958 6 5.0 4 8.2777 7 39.0 5 71.7227 5 62.9103 4 23.5081 5 0.4316 3 1.8802 4 2.3859 4 65.0 5 1.4135 4 66.0081 5 13.679 4 6.7763 8 23.9948 4 19.1468 4 26.9468 8 33.9625 4)
Average genome size in population (length): 81.807
Average program size in population (points): 82.807
Average percent parens in population: 0.012
Minimum age in population: 87.46958845550554
Maximum age in population: 92.14845297694221
Average age in population: 90.07094051777321
Median age in population: 90.12397618179553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.149
Error (vector) diversity:			 0.202
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 95776788
--- Timings ---
Current time: 1529616227398 milliseconds
Total Time:         207.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.7 seconds, 41.8%
Fitness Testing:     93.7 seconds, 45.2%
Report:              26.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_sub integer_dup_items integer_dup float_div integer_swap float_div integer_swap integer_swap float_cos integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub float_inc print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_tan float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4430.506515299995
Median total errors in population: 1408.8618000000001
Error averages by case: (131.1144867000001 8.316 126.70870720000165 10.342 173.58060599999826 11.084 149.8479346000011 10.242 131.99876219999933 11.322 174.48049459999817 9.502 161.9434035000016 7.89 147.96534459999805 10.184 134.98782209999845 9.021 216.16393079999742 10.544 192.89859599999835 11.96 192.64237599999655 8.638 153.70617279999945 10.474 127.53133509999905 10.274 154.06058700000057 9.518 170.50653550000158 9.401 205.3511597999982 8.613 195.15002560000048 10.22 181.06785950000102 9.509 149.32922789999893 11.121 187.73165499999826 9.534 210.98856810000171 10.149 153.71849210000138 7.881 151.65200709999883 9.066 212.81542549999983 7.76)
Error minima by case: (2.9191 6 7.2166 7 16.7252 8 10.7372 7 4.1577 9 13.887 7 0.6042 6 4.5491 7 8.2777 7 28.2169 8 4.8149 7 25.9975 7 23.5081 8 0.4316 6 1.8802 7 2.3859 7 6.2953 7 0.3653 8 0.8997 7 13.6791 9 7.0441 8 24.4102 8 19.1469 6 26.9468 7 32.7007 7)
Average genome size in population (length): 82.003
Average program size in population (points): 83.003
Average percent parens in population: 0.012
Minimum age in population: 88.46958845550554
Maximum age in population: 93.50319905344291
Average age in population: 91.47999215481796
Median age in population: 91.51450966604678
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.158
Error (vector) diversity:			 0.206
Behavioral diversity:				 0.236
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 97827238
--- Timings ---
Current time: 1529616231255 milliseconds
Total Time:         211.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.1 seconds, 41.8%
Fitness Testing:     95.6 seconds, 45.3%
Report:              27.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction tagged_748} {:instruction in2} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_tan} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 58} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_shove} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup tagged_748 in2 integer_add float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_tan 57 57 integer_add float_sub 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult integer_yankdup integer_yank float_mod float_mult 58 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_shove integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4535.042635499997
Median total errors in population: 1406.8618000000001
Error averages by case: (136.88371269999962 8.273 131.15989150000206 10.348 176.5081296999979 11.111 153.18465680000116 10.267 137.9096653999992 11.325 180.88695229999766 9.523 166.88834910000162 7.862 154.16269719999758 10.209 138.09030869999816 9.029 219.69464039999747 10.573 195.67063119999764 12.025 196.11133909999634 8.656 156.5542602999999 10.482 135.3465054999984 10.293 157.3545333000003 9.541 174.19912840000194 9.406 208.17725849999752 8.604 199.72214380000108 10.262 183.83836020000163 9.513 153.75826479999876 11.148 192.2271334999983 9.552 214.02802170000183 10.15 158.18790750000113 7.883 154.2500442999989 9.009 217.45409959999978 7.75)
Error minima by case: (2.9191 6 7.7835 9 18.658 9 23.3549 9 4.1577 10 39.0209 8 0.6042 6 4.5491 8 8.2777 7 38.7831 9 82.7228 8 62.9104 7 37.5082 9 0.6613 7 32.2119 8 31.7063 8 97.2032 7 0.3653 9 69.0082 8 13.6791 9 8.9605 8 26.179 8 19.1469 6 26.9468 8 32.7007 7)
Average genome size in population (length): 82.32
Average program size in population (points): 83.32
Average percent parens in population: 0.012
Minimum age in population: 90.5175950932789
Maximum age in population: 94.83904378990778
Average age in population: 92.8700669628823
Median age in population: 92.91898972747413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.148
Error (vector) diversity:			 0.2
Behavioral diversity:				 0.219
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 99885388
--- Timings ---
Current time: 1529616235026 milliseconds
Total Time:         214.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.5 seconds, 41.7%
Fitness Testing:     97.5 seconds, 45.4%
Report:              27.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_dup} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_dup print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4065.6463108999965
Median total errors in population: 1406.8618000000001
Error averages by case: (114.16591170000025 8.208 109.79873860000126 10.335 156.7373579999984 11.068 132.33063890000108 10.244 119.11020869999928 11.278 163.85047739999862 9.49 149.66741980000148 7.809 137.16507429999817 10.159 116.74292189999841 8.947 203.91997929999764 10.557 175.99750229999879 11.946 179.86296799999687 8.583 137.0827732999989 10.464 117.0922776999991 10.274 136.60324090000134 9.511 153.83590340000097 9.339 188.82882129999865 8.571 183.17075690000027 10.206 163.8946963000006 9.465 136.70842419999883 11.1 175.52103319999847 9.503 195.0439549000015 10.151 141.2470833000015 7.831 134.34264669999837 9.005 201.1984998999999 7.683)
Error minima by case: (2.9191 6 7.2166 3 35.0 5 10.7372 5 4.1577 10 16.0 6 0.6042 6 2.0 5 8.2777 7 36.0 6 71.7227 4 62.9103 5 23.5081 4 2.8455 3 1.8802 5 2.3859 5 68.0 5 58.7267 4 66.0081 5 13.679 3 50.1316 8 31.913 5 19.1468 6 26.9468 8 65.0 6)
Average genome size in population (length): 82.236
Average program size in population (points): 83.236
Average percent parens in population: 0.012
Minimum age in population: 91.5175950932789
Maximum age in population: 96.23184662529574
Average age in population: 94.26107695618933
Median age in population: 94.30145516649993
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.152
Error (vector) diversity:			 0.201
Behavioral diversity:				 0.223
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 101941438
--- Timings ---
Current time: 1529616238747 milliseconds
Total Time:         218.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.9 seconds, 41.6%
Fitness Testing:     99.3 seconds, 45.4%
Report:              28.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_shove} {:instruction float_div} {:instruction integer_shove} {:instruction float_div} {:instruction integer_dec} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_mod} {:instruction integer_max} {:instruction 58} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_dup_times} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_dec} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_swap integer_shove float_div integer_shove float_div integer_dec integer_swap float_cos tagged_200 integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub float_rot integer_sub print_float integer_sub float_max integer_yank float_mult 57 57 float_dec float_sub float_mod float_dup integer_add float_dup_times float_mod integer_max 58 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_dup_times print_float integer_shove integer_dup_times integer_dup_times float_sub float_dec integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4439.128117199995
Median total errors in population: 1406.8618000000001
Error averages by case: (130.38129880000022 8.292 125.30802650000115 10.348 169.09337989999847 11.097 147.28618880000107 10.253 137.6109251999997 11.326 180.1054714999985 9.506 166.6647343000016 7.856 150.36370239999817 10.203 131.04671209999856 9.025 217.86066179999764 10.57 190.72427849999875 11.958 194.43280009999685 8.634 151.2586201999993 10.481 133.00537339999912 10.28 151.50435030000054 9.516 168.59300400000114 9.394 202.7204922999986 8.579 199.24395460000036 10.23 178.36561980000045 9.497 152.07226339999912 11.136 191.79079939999835 9.537 206.5887094000015 10.149 156.36584060000118 7.876 147.2217642999992 9.045 216.99514559999974 7.736)
Error minima by case: (2.9077 6 7.7829 6 11.566 7 22.3549 7 4.1577 10 23.5693 7 0.6042 6 4.5491 7 8.2207 7 28.2169 7 82.7222 6 25.9975 7 37.5076 7 0.6613 6 31.2119 6 25.2937 6 97.2027 6 0.3653 7 69.0076 6 13.6791 7 1.8684 8 19.087 6 19.1469 6 26.8898 8 17.2491 7)
Average genome size in population (length): 81.941
Average program size in population (points): 82.941
Average percent parens in population: 0.012
Minimum age in population: 93.08774178185008
Maximum age in population: 97.75554021928257
Average age in population: 95.65921270737842
Median age in population: 95.67791853771729
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.16
Error (vector) diversity:			 0.218
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 103990063
--- Timings ---
Current time: 1529616242516 milliseconds
Total Time:         222.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.2 seconds, 41.5%
Fitness Testing:    101.2 seconds, 45.5%
Report:              28.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_div} {:instruction tagged_200} {:instruction integer_sub} {:instruction tagged_233} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_div} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_rot} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_div tagged_200 integer_sub tagged_233 integer_mod integer_dup integer_sub float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_div print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_rot print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4437.529419599997
Median total errors in population: 1408.8618000000001
Error averages by case: (132.62287000000018 8.366 123.2019305000017 10.387 173.86694789999814 11.108 145.58625480000114 10.28 132.78004799999908 11.342 176.89342929999793 9.535 163.59864410000156 7.904 155.0127685999979 10.19 135.2783139999983 9.091 221.23548309999745 10.604 188.46956389999835 11.986 198.00578889999656 8.692 148.9259373999998 10.515 127.75826619999886 10.305 149.79149110000014 9.575 166.5548651000016 9.425 200.90123999999804 8.623 195.42098530000078 10.239 176.60245920000102 9.529 155.91697629999996 11.138 188.8283117999985 9.578 211.2353076000017 10.169 160.14001940000043 7.927 151.39501359999957 9.127 214.10950349999985 7.762)
Error minima by case: (2.9077 6 7.7829 7 17.8005 8 21.0757 8 4.1577 9 39.2497 8 0.6042 6 15.4509 8 8.3127 7 90.691 8 82.7222 7 62.9103 8 37.5076 8 0.3373 7 29.9327 7 29.427 7 97.2027 7 0.5511 8 69.0076 7 13.679 8 7.8684 8 26.8232 7 19.1468 6 26.9818 8 33.7787 6)
Average genome size in population (length): 81.811
Average program size in population (points): 82.811
Average percent parens in population: 0.012
Minimum age in population: 94.30293660380259
Maximum age in population: 98.89494868905297
Average age in population: 97.06196606410815
Median age in population: 97.11990347992284
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.156
Error (vector) diversity:			 0.209
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 106035388
--- Timings ---
Current time: 1529616246408 milliseconds
Total Time:         226.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.6 seconds, 41.4%
Fitness Testing:    103.1 seconds, 45.6%
Report:              29.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction integer_yank} {:instruction integer_swap} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_936} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add integer_sub integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec integer_yank integer_swap integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_936 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4008.7866170999973
Median total errors in population: 1407.3618500000002
Error averages by case: (114.94483560000025 8.211 103.93642620000156 10.305 154.84324479999836 11.031 126.08436420000113 10.207 117.08752119999932 11.229 161.0060791999988 9.472 146.2931973000016 7.756 139.05910449999817 10.181 116.91384889999833 8.898 207.8191333999975 10.565 170.38842459999861 11.971 184.15003479999683 8.604 130.3948843999979 10.439 112.95440719999907 10.23 130.42799380000204 9.501 147.40758660000077 9.321 183.0230108999983 8.549 179.76837400000068 10.168 158.30151210000034 9.437 141.2357244999989 11.108 172.14015689999835 9.44 192.63716060000172 10.075 145.53131620000119 7.812 133.320207299998 8.936 197.98506789999968 7.687)
Error minima by case: (2.9077 6 7.7829 4 16.7252 4 21.3549 4 5.0657 10 13.0 4 0.3958 6 5.0 4 8.2787 7 39.0 5 48.8149 5 63.9098 4 0.6003 5 0.4316 3 24.7881 4 25.2937 4 50.2953 5 0.3653 4 43.1003 5 14.6785 4 7.1817 8 26.0063 4 20.1463 4 26.9478 8 32.7007 4)
Average genome size in population (length): 81.269
Average program size in population (points): 82.269
Average percent parens in population: 0.012
Minimum age in population: 95.8288411150357
Maximum age in population: 100.2727880249186
Average age in population: 98.43553224524452
Median age in population: 98.49051634019821
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.157
Error (vector) diversity:			 0.201
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 108067213
--- Timings ---
Current time: 1529616250179 milliseconds
Total Time:         230.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.0 seconds, 41.3%
Fitness Testing:    104.9 seconds, 45.6%
Report:              30.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot print_float 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max float_max integer_yank float_mod float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub integer_yank integer_fromfloat float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4132.753460599996
Median total errors in population: 1408.86155
Error averages by case: (118.6080102000003 8.262 109.03669680000168 10.313 159.64791299999803 11.056 132.31117910000108 10.242 123.63124349999885 11.268 167.19383109999825 9.484 153.09800910000163 7.77 142.3098848999978 10.156 121.93605209999795 8.973 209.87312259999752 10.544 176.07888809999824 11.987 186.14713919999647 8.601 135.2646283999985 10.464 121.23271069999873 10.259 135.63652310000163 9.529 153.6403617000012 9.332 188.7880237999981 8.542 185.08964550000067 10.179 163.18427020000104 9.459 143.23009399999856 11.122 177.58046099999837 9.47 198.57563270000176 10.124 148.4484062000015 7.812 137.40843629999816 8.965 203.20029729999982 7.689)
Error minima by case: (2.9997 6 7.7834 7 0.566 8 22.3549 7 4.1578 10 0.113 8 0.6042 6 15.4564 7 8.3127 7 90.6905 8 48.8149 6 62.9098 7 0.6003 8 0.4316 7 24.7881 8 25.2937 8 50.2953 7 0.3653 8 43.1003 8 13.6785 7 1.8684 8 0.087 7 19.1463 6 26.9818 8 0.7928 7)
Average genome size in population (length): 81.492
Average program size in population (points): 82.492
Average percent parens in population: 0.012
Minimum age in population: 97.03910326032438
Maximum age in population: 101.6062817411262
Average age in population: 99.78955764173685
Median age in population: 99.81355234350654
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.157
Error (vector) diversity:			 0.198
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 110104613
--- Timings ---
Current time: 1529616253856 milliseconds
Total Time:         233.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.4 seconds, 41.2%
Fitness Testing:    106.7 seconds, 45.7%
Report:              30.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_cos} {:instruction tagged_200} {:instruction float_div} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_dup} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_dup} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_cos tagged_200 float_div integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank print_integer float_max integer_yank float_mult 57 57 integer_add float_sub integer_dup float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_dup float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4639.047664099995
Median total errors in population: 1408.86155
Error averages by case: (143.76588169999883 8.349 127.9949236000018 10.32 181.40843039999817 11.062 149.85062560000114 10.218 142.9161436999999 11.36 186.62291169999753 9.519 173.2168714000017 7.908 166.9189062999976 10.175 144.00477809999938 9.095 232.70754159999743 10.582 192.30022759999818 11.941 209.40063839999632 8.67 153.78968149999966 10.46 137.27994069999852 10.265 154.01788410000043 9.522 170.39320530000157 9.383 204.44220599999804 8.583 205.43423550000097 10.177 180.73295260000103 9.473 167.95117909999934 11.151 197.97890369999828 9.591 218.54956830000185 10.11 170.89816980000066 7.912 160.66888659999938 9.087 223.12697079999978 7.763)
Error minima by case: (1.9997 6 6.7835 4 11.566 5 20.3435 5 4.0722 10 9.887 5 0.6042 6 4.5491 5 7.3127 7 38.7831 5 81.7228 4 62.9094 6 36.5082 5 0.2466 4 29.2005 5 28.6949 5 96.2032 5 0.8189 5 68.0082 5 13.6781 4 1.8684 8 19.087 5 19.1459 5 25.9818 8 33.8849 5)
Average genome size in population (length): 80.993
Average program size in population (points): 81.993
Average percent parens in population: 0.012
Minimum age in population: 98.08104641666122
Maximum age in population: 102.9827943060304
Average age in population: 101.1461882762417
Median age in population: 101.191615320967
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.161
Error (vector) diversity:			 0.224
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 112129563
--- Timings ---
Current time: 1529616257584 milliseconds
Total Time:         237.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.7 seconds, 41.2%
Fitness Testing:    108.6 seconds, 45.7%
Report:              31.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_dup_items} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction tag_float_726} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_yankdup integer_dup float_div integer_swap float_add float_cos integer_dup float_dup_items in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max tag_float_726 float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4590.528708899998
Median total errors in population: 1408.8613
Error averages by case: (130.68208560000028 8.419 125.82810660000163 10.408 171.0106555999984 11.122 147.98570270000107 10.327 149.0335001000009 11.361 191.44647889999737 9.587 177.40044010000167 7.967 163.47561559999795 10.225 133.1599148999984 9.154 229.28270339999756 10.671 190.90369119999818 12.035 206.2487718999967 8.765 151.4408229999995 10.57 144.56474379999867 10.35 152.1823399000003 9.599 168.8362229000016 9.458 203.2921630999978 8.703 209.66137220000138 10.276 179.14300280000106 9.567 164.46053550000025 11.176 202.29369319999836 9.619 208.22706560000165 10.225 168.63793600000014 7.976 149.52069939999933 9.12 227.24844489999978 7.882)
Error minima by case: (2.9647 6 7.7829 5 11.566 6 19.3549 6 4.1578 9 13.887 6 0.6042 6 4.5491 6 8.2777 7 38.7831 6 47.8149 4 62.9103 7 1.6003 6 0.4316 5 23.7881 6 24.2937 6 49.2953 5 1.4135 6 42.1003 6 13.679 5 1.8684 8 19.087 6 19.1468 6 26.9468 8 33.9625 6)
Average genome size in population (length): 81.022
Average program size in population (points): 82.022
Average percent parens in population: 0.012
Minimum age in population: 100.4226443893314
Maximum age in population: 104.5313063989734
Average age in population: 102.5178263277859
Median age in population: 102.5562679468984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.17
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.252
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 114155188
--- Timings ---
Current time: 1529616261293 milliseconds
Total Time:         241.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.1 seconds, 41.1%
Fitness Testing:    110.4 seconds, 45.8%
Report:              31.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_shove} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_frominteger integer_swap integer_swap integer_sub integer_swap integer_swap integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_shove float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4309.527272099998
Median total errors in population: 1408.8618000000001
Error averages by case: (127.12590340000025 8.299 118.65079520000135 10.348 164.37617929999843 11.061 140.82979120000098 10.259 130.77081349999912 11.288 174.18834979999826 9.517 159.70280470000154 7.863 148.72839369999798 10.206 126.15563259999841 8.986 215.7199150999975 10.59 183.85406549999837 11.931 192.12685479999652 8.639 144.46742829999914 10.474 128.54402119999898 10.263 145.0274127000008 9.526 161.98878300000126 9.376 196.4536003999982 8.601 192.79375030000062 10.221 171.91518300000095 9.5 149.43426659999912 11.129 185.2472092999984 9.53 202.0846148000018 10.138 153.74392100000088 7.874 142.42911989999874 9.034 210.79746279999978 7.718)
Error minima by case: (2.9192 6 7.2166 9 15.566 9 10.7372 9 5.0715 10 39.0209 8 0.6042 6 16.455 9 8.2322 7 91.6891 9 48.8149 9 63.9084 8 0.6003 9 0.6613 7 1.8802 8 2.3859 8 50.2953 7 0.3653 8 43.1003 8 14.6771 9 5.8684 8 23.087 8 20.1449 6 26.9013 8 32.7007 6)
Average genome size in population (length): 80.57
Average program size in population (points): 81.57
Average percent parens in population: 0.012
Minimum age in population: 101.7297527153401
Maximum age in population: 106.0242019996
Average age in population: 103.848187315789
Median age in population: 103.9078790836934
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.158
Error (vector) diversity:			 0.204
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 116169488
--- Timings ---
Current time: 1529616264958 milliseconds
Total Time:         244.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.4 seconds, 41.0%
Fitness Testing:    112.2 seconds, 45.8%
Report:              32.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206115  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction float_div} {:instruction tagged_360} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_dup} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_mult} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction integer_inc} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_dup} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_max} {:instruction float_max} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_max} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_dup integer_dup_items integer_dup integer_dup_times integer_dup_items integer_dup integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 float_div tagged_360 float_add float_cos integer_dup float_dup in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_mult float_mult 57 57 integer_add integer_inc float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_dup float_max integer_yank float_mod float_max float_max float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min integer_inc integer_rot float_sub float_dup_times integer_shove integer_dup_times integer_dup_times float_sub float_max integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4697.536404999995
Median total errors in population: 1408.8618000000001
Error averages by case: (137.52699459999974 8.457 135.97817210000133 10.435 177.27055309999793 11.145 157.6180225000011 10.351 149.8509922 11.4 191.8790145999976 9.61 178.6482163000017 7.977 162.83438849999743 10.251 139.53974009999845 9.151 227.73290829999755 10.678 200.34349379999793 12.047 203.9272621999963 8.757 161.49246669999994 10.561 147.13812349999844 10.385 161.79606470000033 9.62 178.36914810000158 9.493 212.66751639999782 8.71 210.19232240000073 10.271 188.62976550000135 9.573 162.1299104999991 11.227 202.90974749999833 9.623 214.5428032000019 10.234 166.39861530000138 7.99 155.51712299999897 9.145 227.65303989999984 7.859)
Error minima by case: (2.9647 6 7.7829 4 11.566 4 22.3549 4 5.0657 9 15.0 4 0.6042 6 3.0 4 8.2777 7 37.0 4 47.8149 4 63.9094 5 0.3997 5 0.2366 3 24.7881 4 25.2937 4 49.2953 5 0.3042 4 42.1003 5 14.6781 3 1.8684 8 19.087 4 20.1459 4 26.9468 8 28.7928 4)
Average genome size in population (length): 80.541
Average program size in population (points): 81.541
Average percent parens in population: 0.012
Minimum age in population: 102.7297527153401
Maximum age in population: 107.3393107075974
Average age in population: 105.2368185052265
Median age in population: 105.3008176749862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.17
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 118183238
--- Timings ---
Current time: 1529616268704 milliseconds
Total Time:         248.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.8 seconds, 41.0%
Fitness Testing:    114.1 seconds, 45.9%
Report:              32.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_dup_items} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction tag_float_726} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_yankdup integer_dup float_div integer_swap float_add float_cos integer_dup float_dup_items in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max float_sub float_rot integer_sub print_float print_integer float_max tag_float_726 float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4541.822611999996
Median total errors in population: 1408.86155
Error averages by case: (137.7110105999998 8.319 123.73926340000133 10.359 177.43310719999857 11.096 146.25868570000108 10.276 139.52253460000014 11.313 182.2068440999979 9.525 169.11506160000175 7.843 163.4118735999982 10.164 138.69075369999905 9.028 228.73128699999756 10.599 189.23171619999863 12.025 205.37394659999651 8.673 150.0122061999993 10.5 134.87545299999903 10.309 150.46640200000047 9.56 167.36393590000145 9.403 201.80178189999845 8.645 201.23787230000084 10.214 177.3580820000006 9.488 163.61061109999963 11.133 193.78325209999832 9.567 214.85040330000157 10.185 167.97484750000086 7.879 155.35986339999926 9.028 218.80481699999984 7.766)
Error minima by case: (2.9997 6 4.7105 4 16.9224 5 8.2311 5 4.1583 9 41.1036 5 0.6042 5 13.457 5 8.3127 7 54.6911 6 3.7228 5 3.0896 6 26.0143 5 2.6627 4 0.6259 4 0.1203 4 31.2032 5 1.2929 5 17.9918 5 13.6785 5 7.3023 8 24.4102 5 19.1463 4 26.9818 8 33.9601 5)
Average genome size in population (length): 80.779
Average program size in population (points): 81.779
Average percent parens in population: 0.012
Minimum age in population: 104.2434172343163
Maximum age in population: 108.364382478173
Average age in population: 106.5718780722288
Median age in population: 106.569075185654
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.168
Error (vector) diversity:			 0.225
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 120202913
--- Timings ---
Current time: 1529616272480 milliseconds
Total Time:         252.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.2 seconds, 40.9%
Fitness Testing:    115.9 seconds, 45.9%
Report:              33.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_add} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction print_float} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_mult} {:instruction 57} {:instruction float_swap} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_add integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_dup_items integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_rot print_float integer_yank float_mult 57 integer_yank float_mult 57 57 integer_add float_yankdup float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_mult 57 float_swap float_yank float_inc integer_inc integer_fromfloat 57 float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4024.7669714999975
Median total errors in population: 1408.8618000000001
Error averages by case: (115.94990150000022 8.265 106.93690380000106 10.358 155.73758649999866 11.066 129.5598318000011 10.275 117.38229129999924 11.28 161.14012289999943 9.546 146.8189678000014 7.796 135.91397239999827 10.214 117.16631319999857 8.945 203.99143719999753 10.635 173.64122549999956 12.002 180.32628219999705 8.653 133.63663149999815 10.499 113.42264989999909 10.318 133.89276530000166 9.536 150.91883240000016 9.394 186.29922129999898 8.613 180.9593760000001 10.187 161.60684799999962 9.502 136.35490419999837 11.147 173.37255929999836 9.492 193.69592220000135 10.176 140.62204380000205 7.873 133.85674929999826 8.967 199.0766321999998 7.748)
Error minima by case: (2.9077 6 7.7834 4 16.7252 4 22.3549 4 5.0722 9 13.887 4 0.6042 6 3.0 4 8.2207 7 37.0 4 79.8149 4 63.9095 5 37.5081 5 0.4316 3 31.2119 4 30.7063 4 66.2953 5 0.3653 4 69.0081 5 14.6783 3 7.1817 8 26.0063 4 20.146 4 26.8898 7 32.7007 4)
Average genome size in population (length): 80.694
Average program size in population (points): 81.694
Average percent parens in population: 0.012
Minimum age in population: 105.5320488153849
Maximum age in population: 109.7841079665379
Average age in population: 108.0014029394927
Median age in population: 108.0432617013661
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.152
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.247
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 122220313
--- Timings ---
Current time: 1529616276227 milliseconds
Total Time:         256.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.5 seconds, 40.8%
Fitness Testing:    117.7 seconds, 46.0%
Report:              33.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_dup_items} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction tag_float_726} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_yankdup integer_dup float_div integer_swap float_add float_cos integer_dup float_dup_items in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max float_sub float_rot integer_sub print_float print_integer float_max tag_float_726 float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4125.446942299997
Median total errors in population: 1406.8619000000003
Error averages by case: (117.41321610000024 8.342 110.13367820000111 10.388 156.06943479999882 11.124 132.23303130000113 10.316 125.3413236999997 11.355 168.8916425999993 9.592 154.20239990000167 7.882 140.70708079999864 10.237 117.91070169999873 9.04 208.2300860999976 10.644 176.2558353999993 12.043 184.52963699999697 8.715 137.29363479999833 10.529 120.8344803999995 10.348 136.56004810000115 9.578 153.49694160000075 9.454 188.8850312999991 8.652 187.4053576999999 10.275 164.24084349999978 9.543 141.60355579999882 11.198 179.8392520999983 9.571 193.90698000000137 10.215 145.92127850000156 7.924 134.22843069999843 9.064 205.47504019999982 7.809)
Error minima by case: (2.0003 6 6.7829 6 3.434 7 19.0344 7 4.1577 10 6.113 7 0.6042 6 13.4509 7 7.3133 7 90.6911 7 25.8149 5 62.9104 8 19.3997 7 0.6612 6 18.7881 7 0.7063 7 40.2953 6 0.3654 7 12.1003 7 13.6791 6 5.857 8 23.087 6 19.1469 6 12.1102 8 0.2072 6)
Average genome size in population (length): 80.716
Average program size in population (points): 81.716
Average percent parens in population: 0.012
Minimum age in population: 106.5320488153849
Maximum age in population: 111.2942022947499
Average age in population: 109.4026024411806
Median age in population: 109.4364414759747
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.164
Error (vector) diversity:			 0.217
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 124238438
--- Timings ---
Current time: 1529616279936 milliseconds
Total Time:         259.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.9 seconds, 40.8%
Fitness Testing:    119.6 seconds, 46.0%
Report:              34.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction float_cos} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction tagged_676} {:instruction in2} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction float_inc} {:instruction float_max} {:instruction integer_yank} {:instruction float_tan} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 58} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_dup_times integer_dup_items integer_dup float_div float_cos integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup tagged_676 in2 integer_add float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float float_inc float_max integer_yank float_tan 57 57 integer_add float_sub 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult integer_yankdup integer_yank float_mod float_mult 58 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4682.7158317999965
Median total errors in population: 1406.8618000000001
Error averages by case: (145.1503162999988 8.343 132.0964327000018 10.389 183.32424469999833 11.124 153.39198360000108 10.289 142.71300229999994 11.335 185.69263399999755 9.544 174.34647360000167 7.918 166.9837327999978 10.231 145.9213414999996 9.068 232.3572815999975 10.626 196.23306799999816 12.006 209.69818989999652 8.708 157.44135580000022 10.522 137.7088080999986 10.312 157.57295149999976 9.576 173.41867910000164 9.428 208.32467629999786 8.663 206.2090359000013 10.243 184.62512600000116 9.558 168.37748110000027 11.158 198.8520056999984 9.58 220.56065780000176 10.194 172.39669790000025 7.972 162.06517689999998 9.074 223.6114786999999 7.782)
Error minima by case: (2.9193 6 6.2166 8 11.566 8 9.7372 8 4.1577 10 12.887 4 0.3958 6 4.5491 8 8.2777 7 38.7831 9 71.7227 7 62.9104 7 23.5081 9 0.2466 7 0.8802 8 1.3859 8 65.2953 7 0.3313 4 66.0081 8 13.6791 8 1.8684 8 19.087 8 19.1469 6 26.9468 7 32.7007 4)
Average genome size in population (length): 80.631
Average program size in population (points): 81.631
Average percent parens in population: 0.012
Minimum age in population: 108.3775221227415
Maximum age in population: 112.7243677853562
Average age in population: 110.8523479862666
Median age in population: 110.8928670625538
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.182
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 126254338
--- Timings ---
Current time: 1529616283675 milliseconds
Total Time:         263.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.2 seconds, 40.7%
Fitness Testing:    121.4 seconds, 46.1%
Report:              34.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction float_add} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot print_float 57 57 integer_add float_sub float_mult 57 57 integer_add integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup float_add 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4314.338909899997
Median total errors in population: 1408.8618000000001
Error averages by case: (125.64543860000028 8.336 119.37229170000145 10.368 166.61427779999838 11.117 141.58273120000112 10.283 130.4959502999993 11.343 173.71525649999887 9.535 159.7197920000016 7.874 147.22357389999792 10.204 128.3930781999984 9.043 214.02762259999756 10.634 185.1881399999989 12.016 190.4077044999966 8.663 145.423880399999 10.506 127.26860909999907 10.313 145.79291350000105 9.568 162.78088370000097 9.41 197.77784939999842 8.629 192.4933009 10.243 173.10997850000035 9.501 147.74042069999854 11.134 184.9768818999984 9.567 204.2031587000017 10.181 152.22007840000185 7.913 144.55053869999838 9.069 210.39755869999982 7.767)
Error minima by case: (2.9191 6 7.7835 9 16.7252 9 23.3549 8 4.1577 9 39.0209 8 0.6042 6 15.457 8 8.2777 7 90.6911 9 82.7228 8 62.9104 7 37.5082 9 0.4316 8 32.2119 8 31.7063 8 97.2032 7 0.3653 8 69.0082 8 13.6791 9 7.1817 8 26.0063 8 19.1469 6 26.9468 8 32.7007 6)
Average genome size in population (length): 80.168
Average program size in population (points): 81.168
Average percent parens in population: 0.012
Minimum age in population: 109.3775221227415
Maximum age in population: 114.3043694096549
Average age in population: 112.290486248384
Median age in population: 112.3814001739374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.157
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 128258763
--- Timings ---
Current time: 1529616287344 milliseconds
Total Time:         267.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.6 seconds, 40.6%
Fitness Testing:    123.2 seconds, 46.1%
Report:              35.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_dup_items} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction tag_float_726} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_min} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_cos float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_yankdup integer_dup float_div integer_swap float_add float_cos integer_dup float_dup_items in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max float_sub float_rot integer_sub print_float print_integer float_max tag_float_726 float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_min print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4423.392838199996
Median total errors in population: 1408.8618000000001
Error averages by case: (131.69063130000012 8.364 126.78423720000157 10.372 171.94549559999842 11.117 148.69192570000112 10.325 133.2520691999994 11.373 176.11734539999858 9.547 162.54483580000166 7.917 148.99386499999812 10.216 133.71624039999844 9.077 215.03514719999757 10.61 192.09891599999838 12.024 191.46590249999673 8.703 152.68190479999902 10.501 130.357889299999 10.299 152.95779870000084 9.587 169.75148820000143 9.425 204.5822499999983 8.638 195.0036134000006 10.243 180.23488040000083 9.514 148.9651511999987 11.146 187.54796569999849 9.611 209.44269750000169 10.198 153.3275745000016 7.903 149.88166539999872 9.065 212.72234779999985 7.824)
Error minima by case: (1.9997 6 6.7835 5 16.5742 5 22.3549 5 4.1577 10 15.0 5 0.6042 6 3.0 5 7.3127 7 37.0 5 80.0 5 62.9104 6 36.5082 6 0.4316 4 31.2119 5 30.7063 5 67.0 6 1.4135 5 68.0082 6 13.6791 4 6.8689 8 25.3408 5 19.1469 5 25.9818 8 33.9625 5)
Average genome size in population (length): 80.102
Average program size in population (points): 81.102
Average percent parens in population: 0.012
Minimum age in population: 111.1940482715003
Maximum age in population: 115.6765628772546
Average age in population: 113.7063855758112
Median age in population: 113.71452247415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.159
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 130261638
--- Timings ---
Current time: 1529616291070 milliseconds
Total Time:         270.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.0 seconds, 40.6%
Fitness Testing:    125.0 seconds, 46.1%
Report:              35.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_swap} {:instruction float_inc} {:instruction float_div} {:instruction integer_dec} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup_times} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_cos} {:instruction float_inc} {:instruction float_pop} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_swap float_inc float_div integer_dec integer_swap float_cos tagged_200 integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_float print_integer float_max integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup_times 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod integer_inc float_inc integer_inc integer_fromfloat 57 float_min float_cos float_inc float_pop integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4212.848859899996
Median total errors in population: 1406.8618000000001
Error averages by case: (121.05230530000023 8.342 114.1725496000011 10.388 162.51261659999847 11.142 136.26856590000108 10.304 125.26437489999954 11.369 168.2402058999988 9.528 155.97861420000152 7.908 145.16179139999832 10.229 123.70742379999875 9.045 213.67940729999754 10.629 180.05134039999894 12.014 190.0536220999968 8.702 140.21005839999842 10.507 121.25211229999937 10.306 140.5635975000013 9.574 157.63320280000062 9.44 192.70455279999894 8.632 187.51138620000023 10.244 168.09945370000023 9.501 147.44490219999875 11.186 180.08921499999838 9.602 200.44110570000163 10.219 151.82696300000154 7.899 140.1413551999984 9.066 205.22613769999984 7.786)
Error minima by case: (1.418 6 6.8755 8 0.566 9 10.7372 8 4.1577 10 0.113 7 0.6042 6 4.5491 7 6.269 7 38.7831 8 71.7227 7 62.9104 7 0.3997 9 0.6613 6 1.8802 8 2.3859 8 66.2953 7 0.3653 8 66.0081 8 13.6791 8 7.0441 8 0.087 8 19.1469 6 8.5999 7 0.7928 6)
Average genome size in population (length): 80.007
Average program size in population (points): 81.007
Average percent parens in population: 0.012
Minimum age in population: 112.1940482715003
Maximum age in population: 117.210014179866
Average age in population: 115.0834917086916
Median age in population: 115.1185062115418
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.175
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 132262263
--- Timings ---
Current time: 1529616294726 milliseconds
Total Time:         274.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.3 seconds, 40.5%
Fitness Testing:    126.8 seconds, 46.2%
Report:              36.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206116  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_inc} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 59} {:instruction integer_add} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 59} {:instruction float_min} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yankdup} {:instruction tagged_987} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_mult integer_swap integer_sub integer_dup_times integer_dup_items integer_dup integer_sub integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_inc print_float print_integer float_max integer_yank float_mult 57 59 integer_add integer_yank float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 59 float_min float_yank integer_inc integer_rot float_sub float_inc integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yankdup tagged_987 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4381.087043699997
Median total errors in population: 1408.8618000000001
Error averages by case: (132.04558510000007 8.337 122.66537920000202 10.351 170.82978299999823 11.099 144.7977435000012 10.264 131.81349469999898 11.308 174.88851909999778 9.512 161.16313010000167 7.823 151.02143729999773 10.2 131.93088879999812 9.007 216.7252368999974 10.58 187.27460369999818 12.011 193.0597035999965 8.642 148.76875189999984 10.475 128.54121359999866 10.287 149.0615259000002 9.545 165.05965030000164 9.393 199.88138819999784 8.618 193.88714220000094 10.21 175.31274400000117 9.494 150.56173319999934 11.156 186.38899029999837 9.516 207.4908633000016 10.152 155.00557960000123 7.846 148.63357709999923 9.044 211.67437909999984 7.734)
Error minima by case: (2.9735 6 7.783 8 17.566 8 20.0981 8 4.1577 10 35.113 8 0.6042 6 15.4561 7 8.2865 7 90.6902 9 82.7223 8 62.9095 8 37.5077 9 0.2056 7 28.9551 8 28.4494 8 97.2027 7 0.7267 8 69.0077 8 13.6783 8 7.8684 8 25.087 8 19.146 6 26.9556 8 28.7928 7)
Average genome size in population (length): 80.052
Average program size in population (points): 81.052
Average percent parens in population: 0.012
Minimum age in population: 113.2392641698591
Maximum age in population: 118.5678868948665
Average age in population: 116.5060792517739
Median age in population: 116.5448232068855
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.161
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.247
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 134263813
--- Timings ---
Current time: 1529616298560 milliseconds
Total Time:         278.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.7 seconds, 40.5%
Fitness Testing:    128.7 seconds, 46.2%
Report:              36.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_dup_items} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction tag_float_726} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_yankdup integer_dup float_div integer_swap float_add float_cos integer_dup float_dup_items in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max float_sub float_rot integer_sub print_float print_integer float_max tag_float_726 float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4135.991964099997
Median total errors in population: 1408.8618000000001
Error averages by case: (125.35980420000026 8.282 108.28256520000178 10.333 164.84522469999834 11.037 131.10253260000115 10.263 117.91217559999875 11.254 161.71387359999852 9.545 147.46261530000172 7.808 145.81541169999787 10.167 125.89599819999788 8.997 213.24882089999747 10.623 175.9065324999988 11.914 189.71746899999647 8.645 134.8830987999984 10.477 113.97000439999861 10.296 135.42676570000165 9.523 152.5005423000008 9.386 188.61491489999838 8.614 180.58398860000037 10.163 163.91541560000036 9.479 147.1112762999991 11.123 173.03512759999828 9.493 203.58202040000168 10.128 151.41633540000112 7.901 142.74477639999856 9.016 198.75467419999984 7.723)
Error minima by case: (2.9191 6 7.7835 9 0.566 9 9.5355 8 1.1577 10 0.113 8 0.6042 6 4.5491 9 8.2321 7 38.7831 9 81.0 9 62.9104 7 37.5082 9 0.6613 8 18.3925 8 17.8868 8 68.0 7 0.3653 8 69.0082 8 13.6791 9 1.8684 8 0.087 8 19.1469 6 26.9012 8 0.7928 6)
Average genome size in population (length): 80.328
Average program size in population (points): 81.328
Average percent parens in population: 0.012
Minimum age in population: 114.9918012185331
Maximum age in population: 119.8988370826938
Average age in population: 117.9429767660336
Median age in population: 118.0089902900752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.158
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 136272288
--- Timings ---
Current time: 1529616302362 milliseconds
Total Time:         282.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.1 seconds, 40.4%
Fitness Testing:    130.6 seconds, 46.3%
Report:              37.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction tag_float_530} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_dec} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_935} {:instruction tagged_452} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_times integer_dup_times integer_dup_items tag_float_530 integer_dup_times integer_dup_items integer_dup float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_dup_times 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_mult float_max integer_yank integer_swap 57 57 integer_add float_sub float_mod float_dup 57 float_flush float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod integer_dec float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_935 tagged_452 print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4421.366967199995
Median total errors in population: 1408.8613
Error averages by case: (128.87481420000026 8.29 116.76939220000122 10.353 168.11486709999832 11.083 140.00765290000112 10.275 137.98437139999947 11.306 180.88690369999844 9.548 166.0507595000017 7.841 161.4220701999978 10.209 129.69238859999834 9.002 227.28870639999747 10.623 182.18740409999896 11.994 203.93508989999648 8.689 143.67855559999887 10.495 134.75280989999897 10.321 144.2389558000009 9.529 161.25798600000078 9.404 195.74359209999875 8.629 198.77613730000027 10.192 170.20655930000027 9.476 161.86640329999906 11.163 191.28486449999832 9.519 205.83684800000168 10.153 166.20623860000126 7.888 145.95545579999884 9.0 215.60514079999982 7.761)
Error minima by case: (2.9191 6 7.7829 8 11.566 9 23.3549 9 4.1578 10 39.1016 8 0.6042 6 15.4569 8 8.2777 7 90.691 8 82.7222 7 62.9103 8 37.5076 9 0.742 7 32.2119 8 31.7063 8 97.2027 7 0.2847 9 69.0076 8 13.679 8 1.8684 8 19.087 8 19.1468 6 26.9468 8 32.7814 6)
Average genome size in population (length): 80.09
Average program size in population (points): 81.09
Average percent parens in population: 0.012
Minimum age in population: 117.0269737986362
Maximum age in population: 121.5057887393401
Average age in population: 119.3581130042043
Median age in population: 119.3972345878557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.159
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 138274988
--- Timings ---
Current time: 1529616306139 milliseconds
Total Time:         286.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.5 seconds, 40.4%
Fitness Testing:    132.5 seconds, 46.3%
Report:              37.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_swap} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_dup} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_inc} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_min} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_sub integer_dup_items integer_dup float_inc integer_swap tagged_200 integer_sub integer_swap integer_dup_items integer_dup float_dup in2 float_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer 7 integer_dec print_integer float_dup_times integer_sub float_rot integer_sub print_float integer_sub float_max integer_yank float_mult integer_swap integer_yank integer_inc 57 57 integer_add float_sub float_mod float_dup 57 integer_yank float_mult 57 57 integer_add float_sub float_mod integer_fromfloat 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_min 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4361.065079799995
Median total errors in population: 1406.8618500000002
Error averages by case: (129.8007019000002 8.303 120.43582120000148 10.342 168.8467968999985 11.089 142.22891660000116 10.25 130.5822044999991 11.304 173.17155839999825 9.539 161.93787390000173 7.857 151.08856009999795 10.182 130.43314059999838 9.019 218.02025819999741 10.593 186.00251829999885 12.016 194.8597123999964 8.663 146.52184619999903 10.475 126.88233539999898 10.289 146.54740630000086 9.519 163.24795240000117 9.413 198.46403519999853 8.608 193.8770275000005 10.194 174.19844520000052 9.493 152.7478326999988 11.136 186.51896889999833 9.551 206.88682810000168 10.149 156.92021470000137 7.892 146.86458949999863 9.011 211.3405346999999 7.752)
Error minima by case: (2.9107 6 7.7835 5 0.566 6 23.3549 6 4.0722 9 0.113 6 0.6042 6 3.5491 6 6.9552 7 37.7831 7 79.0 7 62.9104 7 37.5082 7 0.6613 5 32.2119 5 30.0 5 66.0 7 0.3653 6 69.0082 7 13.6791 6 6.8684 8 0.087 6 19.1469 5 4.6243 8 0.7928 6)
Average genome size in population (length): 79.569
Average program size in population (points): 80.569
Average percent parens in population: 0.013
Minimum age in population: 118.0575767400462
Maximum age in population: 123.023288744644
Average age in population: 120.643834870748
Median age in population: 120.6716743229564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.158
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 140264863
--- Timings ---
Current time: 1529616309897 milliseconds
Total Time:         289.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.9 seconds, 40.3%
Fitness Testing:    134.3 seconds, 46.4%
Report:              38.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_shove} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction tag_float_265} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_frominteger integer_swap integer_swap integer_sub integer_swap integer_swap integer_dup float_div integer_swap integer_swap float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup float_div integer_swap float_shove float_cos integer_dup integer_sub in2 tag_float_265 float_frominteger float_dec integer_stackdepth float_mod 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4517.810080499996
Median total errors in population: 1406.8618000000001
Error averages by case: (131.74329480000026 8.22 124.24953070000221 10.373 173.35390449999818 11.107 146.26764060000116 10.261 141.23916249999942 11.276 183.6565848999971 9.487 171.31336780000174 7.773 160.27214959999748 10.204 134.6671237999981 8.961 225.2379586999975 10.549 189.5492123999976 12.013 202.02370049999644 8.643 150.19991829999952 10.494 138.03764069999826 10.322 150.52137630000072 9.52 167.44135990000214 9.384 201.55900989999756 8.595 203.3169895000015 10.202 177.64821880000173 9.485 160.28645529999966 11.149 195.90030029999846 9.488 211.0061456000017 10.183 164.54562530000032 7.834 150.86673579999896 8.958 220.70167399999988 7.724)
Error minima by case: (2.9997 6 7.7835 9 11.566 9 12.7375 8 4.1577 9 40.113 8 0.6042 6 15.4509 8 8.3127 7 90.6905 8 3.7221 8 62.9098 8 37.5082 9 0.4316 9 11.8806 8 26.7187 7 31.2026 7 0.7267 8 17.9926 7 13.6785 9 1.8684 8 19.087 8 19.1463 6 26.9818 8 33.7928 6)
Average genome size in population (length): 78.712
Average program size in population (points): 79.712
Average percent parens in population: 0.013
Minimum age in population: 119.7601386061208
Maximum age in population: 123.9913359568063
Average age in population: 122.0413347822717
Median age in population: 122.0769074093772
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.158
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 142233163
--- Timings ---
Current time: 1529616313850 milliseconds
Total Time:         293.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.2 seconds, 40.3%
Fitness Testing:    136.3 seconds, 46.4%
Report:              39.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206171  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction tagged_863} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_add} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_add} {:instruction float_sub} {:instruction integer_div} {:instruction float_dup} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup_times} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_cos} {:instruction float_inc} {:instruction float_pop} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items tagged_863 float_div integer_swap float_add float_cos integer_dup integer_add in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add integer_sub integer_add float_sub integer_div float_dup 57 integer_add float_sub float_sub float_mod float_dup_times 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod integer_inc float_inc integer_inc integer_fromfloat 57 float_min float_cos float_inc float_pop integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4587.910741499995
Median total errors in population: 1406.8618000000001
Error averages by case: (138.42946159999954 8.289 133.47391210000163 10.407 177.50725469999807 11.146 155.09973810000116 10.297 140.59673579999944 11.326 183.21927019999808 9.558 169.25217940000164 7.874 154.8811199999978 10.276 140.2014314999985 8.985 222.91724069999762 10.644 197.96172379999786 12.076 199.71691019999668 8.711 159.04690349999962 10.539 134.89913029999863 10.328 159.31320040000068 9.564 175.88430200000155 9.465 210.28577349999762 8.68 201.60380200000088 10.244 186.2479800000014 9.545 157.67617079999908 11.214 194.20771609999838 9.542 214.46941050000174 10.21 161.8936825000014 7.925 156.168179699999 9.022 219.2795120999998 7.811)
Error minima by case: (2.9077 6 7.7829 4 16.7252 4 22.3549 4 4.1577 10 15.0 4 0.6042 6 3.0 4 8.2777 7 37.0 4 80.0 4 62.9099 5 37.5076 5 0.4316 3 31.2119 4 30.7063 4 67.0 5 0.3653 4 69.0076 5 13.6786 3 7.1817 8 26.0063 4 19.1463 4 26.9468 8 32.7007 4)
Average genome size in population (length): 77.916
Average program size in population (points): 78.916
Average percent parens in population: 0.013
Minimum age in population: 120.896194645325
Maximum age in population: 125.3493169197733
Average age in population: 123.4051141927254
Median age in population: 123.4594248211399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.173
Error (vector) diversity:			 0.234
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 144181963
--- Timings ---
Current time: 1529616317443 milliseconds
Total Time:         297.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.6 seconds, 40.2%
Fitness Testing:    138.0 seconds, 46.4%
Report:              39.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_swap} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_add} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_sub integer_dup_items integer_dup integer_add integer_swap tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub integer_rot integer_sub print_float integer_sub float_max integer_yank float_mult float_max integer_yank float_mult 57 57 integer_add float_sub integer_fromfloat float_add 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4776.237453399996
Median total errors in population: 1406.8618000000001
Error averages by case: (143.14716589999938 8.33 136.64848510000118 10.413 183.15288749999814 11.12 157.64824740000103 10.303 151.29579150000023 11.381 193.49428819999744 9.605 180.35537420000173 7.991 168.03089339999772 10.259 146.3363917999993 9.127 234.9073588999976 10.672 200.28749479999794 12.006 212.31250199999647 8.774 161.90954259999978 10.554 145.59766899999883 10.334 161.84885040000015 9.602 178.50306040000186 9.481 212.3120303999979 8.707 212.09098450000081 10.289 188.8184967000016 9.556 171.09780769999983 11.192 204.77756309999836 9.639 220.11645990000184 10.211 175.01766100000054 7.998 162.41250239999957 9.16 229.5529445999998 7.861)
Error minima by case: (2.9997 6 7.7834 9 9.0489 8 12.7371 9 4.0857 10 39.02 8 0.3958 6 13.457 8 8.3127 7 54.6911 9 3.7227 8 3.0896 6 37.5082 9 0.6604 8 11.8801 8 27.6141 8 7.7047 7 0.3653 8 17.9918 8 13.6791 9 7.0441 8 1.5279 8 19.1469 6 26.9818 8 32.6998 6)
Average genome size in population (length): 77.448
Average program size in population (points): 78.448
Average percent parens in population: 0.013
Minimum age in population: 122.3859351653098
Maximum age in population: 126.8891719301592
Average age in population: 124.765485297278
Median age in population: 124.8168185085307
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.173
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 146118963
--- Timings ---
Current time: 1529616321072 milliseconds
Total Time:         301.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.9 seconds, 40.2%
Fitness Testing:    139.8 seconds, 46.5%
Report:              40.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction integer_swap} {:instruction in1} {:instruction float_cos} {:instruction tagged_200} {:instruction float_pop} {:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction print_float} {:instruction 56} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_cos} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction print_integer})
Best program: (integer_dup_items float_dec float_div integer_swap in1 float_cos tagged_200 float_pop float_cos integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank 57 57 integer_add float_sub float_mod print_float 56 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult integer_yankdup integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_cos integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4788.066673699996
Median total errors in population: 1406.8618000000001
Error averages by case: (143.0553874999996 8.402 138.76225900000148 10.425 185.24122129999813 11.161 160.75790220000115 10.317 150.4138384 11.386 191.42530989999798 9.59 178.16875670000158 7.983 169.25436139999763 10.261 146.22475189999875 9.124 234.07440049999767 10.66 202.80527789999826 12.036 210.30652799999666 8.768 163.8715401999999 10.57 146.36282499999862 10.34 164.98111810000017 9.606 181.45349730000143 9.501 215.06487339999822 8.715 209.84102100000092 10.266 192.03347950000102 9.577 168.85290289999952 11.187 202.5471449999985 9.641 222.96764600000165 10.25 173.94055340000108 7.985 163.6670061999993 9.158 227.2120709999998 7.872)
Error minima by case: (1.9997 6 6.7835 5 11.566 6 19.3549 6 4.0722 10 33.8187 6 0.6042 6 15.457 6 7.3127 6 55.8514 7 81.7228 6 58.0708 7 36.5082 6 0.4316 5 28.2119 5 27.7063 5 96.2032 6 0.6958 6 68.0082 6 13.6791 6 1.8684 8 17.4832 6 6.3072 5 25.9818 8 33.8498 6)
Average genome size in population (length): 77.346
Average program size in population (points): 78.346
Average percent parens in population: 0.013
Minimum age in population: 123.7525295135142
Maximum age in population: 128.3020238952802
Average age in population: 126.125599340811
Median age in population: 126.136834126065
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.171
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 148053413
--- Timings ---
Current time: 1529616324939 milliseconds
Total Time:         304.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.4 seconds, 40.2%
Fitness Testing:    141.6 seconds, 46.5%
Report:              40.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_sin} {:instruction tagged_200} {:instruction integer_sub} {:instruction float_shove} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction print_float} {:instruction 57} {:instruction float_sub} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_sin tagged_200 integer_sub float_shove integer_dup_items integer_dup float_tan integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank 57 57 integer_add float_sub float_mod print_float 57 float_sub float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult integer_yankdup integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4354.140332699996
Median total errors in population: 1406.8618000000001
Error averages by case: (128.78597460000023 8.283 122.73220980000148 10.391 166.86565769999842 11.142 145.18104650000106 10.299 130.65529229999922 11.305 174.47362269999857 9.543 160.63789780000153 7.86 147.53211349999845 10.233 128.47030839999843 9.009 214.91071689999768 10.601 188.97119219999857 12.033 191.40046989999695 8.686 149.29662829999936 10.518 126.87664869999898 10.317 149.46475030000056 9.574 166.221700500001 9.44 201.4073432999984 8.647 192.03413700000038 10.257 177.05624530000074 9.534 148.95417769999935 11.162 185.53157119999844 9.534 204.2558156000015 10.213 153.23550850000112 7.891 145.16891239999924 9.031 210.74139159999982 7.776)
Error minima by case: (2.9978 6 7.7829 4 11.566 5 21.3549 5 4.1315 9 9.5776 5 0.3958 6 15.4569 5 8.3108 7 90.691 5 46.8149 4 62.9103 6 0.6003 5 0.7634 4 24.7881 5 25.2937 5 48.2953 5 0.6958 5 41.1003 5 13.679 4 1.8684 8 19.087 5 19.1468 5 26.9799 7 3.2575 5)
Average genome size in population (length): 77.423
Average program size in population (points): 78.423
Average percent parens in population: 0.013
Minimum age in population: 125.3180312175038
Maximum age in population: 129.5712624572529
Average age in population: 127.5249091198111
Median age in population: 127.5254960037439
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.184
Error (vector) diversity:			 0.229
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 149990163
--- Timings ---
Current time: 1529616328604 milliseconds
Total Time:         308.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.8 seconds, 40.1%
Fitness Testing:    143.4 seconds, 46.5%
Report:              41.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_pop integer_dup_times float_div integer_swap integer_swap float_cos tagged_200 integer_sub float_add float_cos integer_dup_items integer_dup integer_sub integer_dup_times integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_rot float_rot integer_sub print_float print_integer integer_dup integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4546.314998899997
Median total errors in population: 1406.8618000000001
Error averages by case: (136.36350019999975 8.27 125.49433580000155 10.348 176.51246699999828 11.07 149.37176210000115 10.252 139.44731649999954 11.35 182.08461929999788 9.524 167.6078336000016 7.895 162.85109689999788 10.194 138.24926919999857 9.052 227.56633839999756 10.574 191.5523331999984 12.002 204.23457079999662 8.668 152.30257279999904 10.481 135.34309989999892 10.287 153.608488200001 9.531 170.42980560000143 9.407 204.07056159999806 8.626 200.00722080000082 10.237 178.98678200000106 9.512 162.32361119999987 11.146 192.5758820999984 9.57 213.84410310000172 10.156 166.7046746000006 7.862 154.31908229999885 9.062 217.6326716999999 7.755)
Error minima by case: (2.9138 6 7.7829 5 16.5742 6 23.3549 6 3.6415 10 22.9791 6 0.6042 6 16.2027 6 8.2272 7 66.6911 6 82.7222 4 62.5623 7 37.5076 5 0.6613 5 32.2119 6 31.7063 6 97.2027 6 0.3653 6 69.0076 5 12.9945 6 6.8689 8 24.9948 7 17.1469 6 16.9818 8 29.2993 6)
Average genome size in population (length): 77.299
Average program size in population (points): 78.299
Average percent parens in population: 0.013
Minimum age in population: 126.3866522659147
Maximum age in population: 131.0111334559521
Average age in population: 128.9334102957271
Median age in population: 128.992835401579
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.151
Error (vector) diversity:			 0.216
Behavioral diversity:				 0.252
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 151923988
--- Timings ---
Current time: 1529616332220 milliseconds
Total Time:         312.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.1 seconds, 40.1%
Fitness Testing:    145.2 seconds, 46.5%
Report:              41.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_sin} {:instruction tagged_83} {:instruction integer_sub} {:instruction float_shove} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_dec} {:instruction float_cos} {:instruction print_float} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_inc} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap float_sin tagged_83 integer_sub float_shove integer_dup_items integer_dup float_div integer_swap integer_dec float_cos print_float integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer integer_sub float_max integer_yank float_mult float_max integer_yank float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_inc integer_inc integer_rot float_sub integer_inc integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4599.2952764999945
Median total errors in population: 1406.8618000000001
Error averages by case: (139.32594789999956 8.243 132.33458310000168 10.351 178.4096892999981 11.101 155.32692410000115 10.256 140.3913480999993 11.277 183.79089629999757 9.535 169.33762220000173 7.838 156.8750669999976 10.221 141.08060979999857 8.979 222.9493708999975 10.583 198.60878639999765 12.008 200.40117139999634 8.668 159.32684090000024 10.485 136.87471719999857 10.32 158.59715210000016 9.505 175.34091530000177 9.408 211.06929469999767 8.617 202.41514250000125 10.189 185.87477990000153 9.507 158.3614334999997 11.159 195.05196619999828 9.514 216.14738710000174 10.161 162.7245774000008 7.871 157.08403509999965 8.97 219.06501809999978 7.764)
Error minima by case: (2.9191 6 7.2166 8 16.8005 8 10.7372 8 5.0722 9 39.0209 8 0.6042 6 16.456 7 8.2321 7 91.6901 8 71.7227 8 63.9094 7 23.5081 9 0.6613 7 1.8802 8 2.3859 8 73.2031 7 0.016 8 66.0081 8 14.6781 9 7.0441 8 24.4102 8 20.1459 6 26.9012 7 32.7007 6)
Average genome size in population (length): 76.865
Average program size in population (points): 77.865
Average percent parens in population: 0.013
Minimum age in population: 127.6933517107594
Maximum age in population: 132.1679626602666
Average age in population: 130.3605887957355
Median age in population: 130.419922770229
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.16
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 153847013
--- Timings ---
Current time: 1529616335964 milliseconds
Total Time:         315.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.5 seconds, 40.1%
Fitness Testing:    147.0 seconds, 46.5%
Report:              42.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_sin} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction tagged_438} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction print_float} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_inc} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items float_inc float_div integer_swap integer_swap float_sin tagged_200 integer_sub integer_mult integer_yank integer_dup tagged_438 integer_swap float_add float_cos print_float integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec float_inc float_rot integer_sub print_float print_integer float_max integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub float_rot integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4491.635788699996
Median total errors in population: 1406.8618000000001
Error averages by case: (133.63851079999958 8.328 124.85904940000162 10.4 173.40790709999848 11.111 145.95500200000112 10.304 137.61177459999968 11.349 181.00961919999776 9.581 168.95326190000165 7.919 156.17902169999795 10.235 136.153277099999 9.09 222.78866189999763 10.636 189.72027489999826 12.038 200.18314269999675 8.737 150.58875979999985 10.52 134.27996209999884 10.345 150.25843790000005 9.566 166.52707810000155 9.459 201.87777789999785 8.682 200.6866158000014 10.224 178.12936790000134 9.537 158.46731399999993 11.189 193.30537169999855 9.558 211.1863859000017 10.201 161.32455290000047 7.958 152.5498366999998 9.084 218.09482469999986 7.849)
Error minima by case: (1.9997 6 6.7835 7 15.8149 8 10.7372 7 4.1578 10 16.0 8 0.6042 6 9.4509 7 7.3127 7 90.691 8 3.7221 7 62.9103 7 23.5081 8 0.4316 7 1.8802 8 2.3859 8 31.2026 7 0.8188 8 17.9926 7 13.679 8 6.0903 8 23.3492 7 19.1468 6 25.9818 7 33.8848 6)
Average genome size in population (length): 76.648
Average program size in population (points): 77.648
Average percent parens in population: 0.013
Minimum age in population: 129.1900281943059
Maximum age in population: 133.8031911767444
Average age in population: 131.7883502660501
Median age in population: 131.8176479086755
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.18
Error (vector) diversity:			 0.229
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 155764813
--- Timings ---
Current time: 1529616339631 milliseconds
Total Time:         319.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.9 seconds, 40.0%
Fitness Testing:    148.7 seconds, 46.5%
Report:              42.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_min} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction print_float} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction integer_yank} {:instruction integer_div} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_mult} {:instruction 57} {:instruction float_swap} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup_times integer_dup_items integer_inc float_div integer_swap integer_swap integer_min integer_add integer_sub integer_dup_items in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_rot print_float integer_yank float_mult 57 integer_yank integer_div 57 57 integer_add float_yankdup float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_mult 57 float_swap float_yank float_inc integer_inc integer_fromfloat 57 float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4451.062644799996
Median total errors in population: 1406.8618000000001
Error averages by case: (130.40947900000032 8.277 125.9228148000016 10.361 170.69432589999835 11.092 147.68790650000122 10.304 136.03642489999967 11.296 178.89404419999778 9.572 164.8238747000017 7.89 154.37322159999806 10.203 134.05188439999844 9.021 220.0064254999975 10.621 190.16204169999813 12.019 196.74910019999652 8.7 150.8419033999999 10.517 133.50202709999897 10.316 150.98291819999986 9.534 167.68570820000176 9.419 202.58854889999787 8.637 197.43368590000082 10.249 178.33328000000114 9.555 154.61198909999962 11.145 189.9739450999984 9.531 207.95193300000176 10.179 158.84083790000085 7.945 150.1236269999998 9.023 215.1776975999998 7.797)
Error minima by case: (2.9192 6 7.2166 9 11.566 9 10.7372 9 4.1577 9 13.887 8 0.6042 6 4.5491 7 8.2777 7 38.7831 9 71.7227 9 62.9103 8 23.5081 9 1.2466 8 1.8802 8 2.3859 8 66.2953 7 0.7267 9 66.0081 8 13.679 9 1.8684 8 19.087 8 19.1468 6 26.9468 8 33.7928 6)
Average genome size in population (length): 76.208
Average program size in population (points): 77.208
Average percent parens in population: 0.013
Minimum age in population: 130.1900281943059
Maximum age in population: 135.6063817025527
Average age in population: 133.2065643799844
Median age in population: 133.2503115628182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.161
Error (vector) diversity:			 0.232
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 157671526
--- Timings ---
Current time: 1529616343343 milliseconds
Total Time:         323.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.2 seconds, 40.0%
Fitness Testing:    150.6 seconds, 46.6%
Report:              43.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_mult} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_div} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_times integer_dup_items float_dup_items integer_dup_items integer_dup integer_stackdepth integer_swap integer_swap float_cos tagged_200 integer_sub float_add float_cos integer_dup_items integer_dup float_div integer_swap integer_pop float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_mult print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub integer_fromfloat float_div 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4469.327530899994
Median total errors in population: 1406.8618000000001
Error averages by case: (133.5916183000002 8.344 128.22165980000182 10.37 173.97115109999834 11.111 151.01958770000118 10.296 135.0666883999992 11.352 177.80117219999835 9.559 164.07550650000167 7.939 150.55171309999793 10.226 136.4140553999983 9.103 216.44539009999744 10.606 193.39059549999845 12.044 193.92828829999678 8.737 154.1420306999999 10.525 132.4251877999987 10.32 155.2570328000001 9.591 171.94071240000181 9.465 205.85308829999775 8.648 196.3579491000006 10.26 182.46297740000122 9.545 151.6626050999993 11.204 187.96281809999826 9.588 211.17986880000169 10.209 155.04265070000113 7.926 153.5378700999995 9.09 213.12431319999976 7.843)
Error minima by case: (2.9647 6 7.7829 3 15.8864 4 20.2629 4 4.1577 9 14.0 4 0.6042 6 3.0 4 8.2777 7 37.0 4 48.8149 4 62.9104 5 0.6003 5 0.7634 3 24.7881 3 25.2937 3 50.2953 5 0.6958 4 43.1003 5 13.6791 3 6.8994 8 25.0542 4 19.1469 3 26.9468 7 33.8854 4)
Average genome size in population (length): 75.794
Average program size in population (points): 76.794
Average percent parens in population: 0.013
Minimum age in population: 131.1900281943059
Maximum age in population: 136.456585175008
Average age in population: 134.6117283846153
Median age in population: 134.6550916916679
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.17
Error (vector) diversity:			 0.233
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 159567801
--- Timings ---
Current time: 1529616347025 milliseconds
Total Time:         326.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.6 seconds, 40.0%
Fitness Testing:    152.4 seconds, 46.6%
Report:              43.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 59993.68839999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_swap} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_swap} {:instruction float_shove} {:instruction float_cos} {:instruction integer_div} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup_times} {:instruction 57} {:instruction float_dup_items} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction print_integer})
Best program: (integer_sub integer_dup_items integer_dup float_inc integer_swap tagged_200 integer_sub integer_swap float_shove float_cos integer_div integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 57 integer_add float_sub float_max integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup_times 57 float_dup_items float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_max float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4778.6424372999945
Median total errors in population: 1406.8618000000001
Error averages by case: (144.30509269999888 8.332 138.78499380000122 10.397 184.90524149999834 11.128 160.78936140000113 10.314 149.11857610000055 11.376 192.15528999999768 9.614 178.8216702000017 7.972 165.45993099999788 10.232 146.86313339999964 9.133 231.1904606999975 10.66 203.41348349999794 12.041 208.11804899999643 8.746 164.66234000000034 10.532 146.69324269999882 10.357 164.98195299999966 9.583 181.50330460000214 9.465 215.71866969999766 8.689 210.73398810000066 10.273 191.76134010000152 9.571 166.66690670000014 11.187 203.41843429999832 9.623 221.82336070000187 10.249 170.89859690000023 7.975 163.3178179999999 9.15 228.09419919999982 7.844)
Error minima by case: (2.9077 6 7.7829 5 17.4738 6 13.7371 6 5.0717 9 13.887 6 0.6042 6 2.0 6 8.3127 7 36.0 7 2.7229 6 2.0895 7 0.6003 6 0.252 5 12.8801 5 26.6143 5 30.2033 6 0.8189 6 18.9917 6 14.6771 6 7.7763 8 24.9948 6 20.1449 5 26.9818 8 31.7007 6)
Average genome size in population (length): 75.135
Average program size in population (points): 76.135
Average percent parens in population: 0.013
Minimum age in population: 132.1900281943059
Maximum age in population: 138.057070202871
Average age in population: 136.0161911148147
Median age in population: 136.0308823950939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.168
Error (vector) diversity:			 0.218
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 161447651
--- Timings ---
Current time: 1529616350659 milliseconds
Total Time:         330.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.0 seconds, 39.9%
Fitness Testing:    154.1 seconds, 46.6%
Report:              44.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206113  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_yank} {:instruction float_mult} {:instruction float_max} {:instruction float_mult} {:instruction float_dup_times} {:instruction 57} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub integer_rot integer_sub print_float integer_sub print_integer integer_yank float_mult float_max float_mult float_dup_times 57 integer_rot integer_stackdepth 56 57 integer_add float_add float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4110.528971899997
Median total errors in population: 1406.8618000000001
Error averages by case: (115.26821520000026 8.232 110.10044720000157 10.385 157.47358519999833 11.114 132.79569040000115 10.279 121.57840069999887 11.325 164.91060359999847 9.56 151.09762740000156 7.843 140.89985469999786 10.21 118.56945759999822 8.99 209.21801399999748 10.632 177.51776209999875 12.049 185.62821359999663 8.675 137.12434099999845 10.494 116.77617669999879 10.35 137.1826338000015 9.547 154.20008100000092 9.433 189.41215229999838 8.649 183.57948680000055 10.25 165.4360704000006 9.518 142.9345358999985 11.164 176.10878489999843 9.558 195.30031470000148 10.174 147.2420748000016 7.897 135.41238929999818 9.013 201.6410585999998 7.78)
Error minima by case: (2.9077 6 7.2166 5 16.7252 6 10.7372 6 4.1422 10 38.3533 6 0.6042 6 15.457 6 8.2207 7 90.6911 6 71.7227 4 62.9104 7 23.5081 6 0.2366 5 1.8802 6 2.3859 6 73.2031 5 0.2793 6 66.0081 6 13.6791 5 7.1817 8 24.4102 6 19.1469 6 26.8898 8 32.7007 6)
Average genome size in population (length): 74.854
Average program size in population (points): 75.854
Average percent parens in population: 0.013
Minimum age in population: 134.1205524006202
Maximum age in population: 139.3989388948715
Average age in population: 137.4000205681699
Median age in population: 137.4522432079016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.167
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 163320326
--- Timings ---
Current time: 1529616354366 milliseconds
Total Time:         334.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.4 seconds, 39.9%
Fitness Testing:    155.9 seconds, 46.7%
Report:              44.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_min} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_swap} {:instruction float_shove} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction tag_float_265} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_items integer_min float_div integer_swap integer_swap float_cos tagged_200 float_add float_cos integer_dup float_mod in2 float_rot float_frominteger integer_yank integer_stackdepth float_div integer_swap float_shove float_cos integer_dup integer_sub in2 tag_float_265 float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_yank in1 integer_inc integer_swap 57 57 in1 float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4664.325331299996
Median total errors in population: 1406.8618000000001
Error averages by case: (141.64133139999873 8.285 134.9643924000012 10.394 182.07372789999815 11.127 157.56024670000113 10.292 143.90553080000038 11.354 186.28973319999787 9.574 172.58044210000165 7.931 158.68488829999777 10.235 143.88962719999944 9.045 225.53008819999758 10.613 200.16293989999764 12.059 202.35832429999644 8.731 161.43351590000023 10.531 139.91075179999865 10.336 161.74825079999974 9.573 178.27631180000193 9.457 212.4543933999974 8.684 204.5517651000009 10.26 188.48522960000136 9.566 160.3318679999996 11.173 197.2208263999984 9.572 218.84768890000177 10.247 164.52816480000078 7.929 160.84380359999977 9.081 222.17348879999983 7.829)
Error minima by case: (2.9997 6 7.7835 4 16.8005 5 22.3549 5 4.1577 10 26.1855 5 0.6042 6 6.6216 5 8.3127 7 90.6911 5 82.7228 4 62.9104 6 37.5082 5 0.6954 4 31.2119 5 30.7063 5 97.2032 5 0.3313 5 69.0082 5 13.6791 4 7.0441 8 24.9943 5 19.1469 5 26.9818 8 19.8653 5)
Average genome size in population (length): 75.399
Average program size in population (points): 76.399
Average percent parens in population: 0.013
Minimum age in population: 136.0059530409974
Maximum age in population: 140.7116481278049
Average age in population: 138.7924526085539
Median age in population: 138.8735118192027
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.155
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 165207301
--- Timings ---
Current time: 1529616358070 milliseconds
Total Time:         337.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.8 seconds, 39.9%
Fitness Testing:    157.7 seconds, 46.7%
Report:              45.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206113  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction float_div} {:instruction integer_swap} {:instruction float_shove} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction tag_float_265} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction integer_rot} {:instruction tag_float_726} {:instruction integer_yank} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_shove integer_dup_items print_integer float_div integer_swap integer_swap float_cos float_div integer_swap float_shove float_cos integer_dup integer_sub in2 tag_float_265 float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec float_dec float_rot integer_sub print_float print_integer float_max integer_swap float_mult 57 57 integer_inc integer_swap 57 integer_rot tag_float_726 integer_yank 56 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_flush integer_yank integer_fromfloat float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4296.946040999996
Median total errors in population: 1406.8618000000001
Error averages by case: (132.02029850000028 8.232 120.92470550000154 10.394 168.2647434999983 11.116 142.96931460000107 10.296 126.39014439999926 11.318 169.99854649999875 9.566 155.42992340000154 7.843 144.9686569999978 10.242 130.5303534999983 8.99 211.76317639999755 10.612 185.9093763999985 12.05 188.11588339999668 8.673 146.40040429999928 10.484 123.88200189999911 10.33 147.16031030000087 9.54 164.02335790000092 9.444 197.60353709999848 8.621 188.53184720000047 10.264 174.02985030000042 9.53 145.2894057999987 11.165 180.98069809999836 9.533 205.66709570000154 10.228 149.59645410000155 7.892 146.68133209999883 9.006 206.67362309999976 7.772)
Error minima by case: (3.9083 7 7.2166 9 16.8991 6 10.7372 9 4.1577 9 39.0209 9 0.6042 6 15.4568 7 9.2213 7 90.6909 9 48.8149 9 62.9102 7 0.3997 9 0.6613 8 1.8802 8 2.3859 8 50.2953 7 0.2933 8 43.1003 8 13.6789 9 7.0951 8 24.4806 6 19.1467 6 27.8904 7 32.7007 6)
Average genome size in population (length): 76.09
Average program size in population (points): 77.09
Average percent parens in population: 0.013
Minimum age in population: 137.2447571779055
Maximum age in population: 142.1594811506073
Average age in population: 140.2153696682714
Median age in population: 140.2575524886031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.159
Error (vector) diversity:			 0.209
Behavioral diversity:				 0.25
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 167111801
--- Timings ---
Current time: 1529616361691 milliseconds
Total Time:         341.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.1 seconds, 39.8%
Fitness Testing:    159.5 seconds, 46.7%
Report:              45.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_div} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mod} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup_times integer_dup_items integer_dup float_div float_cos tagged_200 integer_sub integer_div float_add float_cos integer_dup float_mod in2 float_rot float_frominteger float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub integer_pop print_integer float_max integer_yank 57 57 integer_add float_sub float_mult float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_yank in1 integer_inc integer_swap 57 57 in1 float_inc float_mod float_mult float_max integer_yank float_mod float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4451.604393199996
Median total errors in population: 1406.8618000000001
Error averages by case: (131.39167010000017 8.275 125.23686960000174 10.398 170.18642419999819 11.137 147.36676180000111 10.297 136.27745849999957 11.352 177.9727442999978 9.584 166.00669200000155 7.937 153.84441849999783 10.241 134.34639059999878 9.063 220.20641369999757 10.644 191.8398738999982 12.049 196.2220802999966 8.71 150.95886079999966 10.524 133.10410899999857 10.345 151.6589711000005 9.545 168.24216020000168 9.456 204.19147539999796 8.657 196.0988199000009 10.258 179.3866489000014 9.563 154.13597549999935 11.128 188.72642119999844 9.585 208.24614730000164 10.238 159.13889970000085 7.984 149.07861519999906 9.053 213.8884914999999 7.828)
Error minima by case: (2.9688 6 7.2165 5 11.566 5 10.7371 5 4.1577 9 15.0 5 0.6042 6 3.0 5 8.2864 7 37.0 5 48.8149 5 62.9104 6 0.6003 6 0.6612 4 1.8801 5 2.3858 5 50.2953 6 0.2847 5 43.1003 6 13.6791 4 1.8684 8 19.087 5 19.1469 5 26.9555 8 32.7006 5)
Average genome size in population (length): 76.227
Average program size in population (points): 77.227
Average percent parens in population: 0.013
Minimum age in population: 138.4193316142942
Maximum age in population: 143.7267735845489
Average age in population: 141.6550961511515
Median age in population: 141.6941218472614
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.164
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 169020101
--- Timings ---
Current time: 1529616365307 milliseconds
Total Time:         345.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.4 seconds, 39.8%
Fitness Testing:    161.2 seconds, 46.7%
Report:              46.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_249} {:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_add} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_shove integer_dup_items print_integer float_div integer_swap integer_swap float_cos tagged_249 integer_dup_times float_min integer_dup integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult float_max integer_yank float_mult integer_yank float_mult 57 57 integer_add float_sub integer_fromfloat float_add 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_min float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4440.232874899996
Median total errors in population: 1406.8618000000001
Error averages by case: (125.34858640000026 8.229 120.81829880000184 10.343 167.03120749999795 11.08 143.50531500000113 10.288 140.20999119999914 11.294 184.32924879999794 9.573 169.83899180000165 7.86 153.8099041999977 10.197 128.5340759999979 8.971 220.70255599999754 10.604 186.87462399999797 11.988 199.29292519999643 8.661 147.50515959999862 10.488 136.32324419999858 10.313 147.17885490000188 9.499 163.7201419000008 9.391 199.33010689999784 8.605 202.6062344000008 10.248 174.75552770000073 9.516 157.2325446999985 11.144 195.1783491999984 9.548 205.1735467000019 10.175 161.33678230000152 7.917 146.83568989999787 9.014 220.0219675999999 7.793)
Error minima by case: (2.9088 6 7.7835 4 17.4738 5 11.6451 5 4.1577 9 14.0 5 0.6042 6 4.0 4 8.2263 7 38.0 5 70.8149 5 62.9103 5 22.6003 6 0.6613 4 2.7881 4 3.2937 4 66.0 5 0.3653 5 65.1003 6 13.679 5 7.7763 8 24.9948 5 19.1468 4 26.8954 8 32.7007 5)
Average genome size in population (length): 75.803
Average program size in population (points): 76.803
Average percent parens in population: 0.013
Minimum age in population: 140.8157756844776
Maximum age in population: 145.0531125746508
Average age in population: 143.0544119810137
Median age in population: 143.1002902303089
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.172
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 170917976
--- Timings ---
Current time: 1529616369059 milliseconds
Total Time:         348.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.9 seconds, 39.8%
Fitness Testing:    163.0 seconds, 46.7%
Report:              46.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction print_integer} {:instruction float_stackdepth} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction print_float} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction integer_yank} {:instruction integer_div} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_mult} {:instruction 57} {:instruction float_swap} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_809} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup_times integer_dup_items integer_inc float_div integer_swap integer_swap float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer print_integer float_stackdepth 7 integer_dec print_integer float_rot float_rot print_float integer_yank float_mult 57 integer_yank integer_div 57 57 integer_add float_yankdup float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_mult 57 float_swap float_yank float_inc integer_inc integer_fromfloat 57 float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_809 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4239.978316199996
Median total errors in population: 1406.8618000000001
Error averages by case: (121.98261450000025 8.252 116.88144300000116 10.352 162.64090019999855 11.087 138.94039920000105 10.288 127.02645789999919 11.298 171.2270942999986 9.553 157.25622820000166 7.815 144.6846371999981 10.215 124.34276319999871 8.958 211.55708279999754 10.603 182.65990259999893 12.062 187.09210019999668 8.653 142.98428319999883 10.476 123.74499729999897 10.315 143.23113070000065 9.518 160.12814010000093 9.403 195.23069679999864 8.598 189.25669390000016 10.203 170.70648350000033 9.486 144.43540659999883 11.167 182.66112319999837 9.511 200.38383430000164 10.163 149.68208460000153 7.87 140.63149909999882 8.948 208.0503195999998 7.766)
Error minima by case: (2.9734 6 7.7829 3 18.658 4 19.2979 4 4.1577 10 14.0 4 0.6042 6 2.0 4 8.2864 7 36.0 5 47.8149 5 62.9103 5 0.3997 5 0.6613 3 25.7881 3 26.2937 3 49.2953 5 0.3653 4 42.1003 5 13.679 4 4.8684 8 26.179 4 19.1468 3 26.9555 8 32.7007 4)
Average genome size in population (length): 75.981
Average program size in population (points): 76.981
Average percent parens in population: 0.013
Minimum age in population: 142.4606841921617
Maximum age in population: 146.3260550124589
Average age in population: 144.4096685679665
Median age in population: 144.4137862615091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.158
Error (vector) diversity:			 0.212
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 172820626
--- Timings ---
Current time: 1529616372708 milliseconds
Total Time:         352.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.3 seconds, 39.8%
Fitness Testing:    164.8 seconds, 46.7%
Report:              47.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_inc} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_cos} {:instruction float_flush} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_yank} {:instruction float_sub} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction tagged_1042} {:instruction float_shove} {:instruction print_integer})
Best program: (integer_dup_items float_dec float_div integer_swap float_add float_cos tagged_200 integer_inc float_cos integer_rot integer_dup float_cos float_flush float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank integer_yank float_mult 57 57 integer_add float_sub integer_add integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 float_yank float_sub float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times integer_yank tagged_1042 float_shove print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3847.6066330999965
Median total errors in population: 1406.8618000000001
Error averages by case: (110.10856440000026 8.171 100.51083680000104 10.291 149.53786669999846 11.041 123.89479760000108 10.22 108.00429429999956 11.288 152.51328809999953 9.471 138.64682980000163 7.826 126.15571279999816 10.143 110.17155779999888 8.909 196.14477589999754 10.53 168.41307399999957 12.003 172.23514449999692 8.618 128.49716449999784 10.396 106.44837889999935 10.249 128.27374120000172 9.462 145.4260863000002 9.37 181.1728891999991 8.56 172.6865429999997 10.184 156.27223759999976 9.437 127.71342099999778 11.104 165.08950149999845 9.508 187.63223290000144 10.136 131.98205730000288 7.792 127.78655529999777 8.941 190.93808169999983 7.701)
Error minima by case: (0.0923 6 7.7835 5 16.5742 6 22.3549 6 4.1578 10 13.887 6 0.6042 6 2.0 6 8.2777 7 36.0 7 81.0 6 62.9099 7 37.5082 6 0.7634 5 31.2119 5 30.7063 5 68.0 6 0.6958 6 69.0082 6 13.6786 6 6.8689 8 24.4102 6 19.1463 5 26.9468 8 33.8498 6)
Average genome size in population (length): 76.296
Average program size in population (points): 77.296
Average percent parens in population: 0.013
Minimum age in population: 143.5217008019301
Maximum age in population: 147.9707290663527
Average age in population: 145.7534692294537
Median age in population: 145.7523363242313
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.164
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 174731501
--- Timings ---
Current time: 1529616376363 milliseconds
Total Time:         356.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.6 seconds, 39.8%
Fitness Testing:    166.5 seconds, 46.7%
Report:              48.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_div} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction integer_inc} {:instruction 57} {:instruction 57} {:instruction float_mod} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup_times} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_dup_times} {:instruction integer_yank} {:instruction tagged_935} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_sub integer_div float_add float_cos integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max float_max integer_swap float_mult 57 integer_inc 57 57 float_mod float_sub float_mod float_dup 57 integer_add float_sub float_mod float_dup_times 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod integer_inc float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_dup_times integer_yank tagged_935 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4218.050519099996
Median total errors in population: 1406.8618000000001
Error averages by case: (124.72349290000022 8.196 114.40029320000131 10.377 163.12051439999848 11.113 135.64963880000113 10.307 125.97455639999943 11.294 168.0613183999989 9.571 155.53294500000175 7.846 146.23771799999818 10.197 125.79569399999846 8.994 213.26439179999744 10.608 180.75278389999932 12.068 188.87188999999654 8.676 139.72315559999842 10.495 122.31041229999938 10.354 140.87305980000124 9.551 157.85500000000076 9.441 193.38660529999873 8.65 186.78525260000038 10.234 168.72564210000013 9.501 146.3630100999987 11.151 179.36431689999839 9.512 200.80782640000163 10.228 150.66859930000186 7.892 141.0578513999985 8.992 204.72155049999984 7.775)
Error minima by case: (2.9191 6 4.9116 4 16.7252 4 8.4322 4 4.1577 9 15.0 6 0.6042 6 3.0 6 8.2777 7 37.0 6 8.1851 4 62.9104 7 0.3997 5 0.4316 5 0.4248 4 0.0809 4 6.7047 5 0.3303 6 13.8997 5 13.6791 5 7.0441 8 24.4102 4 19.1469 6 26.9468 8 23.6254 6)
Average genome size in population (length): 76.015
Average program size in population (points): 77.015
Average percent parens in population: 0.013
Minimum age in population: 144.966028531578
Maximum age in population: 149.1593034399818
Average age in population: 147.143290522394
Median age in population: 147.2223553741354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.166
Error (vector) diversity:			 0.224
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 176635551
--- Timings ---
Current time: 1529616380006 milliseconds
Total Time:         359.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.0 seconds, 39.7%
Fitness Testing:    168.3 seconds, 46.8%
Report:              48.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_swap} {:instruction float_min} {:instruction float_cos} {:instruction integer_dup} {:instruction float_inc} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction float_sub} {:instruction float_dup} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yankdup} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup integer_inc integer_swap integer_swap float_cos float_cos tagged_200 integer_sub integer_dup_times integer_dup_items integer_dup print_integer integer_swap float_min float_cos integer_dup float_inc in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer integer_dec float_mult 57 57 integer_add float_dec integer_stackdepth integer_rot 92 print_float float_sub float_dup float_dup 57 float_min float_mult 57 57 integer_add float_dec float_mod float_dup 57 float_min float_yankdup in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4317.810694999995
Median total errors in population: 1406.8618000000001
Error averages by case: (127.44966780000026 8.258 120.04465680000152 10.356 168.66321929999836 11.087 142.24961820000107 10.274 128.51882809999924 11.268 171.9911962999987 9.57 157.83885350000162 7.824 147.69146699999817 10.203 130.44255779999833 8.979 215.09697029999754 10.637 185.21428009999863 12.072 191.37749149999664 8.659 146.01085339999915 10.476 123.590640699999 10.347 146.4515072000007 9.547 163.4348808000011 9.397 197.77459459999835 8.591 190.92014040000026 10.211 173.28253820000052 9.503 148.69767799999903 11.195 183.36194299999843 9.49 206.27609860000172 10.198 153.13395710000125 7.881 146.66598249999905 8.969 208.88407379999978 7.755)
Error minima by case: (1.9997 6 6.7835 9 17.509 9 11.6451 9 4.1577 10 39.257 8 0.6042 6 15.457 8 7.3127 7 90.6911 9 70.8149 10 62.9104 8 36.5082 9 1.6109 8 2.7881 8 3.2937 8 49.2953 7 0.7267 9 65.1003 8 13.6791 9 7.8114 8 24.8246 8 19.1469 6 25.9818 8 33.7928 6)
Average genome size in population (length): 76.075
Average program size in population (points): 77.075
Average percent parens in population: 0.013
Minimum age in population: 146.1352247046029
Maximum age in population: 150.5692374072031
Average age in population: 148.5275860371214
Median age in population: 148.5529479227431
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.16
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 178541351
--- Timings ---
Current time: 1529616383637 milliseconds
Total Time:         363.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.4 seconds, 39.7%
Fitness Testing:    170.1 seconds, 46.8%
Report:              49.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206113  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_200} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction 57} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction integer_max} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_sub} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 54} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_sub} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_yank integer_dup_items integer_dup_items float_dec float_div integer_swap float_max integer_dup_times integer_dup_items float_cos tagged_200 float_add float_cos integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub integer_stackdepth integer_mult 57 integer_add float_add integer_yank integer_yank 57 integer_rot integer_stackdepth 56 57 integer_add integer_max float_mod float_dup 57 float_sub float_yank in1 integer_inc integer_swap 57 54 float_inc integer_inc integer_fromfloat 57 float_sub float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4197.1789219999955
Median total errors in population: 1406.8618000000001
Error averages by case: (125.32615850000029 8.14 113.17956840000167 10.358 164.72298929999818 11.06 135.18036470000112 10.273 122.82752469999905 11.224 166.6710396999984 9.554 151.57553960000152 7.792 145.11805939999775 10.213 126.82295169999806 8.973 213.48364909999745 10.62 178.40331829999835 12.026 190.1922507999965 8.675 139.02877629999867 10.485 119.1421315999988 10.313 139.84545660000137 9.53 156.1952083000008 9.408 190.88357459999833 8.636 184.86109210000066 10.216 166.54790830000059 9.491 147.59364059999885 11.149 177.2854141999984 9.443 201.6125433000017 10.153 151.67720150000136 7.888 143.50271139999884 8.974 203.17484899999985 7.731)
Error minima by case: (2.9735 6 7.2166 3 16.508 4 10.7372 4 4.1577 8 14.0 4 0.6042 6 2.0 4 8.2818 7 36.0 5 16.2533 5 62.9103 5 0.3997 5 0.6612 3 1.8802 3 2.3859 3 1.7715 5 0.3653 4 29.9687 5 13.679 4 6.8104 8 24.029 4 19.1468 3 26.9509 8 32.7006 4)
Average genome size in population (length): 75.575
Average program size in population (points): 76.575
Average percent parens in population: 0.013
Minimum age in population: 147.378180650272
Maximum age in population: 151.7629386780793
Average age in population: 149.9530555004448
Median age in population: 150.0014262678797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.168
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 180433951
--- Timings ---
Current time: 1529616387374 milliseconds
Total Time:         367.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.8 seconds, 39.7%
Fitness Testing:    171.9 seconds, 46.8%
Report:              49.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_div} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction print_float} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction in1} {:instruction tag_float_219} {:instruction integer_max} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items float_add float_div integer_sub integer_dup_items integer_dup float_div integer_swap float_add float_cos print_float integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer in1 tag_float_219 integer_max float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank integer_dup integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_dup float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4426.263070199995
Median total errors in population: 1406.8618000000001
Error averages by case: (133.28802180000014 8.309 128.15433120000185 10.488 173.30603059999805 11.195 149.83256100000116 10.378 131.54022479999907 11.332 174.77656899999857 9.65 160.16292720000163 7.9 148.45850259999793 10.309 136.02885969999835 9.047 214.9075811999975 10.717 192.79569689999832 12.115 191.45973449999647 8.772 153.78783259999966 10.574 127.68779759999883 10.418 154.05442970000047 9.655 170.65898260000114 9.529 205.14872349999794 8.746 193.11229180000032 10.299 181.05002660000096 9.602 148.86919239999878 11.254 185.59933479999833 9.565 210.3047669000018 10.299 153.08805830000162 7.984 152.01181849999898 9.065 211.1087743999998 7.868)
Error minima by case: (1.9997 6 6.7835 7 11.566 7 19.2979 8 4.1577 9 29.2471 8 0.6042 6 15.457 8 7.3127 7 60.4231 7 81.7228 5 62.6424 7 36.5082 7 0.2366 6 28.1549 8 27.6493 8 96.2032 6 0.3042 8 68.0082 7 13.6791 7 1.8684 8 19.087 7 10.8789 6 23.2498 8 33.1846 6)
Average genome size in population (length): 75.466
Average program size in population (points): 76.466
Average percent parens in population: 0.013
Minimum age in population: 148.9544017291361
Maximum age in population: 153.4853852903233
Average age in population: 151.3732807248758
Median age in population: 151.4431431268676
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.168
Error (vector) diversity:			 0.235
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 182324076
--- Timings ---
Current time: 1529616391038 milliseconds
Total Time:         370.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.2 seconds, 39.7%
Fitness Testing:    173.6 seconds, 46.8%
Report:              50.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction float_cos} {:instruction integer_dup} {:instruction float_div} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction float_flush} {:instruction integer_yank} {:instruction integer_div} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup integer_fromfloat integer_swap integer_swap float_cos float_cos integer_dup float_div integer_sub integer_swap integer_swap float_cos integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_rot float_max integer_yank float_mult float_flush integer_yank integer_div 57 57 integer_add float_yankdup float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub in1 integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4666.469278199996
Median total errors in population: 1406.8618000000001
Error averages by case: (139.15403309999942 8.27 132.09559210000126 10.379 177.34583989999808 11.086 154.36125670000106 10.3 146.77539040000022 11.274 189.34279729999793 9.586 174.69821720000158 7.884 165.29020049999778 10.23 140.00155679999912 9.032 230.84482079999765 10.667 196.90657029999832 12.055 208.09390979999668 8.739 158.28079059999996 10.52 142.73688299999876 10.326 158.5426898000003 9.59 174.9722678000012 9.442 209.14358259999818 8.664 207.02933610000068 10.235 185.27400370000117 9.536 166.43606249999954 11.183 199.66934739999837 9.513 213.85894430000175 10.205 170.40020210000083 7.964 156.8972545999992 9.036 224.7907287999998 7.811)
Error minima by case: (2.9997 6 7.7835 5 8.434 7 22.3549 6 4.1577 9 0.679 6 0.6042 6 4.5491 6 8.3127 7 38.7831 6 82.7228 5 62.9103 7 37.5082 6 0.5537 4 31.2119 6 30.7063 6 97.2032 6 0.3653 6 69.0082 6 13.679 6 7.0441 8 0.913 6 19.1468 6 26.9818 8 28.3454 6)
Average genome size in population (length): 74.97
Average program size in population (points): 75.97
Average percent parens in population: 0.013
Minimum age in population: 150.2967301185209
Maximum age in population: 154.7601295906665
Average age in population: 152.7069666150635
Median age in population: 152.7543375668873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.177
Error (vector) diversity:			 0.232
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 184201476
--- Timings ---
Current time: 1529616394704 milliseconds
Total Time:         374.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.5 seconds, 39.6%
Fitness Testing:    175.4 seconds, 46.8%
Report:              50.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206115  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_sin} {:instruction tagged_200} {:instruction integer_sub} {:instruction float_shove} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction tagged_438} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_flush} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_min} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup_times integer_dup_items integer_swap float_sin tagged_200 integer_sub float_shove integer_dup_items integer_dup tagged_438 integer_swap float_add float_cos integer_inc integer_sub float_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_float print_integer float_max integer_swap float_mult 57 57 integer_add float_sub float_mod float_flush float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_min float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4566.383598799996
Median total errors in population: 1406.8618000000001
Error averages by case: (136.42282739999962 8.332 126.4538959000018 10.392 172.38225859999835 11.066 148.60295040000105 10.287 143.68684799999994 11.356 187.274649999998 9.609 172.9812535000015 7.975 161.78252979999806 10.2 134.89920349999855 9.158 227.5712213999977 10.673 190.7415554999984 12.01 204.55628829999688 8.734 152.41006809999948 10.516 141.66582109999862 10.328 152.77309160000044 9.618 169.3543030000017 9.434 203.45219249999818 8.685 205.1584517000008 10.213 179.44463860000093 9.524 162.55595959999945 11.154 197.80592679999842 9.604 209.32427390000154 10.196 166.6297383000003 7.989 151.42923519999914 9.17 222.93541609999983 7.866)
Error minima by case: (2.9138 6 7.7829 4 16.556 5 22.3549 5 4.1577 9 12.7448 5 0.6042 6 15.4564 5 8.2272 7 76.9254 5 82.7222 4 62.9098 6 37.5076 5 0.4316 4 25.7881 5 26.2937 5 97.2026 5 0.2733 5 69.0076 5 13.6785 4 6.8584 8 24.077 5 19.1463 5 6.7475 8 19.065 5)
Average genome size in population (length): 74.673
Average program size in population (points): 75.673
Average percent parens in population: 0.013
Minimum age in population: 151.4257439296314
Maximum age in population: 156.3625578163048
Average age in population: 154.1090220811454
Median age in population: 154.1318617339831
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.186
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 186070926
--- Timings ---
Current time: 1529616398339 milliseconds
Total Time:         378.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.9 seconds, 39.6%
Fitness Testing:    177.2 seconds, 46.8%
Report:              51.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_add} {:instruction float_yank} {:instruction tagged_200} {:instruction integer_sub} {:instruction integer_div} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction tagged_195} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_add} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_max} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup float_mod integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_dup float_yankdup integer_swap integer_swap float_add float_yank tagged_200 integer_sub integer_div float_add float_cos integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub tagged_195 57 57 integer_add float_sub 57 57 integer_add float_sub integer_fromfloat float_add 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_inc float_mod float_mult float_max float_mod integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4385.7647150999965
Median total errors in population: 1406.8618000000001
Error averages by case: (128.00246790000028 8.267 120.53625620000098 10.383 166.1588120999984 11.098 142.4330704000011 10.308 134.53608019999953 11.274 177.92486519999827 9.582 164.48769100000172 7.822 152.43268159999795 10.189 128.5841311999985 9.037 219.9646178999976 10.667 186.1067717999988 12.067 196.98003059999658 8.674 146.6217031999991 10.522 132.43422519999893 10.354 146.7193533000006 9.578 163.3395871000011 9.42 198.59501179999847 8.606 196.86224150000058 10.219 174.21667210000064 9.528 154.58636629999904 11.179 189.45939749999837 9.512 203.46785510000174 10.22 158.74234840000125 7.927 144.6989177999986 9.022 214.63055969999982 7.788)
Error minima by case: (2.9997 6 7.7829 9 14.022 9 22.3549 9 4.1577 10 13.887 8 0.6042 6 4.5491 9 8.3127 7 38.7831 9 49.8149 8 62.9104 7 1.6003 9 0.6613 8 23.7881 8 24.2937 8 51.2953 7 0.3653 8 44.1003 8 13.6791 9 4.3244 8 21.543 8 19.1469 6 11.2282 8 23.5456 6)
Average genome size in population (length): 74.55
Average program size in population (points): 75.55
Average percent parens in population: 0.013
Minimum age in population: 152.4257439296314
Maximum age in population: 157.5381945729136
Average age in population: 155.4417685675951
Median age in population: 155.4572504171885
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.165
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 187937376
--- Timings ---
Current time: 1529616401969 milliseconds
Total Time:         381.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.3 seconds, 39.6%
Fitness Testing:    178.9 seconds, 46.9%
Report:              51.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 59992.68839999994
Test mean error for best: 29.99634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206115  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction float_dup_times} {:instruction integer_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction float_yank} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_dup_times} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction 57} {:instruction 58} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction in1} {:instruction integer_dup} {:instruction integer_swap} {:instruction 57} {:instruction 56} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction float_div} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (print_float float_dup_times integer_dup float_dup_items integer_dup_times print_integer integer_dup_items integer_dup float_div float_yank integer_dup float_div integer_swap integer_swap float_add float_yank integer_dup float_dup_times in2 float_rot float_frominteger float_frominteger float_dec integer_stackdepth integer_dup_times 92 print_float print_integer print_integer 7 integer_dec integer_shove float_rot integer_sub print_float print_integer in2 integer_yank integer_rot 57 58 integer_add float_sub float_mod float_dup in1 integer_dup integer_swap 57 56 float_dec float_inc float_mod integer_inc float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub float_div integer_shove integer_dup_times integer_dup_times float_min float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4235.848953999997
Median total errors in population: 1406.8618000000001
Error averages by case: (121.89177680000029 8.211 113.66973510000126 10.385 159.23269669999823 11.117 135.51986020000112 10.307 130.8666941999994 11.273 173.5265393999987 9.56 159.9172055000016 7.817 146.22882489999796 10.242 121.3834846999986 8.959 213.75634789999756 10.631 180.38001679999905 12.099 190.45439129999653 8.707 140.19596589999855 10.523 127.33757599999915 10.333 139.92807100000118 9.551 156.7075311000006 9.455 192.89738769999877 8.667 191.79727150000005 10.236 168.42254910000023 9.512 148.07142769999854 11.182 184.43963989999853 9.496 196.74141590000167 10.2 152.24781580000152 7.874 137.55865319999816 8.95 209.5970756999998 7.792)
Error minima by case: (1.9997 6 6.7835 7 11.566 7 10.7372 7 5.0663 9 8.9364 7 0.6042 6 3.0 7 7.3127 7 37.0 7 71.7227 7 63.9094 7 23.5081 8 0.4316 6 1.8802 7 2.3859 7 67.0 7 0.3653 7 66.0081 8 14.6781 6 1.8684 8 19.087 7 20.1459 6 14.9336 8 2.6162 6)
Average genome size in population (length): 74.583
Average program size in population (points): 75.583
Average percent parens in population: 0.013
Minimum age in population: 153.9626149745196
Maximum age in population: 159.1722503192176
Average age in population: 156.8636784659842
Median age in population: 156.8872937572732
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.167
Error (vector) diversity:			 0.226
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 189804401
--- Timings ---
Current time: 1529616405582 milliseconds
Total Time:         385.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.7 seconds, 39.6%
Fitness Testing:    180.7 seconds, 46.9%
Report:              52.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 59992.68829999994
Test mean error for best: 29.99634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_add} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_dup_times} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup_times integer_dup_items integer_dup float_div integer_sub integer_swap integer_swap float_cos integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec float_add print_integer float_max integer_swap float_mult 57 57 integer_add float_sub float_mod integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup 57 float_dup_times float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod integer_dec float_inc integer_inc integer_fromfloat 57 integer_yankdup integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank float_dec float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4424.131060199996
Median total errors in population: 1406.8618000000001
Error averages by case: (130.60474870000024 8.412 128.3388623000017 10.422 170.55680049999833 11.15 149.0508564000011 10.323 133.33061419999945 11.43 175.4219569999978 9.61 162.1279895000016 8.026 147.4461178999978 10.263 134.02943009999856 9.176 216.43860009999753 10.662 193.55786439999792 12.059 192.20905199999672 8.78 153.17098579999973 10.569 127.5885223999988 10.349 154.31815670000003 9.617 170.97892650000162 9.514 205.96039839999787 8.715 193.70413860000096 10.269 181.7465400000015 9.581 149.73851639999907 11.205 186.24677929999837 9.643 207.6393985000017 10.25 153.98537930000106 8.0 149.2119291999992 9.19 211.62549599999986 7.888)
Error minima by case: (2.9997 6 7.7829 8 11.566 8 13.0704 8 4.1577 10 39.0208 8 0.6042 6 15.457 7 8.3127 7 90.6911 8 82.7222 7 62.9104 6 0.3997 8 0.6612 8 21.9274 8 21.4218 8 97.0108 7 0.3654 8 69.0076 7 13.6791 8 1.8684 8 19.087 8 19.1469 6 26.9818 8 32.7006 6)
Average genome size in population (length): 73.753
Average program size in population (points): 74.753
Average percent parens in population: 0.014
Minimum age in population: 154.9626149745196
Maximum age in population: 160.6135619694543
Average age in population: 158.301441132565
Median age in population: 158.3308770929338
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.169
Error (vector) diversity:			 0.236
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 191650476
--- Timings ---
Current time: 1529616409254 milliseconds
Total Time:         389.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.0 seconds, 39.6%
Fitness Testing:    182.5 seconds, 46.9%
Report:              52.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_sin} {:instruction tagged_200} {:instruction integer_sub} {:instruction float_shove} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction tagged_438} {:instruction integer_sub} {:instruction float_add} {:instruction float_cos} {:instruction print_float} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup_times} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_shove} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup_times integer_dup_items integer_swap float_sin tagged_200 integer_sub float_shove integer_dup_items integer_dup tagged_438 integer_sub float_add float_cos print_float integer_sub float_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_float print_integer float_max integer_swap float_mult 57 57 57 57 integer_add float_sub float_mod float_dup_times 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod integer_inc float_inc integer_inc integer_fromfloat 57 float_min float_yank float_inc integer_inc integer_rot float_sub float_sub integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_shove print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4486.452650999997
Median total errors in population: 1406.8618000000001
Error averages by case: (131.82628600000007 8.319 124.79770730000166 10.389 174.03293959999826 11.128 147.39622850000114 10.304 137.91263759999978 11.351 180.68767879999797 9.568 167.01812160000162 7.951 156.02218189999786 10.231 135.33254519999846 9.099 221.97289579999756 10.65 190.45753789999827 12.061 198.50320209999663 8.738 151.10913609999992 10.519 134.2635981999987 10.315 151.61470170000013 9.552 168.51659460000138 9.463 203.016593299998 8.654 199.57898550000098 10.238 178.5493698000011 9.53 156.3103893999996 11.173 192.12237579999845 9.62 211.49424510000168 10.255 160.7014321000008 7.952 152.02363139999954 9.096 217.22563569999986 7.81)
Error minima by case: (2.9377 6 7.7829 4 16.8005 5 22.3549 5 4.1577 9 16.0 5 0.6042 6 2.0 5 8.3107 7 36.0 6 48.8149 5 62.9104 6 0.6003 5 1.3373 4 24.7881 4 25.2937 4 50.2953 5 0.7367 5 43.1003 5 13.6791 5 7.0441 8 25.03 5 19.1469 4 26.9168 8 33.8028 5)
Average genome size in population (length): 73.453
Average program size in population (points): 74.453
Average percent parens in population: 0.014
Minimum age in population: 157.0136377470936
Maximum age in population: 161.6603454957718
Average age in population: 159.7913555149113
Median age in population: 159.8652898258937
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.153
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 193489151
--- Timings ---
Current time: 1529616412945 milliseconds
Total Time:         392.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.4 seconds, 39.6%
Fitness Testing:    184.3 seconds, 46.9%
Report:              53.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_swap} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 integer_yank float_mult 57 57 integer_add float_sub float_mod float_swap 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot integer_dec print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4346.250967499997
Median total errors in population: 1406.8618000000001
Error averages by case: (124.02374770000024 8.182 118.96609990000131 10.348 165.17296079999846 11.078 141.14878560000113 10.259 134.19365739999944 11.258 177.22044299999865 9.524 162.83502540000174 7.844 149.31396969999813 10.219 127.4855254999983 8.926 217.50496849999752 10.602 184.68335859999914 12.029 195.25090069999663 8.677 145.2337411999989 10.485 127.97588819999915 10.277 145.44197770000102 9.514 162.05641750000092 9.418 197.06041469999863 8.63 195.4822078000004 10.22 172.94519050000017 9.516 153.044700199999 11.151 188.0281965999982 9.495 203.18528050000162 10.162 157.16254850000138 7.877 145.02963629999869 8.979 213.38432499999985 7.751)
Error minima by case: (2.9997 6 7.7829 9 16.8005 9 22.3549 8 4.1577 9 12.887 9 0.6042 6 4.5491 8 8.3127 7 38.7831 9 16.2421 8 62.9104 7 0.3997 9 0.2466 8 31.2119 8 24.2937 8 1.7617 7 0.3659 8 29.9567 8 13.6791 9 5.8684 8 24.9948 8 19.1469 6 26.9818 8 32.7001 6)
Average genome size in population (length): 73.275
Average program size in population (points): 74.275
Average percent parens in population: 0.014
Minimum age in population: 158.2417345534929
Maximum age in population: 163.3061452048073
Average age in population: 161.1750015002569
Median age in population: 161.2418667705705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.165
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 195323576
--- Timings ---
Current time: 1529616416477 milliseconds
Total Time:         396.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.8 seconds, 39.5%
Fitness Testing:    186.0 seconds, 46.9%
Report:              53.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_mult} {:instruction tagged_249} {:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction float_max} {:instruction print_integer} {:instruction float_mult} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_add} {:instruction 57} {:instruction float_min} {:instruction float_tan} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction 72.9243207666544} {:instruction print_integer})
Best program: (integer_shove integer_dup_items integer_swap float_div integer_swap integer_swap float_mult tagged_249 integer_dup_times float_min integer_dup integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult float_max print_integer float_mult integer_yank float_mult 57 57 integer_add float_sub integer_fromfloat float_add 57 float_min float_tan in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod 57 float_min float_yank float_inc integer_inc integer_fromfloat integer_fromfloat 57 float_min float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 72.9243207666544 print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4656.655094799995
Median total errors in population: 1406.8618000000001
Error averages by case: (144.10277459999912 8.367 134.5105614000011 10.389 177.22384039999798 11.096 155.57110810000114 10.307 146.0813129 11.306 187.5239100999977 9.632 174.02476690000174 7.958 159.18173569999766 10.239 141.1340020999989 9.089 228.03062219999742 10.664 199.22553199999777 12.044 204.2130854999964 8.764 159.71421180000002 10.535 140.43623239999886 10.351 160.63720370000016 9.547 177.04563260000188 9.467 211.4397201999976 8.674 205.13860980000092 10.245 187.59689720000162 9.577 162.33939889999922 11.207 197.82015959999828 9.544 213.79118660000188 10.213 166.39823380000118 8.002 156.46314929999932 9.074 222.87420699999979 7.846)
Error minima by case: (2.9077 6 7.7834 6 11.566 7 22.3549 7 4.1577 10 7.3171 7 0.6042 6 9.7923 7 3.6507 7 82.353 7 82.7227 5 62.9103 7 37.5081 7 0.6613 6 31.2119 7 30.7063 7 97.2031 6 0.3303 7 69.0081 7 13.679 6 1.8684 8 19.087 6 19.1468 6 1.3199 8 13.6373 6)
Average genome size in population (length): 73.037
Average program size in population (points): 74.037
Average percent parens in population: 0.014
Minimum age in population: 159.818959297748
Maximum age in population: 164.459907015339
Average age in population: 162.599172755254
Median age in population: 162.6250054409928
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.166
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 197152051
--- Timings ---
Current time: 1529616420031 milliseconds
Total Time:         399.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.1 seconds, 39.5%
Fitness Testing:    187.8 seconds, 46.9%
Report:              54.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction tagged_195} {:instruction integer_inc} {:instruction float_cos} {:instruction float_flush} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_swap} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_items float_dec float_div integer_swap float_add float_cos tagged_195 integer_inc float_cos float_flush float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer print_float print_integer float_max float_mult float_mult float_mult 57 57 integer_add float_sub float_mod float_swap 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot integer_dec print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4406.741523599995
Median total errors in population: 1406.8618000000001
Error averages by case: (134.7491647999997 8.353 124.31488920000157 10.371 174.23146639999837 11.05 146.43936270000108 10.275 129.36016619999901 11.328 172.65574669999836 9.578 157.72447320000163 7.94 151.41543339999788 10.205 137.20663909999863 9.09 218.3763063999976 10.667 190.09714529999815 11.98 194.3405507999966 8.732 150.6976532999995 10.5 127.52986359999876 10.3 150.73726980000046 9.552 167.31904730000147 9.435 202.4484813999977 8.664 190.63571550000054 10.22 178.31383000000113 9.532 152.07389619999887 11.118 183.1350439999983 9.559 210.91683620000177 10.176 156.13845190000134 7.947 153.63979859999915 9.137 208.69729159999977 7.838)
Error minima by case: (2.9191 6 7.7829 4 11.566 4 22.3549 4 4.1577 9 16.0 4 0.6042 6 2.0 4 8.2777 7 36.0 5 81.0 4 62.9103 5 37.5077 4 0.3373 3 31.2119 4 30.7063 4 68.0 4 0.5511 4 69.0077 3 13.679 4 1.8684 8 19.087 4 19.1468 4 26.9468 8 33.7787 4)
Average genome size in population (length): 73.068
Average program size in population (points): 74.068
Average percent parens in population: 0.014
Minimum age in population: 160.8955622190483
Maximum age in population: 165.9849994706831
Average age in population: 164.0178341941785
Median age in population: 164.0470582333167
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.182
Error (vector) diversity:			 0.233
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 198981576
--- Timings ---
Current time: 1529616423694 milliseconds
Total Time:         403.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.5 seconds, 39.5%
Fitness Testing:    189.5 seconds, 47.0%
Report:              54.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction tag_float_963} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction integer_sub} {:instruction float_add} {:instruction float_cos} {:instruction integer_div} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction float_flush} {:instruction integer_yank} {:instruction integer_div} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_yankdup} {:instruction 57} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dec} {:instruction integer_inc} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_yank} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_shove} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_times integer_dup_items integer_yankdup integer_dup_items integer_dup float_div tag_float_963 integer_swap float_cos tagged_200 integer_sub float_add float_cos integer_div integer_dup float_div integer_swap float_cos integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_rot float_max integer_yank float_mult float_flush integer_yank integer_div 57 57 integer_add float_yankdup 57 integer_yank float_mult integer_swap integer_dec integer_inc 57 57 integer_add integer_swap integer_yank 57 57 integer_add float_sub float_mod float_dup 57 float_min float_shove in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4633.294327799996
Median total errors in population: 1406.8618000000001
Error averages by case: (140.92375479999956 8.331 132.96845050000118 10.401 180.30522879999847 11.119 154.509550200001 10.302 141.88454769999964 11.362 184.4082688999987 9.575 170.63324730000159 7.958 160.8969414999981 10.213 143.16883139999885 9.108 226.89393509999772 10.647 197.46593369999843 12.043 203.83997319999708 8.758 158.5386369999997 10.528 138.0560396999987 10.328 158.72178720000022 9.613 175.22374940000122 9.468 209.7493499999984 8.713 202.5843693000008 10.255 185.7186672000008 9.541 162.92263959999934 11.183 195.24935189999854 9.612 218.00338820000155 10.239 166.080306200001 7.932 160.07403329999946 9.127 220.2563456999998 7.861)
Error minima by case: (2.9191 6 7.783 8 16.4739 9 23.3549 8 5.0657 10 18.6086 8 0.6042 6 0.9553 8 8.2777 7 91.6902 9 48.8149 7 63.9095 7 0.6003 9 0.6612 8 24.7881 8 25.2937 8 50.2953 7 0.3313 9 43.1003 8 14.6783 8 6.7764 8 23.9949 8 20.146 6 24.6058 8 12.2884 6)
Average genome size in population (length): 72.282
Average program size in population (points): 73.282
Average percent parens in population: 0.014
Minimum age in population: 161.8955622190483
Maximum age in population: 167.19158690313
Average age in population: 165.3753691850721
Median age in population: 165.407763020229
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.179
Error (vector) diversity:			 0.238
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 200791301
--- Timings ---
Current time: 1529616427390 milliseconds
Total Time:         407.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.9 seconds, 39.5%
Fitness Testing:    191.3 seconds, 47.0%
Report:              54.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_dup_items} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_max} {:instruction integer_sub} {:instruction print_float} {:instruction float_tan} {:instruction in2} {:instruction tag_float_726} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup_times} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_rot} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup_times integer_dup_times float_shove integer_yankdup integer_dup_items integer_dup float_div integer_dup_items in2 float_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer 7 integer_dec print_integer float_max integer_sub print_float float_tan in2 tag_float_726 float_mult 57 57 integer_add float_sub integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup_times 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_rot float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4386.517919999997
Median total errors in population: 1406.8618000000001
Error averages by case: (128.08543430000026 8.314 124.46786680000194 10.413 165.92901429999807 11.116 146.05962280000114 10.289 133.97276409999884 11.296 177.56311959999744 9.585 164.14148120000164 7.914 148.77627309999758 10.222 129.64270089999778 9.032 215.31971299999753 10.654 190.65701169999755 12.06 192.11257239999637 8.722 150.29348779999935 10.512 129.83683999999857 10.356 150.3544770000009 9.565 166.91928910000152 9.455 203.00219389999756 8.685 195.90460720000098 10.279 177.99320330000154 9.556 149.68654539999852 11.158 188.55648619999832 9.547 203.15980410000194 10.224 152.7992802000019 7.962 144.84410689999845 9.045 212.66402469999977 7.815)
Error minima by case: (2.9997 6 7.7835 4 3.7076 4 19.4532 4 2.3392 9 15.0 4 0.6042 6 3.0 4 8.3127 7 37.0 4 49.7228 4 62.9103 5 0.3997 5 0.4316 3 23.8801 4 24.3858 4 51.2032 5 0.1281 4 44.0082 5 13.679 3 1.8684 8 3.8135 4 19.1468 4 26.9818 8 31.2993 4)
Average genome size in population (length): 72.195
Average program size in population (points): 73.195
Average percent parens in population: 0.014
Minimum age in population: 164.1197949121114
Maximum age in population: 168.6304837067482
Average age in population: 166.7440878499175
Median age in population: 166.7776617393056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.177
Error (vector) diversity:			 0.233
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 202598851
--- Timings ---
Current time: 1529616430982 milliseconds
Total Time:         410.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.3 seconds, 39.5%
Fitness Testing:    193.0 seconds, 47.0%
Report:              55.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206113  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_div} {:instruction float_min} {:instruction float_dec} {:instruction float_div} {:instruction integer_swap} {:instruction in1} {:instruction float_cos} {:instruction tagged_200} {:instruction float_pop} {:instruction float_cos} {:instruction integer_pop} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction float_sin} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_dup_times} {:instruction 7} {:instruction integer_dec} {:instruction print_float} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction integer_max} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_sub} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 54} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_div float_min float_dec float_div integer_swap in1 float_cos tagged_200 float_pop float_cos integer_pop float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer float_sin print_float print_integer print_integer 7 integer_dec float_dup_times 7 integer_dec print_float print_integer float_sin float_sin print_float float_mult float_max integer_yank float_mult integer_yank 56 57 integer_add integer_max float_mod float_dup 57 float_sub float_yank in1 integer_inc integer_swap 57 54 float_inc integer_inc integer_fromfloat 57 float_inc float_mult float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4372.356207399995
Median total errors in population: 1406.8618000000001
Error averages by case: (128.4493774000003 8.187 122.26228600000204 10.339 166.31216579999816 11.099 143.2375168000012 10.258 133.24370009999905 11.295 175.18044699999842 9.521 162.17660250000174 7.844 152.66056709999776 10.16 129.33101329999786 9.026 219.34606469999738 10.576 187.7430406999984 12.023 195.19985819999633 8.656 147.24550739999927 10.437 127.59213009999873 10.288 148.49052740000081 9.519 165.31030540000108 9.402 200.25550819999842 8.589 193.80812360000036 10.204 175.84484970000065 9.475 152.880756899999 11.143 186.3380493999983 9.542 203.75045290000187 10.197 157.14228140000114 7.853 144.59987249999793 9.016 211.5582028999997 7.748)
Error minima by case: (2.9191 6 7.7835 7 10.566 8 19.4532 7 4.1577 9 15.0 8 0.6042 6 3.0 7 8.2777 7 32.1418 8 48.8149 7 34.3611 7 0.6003 8 0.6613 7 24.7881 7 25.2937 7 50.2953 7 0.3653 8 43.1003 7 1.8702 7 0.8684 8 18.087 7 17.4024 6 26.9468 8 32.7007 6)
Average genome size in population (length): 71.244
Average program size in population (points): 72.244
Average percent parens in population: 0.014
Minimum age in population: 166.1169543075395
Maximum age in population: 170.1164194731581
Average age in population: 168.1246550415306
Median age in population: 168.1726920814096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.155
Error (vector) diversity:			 0.204
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 204382351
--- Timings ---
Current time: 1529616434634 milliseconds
Total Time:         414.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.8 seconds, 39.5%
Fitness Testing:    194.7 seconds, 47.0%
Report:              56.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_div} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction print_float} {:instruction float_sin} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_sub} {:instruction float_swap} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_mult} {:instruction 57} {:instruction integer_inc} {:instruction 57} {:instruction 57} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction tagged_960} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items float_add float_div integer_sub integer_dup_items integer_dup float_div integer_swap float_add float_cos print_float float_sin in2 float_rot float_frominteger integer_max float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec float_sin integer_mod integer_sub float_swap 7 integer_dec print_integer float_mult 57 integer_inc 57 57 integer_swap float_mult 57 57 integer_add float_sub float_dup_times float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times tagged_960 float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3717.2341655999962
Median total errors in population: 1406.8618000000001
Error averages by case: (107.20265370000025 8.126 98.83317790000113 10.385 145.4245409999983 11.114 121.3357895000013 10.288 100.56024579999955 11.252 145.61276390000006 9.517 131.46592470000184 7.752 118.99234169999794 10.192 106.32587709999858 8.886 188.04418739999733 10.593 166.26474679999944 12.047 163.72722889999642 8.628 125.56917289999768 10.467 97.28624539999947 10.34 125.75474830000222 9.531 143.00331629999994 9.398 179.1001782999988 8.587 165.01740219999937 10.214 154.0426457999996 9.476 119.7562071999975 11.162 157.28307719999816 9.444 183.9981828000017 10.208 124.2024047000032 7.814 122.95782319999745 8.889 183.4382828999998 7.725)
Error minima by case: (2.9191 6 7.7829 8 9.4738 9 20.3549 9 4.1577 10 12.887 8 0.6042 6 5.5491 8 8.2777 7 39.7831 9 78.8149 8 62.9104 8 37.5076 9 0.2466 8 29.2119 8 28.7063 7 65.2953 7 0.7267 8 69.0076 8 13.6791 9 0.2237 8 16.9948 8 19.1469 6 26.9468 8 28.2213 6)
Average genome size in population (length): 71.391
Average program size in population (points): 72.391
Average percent parens in population: 0.014
Minimum age in population: 167.4218708608863
Maximum age in population: 171.4456181623409
Average age in population: 169.501209806575
Median age in population: 169.565219693708
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.153
Error (vector) diversity:			 0.211
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 206169176
--- Timings ---
Current time: 1529616438161 milliseconds
Total Time:         418.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.1 seconds, 39.5%
Fitness Testing:    196.4 seconds, 47.0%
Report:              56.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_max} {:instruction integer_sub} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction float_max} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items float_add integer_dup integer_sub float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec float_max integer_sub integer_sub print_float print_integer float_max float_max integer_swap float_mult 57 57 integer_add float_sub float_mod float_dup float_max float_mult 57 57 integer_add float_max float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot integer_dec print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4543.151722199996
Median total errors in population: 1406.8618000000001
Error averages by case: (134.8640363 8.236 127.80011630000168 10.403 175.9908752999983 11.152 150.15548580000114 10.315 139.44564759999955 11.33 182.0194919999986 9.56 168.23088100000166 7.888 157.3343538999978 10.255 137.9927256999984 9.033 223.34645789999746 10.621 193.3823114999985 12.068 202.05245959999647 8.726 154.12460959999945 10.54 136.10867139999888 10.347 154.40836140000073 9.545 171.126004400001 9.462 205.8652617999984 8.647 200.40799860000044 10.28 181.58760940000053 9.549 160.1117728999991 11.191 193.08105979999834 9.563 213.0709527000016 10.26 164.30460800000134 7.93 154.5304100999991 9.014 218.08555919999984 7.809)
Error minima by case: (2.9677 6 7.7829 7 1.434 8 22.3549 8 4.1577 10 2.113 8 0.6042 6 4.5491 8 8.2777 7 38.7831 8 46.8149 7 62.9104 7 0.6003 8 0.6613 7 24.7881 8 25.2937 8 48.2953 7 0.3653 8 41.1003 8 13.6791 7 1.8684 8 1.913 8 19.1469 6 26.9468 8 2.7928 6)
Average genome size in population (length): 71.51
Average program size in population (points): 72.51
Average percent parens in population: 0.014
Minimum age in population: 168.4218708608863
Maximum age in population: 173.044503218528
Average age in population: 170.9169326614391
Median age in population: 171.0033823030587
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.173
Error (vector) diversity:			 0.232
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 207959151
--- Timings ---
Current time: 1529616441710 milliseconds
Total Time:         421.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.5 seconds, 39.5%
Fitness Testing:    198.2 seconds, 47.0%
Report:              56.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_add} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_mult} {:instruction 57} {:instruction integer_inc} {:instruction 57} {:instruction 57} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction print_float} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction tagged_960} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_sub integer_sub in2 float_rot float_frominteger integer_max float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec float_sin integer_mod float_yankdup float_add 7 integer_dec print_integer float_mult 57 integer_inc 57 57 integer_swap float_mult 57 57 integer_add float_sub print_float float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times tagged_960 float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4087.9677272999975
Median total errors in population: 1406.8618000000001
Error averages by case: (117.48194540000027 8.219 111.81820600000134 10.368 150.85111309999857 11.063 132.09764730000114 10.289 122.5893926999996 11.266 165.35588279999894 9.582 152.54580150000163 7.852 137.11594329999852 10.205 115.79368969999851 8.949 205.65886219999743 10.65 177.85469089999867 12.059 184.23586289999685 8.677 135.90303039999864 10.503 116.11596839999928 10.339 137.98788180000102 9.553 155.275133400001 9.428 190.3831233999984 8.643 183.4625686000002 10.242 165.94961520000052 9.532 141.3324694999993 11.143 175.93914379999833 9.502 191.09347580000158 10.179 145.2396408000014 7.914 131.16773289999827 8.98 201.7969054999997 7.785)
Error minima by case: (1.9997 6 6.7835 9 16.7252 9 19.4532 9 4.1577 9 26.2497 8 0.6042 6 15.4564 9 7.3127 7 90.6905 9 81.7228 7 62.9098 7 1.3997 9 0.3373 8 28.5417 8 31.7063 8 96.2032 7 0.3653 9 68.0082 8 13.6785 9 7.1817 8 24.4102 8 19.1463 6 25.9818 8 28.2213 6)
Average genome size in population (length): 71.37
Average program size in population (points): 72.37
Average percent parens in population: 0.014
Minimum age in population: 169.675970849702
Maximum age in population: 174.4052944184935
Average age in population: 172.3639249919551
Median age in population: 172.4176545062628
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.168
Error (vector) diversity:			 0.216
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 209746526
--- Timings ---
Current time: 1529616445319 milliseconds
Total Time:         425.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.9 seconds, 39.5%
Fitness Testing:    199.9 seconds, 47.0%
Report:              57.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction tagged_200} {:instruction print_float} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_fromfloat float_cos tagged_200 print_float float_add float_cos integer_dup_items integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot print_float 57 57 integer_add float_sub float_mod float_dup float_swap 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4216.752316499997
Median total errors in population: 1406.8618000000001
Error averages by case: (125.12833380000033 8.153 116.29752800000128 10.279 165.34612639999833 11.049 138.51752910000107 10.205 124.77030759999933 11.225 168.30981719999895 9.509 153.9817188000016 7.754 142.41057739999823 10.149 126.97014939999815 8.892 210.03844139999754 10.544 181.6312206999991 12.006 186.32694389999665 8.558 142.1883107999983 10.386 118.54256489999926 10.274 142.69542930000156 9.454 159.65603980000085 9.328 194.23051269999874 8.513 187.26937630000018 10.155 169.63677480000035 9.429 143.54592619999832 11.081 179.67636659999846 9.446 203.07295920000175 10.13 147.9241484000021 7.809 143.3142176999981 8.89 204.3569960999999 7.696)
Error minima by case: (1.9997 6 6.7835 7 16.5742 8 20.2979 7 4.1578 9 16.0 8 0.6042 6 2.0 7 7.3127 7 0.691 7 81.0 7 27.0897 7 36.5082 8 1.8945 6 29.1549 7 28.6493 7 68.0 7 1.7263 8 68.0082 7 13.6785 7 6.8689 8 23.087 7 19.1463 6 25.9818 8 5.7006 6)
Average genome size in population (length): 71.772
Average program size in population (points): 72.772
Average percent parens in population: 0.014
Minimum age in population: 170.675970849702
Maximum age in population: 175.8025915285709
Average age in population: 173.7743408577495
Median age in population: 173.8404482229331
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.159
Error (vector) diversity:			 0.219
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 211543676
--- Timings ---
Current time: 1529616448829 milliseconds
Total Time:         428.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.3 seconds, 39.5%
Fitness Testing:    201.6 seconds, 47.0%
Report:              57.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction integer_yank} {:instruction float_mult} {:instruction float_shove} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_swap} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_dec} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction print_integer})
Best program: (float_cos integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 integer_yank float_mult float_shove 57 integer_add float_sub float_mod float_swap 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_fromfloat integer_rot integer_dec print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4620.819767699996
Median total errors in population: 1406.8618000000001
Error averages by case: (144.0810037999991 8.288 129.39491740000184 10.428 184.6914277999979 11.168 151.04346060000114 10.33 139.1138300999994 11.36 181.54815729999797 9.616 169.0644963000017 7.96 162.70506359999754 10.251 146.03313919999894 9.074 228.27079029999743 10.665 194.58737109999794 12.11 206.28735769999614 8.778 154.81050859999976 10.563 135.4620524999986 10.376 155.33299750000035 9.616 172.3661782000014 9.485 206.94944429999765 8.709 200.91903190000113 10.287 182.80538170000096 9.557 164.75187369999958 11.222 193.52377179999843 9.599 222.02573070000201 10.277 168.8941965000008 7.965 163.1563909999997 9.093 218.35219409999988 7.872)
Error minima by case: (2.9997 6 7.7829 7 11.566 9 23.3549 8 5.0715 10 26.2497 8 0.6042 6 9.7843 7 8.3127 7 91.6875 8 82.7222 6 63.9068 7 37.5076 8 0.6613 6 32.2119 7 31.7063 8 97.2027 7 0.3523 8 69.0076 8 14.6755 8 1.8684 8 19.087 8 20.1433 6 26.9818 7 28.2213 6)
Average genome size in population (length): 71.823
Average program size in population (points): 72.823
Average percent parens in population: 0.014
Minimum age in population: 172.0692838574872
Maximum age in population: 177.2267078622124
Average age in population: 175.1858096503882
Median age in population: 175.2384074362266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.187
Error (vector) diversity:			 0.25
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 213341751
--- Timings ---
Current time: 1529616452416 milliseconds
Total Time:         432.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.6 seconds, 39.5%
Fitness Testing:    203.4 seconds, 47.0%
Report:              58.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction float_sub} {:instruction tagged_200} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_cos} {:instruction float_cos} {:instruction tagged_200} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_dup} {:instruction float_dup} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_max} {:instruction integer_yank} {:instruction float_sin} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_dup} {:instruction 57} {:instruction float_swap} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_1245} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap float_sub tagged_200 float_cos integer_dup integer_dup_items integer_dup float_div integer_inc integer_swap float_cos float_cos tagged_200 float_sub integer_swap integer_pop float_cos integer_dup float_dup in2 float_rot float_frominteger float_dec integer_stackdepth integer_yank 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float integer_dup_items float_max integer_yank float_sin 57 57 integer_add float_dup 57 float_swap float_yank in1 integer_inc integer_swap 57 57 float_mult 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 integer_yankdup integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_1245 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4641.633088599995
Median total errors in population: 1406.8618000000001
Error averages by case: (144.93671059999903 8.388 137.14592130000074 10.402 185.58107629999833 11.122 157.61791950000108 10.308 137.78995780000005 11.399 179.13636609999804 9.591 167.0052563000016 8.015 157.00393799999807 10.253 149.8697019999995 9.128 223.2796962999976 10.675 202.28865429999811 12.075 199.79198659999682 8.795 162.2112863000002 10.543 135.14190969999902 10.326 162.91165939999965 9.6 179.08353320000205 9.493 214.35511969999786 8.704 197.70453260000076 10.258 190.7226920000015 9.596 158.2149714999995 11.221 190.37010449999838 9.624 222.14238090000165 10.26 162.12583690000093 7.977 165.11158579999986 9.155 215.3082909999998 7.874)
Error minima by case: (2.9997 6 7.7829 5 11.566 6 19.2979 6 4.1578 10 2.9792 6 0.6042 6 2.0 6 0.6872 7 18.1289 6 81.0 4 9.6517 7 0.3997 6 0.4316 5 28.1549 6 27.6493 6 68.0 5 0.6958 6 69.0076 6 13.679 5 1.8684 8 19.087 6 19.1468 6 3.0181 7 9.2994 6)
Average genome size in population (length): 71.937
Average program size in population (points): 72.937
Average percent parens in population: 0.014
Minimum age in population: 173.7970044747831
Maximum age in population: 178.702369865681
Average age in population: 176.5705519556359
Median age in population: 176.5703833879999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.175
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 215142676
--- Timings ---
Current time: 1529616455977 milliseconds
Total Time:         435.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.9 seconds, 39.4%
Fitness Testing:    205.2 seconds, 47.1%
Report:              58.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_200} {:instruction float_add} {:instruction float_cos} {:instruction float_add} {:instruction float_cos} {:instruction print_float} {:instruction integer_sub} {:instruction in2} {:instruction print_float} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction print_integer} {:instruction print_float} {:instruction float_pop} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_inc} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_dec} {:instruction 57} {:instruction 57} {:instruction float_yank} {:instruction in1} {:instruction 57} {:instruction 57} {:instruction float_mult} {:instruction 57} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_yank integer_inc integer_dup_items float_dec float_min integer_swap float_max integer_dup_items integer_dup_items float_cos tagged_200 float_add float_cos float_add float_cos print_float integer_sub in2 print_float float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot print_float print_integer print_float float_pop integer_sub print_float print_integer float_max integer_inc float_mult 57 57 integer_add float_sub integer_fromfloat integer_yank float_dec 57 57 float_yank in1 57 57 float_mult 57 float_yank float_yank float_inc integer_inc integer_fromfloat 57 float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_dup_items float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4796.451478299996
Median total errors in population: 1406.8618000000001
Error averages by case: (150.04986089999852 8.389 139.8277967000005 10.492 184.07036399999845 11.225 161.52857500000104 10.382 149.48803500000054 11.369 191.31364589999825 9.686 179.30649630000138 7.996 166.49754979999818 10.333 150.1825719999998 9.133 232.1311798999978 10.744 204.73162209999816 12.147 208.6709118999969 8.847 164.7553714000007 10.617 146.8785724999988 10.405 165.20472349999957 9.681 181.43505680000172 9.567 216.82217959999804 8.778 209.90786090000066 10.337 192.29318720000134 9.635 167.16832040000008 11.255 202.56819929999853 9.641 221.86423640000163 10.286 171.97087910000027 8.049 164.3216316000003 9.16 227.36565009999978 7.943)
Error minima by case: (2.9377 6 7.7835 9 16.5742 9 19.4532 9 4.1577 9 18.9792 8 0.6042 6 15.4509 8 8.3107 6 70.691 9 82.7228 10 62.9104 7 37.5082 9 0.6613 8 28.247 8 28.552 8 97.1973 7 0.3653 8 69.0082 8 13.6791 8 6.8994 8 24.3477 8 19.1469 6 12.9819 8 25.2994 6)
Average genome size in population (length): 71.787
Average program size in population (points): 72.787
Average percent parens in population: 0.014
Minimum age in population: 174.9207477742031
Maximum age in population: 179.8600252789749
Average age in population: 177.9571319583144
Median age in population: 177.9794908576032
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.182
Error (vector) diversity:			 0.242
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 216939676
--- Timings ---
Current time: 1529616459529 milliseconds
Total Time:         439.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.3 seconds, 39.4%
Fitness Testing:    206.9 seconds, 47.1%
Report:              59.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_div} {:instruction integer_swap} {:instruction float_add} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_max} {:instruction integer_sub} {:instruction print_float} {:instruction float_tan} {:instruction in2} {:instruction tag_float_726} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_pop} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_yank} {:instruction float_sin} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_dup} {:instruction 57} {:instruction float_swap} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_mod} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_1245} {:instruction float_flush} {:instruction print_integer})
Best program: (float_frominteger integer_dup_items float_dec integer_div integer_swap float_add integer_sub float_mod integer_sub in2 float_rot float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_max integer_sub print_float float_tan in2 tag_float_726 float_mult integer_fromfloat float_add float_pop float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_yank float_sin 57 57 integer_add float_dup 57 float_swap float_yank in1 integer_inc integer_swap 57 57 float_mod 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_1245 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4239.168308399995
Median total errors in population: 1406.8618000000001
Error averages by case: (128.29329460000028 8.266 114.79613000000158 10.393 166.1111390999985 11.114 136.88333910000114 10.298 123.85894689999903 11.344 167.32053099999862 9.562 152.79641440000154 7.874 148.20767009999796 10.222 128.728616699998 9.004 215.1238927999976 10.646 180.96318189999846 12.062 191.7720136999968 8.732 141.13227429999898 10.523 118.94756609999875 10.333 141.16956160000106 9.6 158.04598410000136 9.456 193.61291119999828 8.668 185.71537350000074 10.253 169.0967910000008 9.53 149.31351709999913 11.154 178.2542521999984 9.54 203.33206900000152 10.225 153.52457450000114 7.928 144.76132629999898 9.052 203.81093719999984 7.817)
Error minima by case: (1.9647 6 6.8185 7 0.566 9 10.7372 8 4.1577 10 0.113 8 0.6042 6 15.4564 8 7.2777 7 90.6905 8 48.8149 7 62.9098 7 23.5081 8 0.4316 6 1.8802 7 2.3859 7 73.2031 7 0.0168 8 66.0081 7 13.6785 9 7.1817 8 0.087 8 19.1463 6 25.9468 8 0.7928 6)
Average genome size in population (length): 71.041
Average program size in population (points): 72.041
Average percent parens in population: 0.014
Minimum age in population: 176.8535684432344
Maximum age in population: 181.4776524678376
Average age in population: 179.3822741595716
Median age in population: 179.4095103245035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.18
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 218717851
--- Timings ---
Current time: 1529616463075 milliseconds
Total Time:         443.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.6 seconds, 39.4%
Fitness Testing:    208.7 seconds, 47.1%
Report:              59.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206115  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_dec} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_inc} {:instruction float_cos} {:instruction float_flush} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction tagged_658} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction print_float} {:instruction in2} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_max} {:instruction in2} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 58} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_mod} {:instruction float_swap} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_max} {:instruction 57} {:instruction float_swap} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 55} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_923} {:instruction float_rot} {:instruction print_integer})
Best program: (integer_rot float_dec float_div integer_swap float_add integer_fromfloat float_cos integer_inc float_cos float_flush float_mod in2 float_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer 7 integer_dec tagged_658 float_rot integer_sub print_float print_integer float_max integer_yank integer_yank print_float in2 57 integer_add float_sub integer_add integer_swap integer_max in2 integer_yank float_mult 57 58 integer_add float_dup_times float_mod float_swap 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_max 57 float_swap float_yank float_inc integer_inc integer_fromfloat 55 float_min float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_923 float_rot print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4186.089445899995
Median total errors in population: 1406.8618000000001
Error averages by case: (124.58968210000025 8.236 116.66364660000163 10.334 162.4361477999982 11.066 137.5951249000011 10.253 123.57895539999922 11.324 166.02740899999867 9.566 152.80103020000158 7.878 139.36289289999814 10.191 124.7288419999983 8.995 207.84775439999757 10.611 182.37463819999866 12.044 184.4230467999967 8.662 141.82662959999902 10.449 120.49721859999892 10.29 142.87724790000095 9.515 159.70313540000092 9.397 194.86396969999836 8.58 184.6075359000006 10.206 170.47719640000065 9.48 141.61204879999892 11.151 177.0841017999983 9.539 199.04108930000166 10.172 145.8116945000017 7.878 140.07644859999868 8.996 202.5839590999999 7.785)
Error minima by case: (2.9077 6 7.7835 7 12.4739 8 11.6451 7 4.0722 10 15.9791 8 0.6042 6 2.457 7 8.2787 7 36.6911 8 21.8149 7 62.9103 7 18.6003 8 0.4316 7 7.7881 7 27.2937 7 8.2953 7 0.3653 8 29.1003 7 13.679 8 2.7764 8 19.9949 7 19.1468 6 26.9478 8 4.2072 6)
Average genome size in population (length): 71.144
Average program size in population (points): 72.144
Average percent parens in population: 0.014
Minimum age in population: 177.8535684432344
Maximum age in population: 182.6727050322487
Average age in population: 180.8105862674278
Median age in population: 180.8569828980389
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.171
Error (vector) diversity:			 0.237
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 220498651
--- Timings ---
Current time: 1529616466631 milliseconds
Total Time:         446.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.9 seconds, 39.4%
Fitness Testing:    210.4 seconds, 47.1%
Report:              60.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_flush} {:instruction float_add} {:instruction integer_dup} {:instruction float_dup_items} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_swap} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 59} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_dec} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items float_flush float_add integer_dup float_dup_items in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max integer_yank float_mult 57 integer_yank float_mult 57 57 integer_add float_sub float_mod float_swap 57 float_min float_yank in1 integer_inc integer_swap 57 59 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_fromfloat integer_rot integer_dec print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4413.872052699996
Median total errors in population: 1406.8618000000001
Error averages by case: (129.4697591000003 8.216 124.80164040000156 10.345 171.10058439999838 11.078 145.81247230000113 10.255 134.18194069999936 11.273 176.08792489999854 9.536 163.1874273000017 7.82 151.8749676999979 10.19 133.77698659999842 8.922 219.32227099999741 10.616 189.4421819999985 12.038 195.1649686999964 8.656 149.8457469999992 10.475 128.0307948999989 10.301 151.20951170000086 9.498 166.98990680000134 9.381 201.89819559999836 8.596 194.7971099000008 10.179 177.59314310000065 9.48 153.02328349999917 11.128 187.31506719999837 9.51 207.41947860000178 10.19 157.33292610000123 7.85 149.41816239999883 8.943 212.55460079999986 7.745)
Error minima by case: (2.9077 6 7.2166 3 16.9224 4 10.7372 4 5.0657 9 14.0 4 0.6042 6 4.0 4 8.2817 7 28.2169 5 71.7227 5 25.9975 5 23.5081 5 1.8456 3 1.8802 3 2.3859 3 66.0 5 0.8189 4 66.0081 5 14.6771 4 7.3023 8 24.4102 4 0.7611 3 26.9508 8 33.8849 4)
Average genome size in population (length): 71.033
Average program size in population (points): 72.033
Average percent parens in population: 0.014
Minimum age in population: 179.7560263228816
Maximum age in population: 184.1512119426089
Average age in population: 182.1995282112267
Median age in population: 182.2409066066771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.172
Error (vector) diversity:			 0.217
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 222276676
--- Timings ---
Current time: 1529616470204 milliseconds
Total Time:         450.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.3 seconds, 39.4%
Fitness Testing:    212.2 seconds, 47.1%
Report:              60.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_swap} {:instruction float_add} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_max} {:instruction integer_sub} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction in1} {:instruction tag_float_219} {:instruction integer_max} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_swap} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_dec} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_swap float_add integer_dup integer_sub float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec float_max integer_sub integer_sub print_float print_integer print_integer float_rot integer_sub integer_stackdepth in1 tag_float_219 integer_max float_mult 57 57 integer_add float_sub float_mod float_swap 57 float_min float_yank in1 integer_inc integer_swap 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_fromfloat integer_rot integer_dec print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4066.659120599996
Median total errors in population: 1406.8618000000001
Error averages by case: (121.48616040000029 8.24 109.81099590000144 10.38 155.57688279999834 11.082 130.26575380000122 10.268 121.1681025999991 11.348 161.80938719999895 9.547 150.95605300000167 7.889 135.56260119999794 10.215 120.37071709999815 9.025 204.5534965999974 10.632 177.28272339999893 12.026 179.5401363999966 8.678 134.75641729999805 10.51 115.48265709999902 10.321 136.46660940000186 9.551 154.10107870000067 9.429 189.7488047999987 8.646 180.70240770000018 10.244 164.5511159000003 9.538 136.65238329999798 11.145 173.16492099999837 9.569 194.51198990000162 10.203 141.59932500000207 7.911 134.49573439999787 9.046 198.79666569999983 7.803)
Error minima by case: (2.9997 6 7.7829 4 11.566 5 19.4532 5 4.1577 9 9.0208 5 0.6042 6 15.4509 5 8.3127 7 28.2169 6 48.8149 5 25.9975 6 0.6003 5 0.4316 4 24.7881 4 25.2937 4 50.2953 5 0.7837 5 43.1003 5 13.679 5 1.8684 8 19.087 5 19.1468 4 26.9818 8 2.7006 5)
Average genome size in population (length): 70.844
Average program size in population (points): 71.844
Average percent parens in population: 0.014
Minimum age in population: 180.7560263228816
Maximum age in population: 185.4883295196707
Average age in population: 183.5959325287319
Median age in population: 183.6562897274117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.161
Error (vector) diversity:			 0.211
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 224050401
--- Timings ---
Current time: 1529616473743 milliseconds
Total Time:         453.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.6 seconds, 39.4%
Fitness Testing:    213.9 seconds, 47.1%
Report:              61.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206171  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_mod} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction tagged_200} {:instruction print_float} {:instruction float_add} {:instruction float_cos} {:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction float_div} {:instruction integer_swap} {:instruction float_yank} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_sin} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_sub} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction float_max} {:instruction integer_swap} {:instruction float_sin} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_dup} {:instruction 57} {:instruction float_swap} {:instruction float_yank} {:instruction integer_add} {:instruction float_sub} {:instruction float_yank} {:instruction integer_add} {:instruction float_sub} {:instruction integer_rot} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_mod float_yank integer_swap integer_swap float_cos tagged_200 print_float float_add float_cos float_cos integer_dup float_mod float_div integer_swap float_yank float_cos integer_dup integer_sub in2 float_sin float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer integer_sub float_sin print_float float_mult float_max integer_swap float_sin 57 57 integer_add float_dup 57 float_swap float_yank integer_add float_sub float_yank integer_add float_sub integer_rot float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_dup float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4206.408274599995
Median total errors in population: 1406.8618000000001
Error averages by case: (126.9038495000003 8.261 115.36726760000151 10.361 164.3978809999982 11.094 137.79117570000113 10.272 123.33648929999929 11.328 166.63735349999843 9.559 152.54270070000172 7.887 141.80501089999768 10.201 126.31513589999803 8.998 209.44054649999742 10.629 181.86149189999858 12.064 185.8839957999963 8.689 141.88388169999885 10.507 121.63019729999908 10.334 142.25985590000133 9.559 159.17887180000133 9.432 194.5082038999986 8.618 185.31287680000045 10.229 169.88285850000082 9.514 143.06113349999822 11.139 177.78474099999832 9.531 201.88519880000172 10.217 147.27365080000195 7.917 143.02886959999833 9.006 203.29103669999984 7.798)
Error minima by case: (2.0003 6 6.7829 4 16.5742 5 10.7372 5 0.9343 9 13.887 5 0.6042 6 4.5491 5 7.3133 7 38.7831 5 71.7227 4 58.0025 6 23.5081 5 0.6627 4 1.8802 5 2.3859 5 66.2953 5 0.6958 5 66.0081 5 8.7712 4 6.8689 8 24.9948 5 14.2389 5 25.9824 7 28.2213 5)
Average genome size in population (length): 70.621
Average program size in population (points): 71.621
Average percent parens in population: 0.014
Minimum age in population: 182.1241418360574
Maximum age in population: 187.2265980545236
Average age in population: 185.0476271224372
Median age in population: 185.0716368963692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.174
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 225818901
--- Timings ---
Current time: 1529616477335 milliseconds
Total Time:         457.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.0 seconds, 39.4%
Fitness Testing:    215.6 seconds, 47.2%
Report:              61.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206115  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction tagged_321} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_pop} {:instruction print_integer} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_dup} {:instruction float_max} {:instruction print_float} {:instruction float_min} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_rot} {:instruction float_mult} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_923} {:instruction float_rot} {:instruction print_integer})
Best program: (integer_dup_times float_cos integer_dup float_mod integer_dup_items float_dec float_div float_div integer_swap tagged_321 float_div integer_swap float_add float_cos integer_dup integer_sub in2 integer_fromfloat float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec integer_fromfloat print_float print_integer float_max integer_pop print_integer 57 57 integer_add float_sub float_dup float_max print_float float_min float_mod in1 integer_inc integer_swap 57 57 float_dec float_inc float_rot float_mult float_inc integer_fromfloat 57 float_min float_inc float_inc integer_inc integer_rot float_sub float_sub integer_shove integer_dup_times integer_dup_times float_shove float_sub float_rot integer_yank tagged_923 float_rot print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4097.465806999996
Median total errors in population: 1406.8618000000001
Error averages by case: (119.84182830000027 8.163 109.24671250000125 10.311 160.25723149999848 11.06 131.98821400000122 10.205 118.9224854999995 11.27 162.3146361999988 9.507 148.65943750000153 7.799 139.16812649999807 10.199 121.44584219999813 8.91 207.52875019999743 10.583 175.9601137999987 12.026 184.67380369999677 8.613 136.06339719999863 10.447 115.26808649999938 10.272 136.31396580000128 9.46 153.1600416000014 9.357 188.6283726999986 8.573 181.9161676000004 10.19 163.92178490000063 9.461 141.7584544999992 11.116 174.3229821999983 9.491 199.0029113000017 10.15 146.13285260000106 7.841 139.3079771999989 8.921 200.0266309999998 7.71)
Error minima by case: (1.9077 6 7.7835 7 16.9224 8 6.2629 7 4.1577 9 12.8112 8 0.6042 6 4.5491 7 8.2777 7 38.7831 8 79.8149 7 62.9104 7 37.5082 8 0.6612 7 15.1199 8 14.6142 8 66.2953 7 0.3654 8 69.0082 7 13.6791 8 7.3023 8 24.4102 7 19.1469 6 26.9468 8 6.491 6)
Average genome size in population (length): 70.569
Average program size in population (points): 71.569
Average percent parens in population: 0.014
Minimum age in population: 183.7967673116975
Maximum age in population: 188.4996488585711
Average age in population: 186.5200517831323
Median age in population: 186.55746431689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.152
Error (vector) diversity:			 0.208
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 227586026
--- Timings ---
Current time: 1529616480892 milliseconds
Total Time:         460.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.3 seconds, 39.3%
Fitness Testing:    217.4 seconds, 47.2%
Report:              62.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206171  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_max} {:instruction integer_rot} {:instruction print_float} {:instruction float_dup} {:instruction in2} {:instruction tag_float_726} {:instruction float_mult} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction integer_swap} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_max} {:instruction tag_float_308} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction integer_yank} {:instruction tagged_1137} {:instruction float_yankdup} {:instruction print_integer})
Best program: (float_tan float_mod integer_dup_times integer_dup_items integer_dup float_mult integer_swap integer_fromfloat integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth 92 print_float print_integer print_integer 7 integer_dec print_integer float_max integer_rot print_float float_dup in2 tag_float_726 float_mult 57 integer_add float_sub integer_swap float_mult 57 57 integer_add 57 integer_add float_sub float_mod float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 integer_fromfloat 57 integer_inc integer_rot float_max tag_float_308 integer_shove integer_dup_times integer_mod float_sub float_div integer_yank tagged_1137 float_yankdup print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4547.198142699994
Median total errors in population: 1406.8618000000001
Error averages by case: (136.54297079999964 8.287 128.75996730000162 10.364 175.74973049999804 11.109 149.42040630000116 10.256 139.45717290000013 11.37 181.08410519999796 9.588 169.04821830000157 7.945 158.03417929999753 10.204 139.13619479999934 9.035 225.45662749999764 10.616 193.48037769999826 12.052 201.65136769999648 8.689 153.62846759999982 10.501 136.18861609999882 10.349 154.5898401000002 9.554 171.1362397000015 9.422 205.80149459999802 8.64 201.11772160000103 10.208 181.76639360000104 9.518 158.8074363999995 11.155 193.72523829999847 9.564 213.26534270000172 10.197 162.8831259000008 7.911 154.41411669999954 9.045 218.66579109999984 7.808)
Error minima by case: (1.9077 6 6.7835 6 16.9224 5 23.3549 7 4.1349 10 15.0 7 0.6042 6 3.0 6 7.3127 7 37.0 5 80.0 5 62.9102 6 36.5082 6 1.6109 6 32.2119 7 31.0 7 67.0 6 0.7267 7 68.0082 6 13.6789 5 7.3023 8 24.4102 5 19.1467 6 25.9818 8 11.6948 6)
Average genome size in population (length): 70.821
Average program size in population (points): 71.821
Average percent parens in population: 0.014
Minimum age in population: 185.6525467926863
Maximum age in population: 189.8584308473705
Average age in population: 187.9513218290192
Median age in population: 187.9789068565584
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.163
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 229359191
--- Timings ---
Current time: 1529616484415 milliseconds
Total Time:         464.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.7 seconds, 39.3%
Fitness Testing:    219.2 seconds, 47.2%
Report:              62.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_swap} {:instruction float_add} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_max} {:instruction integer_sub} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction float_min} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction integer_yank} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup_times} {:instruction 57} {:instruction float_sub} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 56} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_sub} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_swap float_add integer_dup integer_sub float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec float_max integer_sub integer_sub print_float print_integer float_rot integer_sub float_rot float_frominteger integer_dup_items integer_flush float_min integer_yank float_mult 57 integer_yank float_mult 57 57 integer_add float_sub float_sin float_dup_times 57 float_sub float_yank in1 integer_inc integer_swap 57 56 float_inc integer_inc integer_fromfloat 57 float_sub float_yank float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4292.960799699996
Median total errors in population: 1406.8618000000001
Error averages by case: (127.23110190000025 8.199 118.77482950000106 10.383 166.65632209999885 11.11 141.37339340000102 10.299 128.52550829999956 11.297 171.67061159999867 9.577 157.92364770000145 7.861 145.85928249999847 10.218 128.1401008999988 8.987 212.8513283999976 10.633 184.95439369999892 12.08 189.25749839999716 8.671 145.36075959999948 10.49 124.6464134999994 10.331 145.65749210000007 9.555 162.58309050000142 9.447 197.54354619999881 8.631 190.2763706000005 10.249 173.01514290000046 9.528 146.5569504999997 11.184 182.83412149999845 9.526 204.16457890000135 10.223 150.87423310000062 7.905 144.84832959999983 8.997 208.23175229999975 7.769)
Error minima by case: (1.9997 6 6.7835 5 16.509 6 23.3549 6 4.1315 9 39.0209 6 0.6042 6 15.4569 6 7.3127 7 90.691 6 81.7228 5 62.9103 7 36.5082 6 0.4316 5 32.2119 6 31.7063 6 96.2032 6 3.0E-4 6 68.0082 6 13.679 5 6.8104 8 24.03 6 19.1468 6 25.9818 8 32.7007 6)
Average genome size in population (length): 70.625
Average program size in population (points): 71.625
Average percent parens in population: 0.014
Minimum age in population: 186.6525467926863
Maximum age in population: 191.3164662818088
Average age in population: 189.375351839609
Median age in population: 189.4361384904454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.156
Error (vector) diversity:			 0.225
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 231127741
--- Timings ---
Current time: 1529616487949 milliseconds
Total Time:         467.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.0 seconds, 39.3%
Fitness Testing:    220.9 seconds, 47.2%
Report:              62.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_swap} {:instruction float_add} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_inc} {:instruction in2} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_max} {:instruction integer_sub} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction 57} {:instruction integer_add} {:instruction float_dup} {:instruction 57} {:instruction float_swap} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction integer_swap} {:instruction float_sub} {:instruction float_inc} {:instruction integer_min} {:instruction 53} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_pop} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_min} {:instruction float_cos} {:instruction float_inc} {:instruction float_dup} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_1005} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_swap float_add integer_dup integer_sub integer_inc in2 float_yankdup float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec float_max integer_sub integer_sub print_float print_integer float_max print_integer integer_sub integer_sub print_float print_integer float_max integer_yank float_mult float_yankdup 57 integer_add float_dup 57 float_swap 57 57 integer_add float_sub float_mod integer_swap float_sub float_inc integer_min 53 57 57 integer_add float_sub float_mod float_dup 57 float_pop float_yank in1 integer_inc integer_swap 57 57 integer_inc float_inc integer_inc integer_fromfloat 57 float_min float_cos float_inc float_dup integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_flush float_rot integer_yank tagged_1005 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4624.582798899996
Median total errors in population: 1406.8618000000001
Error averages by case: (136.8172402999996 8.264 132.22444500000205 10.377 179.27995409999826 11.129 154.59185540000112 10.29 143.92573330000016 11.38 186.22283149999734 9.58 173.01936170000167 7.959 157.64483159999787 10.221 140.76743809999894 9.076 225.10541389999753 10.619 197.73713039999765 12.052 201.77513839999648 8.734 158.56828679999998 10.508 139.66904549999848 10.323 158.83501699999994 9.551 175.57608260000188 9.449 210.18815909999742 8.671 204.9726559000014 10.264 185.91128680000156 9.544 159.8281455999999 11.17 197.59814489999832 9.605 216.50272020000162 10.252 164.19357880000055 7.948 157.3434824999997 9.092 222.4248194999998 7.802)
Error minima by case: (2.9997 6 7.7829 4 11.566 4 23.3549 4 4.1577 9 15.0 4 0.6042 6 3.0 4 8.3127 7 37.0 4 80.0 4 62.9104 5 37.5076 5 0.6613 3 32.2119 4 31.0 4 67.0 5 0.3653 4 69.0076 5 13.6791 3 1.8684 8 19.087 4 19.1469 4 26.9818 7 32.7007 4)
Average genome size in population (length): 69.953
Average program size in population (points): 70.953
Average percent parens in population: 0.014
Minimum age in population: 188.3913743855231
Maximum age in population: 193.0314213659964
Average age in population: 190.7860689308912
Median age in population: 190.8575023014644
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.168
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 232879291
--- Timings ---
Current time: 1529616491505 milliseconds
Total Time:         471.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.4 seconds, 39.3%
Fitness Testing:    222.5 seconds, 47.2%
Report:              63.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction print_float} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction float_div} {:instruction tagged_200} {:instruction float_cos} {:instruction integer_dup} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_shove} {:instruction print_float} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_dec} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos print_float integer_swap integer_dup_times integer_dup_times float_yank integer_dup float_div tagged_200 float_cos integer_dup in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_shove print_float 57 57 integer_add float_sub float_mod float_dup float_swap 57 float_min float_yank 57 57 integer_add float_sub float_sin float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_fromfloat integer_rot integer_dec print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4444.800712799997
Median total errors in population: 1406.8618000000001
Error averages by case: (131.09257090000017 8.238 123.44178610000156 10.359 170.3919841999983 11.078 145.06502530000108 10.245 135.44807579999923 11.29 178.2560605999986 9.54 164.15557140000155 7.867 155.1943436999982 10.195 133.05349589999835 9.017 222.98962309999757 10.639 188.69529329999853 12.02 200.75816819999687 8.709 149.11076399999925 10.481 130.47160919999888 10.29 149.50938980000092 9.522 166.21114570000069 9.435 201.12461669999826 8.657 196.53536370000054 10.222 176.86398630000065 9.513 158.70890149999903 11.145 189.10116919999834 9.519 208.46706500000164 10.17 162.85719520000137 7.907 150.04381219999868 9.032 214.38369579999977 7.78)
Error minima by case: (2.9647 6 7.7835 4 16.5742 5 23.3549 5 4.1577 9 14.0 5 0.6042 6 4.0 5 8.2777 7 38.0 6 79.0 6 62.9102 6 37.5082 6 0.6613 4 32.2119 4 30.0 4 66.0 6 0.3653 5 69.0082 6 13.6789 5 6.8689 8 25.3408 5 19.1467 4 26.9468 8 32.7007 5)
Average genome size in population (length): 70.084
Average program size in population (points): 71.084
Average percent parens in population: 0.014
Minimum age in population: 189.3913743855231
Maximum age in population: 194.3532719971833
Average age in population: 192.1783012416914
Median age in population: 192.2417498412557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.167
Error (vector) diversity:			 0.224
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 234633716
--- Timings ---
Current time: 1529616495003 milliseconds
Total Time:         474.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.7 seconds, 39.3%
Fitness Testing:    224.2 seconds, 47.2%
Report:              63.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206115  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_min} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_min} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_mod} {:instruction float_dup} {:instruction integer_mult} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_swap} {:instruction float_sin} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction 57} {:instruction integer_rot} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction integer_inc} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction 98} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_yank float_min integer_dec float_dup integer_fromfloat integer_swap float_min float_cos integer_dup integer_dup float_mod float_dup integer_mult in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_float print_integer float_max integer_swap float_sin 56 57 integer_add float_add integer_yank integer_yank 57 integer_rot float_mult 57 57 integer_add integer_inc float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult 98 integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4142.516896899997
Median total errors in population: 1406.8618000000001
Error averages by case: (121.29359040000026 8.159 113.75643740000162 10.328 162.62190219999826 11.077 136.0872905000011 10.254 119.73425119999902 11.284 163.39136489999873 9.536 149.45041570000154 7.832 140.13865559999797 10.185 123.9540486999981 8.944 207.19396209999752 10.602 180.05921439999835 11.988 183.28212819999675 8.634 140.02458659999868 10.45 116.89624309999884 10.289 140.38795190000135 9.493 157.48887190000113 9.401 192.79842519999787 8.591 182.55916270000066 10.186 167.96455070000096 9.464 140.30038569999817 11.089 174.95022289999855 9.518 200.53477480000168 10.173 144.77778150000196 7.841 140.2561948999983 8.976 200.5924836999998 7.728)
Error minima by case: (2.9191 6 7.2166 6 8.2666 7 10.7372 7 4.1577 9 40.2497 7 0.6042 6 15.457 7 8.2777 7 90.6911 7 20.9823 6 62.9104 7 23.5081 7 0.4316 6 1.8802 6 2.3859 6 35.4627 6 1.4135 7 7.2677 6 13.6791 7 1.8684 8 3.0051 6 19.1469 6 26.9468 8 33.9625 6)
Average genome size in population (length): 69.704
Average program size in population (points): 70.704
Average percent parens in population: 0.014
Minimum age in population: 190.6552738843105
Maximum age in population: 196.0802450684793
Average age in population: 193.5932208884846
Median age in population: 193.613158174058
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.146
Error (vector) diversity:			 0.203
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 236378741
--- Timings ---
Current time: 1529616498706 milliseconds
Total Time:         478.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.1 seconds, 39.3%
Fitness Testing:    226.0 seconds, 47.2%
Report:              64.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_sub} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 54} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_sub} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer integer_div integer_flush float_max float_max integer_swap integer_dup_items 57 57 integer_add float_sub float_mod float_dup 57 float_sub float_yank in1 integer_inc integer_swap 57 54 float_inc integer_inc integer_fromfloat 57 float_sub float_mult float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4376.830616499996
Median total errors in population: 1406.8618000000001
Error averages by case: (128.18469880000023 8.202 121.60478610000172 10.365 165.70662809999806 11.082 143.47230720000115 10.262 134.31127289999958 11.266 177.3087083999978 9.533 163.8105111000016 7.843 149.51162529999786 10.165 128.93716929999815 8.955 215.6506534999975 10.588 187.9248683999982 12.023 193.4035058999965 8.643 147.0816212999998 10.483 132.48378479999886 10.29 148.1301856000003 9.478 164.7915066000013 9.411 200.47216619999793 8.609 196.3074667000008 10.194 175.73740210000128 9.521 151.07945469999953 11.109 188.8356569999984 9.487 204.65287550000178 10.198 155.65246670000096 7.909 145.40312219999922 8.951 214.0571720999998 7.752)
Error minima by case: (2.9077 6 7.7829 5 16.9224 6 19.4532 6 4.1237 9 39.0203 5 0.6042 6 15.4565 5 8.2272 7 90.6905 5 48.8149 5 62.9099 6 0.6003 6 0.6607 4 21.7881 6 22.2937 6 50.2953 6 0.3654 5 43.1003 6 13.6786 4 7.3023 8 24.4102 6 19.1463 5 26.8963 8 32.7001 5)
Average genome size in population (length): 69.87
Average program size in population (points): 70.87
Average percent parens in population: 0.014
Minimum age in population: 191.6552738843105
Maximum age in population: 197.2160953888634
Average age in population: 195.0485613335314
Median age in population: 195.1104687178135
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.164
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 238127766
--- Timings ---
Current time: 1529616502211 milliseconds
Total Time:         482.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       189.5 seconds, 39.3%
Fitness Testing:    227.6 seconds, 47.2%
Report:              65.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206113  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_cos} {:instruction integer_dup} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction print_float} {:instruction print_float} {:instruction float_mult} {:instruction float_max} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction integer_max} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_sub} {:instruction float_sin} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 54} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_sub} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_div integer_inc integer_sub float_cos integer_dup float_flush integer_dup_times integer_yank in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot print_float print_float float_mult float_max integer_yank integer_min integer_yank 56 57 integer_add integer_max float_mod float_dup 57 float_sub float_sin in1 integer_inc integer_swap 57 54 float_inc integer_inc integer_fromfloat 57 float_sub float_mult float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times in1 float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4254.690746699997
Median total errors in population: 1406.8618000000001
Error averages by case: (125.05498790000027 8.152 116.4183610000016 10.325 166.25786949999832 11.06 138.5197387000011 10.254 125.65225059999898 11.237 168.93090589999827 9.526 156.1823467000017 7.774 145.974976299998 10.173 128.18878299999804 8.887 211.8664013999974 10.595 182.9998231999983 12.018 189.05448079999647 8.629 142.67932119999884 10.467 121.80353309999877 10.311 142.89448990000108 9.488 160.3884737000014 9.383 195.66860169999825 8.589 188.97498960000092 10.166 170.94030910000077 9.464 146.43862619999896 11.121 181.5222862999983 9.436 204.56294130000165 10.153 150.91134680000133 7.84 144.26668649999885 8.886 206.8802162999999 7.724)
Error minima by case: (2.9688 6 7.7834 7 16.9224 8 23.3549 8 4.1572 10 39.0209 8 0.6042 6 15.4569 7 8.2864 7 32.6911 8 82.7228 7 34.9104 7 37.5082 8 0.6613 7 32.2119 7 31.7063 7 97.2032 7 0.3653 8 69.0082 7 1.3209 8 7.3023 8 24.0051 7 16.8531 6 26.9555 7 32.7007 6)
Average genome size in population (length): 69.557
Average program size in population (points): 70.557
Average percent parens in population: 0.014
Minimum age in population: 193.301855056556
Maximum age in population: 198.7718098932952
Average age in population: 196.4250322318546
Median age in population: 196.4466265315229
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.156
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 239868666
--- Timings ---
Current time: 1529616505710 milliseconds
Total Time:         485.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.8 seconds, 39.3%
Fitness Testing:    229.3 seconds, 47.2%
Report:              65.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction integer_swap} {:instruction float_max} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_swap} {:instruction float_pop} {:instruction float_cos} {:instruction float_shove} {:instruction integer_sub} {:instruction in2} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction print_integer} {:instruction in1} {:instruction tag_float_219} {:instruction integer_max} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_yank} {:instruction integer_add} {:instruction float_sub} {:instruction integer_rot} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction integer_rot} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_1220} {:instruction float_flush} {:instruction print_integer})
Best program: (float_frominteger integer_dup_items float_dec float_div integer_swap float_max integer_inc integer_swap integer_div integer_swap float_pop float_cos float_shove integer_sub in2 float_mod float_frominteger float_dec integer_stackdepth float_sub 92 print_float print_integer print_integer 7 integer_dec print_float print_integer float_max print_integer in1 tag_float_219 integer_max float_mult 57 57 integer_add float_sub float_yank integer_add float_sub integer_rot float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 integer_rot float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_1220 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4305.763378299997
Median total errors in population: 1406.8618000000001
Error averages by case: (126.50533970000022 8.192 117.35937050000122 10.392 165.17003629999815 11.128 138.7806138000012 10.288 130.49943349999936 11.323 172.78874449999827 9.564 159.91132730000174 7.849 149.37985629999787 10.209 127.38028889999812 8.969 216.85128299999755 10.635 183.1530055999984 12.061 193.28756619999655 8.679 142.5105476999989 10.505 127.35980619999927 10.338 144.01986320000108 9.541 161.15572870000136 9.432 195.8802337999983 8.643 191.8705383000003 10.258 171.1024607000009 9.52 150.71370619999914 11.169 184.33098879999832 9.555 204.00311120000174 10.234 155.12823360000104 7.896 143.8105868999987 8.996 209.66370739999982 7.771)
Error minima by case: (2.9735 6 7.7828 6 17.511 7 19.4532 6 4.1577 10 25.3533 6 0.6042 6 15.457 6 8.2818 7 90.6911 7 82.7222 7 62.9104 7 37.5076 7 1.2366 5 29.1549 6 28.6493 6 97.2026 6 0.7817 7 69.0076 6 13.6791 8 7.8134 8 25.032 8 19.1469 6 26.9509 8 28.8154 6)
Average genome size in population (length): 69.955
Average program size in population (points): 70.955
Average percent parens in population: 0.014
Minimum age in population: 194.301855056556
Maximum age in population: 200.2763939589961
Average age in population: 197.8110933658038
Median age in population: 197.8188768416669
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.166
Error (vector) diversity:			 0.234
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 241619591
--- Timings ---
Current time: 1529616509256 milliseconds
Total Time:         489.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.2 seconds, 39.3%
Fitness Testing:    231.0 seconds, 47.2%
Report:              65.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206115  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_mult} {:instruction integer_sub} {:instruction in2} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction float_div} {:instruction integer_swap} {:instruction float_shove} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_dup} {:instruction float_dup} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_dec} {:instruction print_float} {:instruction print_integer} {:instruction integer_swap} {:instruction float_sin} {:instruction print_float} {:instruction float_dup} {:instruction float_max} {:instruction integer_swap} {:instruction float_mult} {:instruction integer_yank} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_inc} {:instruction float_sub} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 55} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction float_flush} {:instruction print_integer})
Best program: (float_tan float_cos integer_dup_items float_mult integer_sub in2 integer_dup_times integer_dup_times integer_dup_items integer_swap integer_swap float_cos float_div integer_swap float_shove float_sub integer_swap integer_pop float_cos integer_dup float_dup in2 float_rot float_frominteger float_dec integer_stackdepth integer_yank 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float integer_dec print_float print_integer integer_swap float_sin print_float float_dup float_max integer_swap float_mult integer_yank 56 57 integer_add integer_max float_inc float_dup integer_inc float_sub float_yank in1 integer_inc integer_swap 57 55 float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 float_flush float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4341.445533399998
Median total errors in population: 1406.8618000000001
Error averages by case: (134.1931178 8.213 119.09288650000137 10.426 173.379860299998 11.143 141.25922230000117 10.285 126.86275419999923 11.332 170.1950165999989 9.567 156.14351390000172 7.9 150.81763769999773 10.26 135.23340049999854 9.004 217.64391759999742 10.644 184.85015879999864 12.064 194.13197929999617 8.68 145.145058599999 10.525 123.40103359999901 10.339 145.68172440000086 9.587 162.54207360000066 9.449 197.3876545999982 8.661 188.8007960000004 10.276 172.93984680000025 9.547 151.62331619999892 11.175 181.2905194999983 9.575 210.62464020000195 10.237 155.92264400000155 7.932 151.77573329999916 9.036 206.87602709999982 7.774)
Error minima by case: (1.9997 6 6.7835 7 16.509 6 10.7372 7 4.1315 9 24.1497 6 0.6042 6 15.4569 6 7.3127 7 90.691 7 71.7227 6 62.9103 7 23.5081 8 0.1793 5 1.8802 8 2.3859 6 73.2031 6 0.3653 6 66.0081 7 13.679 7 6.8104 8 24.03 7 19.1468 6 25.9818 8 17.8295 6)
Average genome size in population (length): 69.456
Average program size in population (points): 70.456
Average percent parens in population: 0.014
Minimum age in population: 195.9287482983313
Maximum age in population: 201.2630367208963
Average age in population: 199.256922246619
Median age in population: 199.3512308443316
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.16
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 243357541
--- Timings ---
Current time: 1529616512955 milliseconds
Total Time:         492.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       193.5 seconds, 39.3%
Fitness Testing:    232.7 seconds, 47.2%
Report:              66.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_div} {:instruction integer_swap} {:instruction float_max} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_shove} {:instruction integer_sub} {:instruction in2} {:instruction float_div} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction print_integer} {:instruction in1} {:instruction tag_float_219} {:instruction integer_max} {:instruction float_mult} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_swap} {:instruction integer_add} {:instruction float_sub} {:instruction integer_rot} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_1207} {:instruction float_flush} {:instruction print_integer})
Best program: (float_frominteger integer_dup_items integer_dup_items float_div integer_swap float_max integer_inc integer_swap integer_div integer_swap float_dup_items float_cos float_shove integer_sub in2 float_div float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_float print_integer float_max print_integer in1 tag_float_219 integer_max float_mult 57 57 integer_add float_sub float_swap integer_add float_sub integer_rot float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_1207 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4046.3182560999967
Median total errors in population: 1406.8618000000001
Error averages by case: (114.66471020000026 8.082 107.51156000000098 10.308 156.1718511999984 11.041 129.55575280000122 10.231 119.87660299999958 11.232 163.3666205999992 9.473 150.65941700000158 7.717 135.66075979999806 10.151 117.3059831999986 8.834 202.85472159999742 10.537 174.47297279999893 12.004 180.08310279999682 8.57 133.8662141999983 10.413 116.57241359999941 10.258 133.93250740000158 9.461 151.34294620000048 9.34 187.11043269999857 8.549 183.34625910000034 10.188 161.96017790000002 9.41 136.90823799999828 11.086 175.8542022999984 9.445 195.21818800000153 10.146 141.31520180000192 7.776 134.7140919999983 8.859 201.22132789999984 7.661)
Error minima by case: (1.9997 6 6.7835 6 0.566 6 20.2979 7 4.1577 9 0.113 5 0.6042 6 15.4568 5 7.3127 7 90.6908 6 81.7228 5 62.9102 7 36.5082 7 0.6607 4 29.1549 7 28.6493 6 96.2032 6 0.3653 6 68.0082 7 13.6789 7 6.8689 8 0.087 7 19.1466 6 25.9818 8 0.7928 6)
Average genome size in population (length): 69.749
Average program size in population (points): 70.749
Average percent parens in population: 0.014
Minimum age in population: 198.0116503113824
Maximum age in population: 202.6263481059302
Average age in population: 200.6670661535773
Median age in population: 200.7283106543221
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.151
Error (vector) diversity:			 0.213
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 245102691
--- Timings ---
Current time: 1529616516545 milliseconds
Total Time:         496.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.0 seconds, 39.3%
Fitness Testing:    234.4 seconds, 47.2%
Report:              66.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206114  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_add} {:instruction print_integer} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_mod} {:instruction float_mod} {:instruction in2} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction integer_sub} {:instruction float_rot} {:instruction print_integer} {:instruction float_max} {:instruction integer_yank} {:instruction float_sin} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_dup} {:instruction 57} {:instruction float_swap} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction integer_inc} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_1245} {:instruction float_flush} {:instruction print_integer})
Best program: (float_tan float_mod integer_dup_times float_add print_integer integer_yankdup integer_swap float_mod float_mod in2 float_mult float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_rot integer_sub float_rot print_integer float_max integer_yank float_sin 57 57 integer_add float_dup 57 float_swap float_yank in1 integer_inc integer_swap 57 57 integer_inc 57 float_min float_yank float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_1245 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4434.6857840999955
Median total errors in population: 1406.8618000000001
Error averages by case: (128.33127070000026 8.22 127.16964930000186 10.313 169.33331719999853 11.082 149.52319090000103 10.242 136.22489839999926 11.345 179.02847629999818 9.517 165.29381210000162 7.888 147.82254499999803 10.182 130.58023389999803 8.958 216.40453139999755 10.567 192.443077399998 12.044 192.83693489999686 8.642 153.26478419999938 10.441 131.44704509999875 10.265 153.74539470000045 9.483 170.6034873000017 9.4 204.98523179999776 8.563 197.81697580000082 10.202 180.5555600000012 9.466 150.26593679999928 11.127 190.36896009999845 9.552 206.95718510000162 10.198 154.60173540000116 7.838 147.2996143999991 8.981 215.50793589999986 7.758)
Error minima by case: (2.9738 6 7.7835 5 16.9224 6 22.3549 6 4.1578 10 13.887 6 0.6042 6 4.5491 6 8.2872 7 38.7831 6 47.8149 6 62.9098 7 37.5082 6 0.6613 4 32.2119 5 25.2937 5 49.2953 5 0.3653 6 42.1003 5 13.6785 7 7.3023 8 24.4102 7 19.1463 6 26.9563 8 32.7007 6)
Average genome size in population (length): 69.629
Average program size in population (points): 70.629
Average percent parens in population: 0.014
Minimum age in population: 199.2420803862357
Maximum age in population: 203.9159087132987
Average age in population: 202.0308356255086
Median age in population: 202.075765307124
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.154
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 246844491
--- Timings ---
Current time: 1529616520183 milliseconds
Total Time:         500.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.4 seconds, 39.3%
Fitness Testing:    236.2 seconds, 47.2%
Report:              67.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 59994.68839999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206111  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_mod} {:instruction float_yank} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction tagged_200} {:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction float_max} {:instruction float_sin} {:instruction float_cos} {:instruction 57} {:instruction 54} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction print_float} {:instruction print_integer})
Best program: (float_tan float_mod integer_dup_times integer_dup_items integer_dup integer_rot integer_dup_times integer_shove float_mod float_yank integer_dup_items integer_dup_items float_dec tagged_200 float_cos integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer float_max float_max float_sin float_cos 57 54 integer_add float_sub float_mod float_dup 57 float_min integer_dup_items in1 integer_inc integer_swap 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_977 print_float print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4554.450219299996
Median total errors in population: 1406.8618000000001
Error averages by case: (136.2827505999999 8.153 129.9186349000018 10.337 176.87951559999837 11.067 152.3695705000011 10.239 140.07666969999954 11.281 182.70220459999823 9.505 168.97893940000165 7.838 155.52709889999804 10.204 138.5213390999985 8.941 222.27949879999755 10.575 195.05175829999837 12.031 198.92714049999648 8.656 156.0237586999995 10.483 136.80899169999878 10.29 156.54831520000062 9.5 173.33354840000158 9.405 207.5228569999979 8.606 201.3276200000007 10.219 183.22948250000093 9.486 156.78673539999897 11.126 193.90903359999837 9.488 214.15942300000177 10.161 161.09311680000155 7.864 155.14523109999917 8.937 218.9309849999999 7.724)
Error minima by case: (2.9142 6 7.7834 4 11.566 5 23.3549 5 4.1577 10 25.3533 5 0.6042 6 15.4569 5 8.2272 7 0.691 6 48.8149 5 27.0897 6 0.6003 5 1.2366 4 24.7881 4 25.2937 4 50.2953 5 0.7837 5 43.1003 5 13.679 5 1.8684 8 19.087 5 19.1468 4 26.8963 7 5.7006 5)
Average genome size in population (length): 69.506
Average program size in population (points): 70.506
Average percent parens in population: 0.014
Minimum age in population: 200.6369995375273
Maximum age in population: 205.4896580135985
Average age in population: 203.450766068786
Median age in population: 203.4909070885088
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.165
Error (vector) diversity:			 0.229
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 248583416
--- Timings ---
Current time: 1529616523852 milliseconds
Total Time:         503.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.7 seconds, 39.3%
Fitness Testing:    238.0 seconds, 47.2%
Report:              67.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206115  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction integer_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_mod} {:instruction float_swap} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_div} {:instruction integer_swap} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_sub} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction print_float} {:instruction print_integer} {:instruction float_max} {:instruction integer_dec} {:instruction print_integer} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_dup} {:instruction float_dec} {:instruction float_mult} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 56} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_sub} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_times float_dec float_div integer_add float_cos integer_dup float_mod float_swap float_dec float_div float_div integer_inc integer_swap float_div integer_swap float_add float_cos integer_dup integer_sub in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec integer_fromfloat print_float print_integer float_max integer_dec print_integer 57 57 integer_add float_sub float_dup float_dec float_mult in1 integer_inc integer_swap 57 56 float_inc integer_inc integer_fromfloat 57 float_sub integer_inc integer_rot float_sub float_mult integer_shove integer_dup_times integer_dup_times float_shove float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4414.738906199996
Median total errors in population: 1406.8618000000001
Error averages by case: (129.31888870000023 8.221 126.11082190000153 10.314 168.6103089999982 11.076 147.04346460000102 10.213 137.05352109999956 11.279 179.3151194999978 9.528 167.05010760000158 7.855 146.8980432999978 10.176 131.6821720999983 8.953 216.55387419999772 10.582 190.4995620999982 12.006 192.17093819999675 8.624 150.15127889999954 10.447 127.12354299999909 10.273 151.26216310000046 9.491 168.02826110000146 9.399 202.9708424999981 8.597 198.16542610000081 10.19 178.63805710000125 9.484 149.73280409999902 11.086 190.79028209999856 9.542 206.0892374000017 10.157 154.0731336000011 7.876 147.46245489999922 8.958 215.86159999999978 7.756)
Error minima by case: (2.9138 6 7.2166 7 16.7252 8 10.7372 8 4.1577 9 31.4759 8 0.6042 6 15.457 8 8.2272 7 58.1942 8 71.7227 7 60.4136 7 23.5081 8 0.4316 7 1.8802 7 2.3859 7 73.2031 7 0.2675 8 66.0081 7 13.6791 8 7.1817 8 24.4102 7 8.65 6 25.4787 7 32.7007 6)
Average genome size in population (length): 69.588
Average program size in population (points): 70.588
Average percent parens in population: 0.014
Minimum age in population: 202.0698481917694
Maximum age in population: 207.117246720727
Average age in population: 204.8828483012777
Median age in population: 204.9077285194047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.165
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 250324441
--- Timings ---
Current time: 1529616527398 milliseconds
Total Time:         507.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.1 seconds, 39.2%
Fitness Testing:    239.7 seconds, 47.2%
Report:              68.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206171  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -3.5681511393741374} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_dup} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_shove} {:instruction print_float} {:instruction 57} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_mod} {:instruction float_dup} {:instruction float_swap} {:instruction integer_sub} {:instruction float_max} {:instruction float_pop} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction float_yank} {:instruction integer_add} {:instruction float_sub} {:instruction integer_rot} {:instruction float_dup} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction integer_rot} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_1220} {:instruction float_flush} {:instruction print_integer})
Best program: (-3.5681511393741374 integer_dup float_cos integer_dup integer_fromfloat integer_pop float_cos integer_dup in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_shove print_float 57 57 integer_add float_sub float_mod float_dup float_swap integer_sub float_max float_pop 57 integer_add float_sub float_yank integer_add float_sub integer_rot float_dup 57 float_min float_yank in1 integer_inc integer_swap 57 integer_rot float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_sub float_rot integer_yank tagged_1220 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4338.661954999995
Median total errors in population: 1406.8618000000001
Error averages by case: (128.73626420000025 8.207 122.26502190000157 10.375 167.1861252999984 11.137 143.95358020000114 10.288 128.98658259999922 11.321 171.8820233999987 9.582 158.0402380000016 7.863 147.32860699999813 10.253 129.74209029999835 8.975 215.06133209999754 10.627 188.02735959999848 12.088 192.69205509999676 8.72 148.38282459999908 10.511 125.77357609999913 10.32 148.28891970000075 9.547 164.92129860000117 9.452 200.44097879999825 8.633 191.3050697000004 10.248 176.17376490000103 9.558 149.3744780999989 11.223 183.89747049999838 9.543 204.35411140000156 10.227 153.55160330000123 7.926 145.82625659999874 8.974 209.08232299999986 7.79)
Error minima by case: (2.9077 6 0.8482 7 17.4733 8 2.6723 7 4.1577 10 1.0764 7 0.6042 6 4.5491 7 4.7428 7 38.7831 8 79.7876 8 62.9103 8 31.573 8 0.3114 6 6.1847 8 5.679 8 68.0 7 0.3654 8 69.0082 8 13.679 9 7.7758 8 24.9943 8 19.1468 6 7.0737 8 5.2438 6)
Average genome size in population (length): 69.246
Average program size in population (points): 70.246
Average percent parens in population: 0.014
Minimum age in population: 203.3157693734749
Maximum age in population: 208.5448694568599
Average age in population: 206.2878910754882
Median age in population: 206.3303188766033
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.155
Error (vector) diversity:			 0.204
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 252056816
--- Timings ---
Current time: 1529616530964 milliseconds
Total Time:         510.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.5 seconds, 39.3%
Fitness Testing:    241.3 seconds, 47.2%
Report:              68.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 59993.68829999994
Test mean error for best: 29.99684
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.09206113  
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_shove} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction float_max} {:instruction integer_sub} {:instruction float_mult} {:instruction print_float} {:instruction float_shove} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_mod} {:instruction integer_add} {:instruction float_mult} {:instruction 57} {:instruction integer_add} {:instruction float_sub} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction integer_max} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction float_sub} {:instruction float_sin} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction 57} {:instruction 54} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction float_sub} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_items integer_dup_items float_dec integer_shove float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec float_max integer_sub float_mult print_float float_shove print_integer float_rot integer_sub integer_stackdepth integer_mult integer_mod integer_add float_mult 57 integer_add float_sub 56 57 integer_add integer_max float_mod float_dup 57 float_sub float_sin in1 integer_inc integer_swap 57 54 float_inc integer_inc integer_fromfloat 57 float_sub float_mult float_inc integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times in1 float_rot integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 7 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1406.8618000000001
Mean: 28.137236
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4394.229580699995
Median total errors in population: 1406.8618000000001
Error averages by case: (132.84029460000002 8.098 120.36313470000105 10.301 171.95054479999843 11.045 143.08380000000108 10.199 131.7486942999994 11.23 174.77373919999843 9.481 161.2062587000016 7.755 152.30099299999827 10.153 132.9891142999989 8.855 220.95163289999763 10.56 186.3427674999987 12.024 198.36063759999658 8.6 146.88464379999917 10.435 125.0711652999993 10.276 147.33574740000043 9.484 164.33476490000106 9.358 198.96565049999856 8.574 193.73206160000018 10.163 174.3953298000007 9.443 156.11103089999898 11.111 186.26248529999845 9.454 210.40094710000167 10.149 160.5188225000015 7.808 150.6793114999992 8.86 211.5150084999998 7.695)
Error minima by case: (2.9077 6 7.7826 9 15.509 9 19.8082 9 4.1577 10 39.0208 8 0.6042 6 15.457 8 8.2207 7 90.6911 9 82.722 8 62.9104 7 37.5074 9 0.6612 7 28.4749 8 28.0963 8 97.2024 7 0.3653 8 69.0074 8 13.6791 9 5.8484 8 23.03 8 19.1469 6 26.8898 7 32.7006 6)
Average genome size in population (length): 68.975
Average program size in population (points): 69.975
Average percent parens in population: 0.014
Minimum age in population: 204.9118628724538
Maximum age in population: 209.5671559708856
Average age in population: 207.6530213109522
Median age in population: 207.702686653574
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.167
Error (vector) diversity:			 0.216
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 253782041
--- Timings ---
Current time: 1529616534486 milliseconds
Total Time:         514.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.9 seconds, 39.2%
Fitness Testing:    243.0 seconds, 47.2%
Report:              69.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_swap integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4582.081919999996
Median total errors in population: 1406.8618000000001
Error averages by case: (138.82715049999962 8.211 127.17690270000156 10.36 179.27553939999825 11.095 149.44324770000108 10.26 141.78104399999987 11.303 184.0314569999981 9.546 170.7148717000017 7.88 160.332188999998 10.207 140.84310429999903 8.983 226.93160849999748 10.619 193.3931088999982 12.017 203.65437249999653 8.681 153.54541669999918 10.498 137.5782101999989 10.305 153.9114837000006 9.509 170.71036000000126 9.415 205.895892999998 8.64 202.57839020000085 10.188 181.4886367000009 9.518 161.84254869999936 11.13 195.22748059999836 9.534 216.42865120000175 10.197 166.20921790000105 7.891 157.34993429999923 9.028 220.12310059999993 7.773)
Error minima by case: (2.9688 6 7.7834 6 16.566 7 22.3549 7 4.1578 10 21.7954 7 0.6042 6 15.4569 7 8.2864 7 90.691 7 82.7227 6 62.9103 7 37.5081 7 1.3373 6 31.2119 6 30.7063 6 97.2031 6 0.3936 7 69.0081 6 13.679 7 6.8689 8 24.087 6 19.1468 6 26.9555 7 28.1156 6)
Average genome size in population (length): 69.108
Average program size in population (points): 70.108
Average percent parens in population: 0.014
Minimum age in population: 206.1321352782701
Maximum age in population: 210.9916186676512
Average age in population: 208.9743772401186
Median age in population: 209.0134093042747
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.173
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 255510891
--- Timings ---
Current time: 1529616538028 milliseconds
Total Time:         517.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.2 seconds, 39.2%
Fitness Testing:    244.7 seconds, 47.3%
Report:              69.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_swap integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4130.325682799997
Median total errors in population: 1406.8618000000001
Error averages by case: (116.81039550000021 8.138 112.87140310000126 10.303 157.76368169999847 11.041 134.73531860000116 10.233 123.72470129999927 11.249 166.95275029999868 9.517 153.32899810000163 7.735 139.633352499998 10.143 118.14926439999863 8.864 206.5715883999975 10.565 178.85531709999836 12.043 182.62569879999666 8.571 139.22378189999847 10.411 120.00409689999917 10.276 139.49411810000137 9.464 156.5665754000007 9.37 191.5549547999981 8.538 186.1296153000005 10.179 167.28528150000042 9.446 139.66808029999828 11.094 178.59536559999836 9.44 195.6339067000017 10.119 144.18486920000203 7.788 134.90526469999807 8.867 203.9623025999998 7.701)
Error minima by case: (1.4218 6 7.7834 9 18.658 9 15.7372 9 4.1577 9 0.0208 7 0.6042 6 15.457 8 6.2652 7 90.6911 9 66.7227 8 62.9104 7 18.5081 9 0.6613 8 6.8802 8 7.3859 8 68.2031 7 0.3653 8 61.0081 8 13.6791 9 1.8684 8 26.179 8 19.1469 6 8.5961 8 3.7214 6)
Average genome size in population (length): 68.942
Average program size in population (points): 69.942
Average percent parens in population: 0.014
Minimum age in population: 207.9248533816246
Maximum age in population: 212.3297304409584
Average age in population: 210.4002217155472
Median age in population: 210.4711662469869
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.165
Error (vector) diversity:			 0.225
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 257235716
--- Timings ---
Current time: 1529616541612 milliseconds
Total Time:         521.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.6 seconds, 39.2%
Fitness Testing:    246.4 seconds, 47.3%
Report:              70.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_swap integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4546.940037999993
Median total errors in population: 1406.8618000000001
Error averages by case: (142.47279399999937 8.227 130.31284280000133 10.394 180.60603749999856 11.096 153.0499707000011 10.254 134.23556209999964 11.306 177.0925893999981 9.543 164.4281318000016 7.848 156.91244829999803 10.214 144.0341326999992 9.018 222.26267459999752 10.625 195.98259699999826 12.038 199.0118168999967 8.676 155.94379739999982 10.512 132.27508949999907 10.314 156.34840159999985 9.563 173.03032200000197 9.443 208.3745814999981 8.647 195.75489310000086 10.225 183.29608950000116 9.551 156.83665869999948 11.157 188.31609089999841 9.54 218.60619220000171 10.205 161.90863390000095 7.92 159.18149969999976 9.037 213.5581901999998 7.755)
Error minima by case: (2.9191 6 7.7834 8 11.566 6 22.3549 9 4.1577 9 39.0209 8 0.6042 6 15.4564 8 8.2322 7 90.6905 9 82.7227 6 62.9098 7 37.5081 9 0.4316 8 28.3899 8 28.5526 5 97.2031 6 0.3653 8 69.0081 8 13.6785 9 1.8684 8 19.087 7 19.1463 6 26.9013 8 32.7007 6)
Average genome size in population (length): 69.019
Average program size in population (points): 70.019
Average percent parens in population: 0.014
Minimum age in population: 209.1383717443221
Maximum age in population: 213.6068865670721
Average age in population: 211.8254893397671
Median age in population: 211.8664650406697
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.163
Error (vector) diversity:			 0.22
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 258962091
--- Timings ---
Current time: 1529616545305 milliseconds
Total Time:         525.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.0 seconds, 39.2%
Fitness Testing:    248.1 seconds, 47.2%
Report:              70.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction -57.91518516467824} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer integer_div integer_flush float_max float_max integer_yank float_mult -57.91518516467824 float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4445.623503499997
Median total errors in population: 1406.8618000000001
Error averages by case: (129.71243980000028 8.27 123.88539780000163 10.359 168.1985799999986 11.108 144.63817000000117 10.249 137.95646849999952 11.335 179.81969949999814 9.548 167.1531786000016 7.945 154.57979439999806 10.214 132.20070659999817 9.052 222.09365179999767 10.597 189.44190339999827 12.071 199.1096281999966 8.712 148.84027619999944 10.494 133.6963809999988 10.299 149.9092010000002 9.556 166.576553300002 9.441 201.85160509999798 8.631 198.6092238000007 10.262 177.52097740000096 9.544 156.15665369999974 11.136 191.2122986999983 9.579 205.1001994000017 10.206 161.14054570000027 7.916 147.29895399999918 9.093 215.5090155999998 7.795)
Error minima by case: (2.9688 6 2.3131 4 16.509 4 5.8336 4 4.1578 9 15.0 4 0.6042 6 3.0 4 8.2864 7 37.0 4 71.7228 4 62.9103 5 23.5082 5 0.4316 3 1.8802 4 2.3858 4 67.0 5 0.3653 4 66.0082 5 13.679 3 6.8104 8 24.03 4 19.1468 4 26.9555 7 32.7007 4)
Average genome size in population (length): 69.064
Average program size in population (points): 70.064
Average percent parens in population: 0.014
Minimum age in population: 210.7269721475922
Maximum age in population: 215.1518228860282
Average age in population: 213.2564715321916
Median age in population: 213.292407759937
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.179
Error (vector) diversity:			 0.242
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 260689716
--- Timings ---
Current time: 1529616548897 milliseconds
Total Time:         528.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.4 seconds, 39.2%
Fitness Testing:    249.8 seconds, 47.2%
Report:              71.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer integer_div integer_flush float_max float_max integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4250.982809599994
Median total errors in population: 1406.8618000000001
Error averages by case: (130.80281740000024 8.137 115.85207460000142 10.368 168.75324129999842 11.108 139.30251640000117 10.287 123.09573389999956 11.323 167.9600920999987 9.575 154.0321089000017 7.885 143.7592689999981 10.208 129.82084569999833 8.97 211.57032149999748 10.593 182.4671871999986 12.077 188.0385932999967 8.701 143.24916329999866 10.458 119.72545869999935 10.317 143.53158960000118 9.523 160.3129881000011 9.427 194.95626949999848 8.623 187.7107541000005 10.253 170.6202672000004 9.526 144.2718859999985 11.211 180.2186977999983 9.544 206.01798410000148 10.223 148.50811700000193 7.895 147.59259829999883 8.985 205.80423459999977 7.791)
Error minima by case: (2.9206 6 7.7835 3 17.6939 4 23.3549 4 4.1577 10 38.3533 5 0.6042 6 15.4569 5 8.2777 7 90.691 5 48.8149 4 62.9103 6 0.6003 5 0.2366 4 24.7881 4 25.2937 4 50.2953 5 0.3042 5 43.1003 5 13.679 4 6.8684 8 24.8246 4 19.1468 5 26.9468 8 4.2072 5)
Average genome size in population (length): 69.321
Average program size in population (points): 70.321
Average percent parens in population: 0.014
Minimum age in population: 211.7269721475922
Maximum age in population: 216.7161767156128
Average age in population: 214.6468784872304
Median age in population: 214.6921607729833
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.169
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 262423716
--- Timings ---
Current time: 1529616552550 milliseconds
Total Time:         532.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.7 seconds, 39.2%
Fitness Testing:    251.5 seconds, 47.2%
Report:              72.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_sub} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer integer_div integer_flush float_max float_max integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add integer_sub float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4298.087903199995
Median total errors in population: 1406.8618000000001
Error averages by case: (131.0863548000002 8.071 120.7938722000014 10.328 163.91369049999858 11.064 142.20607420000107 10.253 131.54742959999916 11.314 172.5189301999984 9.535 159.48338160000142 7.88 144.1810539999982 10.167 127.71118479999848 9.035 210.8825476999977 10.574 187.9138602999984 12.035 185.66645499999706 8.681 146.4970911999991 10.462 126.15985599999904 10.265 147.48265010000088 9.485 165.18069950000105 9.418 200.2999188999983 8.61 189.88596380000035 10.192 175.1930585000008 9.503 142.9668450999985 11.163 182.47719329999853 9.536 202.24415920000146 10.164 147.99844470000164 7.895 142.6540910999986 9.026 208.68409689999987 7.803)
Error minima by case: (1.9997 5 6.0 3 16.5742 4 20.2314 4 4.1577 10 14.4823 4 0.6042 6 3.0 4 7.3127 7 37.0 4 80.0 3 62.9098 5 36.5082 4 0.6613 3 28.5417 4 28.6493 4 67.0 4 0.3653 4 68.0082 4 13.6785 3 6.8689 8 24.4102 4 19.1463 4 25.9818 8 17.4266 4)
Average genome size in population (length): 70.561
Average program size in population (points): 71.561
Average percent parens in population: 0.014
Minimum age in population: 213.4568638837181
Maximum age in population: 218.2307907358817
Average age in population: 216.1477846595937
Median age in population: 216.1900864018002
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.171
Error (vector) diversity:			 0.247
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 264188391
--- Timings ---
Current time: 1529616556214 milliseconds
Total Time:         536.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.1 seconds, 39.2%
Fitness Testing:    253.3 seconds, 47.2%
Report:              72.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_dec} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub float_dec print_integer integer_div integer_flush float_max float_max integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4321.904034299995
Median total errors in population: 1406.8618000000001
Error averages by case: (125.88725630000023 7.751 117.58983250000148 10.305 163.4777929999982 11.094 139.66942910000117 10.228 133.34053059999928 11.288 176.1470753999984 9.511 162.7377209000016 7.782 151.45509829999784 10.139 124.5930321999983 8.949 217.13420419999747 10.498 183.55509549999863 12.079 193.51502479999655 8.651 143.7292343999989 10.406 129.81758879999887 10.276 143.97504250000117 9.456 160.89174560000095 9.394 196.14141949999836 8.555 195.30571480000046 10.203 171.5826330000006 9.476 151.2568757999994 11.142 187.8328519999985 9.479 201.37542490000172 10.137 155.75464810000088 7.843 140.90417079999824 8.948 212.91659129999994 7.728)
Error minima by case: (2.9206 5 7.7829 8 16.4739 8 18.2128 8 4.0722 10 16.0 8 0.504 6 1.457 8 8.2336 7 28.2169 8 64.2472 8 25.9975 7 16.0326 9 2.76 7 9.3558 8 9.8615 8 65.7276 7 1.8188 8 58.5326 8 13.6791 8 6.7764 8 23.9949 8 19.1469 6 26.9027 8 14.7007 6)
Average genome size in population (length): 72.42
Average program size in population (points): 73.42
Average percent parens in population: 0.014
Minimum age in population: 215.2074343574629
Maximum age in population: 219.9808869915309
Average age in population: 217.6464117176298
Median age in population: 217.6951386228318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.169
Error (vector) diversity:			 0.239
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 265999216
--- Timings ---
Current time: 1529616559977 milliseconds
Total Time:         539.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.4 seconds, 39.2%
Fitness Testing:    255.1 seconds, 47.3%
Report:              73.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_swap integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4191.299158099997
Median total errors in population: 1406.8618000000001
Error averages by case: (117.02940020000025 7.643 114.0011818000013 10.303 160.25623609999843 11.119 136.46791490000106 10.231 125.7681169999994 11.285 169.00221489999856 9.511 155.69885410000148 7.748 144.92128419999824 10.136 120.87474039999843 8.905 211.4883094999976 10.513 180.1766984999984 12.091 187.50593109999687 8.638 140.24718639999853 10.392 121.80832849999923 10.296 140.76297350000112 9.437 157.95789380000113 9.391 192.94905959999835 8.511 188.3894677000007 10.187 168.07546180000062 9.454 144.679701599999 11.153 180.85490419999843 9.479 198.57255570000152 10.116 149.27896930000114 7.849 137.35062009999837 8.882 206.20315319999983 7.708)
Error minima by case: (2.9997 5 7.7829 5 1.5262 6 22.3549 5 0.1578 9 39.0208 6 0.6042 6 15.4569 5 8.3127 7 90.691 6 82.7223 4 62.9103 7 37.5077 6 0.6612 5 31.2119 6 30.7063 6 97.2027 5 0.3654 6 69.0077 6 13.679 5 7.3023 8 5.9948 5 19.1468 6 26.9818 8 32.7006 6)
Average genome size in population (length): 73.626
Average program size in population (points): 74.626
Average percent parens in population: 0.013
Minimum age in population: 216.6110998238046
Maximum age in population: 221.0287632120833
Average age in population: 219.0977051823439
Median age in population: 219.1489414489731
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 62
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.146
Error (vector) diversity:			 0.211
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 267839966
--- Timings ---
Current time: 1529616563980 milliseconds
Total Time:         543.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.8 seconds, 39.1%
Fitness Testing:    257.1 seconds, 47.3%
Report:              73.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer integer_div integer_flush float_max float_max integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3382.3297141999974
Median total errors in population: 1406.8618000000001
Error averages by case: (87.92920370000026 7.456 83.8017615000004 10.187 131.6352642999984 11.006 106.11034170000121 10.114 90.18453889999978 11.199 133.06565940000115 9.362 121.57605760000172 7.573 107.7486646999981 10.063 91.60940709999898 8.677 177.98839809999748 10.378 152.0077154000002 12.034 151.28783189999655 8.494 110.26595729999786 10.292 86.37595709999974 10.197 111.59755050000197 9.35 129.46581189999895 9.265 165.2817745999996 8.375 153.482237199999 10.065 139.40782439999865 9.311 106.67504699999776 11.065 145.6698010999983 9.325 170.36775960000165 9.998 111.4910233000028 7.625 107.74743789999792 8.686 171.90668799999983 7.553)
Error minima by case: (2.9997 5 7.7826 6 16.7252 7 19.4532 7 4.1577 10 29.1223 7 0.6042 6 9.7923 7 8.3127 7 90.6911 7 82.722 5 62.9104 8 37.5074 7 0.4316 5 32.2119 7 31.7063 7 97.2024 6 1.2929 7 69.0074 7 13.6791 6 7.1817 8 24.4102 6 19.1469 6 26.9818 8 23.6254 6)
Average genome size in population (length): 73.894
Average program size in population (points): 74.894
Average percent parens in population: 0.013
Minimum age in population: 218.2671995363075
Maximum age in population: 222.6740446907103
Average age in population: 220.489260386978
Median age in population: 220.5116818760338
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.143
Error (vector) diversity:			 0.203
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 269687366
--- Timings ---
Current time: 1529616567877 milliseconds
Total Time:         547.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.2 seconds, 39.1%
Fitness Testing:    259.1 seconds, 47.3%
Report:              74.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_max} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction tag_float_670} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 59} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_max print_float print_integer integer_div integer_flush float_max float_max integer_yank float_mult integer_yank float_div integer_yank float_dup 57 tag_float_670 float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 59 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4022.7598918999975
Median total errors in population: 1406.8618000000001
Error averages by case: (118.74696890000024 7.525 105.76008370000145 10.235 155.23385819999825 11.046 127.31862330000116 10.148 119.07959609999914 11.239 161.33021049999914 9.417 149.92300590000167 7.672 136.03643529999812 10.083 116.91207049999822 8.843 205.74589879999746 10.44 172.31732439999934 12.032 180.99978909999666 8.553 131.21059269999785 10.33 113.81025989999907 10.209 132.62353480000195 9.362 149.8813347000001 9.31 185.1369748999988 8.474 181.52159180000027 10.092 160.1650748999999 9.396 138.05867469999802 11.099 173.9593644999984 9.418 193.67652670000166 10.067 142.3952922000021 7.727 132.45551499999783 8.883 199.23929039999982 7.622)
Error minima by case: (2.9647 5 7.7835 6 16.7252 8 19.4532 7 4.1577 10 16.0 8 0.6042 6 2.0 8 8.2777 7 36.0 9 81.0 6 62.9103 8 37.5082 8 0.4316 7 32.2119 8 31.7063 8 68.0 7 0.8189 8 69.0082 8 13.679 8 7.1817 8 24.4102 7 19.1468 6 26.9468 8 33.8849 6)
Average genome size in population (length): 73.631
Average program size in population (points): 74.631
Average percent parens in population: 0.013
Minimum age in population: 219.5034317369629
Maximum age in population: 223.8892707878796
Average age in population: 221.8500677449473
Median age in population: 221.914804351352
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.148
Error (vector) diversity:			 0.209
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 271528216
--- Timings ---
Current time: 1529616571720 milliseconds
Total Time:         551.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.5 seconds, 39.1%
Fitness Testing:    261.0 seconds, 47.3%
Report:              74.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer integer_div integer_flush float_max float_max integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3914.4133085999974
Median total errors in population: 1405.8619000000003
Error averages by case: (114.67861390000023 7.519 105.63336150000144 10.24 150.09279769999867 11.034 124.12024920000121 10.153 114.50533329999931 11.206 153.66340829999933 9.394 144.91613410000164 7.614 129.21979529999842 10.076 114.34414829999855 8.784 201.76929579999734 10.453 173.054216699999 12.049 173.34062359999686 8.527 128.02387189999783 10.346 106.92839269999916 10.234 133.28164370000152 9.401 150.73078300000094 9.278 186.01079849999886 8.436 173.34596920000007 10.076 160.791456 9.351 129.81438889999805 11.113 165.68361099999845 9.367 188.80997370000142 10.05 134.43202140000244 7.679 126.9995216999983 8.809 191.45389919999982 7.58)
Error minima by case: (2.9997 5 7.7829 4 16.9224 5 19.4532 5 4.1577 10 29.1223 5 38.4878 6 9.7923 5 8.3127 7 90.6911 5 82.7222 4 62.9104 6 37.5076 5 1.7534 4 32.2119 5 31.7063 5 97.2027 5 0.7267 5 69.0076 5 13.6791 4 7.3023 8 24.4102 5 19.1469 5 26.9818 8 23.6254 5)
Average genome size in population (length): 74.209
Average program size in population (points): 75.209
Average percent parens in population: 0.013
Minimum age in population: 220.5384727706668
Maximum age in population: 225.642325998208
Average age in population: 223.2176063037767
Median age in population: 223.2359394643099
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.153
Error (vector) diversity:			 0.209
Behavioral diversity:				 0.247
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 273383466
--- Timings ---
Current time: 1529616575510 milliseconds
Total Time:         555.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.8 seconds, 39.0%
Fitness Testing:    262.9 seconds, 47.3%
Report:              75.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_shove} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction integer_mult} {:instruction 57} {:instruction float_flush} {:instruction float_inc} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_sub} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_mod} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_shove print_float print_integer integer_div integer_flush float_max float_max integer_yank float_mult integer_yank float_div integer_yank integer_mult 57 float_flush float_inc 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_sub print_float integer_shove integer_dup_times integer_dup_times float_shove float_dup_times integer_yank float_mod float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3690.522309399997
Median total errors in population: 1405.8618000000001
Error averages by case: (100.11829980000023 7.429 95.61975790000075 10.238 140.76127249999863 11.0 117.28328000000114 10.108 105.67300019999988 11.19 148.2377393 9.395 136.0895328000015 7.561 119.92049709999856 10.107 101.86376449999868 8.726 189.69982999999746 10.438 163.4820606999999 12.034 163.40378119999698 8.493 121.01704499999799 10.333 101.66704529999973 10.24 123.52734710000178 9.372 141.15237919999984 9.264 176.56575789999954 8.425 167.94306269999953 10.084 151.11041549999925 9.352 119.30112139999825 11.108 160.19342279999842 9.329 179.96624640000152 10.018 123.96269700000241 7.665 117.42197759999814 8.77 186.31197549999982 7.55)
Error minima by case: (2.969 5 7.7829 4 16.9224 5 19.4532 5 4.1577 10 39.3533 8 0.6042 6 15.4569 8 8.2864 7 90.691 9 82.7222 5 62.9103 7 37.5076 5 0.7634 9 32.2119 4 31.7063 4 97.2027 5 0.6958 8 69.0076 5 13.679 10 7.3023 8 24.4102 5 19.1468 6 26.9555 7 33.9601 6)
Average genome size in population (length): 73.797
Average program size in population (points): 74.797
Average percent parens in population: 0.013
Minimum age in population: 221.6757877550667
Maximum age in population: 226.5876090694377
Average age in population: 224.5982920431522
Median age in population: 224.6277485523092
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.134
Error (vector) diversity:			 0.188
Behavioral diversity:				 0.216
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 275228441
--- Timings ---
Current time: 1529616579482 milliseconds
Total Time:         559.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.2 seconds, 39.0%
Fitness Testing:    264.9 seconds, 47.4%
Report:              76.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_swap} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer integer_div integer_flush float_max float_max integer_yank 57 float_flush float_min 56 57 integer_add integer_add float_add integer_add 57 integer_add float_add float_mod float_swap 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3935.9142179999976
Median total errors in population: 1405.8619000000003
Error averages by case: (110.53887630000024 7.567 104.16230840000135 10.261 152.88610669999827 11.052 125.37417200000121 10.178 113.55434879999923 11.201 155.25353499999946 9.449 144.19620310000178 7.614 134.37282559999804 10.103 114.31394979999844 8.831 202.4335124999974 10.461 171.88498229999922 12.044 176.53156579999654 8.543 129.52196559999769 10.346 108.68116999999906 10.247 131.6506161000019 9.368 148.97942470000044 9.327 184.77711639999885 8.461 175.06681929999985 10.102 159.6549247999999 9.396 133.34104049999797 11.114 167.47754539999835 9.37 191.5561381000017 10.089 138.00843160000238 7.713 129.38556739999785 8.834 193.0270717999999 7.613)
Error minima by case: (1.9997 5 6.7835 7 11.566 9 19.4532 7 4.1577 10 29.1223 8 0.6042 6 9.7923 8 7.3127 7 28.2169 9 81.7228 7 25.9975 7 36.5082 8 0.6613 8 32.2119 7 31.7063 7 96.2032 7 0.3653 7 68.0082 7 13.6791 9 1.8684 8 19.087 8 19.1469 6 25.9818 8 23.6254 6)
Average genome size in population (length): 73.602
Average program size in population (points): 74.602
Average percent parens in population: 0.013
Minimum age in population: 223.4624777603319
Maximum age in population: 227.8696963078311
Average age in population: 226.024360301103
Median age in population: 226.0393514621882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.141
Error (vector) diversity:			 0.211
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 277068541
--- Timings ---
Current time: 1529616583333 milliseconds
Total Time:         563.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.6 seconds, 39.0%
Fitness Testing:    266.8 seconds, 47.4%
Report:              76.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_swap integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_swap integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4002.957013299998
Median total errors in population: 1405.8619000000003
Error averages by case: (111.35070840000023 7.586 104.06494840000099 10.269 151.03493039999844 11.073 123.85439000000109 10.178 121.68312929999956 11.248 162.25680119999902 9.438 151.9701072000017 7.65 137.84352869999813 10.083 113.82366689999883 8.849 206.74286999999742 10.483 173.12569249999936 12.088 180.09063649999663 8.573 127.7584018999979 10.366 115.94188709999938 10.284 131.25161430000145 9.42 149.6610109000007 9.342 186.07286159999916 8.493 181.84601949999984 10.126 160.8561935 9.381 136.96996049999848 11.125 174.2588523999983 9.419 191.61139860000148 10.103 141.5894452000017 7.74 127.67808109999831 8.831 199.8008771999998 7.671)
Error minima by case: (2.9206 5 7.7829 7 16.8005 8 19.4532 7 4.0722 10 29.1223 8 38.4023 6 9.7923 8 8.2777 7 90.6911 9 82.7222 7 62.9104 7 37.5076 8 0.6613 8 38.1193 7 57.6136 7 97.2027 7 0.3653 8 69.0076 7 13.6791 9 7.0441 8 25.8232 7 19.1469 6 26.9468 8 23.6254 7)
Average genome size in population (length): 73.754
Average program size in population (points): 74.754
Average percent parens in population: 0.013
Minimum age in population: 224.9106885591593
Maximum age in population: 229.307580759507
Average age in population: 227.4096381351445
Median age in population: 227.4471818033692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.154
Error (vector) diversity:			 0.208
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 278912441
--- Timings ---
Current time: 1529616587165 milliseconds
Total Time:         567.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.0 seconds, 39.0%
Fitness Testing:    268.7 seconds, 47.4%
Report:              77.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction -57.91518516467824} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_rot} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub float_frominteger print_integer integer_div integer_flush float_max float_max integer_yank float_mult -57.91518516467824 float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add integer_add integer_add 57 integer_add float_add float_dup 57 float_flush float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add integer_rot float_dup 57 integer_mult 57 integer_rot float_yank in1 float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3830.6539028999973
Median total errors in population: 1405.8618000000001
Error averages by case: (109.14391230000027 7.585 101.78273180000134 10.314 148.5672148999984 11.106 121.46227990000116 10.259 109.05597349999911 11.311 151.36635869999972 9.536 140.71293530000165 7.742 127.00649169999805 10.156 111.51834799999807 8.927 196.7672172999975 10.525 168.55021739999955 12.132 169.94444099999677 8.654 125.41811179999787 10.402 101.19568809999924 10.312 128.72579290000212 9.476 146.46793280000028 9.393 181.4132557999988 8.538 171.14273139999958 10.197 156.3545086999996 9.461 126.27078029999768 11.193 163.45262769999846 9.48 187.2843580000015 10.132 130.90514300000288 7.814 125.49378139999769 8.904 189.37106919999988 7.731)
Error minima by case: (2.9734 5 7.2166 9 17.4738 9 10.7372 9 4.1577 10 40.113 8 1.3958 6 15.457 8 8.2864 7 90.691 9 71.7227 9 62.9104 8 23.5081 9 1.7534 8 1.8802 8 2.3859 8 73.2031 7 0.7267 8 66.0081 8 13.6791 9 7.7763 8 24.9948 8 19.1468 6 26.9555 8 33.7928 7)
Average genome size in population (length): 73.664
Average program size in population (points): 74.664
Average percent parens in population: 0.013
Minimum age in population: 226.3910382408262
Maximum age in population: 230.7581746948557
Average age in population: 228.7988187031935
Median age in population: 228.8502818543894
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.144
Error (vector) diversity:			 0.195
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 280754141
--- Timings ---
Current time: 1529616591009 milliseconds
Total Time:         570.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       222.3 seconds, 38.9%
Fitness Testing:    270.7 seconds, 47.4%
Report:              77.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_tan} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_times} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub integer_yankdup print_integer integer_div integer_flush float_max float_sin print_float float_mult integer_pop integer_swap integer_yank float_mult integer_yank float_div integer_yank float_tan 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_dup_times float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3711.3044767999977
Median total errors in population: 1405.8618000000001
Error averages by case: (103.44667390000022 7.552 95.95725040000063 10.274 144.75565699999825 11.129 118.7982541000012 10.224 102.37546189999975 11.29 146.5863252000001 9.474 133.2088411000017 7.668 123.0312272999982 10.158 104.88128999999888 8.858 190.5122325999974 10.483 163.80247449999982 12.11 166.10594429999654 8.58 122.80995929999783 10.385 98.98991949999964 10.298 123.14631430000198 9.412 140.63324719999966 9.352 176.75757979999912 8.466 166.22666329999902 10.156 151.3745583999993 9.415 122.31102459999785 11.18 158.5697268999984 9.431 183.56590670000173 10.134 127.05090830000286 7.775 121.52144179999792 8.851 184.5645943999998 7.666)
Error minima by case: (2.9997 5 7.7835 7 16.7252 8 23.3549 7 4.1577 10 39.0208 8 0.6042 6 15.457 8 8.3127 7 28.2169 9 82.7228 7 25.9975 7 37.5082 8 0.4316 8 32.2119 7 31.7063 7 97.2032 7 0.3653 8 69.0082 7 13.6791 9 7.0441 7 24.4102 7 19.1469 6 26.9818 8 32.7006 6)
Average genome size in population (length): 74.071
Average program size in population (points): 75.071
Average percent parens in population: 0.013
Minimum age in population: 227.3910382408262
Maximum age in population: 232.049563598084
Average age in population: 230.2249913842335
Median age in population: 230.2681607938016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.15
Error (vector) diversity:			 0.205
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 282606016
--- Timings ---
Current time: 1529616595121 milliseconds
Total Time:         574.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.7 seconds, 38.9%
Fitness Testing:    272.6 seconds, 47.4%
Report:              78.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_swap integer_yank float_pop integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3952.9519884999963
Median total errors in population: 1406.8618000000001
Error averages by case: (114.93644680000025 7.587 101.88802270000133 10.28 154.67217549999808 11.086 123.55558610000118 10.199 113.19035409999925 11.34 155.41764849999922 9.472 143.76487260000187 7.728 139.93401149999778 10.114 116.58042689999833 8.921 206.00896699999726 10.52 169.4931981999989 12.107 181.01618889999614 8.646 127.39760839999758 10.4 105.61529909999896 10.29 128.86231570000217 9.471 147.21943650000043 9.367 182.4212382999985 8.503 175.43737960000036 10.187 156.39053799999996 9.437 137.91820959999802 11.17 167.71029809999825 9.497 194.273826100002 10.106 143.44590910000204 7.808 131.40279419999737 8.939 193.5412369999999 7.683)
Error minima by case: (2.969 5 7.7834 8 39.434 9 12.7372 9 4.1577 10 53.205 8 0.6042 6 15.457 8 8.2864 7 90.6911 9 3.7227 8 62.9104 8 37.5081 9 2.8455 8 11.8802 8 27.6141 8 31.2031 7 58.7267 8 17.9919 8 13.6791 9 50.1316 8 31.913 8 19.1469 6 26.9555 8 91.7928 6)
Average genome size in population (length): 73.729
Average program size in population (points): 74.729
Average percent parens in population: 0.013
Minimum age in population: 228.9008844198059
Maximum age in population: 233.5066892615215
Average age in population: 231.6311803178008
Median age in population: 231.6599066037699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.155
Error (vector) diversity:			 0.198
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 284449241
--- Timings ---
Current time: 1529616599024 milliseconds
Total Time:         578.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.1 seconds, 38.9%
Fitness Testing:    274.6 seconds, 47.4%
Report:              79.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_max} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_max integer_sub print_float print_integer integer_div integer_flush float_max float_max integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3647.9450495999977
Median total errors in population: 1406.8618000000001
Error averages by case: (102.81199330000027 7.473 95.32127380000128 10.246 139.0341370999982 11.031 112.32692670000125 10.173 104.5253702999992 11.197 142.01140580000015 9.409 135.5604416000018 7.585 119.19972309999777 10.056 105.36511969999842 8.791 191.84094119999733 10.437 164.11109549999915 12.08 162.30736089999618 8.513 116.70823959999768 10.322 93.21562159999911 10.237 122.47471980000209 9.403 141.0015493999997 9.315 177.14026509999871 8.445 161.9399659999996 10.117 150.8683502999995 9.38 118.3272856999972 11.092 154.2596165999982 9.353 179.0377819000019 10.057 123.79275950000348 7.7 115.75602319999759 8.777 180.23308189999977 7.585)
Error minima by case: (2.9138 5 7.7829 8 16.5742 9 12.7372 8 4.0722 10 39.0209 8 0.6042 6 15.4569 8 8.2272 6 90.691 8 3.7227 7 62.9103 7 37.5076 9 0.6613 7 11.8802 8 27.6141 8 31.2031 7 0.2929 8 17.9919 9 13.679 8 6.8689 8 24.4102 8 19.1468 6 26.8963 8 32.7007 6)
Average genome size in population (length): 74.342
Average program size in population (points): 75.342
Average percent parens in population: 0.013
Minimum age in population: 230.0685610279872
Maximum age in population: 234.8579338328542
Average age in population: 233.0873861094114
Median age in population: 233.1518347752046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.155
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 286307841
--- Timings ---
Current time: 1529616602873 milliseconds
Total Time:         582.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       226.4 seconds, 38.9%
Fitness Testing:    276.6 seconds, 47.5%
Report:              79.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_min} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items float_min in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_swap integer_yank float_pop integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3815.8749993999963
Median total errors in population: 1405.8619000000003
Error averages by case: (108.02485970000023 7.632 99.82910540000108 10.353 147.85486659999856 11.15 121.73393700000106 10.28 105.77727029999957 11.378 150.15988219999974 9.519 137.1998769000016 7.779 129.80269119999832 10.16 108.81394309999864 8.948 197.87087179999753 10.548 167.04747709999933 12.152 172.6939985999967 8.635 125.54529479999792 10.447 101.96185719999947 10.314 127.06581480000179 9.517 144.57301500000034 9.428 180.04950309999887 8.548 169.85975349999973 10.202 154.7360144999999 9.464 129.07044169999793 11.207 162.13452699999843 9.54 186.71152860000163 10.191 132.71840530000244 7.804 124.635613399998 8.946 188.1544505999999 7.708)
Error minima by case: (2.9997 5 7.7829 9 16.8005 9 19.4532 9 4.1577 10 39.0209 8 0.6042 6 15.4568 8 8.3127 7 90.6909 9 82.7222 7 62.9102 7 37.5076 9 0.6613 8 32.2119 8 31.7063 8 97.2027 7 0.3653 8 69.0076 8 13.6789 9 6.7763 8 25.8232 8 19.1467 6 26.9818 8 32.7007 6)
Average genome size in population (length): 74.295
Average program size in population (points): 75.295
Average percent parens in population: 0.013
Minimum age in population: 231.6948441802098
Maximum age in population: 236.314096553967
Average age in population: 234.4945969308513
Median age in population: 234.561302096556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.155
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 288165316
--- Timings ---
Current time: 1529616606985 milliseconds
Total Time:         586.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.9 seconds, 38.8%
Fitness Testing:    278.6 seconds, 47.5%
Report:              80.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_cos} {:instruction integer_yank} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_swap integer_yank float_mult integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times float_add float_cos integer_yank print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4062.981483899996
Median total errors in population: 1405.8618000000001
Error averages by case: (115.48910020000027 7.601 111.49725380000108 10.305 154.45044739999835 11.126 130.0807490000012 10.239 121.89407819999938 11.335 161.4111683999992 9.508 152.19419870000166 7.777 135.83299439999817 10.157 118.7533989999986 8.917 206.64468979999745 10.505 178.29219959999907 12.102 179.4776130999967 8.631 134.150366899998 10.401 115.7401786999993 10.275 138.2867750000013 9.437 155.50382710000082 9.42 191.05532419999884 8.536 181.58501789999977 10.189 166.0432374 9.461 135.39154619999806 11.17 174.07914669999838 9.53 192.75418970000155 10.158 139.98325790000217 7.816 131.60108799999807 8.919 199.54063659999983 7.734)
Error minima by case: (2.969 5 7.7829 7 16.8005 8 19.4532 7 4.1577 10 2.3923 8 0.6042 6 2.0 7 1.2741 7 36.0 8 81.0 6 62.9104 8 37.5076 8 0.6612 7 32.2119 8 31.7063 8 68.0 7 0.1147 8 69.0076 8 13.6791 7 7.0441 8 24.4102 7 19.1469 6 3.605 8 8.7125 6)
Average genome size in population (length): 74.22
Average program size in population (points): 75.22
Average percent parens in population: 0.013
Minimum age in population: 232.9724976885375
Maximum age in population: 238.0874407836075
Average age in population: 235.8757516672491
Median age in population: 235.9128104630216
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.148
Error (vector) diversity:			 0.201
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 290020891
--- Timings ---
Current time: 1529616610836 milliseconds
Total Time:         590.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       229.2 seconds, 38.8%
Fitness Testing:    280.5 seconds, 47.5%
Report:              80.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_div} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_yank} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times integer_dup_items integer_dup float_div integer_swap integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer print_integer print_integer 7 integer_dec print_integer float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_yank 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3950.408878899997
Median total errors in population: 1406.8618000000001
Error averages by case: (115.18682610000027 7.606 105.10248290000136 10.319 153.00713579999834 11.094 125.92618170000114 10.26 114.63866029999893 11.304 157.03534169999904 9.54 144.36271920000164 7.705 132.60651479999768 10.174 115.66522429999789 8.902 201.70599649999738 10.579 171.46627129999882 12.145 175.87032049999655 8.665 129.5352040999978 10.422 110.97943829999878 10.335 132.15110190000226 9.503 149.56305450000096 9.392 184.3869090999984 8.513 176.3329136000003 10.177 159.2591351000005 9.456 132.31115889999748 11.216 168.5972381999983 9.454 191.43895120000147 10.138 136.83537860000303 7.853 130.45520159999745 8.897 194.61251869999987 7.728)
Error minima by case: (2.9997 5 2.2165 6 39.434 7 5.7371 7 4.1577 10 53.205 8 0.6042 6 15.4569 8 8.3127 7 90.691 9 76.7228 6 62.9103 8 28.5082 7 2.8455 9 3.1199 6 2.6142 6 78.2033 6 57.7267 9 69.0076 6 13.679 9 49.1316 8 31.913 6 19.1468 6 26.9818 8 90.7928 6)
Average genome size in population (length): 74.241
Average program size in population (points): 75.241
Average percent parens in population: 0.013
Minimum age in population: 233.9724976885375
Maximum age in population: 239.3670587720036
Average age in population: 237.20033941304
Median age in population: 237.2860359861379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.153
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 291877041
--- Timings ---
Current time: 1529616614777 milliseconds
Total Time:         594.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.7 seconds, 38.8%
Fitness Testing:    282.5 seconds, 47.5%
Report:              81.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 59997.68839999994
Test mean error for best: 29.99884
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items integer_mult in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_swap integer_yank float_pop integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4033.741126199997
Median total errors in population: 1405.8618000000001
Error averages by case: (115.44672620000023 7.499 108.91237850000178 10.273 155.12157469999798 11.063 131.31548680000114 10.206 119.49366919999864 11.226 162.21007469999822 9.446 149.50588200000175 7.64 134.09400259999762 10.105 115.82078699999776 8.851 201.71640309999736 10.467 176.09591779999846 12.085 176.61894919999614 8.556 135.00839019999805 10.383 116.88381649999846 10.24 136.57933100000204 9.415 153.95130170000058 9.335 188.993528499998 8.495 181.7167239000004 10.123 163.89334490000064 9.443 133.2152121999973 11.102 174.09974259999828 9.374 193.70056690000203 10.116 137.85941830000277 7.746 132.09657429999723 8.888 199.70432339999985 7.61)
Error minima by case: (1.9997 5 6.7835 4 18.658 7 10.7371 7 4.1577 10 39.0209 5 1.3958 6 15.457 5 7.3127 7 90.6911 5 71.7228 6 62.9104 6 23.5082 7 0.6613 3 1.8801 7 2.3858 7 73.2032 7 0.3653 5 66.0082 7 13.6791 4 7.7763 8 26.179 7 19.1469 5 25.9818 7 32.7007 5)
Average genome size in population (length): 74.047
Average program size in population (points): 75.047
Average percent parens in population: 0.013
Minimum age in population: 236.3971356051656
Maximum age in population: 240.610121610561
Average age in population: 238.6170019657468
Median age in population: 238.6461410754439
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.151
Error (vector) diversity:			 0.212
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 293728216
--- Timings ---
Current time: 1529616618797 milliseconds
Total Time:         598.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.1 seconds, 38.8%
Fitness Testing:    284.4 seconds, 47.5%
Report:              81.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_div} {:instruction 57} {:instruction integer_mult} {:instruction 59} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub integer_div integer_flush float_max float_max integer_yank float_sin integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_div 57 integer_mult 59 float_min float_yank in1 integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3799.9510886999974
Median total errors in population: 1407.8618000000001
Error averages by case: (107.09228260000027 7.624 99.63477920000118 10.243 144.81205719999835 11.019 120.57794420000116 10.166 110.47571189999934 11.274 151.7902963999996 9.485 140.95261410000168 7.673 125.56048999999798 10.103 107.40187459999838 8.864 193.78625929999745 10.485 167.98372079999922 12.062 167.65915679999654 8.569 124.49574449999785 10.364 105.46715909999935 10.277 126.91239350000205 9.421 145.41003970000017 9.33 181.00170829999865 8.444 171.4835176 10.132 154.74989429999957 9.386 123.82554529999761 11.126 163.78462309999836 9.428 184.75588980000163 10.033 129.35467450000291 7.749 121.48644199999765 8.892 189.70526989999988 7.642)
Error minima by case: (2.9988 5 7.7835 7 16.8005 8 19.4532 7 3.1577 9 40.113 8 0.6042 6 14.457 8 8.3122 7 89.6911 9 82.7228 7 61.9104 8 37.5082 8 1.3373 7 28.5417 7 31.7063 7 97.2032 7 0.7267 8 69.0082 7 12.6791 9 7.0441 8 25.8232 7 18.1469 6 26.9813 7 33.7928 6)
Average genome size in population (length): 74.159
Average program size in population (points): 75.159
Average percent parens in population: 0.013
Minimum age in population: 237.5722348491853
Maximum age in population: 242.2221867128338
Average age in population: 240.0077823896821
Median age in population: 240.0541662751164
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.146
Error (vector) diversity:			 0.207
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 295582241
--- Timings ---
Current time: 1529616622672 milliseconds
Total Time:         602.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       233.4 seconds, 38.7%
Fitness Testing:    286.4 seconds, 47.5%
Report:              82.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_min} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_dup} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items float_min in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_swap integer_yank integer_add integer_yank integer_yankdup integer_yank float_dup 57 float_dup float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4292.967315699995
Median total errors in population: 1406.8618000000001
Error averages by case: (126.63608090000027 7.76 120.96646790000136 10.335 162.1956586999984 11.121 140.29640230000103 10.282 132.8113298999997 11.355 172.85775689999875 9.54 162.39217640000152 7.831 143.90541729999822 10.135 126.03365729999844 9.088 212.65260179999763 10.554 186.84398499999875 12.117 186.27175069999709 8.679 144.12526129999938 10.457 128.63490579999913 10.322 147.60732920000046 9.508 164.72247560000116 9.449 199.56007369999836 8.571 191.9071629000005 10.198 174.79463180000062 9.522 143.41260539999905 11.18 184.42397309999848 9.551 200.26915290000156 10.173 147.91616170000128 7.865 139.64066459999876 9.057 209.69263259999983 7.747)
Error minima by case: (2.9997 5 7.7834 8 16.9224 8 19.4532 8 4.1577 10 15.0 8 0.6042 6 15.457 8 8.3127 7 90.6911 9 80.0 8 62.9104 7 37.5081 9 0.6613 6 32.2119 8 31.0 8 67.0 7 0.3653 8 69.0081 8 13.6791 8 7.3023 8 24.4102 8 19.1469 6 26.9818 8 32.7007 6)
Average genome size in population (length): 73.965
Average program size in population (points): 74.965
Average percent parens in population: 0.013
Minimum age in population: 238.5722348491853
Maximum age in population: 243.6370594505854
Average age in population: 241.3786930645712
Median age in population: 241.407238152549
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.145
Error (vector) diversity:			 0.217
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 297431441
--- Timings ---
Current time: 1529616626436 milliseconds
Total Time:         606.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.8 seconds, 38.7%
Fitness Testing:    288.2 seconds, 47.5%
Report:              83.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_max} {:instruction float_shove} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_div} {:instruction 57} {:instruction integer_mult} {:instruction 59} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_rot in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer integer_dec integer_flush float_max float_shove integer_yank integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_div 57 integer_mult 59 float_min float_yank in1 integer_inc integer_max 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3476.396326899997
Median total errors in population: 1405.8618000000001
Error averages by case: (93.65645260000022 7.495 92.97124640000055 10.229 131.80136059999887 11.017 109.27177280000113 10.17 96.75953170000008 11.182 134.82569360000085 9.403 127.71643430000154 7.571 105.58429629999898 10.072 97.75006589999936 8.763 181.15914489999747 10.432 161.41052910000002 12.072 150.62716329999716 8.498 113.62375399999793 10.315 86.24278560000015 10.225 120.59124520000137 9.392 138.12216099999995 9.293 174.45090999999945 8.405 155.56113409999884 10.081 149.0338266999994 9.364 105.2894064999987 11.082 147.76079639999847 9.316 170.96378160000154 10.063 109.93848970000197 7.68 108.70655299999873 8.756 174.1327915999998 7.569)
Error minima by case: (2.9677 5 7.2165 5 16.5742 7 10.7371 6 4.1577 10 15.0 6 0.6042 6 3.0 6 8.2807 7 28.2169 6 71.7227 5 25.9975 7 23.5081 6 0.4316 4 1.8801 6 2.3858 6 67.0 6 0.8189 6 66.0081 6 13.6791 6 6.8689 8 24.4102 6 19.1468 6 26.9498 8 33.8849 6)
Average genome size in population (length): 74.076
Average program size in population (points): 75.076
Average percent parens in population: 0.013
Minimum age in population: 239.7601681612705
Maximum age in population: 244.7820781929561
Average age in population: 242.7025226622598
Median age in population: 242.741980978317
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.149
Error (vector) diversity:			 0.197
Behavioral diversity:				 0.233
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 299283366
--- Timings ---
Current time: 1529616630321 milliseconds
Total Time:         610.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.1 seconds, 38.7%
Fitness Testing:    290.2 seconds, 47.6%
Report:              83.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_add} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_tan} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_add print_float float_mult integer_swap integer_yank integer_yank float_dup 57 float_flush float_min float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_tan 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3565.200352899997
Median total errors in population: 1405.8618000000001
Error averages by case: (93.94953600000026 7.453 89.03171800000082 10.258 133.73021599999876 11.038 110.96429630000112 10.178 101.48798659999935 11.175 144.65565989999956 9.448 131.38339530000167 7.622 118.34792199999842 10.087 94.32811889999896 8.779 187.03947509999753 10.447 157.42246169999962 12.096 160.82801909999688 8.557 115.20101409999788 10.34 98.12998769999939 10.255 116.42284950000153 9.382 133.98609079999937 9.323 170.4836046999992 8.457 163.53088009999982 10.125 145.00317019999912 9.406 116.84827189999805 11.118 156.79544649999846 9.33 173.01601050000156 10.077 121.4552047000026 7.709 110.33170249999829 8.747 181.79831479999982 7.622)
Error minima by case: (2.9997 5 7.7828 6 16.8005 6 19.4532 6 4.1577 10 15.0 6 0.6042 6 3.0 6 8.3127 7 28.2169 6 80.0 6 25.9975 7 37.5075 7 1.3373 5 29.2119 6 28.7063 6 67.0 6 0.7267 6 69.0074 6 13.6791 5 7.0441 8 24.4102 6 19.1469 6 26.9818 8 33.7928 6)
Average genome size in population (length): 73.691
Average program size in population (points): 74.691
Average percent parens in population: 0.013
Minimum age in population: 240.9713981512879
Maximum age in population: 246.1331793442982
Average age in population: 244.1218178028427
Median age in population: 244.1733485895512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.153
Error (vector) diversity:			 0.208
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 301125716
--- Timings ---
Current time: 1529616634085 milliseconds
Total Time:         613.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.5 seconds, 38.7%
Fitness Testing:    292.1 seconds, 47.6%
Report:              84.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_pop} {:instruction float_div} {:instruction 57} {:instruction integer_mult} {:instruction 59} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 57} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_fromfloat integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_pop float_div 57 integer_mult 59 float_min float_yank in1 integer_inc integer_max 57 57 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4004.6355057999954
Median total errors in population: 1406.8618000000001
Error averages by case: (120.76337520000024 7.541 106.21604800000112 10.252 155.49370619999846 11.012 125.93601800000108 10.186 117.49980189999954 11.226 158.43317439999896 9.462 147.4691675000017 7.677 136.8142421999982 10.083 118.90754929999858 8.868 205.83572219999738 10.485 172.923986499999 12.047 179.2629166999966 8.587 129.90722639999782 10.362 111.82812829999938 10.255 133.14058890000157 9.397 150.43049290000084 9.328 185.77274519999872 8.464 177.9127378000001 10.081 160.7419788000002 9.386 136.22979899999834 11.113 170.26197139999837 9.375 193.88368300000175 10.053 140.78396960000188 7.782 132.683659099998 8.83 196.00681729999985 7.644)
Error minima by case: (2.969 5 7.7829 8 28.2095 8 19.4532 8 4.1583 10 16.0 7 0.6042 6 2.0 8 8.2864 7 19.6911 9 81.0 8 8.0896 7 37.5076 9 0.6612 7 32.2119 8 31.7063 8 68.0 7 0.3654 8 69.0076 8 13.6785 8 3.7764 8 31.913 8 19.1463 6 26.9555 7 23.6254 6)
Average genome size in population (length): 73.402
Average program size in population (points): 74.402
Average percent parens in population: 0.014
Minimum age in population: 241.9713981512879
Maximum age in population: 247.7984828273297
Average age in population: 245.5010765905474
Median age in population: 245.5375815782958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.164
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 302960866
--- Timings ---
Current time: 1529616637894 milliseconds
Total Time:         617.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.8 seconds, 38.7%
Fitness Testing:    294.0 seconds, 47.6%
Report:              84.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_div} {:instruction float_mod} {:instruction float_tan} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_mult integer_sub integer_yank float_pop integer_yank float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_div float_mod float_tan 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4181.694084899995
Median total errors in population: 1406.8618000000001
Error averages by case: (123.02459030000024 7.72 116.85824500000119 10.357 160.33693799999858 11.148 136.1926508000012 10.28 124.74718439999947 11.387 164.8840272999992 9.534 154.94495410000167 7.856 140.03651049999823 10.201 124.42792699999856 9.032 210.62702289999743 10.548 182.6966077999991 12.13 184.31868249999664 8.655 140.0998517999985 10.464 118.37414249999934 10.289 143.366897600001 9.524 160.22266450000046 9.456 195.36074409999878 8.583 184.70267999999973 10.213 170.68231570000015 9.521 141.31297569999867 11.201 177.17280619999843 9.563 198.29430420000162 10.204 145.75393280000185 7.852 138.10797119999842 9.029 202.63345799999982 7.767)
Error minima by case: (2.9647 5 7.2166 9 11.566 7 10.7372 9 4.1577 10 39.0208 9 1.6042 6 15.4564 8 8.2787 7 90.6905 7 66.7228 8 62.9098 8 18.5082 9 0.4316 8 1.8802 7 2.3859 8 68.2033 7 0.2733 8 61.0082 8 13.6785 7 1.8684 8 19.087 7 19.1463 6 26.9478 8 32.7006 6)
Average genome size in population (length): 73.486
Average program size in population (points): 74.486
Average percent parens in population: 0.014
Minimum age in population: 244.2239499993775
Maximum age in population: 248.8075892488432
Average age in population: 246.8598719949705
Median age in population: 246.9024443033592
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.153
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.25
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 304798091
--- Timings ---
Current time: 1529616641727 milliseconds
Total Time:         621.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.2 seconds, 38.6%
Fitness Testing:    295.9 seconds, 47.6%
Report:              85.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction -57.91518516467824} {:instruction float_div} {:instruction print_integer} {:instruction integer_sub} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer integer_div integer_flush float_max float_max integer_yank float_mult -57.91518516467824 float_div print_integer integer_sub 57 float_flush float_min 56 57 integer_fromfloat integer_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot integer_swap integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3589.6260602999964
Median total errors in population: 1405.8618000000001
Error averages by case: (104.68798120000024 7.528 91.878870500001 10.224 139.75991169999853 11.02 109.85672860000113 10.134 99.20101779999926 11.163 138.17729110000084 9.392 129.98180460000162 7.609 117.6025109999981 10.09 105.88480899999827 8.755 189.89639859999738 10.452 160.7857138999993 12.068 161.45093409999657 8.534 114.17681189999794 10.323 89.54053589999981 10.189 119.143569100002 9.396 137.60374439999953 9.294 173.78802539999916 8.425 157.56035579999912 10.078 147.53165339999893 9.356 117.42606569999776 11.121 149.8378020999984 9.325 179.37839750000165 10.016 122.73100620000285 7.654 117.10555409999785 8.723 176.1885666999998 7.581)
Error minima by case: (2.9997 5 7.7828 7 15.6617 8 18.2628 7 4.1577 10 22.9791 8 0.6042 6 15.457 7 8.3127 7 66.6911 8 82.7222 7 62.9104 7 37.5076 8 0.4316 7 27.1198 7 26.6141 7 97.2026 7 0.3653 8 69.0076 7 13.6791 8 7.1817 8 8.1407 7 17.1469 6 16.9818 8 29.2993 6)
Average genome size in population (length): 73.172
Average program size in population (points): 74.172
Average percent parens in population: 0.014
Minimum age in population: 245.59750386664
Maximum age in population: 250.4729786877353
Average age in population: 248.2627282396825
Median age in population: 248.2849962238598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.152
Error (vector) diversity:			 0.216
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 306627441
--- Timings ---
Current time: 1529616645610 milliseconds
Total Time:         625.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.6 seconds, 38.6%
Fitness Testing:    297.8 seconds, 47.6%
Report:              85.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction tagged_547} {:instruction 92} {:instruction print_float} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_div} {:instruction integer_rot} {:instruction float_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction integer_min} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_swap float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth tagged_547 92 print_float print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_integer integer_div integer_rot float_max float_max integer_fromfloat float_mult integer_yank float_pop integer_yank float_div integer_yank float_mult integer_yank float_div 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod integer_min 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4190.492974799996
Median total errors in population: 1407.8618000000001
Error averages by case: (121.07601070000023 7.627 113.40822080000142 10.263 157.59617829999823 11.046 135.18642400000113 10.211 127.52459029999918 11.257 169.9892493999985 9.495 156.97267620000156 7.706 145.4069900999978 10.108 119.52468209999847 8.934 213.26949209999754 10.494 179.3322210999988 12.083 188.63223409999657 8.626 138.9661039999988 10.398 121.70623769999905 10.269 140.33988870000098 9.432 157.32038160000076 9.357 191.94729749999846 8.52 188.90853240000067 10.142 167.37684510000042 9.444 145.82427399999904 11.131 181.36974639999843 9.433 195.62318100000178 10.087 150.24515150000124 7.822 135.5192827999986 8.936 206.91908289999984 7.687)
Error minima by case: (2.969 5 7.2166 8 16.9224 8 10.7372 8 4.0719 10 15.0 8 0.6042 6 15.4569 8 8.2864 7 90.691 9 71.7228 8 62.9103 8 23.5082 9 0.6611 6 1.8802 8 2.3858 8 67.0 7 0.366 8 66.0082 8 13.679 8 7.3023 8 24.4102 8 19.1468 6 26.9555 8 32.7001 6)
Average genome size in population (length): 73.421
Average program size in population (points): 74.421
Average percent parens in population: 0.014
Minimum age in population: 247.083748488281
Maximum age in population: 251.7363049571902
Average age in population: 249.6860056271097
Median age in population: 249.7395745190422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.161
Error (vector) diversity:			 0.226
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 308463041
--- Timings ---
Current time: 1529616649535 milliseconds
Total Time:         629.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       242.9 seconds, 38.6%
Fitness Testing:    299.8 seconds, 47.6%
Report:              86.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_div} {:instruction print_integer} {:instruction float_div} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos float_dup_times integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_integer integer_div print_integer float_div 57 float_flush float_min 56 57 integer_add integer_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3896.5239144999964
Median total errors in population: 1407.86155
Error averages by case: (107.49409010000025 7.567 99.09105200000097 10.243 148.18623219999853 11.007 122.41054400000112 10.184 112.56396069999928 11.27 156.13679509999926 9.467 142.98923860000158 7.706 136.39893529999816 10.084 107.83573749999861 8.866 204.7164306999975 10.483 167.13109989999938 12.064 180.65146219999687 8.576 126.41801039999795 10.367 109.17638849999915 10.255 126.80683320000207 9.4 144.27329070000016 9.31 180.11989079999896 8.47 175.7604606000003 10.138 154.82358299999973 9.404 137.5979930999985 11.128 168.18560569999843 9.455 186.92531320000148 10.076 142.19275340000195 7.801 125.03228569999793 8.89 193.72592789999985 7.669)
Error minima by case: (2.9206 5 7.7829 5 16.9224 7 23.3549 6 5.0657 10 39.0208 7 0.6042 6 16.456 7 8.2777 7 28.2169 7 82.7222 5 25.9975 7 37.5076 6 0.6613 6 32.2119 5 31.7063 5 97.2027 5 0.3653 7 69.0076 5 14.6781 6 0.8684 8 24.4102 6 20.1459 6 26.9468 7 32.7006 7)
Average genome size in population (length): 73.282
Average program size in population (points): 74.282
Average percent parens in population: 0.014
Minimum age in population: 248.083748488281
Maximum age in population: 253.3933075332852
Average age in population: 251.0484765994704
Median age in population: 251.1285015018105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.168
Error (vector) diversity:			 0.22
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 310295241
--- Timings ---
Current time: 1529616653388 milliseconds
Total Time:         633.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.3 seconds, 38.6%
Fitness Testing:    301.8 seconds, 47.7%
Report:              87.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_yank} {:instruction float_add} {:instruction -57.91518516467824} {:instruction float_swap} {:instruction print_integer} {:instruction float_div} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_max float_min integer_dup float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float print_integer integer_div integer_flush float_max float_max integer_yank float_add -57.91518516467824 float_swap print_integer float_div 57 float_flush float_min 56 57 integer_add integer_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times float_yank float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3384.7220939999984
Median total errors in population: 1405.8618000000001
Error averages by case: (88.54745070000023 7.456 85.0918671000001 10.233 129.99133159999909 10.998 105.94704050000114 10.166 91.20855790000022 11.195 133.23114470000118 9.411 122.23349820000153 7.559 106.08760049999867 10.057 91.45119029999948 8.766 177.38328739999747 10.442 153.9437598000007 12.068 149.9908820999974 8.508 109.888245199998 10.317 86.32547740000022 10.236 113.26691410000126 9.396 131.0457169999995 9.279 167.14988740000018 8.411 153.30671469999885 10.084 141.43704439999829 9.351 105.39536259999856 11.113 145.49222759999847 9.328 169.6658945000012 10.048 110.11326370000204 7.662 106.30503519999877 8.737 171.8286993999998 7.573)
Error minima by case: (2.9647 5 7.7829 6 18.658 6 19.4532 6 4.1577 10 15.0 6 0.6042 6 3.0 6 8.2777 7 28.2169 6 79.8149 6 25.9975 7 37.5076 7 0.6612 5 32.2119 6 30.7063 6 66.2953 7 0.3653 6 69.0076 7 13.6785 5 7.8684 8 26.179 6 19.1463 6 26.9468 8 23.6254 6)
Average genome size in population (length): 73.104
Average program size in population (points): 74.104
Average percent parens in population: 0.014
Minimum age in population: 250.0175932232356
Maximum age in population: 254.3933075332852
Average age in population: 252.374211407435
Median age in population: 252.4025733576512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.143
Error (vector) diversity:			 0.189
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 312122891
--- Timings ---
Current time: 1529616657186 milliseconds
Total Time:         637.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.6 seconds, 38.6%
Fitness Testing:    303.7 seconds, 47.7%
Report:              87.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_yank} {:instruction 9.397107751041943} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 59} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos float_dup_times integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_integer integer_div integer_flush float_max float_max integer_fromfloat float_mult integer_yank 9.397107751041943 integer_yank float_dup 57 float_flush float_min 56 57 float_add integer_add 57 integer_add float_add float_mod integer_add float_add float_mod float_dup 57 integer_mult 57 in1 integer_inc integer_max 57 59 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3768.200979299997
Median total errors in population: 1406.8618000000001
Error averages by case: (106.50222100000023 7.609 99.46997180000089 10.277 142.14843039999874 11.054 118.87504120000106 10.197 110.34597449999951 11.269 149.16494919999988 9.488 140.71999040000156 7.697 123.88918479999843 10.103 107.61682369999896 8.87 193.46373799999762 10.516 168.53681099999977 12.079 165.7599912999971 8.607 122.73457179999797 10.366 100.55678709999945 10.305 127.05818790000167 9.444 146.41251360000012 9.347 181.46158559999935 8.498 168.58049129999955 10.125 154.50812459999935 9.396 121.81918409999822 11.136 160.81986789999854 9.431 182.89462630000145 10.122 128.08237940000242 7.78 119.46367489999817 8.876 187.03185749999986 7.692)
Error minima by case: (2.9997 5 7.7829 5 4.6581 6 19.4532 6 4.1577 10 41.1036 6 1.3958 6 15.4569 6 8.3127 7 90.691 6 82.7222 6 62.9103 7 37.5076 6 2.6627 5 28.5417 5 31.7063 5 97.2027 6 1.2929 6 69.0076 5 13.679 6 5.0395 7 4.099 6 19.1468 5 26.9818 8 33.9601 6)
Average genome size in population (length): 72.566
Average program size in population (points): 73.566
Average percent parens in population: 0.014
Minimum age in population: 251.1600671392066
Maximum age in population: 255.7333784261486
Average age in population: 253.7023277975706
Median age in population: 253.7429343913454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.167
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 313937116
--- Timings ---
Current time: 1529616660999 milliseconds
Total Time:         640.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.0 seconds, 38.5%
Fitness Testing:    305.6 seconds, 47.7%
Report:              88.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_dup_times} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_yankdup} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 59} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_dup_times float_min float_tan integer_dup_items float_max in2 float_rot float_frominteger float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec integer_fromfloat float_rot float_dup_times print_float print_integer integer_div float_rot integer_sub print_float print_integer integer_div integer_flush float_pop integer_yankdup float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 in1 integer_inc integer_max 57 59 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4062.469514999997
Median total errors in population: 1405.8618000000001
Error averages by case: (113.80881550000018 7.528 109.91594700000138 10.273 152.38630109999872 11.033 128.65523140000113 10.163 123.96810639999934 11.224 163.46891559999892 9.411 153.99068000000165 7.658 138.89098319999832 10.091 116.47945209999847 8.822 208.51340539999754 10.448 176.62392609999893 12.054 181.22844339999688 8.546 132.66120109999818 10.347 117.944545599999 10.245 136.84034460000143 9.392 154.13027300000073 9.307 189.4724857999985 8.446 182.71903360000022 10.11 164.44193180000028 9.393 138.2572891999984 11.116 175.19010159999854 9.377 190.87243490000148 10.066 142.79442820000176 7.703 129.3766648999981 8.829 200.64457349999992 7.612)
Error minima by case: (2.9997 5 7.7829 5 17.4733 7 19.4532 7 4.1578 10 29.1223 8 0.6042 6 9.7923 8 8.3127 7 28.2169 8 82.7222 5 25.9975 7 37.5076 7 0.6613 6 32.2119 7 31.7063 7 97.2027 6 0.3653 8 69.0076 7 13.679 7 1.8684 8 24.9943 6 19.1468 6 26.9818 8 23.6254 6)
Average genome size in population (length): 73.031
Average program size in population (points): 74.031
Average percent parens in population: 0.014
Minimum age in population: 252.6739104850531
Maximum age in population: 257.1101504263831
Average age in population: 255.0855226145567
Median age in population: 255.1156260781127
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.145
Error (vector) diversity:			 0.213
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 315763016
--- Timings ---
Current time: 1529616664884 milliseconds
Total Time:         644.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.4 seconds, 38.5%
Fitness Testing:    307.5 seconds, 47.7%
Report:              88.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction tag_integer_309} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_add} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_div} {:instruction 57} {:instruction integer_mult} {:instruction 59} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 56} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_dec} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_yankdup integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer tag_integer_309 integer_dec print_integer float_rot float_add print_float float_mult integer_swap integer_yank integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_div 57 integer_mult 59 float_min float_yank in1 integer_inc integer_max 57 56 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup integer_dec integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3403.952270199998
Median total errors in population: 1407.8613
Error averages by case: (88.80887870000022 7.505 83.33692370000021 10.213 128.75742139999906 11.001 103.78537510000113 10.133 95.06346230000031 11.202 137.05880990000074 9.372 126.04873420000158 7.575 108.0045432999989 10.056 90.46799489999977 8.728 179.01748179999746 10.421 153.04748150000043 12.053 151.6046535999973 8.49 107.78630419999803 10.282 90.58598020000015 10.208 111.18574070000118 9.39 129.08151089999947 9.278 166.32601219999995 8.39 157.23128079999933 10.083 140.47119289999858 9.325 107.00582969999886 11.091 149.39246229999836 9.342 169.4284102000014 10.031 111.80161200000178 7.627 104.88549409999881 8.737 175.67367959999982 7.562)
Error minima by case: (2.9736 5 7.7835 7 18.658 9 19.4532 7 4.1577 10 39.0209 8 0.6042 6 15.457 7 8.2866 7 28.2169 8 82.7228 7 25.9975 7 37.5082 8 0.6613 6 32.2119 8 31.7063 8 97.2032 7 0.3653 8 69.0082 8 13.6791 8 8.9605 8 26.179 8 19.1469 6 26.9557 8 32.7007 7)
Average genome size in population (length): 72.837
Average program size in population (points): 73.837
Average percent parens in population: 0.014
Minimum age in population: 253.9557454629757
Maximum age in population: 258.5126610127377
Average age in population: 256.4755041363323
Median age in population: 256.5078179214469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.15
Error (vector) diversity:			 0.213
Behavioral diversity:				 0.25
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 317583991
--- Timings ---
Current time: 1529616668746 milliseconds
Total Time:         648.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       249.7 seconds, 38.5%
Fitness Testing:    309.5 seconds, 47.7%
Report:              89.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_dec} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap float_cos integer_swap integer_dup_items integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_integer integer_div integer_flush float_max float_max integer_fromfloat float_mult integer_yank integer_yank float_mult integer_yank integer_pop integer_yank float_dup 57 float_flush float_dec 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3381.321377799998
Median total errors in population: 1405.8618000000001
Error averages by case: (86.79649660000028 7.482 85.16746140000036 10.232 129.7729961999986 11.037 108.39270790000111 10.166 89.73023240000018 11.211 133.70964150000117 9.436 121.0429999000016 7.574 105.80434479999896 10.104 89.6190789999995 8.738 173.62141229999753 10.465 154.8681418000003 12.084 148.58354129999697 8.492 112.44476799999804 10.326 86.51290279999995 10.263 112.85535730000161 9.387 131.61023389999906 9.272 168.08213889999956 8.403 154.06901949999866 10.123 141.43085749999892 9.353 103.88596779999861 11.136 146.22251519999853 9.352 170.5020081000015 10.058 109.55129810000227 7.673 105.81104039999845 8.751 172.5462151999999 7.57)
Error minima by case: (2.9707 5 7.2174 4 11.566 4 10.738 4 4.1577 10 16.0 4 0.6042 6 2.0 4 8.2897 7 36.0 5 71.722 5 62.9103 5 23.5074 5 0.4316 3 1.881 4 2.3867 4 68.0 4 0.3653 4 66.0074 5 13.679 4 1.8684 8 19.087 4 19.1468 4 26.9525 8 32.7007 4)
Average genome size in population (length): 72.925
Average program size in population (points): 73.925
Average percent parens in population: 0.014
Minimum age in population: 255.740917990043
Maximum age in population: 259.960801834244
Average age in population: 257.9199768067268
Median age in population: 257.9576785347198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.144
Error (vector) diversity:			 0.206
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 319407266
--- Timings ---
Current time: 1529616672593 milliseconds
Total Time:         652.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.1 seconds, 38.5%
Fitness Testing:    311.4 seconds, 47.7%
Report:              89.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_mult} {:instruction integer_dec} {:instruction print_integer} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_max} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_yankdup} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_dup_times float_frominteger integer_dec float_mult integer_dec print_integer float_max integer_dec integer_yank float_max 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_yankdup float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot integer_swap integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3780.150949299996
Median total errors in population: 1405.8618000000001
Error averages by case: (100.31940050000023 7.52 101.54351080000112 10.249 139.63098999999858 11.054 121.3071284000011 10.171 111.32764289999932 11.241 152.2922851999996 9.424 142.86086160000153 7.634 121.32172009999816 10.118 102.30772179999882 8.8 192.05046399999762 10.441 169.49315269999934 12.061 165.89438729999682 8.512 125.93104939999812 10.343 106.85645029999914 10.244 128.67739830000195 9.388 145.7104845000001 9.295 182.186493399999 8.432 172.69546629999988 10.093 157.36493309999997 9.383 122.43317439999792 11.115 165.06472249999848 9.373 179.2313462000015 10.075 126.57235620000273 7.669 117.31559989999818 8.831 190.70120949999986 7.595)
Error minima by case: (2.9997 5 7.2166 4 16.7252 7 10.7372 7 4.1577 10 30.6655 5 0.6042 6 11.1016 5 8.3127 7 90.6911 5 71.7227 6 62.9104 6 23.5081 7 0.4316 3 1.8802 7 2.3859 7 73.2031 7 0.3653 5 66.0081 7 13.6791 4 7.1817 8 24.4102 7 19.1469 5 26.9818 8 24.3453 5)
Average genome size in population (length): 72.388
Average program size in population (points): 73.388
Average percent parens in population: 0.014
Minimum age in population: 256.9485102192486
Maximum age in population: 261.4124511371663
Average age in population: 259.260025852084
Median age in population: 259.2866405764622
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.144
Error (vector) diversity:			 0.196
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 321217016
--- Timings ---
Current time: 1529616676442 milliseconds
Total Time:         656.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.4 seconds, 38.5%
Fitness Testing:    313.4 seconds, 47.8%
Report:              90.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_div} {:instruction print_integer} {:instruction float_div} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_integer integer_div print_integer float_div 57 float_flush float_min 56 57 integer_add integer_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3828.244732599997
Median total errors in population: 1405.8618000000001
Error averages by case: (108.57560590000026 7.529 103.56768880000149 10.277 145.57042629999864 11.059 126.28173980000116 10.214 110.39296389999929 11.238 153.33686859999912 9.447 140.51383880000182 7.636 122.65604079999824 10.145 106.69165149999843 8.839 189.3298376999974 10.455 171.7723746999988 12.098 164.88256649999684 8.566 130.2507487999977 10.372 108.32178239999895 10.265 130.64883160000187 9.421 148.06784050000098 9.342 184.6959829999985 8.488 172.83356270000036 10.157 158.60635500000046 9.406 121.07522289999785 11.151 165.18674439999828 9.373 185.2680750000016 10.099 126.56267820000296 7.725 122.46071819999787 8.841 190.94758659999982 7.604)
Error minima by case: (2.9997 5 7.2166 9 16.8005 8 10.7372 9 4.1577 10 39.0209 8 0.6042 6 15.457 9 8.3127 7 28.2169 9 71.7227 9 25.9975 7 23.5081 9 0.6613 8 1.8802 8 2.3859 8 73.2031 7 0.3653 8 66.0081 7 13.6791 10 7.0441 8 24.4102 8 19.1469 6 26.9818 8 32.7007 6)
Average genome size in population (length): 72.271
Average program size in population (points): 73.271
Average percent parens in population: 0.014
Minimum age in population: 258.3892395055554
Maximum age in population: 262.6775590757165
Average age in population: 260.6115614756969
Median age in population: 260.6117423975517
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.136
Error (vector) diversity:			 0.195
Behavioral diversity:				 0.238
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 323023791
--- Timings ---
Current time: 1529616680322 milliseconds
Total Time:         660.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.8 seconds, 38.4%
Fitness Testing:    315.3 seconds, 47.8%
Report:              90.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_cos} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction float_div} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos float_min integer_dup integer_dup_items float_cos in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer integer_dup_items float_sin print_float float_mult integer_swap integer_yank float_pop integer_yank float_div integer_yank float_dup float_div 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3436.390763699996
Median total errors in population: 1406.8618000000001
Error averages by case: (99.01350130000023 7.53 80.78907600000021 10.265 132.90968719999844 11.065 101.8476818000011 10.184 92.14131049999962 11.217 135.02343940000088 9.447 122.92280330000155 7.621 116.68968309999815 10.112 95.30116869999864 8.771 187.5071323999975 10.471 149.56165660000048 12.087 161.54791489999653 8.561 106.165969799998 10.338 86.29822089999966 10.251 108.30668920000186 9.423 125.94507499999901 9.333 162.68383279999978 8.46 154.30318789999916 10.116 137.07691999999824 9.39 117.45293609999776 11.137 146.60382039999848 9.358 171.79990210000162 10.075 121.87432140000286 7.714 110.26825119999789 8.765 173.03058169999983 7.635)
Error minima by case: (1.9997 5 6.7835 9 16.5742 9 19.4532 8 4.1577 10 1.4024 8 0.6042 6 15.4569 8 2.264 7 88.2678 9 81.7228 9 62.9103 7 36.5082 8 0.2366 9 29.3595 8 28.8538 8 96.2032 7 0.296 8 68.0082 8 13.679 9 6.8689 8 24.4102 8 19.1468 6 4.5949 7 7.7226 6)
Average genome size in population (length): 72.426
Average program size in population (points): 73.426
Average percent parens in population: 0.014
Minimum age in population: 259.5987845812748
Maximum age in population: 264.0387540818086
Average age in population: 262.006973330169
Median age in population: 262.0463969450936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.162
Error (vector) diversity:			 0.22
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 324834541
--- Timings ---
Current time: 1529616684142 milliseconds
Total Time:         664.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       255.2 seconds, 38.4%
Fitness Testing:    317.2 seconds, 47.8%
Report:              91.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction float_cos} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction float_div} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_max} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer integer_dup_items float_sin print_float float_mult float_cos integer_yank float_pop integer_yank float_div integer_yank float_dup float_div 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_max 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3578.778734499999
Median total errors in population: 1405.8618000000001
Error averages by case: (92.95073520000025 7.465 86.36593400000089 10.246 134.9951740999989 11.038 109.55533580000106 10.16 103.10504129999975 11.204 146.64751320000042 9.422 133.77861160000157 7.58 120.48341739999867 10.094 95.32165789999883 8.76 188.09310839999753 10.472 155.52456940000025 12.067 163.417661999997 8.523 113.42988379999797 10.347 97.42571779999973 10.267 113.96641480000154 9.396 132.6805198999995 9.28 168.7011941999994 8.427 166.6005660999994 10.08 142.1406882999984 9.366 119.32496379999832 11.112 158.8330661999984 9.335 175.4249029000014 10.062 124.9028551000024 7.723 111.40634189999832 8.772 184.91685939999982 7.588)
Error minima by case: (2.959 5 7.2166 7 16.5742 8 10.7372 7 4.1577 10 40.7632 8 1.6042 6 15.4569 8 8.2764 7 90.691 9 71.7227 7 62.9103 7 23.5081 8 1.8945 7 1.8802 7 2.3859 7 67.0 7 1.2929 8 66.0081 7 13.679 8 6.8689 8 24.4102 7 19.1468 6 26.9455 8 33.9601 7)
Average genome size in population (length): 72.109
Average program size in population (points): 73.109
Average percent parens in population: 0.014
Minimum age in population: 261.0291586327703
Maximum age in population: 265.4271303754001
Average age in population: 263.3700905689249
Median age in population: 263.4258955406715
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.148
Error (vector) diversity:			 0.212
Behavioral diversity:				 0.25
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 326637391
--- Timings ---
Current time: 1529616687909 milliseconds
Total Time:         667.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.5 seconds, 38.4%
Fitness Testing:    319.1 seconds, 47.8%
Report:              92.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction float_div} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer integer_dup_items float_sin print_float float_mult integer_swap integer_yank float_pop integer_yank float_div integer_yank float_dup float_div 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4028.3388025999952
Median total errors in population: 1407.8613
Error averages by case: (115.46104840000024 7.581 107.88429360000099 10.314 154.82012189999844 11.075 128.9404606000012 10.2 118.66669839999926 11.273 159.40780419999842 9.502 149.55387540000171 7.683 135.7884911999981 10.128 118.12522119999839 8.865 203.73740129999752 10.523 176.0461448999988 12.083 178.96623929999654 8.594 132.83281839999782 10.373 115.63989129999912 10.311 135.2984091000016 9.453 153.5620976000012 9.355 189.4015716999987 8.528 179.32866720000004 10.142 162.96186090000072 9.421 135.72901159999822 11.135 170.84346949999832 9.432 194.0394437000018 10.1 141.03653110000218 7.785 132.34961609999797 8.896 197.48561399999986 7.68)
Error minima by case: (1.9997 5 6.7835 5 16.9224 6 10.7371 6 5.0715 10 29.1223 6 0.6042 6 9.7923 6 7.3127 7 91.6902 7 71.7227 5 63.9095 7 23.5081 6 0.6613 5 1.8801 6 2.3858 6 73.2031 6 0.3653 6 66.0081 6 14.6782 6 4.9785 8 24.4102 6 20.146 6 25.9818 8 23.6254 6)
Average genome size in population (length): 71.856
Average program size in population (points): 72.856
Average percent parens in population: 0.014
Minimum age in population: 262.210349091824
Maximum age in population: 266.6576234220766
Average age in population: 264.7954969696948
Median age in population: 264.8334272238852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.163
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 328433841
--- Timings ---
Current time: 1529616691696 milliseconds
Total Time:         671.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.9 seconds, 38.4%
Fitness Testing:    321.0 seconds, 47.8%
Report:              92.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_pop} {:instruction integer_dup} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_dec} {:instruction float_min} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_mult} {:instruction print_integer} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_mult} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction integer_yank} {:instruction integer_mult} {:instruction 57} {:instruction float_flush} {:instruction float_mult} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_inc} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_pop integer_dup in2 float_rot float_frominteger float_dec integer_stackdepth float_swap 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_dec float_min print_integer print_integer float_rot integer_sub float_mult print_integer print_integer print_integer float_rot integer_sub float_mult print_integer integer_div integer_flush float_max integer_yank integer_mult 57 float_flush float_mult 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_inc in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3751.3983528999966
Median total errors in population: 1407.8613
Error averages by case: (104.4760845000002 7.542 96.41925010000115 10.249 142.9675132999983 11.026 118.33635430000105 10.193 107.19591879999912 11.26 150.3929270999999 9.48 137.56946240000158 7.67 125.84760829999776 10.077 103.99119969999853 8.856 194.2774168999976 10.469 163.9476177999993 12.05 169.08113039999668 8.541 122.25628729999795 10.324 104.52225179999898 10.247 123.70222220000203 9.404 141.22731249999924 9.311 176.9680442999988 8.441 169.86249539999997 10.125 151.60714089999925 9.38 125.29904359999733 11.113 162.20873119999843 9.427 181.87368260000167 10.055 129.87737420000317 7.773 119.83882319999769 8.856 188.1534600999998 7.63)
Error minima by case: (2.9138 5 7.7829 9 16.9224 9 19.4532 9 4.1577 10 34.4847 9 0.6042 6 15.4569 7 8.2272 7 55.1854 9 82.7222 8 57.4048 7 37.5076 9 0.6612 8 32.2119 8 31.7063 8 97.2027 7 0.2898 8 69.0076 8 13.679 9 7.3023 8 24.4102 8 5.6412 6 26.8963 8 32.7006 6)
Average genome size in population (length): 71.816
Average program size in population (points): 72.816
Average percent parens in population: 0.014
Minimum age in population: 263.4675171542098
Maximum age in population: 268.2363737747164
Average age in population: 266.1451470554056
Median age in population: 266.1780391120268
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.144
Error (vector) diversity:			 0.203
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 330229291
--- Timings ---
Current time: 1529616695538 milliseconds
Total Time:         675.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       259.2 seconds, 38.4%
Fitness Testing:    323.0 seconds, 47.8%
Report:              93.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_min} {:instruction integer_dup} {:instruction float_dec} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction print_float} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_sin} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction float_sub} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction integer_yank} {:instruction integer_mult} {:instruction 57} {:instruction float_flush} {:instruction float_mult} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 56} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_dec} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos float_min integer_dup float_dec float_max in2 float_rot float_frominteger float_dec integer_stackdepth print_float 92 print_float print_integer print_integer 7 integer_dec print_integer integer_pop float_sin print_float float_mult integer_swap float_sub print_float print_integer integer_div integer_flush float_max integer_yank integer_mult 57 float_flush float_mult 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_yank in1 integer_inc integer_max 57 56 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup integer_dec integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3661.8194237999955
Median total errors in population: 1407.8618000000001
Error averages by case: (98.73807690000022 7.59 91.65788970000061 10.249 138.2424316999987 11.039 114.81302390000103 10.195 104.17418810000001 11.248 147.6047947000001 9.452 134.96941590000142 7.657 121.52830719999871 10.102 99.10240659999934 8.827 189.90598259999774 10.47 160.8177969999997 12.069 165.86871459999722 8.554 118.6598604999981 10.34 102.15929469999975 10.238 119.72446150000125 9.424 137.71937359999959 9.315 173.2735099999994 8.469 168.19261629999988 10.113 147.11163559999898 9.4 120.93273539999838 11.106 160.11436599999863 9.397 178.59685680000143 10.099 126.28493320000217 7.724 115.51443659999867 8.863 186.53431469999984 7.638)
Error minima by case: (2.9997 5 7.7829 8 13.4738 8 20.2314 8 4.1577 10 15.0 8 0.6042 6 3.0 8 8.3127 7 37.0 8 80.0 8 62.9104 7 37.5076 9 0.4316 7 28.5417 8 30.7063 7 67.0 7 0.3653 8 69.0076 8 13.6791 7 2.8684 7 20.9948 8 19.1469 6 26.9818 8 32.7007 6)
Average genome size in population (length): 72.176
Average program size in population (points): 73.176
Average percent parens in population: 0.014
Minimum age in population: 264.4675171542098
Maximum age in population: 269.4749094045601
Average age in population: 267.5439769178161
Median age in population: 267.6110149924286
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.162
Error (vector) diversity:			 0.223
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 332033741
--- Timings ---
Current time: 1529616699450 milliseconds
Total Time:         679.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       260.6 seconds, 38.4%
Fitness Testing:    324.9 seconds, 47.8%
Report:              93.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_flush} {:instruction float_add} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_yank} {:instruction 57} {:instruction integer_mult} {:instruction 59} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 56} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_dec} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_max float_max integer_dup float_rot in2 float_rot float_frominteger float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_flush float_add print_float float_mult integer_swap float_shove integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_yank 57 integer_mult 59 float_min float_yank in1 integer_inc integer_max 57 56 float_dec float_inc float_mod float_mult integer_fromfloat integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup integer_dec integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3737.622012599997
Median total errors in population: 1407.8618000000001
Error averages by case: (105.54783510000024 7.609 97.7718263000009 10.248 141.26297959999883 10.986 118.52085850000104 10.143 107.63538889999947 11.206 150.0401714999998 9.444 137.6826785000014 7.644 121.01973749999846 10.101 103.77386669999898 8.819 191.48604509999765 10.477 165.93024519999966 12.051 165.5510665999972 8.531 122.54752779999804 10.359 104.50126329999931 10.23 124.85820630000158 9.412 142.24510269999985 9.288 178.83945199999934 8.455 169.18017479999958 10.074 153.68097739999962 9.378 121.61406569999825 11.113 161.50555919999854 9.354 180.89600680000135 10.017 126.08067330000229 7.715 118.68941259999825 8.878 187.5898911999999 7.639)
Error minima by case: (2.9997 5 7.7829 6 16.5742 6 19.4532 6 4.1577 10 16.0 6 0.6042 6 2.0 6 8.3127 7 36.0 7 81.0 7 62.9099 7 37.5076 7 0.6608 5 32.2119 6 31.7063 6 68.0 6 0.3653 6 69.0076 7 13.6786 6 6.8689 7 24.9944 6 19.1463 6 26.9818 8 32.7002 6)
Average genome size in population (length): 72.488
Average program size in population (points): 73.488
Average percent parens in population: 0.014
Minimum age in population: 265.7921788161436
Maximum age in population: 270.8875588333023
Average age in population: 268.8902616374007
Median age in population: 268.9468038291354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.156
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 333845941
--- Timings ---
Current time: 1529616703232 milliseconds
Total Time:         683.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       262.0 seconds, 38.4%
Fitness Testing:    326.8 seconds, 47.8%
Report:              94.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_mult} {:instruction tagged_669} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_dec} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction 94.9770219816973} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_mod in2 float_rot float_frominteger float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer print_integer 7 integer_dec print_integer float_rot print_integer float_rot float_sin float_yankdup integer_yank float_mult tagged_669 float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup integer_dec integer_shove integer_dup_times integer_dup_times integer_rot 94.9770219816973 integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3959.996828099996
Median total errors in population: 1406.8618000000001
Error averages by case: (119.28797750000024 7.529 103.548695100001 10.263 152.7915043999986 11.039 125.97040480000108 10.18 114.53438679999954 11.21 158.3946449999994 9.442 143.36062130000155 7.644 135.76581059999802 10.132 114.0329436999989 8.795 204.25605469999758 10.474 170.12279619999958 12.065 180.35126199999667 8.561 128.98873979999797 10.365 110.86700219999943 10.246 130.31242000000174 9.419 147.48335660000006 9.315 182.8903940999989 8.458 176.63639329999978 10.123 158.00023089999968 9.397 136.24016579999812 11.134 169.0110018999985 9.352 190.90516990000154 10.055 140.66376120000237 7.738 130.46770129999805 8.825 195.7173889999999 7.635)
Error minima by case: (2.969 5 7.7829 7 18.658 8 22.3549 7 4.1577 10 21.9791 8 0.6042 6 15.4569 7 8.2864 7 28.2169 8 82.7222 6 25.9975 7 37.5076 8 0.6612 7 31.2119 8 30.7063 8 97.2027 7 0.3653 8 69.0076 8 13.679 7 7.8684 8 19.0052 7 18.1469 6 15.9818 8 28.2993 6)
Average genome size in population (length): 72.32
Average program size in population (points): 73.32
Average percent parens in population: 0.014
Minimum age in population: 267.0693982031046
Maximum age in population: 272.2232963540341
Average age in population: 270.236160056875
Median age in population: 270.2862184728975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.16
Error (vector) diversity:			 0.223
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 335653991
--- Timings ---
Current time: 1529616707150 milliseconds
Total Time:         687.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.3 seconds, 38.3%
Fitness Testing:    328.8 seconds, 47.9%
Report:              94.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_dup} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_dec} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup float_dup in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_dup 57 float_flush float_dec 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3212.1495387999967
Median total errors in population: 1405.8618000000001
Error averages by case: (86.60410810000023 7.426 76.46138070000012 10.247 123.43033169999903 11.021 100.22835380000112 10.196 80.88133600000049 11.151 125.95804940000136 9.381 112.01699300000152 7.523 98.7232653999989 10.079 82.48612559999974 8.711 169.83619609999758 10.439 147.71397740000043 12.091 144.99004179999704 8.491 104.50057639999807 10.313 78.9491086000003 10.228 104.74945570000133 9.391 123.00065479999951 9.276 160.94526229999997 8.423 145.7503601999985 10.085 135.14823809999825 9.333 100.14546289999855 11.111 137.97230499999844 9.293 164.20730690000127 10.086 104.74134990000213 7.641 100.0404785999987 8.73 164.45882039999987 7.544)
Error minima by case: (2.9997 5 3.2378 9 16.7252 9 6.7583 9 4.1583 10 21.5552 8 0.6042 6 7.4121 7 8.3127 7 28.2169 8 75.7016 9 25.9975 7 27.487 9 0.2366 8 2.0987 8 1.593 7 77.182 7 0.3042 9 69.0075 8 13.6785 8 7.1817 7 24.4102 8 18.5708 6 15.5579 8 20.6558 6)
Average genome size in population (length): 72.139
Average program size in population (points): 73.139
Average percent parens in population: 0.014
Minimum age in population: 268.6230311850804
Maximum age in population: 273.6257541347778
Average age in population: 271.6445659584412
Median age in population: 271.6817608601586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.155
Error (vector) diversity:			 0.216
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 337457541
--- Timings ---
Current time: 1529616710896 milliseconds
Total Time:         690.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.7 seconds, 38.3%
Fitness Testing:    330.7 seconds, 47.9%
Report:              95.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_rot} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction float_div} {:instruction integer_yank} {:instruction print_float} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_mod} {:instruction float_tan} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos integer_swap integer_dup integer_dup integer_rot in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_float float_div integer_yank print_float float_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add integer_mod float_tan 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 integer_max 57 58 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3619.3534324999964
Median total errors in population: 1407.8613
Error averages by case: (97.42781510000023 7.475 94.37904990000077 10.209 136.8058209999986 10.992 116.20907670000112 10.149 101.09309259999988 11.176 143.53066420000042 9.394 131.76263950000143 7.599 117.50466259999853 10.069 98.90544529999906 8.732 186.3890181999976 10.424 162.81710969999978 12.05 161.118724099997 8.497 120.21837989999807 10.298 95.95511609999984 10.201 121.58625450000181 9.362 140.0238050999997 9.266 175.79653579999948 8.426 163.05307409999932 10.084 149.60269749999924 9.355 117.00896229999836 11.09 155.36844279999852 9.331 176.7861694000013 10.031 122.39435520000241 7.7 113.91051019999846 8.77 181.45601069999987 7.57)
Error minima by case: (2.9206 5 7.7829 8 11.566 8 19.4532 8 4.1577 10 14.887 8 0.6042 6 3.5491 7 8.2777 7 37.7831 8 80.8149 8 62.9103 7 37.5076 9 0.6613 7 28.5417 8 30.7063 8 67.2953 7 0.3653 9 69.0076 8 13.679 9 1.8684 7 19.087 8 19.1468 6 26.9468 8 32.7007 6)
Average genome size in population (length): 71.971
Average program size in population (points): 72.971
Average percent parens in population: 0.014
Minimum age in population: 270.8362951704518
Maximum age in population: 275.0552993210052
Average age in population: 273.1085411180676
Median age in population: 273.1601370817514
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.148
Error (vector) diversity:			 0.217
Behavioral diversity:				 0.252
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 339256866
--- Timings ---
Current time: 1529616714700 milliseconds
Total Time:         694.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       266.0 seconds, 38.3%
Fitness Testing:    332.5 seconds, 47.9%
Report:              95.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_pop} {:instruction print_float} {:instruction float_mult} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction float_add} {:instruction print_float} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_yank} {:instruction 9.397107751041943} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction integer_add} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 58} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 60} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer integer_dup_items float_pop print_float float_mult print_integer float_rot float_sin float_add print_float float_dec integer_swap integer_yank integer_yank integer_fromfloat float_mult integer_yank 9.397107751041943 integer_yank float_dup 57 float_flush float_min 56 57 float_add integer_add 57 integer_add float_add float_mod integer_add float_dec float_mod float_dup 57 integer_mult 58 in1 integer_inc integer_max 57 60 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3763.645761099996
Median total errors in population: 1407.8618000000001
Error averages by case: (106.77636020000025 7.596 103.12078650000127 10.25 146.21605859999826 10.971 123.50188610000116 10.162 106.02843969999954 11.221 147.47199450000005 9.447 136.3641784000017 7.67 116.7273718999984 10.072 108.97194599999868 8.813 188.7961740999975 10.509 170.65801629999947 12.067 161.9106211999966 8.596 127.43366099999774 10.351 99.7631369999997 10.238 130.77030870000203 9.44 148.14182209999998 9.322 183.56269369999885 8.483 166.84349399999914 10.057 158.42505769999968 9.391 117.763392699998 11.126 159.15686619999832 9.347 184.7973920000017 10.058 122.27903500000262 7.729 123.5419668999979 8.832 185.21310059999982 7.662)
Error minima by case: (2.9138 6 5.0 8 16.8005 8 10.7372 8 4.1577 10 28.028 8 0.6042 6 8.4641 8 8.2272 7 45.6905 9 71.7227 8 47.9098 7 23.5081 9 0.7634 7 1.8802 8 2.3859 8 73.2031 7 0.6958 8 66.0081 8 11.6785 9 7.0441 8 24.4102 8 3.8537 6 26.8963 8 21.7078 7)
Average genome size in population (length): 72.467
Average program size in population (points): 73.467
Average percent parens in population: 0.014
Minimum age in population: 271.848000996898
Maximum age in population: 276.318820677198
Average age in population: 274.4907938818896
Median age in population: 274.5505264144454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.17
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 341068616
--- Timings ---
Current time: 1529616718641 milliseconds
Total Time:         698.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       267.4 seconds, 38.3%
Fitness Testing:    334.5 seconds, 47.9%
Report:              96.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction integer_max} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction float_mult} {:instruction print_integer} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 57} {:instruction 58} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_rot} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min float_rot integer_dup_items float_max in2 float_rot integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer integer_max print_integer 7 integer_dec print_integer print_integer float_rot integer_sub float_mult print_integer 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 57 58 integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_rot float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3907.694589999995
Median total errors in population: 1407.86155
Error averages by case: (111.43521800000025 7.554 105.84388410000112 10.255 149.73830129999865 11.004 125.34884060000105 10.18 113.38374379999958 11.189 154.18067379999937 9.443 143.67844270000143 7.656 129.70916599999833 10.109 113.5290168999986 8.833 200.32804419999763 10.495 172.32435259999906 12.055 173.87773539999716 8.543 129.4684996999981 10.341 107.44421109999948 10.227 132.54125820000172 9.404 149.67578540000076 9.324 185.07140409999866 8.476 173.4434472000003 10.101 160.2328482000001 9.389 129.47913329999795 11.092 165.88796799999844 9.386 188.07075150000153 10.066 134.82503480000236 7.761 127.283175599998 8.831 191.54765349999985 7.632)
Error minima by case: (2.9997 5 7.2166 6 11.566 7 10.7372 7 5.0657 10 13.9791 7 0.6042 6 2.0 7 8.3127 7 36.0 7 71.7227 6 63.9094 6 23.5081 8 0.6612 6 1.8802 7 2.3859 7 67.0 7 0.3653 7 66.0081 8 14.6781 6 1.8684 8 9.6698 7 20.1459 6 7.9818 8 20.2993 6)
Average genome size in population (length): 71.695
Average program size in population (points): 72.695
Average percent parens in population: 0.014
Minimum age in population: 272.848000996898
Maximum age in population: 277.904808523378
Average age in population: 275.9110538173281
Median age in population: 275.9597344846904
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.165
Error (vector) diversity:			 0.232
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 342861141
--- Timings ---
Current time: 1529616722409 milliseconds
Total Time:         702.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       268.8 seconds, 38.3%
Fitness Testing:    336.5 seconds, 47.9%
Report:              97.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction print_float} {:instruction print_integer} {:instruction integer_div} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_min} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_mult} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer print_float print_integer integer_div integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_min float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_mult integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3661.1290441999977
Median total errors in population: 1405.8619000000003
Error averages by case: (94.62557450000025 7.412 93.11844700000054 10.247 137.67659219999885 11.004 116.05818170000116 10.167 104.60866759999962 11.174 148.08705970000003 9.446 133.98178530000158 7.552 123.74093759999842 10.081 97.69148559999917 8.725 190.72141689999742 10.461 160.6139485 12.067 166.2253275999967 8.517 119.870584099998 10.319 101.47281259999957 10.267 120.4050739000015 9.365 137.95218719999994 9.27 173.6473741999995 8.423 167.5998113999993 10.076 148.26547169999915 9.352 122.24458359999807 11.091 159.8842437999984 9.291 176.81377070000138 10.037 126.85487060000261 7.74 114.55202029999842 8.735 186.00581589999993 7.592)
Error minima by case: (2.9997 5 7.2166 6 16.9224 7 10.7372 7 4.0717 10 39.0208 8 0.6042 6 15.457 8 8.3127 7 90.6911 7 71.7227 6 62.9104 8 23.5081 8 0.6612 7 1.8802 8 2.3859 8 73.2031 7 0.3653 8 66.0081 8 13.6791 7 7.3023 8 24.4102 7 19.1469 6 26.9818 7 32.7006 6)
Average genome size in population (length): 71.698
Average program size in population (points): 72.698
Average percent parens in population: 0.014
Minimum age in population: 274.6772634785252
Maximum age in population: 279.523042952204
Average age in population: 277.2854699823231
Median age in population: 277.3180953732096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.15
Error (vector) diversity:			 0.226
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 344653716
--- Timings ---
Current time: 1529616726228 milliseconds
Total Time:         706.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       270.1 seconds, 38.3%
Fitness Testing:    338.4 seconds, 47.9%
Report:              97.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_pop} {:instruction print_float} {:instruction float_mult} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction float_add} {:instruction print_float} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_yank} {:instruction 9.397107751041943} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction integer_add} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 60} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_dup_times float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec float_min integer_dup integer_dup_items float_max in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer integer_dup_items float_pop print_float float_mult print_integer float_rot float_sin float_add print_float float_dec integer_swap integer_yank integer_yank integer_fromfloat float_mult integer_yank 9.397107751041943 integer_yank float_dup 57 float_flush float_min 56 57 float_add integer_add 57 integer_add float_add float_mod integer_add float_dec float_mod float_dup 57 integer_mult 57 in1 integer_inc integer_max 57 60 float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3661.377684899997
Median total errors in population: 1405.8618000000001
Error averages by case: (103.21498620000025 7.498 98.43320390000085 10.24 137.99100199999856 11.008 117.17404470000116 10.137 105.21130199999953 11.217 144.86361650000018 9.435 135.8710199000016 7.635 115.32878869999828 10.087 102.95647689999869 8.773 186.04574139999735 10.453 166.3426919999994 12.038 158.31827089999675 8.526 121.22679179999798 10.306 97.13055799999968 10.245 125.45384270000179 9.374 143.77371200000007 9.283 179.2346921999992 8.427 164.4444442999995 10.066 153.21661899999964 9.355 114.19393639999811 11.091 156.7300086999984 9.363 177.8447521000015 10.039 119.59988630000265 7.699 115.25412369999842 8.787 182.83617259999986 7.605)
Error minima by case: (2.9111 5 7.7834 4 17.4738 5 19.4532 5 4.1577 10 15.0 8 0.6042 6 3.0 8 8.2264 7 28.2169 8 80.0 4 25.9975 7 37.5081 5 0.6613 7 28.5417 4 31.0 4 67.0 4 0.3653 8 69.0081 4 13.6791 7 7.7763 8 15.4872 4 19.1469 6 26.8955 7 32.7007 6)
Average genome size in population (length): 71.604
Average program size in population (points): 72.604
Average percent parens in population: 0.014
Minimum age in population: 275.8407443378395
Maximum age in population: 280.6311754832946
Average age in population: 278.6598693183876
Median age in population: 278.6921766408205
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.141
Error (vector) diversity:			 0.201
Behavioral diversity:				 0.238
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 346444091
--- Timings ---
Current time: 1529616730164 milliseconds
Total Time:         710.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       271.5 seconds, 38.2%
Fitness Testing:    340.3 seconds, 47.9%
Report:              98.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_swap} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction tagged_547} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_div} {:instruction integer_yank} {:instruction float_dup} {:instruction float_div} {:instruction 57} {:instruction integer_yank} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_dec} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_yankdup} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 57} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction float_dup} {:instruction float_inc} {:instruction float_mod} {:instruction float_dec} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_yankdup float_swap float_min integer_dup integer_dup_items float_rot in2 float_rot float_frominteger float_dec integer_stackdepth tagged_547 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_div integer_yank float_dup float_div 57 integer_yank integer_pop integer_yank float_dup 57 float_flush float_dec 56 57 integer_add float_yankdup integer_add 57 integer_add float_add float_mod float_dup 57 integer_mult 57 float_min float_yank in1 integer_inc integer_max 57 58 float_dup float_inc float_mod float_dec float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_yankdup print_float integer_shove integer_dup_times integer_dup_times integer_rot integer_rot integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3705.7433692999953
Median total errors in population: 1406.8618000000001
Error averages by case: (102.18640900000028 7.555 96.27788970000107 10.266 143.0960095999985 11.043 118.88299200000115 10.21 103.69258769999945 11.253 147.96614290000014 9.472 134.67893490000174 7.702 119.7388548999983 10.092 103.51336679999862 8.873 188.14591259999753 10.466 163.84636719999978 12.06 163.95243139999678 8.573 123.06898509999793 10.352 102.41092869999926 10.269 123.31063690000192 9.44 140.6371999999998 9.324 176.73597179999908 8.479 168.09853649999945 10.151 151.58663739999918 9.42 120.06692019999784 11.124 160.37488009999842 9.427 182.2738365000015 10.101 124.45102430000287 7.778 120.43165029999803 8.916 186.3012627999998 7.671)
Error minima by case: (2.9997 5 7.7829 8 0.6335 8 18.4532 9 0.7349 10 39.0209 8 0.6042 6 15.4509 8 8.3127 7 90.6905 9 82.7222 8 62.9099 7 37.5076 9 0.6613 8 28.4743 8 28.6943 8 97.2027 7 0.3653 8 69.0076 8 13.6786 9 7.3023 8 6.8875 8 19.1463 6 26.9818 8 32.7007 6)
Average genome size in population (length): 71.977
Average program size in population (points): 72.977
Average percent parens in population: 0.014
Minimum age in population: 276.8407443378395
Maximum age in population: 282.2164798970945
Average age in population: 280.0403987451647
Median age in population: 280.0722374169306
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.167
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 348243616
--- Timings ---
Current time: 1529616733965 milliseconds
Total Time:         713.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       272.9 seconds, 38.2%
Fitness Testing:    342.2 seconds, 47.9%
Report:              98.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_cos} {:instruction float_mod} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_div} {:instruction integer_flush} {:instruction float_max} {:instruction integer_shove} {:instruction float_sin} {:instruction integer_dec} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_sin} {:instruction float_add} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dup} {:instruction 57} {:instruction float_flush} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction float_mod} {:instruction tag_float_821} {:instruction 57} {:instruction integer_mult} {:instruction 46} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_dup_times} {:instruction print_float} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction tagged_977} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos float_cos float_mod in2 float_rot float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot integer_sub print_integer integer_div integer_flush float_max integer_shove float_sin integer_dec float_mult integer_swap integer_yank float_sin float_add print_float float_mult integer_swap float_rot integer_yank float_dup 57 float_flush float_min 56 57 integer_add float_add integer_add 57 integer_add float_add float_mod tag_float_821 57 integer_mult 46 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc integer_inc integer_fromfloat 57 integer_inc integer_rot float_dup_times print_float integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank tagged_977 float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3840.329892799996
Median total errors in population: 1407.8618000000001
Error averages by case: (110.66598940000027 7.606 99.1513559000013 10.318 145.64691229999866 11.073 120.86020260000122 10.24 111.18787459999933 11.256 153.44021349999957 9.528 141.24383480000165 7.712 130.36491919999818 10.122 108.5420236999984 8.913 198.60126929999748 10.543 167.13890349999934 12.121 173.6999867999967 8.655 124.81170029999782 10.4 106.9980852999993 10.308 126.2021238000019 9.495 144.54363629999992 9.388 180.04510739999876 8.552 172.4752135999997 10.168 153.99705739999956 9.475 130.12104579999792 11.153 164.8336973999985 9.445 185.0603239000015 10.13 135.38603190000262 7.842 123.34900359999813 8.938 190.8593804999998 7.723)
Error minima by case: (2.9206 5 7.7834 9 11.566 9 19.4532 9 4.1577 10 39.0209 8 0.6042 6 15.4568 8 8.2777 7 90.6909 9 82.7227 9 62.9102 7 37.5081 9 0.6613 8 28.5417 8 31.7063 8 97.2031 7 0.3653 8 69.0081 8 13.6789 9 1.8684 8 19.087 8 19.1467 6 26.9468 8 32.7007 6)
Average genome size in population (length): 72.194
Average program size in population (points): 73.194
Average percent parens in population: 0.014
Minimum age in population: 278.8974387306319
Maximum age in population: 283.4723291275359
Average age in population: 281.4711724470213
Median age in population: 281.500320627301
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.167
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 350048641
--- Timings ---
Current time: 1529616737830 milliseconds
Total Time:         717.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       274.2 seconds, 38.2%
Fitness Testing:    344.1 seconds, 48.0%
Report:              99.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 59994.68829999994
Test mean error for best: 29.99734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -36.0923319919 | Program output: -40.0920612939
Correct output: 83.8755230202  | Program output: 75.0920657    
Correct output: 17.5659592301  | Program output: -37.0920657   
Correct output: 80.3549464456  | Program output: 46.0920657    
Correct output: 18.9343380135  | Program output: 24.0920658    
Correct output: -40.1129564408 | Program output: 14.0920658    
Correct output: 58.6042464959  | Program output: 98.0920658    
Correct output: -20.5490699326 | Program output: -4.0920658    
Correct output: -43.7793378574 | Program output: -53.0920657   
Correct output: -129.7831210298 | Program output: -38.0920658   
Correct output: 162.8148987114 | Program output: 79.0920657    
Correct output: -132.002465512 | Program output: -68.0920658   
Correct output: 114.6003035226 | Program output: 76.0920657    
Correct output: -1.7534077088  | Program output: 2.0920658     
Correct output: 89.2119408379  | Program output: 50.0920657    
Correct output: 88.7062676802  | Program output: 30.0920657    
Correct output: 164.295308609  | Program output: 66.0920657    
Correct output: -0.7267472667  | Program output: 76.0920658    
Correct output: 157.1002894768 | Program output: 87.0920657    
Correct output: -95.7711719159 | Program output: -81.0920658   
Correct output: 7.8684219635   | Program output: 76.0920658    
Correct output: 25.0869728078  | Program output: -73.0920657   
Correct output: -80.2389227568 | Program output: -60.0920658   
Correct output: -46.1102240047 | Program output: -74.0920657   
Correct output: -33.792764183  | Program output: 63.0920658    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction integer_mult} {:instruction in2} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction 92} {:instruction print_float} {:instruction print_integer} {:instruction print_integer} {:instruction 7} {:instruction integer_dec} {:instruction print_integer} {:instruction float_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_yankdup} {:instruction float_shove} {:instruction 57} {:instruction print_float} {:instruction float_min} {:instruction 56} {:instruction 57} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction 57} {:instruction integer_add} {:instruction float_dup} {:instruction 57} {:instruction integer_mult} {:instruction 47} {:instruction float_min} {:instruction float_yank} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction 57} {:instruction 58} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_inc} {:instruction tagged_100} {:instruction integer_fromfloat} {:instruction 57} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_cos} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_yank} {:instruction float_flush} {:instruction print_integer})
Best program: (float_cos float_cos float_div integer_mult in2 float_cos float_frominteger float_dec integer_stackdepth integer_rot 92 print_float print_integer print_integer 7 integer_dec print_integer float_rot float_sin print_float float_cos integer_swap integer_fromfloat float_mult integer_yank float_pop integer_yankdup float_shove 57 print_float float_min 56 57 integer_add float_add integer_add 57 integer_add float_dup 57 integer_mult 47 float_min float_yank in1 integer_inc integer_max 57 58 in1 float_inc float_mod float_mult float_inc tagged_100 integer_fromfloat 57 integer_inc integer_rot float_yankdup float_cos integer_shove integer_dup_times integer_dup_times integer_rot float_cos integer_yank float_flush print_integer)
Errors: [3.9997 6 8.7835 10 54.658 11 34.2629 10 5.1577 11 54.205 9 39.4878 7 16.457 10 9.3127 8 91.6911 10 83.7228 12 63.9104 8 38.5082 10 3.8455 10 39.1199 9 58.6142 9 98.2032 8 76.8188 10 70.0082 9 14.6791 11 68.2236 9 98.179 10 20.1469 7 27.9818 8 96.8848 7]
Total: 1405.8618000000001
Mean: 28.117235
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3606.3972192999963
Median total errors in population: 1407.8618000000001
Error averages by case: (96.35080090000024 7.593 91.67554460000099 10.262 137.80745719999854 11.017 114.56180460000115 10.205 100.30977519999954 11.192 144.71753030000008 9.495 130.93619400000148 7.611 117.57755419999859 10.083 97.82319309999887 8.845 185.88105029999755 10.525 159.89531059999962 12.109 161.29620909999696 8.568 118.53526389999793 10.368 98.65844169999937 10.3 119.15569710000177 9.47 136.79845389999957 9.328 173.00923449999877 8.497 164.28427229999997 10.09 147.45003459999924 9.421 117.17061559999837 11.12 156.5502172999985 9.33 176.95077880000142 10.101 121.79271180000237 7.793 114.63088579999832 8.871 182.73018789999983 7.654)
Error minima by case: (2.9735 5 7.7829 9 11.566 9 23.3549 8 4.1577 10 39.2476 8 0.6042 6 15.4569 8 8.2864 7 90.691 9 82.7222 9 62.9103 7 37.5076 9 0.7944 8 32.2119 8 31.7063 8 97.2027 7 0.9605 8 69.0076 9 13.679 9 1.8684 8 19.087 8 19.1468 6 26.9555 8 31.873 6)
Average genome size in population (length): 72.33
Average program size in population (points): 73.33
Average percent parens in population: 0.014
Minimum age in population: 280.185731138166
Maximum age in population: 284.8528196007966
Average age in population: 282.8496090549152
Median age in population: 282.9199396347594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.157
Error (vector) diversity:			 0.226
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 351857141
--- Timings ---
Current time: 1529616741658 milliseconds
Total Time:         721.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       275.6 seconds, 38.2%
Fitness Testing:    346.1 seconds, 48.0%
Report:              99.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
